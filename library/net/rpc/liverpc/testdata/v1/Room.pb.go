// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: v1/Room.proto

package v1

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type RoomGetInfoByIdReq struct {
	Ids    []int64  `protobuf:"varint,1,rep,packed,name=ids,proto3" json:"ids,omitempty"`
	Fields []string `protobuf:"bytes,2,rep,name=fields,proto3" json:"fields,omitempty"`
}

func (m *RoomGetInfoByIdReq) Reset()         { *m = RoomGetInfoByIdReq{} }
func (m *RoomGetInfoByIdReq) String() string { return proto.CompactTextString(m) }
func (*RoomGetInfoByIdReq) ProtoMessage()    {}
func (*RoomGetInfoByIdReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_Room_ebfa725c6fe265e6, []int{0}
}
func (m *RoomGetInfoByIdReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RoomGetInfoByIdReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RoomGetInfoByIdReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *RoomGetInfoByIdReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RoomGetInfoByIdReq.Merge(dst, src)
}
func (m *RoomGetInfoByIdReq) XXX_Size() int {
	return m.Size()
}
func (m *RoomGetInfoByIdReq) XXX_DiscardUnknown() {
	xxx_messageInfo_RoomGetInfoByIdReq.DiscardUnknown(m)
}

var xxx_messageInfo_RoomGetInfoByIdReq proto.InternalMessageInfo

func (m *RoomGetInfoByIdReq) GetIds() []int64 {
	if m != nil {
		return m.Ids
	}
	return nil
}

func (m *RoomGetInfoByIdReq) GetFields() []string {
	if m != nil {
		return m.Fields
	}
	return nil
}

type RoomGetInfoByIdResp struct {
	Code int64                                    `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg  string                                   `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Data map[string]*RoomGetInfoByIdResp_RoomInfo `protobuf:"bytes,3,rep,name=data,proto3" json:"data,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *RoomGetInfoByIdResp) Reset()         { *m = RoomGetInfoByIdResp{} }
func (m *RoomGetInfoByIdResp) String() string { return proto.CompactTextString(m) }
func (*RoomGetInfoByIdResp) ProtoMessage()    {}
func (*RoomGetInfoByIdResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_Room_ebfa725c6fe265e6, []int{1}
}
func (m *RoomGetInfoByIdResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RoomGetInfoByIdResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RoomGetInfoByIdResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *RoomGetInfoByIdResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RoomGetInfoByIdResp.Merge(dst, src)
}
func (m *RoomGetInfoByIdResp) XXX_Size() int {
	return m.Size()
}
func (m *RoomGetInfoByIdResp) XXX_DiscardUnknown() {
	xxx_messageInfo_RoomGetInfoByIdResp.DiscardUnknown(m)
}

var xxx_messageInfo_RoomGetInfoByIdResp proto.InternalMessageInfo

func (m *RoomGetInfoByIdResp) GetCode() int64 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *RoomGetInfoByIdResp) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func (m *RoomGetInfoByIdResp) GetData() map[string]*RoomGetInfoByIdResp_RoomInfo {
	if m != nil {
		return m.Data
	}
	return nil
}

type RoomGetInfoByIdResp_RoomInfo struct {
	Roomid           int64  `protobuf:"varint,1,opt,name=roomid,proto3" json:"roomid,omitempty"`
	Uname            string `protobuf:"bytes,2,opt,name=uname,proto3" json:"uname,omitempty"`
	Cover            string `protobuf:"bytes,3,opt,name=cover,proto3" json:"cover,omitempty"`
	Uid              int64  `protobuf:"varint,4,opt,name=uid,proto3" json:"uid,omitempty"`
	LiveTime         string `protobuf:"bytes,5,opt,name=live_time,json=liveTime,proto3" json:"live_time,omitempty"`
	RoundStatus      int64  `protobuf:"varint,6,opt,name=round_status,json=roundStatus,proto3" json:"round_status,omitempty"`
	OnFlag           int64  `protobuf:"varint,7,opt,name=on_flag,json=onFlag,proto3" json:"on_flag,omitempty"`
	Title            string `protobuf:"bytes,8,opt,name=title,proto3" json:"title,omitempty"`
	LockStatus       string `protobuf:"bytes,9,opt,name=lock_status,json=lockStatus,proto3" json:"lock_status,omitempty"`
	HiddenStatus     string `protobuf:"bytes,10,opt,name=hidden_status,json=hiddenStatus,proto3" json:"hidden_status,omitempty"`
	UserCover        string `protobuf:"bytes,11,opt,name=user_cover,json=userCover,proto3" json:"user_cover,omitempty"`
	ShortId          int64  `protobuf:"varint,12,opt,name=short_id,json=shortId,proto3" json:"short_id,omitempty"`
	Online           int64  `protobuf:"varint,13,opt,name=online,proto3" json:"online,omitempty"`
	Area             int64  `protobuf:"varint,14,opt,name=area,proto3" json:"area,omitempty"`
	AreaV2Id         int64  `protobuf:"varint,15,opt,name=area_v2_id,json=areaV2Id,proto3" json:"area_v2_id,omitempty"`
	AreaV2ParentId   int64  `protobuf:"varint,16,opt,name=area_v2_parent_id,json=areaV2ParentId,proto3" json:"area_v2_parent_id,omitempty"`
	AreaV2Name       string `protobuf:"bytes,17,opt,name=area_v2_name,json=areaV2Name,proto3" json:"area_v2_name,omitempty"`
	AreaV2ParentName string `protobuf:"bytes,18,opt,name=area_v2_parent_name,json=areaV2ParentName,proto3" json:"area_v2_parent_name,omitempty"`
	Attentions       int64  `protobuf:"varint,19,opt,name=attentions,proto3" json:"attentions,omitempty"`
}

func (m *RoomGetInfoByIdResp_RoomInfo) Reset()         { *m = RoomGetInfoByIdResp_RoomInfo{} }
func (m *RoomGetInfoByIdResp_RoomInfo) String() string { return proto.CompactTextString(m) }
func (*RoomGetInfoByIdResp_RoomInfo) ProtoMessage()    {}
func (*RoomGetInfoByIdResp_RoomInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_Room_ebfa725c6fe265e6, []int{1, 1}
}
func (m *RoomGetInfoByIdResp_RoomInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RoomGetInfoByIdResp_RoomInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RoomGetInfoByIdResp_RoomInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *RoomGetInfoByIdResp_RoomInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RoomGetInfoByIdResp_RoomInfo.Merge(dst, src)
}
func (m *RoomGetInfoByIdResp_RoomInfo) XXX_Size() int {
	return m.Size()
}
func (m *RoomGetInfoByIdResp_RoomInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_RoomGetInfoByIdResp_RoomInfo.DiscardUnknown(m)
}

var xxx_messageInfo_RoomGetInfoByIdResp_RoomInfo proto.InternalMessageInfo

func (m *RoomGetInfoByIdResp_RoomInfo) GetRoomid() int64 {
	if m != nil {
		return m.Roomid
	}
	return 0
}

func (m *RoomGetInfoByIdResp_RoomInfo) GetUname() string {
	if m != nil {
		return m.Uname
	}
	return ""
}

func (m *RoomGetInfoByIdResp_RoomInfo) GetCover() string {
	if m != nil {
		return m.Cover
	}
	return ""
}

func (m *RoomGetInfoByIdResp_RoomInfo) GetUid() int64 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *RoomGetInfoByIdResp_RoomInfo) GetLiveTime() string {
	if m != nil {
		return m.LiveTime
	}
	return ""
}

func (m *RoomGetInfoByIdResp_RoomInfo) GetRoundStatus() int64 {
	if m != nil {
		return m.RoundStatus
	}
	return 0
}

func (m *RoomGetInfoByIdResp_RoomInfo) GetOnFlag() int64 {
	if m != nil {
		return m.OnFlag
	}
	return 0
}

func (m *RoomGetInfoByIdResp_RoomInfo) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *RoomGetInfoByIdResp_RoomInfo) GetLockStatus() string {
	if m != nil {
		return m.LockStatus
	}
	return ""
}

func (m *RoomGetInfoByIdResp_RoomInfo) GetHiddenStatus() string {
	if m != nil {
		return m.HiddenStatus
	}
	return ""
}

func (m *RoomGetInfoByIdResp_RoomInfo) GetUserCover() string {
	if m != nil {
		return m.UserCover
	}
	return ""
}

func (m *RoomGetInfoByIdResp_RoomInfo) GetShortId() int64 {
	if m != nil {
		return m.ShortId
	}
	return 0
}

func (m *RoomGetInfoByIdResp_RoomInfo) GetOnline() int64 {
	if m != nil {
		return m.Online
	}
	return 0
}

func (m *RoomGetInfoByIdResp_RoomInfo) GetArea() int64 {
	if m != nil {
		return m.Area
	}
	return 0
}

func (m *RoomGetInfoByIdResp_RoomInfo) GetAreaV2Id() int64 {
	if m != nil {
		return m.AreaV2Id
	}
	return 0
}

func (m *RoomGetInfoByIdResp_RoomInfo) GetAreaV2ParentId() int64 {
	if m != nil {
		return m.AreaV2ParentId
	}
	return 0
}

func (m *RoomGetInfoByIdResp_RoomInfo) GetAreaV2Name() string {
	if m != nil {
		return m.AreaV2Name
	}
	return ""
}

func (m *RoomGetInfoByIdResp_RoomInfo) GetAreaV2ParentName() string {
	if m != nil {
		return m.AreaV2ParentName
	}
	return ""
}

func (m *RoomGetInfoByIdResp_RoomInfo) GetAttentions() int64 {
	if m != nil {
		return m.Attentions
	}
	return 0
}

type RoomGetInfoReq struct {
	Id   int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	From string `protobuf:"bytes,2,opt,name=from,proto3" json:"from,omitempty"`
}

func (m *RoomGetInfoReq) Reset()         { *m = RoomGetInfoReq{} }
func (m *RoomGetInfoReq) String() string { return proto.CompactTextString(m) }
func (*RoomGetInfoReq) ProtoMessage()    {}
func (*RoomGetInfoReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_Room_ebfa725c6fe265e6, []int{2}
}
func (m *RoomGetInfoReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RoomGetInfoReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RoomGetInfoReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *RoomGetInfoReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RoomGetInfoReq.Merge(dst, src)
}
func (m *RoomGetInfoReq) XXX_Size() int {
	return m.Size()
}
func (m *RoomGetInfoReq) XXX_DiscardUnknown() {
	xxx_messageInfo_RoomGetInfoReq.DiscardUnknown(m)
}

var xxx_messageInfo_RoomGetInfoReq proto.InternalMessageInfo

func (m *RoomGetInfoReq) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *RoomGetInfoReq) GetFrom() string {
	if m != nil {
		return m.From
	}
	return ""
}

type RoomGetInfoResp struct {
	Code int64                 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg  string                `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Data *RoomGetInfoResp_Data `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *RoomGetInfoResp) Reset()         { *m = RoomGetInfoResp{} }
func (m *RoomGetInfoResp) String() string { return proto.CompactTextString(m) }
func (*RoomGetInfoResp) ProtoMessage()    {}
func (*RoomGetInfoResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_Room_ebfa725c6fe265e6, []int{3}
}
func (m *RoomGetInfoResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RoomGetInfoResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RoomGetInfoResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *RoomGetInfoResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RoomGetInfoResp.Merge(dst, src)
}
func (m *RoomGetInfoResp) XXX_Size() int {
	return m.Size()
}
func (m *RoomGetInfoResp) XXX_DiscardUnknown() {
	xxx_messageInfo_RoomGetInfoResp.DiscardUnknown(m)
}

var xxx_messageInfo_RoomGetInfoResp proto.InternalMessageInfo

func (m *RoomGetInfoResp) GetCode() int64 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *RoomGetInfoResp) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func (m *RoomGetInfoResp) GetData() *RoomGetInfoResp_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

type RoomGetInfoResp_PendantWithDesc struct {
	Name     string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Position int64  `protobuf:"varint,2,opt,name=position,proto3" json:"position,omitempty"`
	Value    string `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
	Desc     string `protobuf:"bytes,4,opt,name=desc,proto3" json:"desc,omitempty"`
}

func (m *RoomGetInfoResp_PendantWithDesc) Reset()         { *m = RoomGetInfoResp_PendantWithDesc{} }
func (m *RoomGetInfoResp_PendantWithDesc) String() string { return proto.CompactTextString(m) }
func (*RoomGetInfoResp_PendantWithDesc) ProtoMessage()    {}
func (*RoomGetInfoResp_PendantWithDesc) Descriptor() ([]byte, []int) {
	return fileDescriptor_Room_ebfa725c6fe265e6, []int{3, 0}
}
func (m *RoomGetInfoResp_PendantWithDesc) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RoomGetInfoResp_PendantWithDesc) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RoomGetInfoResp_PendantWithDesc.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *RoomGetInfoResp_PendantWithDesc) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RoomGetInfoResp_PendantWithDesc.Merge(dst, src)
}
func (m *RoomGetInfoResp_PendantWithDesc) XXX_Size() int {
	return m.Size()
}
func (m *RoomGetInfoResp_PendantWithDesc) XXX_DiscardUnknown() {
	xxx_messageInfo_RoomGetInfoResp_PendantWithDesc.DiscardUnknown(m)
}

var xxx_messageInfo_RoomGetInfoResp_PendantWithDesc proto.InternalMessageInfo

func (m *RoomGetInfoResp_PendantWithDesc) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *RoomGetInfoResp_PendantWithDesc) GetPosition() int64 {
	if m != nil {
		return m.Position
	}
	return 0
}

func (m *RoomGetInfoResp_PendantWithDesc) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func (m *RoomGetInfoResp_PendantWithDesc) GetDesc() string {
	if m != nil {
		return m.Desc
	}
	return ""
}

type RoomGetInfoResp_Pendant struct {
	Name     string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Position int64  `protobuf:"varint,2,opt,name=position,proto3" json:"position,omitempty"`
	Value    string `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *RoomGetInfoResp_Pendant) Reset()         { *m = RoomGetInfoResp_Pendant{} }
func (m *RoomGetInfoResp_Pendant) String() string { return proto.CompactTextString(m) }
func (*RoomGetInfoResp_Pendant) ProtoMessage()    {}
func (*RoomGetInfoResp_Pendant) Descriptor() ([]byte, []int) {
	return fileDescriptor_Room_ebfa725c6fe265e6, []int{3, 1}
}
func (m *RoomGetInfoResp_Pendant) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RoomGetInfoResp_Pendant) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RoomGetInfoResp_Pendant.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *RoomGetInfoResp_Pendant) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RoomGetInfoResp_Pendant.Merge(dst, src)
}
func (m *RoomGetInfoResp_Pendant) XXX_Size() int {
	return m.Size()
}
func (m *RoomGetInfoResp_Pendant) XXX_DiscardUnknown() {
	xxx_messageInfo_RoomGetInfoResp_Pendant.DiscardUnknown(m)
}

var xxx_messageInfo_RoomGetInfoResp_Pendant proto.InternalMessageInfo

func (m *RoomGetInfoResp_Pendant) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *RoomGetInfoResp_Pendant) GetPosition() int64 {
	if m != nil {
		return m.Position
	}
	return 0
}

func (m *RoomGetInfoResp_Pendant) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

type RoomGetInfoResp_Pendants struct {
	Frame       *RoomGetInfoResp_PendantWithDesc `protobuf:"bytes,1,opt,name=frame,proto3" json:"frame,omitempty"`
	Badge       *RoomGetInfoResp_PendantWithDesc `protobuf:"bytes,2,opt,name=badge,proto3" json:"badge,omitempty"`
	MobileFrame *RoomGetInfoResp_Pendant         `protobuf:"bytes,3,opt,name=mobile_frame,json=mobileFrame,proto3" json:"mobile_frame,omitempty"`
	MobileBadge *RoomGetInfoResp_Pendant         `protobuf:"bytes,4,opt,name=mobile_badge,json=mobileBadge,proto3" json:"mobile_badge,omitempty"`
}

func (m *RoomGetInfoResp_Pendants) Reset()         { *m = RoomGetInfoResp_Pendants{} }
func (m *RoomGetInfoResp_Pendants) String() string { return proto.CompactTextString(m) }
func (*RoomGetInfoResp_Pendants) ProtoMessage()    {}
func (*RoomGetInfoResp_Pendants) Descriptor() ([]byte, []int) {
	return fileDescriptor_Room_ebfa725c6fe265e6, []int{3, 2}
}
func (m *RoomGetInfoResp_Pendants) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RoomGetInfoResp_Pendants) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RoomGetInfoResp_Pendants.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *RoomGetInfoResp_Pendants) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RoomGetInfoResp_Pendants.Merge(dst, src)
}
func (m *RoomGetInfoResp_Pendants) XXX_Size() int {
	return m.Size()
}
func (m *RoomGetInfoResp_Pendants) XXX_DiscardUnknown() {
	xxx_messageInfo_RoomGetInfoResp_Pendants.DiscardUnknown(m)
}

var xxx_messageInfo_RoomGetInfoResp_Pendants proto.InternalMessageInfo

func (m *RoomGetInfoResp_Pendants) GetFrame() *RoomGetInfoResp_PendantWithDesc {
	if m != nil {
		return m.Frame
	}
	return nil
}

func (m *RoomGetInfoResp_Pendants) GetBadge() *RoomGetInfoResp_PendantWithDesc {
	if m != nil {
		return m.Badge
	}
	return nil
}

func (m *RoomGetInfoResp_Pendants) GetMobileFrame() *RoomGetInfoResp_Pendant {
	if m != nil {
		return m.MobileFrame
	}
	return nil
}

func (m *RoomGetInfoResp_Pendants) GetMobileBadge() *RoomGetInfoResp_Pendant {
	if m != nil {
		return m.MobileBadge
	}
	return nil
}

type RoomGetInfoResp_Data struct {
	Uid                  int64                     `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	RoomId               int64                     `protobuf:"varint,2,opt,name=room_id,json=roomId,proto3" json:"room_id,omitempty"`
	ShortId              int64                     `protobuf:"varint,3,opt,name=short_id,json=shortId,proto3" json:"short_id,omitempty"`
	Keyframe             string                    `protobuf:"bytes,4,opt,name=keyframe,proto3" json:"keyframe,omitempty"`
	Online               int64                     `protobuf:"varint,5,opt,name=online,proto3" json:"online,omitempty"`
	IsPortrait           bool                      `protobuf:"varint,6,opt,name=is_portrait,json=isPortrait,proto3" json:"is_portrait,omitempty"`
	RoomSilentType       string                    `protobuf:"bytes,7,opt,name=room_silent_type,json=roomSilentType,proto3" json:"room_silent_type,omitempty"`
	RoomSilentSecond     int64                     `protobuf:"varint,8,opt,name=room_silent_second,json=roomSilentSecond,proto3" json:"room_silent_second,omitempty"`
	RoomSilentLevel      int64                     `protobuf:"varint,9,opt,name=room_silent_level,json=roomSilentLevel,proto3" json:"room_silent_level,omitempty"`
	LiveStatus           int64                     `protobuf:"varint,10,opt,name=live_status,json=liveStatus,proto3" json:"live_status,omitempty"`
	AreaId               int64                     `protobuf:"varint,11,opt,name=area_id,json=areaId,proto3" json:"area_id,omitempty"`
	ParentAreaId         int64                     `protobuf:"varint,12,opt,name=parent_area_id,json=parentAreaId,proto3" json:"parent_area_id,omitempty"`
	AreaName             string                    `protobuf:"bytes,13,opt,name=area_name,json=areaName,proto3" json:"area_name,omitempty"`
	ParentAreaName       string                    `protobuf:"bytes,14,opt,name=parent_area_name,json=parentAreaName,proto3" json:"parent_area_name,omitempty"`
	OldAreaId            int64                     `protobuf:"varint,15,opt,name=old_area_id,json=oldAreaId,proto3" json:"old_area_id,omitempty"`
	Background           string                    `protobuf:"bytes,16,opt,name=background,proto3" json:"background,omitempty"`
	Title                string                    `protobuf:"bytes,17,opt,name=title,proto3" json:"title,omitempty"`
	IsStrictRoom         bool                      `protobuf:"varint,18,opt,name=is_strict_room,json=isStrictRoom,proto3" json:"is_strict_room,omitempty"`
	UserCover            string                    `protobuf:"bytes,19,opt,name=user_cover,json=userCover,proto3" json:"user_cover,omitempty"`
	LiveTime             string                    `protobuf:"bytes,20,opt,name=live_time,json=liveTime,proto3" json:"live_time,omitempty"`
	Pendants             string                    `protobuf:"bytes,21,opt,name=pendants,proto3" json:"pendants,omitempty"`
	AreaPendants         string                    `protobuf:"bytes,22,opt,name=area_pendants,json=areaPendants,proto3" json:"area_pendants,omitempty"`
	Description          string                    `protobuf:"bytes,23,opt,name=description,proto3" json:"description,omitempty"`
	Tags                 string                    `protobuf:"bytes,24,opt,name=tags,proto3" json:"tags,omitempty"`
	Verify               string                    `protobuf:"bytes,25,opt,name=verify,proto3" json:"verify,omitempty"`
	HotWords             []string                  `protobuf:"bytes,26,rep,name=hot_words,json=hotWords,proto3" json:"hot_words,omitempty"`
	AllowChangeAreaTime  int64                     `protobuf:"varint,27,opt,name=allow_change_area_time,json=allowChangeAreaTime,proto3" json:"allow_change_area_time,omitempty"`
	AllowUploadCoverTime int64                     `protobuf:"varint,28,opt,name=allow_upload_cover_time,json=allowUploadCoverTime,proto3" json:"allow_upload_cover_time,omitempty"`
	NewPendants          *RoomGetInfoResp_Pendants `protobuf:"bytes,29,opt,name=new_pendants,json=newPendants,proto3" json:"new_pendants,omitempty"`
	UpSession            string                    `protobuf:"bytes,30,opt,name=up_session,json=upSession,proto3" json:"up_session,omitempty"`
	PkStatus             int64                     `protobuf:"varint,31,opt,name=pk_status,json=pkStatus,proto3" json:"pk_status,omitempty"`
}

func (m *RoomGetInfoResp_Data) Reset()         { *m = RoomGetInfoResp_Data{} }
func (m *RoomGetInfoResp_Data) String() string { return proto.CompactTextString(m) }
func (*RoomGetInfoResp_Data) ProtoMessage()    {}
func (*RoomGetInfoResp_Data) Descriptor() ([]byte, []int) {
	return fileDescriptor_Room_ebfa725c6fe265e6, []int{3, 3}
}
func (m *RoomGetInfoResp_Data) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RoomGetInfoResp_Data) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RoomGetInfoResp_Data.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *RoomGetInfoResp_Data) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RoomGetInfoResp_Data.Merge(dst, src)
}
func (m *RoomGetInfoResp_Data) XXX_Size() int {
	return m.Size()
}
func (m *RoomGetInfoResp_Data) XXX_DiscardUnknown() {
	xxx_messageInfo_RoomGetInfoResp_Data.DiscardUnknown(m)
}

var xxx_messageInfo_RoomGetInfoResp_Data proto.InternalMessageInfo

func (m *RoomGetInfoResp_Data) GetUid() int64 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *RoomGetInfoResp_Data) GetRoomId() int64 {
	if m != nil {
		return m.RoomId
	}
	return 0
}

func (m *RoomGetInfoResp_Data) GetShortId() int64 {
	if m != nil {
		return m.ShortId
	}
	return 0
}

func (m *RoomGetInfoResp_Data) GetKeyframe() string {
	if m != nil {
		return m.Keyframe
	}
	return ""
}

func (m *RoomGetInfoResp_Data) GetOnline() int64 {
	if m != nil {
		return m.Online
	}
	return 0
}

func (m *RoomGetInfoResp_Data) GetIsPortrait() bool {
	if m != nil {
		return m.IsPortrait
	}
	return false
}

func (m *RoomGetInfoResp_Data) GetRoomSilentType() string {
	if m != nil {
		return m.RoomSilentType
	}
	return ""
}

func (m *RoomGetInfoResp_Data) GetRoomSilentSecond() int64 {
	if m != nil {
		return m.RoomSilentSecond
	}
	return 0
}

func (m *RoomGetInfoResp_Data) GetRoomSilentLevel() int64 {
	if m != nil {
		return m.RoomSilentLevel
	}
	return 0
}

func (m *RoomGetInfoResp_Data) GetLiveStatus() int64 {
	if m != nil {
		return m.LiveStatus
	}
	return 0
}

func (m *RoomGetInfoResp_Data) GetAreaId() int64 {
	if m != nil {
		return m.AreaId
	}
	return 0
}

func (m *RoomGetInfoResp_Data) GetParentAreaId() int64 {
	if m != nil {
		return m.ParentAreaId
	}
	return 0
}

func (m *RoomGetInfoResp_Data) GetAreaName() string {
	if m != nil {
		return m.AreaName
	}
	return ""
}

func (m *RoomGetInfoResp_Data) GetParentAreaName() string {
	if m != nil {
		return m.ParentAreaName
	}
	return ""
}

func (m *RoomGetInfoResp_Data) GetOldAreaId() int64 {
	if m != nil {
		return m.OldAreaId
	}
	return 0
}

func (m *RoomGetInfoResp_Data) GetBackground() string {
	if m != nil {
		return m.Background
	}
	return ""
}

func (m *RoomGetInfoResp_Data) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *RoomGetInfoResp_Data) GetIsStrictRoom() bool {
	if m != nil {
		return m.IsStrictRoom
	}
	return false
}

func (m *RoomGetInfoResp_Data) GetUserCover() string {
	if m != nil {
		return m.UserCover
	}
	return ""
}

func (m *RoomGetInfoResp_Data) GetLiveTime() string {
	if m != nil {
		return m.LiveTime
	}
	return ""
}

func (m *RoomGetInfoResp_Data) GetPendants() string {
	if m != nil {
		return m.Pendants
	}
	return ""
}

func (m *RoomGetInfoResp_Data) GetAreaPendants() string {
	if m != nil {
		return m.AreaPendants
	}
	return ""
}

func (m *RoomGetInfoResp_Data) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *RoomGetInfoResp_Data) GetTags() string {
	if m != nil {
		return m.Tags
	}
	return ""
}

func (m *RoomGetInfoResp_Data) GetVerify() string {
	if m != nil {
		return m.Verify
	}
	return ""
}

func (m *RoomGetInfoResp_Data) GetHotWords() []string {
	if m != nil {
		return m.HotWords
	}
	return nil
}

func (m *RoomGetInfoResp_Data) GetAllowChangeAreaTime() int64 {
	if m != nil {
		return m.AllowChangeAreaTime
	}
	return 0
}

func (m *RoomGetInfoResp_Data) GetAllowUploadCoverTime() int64 {
	if m != nil {
		return m.AllowUploadCoverTime
	}
	return 0
}

func (m *RoomGetInfoResp_Data) GetNewPendants() *RoomGetInfoResp_Pendants {
	if m != nil {
		return m.NewPendants
	}
	return nil
}

func (m *RoomGetInfoResp_Data) GetUpSession() string {
	if m != nil {
		return m.UpSession
	}
	return ""
}

func (m *RoomGetInfoResp_Data) GetPkStatus() int64 {
	if m != nil {
		return m.PkStatus
	}
	return 0
}

func init() {
	proto.RegisterType((*RoomGetInfoByIdReq)(nil), "room.v1.RoomGetInfoByIdReq")
	proto.RegisterType((*RoomGetInfoByIdResp)(nil), "room.v1.RoomGetInfoByIdResp")
	proto.RegisterMapType((map[string]*RoomGetInfoByIdResp_RoomInfo)(nil), "room.v1.RoomGetInfoByIdResp.DataEntry")
	proto.RegisterType((*RoomGetInfoByIdResp_RoomInfo)(nil), "room.v1.RoomGetInfoByIdResp.RoomInfo")
	proto.RegisterType((*RoomGetInfoReq)(nil), "room.v1.RoomGetInfoReq")
	proto.RegisterType((*RoomGetInfoResp)(nil), "room.v1.RoomGetInfoResp")
	proto.RegisterType((*RoomGetInfoResp_PendantWithDesc)(nil), "room.v1.RoomGetInfoResp.PendantWithDesc")
	proto.RegisterType((*RoomGetInfoResp_Pendant)(nil), "room.v1.RoomGetInfoResp.Pendant")
	proto.RegisterType((*RoomGetInfoResp_Pendants)(nil), "room.v1.RoomGetInfoResp.Pendants")
	proto.RegisterType((*RoomGetInfoResp_Data)(nil), "room.v1.RoomGetInfoResp.Data")
}
func (m *RoomGetInfoByIdReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RoomGetInfoByIdReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Ids) > 0 {
		dAtA2 := make([]byte, len(m.Ids)*10)
		var j1 int
		for _, num1 := range m.Ids {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		dAtA[i] = 0xa
		i++
		i = encodeVarintRoom(dAtA, i, uint64(j1))
		i += copy(dAtA[i:], dAtA2[:j1])
	}
	if len(m.Fields) > 0 {
		for _, s := range m.Fields {
			dAtA[i] = 0x12
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	return i, nil
}

func (m *RoomGetInfoByIdResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RoomGetInfoByIdResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintRoom(dAtA, i, uint64(m.Code))
	}
	if len(m.Msg) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintRoom(dAtA, i, uint64(len(m.Msg)))
		i += copy(dAtA[i:], m.Msg)
	}
	if len(m.Data) > 0 {
		for k, _ := range m.Data {
			dAtA[i] = 0x1a
			i++
			v := m.Data[k]
			msgSize := 0
			if v != nil {
				msgSize = v.Size()
				msgSize += 1 + sovRoom(uint64(msgSize))
			}
			mapSize := 1 + len(k) + sovRoom(uint64(len(k))) + msgSize
			i = encodeVarintRoom(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintRoom(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			if v != nil {
				dAtA[i] = 0x12
				i++
				i = encodeVarintRoom(dAtA, i, uint64(v.Size()))
				n3, err := v.MarshalTo(dAtA[i:])
				if err != nil {
					return 0, err
				}
				i += n3
			}
		}
	}
	return i, nil
}

func (m *RoomGetInfoByIdResp_RoomInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RoomGetInfoByIdResp_RoomInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Roomid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintRoom(dAtA, i, uint64(m.Roomid))
	}
	if len(m.Uname) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintRoom(dAtA, i, uint64(len(m.Uname)))
		i += copy(dAtA[i:], m.Uname)
	}
	if len(m.Cover) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintRoom(dAtA, i, uint64(len(m.Cover)))
		i += copy(dAtA[i:], m.Cover)
	}
	if m.Uid != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintRoom(dAtA, i, uint64(m.Uid))
	}
	if len(m.LiveTime) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintRoom(dAtA, i, uint64(len(m.LiveTime)))
		i += copy(dAtA[i:], m.LiveTime)
	}
	if m.RoundStatus != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintRoom(dAtA, i, uint64(m.RoundStatus))
	}
	if m.OnFlag != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintRoom(dAtA, i, uint64(m.OnFlag))
	}
	if len(m.Title) > 0 {
		dAtA[i] = 0x42
		i++
		i = encodeVarintRoom(dAtA, i, uint64(len(m.Title)))
		i += copy(dAtA[i:], m.Title)
	}
	if len(m.LockStatus) > 0 {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintRoom(dAtA, i, uint64(len(m.LockStatus)))
		i += copy(dAtA[i:], m.LockStatus)
	}
	if len(m.HiddenStatus) > 0 {
		dAtA[i] = 0x52
		i++
		i = encodeVarintRoom(dAtA, i, uint64(len(m.HiddenStatus)))
		i += copy(dAtA[i:], m.HiddenStatus)
	}
	if len(m.UserCover) > 0 {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintRoom(dAtA, i, uint64(len(m.UserCover)))
		i += copy(dAtA[i:], m.UserCover)
	}
	if m.ShortId != 0 {
		dAtA[i] = 0x60
		i++
		i = encodeVarintRoom(dAtA, i, uint64(m.ShortId))
	}
	if m.Online != 0 {
		dAtA[i] = 0x68
		i++
		i = encodeVarintRoom(dAtA, i, uint64(m.Online))
	}
	if m.Area != 0 {
		dAtA[i] = 0x70
		i++
		i = encodeVarintRoom(dAtA, i, uint64(m.Area))
	}
	if m.AreaV2Id != 0 {
		dAtA[i] = 0x78
		i++
		i = encodeVarintRoom(dAtA, i, uint64(m.AreaV2Id))
	}
	if m.AreaV2ParentId != 0 {
		dAtA[i] = 0x80
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintRoom(dAtA, i, uint64(m.AreaV2ParentId))
	}
	if len(m.AreaV2Name) > 0 {
		dAtA[i] = 0x8a
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintRoom(dAtA, i, uint64(len(m.AreaV2Name)))
		i += copy(dAtA[i:], m.AreaV2Name)
	}
	if len(m.AreaV2ParentName) > 0 {
		dAtA[i] = 0x92
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintRoom(dAtA, i, uint64(len(m.AreaV2ParentName)))
		i += copy(dAtA[i:], m.AreaV2ParentName)
	}
	if m.Attentions != 0 {
		dAtA[i] = 0x98
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintRoom(dAtA, i, uint64(m.Attentions))
	}
	return i, nil
}

func (m *RoomGetInfoReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RoomGetInfoReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintRoom(dAtA, i, uint64(m.Id))
	}
	if len(m.From) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintRoom(dAtA, i, uint64(len(m.From)))
		i += copy(dAtA[i:], m.From)
	}
	return i, nil
}

func (m *RoomGetInfoResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RoomGetInfoResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintRoom(dAtA, i, uint64(m.Code))
	}
	if len(m.Msg) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintRoom(dAtA, i, uint64(len(m.Msg)))
		i += copy(dAtA[i:], m.Msg)
	}
	if m.Data != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintRoom(dAtA, i, uint64(m.Data.Size()))
		n4, err := m.Data.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	return i, nil
}

func (m *RoomGetInfoResp_PendantWithDesc) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RoomGetInfoResp_PendantWithDesc) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintRoom(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if m.Position != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintRoom(dAtA, i, uint64(m.Position))
	}
	if len(m.Value) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintRoom(dAtA, i, uint64(len(m.Value)))
		i += copy(dAtA[i:], m.Value)
	}
	if len(m.Desc) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintRoom(dAtA, i, uint64(len(m.Desc)))
		i += copy(dAtA[i:], m.Desc)
	}
	return i, nil
}

func (m *RoomGetInfoResp_Pendant) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RoomGetInfoResp_Pendant) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintRoom(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if m.Position != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintRoom(dAtA, i, uint64(m.Position))
	}
	if len(m.Value) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintRoom(dAtA, i, uint64(len(m.Value)))
		i += copy(dAtA[i:], m.Value)
	}
	return i, nil
}

func (m *RoomGetInfoResp_Pendants) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RoomGetInfoResp_Pendants) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Frame != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintRoom(dAtA, i, uint64(m.Frame.Size()))
		n5, err := m.Frame.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	if m.Badge != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintRoom(dAtA, i, uint64(m.Badge.Size()))
		n6, err := m.Badge.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	if m.MobileFrame != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintRoom(dAtA, i, uint64(m.MobileFrame.Size()))
		n7, err := m.MobileFrame.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	if m.MobileBadge != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintRoom(dAtA, i, uint64(m.MobileBadge.Size()))
		n8, err := m.MobileBadge.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n8
	}
	return i, nil
}

func (m *RoomGetInfoResp_Data) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RoomGetInfoResp_Data) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Uid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintRoom(dAtA, i, uint64(m.Uid))
	}
	if m.RoomId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintRoom(dAtA, i, uint64(m.RoomId))
	}
	if m.ShortId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintRoom(dAtA, i, uint64(m.ShortId))
	}
	if len(m.Keyframe) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintRoom(dAtA, i, uint64(len(m.Keyframe)))
		i += copy(dAtA[i:], m.Keyframe)
	}
	if m.Online != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintRoom(dAtA, i, uint64(m.Online))
	}
	if m.IsPortrait {
		dAtA[i] = 0x30
		i++
		if m.IsPortrait {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.RoomSilentType) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintRoom(dAtA, i, uint64(len(m.RoomSilentType)))
		i += copy(dAtA[i:], m.RoomSilentType)
	}
	if m.RoomSilentSecond != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintRoom(dAtA, i, uint64(m.RoomSilentSecond))
	}
	if m.RoomSilentLevel != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintRoom(dAtA, i, uint64(m.RoomSilentLevel))
	}
	if m.LiveStatus != 0 {
		dAtA[i] = 0x50
		i++
		i = encodeVarintRoom(dAtA, i, uint64(m.LiveStatus))
	}
	if m.AreaId != 0 {
		dAtA[i] = 0x58
		i++
		i = encodeVarintRoom(dAtA, i, uint64(m.AreaId))
	}
	if m.ParentAreaId != 0 {
		dAtA[i] = 0x60
		i++
		i = encodeVarintRoom(dAtA, i, uint64(m.ParentAreaId))
	}
	if len(m.AreaName) > 0 {
		dAtA[i] = 0x6a
		i++
		i = encodeVarintRoom(dAtA, i, uint64(len(m.AreaName)))
		i += copy(dAtA[i:], m.AreaName)
	}
	if len(m.ParentAreaName) > 0 {
		dAtA[i] = 0x72
		i++
		i = encodeVarintRoom(dAtA, i, uint64(len(m.ParentAreaName)))
		i += copy(dAtA[i:], m.ParentAreaName)
	}
	if m.OldAreaId != 0 {
		dAtA[i] = 0x78
		i++
		i = encodeVarintRoom(dAtA, i, uint64(m.OldAreaId))
	}
	if len(m.Background) > 0 {
		dAtA[i] = 0x82
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintRoom(dAtA, i, uint64(len(m.Background)))
		i += copy(dAtA[i:], m.Background)
	}
	if len(m.Title) > 0 {
		dAtA[i] = 0x8a
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintRoom(dAtA, i, uint64(len(m.Title)))
		i += copy(dAtA[i:], m.Title)
	}
	if m.IsStrictRoom {
		dAtA[i] = 0x90
		i++
		dAtA[i] = 0x1
		i++
		if m.IsStrictRoom {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.UserCover) > 0 {
		dAtA[i] = 0x9a
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintRoom(dAtA, i, uint64(len(m.UserCover)))
		i += copy(dAtA[i:], m.UserCover)
	}
	if len(m.LiveTime) > 0 {
		dAtA[i] = 0xa2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintRoom(dAtA, i, uint64(len(m.LiveTime)))
		i += copy(dAtA[i:], m.LiveTime)
	}
	if len(m.Pendants) > 0 {
		dAtA[i] = 0xaa
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintRoom(dAtA, i, uint64(len(m.Pendants)))
		i += copy(dAtA[i:], m.Pendants)
	}
	if len(m.AreaPendants) > 0 {
		dAtA[i] = 0xb2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintRoom(dAtA, i, uint64(len(m.AreaPendants)))
		i += copy(dAtA[i:], m.AreaPendants)
	}
	if len(m.Description) > 0 {
		dAtA[i] = 0xba
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintRoom(dAtA, i, uint64(len(m.Description)))
		i += copy(dAtA[i:], m.Description)
	}
	if len(m.Tags) > 0 {
		dAtA[i] = 0xc2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintRoom(dAtA, i, uint64(len(m.Tags)))
		i += copy(dAtA[i:], m.Tags)
	}
	if len(m.Verify) > 0 {
		dAtA[i] = 0xca
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintRoom(dAtA, i, uint64(len(m.Verify)))
		i += copy(dAtA[i:], m.Verify)
	}
	if len(m.HotWords) > 0 {
		for _, s := range m.HotWords {
			dAtA[i] = 0xd2
			i++
			dAtA[i] = 0x1
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if m.AllowChangeAreaTime != 0 {
		dAtA[i] = 0xd8
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintRoom(dAtA, i, uint64(m.AllowChangeAreaTime))
	}
	if m.AllowUploadCoverTime != 0 {
		dAtA[i] = 0xe0
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintRoom(dAtA, i, uint64(m.AllowUploadCoverTime))
	}
	if m.NewPendants != nil {
		dAtA[i] = 0xea
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintRoom(dAtA, i, uint64(m.NewPendants.Size()))
		n9, err := m.NewPendants.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n9
	}
	if len(m.UpSession) > 0 {
		dAtA[i] = 0xf2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintRoom(dAtA, i, uint64(len(m.UpSession)))
		i += copy(dAtA[i:], m.UpSession)
	}
	if m.PkStatus != 0 {
		dAtA[i] = 0xf8
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintRoom(dAtA, i, uint64(m.PkStatus))
	}
	return i, nil
}

func encodeVarintRoom(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *RoomGetInfoByIdReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Ids) > 0 {
		l = 0
		for _, e := range m.Ids {
			l += sovRoom(uint64(e))
		}
		n += 1 + sovRoom(uint64(l)) + l
	}
	if len(m.Fields) > 0 {
		for _, s := range m.Fields {
			l = len(s)
			n += 1 + l + sovRoom(uint64(l))
		}
	}
	return n
}

func (m *RoomGetInfoByIdResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovRoom(uint64(m.Code))
	}
	l = len(m.Msg)
	if l > 0 {
		n += 1 + l + sovRoom(uint64(l))
	}
	if len(m.Data) > 0 {
		for k, v := range m.Data {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovRoom(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovRoom(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovRoom(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *RoomGetInfoByIdResp_RoomInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Roomid != 0 {
		n += 1 + sovRoom(uint64(m.Roomid))
	}
	l = len(m.Uname)
	if l > 0 {
		n += 1 + l + sovRoom(uint64(l))
	}
	l = len(m.Cover)
	if l > 0 {
		n += 1 + l + sovRoom(uint64(l))
	}
	if m.Uid != 0 {
		n += 1 + sovRoom(uint64(m.Uid))
	}
	l = len(m.LiveTime)
	if l > 0 {
		n += 1 + l + sovRoom(uint64(l))
	}
	if m.RoundStatus != 0 {
		n += 1 + sovRoom(uint64(m.RoundStatus))
	}
	if m.OnFlag != 0 {
		n += 1 + sovRoom(uint64(m.OnFlag))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovRoom(uint64(l))
	}
	l = len(m.LockStatus)
	if l > 0 {
		n += 1 + l + sovRoom(uint64(l))
	}
	l = len(m.HiddenStatus)
	if l > 0 {
		n += 1 + l + sovRoom(uint64(l))
	}
	l = len(m.UserCover)
	if l > 0 {
		n += 1 + l + sovRoom(uint64(l))
	}
	if m.ShortId != 0 {
		n += 1 + sovRoom(uint64(m.ShortId))
	}
	if m.Online != 0 {
		n += 1 + sovRoom(uint64(m.Online))
	}
	if m.Area != 0 {
		n += 1 + sovRoom(uint64(m.Area))
	}
	if m.AreaV2Id != 0 {
		n += 1 + sovRoom(uint64(m.AreaV2Id))
	}
	if m.AreaV2ParentId != 0 {
		n += 2 + sovRoom(uint64(m.AreaV2ParentId))
	}
	l = len(m.AreaV2Name)
	if l > 0 {
		n += 2 + l + sovRoom(uint64(l))
	}
	l = len(m.AreaV2ParentName)
	if l > 0 {
		n += 2 + l + sovRoom(uint64(l))
	}
	if m.Attentions != 0 {
		n += 2 + sovRoom(uint64(m.Attentions))
	}
	return n
}

func (m *RoomGetInfoReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovRoom(uint64(m.Id))
	}
	l = len(m.From)
	if l > 0 {
		n += 1 + l + sovRoom(uint64(l))
	}
	return n
}

func (m *RoomGetInfoResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovRoom(uint64(m.Code))
	}
	l = len(m.Msg)
	if l > 0 {
		n += 1 + l + sovRoom(uint64(l))
	}
	if m.Data != nil {
		l = m.Data.Size()
		n += 1 + l + sovRoom(uint64(l))
	}
	return n
}

func (m *RoomGetInfoResp_PendantWithDesc) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovRoom(uint64(l))
	}
	if m.Position != 0 {
		n += 1 + sovRoom(uint64(m.Position))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovRoom(uint64(l))
	}
	l = len(m.Desc)
	if l > 0 {
		n += 1 + l + sovRoom(uint64(l))
	}
	return n
}

func (m *RoomGetInfoResp_Pendant) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovRoom(uint64(l))
	}
	if m.Position != 0 {
		n += 1 + sovRoom(uint64(m.Position))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovRoom(uint64(l))
	}
	return n
}

func (m *RoomGetInfoResp_Pendants) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Frame != nil {
		l = m.Frame.Size()
		n += 1 + l + sovRoom(uint64(l))
	}
	if m.Badge != nil {
		l = m.Badge.Size()
		n += 1 + l + sovRoom(uint64(l))
	}
	if m.MobileFrame != nil {
		l = m.MobileFrame.Size()
		n += 1 + l + sovRoom(uint64(l))
	}
	if m.MobileBadge != nil {
		l = m.MobileBadge.Size()
		n += 1 + l + sovRoom(uint64(l))
	}
	return n
}

func (m *RoomGetInfoResp_Data) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Uid != 0 {
		n += 1 + sovRoom(uint64(m.Uid))
	}
	if m.RoomId != 0 {
		n += 1 + sovRoom(uint64(m.RoomId))
	}
	if m.ShortId != 0 {
		n += 1 + sovRoom(uint64(m.ShortId))
	}
	l = len(m.Keyframe)
	if l > 0 {
		n += 1 + l + sovRoom(uint64(l))
	}
	if m.Online != 0 {
		n += 1 + sovRoom(uint64(m.Online))
	}
	if m.IsPortrait {
		n += 2
	}
	l = len(m.RoomSilentType)
	if l > 0 {
		n += 1 + l + sovRoom(uint64(l))
	}
	if m.RoomSilentSecond != 0 {
		n += 1 + sovRoom(uint64(m.RoomSilentSecond))
	}
	if m.RoomSilentLevel != 0 {
		n += 1 + sovRoom(uint64(m.RoomSilentLevel))
	}
	if m.LiveStatus != 0 {
		n += 1 + sovRoom(uint64(m.LiveStatus))
	}
	if m.AreaId != 0 {
		n += 1 + sovRoom(uint64(m.AreaId))
	}
	if m.ParentAreaId != 0 {
		n += 1 + sovRoom(uint64(m.ParentAreaId))
	}
	l = len(m.AreaName)
	if l > 0 {
		n += 1 + l + sovRoom(uint64(l))
	}
	l = len(m.ParentAreaName)
	if l > 0 {
		n += 1 + l + sovRoom(uint64(l))
	}
	if m.OldAreaId != 0 {
		n += 1 + sovRoom(uint64(m.OldAreaId))
	}
	l = len(m.Background)
	if l > 0 {
		n += 2 + l + sovRoom(uint64(l))
	}
	l = len(m.Title)
	if l > 0 {
		n += 2 + l + sovRoom(uint64(l))
	}
	if m.IsStrictRoom {
		n += 3
	}
	l = len(m.UserCover)
	if l > 0 {
		n += 2 + l + sovRoom(uint64(l))
	}
	l = len(m.LiveTime)
	if l > 0 {
		n += 2 + l + sovRoom(uint64(l))
	}
	l = len(m.Pendants)
	if l > 0 {
		n += 2 + l + sovRoom(uint64(l))
	}
	l = len(m.AreaPendants)
	if l > 0 {
		n += 2 + l + sovRoom(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 2 + l + sovRoom(uint64(l))
	}
	l = len(m.Tags)
	if l > 0 {
		n += 2 + l + sovRoom(uint64(l))
	}
	l = len(m.Verify)
	if l > 0 {
		n += 2 + l + sovRoom(uint64(l))
	}
	if len(m.HotWords) > 0 {
		for _, s := range m.HotWords {
			l = len(s)
			n += 2 + l + sovRoom(uint64(l))
		}
	}
	if m.AllowChangeAreaTime != 0 {
		n += 2 + sovRoom(uint64(m.AllowChangeAreaTime))
	}
	if m.AllowUploadCoverTime != 0 {
		n += 2 + sovRoom(uint64(m.AllowUploadCoverTime))
	}
	if m.NewPendants != nil {
		l = m.NewPendants.Size()
		n += 2 + l + sovRoom(uint64(l))
	}
	l = len(m.UpSession)
	if l > 0 {
		n += 2 + l + sovRoom(uint64(l))
	}
	if m.PkStatus != 0 {
		n += 2 + sovRoom(uint64(m.PkStatus))
	}
	return n
}

func sovRoom(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozRoom(x uint64) (n int) {
	return sovRoom(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *RoomGetInfoByIdReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRoom
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RoomGetInfoByIdReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RoomGetInfoByIdReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowRoom
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Ids = append(m.Ids, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowRoom
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthRoom
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Ids) == 0 {
					m.Ids = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowRoom
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Ids = append(m.Ids, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Ids", wireType)
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fields", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRoom
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Fields = append(m.Fields, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRoom(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRoom
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RoomGetInfoByIdResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRoom
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RoomGetInfoByIdResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RoomGetInfoByIdResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRoom
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRoom
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = make(map[string]*RoomGetInfoByIdResp_RoomInfo)
			}
			var mapkey string
			var mapvalue *RoomGetInfoByIdResp_RoomInfo
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowRoom
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowRoom
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthRoom
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowRoom
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= (int(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthRoom
					}
					postmsgIndex := iNdEx + mapmsglen
					if mapmsglen < 0 {
						return ErrInvalidLengthRoom
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &RoomGetInfoByIdResp_RoomInfo{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipRoom(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthRoom
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Data[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRoom(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRoom
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RoomGetInfoByIdResp_RoomInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRoom
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RoomInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RoomInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Roomid", wireType)
			}
			m.Roomid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Roomid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uname", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRoom
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Uname = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cover", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRoom
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cover = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LiveTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRoom
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LiveTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoundStatus", wireType)
			}
			m.RoundStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RoundStatus |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OnFlag", wireType)
			}
			m.OnFlag = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OnFlag |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRoom
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LockStatus", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRoom
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LockStatus = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HiddenStatus", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRoom
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HiddenStatus = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserCover", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRoom
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserCover = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShortId", wireType)
			}
			m.ShortId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ShortId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Online", wireType)
			}
			m.Online = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Online |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Area", wireType)
			}
			m.Area = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Area |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AreaV2Id", wireType)
			}
			m.AreaV2Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AreaV2Id |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AreaV2ParentId", wireType)
			}
			m.AreaV2ParentId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AreaV2ParentId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AreaV2Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRoom
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AreaV2Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AreaV2ParentName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRoom
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AreaV2ParentName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 19:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attentions", wireType)
			}
			m.Attentions = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Attentions |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRoom(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRoom
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RoomGetInfoReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRoom
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RoomGetInfoReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RoomGetInfoReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRoom
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.From = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRoom(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRoom
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RoomGetInfoResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRoom
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RoomGetInfoResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RoomGetInfoResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRoom
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRoom
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = &RoomGetInfoResp_Data{}
			}
			if err := m.Data.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRoom(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRoom
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RoomGetInfoResp_PendantWithDesc) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRoom
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PendantWithDesc: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PendantWithDesc: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRoom
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Position", wireType)
			}
			m.Position = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Position |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRoom
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Desc", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRoom
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Desc = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRoom(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRoom
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RoomGetInfoResp_Pendant) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRoom
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Pendant: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Pendant: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRoom
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Position", wireType)
			}
			m.Position = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Position |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRoom
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRoom(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRoom
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RoomGetInfoResp_Pendants) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRoom
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Pendants: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Pendants: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Frame", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRoom
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Frame == nil {
				m.Frame = &RoomGetInfoResp_PendantWithDesc{}
			}
			if err := m.Frame.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Badge", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRoom
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Badge == nil {
				m.Badge = &RoomGetInfoResp_PendantWithDesc{}
			}
			if err := m.Badge.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MobileFrame", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRoom
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MobileFrame == nil {
				m.MobileFrame = &RoomGetInfoResp_Pendant{}
			}
			if err := m.MobileFrame.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MobileBadge", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRoom
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MobileBadge == nil {
				m.MobileBadge = &RoomGetInfoResp_Pendant{}
			}
			if err := m.MobileBadge.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRoom(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRoom
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RoomGetInfoResp_Data) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRoom
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Data: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Data: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoomId", wireType)
			}
			m.RoomId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RoomId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShortId", wireType)
			}
			m.ShortId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ShortId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Keyframe", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRoom
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Keyframe = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Online", wireType)
			}
			m.Online = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Online |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsPortrait", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsPortrait = bool(v != 0)
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoomSilentType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRoom
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RoomSilentType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoomSilentSecond", wireType)
			}
			m.RoomSilentSecond = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RoomSilentSecond |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoomSilentLevel", wireType)
			}
			m.RoomSilentLevel = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RoomSilentLevel |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LiveStatus", wireType)
			}
			m.LiveStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LiveStatus |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AreaId", wireType)
			}
			m.AreaId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AreaId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParentAreaId", wireType)
			}
			m.ParentAreaId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ParentAreaId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AreaName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRoom
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AreaName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParentAreaName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRoom
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ParentAreaName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OldAreaId", wireType)
			}
			m.OldAreaId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OldAreaId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Background", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRoom
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Background = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRoom
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsStrictRoom", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsStrictRoom = bool(v != 0)
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserCover", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRoom
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserCover = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LiveTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRoom
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LiveTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pendants", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRoom
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pendants = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 22:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AreaPendants", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRoom
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AreaPendants = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 23:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRoom
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 24:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tags", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRoom
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tags = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 25:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Verify", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRoom
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Verify = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 26:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HotWords", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRoom
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HotWords = append(m.HotWords, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 27:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllowChangeAreaTime", wireType)
			}
			m.AllowChangeAreaTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AllowChangeAreaTime |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 28:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllowUploadCoverTime", wireType)
			}
			m.AllowUploadCoverTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AllowUploadCoverTime |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 29:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewPendants", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRoom
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.NewPendants == nil {
				m.NewPendants = &RoomGetInfoResp_Pendants{}
			}
			if err := m.NewPendants.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 30:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpSession", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRoom
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UpSession = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 31:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PkStatus", wireType)
			}
			m.PkStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PkStatus |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRoom(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRoom
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipRoom(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowRoom
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRoom
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRoom
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthRoom
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowRoom
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipRoom(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthRoom = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowRoom   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("v1/Room.proto", fileDescriptor_Room_ebfa725c6fe265e6) }

var fileDescriptor_Room_ebfa725c6fe265e6 = []byte{
	// 1206 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x56, 0x51, 0x6f, 0x1b, 0xc5,
	0x13, 0xaf, 0x7d, 0x4e, 0x72, 0x37, 0x76, 0x1c, 0x67, 0xd3, 0x7f, 0x73, 0x75, 0x53, 0xd7, 0xcd,
	0xbf, 0x20, 0x83, 0x20, 0x28, 0x2e, 0x48, 0xa8, 0x88, 0x4a, 0xb4, 0xa5, 0xc8, 0x02, 0x41, 0x75,
	0x29, 0x54, 0xe2, 0x81, 0xd3, 0xc5, 0xbb, 0xb6, 0x57, 0x39, 0xdf, 0x5e, 0x6e, 0xd7, 0x8e, 0xfc,
	0x29, 0x40, 0x88, 0x67, 0xbe, 0x05, 0xdf, 0x81, 0xc7, 0x3e, 0xf2, 0x58, 0x25, 0x5f, 0x04, 0xcd,
	0xec, 0x9d, 0xed, 0x84, 0xa4, 0xa5, 0x12, 0x4f, 0xb7, 0xf3, 0xdb, 0x99, 0xd9, 0x99, 0xd9, 0x99,
	0xdf, 0x1e, 0xac, 0x4f, 0xf7, 0x3f, 0x0a, 0x94, 0x1a, 0xef, 0xa5, 0x99, 0x32, 0x8a, 0xad, 0x65,
	0xb8, 0x9e, 0xee, 0xef, 0x3e, 0x04, 0x86, 0xf0, 0x57, 0xc2, 0xf4, 0x92, 0x81, 0x7a, 0x34, 0xeb,
	0xf1, 0x40, 0x1c, 0xb3, 0x06, 0x38, 0x92, 0x6b, 0xbf, 0xd4, 0x76, 0x3a, 0x4e, 0x80, 0x4b, 0x76,
	0x03, 0x56, 0x07, 0x52, 0xc4, 0x5c, 0xfb, 0xe5, 0xb6, 0xd3, 0xf1, 0x82, 0x5c, 0xda, 0xfd, 0x79,
	0x15, 0xb6, 0xfe, 0xe1, 0x40, 0xa7, 0x8c, 0x41, 0xa5, 0xaf, 0xb8, 0xf0, 0x4b, 0xed, 0x52, 0xc7,
	0x09, 0x68, 0x8d, 0x5e, 0xc7, 0x7a, 0xe8, 0x97, 0xdb, 0xa5, 0x8e, 0x17, 0xe0, 0x92, 0x3d, 0x80,
	0x0a, 0x8f, 0x4c, 0xe4, 0x3b, 0x6d, 0xa7, 0x53, 0xed, 0xbe, 0xbb, 0x97, 0x47, 0xb5, 0x77, 0x89,
	0xc7, 0xbd, 0x27, 0x91, 0x89, 0xbe, 0x4c, 0x4c, 0x36, 0x0b, 0xc8, 0xa6, 0xf9, 0x13, 0x78, 0x73,
	0x08, 0x5d, 0x1f, 0x89, 0x19, 0x9d, 0xe6, 0x05, 0xb8, 0x64, 0x9f, 0xc1, 0xca, 0x34, 0x8a, 0x27,
	0x82, 0x8e, 0xab, 0x76, 0xdf, 0x79, 0xad, 0x6f, 0xc4, 0x10, 0x08, 0xac, 0xcd, 0x83, 0xf2, 0xa7,
	0xa5, 0xe6, 0x1f, 0x15, 0x70, 0x0b, 0x1c, 0xd3, 0x47, 0x7b, 0xc9, 0xf3, 0x84, 0x72, 0x89, 0x5d,
	0x87, 0x95, 0x49, 0x12, 0x8d, 0x45, 0x9e, 0x94, 0x15, 0x10, 0xed, 0xab, 0xa9, 0xc8, 0x7c, 0xc7,
	0xa2, 0x24, 0x60, 0x8c, 0x13, 0xc9, 0xfd, 0x0a, 0x39, 0xc0, 0x25, 0xbb, 0x05, 0x5e, 0x2c, 0xa7,
	0x22, 0x34, 0x72, 0x2c, 0xfc, 0x15, 0xd2, 0x75, 0x11, 0x78, 0x2e, 0xc7, 0x82, 0xdd, 0x85, 0x5a,
	0xa6, 0x26, 0x09, 0x0f, 0xb5, 0x89, 0xcc, 0x44, 0xfb, 0xab, 0x64, 0x57, 0x25, 0xec, 0x80, 0x20,
	0xb6, 0x0d, 0x6b, 0x2a, 0x09, 0x07, 0x71, 0x34, 0xf4, 0xd7, 0x6c, 0x58, 0x2a, 0x79, 0x1a, 0x47,
	0x43, 0x0c, 0xc0, 0x48, 0x13, 0x0b, 0xdf, 0xb5, 0x01, 0x90, 0xc0, 0xee, 0x40, 0x35, 0x56, 0xfd,
	0xa3, 0xc2, 0xa1, 0x47, 0x7b, 0x80, 0x50, 0xee, 0xef, 0xff, 0xb0, 0x3e, 0x92, 0x9c, 0x8b, 0xa4,
	0x50, 0x01, 0x52, 0xa9, 0x59, 0x30, 0x57, 0xba, 0x0d, 0x30, 0xd1, 0x22, 0x0b, 0x6d, 0x86, 0x55,
	0xd2, 0xf0, 0x10, 0x79, 0x4c, 0x59, 0xde, 0x04, 0x57, 0x8f, 0x54, 0x66, 0x42, 0xc9, 0xfd, 0x1a,
	0x05, 0xb5, 0x46, 0x72, 0x8f, 0x63, 0x11, 0x55, 0x12, 0xcb, 0x44, 0xf8, 0xeb, 0x45, 0xb4, 0x28,
	0x61, 0xaf, 0x44, 0x99, 0x88, 0xfc, 0xba, 0xed, 0x15, 0x5c, 0xb3, 0x1d, 0x00, 0xfc, 0x86, 0xd3,
	0x2e, 0x3a, 0xda, 0xa0, 0x1d, 0x17, 0x91, 0x1f, 0xba, 0x3d, 0xce, 0xde, 0x83, 0xcd, 0x62, 0x37,
	0x8d, 0x32, 0x91, 0xd0, 0x69, 0x0d, 0x52, 0xaa, 0x5b, 0xa5, 0x67, 0x04, 0xf7, 0x38, 0x6b, 0x43,
	0xad, 0x50, 0xa5, 0x8b, 0xda, 0xb4, 0x59, 0x5b, 0xad, 0x6f, 0xf1, 0xb6, 0x3e, 0x84, 0xad, 0x0b,
	0xce, 0x48, 0x91, 0x91, 0x62, 0x63, 0xd9, 0x1d, 0xa9, 0xb7, 0x00, 0x22, 0x63, 0x44, 0x62, 0xa4,
	0x4a, 0xb4, 0xbf, 0x45, 0x87, 0x2e, 0x21, 0xbb, 0x1f, 0x43, 0x7d, 0xa9, 0xc5, 0x70, 0x9a, 0xea,
	0x50, 0x9e, 0x37, 0x4e, 0x59, 0x72, 0xcc, 0x77, 0x90, 0xa9, 0x71, 0xde, 0x33, 0xb4, 0xde, 0x7d,
	0x55, 0x83, 0x8d, 0x73, 0x66, 0xff, 0x7a, 0x86, 0xf6, 0xe7, 0x33, 0x84, 0x7d, 0x7e, 0xfb, 0xb2,
	0x3e, 0x9f, 0xcf, 0x4f, 0x3e, 0x3a, 0x47, 0xb0, 0xf1, 0x4c, 0x24, 0x3c, 0x4a, 0xcc, 0x0b, 0x69,
	0x46, 0x4f, 0x84, 0xee, 0xe3, 0x59, 0x94, 0xb5, 0x9d, 0x20, 0x5a, 0xb3, 0x26, 0xb8, 0xa9, 0xd2,
	0x12, 0xd3, 0xa2, 0x03, 0x9d, 0x60, 0x2e, 0x63, 0x87, 0xd9, 0xf1, 0xca, 0x5b, 0x9c, 0x04, 0xf4,
	0xc2, 0x85, 0xee, 0x53, 0x8f, 0x7b, 0x01, 0xad, 0x9b, 0xdf, 0xc1, 0x5a, 0x7e, 0xd8, 0x7f, 0x73,
	0x48, 0xf3, 0xb7, 0x32, 0xb8, 0xb9, 0x47, 0xcd, 0x1e, 0xc2, 0xca, 0x20, 0x2b, 0x7c, 0x56, 0xbb,
	0x9d, 0x2b, 0xd3, 0xbf, 0x90, 0x70, 0x60, 0xcd, 0xd0, 0xfe, 0x30, 0xe2, 0xc3, 0x82, 0x26, 0xde,
	0xc2, 0x9e, 0xcc, 0xd8, 0x63, 0xa8, 0x8d, 0xd5, 0xa1, 0x8c, 0x45, 0x68, 0xc3, 0xb0, 0xb7, 0xd0,
	0x7e, 0x93, 0x9b, 0xa0, 0x6a, 0xad, 0x9e, 0x52, 0x10, 0x0b, 0x27, 0x36, 0x96, 0xca, 0xdb, 0x39,
	0x79, 0x84, 0x46, 0xcd, 0xdf, 0x5d, 0xa8, 0xe0, 0x1d, 0x17, 0x3c, 0x53, 0x5a, 0xf0, 0xcc, 0x36,
	0x10, 0xdf, 0xe3, 0x90, 0x94, 0x17, 0xf4, 0xd5, 0xe3, 0xe7, 0x86, 0xd5, 0x39, 0x3f, 0xac, 0x4d,
	0x70, 0x8f, 0xc4, 0xcc, 0x26, 0x65, 0xaf, 0x73, 0x2e, 0x2f, 0x0d, 0xf2, 0xca, 0xb9, 0x41, 0xbe,
	0x03, 0x55, 0xa9, 0xc3, 0x54, 0x65, 0x26, 0x8b, 0xa4, 0x21, 0xc6, 0x72, 0x03, 0x90, 0xfa, 0x59,
	0x8e, 0xb0, 0x0e, 0x34, 0x28, 0x10, 0x2d, 0x63, 0x9c, 0x33, 0x33, 0x4b, 0x05, 0x31, 0x97, 0x17,
	0xd4, 0x11, 0x3f, 0x20, 0xf8, 0xf9, 0x2c, 0x15, 0xec, 0x03, 0x60, 0xcb, 0x9a, 0x5a, 0xf4, 0x55,
	0xc2, 0x89, 0xce, 0x9c, 0xa0, 0xb1, 0xd0, 0x3d, 0x20, 0x9c, 0xbd, 0x0f, 0x9b, 0xcb, 0xda, 0xb1,
	0x98, 0x8a, 0x98, 0xf8, 0xcd, 0x09, 0x36, 0x16, 0xca, 0xdf, 0x20, 0x4c, 0x2c, 0x88, 0xa4, 0xbb,
	0x44, 0x71, 0x4e, 0x00, 0x08, 0x2d, 0x58, 0x95, 0xf8, 0x40, 0x72, 0x62, 0x37, 0x27, 0x58, 0x45,
	0xb1, 0xc7, 0xd9, 0x3d, 0xa8, 0xe7, 0x04, 0x51, 0xec, 0x5b, 0x82, 0xab, 0x59, 0xf4, 0x0b, 0xab,
	0x75, 0x0b, 0x3c, 0xda, 0xa6, 0x4e, 0x5f, 0xb7, 0x95, 0x43, 0x80, 0xc8, 0xa3, 0x03, 0x8d, 0x65,
	0x17, 0xa4, 0x53, 0xb7, 0x05, 0x58, 0x38, 0xc9, 0x69, 0xa6, 0xaa, 0x62, 0x3e, 0x3f, 0xc9, 0x32,
	0xa0, 0xa7, 0x62, 0x9e, 0x1f, 0xd3, 0x02, 0x38, 0x8c, 0xfa, 0x47, 0x43, 0x7a, 0x0f, 0x88, 0xfb,
	0xbc, 0x60, 0x09, 0x59, 0x3c, 0x01, 0x9b, 0xcb, 0x4f, 0xc0, 0x3d, 0xa8, 0x4b, 0x1d, 0x6a, 0x93,
	0xc9, 0xbe, 0x09, 0xb1, 0x32, 0x44, 0x73, 0x6e, 0x50, 0x93, 0xfa, 0x80, 0x40, 0x6c, 0xb5, 0x0b,
	0x14, 0xbf, 0x75, 0x91, 0xe2, 0xcf, 0x3d, 0x5b, 0xd7, 0x2f, 0x3c, 0x5b, 0x38, 0xcf, 0xf9, 0x70,
	0xfa, 0xff, 0xb3, 0x7b, 0x85, 0x8c, 0xef, 0x0b, 0xe5, 0x33, 0x57, 0xb8, 0x61, 0xdf, 0x17, 0x04,
	0xe7, 0x13, 0xdd, 0x86, 0x2a, 0xf2, 0x46, 0x26, 0x53, 0xe2, 0x84, 0x6d, 0x52, 0x59, 0x86, 0x90,
	0x46, 0x4c, 0x34, 0xd4, 0xbe, 0x6f, 0x69, 0x04, 0xd7, 0xd8, 0x92, 0x53, 0x91, 0xc9, 0xc1, 0xcc,
	0xbf, 0x49, 0x68, 0x2e, 0x61, 0xac, 0x23, 0x65, 0xc2, 0x13, 0x95, 0x71, 0xed, 0x37, 0xe9, 0xd7,
	0xc5, 0x1d, 0x29, 0xf3, 0x02, 0x65, 0x76, 0x1f, 0x6e, 0x44, 0x71, 0xac, 0x4e, 0xc2, 0xfe, 0x28,
	0x4a, 0x86, 0xc2, 0x16, 0x9b, 0xb2, 0xba, 0x45, 0xe5, 0xde, 0xa2, 0xdd, 0xc7, 0xb4, 0x89, 0x65,
	0xa7, 0x04, 0x3f, 0x81, 0x6d, 0x6b, 0x34, 0x49, 0x63, 0x15, 0x71, 0x5b, 0x24, 0x6b, 0xb5, 0x43,
	0x56, 0xd7, 0x69, 0xfb, 0x7b, 0xda, 0xa5, 0x82, 0x91, 0xd9, 0x13, 0xa8, 0x25, 0xe2, 0x64, 0x91,
	0xfa, 0x6d, 0x9a, 0xf1, 0xbb, 0x6f, 0x9a, 0x71, 0x1d, 0x54, 0x13, 0x71, 0x32, 0x2f, 0x0e, 0xde,
	0x4c, 0x1a, 0x6a, 0xa1, 0x35, 0xd6, 0xa6, 0x95, 0xdf, 0x4c, 0x7a, 0x60, 0x01, 0xcc, 0x36, 0x9d,
	0xbf, 0xef, 0x77, 0x72, 0x36, 0xcd, 0x5f, 0xf7, 0xee, 0xaf, 0x25, 0xa8, 0xd0, 0xf5, 0x7e, 0x0d,
	0xf5, 0xa1, 0x30, 0xa1, 0x4c, 0x06, 0x2a, 0x3c, 0x9c, 0x85, 0xf8, 0x23, 0x72, 0xf5, 0xdf, 0xd1,
	0x71, 0x73, 0xe7, 0x75, 0xbf, 0x4e, 0xec, 0x73, 0x70, 0x0b, 0x67, 0x6c, 0xfb, 0xf2, 0x6c, 0x8e,
	0x9b, 0xfe, 0x55, 0x69, 0x3e, 0xda, 0xf9, 0xf3, 0xb4, 0x55, 0x7a, 0x79, 0xda, 0x2a, 0xbd, 0x3a,
	0x6d, 0x95, 0x7e, 0x39, 0x6b, 0x5d, 0x7b, 0x79, 0xd6, 0xba, 0xf6, 0xd7, 0x59, 0xeb, 0xda, 0x8f,
	0xe5, 0xe9, 0xfe, 0xe1, 0x2a, 0xfd, 0xad, 0xde, 0xff, 0x3b, 0x00, 0x00, 0xff, 0xff, 0x85, 0xf9,
	0xa5, 0xa3, 0xbe, 0x0a, 0x00, 0x00,
}
