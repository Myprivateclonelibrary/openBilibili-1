// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: payLive.proto

package v1

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type PayLiveAddReq struct {
	// 平台
	Platform string `protobuf:"bytes,1,opt,name=platform,proto3" json:"platform,omitempty" form:"platform"`
	// 商品名称
	RoomId int64 `protobuf:"varint,2,opt,name=room_id,json=roomId,proto3" json:"room_id,omitempty" form:"room_id" validate:"required"`
	// 商品名称
	Title string `protobuf:"bytes,3,opt,name=title,proto3" json:"title,omitempty" form:"title" validate:"required"`
	// 鉴权状态，1开，0关
	Status int64 `protobuf:"varint,4,opt,name=status,proto3" json:"status,omitempty" form:"status"`
	// 开始时间
	StartTime string `protobuf:"bytes,5,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty" form:"start_time" validate:"required"`
	// 结束时间
	EndTime string `protobuf:"bytes,6,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty" form:"end_time" validate:"required"`
	// 正片结束时间
	LiveEndTime string `protobuf:"bytes,7,opt,name=live_end_time,json=liveEndTime,proto3" json:"live_end_time,omitempty" form:"live_end_time"`
	// 正片保底图
	LivePic string `protobuf:"bytes,8,opt,name=live_pic,json=livePic,proto3" json:"live_pic,omitempty" form:"live_pic" validate:"required"`
	// 广告图
	AdPic string `protobuf:"bytes,9,opt,name=ad_pic,json=adPic,proto3" json:"ad_pic,omitempty" form:"ad_pic" validate:"required"`
	// 购买链接
	GoodsLink string `protobuf:"bytes,10,opt,name=goods_link,json=goodsLink,proto3" json:"goods_link,omitempty" form:"goods_link" validate:"required"`
	// 门票id，逗号分隔
	GoodsId string `protobuf:"bytes,11,opt,name=goods_id,json=goodsId,proto3" json:"goods_id,omitempty" form:"goods_id" validate:"required"`
	// ip限制，0不限制，1仅限大陆，2仅限港澳台，3大陆+港澳台
	IpLimit int64 `protobuf:"varint,12,opt,name=ip_limit,json=ipLimit,proto3" json:"ip_limit,omitempty" form:"ip_limit"`
	// 购买门票id
	BuyGoodsId           int64    `protobuf:"varint,13,opt,name=buy_goods_id,json=buyGoodsId,proto3" json:"buy_goods_id,omitempty" form:"buy_goods_id" validate:"required"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PayLiveAddReq) Reset()         { *m = PayLiveAddReq{} }
func (m *PayLiveAddReq) String() string { return proto.CompactTextString(m) }
func (*PayLiveAddReq) ProtoMessage()    {}
func (*PayLiveAddReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_payLive_ac53a692c39fa0ff, []int{0}
}
func (m *PayLiveAddReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PayLiveAddReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PayLiveAddReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *PayLiveAddReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PayLiveAddReq.Merge(dst, src)
}
func (m *PayLiveAddReq) XXX_Size() int {
	return m.Size()
}
func (m *PayLiveAddReq) XXX_DiscardUnknown() {
	xxx_messageInfo_PayLiveAddReq.DiscardUnknown(m)
}

var xxx_messageInfo_PayLiveAddReq proto.InternalMessageInfo

type PayLiveAddResp struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PayLiveAddResp) Reset()         { *m = PayLiveAddResp{} }
func (m *PayLiveAddResp) String() string { return proto.CompactTextString(m) }
func (*PayLiveAddResp) ProtoMessage()    {}
func (*PayLiveAddResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_payLive_ac53a692c39fa0ff, []int{1}
}
func (m *PayLiveAddResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PayLiveAddResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PayLiveAddResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *PayLiveAddResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PayLiveAddResp.Merge(dst, src)
}
func (m *PayLiveAddResp) XXX_Size() int {
	return m.Size()
}
func (m *PayLiveAddResp) XXX_DiscardUnknown() {
	xxx_messageInfo_PayLiveAddResp.DiscardUnknown(m)
}

var xxx_messageInfo_PayLiveAddResp proto.InternalMessageInfo

type PayLiveUpdateReq struct {
	// id
	LiveId int64 `protobuf:"varint,1,opt,name=live_id,json=liveId,proto3" json:"live_id,omitempty" form:"live_id" validate:"required"`
	// 平台
	Platform string `protobuf:"bytes,2,opt,name=platform,proto3" json:"platform,omitempty" form:"platform"`
	// 商品名称
	RoomId int64 `protobuf:"varint,3,opt,name=room_id,json=roomId,proto3" json:"room_id,omitempty" form:"room_id" validate:"required"`
	// 商品名称
	Title string `protobuf:"bytes,4,opt,name=title,proto3" json:"title,omitempty" form:"title" validate:"required"`
	// 鉴权状态，1开，0关
	Status int64 `protobuf:"varint,5,opt,name=status,proto3" json:"status,omitempty" form:"status"`
	// 开始时间
	StartTime string `protobuf:"bytes,6,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty" form:"start_time" validate:"required"`
	// 结束时间
	EndTime string `protobuf:"bytes,7,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty" form:"end_time" validate:"required"`
	// 正片结束时间
	LiveEndTime string `protobuf:"bytes,8,opt,name=live_end_time,json=liveEndTime,proto3" json:"live_end_time,omitempty" form:"live_end_time" validate:"required"`
	// 正片保底图
	LivePic string `protobuf:"bytes,9,opt,name=live_pic,json=livePic,proto3" json:"live_pic,omitempty" form:"live_pic" validate:"required"`
	// 广告图
	AdPic string `protobuf:"bytes,10,opt,name=ad_pic,json=adPic,proto3" json:"ad_pic,omitempty" form:"ad_pic" validate:"required"`
	// 购买链接
	GoodsLink string `protobuf:"bytes,11,opt,name=goods_link,json=goodsLink,proto3" json:"goods_link,omitempty" form:"goods_link" validate:"required"`
	// 门票id，逗号分隔
	GoodsId string `protobuf:"bytes,12,opt,name=goods_id,json=goodsId,proto3" json:"goods_id,omitempty" form:"goods_id" validate:"required"`
	// ip限制，0不限制，1仅限大陆，2仅限港澳台，3大陆+港澳台
	IpLimit int64 `protobuf:"varint,13,opt,name=ip_limit,json=ipLimit,proto3" json:"ip_limit,omitempty" form:"ip_limit"`
	// 购买门票id
	BuyGoodsId           int64    `protobuf:"varint,14,opt,name=buy_goods_id,json=buyGoodsId,proto3" json:"buy_goods_id,omitempty" form:"buy_goods_id" validate:"required"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PayLiveUpdateReq) Reset()         { *m = PayLiveUpdateReq{} }
func (m *PayLiveUpdateReq) String() string { return proto.CompactTextString(m) }
func (*PayLiveUpdateReq) ProtoMessage()    {}
func (*PayLiveUpdateReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_payLive_ac53a692c39fa0ff, []int{2}
}
func (m *PayLiveUpdateReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PayLiveUpdateReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PayLiveUpdateReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *PayLiveUpdateReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PayLiveUpdateReq.Merge(dst, src)
}
func (m *PayLiveUpdateReq) XXX_Size() int {
	return m.Size()
}
func (m *PayLiveUpdateReq) XXX_DiscardUnknown() {
	xxx_messageInfo_PayLiveUpdateReq.DiscardUnknown(m)
}

var xxx_messageInfo_PayLiveUpdateReq proto.InternalMessageInfo

type PayLiveUpdateResp struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PayLiveUpdateResp) Reset()         { *m = PayLiveUpdateResp{} }
func (m *PayLiveUpdateResp) String() string { return proto.CompactTextString(m) }
func (*PayLiveUpdateResp) ProtoMessage()    {}
func (*PayLiveUpdateResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_payLive_ac53a692c39fa0ff, []int{3}
}
func (m *PayLiveUpdateResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PayLiveUpdateResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PayLiveUpdateResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *PayLiveUpdateResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PayLiveUpdateResp.Merge(dst, src)
}
func (m *PayLiveUpdateResp) XXX_Size() int {
	return m.Size()
}
func (m *PayLiveUpdateResp) XXX_DiscardUnknown() {
	xxx_messageInfo_PayLiveUpdateResp.DiscardUnknown(m)
}

var xxx_messageInfo_PayLiveUpdateResp proto.InternalMessageInfo

type PayLiveGetListReq struct {
	// 房间id
	RoomId int64 `protobuf:"varint,1,opt,name=room_id,json=roomId,proto3" json:"room_id,omitempty" form:"room_id"`
	// 商品名称
	Title string `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty" form:"title"`
	// ip限制
	IpLimit int64 `protobuf:"varint,3,opt,name=ip_limit,json=ipLimit,proto3" json:"ip_limit,omitempty" form:"ip_limit"`
	// 页号，0开始
	PageNum int64 `protobuf:"varint,4,opt,name=page_num,json=pageNum,proto3" json:"page_num,omitempty" form:"page_num"`
	// 每页个数
	PageSize             int64    `protobuf:"varint,5,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty" form:"page_size" validate:"required"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PayLiveGetListReq) Reset()         { *m = PayLiveGetListReq{} }
func (m *PayLiveGetListReq) String() string { return proto.CompactTextString(m) }
func (*PayLiveGetListReq) ProtoMessage()    {}
func (*PayLiveGetListReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_payLive_ac53a692c39fa0ff, []int{4}
}
func (m *PayLiveGetListReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PayLiveGetListReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PayLiveGetListReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *PayLiveGetListReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PayLiveGetListReq.Merge(dst, src)
}
func (m *PayLiveGetListReq) XXX_Size() int {
	return m.Size()
}
func (m *PayLiveGetListReq) XXX_DiscardUnknown() {
	xxx_messageInfo_PayLiveGetListReq.DiscardUnknown(m)
}

var xxx_messageInfo_PayLiveGetListReq proto.InternalMessageInfo

type PayLiveGetListResp struct {
	PageInfo             *PayLiveGetListResp_PageInfo    `protobuf:"bytes,1,opt,name=page_info,json=pageInfo" json:"page_info"`
	GoodsInfo            []*PayLiveGetListResp_GoodsInfo `protobuf:"bytes,2,rep,name=goods_info,json=goodsInfo" json:"goods_info"`
	XXX_NoUnkeyedLiteral struct{}                        `json:"-"`
	XXX_unrecognized     []byte                          `json:"-"`
	XXX_sizecache        int32                           `json:"-"`
}

func (m *PayLiveGetListResp) Reset()         { *m = PayLiveGetListResp{} }
func (m *PayLiveGetListResp) String() string { return proto.CompactTextString(m) }
func (*PayLiveGetListResp) ProtoMessage()    {}
func (*PayLiveGetListResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_payLive_ac53a692c39fa0ff, []int{5}
}
func (m *PayLiveGetListResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PayLiveGetListResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PayLiveGetListResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *PayLiveGetListResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PayLiveGetListResp.Merge(dst, src)
}
func (m *PayLiveGetListResp) XXX_Size() int {
	return m.Size()
}
func (m *PayLiveGetListResp) XXX_DiscardUnknown() {
	xxx_messageInfo_PayLiveGetListResp.DiscardUnknown(m)
}

var xxx_messageInfo_PayLiveGetListResp proto.InternalMessageInfo

type PayLiveGetListResp_PageInfo struct {
	// 记录总数
	TotalCount int64 `protobuf:"varint,1,opt,name=total_count,json=totalCount,proto3" json:"total_count"`
	// 当前页号
	PageNum              int64    `protobuf:"varint,2,opt,name=page_num,json=pageNum,proto3" json:"page_num"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PayLiveGetListResp_PageInfo) Reset()         { *m = PayLiveGetListResp_PageInfo{} }
func (m *PayLiveGetListResp_PageInfo) String() string { return proto.CompactTextString(m) }
func (*PayLiveGetListResp_PageInfo) ProtoMessage()    {}
func (*PayLiveGetListResp_PageInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_payLive_ac53a692c39fa0ff, []int{5, 0}
}
func (m *PayLiveGetListResp_PageInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PayLiveGetListResp_PageInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PayLiveGetListResp_PageInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *PayLiveGetListResp_PageInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PayLiveGetListResp_PageInfo.Merge(dst, src)
}
func (m *PayLiveGetListResp_PageInfo) XXX_Size() int {
	return m.Size()
}
func (m *PayLiveGetListResp_PageInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_PayLiveGetListResp_PageInfo.DiscardUnknown(m)
}

var xxx_messageInfo_PayLiveGetListResp_PageInfo proto.InternalMessageInfo

type PayLiveGetListResp_GoodsInfo struct {
	// 房间id
	RoomId int64 `protobuf:"varint,1,opt,name=room_id,json=roomId,proto3" json:"room_id"`
	// 付费直播id
	LiveId int64 `protobuf:"varint,2,opt,name=live_id,json=liveId,proto3" json:"live_id"`
	// 标题
	Title string `protobuf:"bytes,3,opt,name=title,proto3" json:"title"`
	// 平台
	Platform string `protobuf:"bytes,4,opt,name=platform,proto3" json:"platform"`
	// 生效状态，1生效，0未生效
	PayLiveStatus int64 `protobuf:"varint,5,opt,name=pay_live_status,json=payLiveStatus,proto3" json:"pay_live_status"`
	// 开始购票时间
	StartTime string `protobuf:"bytes,6,opt,name=start_time,json=startTime,proto3" json:"start_time"`
	// 结束购票时间
	EndTime string `protobuf:"bytes,7,opt,name=end_time,json=endTime,proto3" json:"end_time"`
	// 正片结束
	LiveEndTime string `protobuf:"bytes,8,opt,name=live_end_time,json=liveEndTime,proto3" json:"live_end_time"`
	// 正片保底图
	LivePic string `protobuf:"bytes,9,opt,name=live_pic,json=livePic,proto3" json:"live_pic"`
	// 广告图
	AdPic string `protobuf:"bytes,10,opt,name=ad_pic,json=adPic,proto3" json:"ad_pic"`
	// 购票链接
	GoodsLink string `protobuf:"bytes,11,opt,name=goods_link,json=goodsLink,proto3" json:"goods_link"`
	// 购票id
	GoodsId string `protobuf:"bytes,12,opt,name=goods_id,json=goodsId,proto3" json:"goods_id"`
	// ip限制
	IpLimit int64 `protobuf:"varint,13,opt,name=ip_limit,json=ipLimit,proto3" json:"ip_limit"`
	// 鉴权状态，0关闭，1开启
	Status int64 `protobuf:"varint,14,opt,name=status,proto3" json:"status"`
	// 引导购票id
	BuyGoodsId           int64    `protobuf:"varint,15,opt,name=buy_goods_id,json=buyGoodsId,proto3" json:"buy_goods_id"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PayLiveGetListResp_GoodsInfo) Reset()         { *m = PayLiveGetListResp_GoodsInfo{} }
func (m *PayLiveGetListResp_GoodsInfo) String() string { return proto.CompactTextString(m) }
func (*PayLiveGetListResp_GoodsInfo) ProtoMessage()    {}
func (*PayLiveGetListResp_GoodsInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_payLive_ac53a692c39fa0ff, []int{5, 1}
}
func (m *PayLiveGetListResp_GoodsInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PayLiveGetListResp_GoodsInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PayLiveGetListResp_GoodsInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *PayLiveGetListResp_GoodsInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PayLiveGetListResp_GoodsInfo.Merge(dst, src)
}
func (m *PayLiveGetListResp_GoodsInfo) XXX_Size() int {
	return m.Size()
}
func (m *PayLiveGetListResp_GoodsInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_PayLiveGetListResp_GoodsInfo.DiscardUnknown(m)
}

var xxx_messageInfo_PayLiveGetListResp_GoodsInfo proto.InternalMessageInfo

type PayLiveCloseReq struct {
	// 直播id
	LiveId               int64    `protobuf:"varint,1,opt,name=live_id,json=liveId,proto3" json:"live_id,omitempty" form:"live_id" validate:"required"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PayLiveCloseReq) Reset()         { *m = PayLiveCloseReq{} }
func (m *PayLiveCloseReq) String() string { return proto.CompactTextString(m) }
func (*PayLiveCloseReq) ProtoMessage()    {}
func (*PayLiveCloseReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_payLive_ac53a692c39fa0ff, []int{6}
}
func (m *PayLiveCloseReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PayLiveCloseReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PayLiveCloseReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *PayLiveCloseReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PayLiveCloseReq.Merge(dst, src)
}
func (m *PayLiveCloseReq) XXX_Size() int {
	return m.Size()
}
func (m *PayLiveCloseReq) XXX_DiscardUnknown() {
	xxx_messageInfo_PayLiveCloseReq.DiscardUnknown(m)
}

var xxx_messageInfo_PayLiveCloseReq proto.InternalMessageInfo

type PayLiveCloseResp struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PayLiveCloseResp) Reset()         { *m = PayLiveCloseResp{} }
func (m *PayLiveCloseResp) String() string { return proto.CompactTextString(m) }
func (*PayLiveCloseResp) ProtoMessage()    {}
func (*PayLiveCloseResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_payLive_ac53a692c39fa0ff, []int{7}
}
func (m *PayLiveCloseResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PayLiveCloseResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PayLiveCloseResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *PayLiveCloseResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PayLiveCloseResp.Merge(dst, src)
}
func (m *PayLiveCloseResp) XXX_Size() int {
	return m.Size()
}
func (m *PayLiveCloseResp) XXX_DiscardUnknown() {
	xxx_messageInfo_PayLiveCloseResp.DiscardUnknown(m)
}

var xxx_messageInfo_PayLiveCloseResp proto.InternalMessageInfo

type PayLiveOpenReq struct {
	// 直播id
	LiveId               int64    `protobuf:"varint,1,opt,name=live_id,json=liveId,proto3" json:"live_id,omitempty" form:"live_id" validate:"required"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PayLiveOpenReq) Reset()         { *m = PayLiveOpenReq{} }
func (m *PayLiveOpenReq) String() string { return proto.CompactTextString(m) }
func (*PayLiveOpenReq) ProtoMessage()    {}
func (*PayLiveOpenReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_payLive_ac53a692c39fa0ff, []int{8}
}
func (m *PayLiveOpenReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PayLiveOpenReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PayLiveOpenReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *PayLiveOpenReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PayLiveOpenReq.Merge(dst, src)
}
func (m *PayLiveOpenReq) XXX_Size() int {
	return m.Size()
}
func (m *PayLiveOpenReq) XXX_DiscardUnknown() {
	xxx_messageInfo_PayLiveOpenReq.DiscardUnknown(m)
}

var xxx_messageInfo_PayLiveOpenReq proto.InternalMessageInfo

type PayLiveOpenResp struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PayLiveOpenResp) Reset()         { *m = PayLiveOpenResp{} }
func (m *PayLiveOpenResp) String() string { return proto.CompactTextString(m) }
func (*PayLiveOpenResp) ProtoMessage()    {}
func (*PayLiveOpenResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_payLive_ac53a692c39fa0ff, []int{9}
}
func (m *PayLiveOpenResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PayLiveOpenResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PayLiveOpenResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *PayLiveOpenResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PayLiveOpenResp.Merge(dst, src)
}
func (m *PayLiveOpenResp) XXX_Size() int {
	return m.Size()
}
func (m *PayLiveOpenResp) XXX_DiscardUnknown() {
	xxx_messageInfo_PayLiveOpenResp.DiscardUnknown(m)
}

var xxx_messageInfo_PayLiveOpenResp proto.InternalMessageInfo

func init() {
	proto.RegisterType((*PayLiveAddReq)(nil), "live.liveadmin.v1.PayLiveAddReq")
	proto.RegisterType((*PayLiveAddResp)(nil), "live.liveadmin.v1.PayLiveAddResp")
	proto.RegisterType((*PayLiveUpdateReq)(nil), "live.liveadmin.v1.PayLiveUpdateReq")
	proto.RegisterType((*PayLiveUpdateResp)(nil), "live.liveadmin.v1.PayLiveUpdateResp")
	proto.RegisterType((*PayLiveGetListReq)(nil), "live.liveadmin.v1.PayLiveGetListReq")
	proto.RegisterType((*PayLiveGetListResp)(nil), "live.liveadmin.v1.PayLiveGetListResp")
	proto.RegisterType((*PayLiveGetListResp_PageInfo)(nil), "live.liveadmin.v1.PayLiveGetListResp.PageInfo")
	proto.RegisterType((*PayLiveGetListResp_GoodsInfo)(nil), "live.liveadmin.v1.PayLiveGetListResp.GoodsInfo")
	proto.RegisterType((*PayLiveCloseReq)(nil), "live.liveadmin.v1.PayLiveCloseReq")
	proto.RegisterType((*PayLiveCloseResp)(nil), "live.liveadmin.v1.PayLiveCloseResp")
	proto.RegisterType((*PayLiveOpenReq)(nil), "live.liveadmin.v1.PayLiveOpenReq")
	proto.RegisterType((*PayLiveOpenResp)(nil), "live.liveadmin.v1.PayLiveOpenResp")
}
func (m *PayLiveAddReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PayLiveAddReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Platform) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPayLive(dAtA, i, uint64(len(m.Platform)))
		i += copy(dAtA[i:], m.Platform)
	}
	if m.RoomId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPayLive(dAtA, i, uint64(m.RoomId))
	}
	if len(m.Title) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintPayLive(dAtA, i, uint64(len(m.Title)))
		i += copy(dAtA[i:], m.Title)
	}
	if m.Status != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintPayLive(dAtA, i, uint64(m.Status))
	}
	if len(m.StartTime) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintPayLive(dAtA, i, uint64(len(m.StartTime)))
		i += copy(dAtA[i:], m.StartTime)
	}
	if len(m.EndTime) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintPayLive(dAtA, i, uint64(len(m.EndTime)))
		i += copy(dAtA[i:], m.EndTime)
	}
	if len(m.LiveEndTime) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintPayLive(dAtA, i, uint64(len(m.LiveEndTime)))
		i += copy(dAtA[i:], m.LiveEndTime)
	}
	if len(m.LivePic) > 0 {
		dAtA[i] = 0x42
		i++
		i = encodeVarintPayLive(dAtA, i, uint64(len(m.LivePic)))
		i += copy(dAtA[i:], m.LivePic)
	}
	if len(m.AdPic) > 0 {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintPayLive(dAtA, i, uint64(len(m.AdPic)))
		i += copy(dAtA[i:], m.AdPic)
	}
	if len(m.GoodsLink) > 0 {
		dAtA[i] = 0x52
		i++
		i = encodeVarintPayLive(dAtA, i, uint64(len(m.GoodsLink)))
		i += copy(dAtA[i:], m.GoodsLink)
	}
	if len(m.GoodsId) > 0 {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintPayLive(dAtA, i, uint64(len(m.GoodsId)))
		i += copy(dAtA[i:], m.GoodsId)
	}
	if m.IpLimit != 0 {
		dAtA[i] = 0x60
		i++
		i = encodeVarintPayLive(dAtA, i, uint64(m.IpLimit))
	}
	if m.BuyGoodsId != 0 {
		dAtA[i] = 0x68
		i++
		i = encodeVarintPayLive(dAtA, i, uint64(m.BuyGoodsId))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *PayLiveAddResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PayLiveAddResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *PayLiveUpdateReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PayLiveUpdateReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.LiveId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPayLive(dAtA, i, uint64(m.LiveId))
	}
	if len(m.Platform) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintPayLive(dAtA, i, uint64(len(m.Platform)))
		i += copy(dAtA[i:], m.Platform)
	}
	if m.RoomId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintPayLive(dAtA, i, uint64(m.RoomId))
	}
	if len(m.Title) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintPayLive(dAtA, i, uint64(len(m.Title)))
		i += copy(dAtA[i:], m.Title)
	}
	if m.Status != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintPayLive(dAtA, i, uint64(m.Status))
	}
	if len(m.StartTime) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintPayLive(dAtA, i, uint64(len(m.StartTime)))
		i += copy(dAtA[i:], m.StartTime)
	}
	if len(m.EndTime) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintPayLive(dAtA, i, uint64(len(m.EndTime)))
		i += copy(dAtA[i:], m.EndTime)
	}
	if len(m.LiveEndTime) > 0 {
		dAtA[i] = 0x42
		i++
		i = encodeVarintPayLive(dAtA, i, uint64(len(m.LiveEndTime)))
		i += copy(dAtA[i:], m.LiveEndTime)
	}
	if len(m.LivePic) > 0 {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintPayLive(dAtA, i, uint64(len(m.LivePic)))
		i += copy(dAtA[i:], m.LivePic)
	}
	if len(m.AdPic) > 0 {
		dAtA[i] = 0x52
		i++
		i = encodeVarintPayLive(dAtA, i, uint64(len(m.AdPic)))
		i += copy(dAtA[i:], m.AdPic)
	}
	if len(m.GoodsLink) > 0 {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintPayLive(dAtA, i, uint64(len(m.GoodsLink)))
		i += copy(dAtA[i:], m.GoodsLink)
	}
	if len(m.GoodsId) > 0 {
		dAtA[i] = 0x62
		i++
		i = encodeVarintPayLive(dAtA, i, uint64(len(m.GoodsId)))
		i += copy(dAtA[i:], m.GoodsId)
	}
	if m.IpLimit != 0 {
		dAtA[i] = 0x68
		i++
		i = encodeVarintPayLive(dAtA, i, uint64(m.IpLimit))
	}
	if m.BuyGoodsId != 0 {
		dAtA[i] = 0x70
		i++
		i = encodeVarintPayLive(dAtA, i, uint64(m.BuyGoodsId))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *PayLiveUpdateResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PayLiveUpdateResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *PayLiveGetListReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PayLiveGetListReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.RoomId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPayLive(dAtA, i, uint64(m.RoomId))
	}
	if len(m.Title) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintPayLive(dAtA, i, uint64(len(m.Title)))
		i += copy(dAtA[i:], m.Title)
	}
	if m.IpLimit != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintPayLive(dAtA, i, uint64(m.IpLimit))
	}
	if m.PageNum != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintPayLive(dAtA, i, uint64(m.PageNum))
	}
	if m.PageSize != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintPayLive(dAtA, i, uint64(m.PageSize))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *PayLiveGetListResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PayLiveGetListResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.PageInfo != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPayLive(dAtA, i, uint64(m.PageInfo.Size()))
		n1, err := m.PageInfo.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if len(m.GoodsInfo) > 0 {
		for _, msg := range m.GoodsInfo {
			dAtA[i] = 0x12
			i++
			i = encodeVarintPayLive(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *PayLiveGetListResp_PageInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PayLiveGetListResp_PageInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.TotalCount != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPayLive(dAtA, i, uint64(m.TotalCount))
	}
	if m.PageNum != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPayLive(dAtA, i, uint64(m.PageNum))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *PayLiveGetListResp_GoodsInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PayLiveGetListResp_GoodsInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.RoomId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPayLive(dAtA, i, uint64(m.RoomId))
	}
	if m.LiveId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPayLive(dAtA, i, uint64(m.LiveId))
	}
	if len(m.Title) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintPayLive(dAtA, i, uint64(len(m.Title)))
		i += copy(dAtA[i:], m.Title)
	}
	if len(m.Platform) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintPayLive(dAtA, i, uint64(len(m.Platform)))
		i += copy(dAtA[i:], m.Platform)
	}
	if m.PayLiveStatus != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintPayLive(dAtA, i, uint64(m.PayLiveStatus))
	}
	if len(m.StartTime) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintPayLive(dAtA, i, uint64(len(m.StartTime)))
		i += copy(dAtA[i:], m.StartTime)
	}
	if len(m.EndTime) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintPayLive(dAtA, i, uint64(len(m.EndTime)))
		i += copy(dAtA[i:], m.EndTime)
	}
	if len(m.LiveEndTime) > 0 {
		dAtA[i] = 0x42
		i++
		i = encodeVarintPayLive(dAtA, i, uint64(len(m.LiveEndTime)))
		i += copy(dAtA[i:], m.LiveEndTime)
	}
	if len(m.LivePic) > 0 {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintPayLive(dAtA, i, uint64(len(m.LivePic)))
		i += copy(dAtA[i:], m.LivePic)
	}
	if len(m.AdPic) > 0 {
		dAtA[i] = 0x52
		i++
		i = encodeVarintPayLive(dAtA, i, uint64(len(m.AdPic)))
		i += copy(dAtA[i:], m.AdPic)
	}
	if len(m.GoodsLink) > 0 {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintPayLive(dAtA, i, uint64(len(m.GoodsLink)))
		i += copy(dAtA[i:], m.GoodsLink)
	}
	if len(m.GoodsId) > 0 {
		dAtA[i] = 0x62
		i++
		i = encodeVarintPayLive(dAtA, i, uint64(len(m.GoodsId)))
		i += copy(dAtA[i:], m.GoodsId)
	}
	if m.IpLimit != 0 {
		dAtA[i] = 0x68
		i++
		i = encodeVarintPayLive(dAtA, i, uint64(m.IpLimit))
	}
	if m.Status != 0 {
		dAtA[i] = 0x70
		i++
		i = encodeVarintPayLive(dAtA, i, uint64(m.Status))
	}
	if m.BuyGoodsId != 0 {
		dAtA[i] = 0x78
		i++
		i = encodeVarintPayLive(dAtA, i, uint64(m.BuyGoodsId))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *PayLiveCloseReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PayLiveCloseReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.LiveId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPayLive(dAtA, i, uint64(m.LiveId))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *PayLiveCloseResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PayLiveCloseResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *PayLiveOpenReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PayLiveOpenReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.LiveId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPayLive(dAtA, i, uint64(m.LiveId))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *PayLiveOpenResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PayLiveOpenResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintPayLive(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *PayLiveAddReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Platform)
	if l > 0 {
		n += 1 + l + sovPayLive(uint64(l))
	}
	if m.RoomId != 0 {
		n += 1 + sovPayLive(uint64(m.RoomId))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovPayLive(uint64(l))
	}
	if m.Status != 0 {
		n += 1 + sovPayLive(uint64(m.Status))
	}
	l = len(m.StartTime)
	if l > 0 {
		n += 1 + l + sovPayLive(uint64(l))
	}
	l = len(m.EndTime)
	if l > 0 {
		n += 1 + l + sovPayLive(uint64(l))
	}
	l = len(m.LiveEndTime)
	if l > 0 {
		n += 1 + l + sovPayLive(uint64(l))
	}
	l = len(m.LivePic)
	if l > 0 {
		n += 1 + l + sovPayLive(uint64(l))
	}
	l = len(m.AdPic)
	if l > 0 {
		n += 1 + l + sovPayLive(uint64(l))
	}
	l = len(m.GoodsLink)
	if l > 0 {
		n += 1 + l + sovPayLive(uint64(l))
	}
	l = len(m.GoodsId)
	if l > 0 {
		n += 1 + l + sovPayLive(uint64(l))
	}
	if m.IpLimit != 0 {
		n += 1 + sovPayLive(uint64(m.IpLimit))
	}
	if m.BuyGoodsId != 0 {
		n += 1 + sovPayLive(uint64(m.BuyGoodsId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PayLiveAddResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PayLiveUpdateReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LiveId != 0 {
		n += 1 + sovPayLive(uint64(m.LiveId))
	}
	l = len(m.Platform)
	if l > 0 {
		n += 1 + l + sovPayLive(uint64(l))
	}
	if m.RoomId != 0 {
		n += 1 + sovPayLive(uint64(m.RoomId))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovPayLive(uint64(l))
	}
	if m.Status != 0 {
		n += 1 + sovPayLive(uint64(m.Status))
	}
	l = len(m.StartTime)
	if l > 0 {
		n += 1 + l + sovPayLive(uint64(l))
	}
	l = len(m.EndTime)
	if l > 0 {
		n += 1 + l + sovPayLive(uint64(l))
	}
	l = len(m.LiveEndTime)
	if l > 0 {
		n += 1 + l + sovPayLive(uint64(l))
	}
	l = len(m.LivePic)
	if l > 0 {
		n += 1 + l + sovPayLive(uint64(l))
	}
	l = len(m.AdPic)
	if l > 0 {
		n += 1 + l + sovPayLive(uint64(l))
	}
	l = len(m.GoodsLink)
	if l > 0 {
		n += 1 + l + sovPayLive(uint64(l))
	}
	l = len(m.GoodsId)
	if l > 0 {
		n += 1 + l + sovPayLive(uint64(l))
	}
	if m.IpLimit != 0 {
		n += 1 + sovPayLive(uint64(m.IpLimit))
	}
	if m.BuyGoodsId != 0 {
		n += 1 + sovPayLive(uint64(m.BuyGoodsId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PayLiveUpdateResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PayLiveGetListReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RoomId != 0 {
		n += 1 + sovPayLive(uint64(m.RoomId))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovPayLive(uint64(l))
	}
	if m.IpLimit != 0 {
		n += 1 + sovPayLive(uint64(m.IpLimit))
	}
	if m.PageNum != 0 {
		n += 1 + sovPayLive(uint64(m.PageNum))
	}
	if m.PageSize != 0 {
		n += 1 + sovPayLive(uint64(m.PageSize))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PayLiveGetListResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PageInfo != nil {
		l = m.PageInfo.Size()
		n += 1 + l + sovPayLive(uint64(l))
	}
	if len(m.GoodsInfo) > 0 {
		for _, e := range m.GoodsInfo {
			l = e.Size()
			n += 1 + l + sovPayLive(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PayLiveGetListResp_PageInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TotalCount != 0 {
		n += 1 + sovPayLive(uint64(m.TotalCount))
	}
	if m.PageNum != 0 {
		n += 1 + sovPayLive(uint64(m.PageNum))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PayLiveGetListResp_GoodsInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RoomId != 0 {
		n += 1 + sovPayLive(uint64(m.RoomId))
	}
	if m.LiveId != 0 {
		n += 1 + sovPayLive(uint64(m.LiveId))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovPayLive(uint64(l))
	}
	l = len(m.Platform)
	if l > 0 {
		n += 1 + l + sovPayLive(uint64(l))
	}
	if m.PayLiveStatus != 0 {
		n += 1 + sovPayLive(uint64(m.PayLiveStatus))
	}
	l = len(m.StartTime)
	if l > 0 {
		n += 1 + l + sovPayLive(uint64(l))
	}
	l = len(m.EndTime)
	if l > 0 {
		n += 1 + l + sovPayLive(uint64(l))
	}
	l = len(m.LiveEndTime)
	if l > 0 {
		n += 1 + l + sovPayLive(uint64(l))
	}
	l = len(m.LivePic)
	if l > 0 {
		n += 1 + l + sovPayLive(uint64(l))
	}
	l = len(m.AdPic)
	if l > 0 {
		n += 1 + l + sovPayLive(uint64(l))
	}
	l = len(m.GoodsLink)
	if l > 0 {
		n += 1 + l + sovPayLive(uint64(l))
	}
	l = len(m.GoodsId)
	if l > 0 {
		n += 1 + l + sovPayLive(uint64(l))
	}
	if m.IpLimit != 0 {
		n += 1 + sovPayLive(uint64(m.IpLimit))
	}
	if m.Status != 0 {
		n += 1 + sovPayLive(uint64(m.Status))
	}
	if m.BuyGoodsId != 0 {
		n += 1 + sovPayLive(uint64(m.BuyGoodsId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PayLiveCloseReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LiveId != 0 {
		n += 1 + sovPayLive(uint64(m.LiveId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PayLiveCloseResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PayLiveOpenReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LiveId != 0 {
		n += 1 + sovPayLive(uint64(m.LiveId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PayLiveOpenResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovPayLive(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozPayLive(x uint64) (n int) {
	return sovPayLive(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *PayLiveAddReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPayLive
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PayLiveAddReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PayLiveAddReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Platform", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPayLive
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPayLive
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Platform = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoomId", wireType)
			}
			m.RoomId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPayLive
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RoomId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPayLive
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPayLive
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPayLive
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPayLive
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPayLive
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StartTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPayLive
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPayLive
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EndTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LiveEndTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPayLive
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPayLive
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LiveEndTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LivePic", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPayLive
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPayLive
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LivePic = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdPic", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPayLive
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPayLive
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AdPic = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GoodsLink", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPayLive
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPayLive
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GoodsLink = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GoodsId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPayLive
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPayLive
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GoodsId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IpLimit", wireType)
			}
			m.IpLimit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPayLive
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IpLimit |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BuyGoodsId", wireType)
			}
			m.BuyGoodsId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPayLive
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BuyGoodsId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPayLive(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPayLive
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PayLiveAddResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPayLive
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PayLiveAddResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PayLiveAddResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipPayLive(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPayLive
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PayLiveUpdateReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPayLive
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PayLiveUpdateReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PayLiveUpdateReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LiveId", wireType)
			}
			m.LiveId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPayLive
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LiveId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Platform", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPayLive
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPayLive
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Platform = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoomId", wireType)
			}
			m.RoomId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPayLive
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RoomId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPayLive
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPayLive
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPayLive
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPayLive
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPayLive
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StartTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPayLive
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPayLive
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EndTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LiveEndTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPayLive
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPayLive
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LiveEndTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LivePic", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPayLive
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPayLive
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LivePic = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdPic", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPayLive
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPayLive
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AdPic = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GoodsLink", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPayLive
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPayLive
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GoodsLink = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GoodsId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPayLive
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPayLive
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GoodsId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IpLimit", wireType)
			}
			m.IpLimit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPayLive
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IpLimit |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BuyGoodsId", wireType)
			}
			m.BuyGoodsId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPayLive
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BuyGoodsId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPayLive(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPayLive
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PayLiveUpdateResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPayLive
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PayLiveUpdateResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PayLiveUpdateResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipPayLive(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPayLive
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PayLiveGetListReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPayLive
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PayLiveGetListReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PayLiveGetListReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoomId", wireType)
			}
			m.RoomId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPayLive
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RoomId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPayLive
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPayLive
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IpLimit", wireType)
			}
			m.IpLimit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPayLive
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IpLimit |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageNum", wireType)
			}
			m.PageNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPayLive
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PageNum |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageSize", wireType)
			}
			m.PageSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPayLive
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PageSize |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPayLive(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPayLive
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PayLiveGetListResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPayLive
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PayLiveGetListResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PayLiveGetListResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPayLive
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPayLive
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PageInfo == nil {
				m.PageInfo = &PayLiveGetListResp_PageInfo{}
			}
			if err := m.PageInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GoodsInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPayLive
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPayLive
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GoodsInfo = append(m.GoodsInfo, &PayLiveGetListResp_GoodsInfo{})
			if err := m.GoodsInfo[len(m.GoodsInfo)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPayLive(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPayLive
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PayLiveGetListResp_PageInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPayLive
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PageInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PageInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalCount", wireType)
			}
			m.TotalCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPayLive
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalCount |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageNum", wireType)
			}
			m.PageNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPayLive
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PageNum |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPayLive(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPayLive
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PayLiveGetListResp_GoodsInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPayLive
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GoodsInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GoodsInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoomId", wireType)
			}
			m.RoomId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPayLive
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RoomId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LiveId", wireType)
			}
			m.LiveId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPayLive
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LiveId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPayLive
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPayLive
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Platform", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPayLive
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPayLive
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Platform = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PayLiveStatus", wireType)
			}
			m.PayLiveStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPayLive
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PayLiveStatus |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPayLive
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPayLive
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StartTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPayLive
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPayLive
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EndTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LiveEndTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPayLive
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPayLive
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LiveEndTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LivePic", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPayLive
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPayLive
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LivePic = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdPic", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPayLive
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPayLive
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AdPic = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GoodsLink", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPayLive
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPayLive
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GoodsLink = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GoodsId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPayLive
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPayLive
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GoodsId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IpLimit", wireType)
			}
			m.IpLimit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPayLive
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IpLimit |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPayLive
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BuyGoodsId", wireType)
			}
			m.BuyGoodsId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPayLive
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BuyGoodsId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPayLive(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPayLive
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PayLiveCloseReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPayLive
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PayLiveCloseReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PayLiveCloseReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LiveId", wireType)
			}
			m.LiveId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPayLive
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LiveId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPayLive(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPayLive
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PayLiveCloseResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPayLive
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PayLiveCloseResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PayLiveCloseResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipPayLive(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPayLive
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PayLiveOpenReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPayLive
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PayLiveOpenReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PayLiveOpenReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LiveId", wireType)
			}
			m.LiveId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPayLive
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LiveId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPayLive(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPayLive
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PayLiveOpenResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPayLive
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PayLiveOpenResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PayLiveOpenResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipPayLive(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPayLive
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPayLive(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPayLive
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPayLive
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPayLive
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthPayLive
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowPayLive
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipPayLive(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthPayLive = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPayLive   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("payLive.proto", fileDescriptor_payLive_ac53a692c39fa0ff) }

var fileDescriptor_payLive_ac53a692c39fa0ff = []byte{
	// 1129 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x57, 0xcb, 0x6e, 0xdb, 0x46,
	0x14, 0xad, 0xa4, 0x58, 0x94, 0x46, 0x96, 0x1f, 0xe3, 0x2c, 0x08, 0x2d, 0x3c, 0x32, 0x2d, 0x47,
	0x0a, 0x52, 0xcb, 0x8d, 0x8b, 0x6e, 0xdc, 0x00, 0x41, 0x15, 0x04, 0x89, 0x0b, 0xa7, 0x75, 0xe9,
	0xb6, 0x8b, 0x2c, 0x2a, 0x50, 0x22, 0xad, 0x0e, 0x22, 0x91, 0x63, 0x91, 0x34, 0xe0, 0xfe, 0x44,
	0x17, 0x5d, 0x76, 0xd9, 0x4f, 0xe9, 0x26, 0x9b, 0x02, 0xfd, 0x82, 0x41, 0xeb, 0x25, 0x97, 0xfc,
	0x82, 0x62, 0x1e, 0x7c, 0x88, 0xa2, 0x6a, 0x27, 0xd2, 0x46, 0x20, 0xef, 0xb9, 0xf7, 0xdc, 0xe1,
	0xcc, 0x9c, 0x33, 0x23, 0x50, 0x27, 0xc6, 0xcd, 0x19, 0xbe, 0xb6, 0xba, 0x64, 0xea, 0x78, 0x0e,
	0xdc, 0x1e, 0xb3, 0x67, 0xf6, 0x63, 0x98, 0x13, 0x6c, 0x77, 0xaf, 0x9f, 0x36, 0x0e, 0x47, 0xd8,
	0xfb, 0xd9, 0x1f, 0x74, 0x87, 0xce, 0xe4, 0x68, 0xe4, 0x8c, 0x9c, 0x23, 0x9e, 0x39, 0xf0, 0x2f,
	0xf9, 0x1b, 0x7f, 0xe1, 0x4f, 0x82, 0x41, 0xfb, 0xb3, 0x0c, 0xea, 0xe7, 0x82, 0xf3, 0x2b, 0xd3,
	0xd4, 0xad, 0x2b, 0x78, 0x04, 0x2a, 0x64, 0x6c, 0x78, 0x97, 0xce, 0x74, 0xa2, 0x16, 0x9a, 0x85,
	0x4e, 0xb5, 0xb7, 0x13, 0x52, 0xb4, 0xc9, 0xde, 0x4f, 0xb4, 0x08, 0xd1, 0xf4, 0x38, 0x09, 0x3e,
	0x07, 0xca, 0xd4, 0x71, 0x26, 0x7d, 0x6c, 0xaa, 0xc5, 0x66, 0xa1, 0x53, 0xea, 0x3d, 0x0a, 0x29,
	0xd2, 0x44, 0xbe, 0x04, 0xb4, 0xe6, 0xb5, 0x31, 0xc6, 0xa6, 0xe1, 0x59, 0x27, 0xda, 0xd4, 0xba,
	0xf2, 0xf1, 0xd4, 0x32, 0x35, 0xbd, 0xcc, 0xd0, 0x53, 0x13, 0x9e, 0x80, 0x35, 0x0f, 0x7b, 0x63,
	0x4b, 0x2d, 0xf1, 0x76, 0xad, 0x90, 0xa2, 0xa6, 0x28, 0xe7, 0xe1, 0xfc, 0x62, 0x51, 0x02, 0x1f,
	0x83, 0xb2, 0xeb, 0x19, 0x9e, 0xef, 0xaa, 0x0f, 0x78, 0xef, 0xed, 0x90, 0xa2, 0xba, 0x28, 0x16,
	0x71, 0x4d, 0x97, 0x09, 0xf0, 0x35, 0x00, 0xae, 0x67, 0x4c, 0xbd, 0xbe, 0x87, 0x27, 0x96, 0xba,
	0xc6, 0x7b, 0x3d, 0x0e, 0x29, 0x3a, 0x88, 0xd3, 0x25, 0x96, 0xdf, 0xb0, 0xca, 0x13, 0xbe, 0xc7,
	0x13, 0x0b, 0xf6, 0x40, 0xc5, 0xb2, 0x4d, 0xc1, 0x53, 0xe6, 0x3c, 0xed, 0x90, 0xa2, 0x7d, 0xc1,
	0x13, 0x21, 0xf9, 0x2c, 0x8a, 0x65, 0x9b, 0x9c, 0xe3, 0x19, 0xa8, 0xb3, 0x75, 0xeb, 0xc7, 0x44,
	0x0a, 0x27, 0x52, 0x43, 0x8a, 0x1e, 0x0a, 0xa2, 0x19, 0x58, 0xd3, 0x6b, 0xec, 0xfd, 0xa5, 0xac,
	0xee, 0x81, 0x0a, 0x87, 0x09, 0x1e, 0xaa, 0x95, 0xec, 0x08, 0x22, 0x64, 0xc1, 0x08, 0x18, 0x7c,
	0x8e, 0x87, 0xf0, 0x19, 0x28, 0x1b, 0x26, 0x67, 0xa8, 0x72, 0x86, 0x83, 0x90, 0xa2, 0x3d, 0xc1,
	0x20, 0xe2, 0x0b, 0x26, 0xde, 0x30, 0x59, 0xf5, 0x6b, 0x00, 0x46, 0x8e, 0x63, 0xba, 0xfd, 0x31,
	0xb6, 0xdf, 0xa9, 0x20, 0x3b, 0x9b, 0x09, 0xb6, 0x60, 0x36, 0x79, 0xc2, 0x19, 0xb6, 0xdf, 0xb1,
	0x6f, 0x11, 0xd9, 0xd8, 0x54, 0x6b, 0xd9, 0x6f, 0x89, 0x90, 0x05, 0xdf, 0xc2, 0xe1, 0x53, 0x13,
	0x76, 0x41, 0x05, 0x93, 0xfe, 0x18, 0x4f, 0xb0, 0xa7, 0xae, 0xf3, 0x8d, 0x90, 0xda, 0xb4, 0x11,
	0xa2, 0xe9, 0x0a, 0x26, 0x67, 0xec, 0x09, 0xbe, 0x01, 0xeb, 0x03, 0xff, 0xa6, 0x1f, 0xf7, 0xad,
	0xf3, 0x9a, 0x27, 0x21, 0x45, 0x6d, 0x51, 0x93, 0x46, 0xf3, 0x7b, 0x83, 0x81, 0x7f, 0xf3, 0x4a,
	0xb4, 0xd7, 0xb6, 0xc0, 0x46, 0x5a, 0x44, 0x2e, 0xd1, 0x7e, 0x57, 0xc0, 0x96, 0x0c, 0xfd, 0x40,
	0x58, 0x29, 0x93, 0xd6, 0x73, 0xc0, 0x27, 0x9f, 0x35, 0x2c, 0x64, 0x95, 0x22, 0x81, 0x05, 0x4a,
	0x61, 0xe8, 0xa9, 0x39, 0xa3, 0xcd, 0xe2, 0x07, 0x6a, 0xb3, 0xb4, 0x9c, 0x36, 0x1f, 0x2c, 0xa3,
	0xcd, 0xb5, 0x0f, 0xd3, 0x66, 0x79, 0x45, 0xda, 0x54, 0x3e, 0x52, 0x9b, 0xe7, 0x59, 0x6d, 0x0a,
	0x89, 0x7d, 0x1a, 0x52, 0xd4, 0xc9, 0xd3, 0x66, 0x2e, 0xdb, 0x42, 0xbd, 0x56, 0x97, 0xd6, 0x2b,
	0x58, 0x5a, 0xaf, 0xb5, 0x15, 0xe9, 0x75, 0x7d, 0x05, 0x7a, 0xad, 0x7f, 0x84, 0x5e, 0x37, 0x96,
	0xd3, 0xeb, 0x0e, 0xd8, 0xce, 0x88, 0xd3, 0x25, 0xda, 0xaf, 0xc5, 0x38, 0xfa, 0xca, 0xf2, 0xce,
	0xb0, 0xeb, 0x31, 0xcd, 0x3e, 0x49, 0x14, 0x24, 0x34, 0x0b, 0x43, 0x8a, 0x36, 0x66, 0x15, 0x14,
	0xab, 0xe5, 0x51, 0xa4, 0x16, 0x21, 0xce, 0xad, 0x90, 0xa2, 0xf5, 0xb4, 0x5a, 0x22, 0x65, 0xa4,
	0x3f, 0xbf, 0x74, 0x8f, 0xcf, 0xef, 0x82, 0x0a, 0x31, 0x46, 0x56, 0xdf, 0xf6, 0x27, 0xf2, 0x9c,
	0x4b, 0xeb, 0x5e, 0x22, 0x9a, 0xae, 0xb0, 0xc7, 0x6f, 0xfc, 0x09, 0x7c, 0x09, 0xaa, 0x3c, 0xea,
	0xe2, 0x5f, 0x2c, 0x29, 0xbe, 0x4e, 0x48, 0x51, 0x2b, 0x55, 0xc0, 0xa0, 0xfc, 0x89, 0xe2, 0xad,
	0x2e, 0x18, 0xfc, 0x97, 0x02, 0x60, 0x76, 0x46, 0x5c, 0x02, 0xdf, 0x4a, 0x76, 0x6c, 0x5f, 0x3a,
	0x7c, 0x52, 0x6a, 0xc7, 0xdd, 0xee, 0xdc, 0x4d, 0xa4, 0x3b, 0x5f, 0xd9, 0x3d, 0x37, 0x46, 0xd6,
	0xa9, 0x7d, 0xe9, 0xf4, 0xea, 0x01, 0x45, 0x09, 0x89, 0x68, 0xc9, 0x00, 0xf8, 0x53, 0xb4, 0x4d,
	0x39, 0x79, 0xb1, 0x59, 0xea, 0xd4, 0x8e, 0x8f, 0xee, 0x47, 0x2e, 0x16, 0x97, 0xb1, 0x6f, 0x04,
	0x14, 0xa5, 0x68, 0xe4, 0xe6, 0x65, 0x50, 0xc3, 0x02, 0x95, 0x68, 0x10, 0xf0, 0x33, 0x50, 0xf3,
	0x1c, 0xcf, 0x18, 0xf7, 0x87, 0x8e, 0x6f, 0x7b, 0x72, 0x79, 0x37, 0x03, 0x8a, 0xd2, 0x61, 0x1d,
	0xf0, 0x97, 0x17, 0xec, 0x19, 0xb6, 0x53, 0xeb, 0x20, 0xee, 0x3a, 0xeb, 0x01, 0x45, 0x71, 0x2c,
	0x5e, 0x80, 0xc6, 0x6f, 0x6b, 0xa0, 0x1a, 0x8f, 0x07, 0xb6, 0xb2, 0x7b, 0xa8, 0x16, 0x50, 0x14,
	0x85, 0xe2, 0xcd, 0xd3, 0x4a, 0x4e, 0x87, 0x62, 0x92, 0x25, 0x43, 0xf1, 0x11, 0x80, 0x66, 0x2f,
	0x4b, 0xd5, 0x80, 0x22, 0x11, 0x88, 0xf6, 0x56, 0x27, 0x75, 0x46, 0x08, 0xd3, 0x16, 0x63, 0x94,
	0xb1, 0xd4, 0xe1, 0xf0, 0x25, 0xd8, 0x24, 0xc6, 0x4d, 0x9f, 0x77, 0x98, 0x31, 0xea, 0x9d, 0x80,
	0xa2, 0x2c, 0xa4, 0x47, 0x57, 0xcf, 0x0b, 0xe1, 0xd8, 0x87, 0x39, 0x8e, 0xcd, 0xe7, 0x3d, 0x89,
	0xa6, 0x6d, 0xb9, 0x3d, 0x67, 0xcb, 0x7c, 0x54, 0x51, 0x2c, 0xf1, 0xde, 0x2f, 0xf2, 0xbd, 0x77,
	0x3b, 0xa0, 0x68, 0x16, 0x98, 0x35, 0xd8, 0xf6, 0x9c, 0xc1, 0x72, 0xfe, 0x28, 0x96, 0xb8, 0xe8,
	0x5e, 0xc6, 0x45, 0x41, 0x40, 0x91, 0x8c, 0x44, 0x56, 0x79, 0x98, 0x63, 0x95, 0xa9, 0x2d, 0xc5,
	0xa2, 0x69, 0x3f, 0x6c, 0xcf, 0xf9, 0x21, 0x6f, 0x1d, 0xc5, 0x12, 0xd3, 0x6b, 0xcf, 0x99, 0x1e,
	0x4f, 0x8c, 0x62, 0x89, 0xdc, 0xb5, 0xf8, 0xe0, 0x14, 0x3e, 0xc7, 0xc7, 0x28, 0x97, 0x21, 0x3a,
	0x31, 0x8f, 0x33, 0x8e, 0xb8, 0xc9, 0x33, 0xb7, 0x02, 0x8a, 0x66, 0xe2, 0x33, 0xb6, 0xa7, 0x83,
	0x4d, 0xa9, 0x9b, 0x17, 0x63, 0xc7, 0x5d, 0xc9, 0x95, 0x44, 0x83, 0xf1, 0x3d, 0x47, 0x72, 0xba,
	0x44, 0xfb, 0x2e, 0xbe, 0x0e, 0x7d, 0x4b, 0x2c, 0x7b, 0x25, 0x6d, 0xb6, 0xe3, 0xa1, 0x0b, 0x4a,
	0x97, 0x1c, 0xff, 0x51, 0x02, 0x8a, 0x8c, 0xc1, 0xaf, 0x41, 0xc9, 0x30, 0x4d, 0xd8, 0x5c, 0xec,
	0x14, 0xe2, 0xdf, 0x4d, 0x63, 0xef, 0x8e, 0x0c, 0x97, 0xc0, 0x0b, 0x50, 0xf6, 0xf9, 0xa9, 0x00,
	0xf7, 0x17, 0x27, 0xc7, 0x97, 0xba, 0x46, 0xeb, 0xee, 0x24, 0x97, 0xc0, 0x1f, 0x81, 0x32, 0x12,
	0x5e, 0x05, 0x5b, 0xf7, 0xb0, 0xb3, 0xab, 0xc6, 0xc1, 0xbd, 0x4c, 0x0f, 0x9e, 0x83, 0xb5, 0x21,
	0x9b, 0x77, 0xa8, 0x2d, 0xce, 0x8f, 0x16, 0xbb, 0xb1, 0x7f, 0x67, 0x8e, 0x4b, 0xe0, 0x1b, 0xf0,
	0xc0, 0x21, 0x96, 0x0d, 0xff, 0x67, 0xa6, 0xe4, 0xaa, 0x36, 0xb4, 0xbb, 0x52, 0x5c, 0xd2, 0x7b,
	0xf8, 0xfe, 0xdf, 0xdd, 0x4f, 0xde, 0xdf, 0xee, 0x16, 0xfe, 0xbe, 0xdd, 0x2d, 0xfc, 0x73, 0xbb,
	0x5b, 0x78, 0x5b, 0xbc, 0x7e, 0x3a, 0x28, 0xf3, 0x7f, 0x9f, 0x9f, 0xff, 0x17, 0x00, 0x00, 0xff,
	0xff, 0x54, 0x2d, 0x85, 0xb2, 0xd0, 0x0e, 0x00, 0x00,
}
