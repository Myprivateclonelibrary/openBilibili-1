// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: payGoods.proto

package v1

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type PayGoodsAddReq struct {
	// 平台
	Platform string `protobuf:"bytes,1,opt,name=platform,proto3" json:"platform,omitempty" form:"platform"`
	// 商品名称
	Title string `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty" form:"title" validate:"required"`
	// 商品类型 2 付费直播门票
	Type int64 `protobuf:"varint,3,opt,name=type,proto3" json:"type,omitempty" form:"type" validate:"required"`
	// 商品价格(分)
	Price int64 `protobuf:"varint,4,opt,name=price,proto3" json:"price,omitempty" form:"price" validate:"required"`
	// 开始时间
	StartTime string `protobuf:"bytes,5,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty" form:"start_time" validate:"required"`
	// 结束时间
	EndTime string `protobuf:"bytes,6,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty" form:"end_time" validate:"required"`
	// ip限制，0不限制，1仅限大陆，2仅限港澳台，3大陆+港澳台
	IpLimit              int64    `protobuf:"varint,7,opt,name=ip_limit,json=ipLimit,proto3" json:"ip_limit,omitempty" form:"ip_limit"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PayGoodsAddReq) Reset()         { *m = PayGoodsAddReq{} }
func (m *PayGoodsAddReq) String() string { return proto.CompactTextString(m) }
func (*PayGoodsAddReq) ProtoMessage()    {}
func (*PayGoodsAddReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_payGoods_e218bc978cecad93, []int{0}
}
func (m *PayGoodsAddReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PayGoodsAddReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PayGoodsAddReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *PayGoodsAddReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PayGoodsAddReq.Merge(dst, src)
}
func (m *PayGoodsAddReq) XXX_Size() int {
	return m.Size()
}
func (m *PayGoodsAddReq) XXX_DiscardUnknown() {
	xxx_messageInfo_PayGoodsAddReq.DiscardUnknown(m)
}

var xxx_messageInfo_PayGoodsAddReq proto.InternalMessageInfo

type PayGoodsAddResp struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PayGoodsAddResp) Reset()         { *m = PayGoodsAddResp{} }
func (m *PayGoodsAddResp) String() string { return proto.CompactTextString(m) }
func (*PayGoodsAddResp) ProtoMessage()    {}
func (*PayGoodsAddResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_payGoods_e218bc978cecad93, []int{1}
}
func (m *PayGoodsAddResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PayGoodsAddResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PayGoodsAddResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *PayGoodsAddResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PayGoodsAddResp.Merge(dst, src)
}
func (m *PayGoodsAddResp) XXX_Size() int {
	return m.Size()
}
func (m *PayGoodsAddResp) XXX_DiscardUnknown() {
	xxx_messageInfo_PayGoodsAddResp.DiscardUnknown(m)
}

var xxx_messageInfo_PayGoodsAddResp proto.InternalMessageInfo

type PayGoodsUpdateReq struct {
	// 购票id
	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty" form:"id"`
	// 平台
	Platform string `protobuf:"bytes,2,opt,name=platform,proto3" json:"platform,omitempty" form:"platform"`
	// 商品名称
	Title string `protobuf:"bytes,3,opt,name=title,proto3" json:"title,omitempty" form:"title"`
	// 商品类型 2 付费直播门票
	Type int64 `protobuf:"varint,4,opt,name=type,proto3" json:"type,omitempty" form:"type"`
	// 商品价格(分)
	Price int64 `protobuf:"varint,5,opt,name=price,proto3" json:"price,omitempty" form:"price"`
	// 开始时间
	StartTime string `protobuf:"bytes,6,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty" form:"start_time"`
	// 结束时间
	EndTime string `protobuf:"bytes,7,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty" form:"end_time"`
	// ip限制，0不限制，1仅限大陆，2仅限港澳台，3大陆+港澳台
	IpLimit              int64    `protobuf:"varint,8,opt,name=ip_limit,json=ipLimit,proto3" json:"ip_limit,omitempty" form:"ip_limit"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PayGoodsUpdateReq) Reset()         { *m = PayGoodsUpdateReq{} }
func (m *PayGoodsUpdateReq) String() string { return proto.CompactTextString(m) }
func (*PayGoodsUpdateReq) ProtoMessage()    {}
func (*PayGoodsUpdateReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_payGoods_e218bc978cecad93, []int{2}
}
func (m *PayGoodsUpdateReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PayGoodsUpdateReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PayGoodsUpdateReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *PayGoodsUpdateReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PayGoodsUpdateReq.Merge(dst, src)
}
func (m *PayGoodsUpdateReq) XXX_Size() int {
	return m.Size()
}
func (m *PayGoodsUpdateReq) XXX_DiscardUnknown() {
	xxx_messageInfo_PayGoodsUpdateReq.DiscardUnknown(m)
}

var xxx_messageInfo_PayGoodsUpdateReq proto.InternalMessageInfo

type PayGoodsUpdateResp struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PayGoodsUpdateResp) Reset()         { *m = PayGoodsUpdateResp{} }
func (m *PayGoodsUpdateResp) String() string { return proto.CompactTextString(m) }
func (*PayGoodsUpdateResp) ProtoMessage()    {}
func (*PayGoodsUpdateResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_payGoods_e218bc978cecad93, []int{3}
}
func (m *PayGoodsUpdateResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PayGoodsUpdateResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PayGoodsUpdateResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *PayGoodsUpdateResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PayGoodsUpdateResp.Merge(dst, src)
}
func (m *PayGoodsUpdateResp) XXX_Size() int {
	return m.Size()
}
func (m *PayGoodsUpdateResp) XXX_DiscardUnknown() {
	xxx_messageInfo_PayGoodsUpdateResp.DiscardUnknown(m)
}

var xxx_messageInfo_PayGoodsUpdateResp proto.InternalMessageInfo

type PayGoodsGetListReq struct {
	// 购票id
	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty" form:"id"`
	// 平台
	Platform string `protobuf:"bytes,2,opt,name=platform,proto3" json:"platform,omitempty" form:"platform"`
	// 商品名称
	Title string `protobuf:"bytes,3,opt,name=title,proto3" json:"title,omitempty" form:"title"`
	// 商品类型 2 付费直播门票
	Type int64 `protobuf:"varint,4,opt,name=type,proto3" json:"type,omitempty" form:"type"`
	// ip限制，0不限制，1仅限大陆，2仅限港澳台，3大陆+港澳台
	IpLimit int64 `protobuf:"varint,5,opt,name=ip_limit,json=ipLimit,proto3" json:"ip_limit,omitempty" form:"ip_limit"`
	// 页号，0开始
	PageNum int64 `protobuf:"varint,6,opt,name=page_num,json=pageNum,proto3" json:"page_num,omitempty" form:"page_num"`
	// 每页个数
	PageSize             int64    `protobuf:"varint,7,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty" form:"page_size"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PayGoodsGetListReq) Reset()         { *m = PayGoodsGetListReq{} }
func (m *PayGoodsGetListReq) String() string { return proto.CompactTextString(m) }
func (*PayGoodsGetListReq) ProtoMessage()    {}
func (*PayGoodsGetListReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_payGoods_e218bc978cecad93, []int{4}
}
func (m *PayGoodsGetListReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PayGoodsGetListReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PayGoodsGetListReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *PayGoodsGetListReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PayGoodsGetListReq.Merge(dst, src)
}
func (m *PayGoodsGetListReq) XXX_Size() int {
	return m.Size()
}
func (m *PayGoodsGetListReq) XXX_DiscardUnknown() {
	xxx_messageInfo_PayGoodsGetListReq.DiscardUnknown(m)
}

var xxx_messageInfo_PayGoodsGetListReq proto.InternalMessageInfo

type PayGoodsGetListResp struct {
	//
	PageInfo *PayGoodsGetListResp_PageInfo `protobuf:"bytes,1,opt,name=page_info,json=pageInfo" json:"page_info"`
	//
	GoodsInfo            []*PayGoodsGetListResp_GoodsInfo `protobuf:"bytes,2,rep,name=goods_info,json=goodsInfo" json:"goods_info"`
	XXX_NoUnkeyedLiteral struct{}                         `json:"-"`
	XXX_unrecognized     []byte                           `json:"-"`
	XXX_sizecache        int32                            `json:"-"`
}

func (m *PayGoodsGetListResp) Reset()         { *m = PayGoodsGetListResp{} }
func (m *PayGoodsGetListResp) String() string { return proto.CompactTextString(m) }
func (*PayGoodsGetListResp) ProtoMessage()    {}
func (*PayGoodsGetListResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_payGoods_e218bc978cecad93, []int{5}
}
func (m *PayGoodsGetListResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PayGoodsGetListResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PayGoodsGetListResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *PayGoodsGetListResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PayGoodsGetListResp.Merge(dst, src)
}
func (m *PayGoodsGetListResp) XXX_Size() int {
	return m.Size()
}
func (m *PayGoodsGetListResp) XXX_DiscardUnknown() {
	xxx_messageInfo_PayGoodsGetListResp.DiscardUnknown(m)
}

var xxx_messageInfo_PayGoodsGetListResp proto.InternalMessageInfo

type PayGoodsGetListResp_PageInfo struct {
	// 记录总数
	TotalCount int64 `protobuf:"varint,1,opt,name=total_count,json=totalCount,proto3" json:"total_count"`
	// 当前页号
	PageNum              int64    `protobuf:"varint,2,opt,name=page_num,json=pageNum,proto3" json:"page_num"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PayGoodsGetListResp_PageInfo) Reset()         { *m = PayGoodsGetListResp_PageInfo{} }
func (m *PayGoodsGetListResp_PageInfo) String() string { return proto.CompactTextString(m) }
func (*PayGoodsGetListResp_PageInfo) ProtoMessage()    {}
func (*PayGoodsGetListResp_PageInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_payGoods_e218bc978cecad93, []int{5, 0}
}
func (m *PayGoodsGetListResp_PageInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PayGoodsGetListResp_PageInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PayGoodsGetListResp_PageInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *PayGoodsGetListResp_PageInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PayGoodsGetListResp_PageInfo.Merge(dst, src)
}
func (m *PayGoodsGetListResp_PageInfo) XXX_Size() int {
	return m.Size()
}
func (m *PayGoodsGetListResp_PageInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_PayGoodsGetListResp_PageInfo.DiscardUnknown(m)
}

var xxx_messageInfo_PayGoodsGetListResp_PageInfo proto.InternalMessageInfo

type PayGoodsGetListResp_GoodsInfo struct {
	// 购票id
	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id"`
	// 标题
	Title string `protobuf:"bytes,2,opt,name=title,proto3" json:"title"`
	// 平台
	Platform string `protobuf:"bytes,3,opt,name=platform,proto3" json:"platform"`
	// 类型，2为付费直播
	Type int64 `protobuf:"varint,4,opt,name=type,proto3" json:"type"`
	// 价格，分
	Price int64 `protobuf:"varint,5,opt,name=price,proto3" json:"price"`
	// 开始购票时间
	StartTime string `protobuf:"bytes,6,opt,name=start_time,json=startTime,proto3" json:"start_time"`
	// 结束购票时间
	EndTime string `protobuf:"bytes,7,opt,name=end_time,json=endTime,proto3" json:"end_time"`
	// ip限制
	IpLimit int64 `protobuf:"varint,8,opt,name=ip_limit,json=ipLimit,proto3" json:"ip_limit"`
	// 购票状态，0关闭，1购票中，2未开始
	Status               int64    `protobuf:"varint,9,opt,name=status,proto3" json:"status"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PayGoodsGetListResp_GoodsInfo) Reset()         { *m = PayGoodsGetListResp_GoodsInfo{} }
func (m *PayGoodsGetListResp_GoodsInfo) String() string { return proto.CompactTextString(m) }
func (*PayGoodsGetListResp_GoodsInfo) ProtoMessage()    {}
func (*PayGoodsGetListResp_GoodsInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_payGoods_e218bc978cecad93, []int{5, 1}
}
func (m *PayGoodsGetListResp_GoodsInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PayGoodsGetListResp_GoodsInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PayGoodsGetListResp_GoodsInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *PayGoodsGetListResp_GoodsInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PayGoodsGetListResp_GoodsInfo.Merge(dst, src)
}
func (m *PayGoodsGetListResp_GoodsInfo) XXX_Size() int {
	return m.Size()
}
func (m *PayGoodsGetListResp_GoodsInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_PayGoodsGetListResp_GoodsInfo.DiscardUnknown(m)
}

var xxx_messageInfo_PayGoodsGetListResp_GoodsInfo proto.InternalMessageInfo

type PayGoodsCloseReq struct {
	// 购票id
	Id                   int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty" form:"id" validate:"required"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PayGoodsCloseReq) Reset()         { *m = PayGoodsCloseReq{} }
func (m *PayGoodsCloseReq) String() string { return proto.CompactTextString(m) }
func (*PayGoodsCloseReq) ProtoMessage()    {}
func (*PayGoodsCloseReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_payGoods_e218bc978cecad93, []int{6}
}
func (m *PayGoodsCloseReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PayGoodsCloseReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PayGoodsCloseReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *PayGoodsCloseReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PayGoodsCloseReq.Merge(dst, src)
}
func (m *PayGoodsCloseReq) XXX_Size() int {
	return m.Size()
}
func (m *PayGoodsCloseReq) XXX_DiscardUnknown() {
	xxx_messageInfo_PayGoodsCloseReq.DiscardUnknown(m)
}

var xxx_messageInfo_PayGoodsCloseReq proto.InternalMessageInfo

type PayGoodsCloseResp struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PayGoodsCloseResp) Reset()         { *m = PayGoodsCloseResp{} }
func (m *PayGoodsCloseResp) String() string { return proto.CompactTextString(m) }
func (*PayGoodsCloseResp) ProtoMessage()    {}
func (*PayGoodsCloseResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_payGoods_e218bc978cecad93, []int{7}
}
func (m *PayGoodsCloseResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PayGoodsCloseResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PayGoodsCloseResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *PayGoodsCloseResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PayGoodsCloseResp.Merge(dst, src)
}
func (m *PayGoodsCloseResp) XXX_Size() int {
	return m.Size()
}
func (m *PayGoodsCloseResp) XXX_DiscardUnknown() {
	xxx_messageInfo_PayGoodsCloseResp.DiscardUnknown(m)
}

var xxx_messageInfo_PayGoodsCloseResp proto.InternalMessageInfo

type PayGoodsOpenReq struct {
	// 购票id
	Id                   int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty" form:"id" validate:"required"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PayGoodsOpenReq) Reset()         { *m = PayGoodsOpenReq{} }
func (m *PayGoodsOpenReq) String() string { return proto.CompactTextString(m) }
func (*PayGoodsOpenReq) ProtoMessage()    {}
func (*PayGoodsOpenReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_payGoods_e218bc978cecad93, []int{8}
}
func (m *PayGoodsOpenReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PayGoodsOpenReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PayGoodsOpenReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *PayGoodsOpenReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PayGoodsOpenReq.Merge(dst, src)
}
func (m *PayGoodsOpenReq) XXX_Size() int {
	return m.Size()
}
func (m *PayGoodsOpenReq) XXX_DiscardUnknown() {
	xxx_messageInfo_PayGoodsOpenReq.DiscardUnknown(m)
}

var xxx_messageInfo_PayGoodsOpenReq proto.InternalMessageInfo

type PayGoodsOpenResp struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PayGoodsOpenResp) Reset()         { *m = PayGoodsOpenResp{} }
func (m *PayGoodsOpenResp) String() string { return proto.CompactTextString(m) }
func (*PayGoodsOpenResp) ProtoMessage()    {}
func (*PayGoodsOpenResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_payGoods_e218bc978cecad93, []int{9}
}
func (m *PayGoodsOpenResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PayGoodsOpenResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PayGoodsOpenResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *PayGoodsOpenResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PayGoodsOpenResp.Merge(dst, src)
}
func (m *PayGoodsOpenResp) XXX_Size() int {
	return m.Size()
}
func (m *PayGoodsOpenResp) XXX_DiscardUnknown() {
	xxx_messageInfo_PayGoodsOpenResp.DiscardUnknown(m)
}

var xxx_messageInfo_PayGoodsOpenResp proto.InternalMessageInfo

func init() {
	proto.RegisterType((*PayGoodsAddReq)(nil), "live.liveadmin.v1.PayGoodsAddReq")
	proto.RegisterType((*PayGoodsAddResp)(nil), "live.liveadmin.v1.PayGoodsAddResp")
	proto.RegisterType((*PayGoodsUpdateReq)(nil), "live.liveadmin.v1.PayGoodsUpdateReq")
	proto.RegisterType((*PayGoodsUpdateResp)(nil), "live.liveadmin.v1.PayGoodsUpdateResp")
	proto.RegisterType((*PayGoodsGetListReq)(nil), "live.liveadmin.v1.PayGoodsGetListReq")
	proto.RegisterType((*PayGoodsGetListResp)(nil), "live.liveadmin.v1.PayGoodsGetListResp")
	proto.RegisterType((*PayGoodsGetListResp_PageInfo)(nil), "live.liveadmin.v1.PayGoodsGetListResp.PageInfo")
	proto.RegisterType((*PayGoodsGetListResp_GoodsInfo)(nil), "live.liveadmin.v1.PayGoodsGetListResp.GoodsInfo")
	proto.RegisterType((*PayGoodsCloseReq)(nil), "live.liveadmin.v1.PayGoodsCloseReq")
	proto.RegisterType((*PayGoodsCloseResp)(nil), "live.liveadmin.v1.PayGoodsCloseResp")
	proto.RegisterType((*PayGoodsOpenReq)(nil), "live.liveadmin.v1.PayGoodsOpenReq")
	proto.RegisterType((*PayGoodsOpenResp)(nil), "live.liveadmin.v1.PayGoodsOpenResp")
}
func (m *PayGoodsAddReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PayGoodsAddReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Platform) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPayGoods(dAtA, i, uint64(len(m.Platform)))
		i += copy(dAtA[i:], m.Platform)
	}
	if len(m.Title) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintPayGoods(dAtA, i, uint64(len(m.Title)))
		i += copy(dAtA[i:], m.Title)
	}
	if m.Type != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintPayGoods(dAtA, i, uint64(m.Type))
	}
	if m.Price != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintPayGoods(dAtA, i, uint64(m.Price))
	}
	if len(m.StartTime) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintPayGoods(dAtA, i, uint64(len(m.StartTime)))
		i += copy(dAtA[i:], m.StartTime)
	}
	if len(m.EndTime) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintPayGoods(dAtA, i, uint64(len(m.EndTime)))
		i += copy(dAtA[i:], m.EndTime)
	}
	if m.IpLimit != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintPayGoods(dAtA, i, uint64(m.IpLimit))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *PayGoodsAddResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PayGoodsAddResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *PayGoodsUpdateReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PayGoodsUpdateReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPayGoods(dAtA, i, uint64(m.Id))
	}
	if len(m.Platform) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintPayGoods(dAtA, i, uint64(len(m.Platform)))
		i += copy(dAtA[i:], m.Platform)
	}
	if len(m.Title) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintPayGoods(dAtA, i, uint64(len(m.Title)))
		i += copy(dAtA[i:], m.Title)
	}
	if m.Type != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintPayGoods(dAtA, i, uint64(m.Type))
	}
	if m.Price != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintPayGoods(dAtA, i, uint64(m.Price))
	}
	if len(m.StartTime) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintPayGoods(dAtA, i, uint64(len(m.StartTime)))
		i += copy(dAtA[i:], m.StartTime)
	}
	if len(m.EndTime) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintPayGoods(dAtA, i, uint64(len(m.EndTime)))
		i += copy(dAtA[i:], m.EndTime)
	}
	if m.IpLimit != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintPayGoods(dAtA, i, uint64(m.IpLimit))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *PayGoodsUpdateResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PayGoodsUpdateResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *PayGoodsGetListReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PayGoodsGetListReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPayGoods(dAtA, i, uint64(m.Id))
	}
	if len(m.Platform) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintPayGoods(dAtA, i, uint64(len(m.Platform)))
		i += copy(dAtA[i:], m.Platform)
	}
	if len(m.Title) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintPayGoods(dAtA, i, uint64(len(m.Title)))
		i += copy(dAtA[i:], m.Title)
	}
	if m.Type != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintPayGoods(dAtA, i, uint64(m.Type))
	}
	if m.IpLimit != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintPayGoods(dAtA, i, uint64(m.IpLimit))
	}
	if m.PageNum != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintPayGoods(dAtA, i, uint64(m.PageNum))
	}
	if m.PageSize != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintPayGoods(dAtA, i, uint64(m.PageSize))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *PayGoodsGetListResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PayGoodsGetListResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.PageInfo != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPayGoods(dAtA, i, uint64(m.PageInfo.Size()))
		n1, err := m.PageInfo.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if len(m.GoodsInfo) > 0 {
		for _, msg := range m.GoodsInfo {
			dAtA[i] = 0x12
			i++
			i = encodeVarintPayGoods(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *PayGoodsGetListResp_PageInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PayGoodsGetListResp_PageInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.TotalCount != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPayGoods(dAtA, i, uint64(m.TotalCount))
	}
	if m.PageNum != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPayGoods(dAtA, i, uint64(m.PageNum))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *PayGoodsGetListResp_GoodsInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PayGoodsGetListResp_GoodsInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPayGoods(dAtA, i, uint64(m.Id))
	}
	if len(m.Title) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintPayGoods(dAtA, i, uint64(len(m.Title)))
		i += copy(dAtA[i:], m.Title)
	}
	if len(m.Platform) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintPayGoods(dAtA, i, uint64(len(m.Platform)))
		i += copy(dAtA[i:], m.Platform)
	}
	if m.Type != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintPayGoods(dAtA, i, uint64(m.Type))
	}
	if m.Price != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintPayGoods(dAtA, i, uint64(m.Price))
	}
	if len(m.StartTime) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintPayGoods(dAtA, i, uint64(len(m.StartTime)))
		i += copy(dAtA[i:], m.StartTime)
	}
	if len(m.EndTime) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintPayGoods(dAtA, i, uint64(len(m.EndTime)))
		i += copy(dAtA[i:], m.EndTime)
	}
	if m.IpLimit != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintPayGoods(dAtA, i, uint64(m.IpLimit))
	}
	if m.Status != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintPayGoods(dAtA, i, uint64(m.Status))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *PayGoodsCloseReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PayGoodsCloseReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPayGoods(dAtA, i, uint64(m.Id))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *PayGoodsCloseResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PayGoodsCloseResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *PayGoodsOpenReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PayGoodsOpenReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPayGoods(dAtA, i, uint64(m.Id))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *PayGoodsOpenResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PayGoodsOpenResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintPayGoods(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *PayGoodsAddReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Platform)
	if l > 0 {
		n += 1 + l + sovPayGoods(uint64(l))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovPayGoods(uint64(l))
	}
	if m.Type != 0 {
		n += 1 + sovPayGoods(uint64(m.Type))
	}
	if m.Price != 0 {
		n += 1 + sovPayGoods(uint64(m.Price))
	}
	l = len(m.StartTime)
	if l > 0 {
		n += 1 + l + sovPayGoods(uint64(l))
	}
	l = len(m.EndTime)
	if l > 0 {
		n += 1 + l + sovPayGoods(uint64(l))
	}
	if m.IpLimit != 0 {
		n += 1 + sovPayGoods(uint64(m.IpLimit))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PayGoodsAddResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PayGoodsUpdateReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovPayGoods(uint64(m.Id))
	}
	l = len(m.Platform)
	if l > 0 {
		n += 1 + l + sovPayGoods(uint64(l))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovPayGoods(uint64(l))
	}
	if m.Type != 0 {
		n += 1 + sovPayGoods(uint64(m.Type))
	}
	if m.Price != 0 {
		n += 1 + sovPayGoods(uint64(m.Price))
	}
	l = len(m.StartTime)
	if l > 0 {
		n += 1 + l + sovPayGoods(uint64(l))
	}
	l = len(m.EndTime)
	if l > 0 {
		n += 1 + l + sovPayGoods(uint64(l))
	}
	if m.IpLimit != 0 {
		n += 1 + sovPayGoods(uint64(m.IpLimit))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PayGoodsUpdateResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PayGoodsGetListReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovPayGoods(uint64(m.Id))
	}
	l = len(m.Platform)
	if l > 0 {
		n += 1 + l + sovPayGoods(uint64(l))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovPayGoods(uint64(l))
	}
	if m.Type != 0 {
		n += 1 + sovPayGoods(uint64(m.Type))
	}
	if m.IpLimit != 0 {
		n += 1 + sovPayGoods(uint64(m.IpLimit))
	}
	if m.PageNum != 0 {
		n += 1 + sovPayGoods(uint64(m.PageNum))
	}
	if m.PageSize != 0 {
		n += 1 + sovPayGoods(uint64(m.PageSize))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PayGoodsGetListResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PageInfo != nil {
		l = m.PageInfo.Size()
		n += 1 + l + sovPayGoods(uint64(l))
	}
	if len(m.GoodsInfo) > 0 {
		for _, e := range m.GoodsInfo {
			l = e.Size()
			n += 1 + l + sovPayGoods(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PayGoodsGetListResp_PageInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TotalCount != 0 {
		n += 1 + sovPayGoods(uint64(m.TotalCount))
	}
	if m.PageNum != 0 {
		n += 1 + sovPayGoods(uint64(m.PageNum))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PayGoodsGetListResp_GoodsInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovPayGoods(uint64(m.Id))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovPayGoods(uint64(l))
	}
	l = len(m.Platform)
	if l > 0 {
		n += 1 + l + sovPayGoods(uint64(l))
	}
	if m.Type != 0 {
		n += 1 + sovPayGoods(uint64(m.Type))
	}
	if m.Price != 0 {
		n += 1 + sovPayGoods(uint64(m.Price))
	}
	l = len(m.StartTime)
	if l > 0 {
		n += 1 + l + sovPayGoods(uint64(l))
	}
	l = len(m.EndTime)
	if l > 0 {
		n += 1 + l + sovPayGoods(uint64(l))
	}
	if m.IpLimit != 0 {
		n += 1 + sovPayGoods(uint64(m.IpLimit))
	}
	if m.Status != 0 {
		n += 1 + sovPayGoods(uint64(m.Status))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PayGoodsCloseReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovPayGoods(uint64(m.Id))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PayGoodsCloseResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PayGoodsOpenReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovPayGoods(uint64(m.Id))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PayGoodsOpenResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovPayGoods(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozPayGoods(x uint64) (n int) {
	return sovPayGoods(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *PayGoodsAddReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPayGoods
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PayGoodsAddReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PayGoodsAddReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Platform", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPayGoods
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPayGoods
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Platform = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPayGoods
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPayGoods
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPayGoods
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Price", wireType)
			}
			m.Price = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPayGoods
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Price |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPayGoods
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPayGoods
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StartTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPayGoods
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPayGoods
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EndTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IpLimit", wireType)
			}
			m.IpLimit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPayGoods
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IpLimit |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPayGoods(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPayGoods
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PayGoodsAddResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPayGoods
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PayGoodsAddResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PayGoodsAddResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipPayGoods(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPayGoods
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PayGoodsUpdateReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPayGoods
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PayGoodsUpdateReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PayGoodsUpdateReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPayGoods
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Platform", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPayGoods
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPayGoods
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Platform = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPayGoods
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPayGoods
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPayGoods
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Price", wireType)
			}
			m.Price = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPayGoods
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Price |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPayGoods
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPayGoods
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StartTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPayGoods
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPayGoods
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EndTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IpLimit", wireType)
			}
			m.IpLimit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPayGoods
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IpLimit |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPayGoods(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPayGoods
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PayGoodsUpdateResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPayGoods
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PayGoodsUpdateResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PayGoodsUpdateResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipPayGoods(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPayGoods
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PayGoodsGetListReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPayGoods
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PayGoodsGetListReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PayGoodsGetListReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPayGoods
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Platform", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPayGoods
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPayGoods
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Platform = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPayGoods
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPayGoods
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPayGoods
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IpLimit", wireType)
			}
			m.IpLimit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPayGoods
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IpLimit |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageNum", wireType)
			}
			m.PageNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPayGoods
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PageNum |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageSize", wireType)
			}
			m.PageSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPayGoods
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PageSize |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPayGoods(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPayGoods
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PayGoodsGetListResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPayGoods
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PayGoodsGetListResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PayGoodsGetListResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPayGoods
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPayGoods
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PageInfo == nil {
				m.PageInfo = &PayGoodsGetListResp_PageInfo{}
			}
			if err := m.PageInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GoodsInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPayGoods
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPayGoods
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GoodsInfo = append(m.GoodsInfo, &PayGoodsGetListResp_GoodsInfo{})
			if err := m.GoodsInfo[len(m.GoodsInfo)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPayGoods(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPayGoods
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PayGoodsGetListResp_PageInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPayGoods
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PageInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PageInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalCount", wireType)
			}
			m.TotalCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPayGoods
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalCount |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageNum", wireType)
			}
			m.PageNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPayGoods
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PageNum |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPayGoods(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPayGoods
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PayGoodsGetListResp_GoodsInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPayGoods
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GoodsInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GoodsInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPayGoods
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPayGoods
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPayGoods
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Platform", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPayGoods
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPayGoods
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Platform = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPayGoods
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Price", wireType)
			}
			m.Price = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPayGoods
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Price |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPayGoods
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPayGoods
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StartTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPayGoods
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPayGoods
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EndTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IpLimit", wireType)
			}
			m.IpLimit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPayGoods
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IpLimit |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPayGoods
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPayGoods(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPayGoods
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PayGoodsCloseReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPayGoods
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PayGoodsCloseReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PayGoodsCloseReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPayGoods
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPayGoods(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPayGoods
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PayGoodsCloseResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPayGoods
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PayGoodsCloseResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PayGoodsCloseResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipPayGoods(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPayGoods
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PayGoodsOpenReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPayGoods
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PayGoodsOpenReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PayGoodsOpenReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPayGoods
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPayGoods(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPayGoods
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PayGoodsOpenResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPayGoods
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PayGoodsOpenResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PayGoodsOpenResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipPayGoods(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPayGoods
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPayGoods(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPayGoods
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPayGoods
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPayGoods
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthPayGoods
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowPayGoods
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipPayGoods(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthPayGoods = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPayGoods   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("payGoods.proto", fileDescriptor_payGoods_e218bc978cecad93) }

var fileDescriptor_payGoods_e218bc978cecad93 = []byte{
	// 909 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x56, 0x4d, 0x6f, 0x23, 0x35,
	0x18, 0x26, 0x93, 0xe6, 0xcb, 0xdd, 0xed, 0x87, 0x5b, 0x50, 0x14, 0xb1, 0x75, 0x76, 0xd2, 0x2f,
	0x0e, 0x3b, 0xdd, 0x16, 0x24, 0xa4, 0xde, 0xc8, 0x82, 0x16, 0xa4, 0x8a, 0x5d, 0x0d, 0xac, 0x84,
	0xe0, 0x10, 0x4d, 0x3b, 0xee, 0x60, 0x29, 0x99, 0x71, 0x63, 0xa7, 0x52, 0xf9, 0x13, 0xfc, 0x13,
	0xc4, 0x8f, 0xe0, 0xb0, 0x47, 0xc4, 0x0f, 0xb0, 0xa0, 0xc7, 0x39, 0x70, 0x98, 0x5f, 0x80, 0xe6,
	0xf5, 0x38, 0xe3, 0x6c, 0xd2, 0x36, 0xe2, 0xb4, 0x97, 0xd6, 0x7e, 0xfc, 0xbc, 0x8f, 0xed, 0xf7,
	0x79, 0x5f, 0x4f, 0xd0, 0x1a, 0x0f, 0x6e, 0x5e, 0x26, 0x49, 0x28, 0x3c, 0x3e, 0x4e, 0x64, 0x82,
	0x37, 0x87, 0xec, 0x9a, 0x7a, 0xf9, 0x9f, 0x20, 0x1c, 0xb1, 0xd8, 0xbb, 0x3e, 0xee, 0x3c, 0x8b,
	0x98, 0xfc, 0x79, 0x72, 0xee, 0x5d, 0x24, 0xa3, 0xa3, 0x28, 0x89, 0x92, 0x23, 0x60, 0x9e, 0x4f,
	0x2e, 0x61, 0x06, 0x13, 0x18, 0x69, 0x05, 0xf7, 0xf7, 0x2a, 0x5a, 0x7b, 0x5d, 0x88, 0x7e, 0x11,
	0x86, 0x3e, 0xbd, 0xc2, 0x47, 0xa8, 0xc9, 0x87, 0x81, 0xbc, 0x4c, 0xc6, 0xa3, 0x76, 0xa5, 0x5b,
	0x39, 0x6c, 0xf5, 0xb7, 0x32, 0x45, 0xd6, 0xf3, 0xf9, 0xa9, 0x6b, 0x56, 0x5c, 0x7f, 0x4a, 0xc2,
	0xa7, 0xa8, 0x26, 0x99, 0x1c, 0xd2, 0xb6, 0x03, 0xec, 0xdd, 0x4c, 0x91, 0xae, 0x66, 0x03, 0xec,
	0x76, 0xaf, 0x83, 0x21, 0x0b, 0x03, 0x49, 0x4f, 0xdd, 0x31, 0xbd, 0x9a, 0xb0, 0x31, 0x0d, 0x5d,
	0x5f, 0x87, 0xe0, 0xcf, 0xd1, 0x8a, 0xbc, 0xe1, 0xb4, 0x5d, 0xed, 0x56, 0x0e, 0xab, 0xfd, 0x5e,
	0xa6, 0x08, 0x29, 0x42, 0x6f, 0xf8, 0x1d, 0x91, 0x10, 0x90, 0x6f, 0xca, 0xc7, 0xec, 0x82, 0xb6,
	0x57, 0x20, 0xd2, 0xda, 0x14, 0xe0, 0x3b, 0x36, 0x85, 0x35, 0xfc, 0x35, 0x42, 0x42, 0x06, 0x63,
	0x39, 0x90, 0x6c, 0x44, 0xdb, 0x35, 0x38, 0xf5, 0x27, 0x99, 0x22, 0x7b, 0x5a, 0xa0, 0x5c, 0x5b,
	0xac, 0xd2, 0x02, 0xc2, 0xf7, 0x6c, 0x44, 0x71, 0x1f, 0x35, 0x69, 0x1c, 0x6a, 0x9d, 0x3a, 0xe8,
	0x1c, 0x64, 0x8a, 0xf4, 0xb4, 0x8e, 0x59, 0x59, 0xac, 0xd2, 0xa0, 0x71, 0x08, 0x1a, 0x1e, 0x6a,
	0x32, 0x3e, 0x18, 0xb2, 0x11, 0x93, 0xed, 0x06, 0x5c, 0xc6, 0xca, 0xb7, 0x59, 0x71, 0xfd, 0x06,
	0xe3, 0x67, 0x30, 0xda, 0x44, 0xeb, 0x33, 0x8e, 0x09, 0xee, 0xfe, 0xeb, 0xa0, 0x4d, 0x83, 0xbd,
	0xe1, 0xf9, 0x4e, 0xb9, 0x91, 0x4f, 0x90, 0xc3, 0x42, 0xb0, 0xb0, 0xda, 0x7f, 0x9c, 0x29, 0xd2,
	0x2a, 0x24, 0x43, 0xd7, 0x77, 0x58, 0x38, 0xe3, 0xb3, 0xb3, 0x8c, 0xcf, 0xfb, 0xc6, 0xe7, 0x2a,
	0xb0, 0x37, 0x32, 0x45, 0x1e, 0xd9, 0x3e, 0x1b, 0x4f, 0x7b, 0x85, 0xa7, 0xda, 0x99, 0xf5, 0x4c,
	0x91, 0x55, 0xcb, 0xd3, 0xc2, 0xbf, 0x7d, 0xe3, 0x5f, 0x0d, 0x58, 0x96, 0x98, 0xf6, 0xcf, 0x78,
	0xf5, 0xd9, 0x8c, 0x57, 0x3a, 0xc7, 0x1f, 0x66, 0x8a, 0x6c, 0xce, 0x79, 0x65, 0xfb, 0xe2, 0x59,
	0xbe, 0x34, 0xde, 0xbd, 0xdb, 0xd4, 0x97, 0xc5, 0x1e, 0x34, 0x97, 0xf0, 0x60, 0x1b, 0xe1, 0x77,
	0xf3, 0x2d, 0xb8, 0xfb, 0x87, 0x53, 0xc2, 0x2f, 0xa9, 0x3c, 0x63, 0x42, 0xbe, 0xf7, 0x3e, 0xd8,
	0x37, 0xaf, 0x3d, 0x7c, 0xf3, 0x9c, 0xcf, 0x83, 0x88, 0x0e, 0xe2, 0xc9, 0x08, 0xdc, 0x98, 0xe1,
	0x9b, 0x15, 0xd7, 0x6f, 0xe4, 0xc3, 0x6f, 0x27, 0x23, 0x7c, 0x8c, 0x5a, 0x80, 0x0a, 0xf6, 0x0b,
	0x2d, 0xca, 0x7b, 0x3b, 0x53, 0x64, 0xc3, 0x0a, 0xc8, 0x97, 0xf2, 0xfb, 0x05, 0x11, 0xfd, 0x2e,
	0x1f, 0xfe, 0x5a, 0x43, 0x5b, 0x73, 0x69, 0x14, 0x1c, 0xff, 0x54, 0x48, 0xb1, 0xf8, 0x32, 0x81,
	0x74, 0xae, 0x9e, 0x1c, 0x79, 0x73, 0x2f, 0xa0, 0xb7, 0x20, 0xd4, 0x7b, 0x1d, 0x44, 0xf4, 0x9b,
	0xf8, 0x32, 0xe9, 0x3f, 0x4e, 0x15, 0x29, 0x55, 0xf4, 0xa6, 0xf9, 0x02, 0x1e, 0x20, 0x14, 0xe5,
	0x51, 0x5a, 0xdd, 0xe9, 0x56, 0x0f, 0x57, 0x4f, 0x9e, 0x2f, 0xa9, 0x0e, 0x00, 0xc8, 0xaf, 0xa5,
	0x8a, 0x58, 0x3a, 0x7e, 0x2b, 0x32, 0x4b, 0x1d, 0x8a, 0x9a, 0xe6, 0x14, 0xf8, 0x39, 0x5a, 0x95,
	0x89, 0x0c, 0x86, 0x83, 0x8b, 0x64, 0x12, 0xcb, 0xa2, 0x34, 0xd6, 0x53, 0x45, 0x6c, 0xd8, 0x47,
	0x30, 0x79, 0x91, 0x8f, 0xf1, 0x81, 0x95, 0x76, 0x07, 0xe8, 0x8f, 0x52, 0x45, 0xa6, 0xd8, 0x34,
	0xdf, 0x9d, 0xbf, 0x1c, 0xd4, 0x9a, 0x9e, 0x07, 0x7f, 0x64, 0x95, 0x5e, 0x3d, 0x55, 0xc4, 0x61,
	0x21, 0xd4, 0x1c, 0x99, 0x7d, 0xb2, 0x5b, 0xa9, 0x22, 0x1a, 0x30, 0xb5, 0x73, 0x68, 0x15, 0xa5,
	0x2e, 0x33, 0xbd, 0x5f, 0x81, 0x59, 0xd5, 0xf8, 0xf1, 0x4c, 0x95, 0x35, 0x53, 0x45, 0x60, 0x5e,
	0x94, 0x17, 0x99, 0x6d, 0x73, 0xd8, 0x08, 0x00, 0xd3, 0xdf, 0xcf, 0x16, 0xf4, 0x37, 0x64, 0xb1,
	0x44, 0xed, 0xc6, 0x3e, 0x98, 0x6b, 0x6c, 0x38, 0x97, 0xc1, 0xca, 0x8e, 0x3e, 0x98, 0xeb, 0x68,
	0x20, 0x1a, 0xac, 0x2c, 0x68, 0x17, 0xd5, 0x85, 0x0c, 0xe4, 0x44, 0xb4, 0x5b, 0x40, 0x43, 0xa9,
	0x22, 0x05, 0xe2, 0x17, 0xff, 0xdd, 0xaf, 0xd0, 0x86, 0xf1, 0xfd, 0xc5, 0x30, 0x11, 0xf0, 0xba,
	0x1e, 0x5b, 0xa9, 0x7d, 0x9a, 0x29, 0xf2, 0x64, 0xda, 0xd5, 0x0b, 0x9f, 0x7b, 0x87, 0x85, 0xee,
	0x56, 0xf9, 0x4a, 0x17, 0x32, 0x82, 0xbb, 0x5f, 0x96, 0xcf, 0xf9, 0x2b, 0x4e, 0xe3, 0xff, 0x29,
	0x8d, 0xcb, 0x13, 0x6a, 0x15, 0xc1, 0x4f, 0x7e, 0xab, 0xe6, 0x25, 0xa7, 0x41, 0x7c, 0x86, 0xaa,
	0x41, 0x18, 0xe2, 0xa7, 0xf7, 0x94, 0xb4, 0xfe, 0xfe, 0x77, 0xdc, 0x87, 0x28, 0x82, 0xe3, 0x37,
	0xa8, 0x3e, 0x81, 0x77, 0x0f, 0xef, 0xde, 0xc3, 0x9e, 0x7e, 0x8a, 0x3a, 0x7b, 0x4b, 0xb0, 0x04,
	0xc7, 0x3f, 0xa0, 0x46, 0xa4, 0xfb, 0x0a, 0xef, 0x2d, 0xd3, 0x7b, 0x57, 0x9d, 0xfd, 0xe5, 0x5a,
	0x14, 0xfb, 0xa8, 0x76, 0x91, 0xa7, 0x1c, 0xf7, 0xee, 0x09, 0x30, 0xde, 0x76, 0x76, 0x1f, 0x26,
	0x09, 0x8e, 0x5f, 0xa1, 0x95, 0x84, 0xd3, 0x18, 0xdf, 0x97, 0xb0, 0xc2, 0xd2, 0x4e, 0xef, 0x41,
	0x8e, 0xe0, 0xfd, 0xed, 0xb7, 0xff, 0xec, 0x7c, 0xf0, 0xf6, 0x76, 0xa7, 0xf2, 0xe7, 0xed, 0x4e,
	0xe5, 0xef, 0xdb, 0x9d, 0xca, 0x8f, 0xce, 0xf5, 0xf1, 0x79, 0x1d, 0x7e, 0xa9, 0x7d, 0xfa, 0x5f,
	0x00, 0x00, 0x00, 0xff, 0xff, 0xf6, 0x27, 0x95, 0xa8, 0xfd, 0x09, 0x00, 0x00,
}
