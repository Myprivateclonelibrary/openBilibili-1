// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: proto.proto

package model

/*

	v0.1.0

	channel
*/

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import go_common_library_time "go-common/library/time"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Channel struct {
	ID                   int64                       `protobuf:"varint,1,opt,name=ID,proto3" json:"id"`
	Name                 string                      `protobuf:"bytes,2,opt,name=Name,proto3" json:"name"`
	Type                 int64                       `protobuf:"varint,3,opt,name=Type,proto3" json:"type"`
	Cover                string                      `protobuf:"bytes,4,opt,name=Cover,proto3" json:"cover"`
	Content              string                      `protobuf:"bytes,5,opt,name=Content,proto3" json:"content"`
	Bind                 int64                       `protobuf:"varint,6,opt,name=Bind,proto3" json:"bind"`
	Sub                  int64                       `protobuf:"varint,7,opt,name=Sub,proto3" json:"sub"`
	Attention            int32                       `protobuf:"varint,8,opt,name=Attention,proto3" json:"attention"`
	Rank                 int32                       `protobuf:"varint,9,opt,name=Rank,proto3" json:"rank"`
	Attr                 int32                       `protobuf:"varint,10,opt,name=Attr,proto3" json:"attr"`
	State                int32                       `protobuf:"varint,11,opt,name=State,proto3" json:"state"`
	CTime                go_common_library_time.Time `protobuf:"varint,12,opt,name=CTime,proto3,casttype=go-common/library/time.Time" json:"ctime"`
	MTime                go_common_library_time.Time `protobuf:"varint,13,opt,name=MTime,proto3,casttype=go-common/library/time.Time" json:"-"`
	TopRank              int32                       `protobuf:"varint,14,opt,name=TopRank,proto3" json:"-"`
	HeadCover            string                      `protobuf:"bytes,15,opt,name=head_cover,json=headCover,proto3" json:"head_cover"`
	ShortContent         string                      `protobuf:"bytes,16,opt,name=short_content,json=shortContent,proto3" json:"short_content"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_unrecognized     []byte                      `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *Channel) Reset()         { *m = Channel{} }
func (m *Channel) String() string { return proto.CompactTextString(m) }
func (*Channel) ProtoMessage()    {}
func (*Channel) Descriptor() ([]byte, []int) {
	return fileDescriptor_proto_593298750cf7c54d, []int{0}
}
func (m *Channel) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Channel) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Channel.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Channel) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Channel.Merge(dst, src)
}
func (m *Channel) XXX_Size() int {
	return m.Size()
}
func (m *Channel) XXX_DiscardUnknown() {
	xxx_messageInfo_Channel.DiscardUnknown(m)
}

var xxx_messageInfo_Channel proto.InternalMessageInfo

type ChannelSynonym struct {
	Id                   int64                       `protobuf:"varint,1,opt,name=id,proto3" json:"id"`
	Name                 string                      `protobuf:"bytes,2,opt,name=Name,proto3" json:"name"`
	Alias                string                      `protobuf:"bytes,3,opt,name=alias,proto3" json:"alias"`
	Rank                 string                      `protobuf:"bytes,4,opt,name=rank,proto3" json:"-"`
	CTime                go_common_library_time.Time `protobuf:"varint,5,opt,name=CTime,proto3,casttype=go-common/library/time.Time" json:"ctime"`
	MTime                go_common_library_time.Time `protobuf:"varint,6,opt,name=MTime,proto3,casttype=go-common/library/time.Time" json:"-"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_unrecognized     []byte                      `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *ChannelSynonym) Reset()         { *m = ChannelSynonym{} }
func (m *ChannelSynonym) String() string { return proto.CompactTextString(m) }
func (*ChannelSynonym) ProtoMessage()    {}
func (*ChannelSynonym) Descriptor() ([]byte, []int) {
	return fileDescriptor_proto_593298750cf7c54d, []int{1}
}
func (m *ChannelSynonym) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChannelSynonym) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChannelSynonym.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ChannelSynonym) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChannelSynonym.Merge(dst, src)
}
func (m *ChannelSynonym) XXX_Size() int {
	return m.Size()
}
func (m *ChannelSynonym) XXX_DiscardUnknown() {
	xxx_messageInfo_ChannelSynonym.DiscardUnknown(m)
}

var xxx_messageInfo_ChannelSynonym proto.InternalMessageInfo

func init() {
	proto.RegisterType((*Channel)(nil), "model.Channel")
	proto.RegisterType((*ChannelSynonym)(nil), "model.ChannelSynonym")
}
func (m *Channel) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Channel) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintProto(dAtA, i, uint64(m.ID))
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintProto(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if m.Type != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintProto(dAtA, i, uint64(m.Type))
	}
	if len(m.Cover) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintProto(dAtA, i, uint64(len(m.Cover)))
		i += copy(dAtA[i:], m.Cover)
	}
	if len(m.Content) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintProto(dAtA, i, uint64(len(m.Content)))
		i += copy(dAtA[i:], m.Content)
	}
	if m.Bind != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintProto(dAtA, i, uint64(m.Bind))
	}
	if m.Sub != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintProto(dAtA, i, uint64(m.Sub))
	}
	if m.Attention != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintProto(dAtA, i, uint64(m.Attention))
	}
	if m.Rank != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintProto(dAtA, i, uint64(m.Rank))
	}
	if m.Attr != 0 {
		dAtA[i] = 0x50
		i++
		i = encodeVarintProto(dAtA, i, uint64(m.Attr))
	}
	if m.State != 0 {
		dAtA[i] = 0x58
		i++
		i = encodeVarintProto(dAtA, i, uint64(m.State))
	}
	if m.CTime != 0 {
		dAtA[i] = 0x60
		i++
		i = encodeVarintProto(dAtA, i, uint64(m.CTime))
	}
	if m.MTime != 0 {
		dAtA[i] = 0x68
		i++
		i = encodeVarintProto(dAtA, i, uint64(m.MTime))
	}
	if m.TopRank != 0 {
		dAtA[i] = 0x70
		i++
		i = encodeVarintProto(dAtA, i, uint64(m.TopRank))
	}
	if len(m.HeadCover) > 0 {
		dAtA[i] = 0x7a
		i++
		i = encodeVarintProto(dAtA, i, uint64(len(m.HeadCover)))
		i += copy(dAtA[i:], m.HeadCover)
	}
	if len(m.ShortContent) > 0 {
		dAtA[i] = 0x82
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintProto(dAtA, i, uint64(len(m.ShortContent)))
		i += copy(dAtA[i:], m.ShortContent)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ChannelSynonym) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChannelSynonym) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintProto(dAtA, i, uint64(m.Id))
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintProto(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.Alias) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintProto(dAtA, i, uint64(len(m.Alias)))
		i += copy(dAtA[i:], m.Alias)
	}
	if len(m.Rank) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintProto(dAtA, i, uint64(len(m.Rank)))
		i += copy(dAtA[i:], m.Rank)
	}
	if m.CTime != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintProto(dAtA, i, uint64(m.CTime))
	}
	if m.MTime != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintProto(dAtA, i, uint64(m.MTime))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintProto(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Channel) Size() (n int) {
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovProto(uint64(m.ID))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovProto(uint64(l))
	}
	if m.Type != 0 {
		n += 1 + sovProto(uint64(m.Type))
	}
	l = len(m.Cover)
	if l > 0 {
		n += 1 + l + sovProto(uint64(l))
	}
	l = len(m.Content)
	if l > 0 {
		n += 1 + l + sovProto(uint64(l))
	}
	if m.Bind != 0 {
		n += 1 + sovProto(uint64(m.Bind))
	}
	if m.Sub != 0 {
		n += 1 + sovProto(uint64(m.Sub))
	}
	if m.Attention != 0 {
		n += 1 + sovProto(uint64(m.Attention))
	}
	if m.Rank != 0 {
		n += 1 + sovProto(uint64(m.Rank))
	}
	if m.Attr != 0 {
		n += 1 + sovProto(uint64(m.Attr))
	}
	if m.State != 0 {
		n += 1 + sovProto(uint64(m.State))
	}
	if m.CTime != 0 {
		n += 1 + sovProto(uint64(m.CTime))
	}
	if m.MTime != 0 {
		n += 1 + sovProto(uint64(m.MTime))
	}
	if m.TopRank != 0 {
		n += 1 + sovProto(uint64(m.TopRank))
	}
	l = len(m.HeadCover)
	if l > 0 {
		n += 1 + l + sovProto(uint64(l))
	}
	l = len(m.ShortContent)
	if l > 0 {
		n += 2 + l + sovProto(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ChannelSynonym) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovProto(uint64(m.Id))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovProto(uint64(l))
	}
	l = len(m.Alias)
	if l > 0 {
		n += 1 + l + sovProto(uint64(l))
	}
	l = len(m.Rank)
	if l > 0 {
		n += 1 + l + sovProto(uint64(l))
	}
	if m.CTime != 0 {
		n += 1 + sovProto(uint64(m.CTime))
	}
	if m.MTime != 0 {
		n += 1 + sovProto(uint64(m.MTime))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovProto(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozProto(x uint64) (n int) {
	return sovProto(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Channel) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProto
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Channel: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Channel: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProto
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cover", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProto
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cover = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProto
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Content = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bind", wireType)
			}
			m.Bind = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Bind |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sub", wireType)
			}
			m.Sub = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sub |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attention", wireType)
			}
			m.Attention = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Attention |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rank", wireType)
			}
			m.Rank = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Rank |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attr", wireType)
			}
			m.Attr = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Attr |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CTime", wireType)
			}
			m.CTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CTime |= (go_common_library_time.Time(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MTime", wireType)
			}
			m.MTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MTime |= (go_common_library_time.Time(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopRank", wireType)
			}
			m.TopRank = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TopRank |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeadCover", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProto
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HeadCover = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShortContent", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProto
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ShortContent = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProto(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProto
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChannelSynonym) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProto
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChannelSynonym: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChannelSynonym: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProto
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Alias", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProto
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Alias = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rank", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProto
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Rank = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CTime", wireType)
			}
			m.CTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CTime |= (go_common_library_time.Time(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MTime", wireType)
			}
			m.MTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MTime |= (go_common_library_time.Time(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipProto(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProto
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipProto(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowProto
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowProto
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowProto
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthProto
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowProto
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipProto(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthProto = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowProto   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("proto.proto", fileDescriptor_proto_593298750cf7c54d) }

var fileDescriptor_proto_593298750cf7c54d = []byte{
	// 521 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x93, 0xc1, 0x8e, 0x12, 0x31,
	0x18, 0xc7, 0x19, 0xa0, 0xcc, 0x4e, 0x59, 0x50, 0x7b, 0x30, 0x5d, 0x35, 0x53, 0xb2, 0xd1, 0x84,
	0xc4, 0x00, 0x07, 0x13, 0x0f, 0x1e, 0x4c, 0x16, 0xf6, 0xb2, 0x07, 0x3d, 0x14, 0xee, 0x9b, 0x0e,
	0x53, 0xa1, 0x59, 0xa6, 0x25, 0x43, 0x31, 0xe1, 0x4d, 0x7c, 0xa4, 0x3d, 0xee, 0x13, 0x34, 0x2e,
	0xde, 0x26, 0x3e, 0x81, 0x07, 0x63, 0xfa, 0xcd, 0x10, 0xd4, 0xcb, 0xc6, 0x78, 0x81, 0xf6, 0xf7,
	0xef, 0x7f, 0xbe, 0x7e, 0xf3, 0xff, 0x06, 0xb7, 0xd7, 0xb9, 0xb1, 0x66, 0x08, 0xbf, 0x04, 0x65,
	0x26, 0x95, 0xab, 0x67, 0x83, 0x85, 0xb2, 0xcb, 0x6d, 0x32, 0x9c, 0x9b, 0x6c, 0xb4, 0x30, 0x0b,
	0x33, 0x02, 0x35, 0xd9, 0x7e, 0x82, 0x1d, 0x6c, 0x60, 0x55, 0xba, 0xce, 0xbf, 0x37, 0x71, 0x38,
	0x59, 0x0a, 0xad, 0xe5, 0x8a, 0x3c, 0xc5, 0xf5, 0xab, 0x4b, 0x1a, 0xf4, 0x82, 0x7e, 0x63, 0xdc,
	0x2a, 0x1c, 0xab, 0xab, 0x94, 0xd7, 0xaf, 0x2e, 0xc9, 0x0b, 0xdc, 0xfc, 0x28, 0x32, 0x49, 0xeb,
	0xbd, 0xa0, 0x1f, 0x8d, 0x4f, 0x0a, 0xc7, 0x9a, 0x5a, 0x64, 0x92, 0x03, 0xf5, 0xea, 0x6c, 0xb7,
	0x96, 0xb4, 0x01, 0x3e, 0x50, 0xed, 0x6e, 0x2d, 0x39, 0x50, 0xc2, 0x30, 0x9a, 0x98, 0xcf, 0x32,
	0xa7, 0x4d, 0x30, 0x47, 0x85, 0x63, 0x68, 0xee, 0x01, 0x2f, 0x39, 0x79, 0x85, 0xc3, 0x89, 0xd1,
	0x56, 0x6a, 0x4b, 0x11, 0x1c, 0x69, 0x17, 0x8e, 0x85, 0xf3, 0x12, 0xf1, 0x83, 0xe6, 0xab, 0x8c,
	0x95, 0x4e, 0x69, 0xeb, 0x58, 0x25, 0x51, 0x3a, 0xe5, 0x40, 0xc9, 0x19, 0x6e, 0x4c, 0xb7, 0x09,
	0x0d, 0x41, 0x0c, 0x0b, 0xc7, 0x1a, 0x9b, 0x6d, 0xc2, 0x3d, 0x23, 0xaf, 0x71, 0x74, 0x61, 0xfd,
	0x23, 0x94, 0xd1, 0xf4, 0xa4, 0x17, 0xf4, 0xd1, 0xb8, 0x53, 0x38, 0x16, 0x89, 0x03, 0xe4, 0x47,
	0xdd, 0x57, 0xe1, 0x42, 0xdf, 0xd0, 0x08, 0xce, 0x41, 0x95, 0x5c, 0xe8, 0x1b, 0x0e, 0xd4, 0xab,
	0x17, 0xd6, 0xe6, 0x14, 0x1f, 0x55, 0x61, 0x6d, 0xce, 0x81, 0xfa, 0x4e, 0xa7, 0x56, 0x58, 0x49,
	0xdb, 0x20, 0x43, 0xa7, 0x1b, 0x0f, 0x78, 0xc9, 0xc9, 0x7b, 0x8c, 0x26, 0x33, 0x95, 0x49, 0x7a,
	0x0a, 0xd7, 0xec, 0xc3, 0xab, 0xb0, 0x2a, 0x93, 0x3f, 0x1c, 0x7b, 0xbe, 0x30, 0x83, 0xb9, 0xc9,
	0x32, 0xa3, 0x47, 0x2b, 0x95, 0xe4, 0x22, 0xdf, 0x8d, 0xbc, 0x32, 0xf4, 0xe7, 0x79, 0x69, 0x23,
	0xef, 0x30, 0xfa, 0x00, 0xfe, 0x0e, 0xf8, 0x5f, 0x16, 0x8e, 0x05, 0x83, 0x07, 0xbd, 0x60, 0x21,
	0x0c, 0x87, 0x33, 0xb3, 0x86, 0xde, 0xba, 0x70, 0x3d, 0x04, 0x6e, 0x7e, 0xa0, 0x64, 0x80, 0xf1,
	0x52, 0x8a, 0xf4, 0x1a, 0xb2, 0xa1, 0x8f, 0x20, 0x89, 0x6e, 0xe1, 0xd8, 0x6f, 0x94, 0x47, 0x7e,
	0x5d, 0xa6, 0xf6, 0x16, 0x77, 0x36, 0x4b, 0x93, 0xdb, 0xeb, 0x2a, 0x28, 0xfa, 0x18, 0x1c, 0x4f,
	0x0a, 0xc7, 0xfe, 0x14, 0xf8, 0x29, 0x6c, 0xab, 0x18, 0xcf, 0x7f, 0x06, 0xb8, 0x5b, 0x8d, 0xdb,
	0x74, 0xa7, 0x8d, 0xde, 0x65, 0x7e, 0xea, 0x54, 0xfa, 0xf7, 0xd4, 0xa9, 0xf4, 0x81, 0xa9, 0x63,
	0x18, 0x89, 0x95, 0x12, 0x1b, 0x18, 0xbb, 0x6a, 0xae, 0x00, 0xf0, 0xf2, 0x8f, 0x9c, 0x61, 0x88,
	0xae, 0x9a, 0xbb, 0xaa, 0x5d, 0x40, 0xc7, 0x20, 0xd0, 0x7f, 0x06, 0xd1, 0xfa, 0xe7, 0x20, 0xc6,
	0xf4, 0xf6, 0x3e, 0xae, 0xdd, 0xdd, 0xc7, 0xb5, 0xdb, 0x7d, 0x1c, 0xdc, 0xed, 0xe3, 0xe0, 0xeb,
	0x3e, 0x0e, 0xbe, 0x7c, 0x8b, 0x6b, 0x49, 0x0b, 0x3e, 0xc8, 0x37, 0xbf, 0x02, 0x00, 0x00, 0xff,
	0xff, 0xc9, 0xb6, 0xe8, 0xb0, 0xd5, 0x03, 0x00, 0x00,
}
