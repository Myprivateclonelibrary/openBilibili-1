// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: app/interface/main/tag/api/channel.proto

package v1

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import go_common_library_time "go-common/library/time"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type ChannelCategory struct {
	Id                   int64                       `protobuf:"varint,1,opt,name=id,proto3" json:"id"`
	Name                 string                      `protobuf:"bytes,2,opt,name=name,proto3" json:"name"`
	State                int32                       `protobuf:"varint,3,opt,name=state,proto3" json:"state"`
	IntShield            int32                       `protobuf:"varint,4,opt,name=int_shield,json=intShield,proto3" json:"int_shield"`
	Ctime                go_common_library_time.Time `protobuf:"varint,5,opt,name=ctime,proto3,casttype=go-common/library/time.Time" json:"ctime"`
	Mtime                go_common_library_time.Time `protobuf:"varint,6,opt,name=mtime,proto3,casttype=go-common/library/time.Time" json:"-"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_unrecognized     []byte                      `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *ChannelCategory) Reset()         { *m = ChannelCategory{} }
func (m *ChannelCategory) String() string { return proto.CompactTextString(m) }
func (*ChannelCategory) ProtoMessage()    {}
func (*ChannelCategory) Descriptor() ([]byte, []int) {
	return fileDescriptor_channel_1b1413e81bc023fa, []int{0}
}
func (m *ChannelCategory) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChannelCategory) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChannelCategory.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ChannelCategory) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChannelCategory.Merge(dst, src)
}
func (m *ChannelCategory) XXX_Size() int {
	return m.Size()
}
func (m *ChannelCategory) XXX_DiscardUnknown() {
	xxx_messageInfo_ChannelCategory.DiscardUnknown(m)
}

var xxx_messageInfo_ChannelCategory proto.InternalMessageInfo

func (m *ChannelCategory) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *ChannelCategory) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ChannelCategory) GetState() int32 {
	if m != nil {
		return m.State
	}
	return 0
}

func (m *ChannelCategory) GetIntShield() int32 {
	if m != nil {
		return m.IntShield
	}
	return 0
}

func (m *ChannelCategory) GetCtime() go_common_library_time.Time {
	if m != nil {
		return m.Ctime
	}
	return 0
}

func (m *ChannelCategory) GetMtime() go_common_library_time.Time {
	if m != nil {
		return m.Mtime
	}
	return 0
}

type Channel struct {
	Id                   int64                       `protobuf:"varint,1,opt,name=id,proto3" json:"id"`
	Name                 string                      `protobuf:"bytes,2,opt,name=name,proto3" json:"name"`
	Type                 int32                       `protobuf:"varint,3,opt,name=type,proto3" json:"type"`
	TypeId               int64                       `protobuf:"varint,4,opt,name=type_id,json=typeId,proto3" json:"type_id"`
	Cover                string                      `protobuf:"bytes,5,opt,name=cover,proto3" json:"cover"`
	HeadCover            string                      `protobuf:"bytes,6,opt,name=head_cover,json=headCover,proto3" json:"head_cover"`
	Content              string                      `protobuf:"bytes,7,opt,name=content,proto3" json:"content"`
	ShortContent         string                      `protobuf:"bytes,8,opt,name=short_content,json=shortContent,proto3" json:"short_content"`
	Bind                 int64                       `protobuf:"varint,9,opt,name=bind,proto3" json:"bind"`
	Sub                  int64                       `protobuf:"varint,10,opt,name=sub,proto3" json:"sub"`
	Attention            int32                       `protobuf:"varint,11,opt,name=attention,proto3" json:"attention"`
	Activity             int32                       `protobuf:"varint,12,opt,name=activity,proto3" json:"activity"`
	IntShield            int32                       `protobuf:"varint,13,opt,name=int_shield,json=intShield,proto3" json:"int_shield"`
	State                int32                       `protobuf:"varint,14,opt,name=state,proto3" json:"state"`
	Ctime                go_common_library_time.Time `protobuf:"varint,15,opt,name=ctime,proto3,casttype=go-common/library/time.Time" json:"ctime"`
	Mtime                go_common_library_time.Time `protobuf:"varint,16,opt,name=mtime,proto3,casttype=go-common/library/time.Time" json:"-"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_unrecognized     []byte                      `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *Channel) Reset()         { *m = Channel{} }
func (m *Channel) String() string { return proto.CompactTextString(m) }
func (*Channel) ProtoMessage()    {}
func (*Channel) Descriptor() ([]byte, []int) {
	return fileDescriptor_channel_1b1413e81bc023fa, []int{1}
}
func (m *Channel) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Channel) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Channel.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Channel) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Channel.Merge(dst, src)
}
func (m *Channel) XXX_Size() int {
	return m.Size()
}
func (m *Channel) XXX_DiscardUnknown() {
	xxx_messageInfo_Channel.DiscardUnknown(m)
}

var xxx_messageInfo_Channel proto.InternalMessageInfo

func (m *Channel) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Channel) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Channel) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *Channel) GetTypeId() int64 {
	if m != nil {
		return m.TypeId
	}
	return 0
}

func (m *Channel) GetCover() string {
	if m != nil {
		return m.Cover
	}
	return ""
}

func (m *Channel) GetHeadCover() string {
	if m != nil {
		return m.HeadCover
	}
	return ""
}

func (m *Channel) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

func (m *Channel) GetShortContent() string {
	if m != nil {
		return m.ShortContent
	}
	return ""
}

func (m *Channel) GetBind() int64 {
	if m != nil {
		return m.Bind
	}
	return 0
}

func (m *Channel) GetSub() int64 {
	if m != nil {
		return m.Sub
	}
	return 0
}

func (m *Channel) GetAttention() int32 {
	if m != nil {
		return m.Attention
	}
	return 0
}

func (m *Channel) GetActivity() int32 {
	if m != nil {
		return m.Activity
	}
	return 0
}

func (m *Channel) GetIntShield() int32 {
	if m != nil {
		return m.IntShield
	}
	return 0
}

func (m *Channel) GetState() int32 {
	if m != nil {
		return m.State
	}
	return 0
}

func (m *Channel) GetCtime() go_common_library_time.Time {
	if m != nil {
		return m.Ctime
	}
	return 0
}

func (m *Channel) GetMtime() go_common_library_time.Time {
	if m != nil {
		return m.Mtime
	}
	return 0
}

type ChannelSynonym struct {
	Id                   int64                       `protobuf:"varint,1,opt,name=id,proto3" json:"id"`
	Name                 string                      `protobuf:"bytes,2,opt,name=name,proto3" json:"name"`
	Alias                string                      `protobuf:"bytes,3,opt,name=alias,proto3" json:"alias"`
	Ctime                go_common_library_time.Time `protobuf:"varint,4,opt,name=ctime,proto3,casttype=go-common/library/time.Time" json:"ctime"`
	Mtime                go_common_library_time.Time `protobuf:"varint,5,opt,name=mtime,proto3,casttype=go-common/library/time.Time" json:"-"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_unrecognized     []byte                      `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *ChannelSynonym) Reset()         { *m = ChannelSynonym{} }
func (m *ChannelSynonym) String() string { return proto.CompactTextString(m) }
func (*ChannelSynonym) ProtoMessage()    {}
func (*ChannelSynonym) Descriptor() ([]byte, []int) {
	return fileDescriptor_channel_1b1413e81bc023fa, []int{2}
}
func (m *ChannelSynonym) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChannelSynonym) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChannelSynonym.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ChannelSynonym) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChannelSynonym.Merge(dst, src)
}
func (m *ChannelSynonym) XXX_Size() int {
	return m.Size()
}
func (m *ChannelSynonym) XXX_DiscardUnknown() {
	xxx_messageInfo_ChannelSynonym.DiscardUnknown(m)
}

var xxx_messageInfo_ChannelSynonym proto.InternalMessageInfo

func (m *ChannelSynonym) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *ChannelSynonym) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ChannelSynonym) GetAlias() string {
	if m != nil {
		return m.Alias
	}
	return ""
}

func (m *ChannelSynonym) GetCtime() go_common_library_time.Time {
	if m != nil {
		return m.Ctime
	}
	return 0
}

func (m *ChannelSynonym) GetMtime() go_common_library_time.Time {
	if m != nil {
		return m.Mtime
	}
	return 0
}

type ChannelSquare struct {
	Channel              *Channel `protobuf:"bytes,1,opt,name=channel" json:"channel,omitempty"`
	Oids                 []int64  `protobuf:"varint,2,rep,packed,name=oids" json:"oids,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ChannelSquare) Reset()         { *m = ChannelSquare{} }
func (m *ChannelSquare) String() string { return proto.CompactTextString(m) }
func (*ChannelSquare) ProtoMessage()    {}
func (*ChannelSquare) Descriptor() ([]byte, []int) {
	return fileDescriptor_channel_1b1413e81bc023fa, []int{3}
}
func (m *ChannelSquare) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChannelSquare) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChannelSquare.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ChannelSquare) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChannelSquare.Merge(dst, src)
}
func (m *ChannelSquare) XXX_Size() int {
	return m.Size()
}
func (m *ChannelSquare) XXX_DiscardUnknown() {
	xxx_messageInfo_ChannelSquare.DiscardUnknown(m)
}

var xxx_messageInfo_ChannelSquare proto.InternalMessageInfo

func (m *ChannelSquare) GetChannel() *Channel {
	if m != nil {
		return m.Channel
	}
	return nil
}

func (m *ChannelSquare) GetOids() []int64 {
	if m != nil {
		return m.Oids
	}
	return nil
}

type ChannelHit struct {
	Tid                  int64    `protobuf:"varint,1,opt,name=tid,proto3" json:"tid,omitempty"`
	Tname                string   `protobuf:"bytes,2,opt,name=tname,proto3" json:"tname,omitempty"`
	HitRules             []string `protobuf:"bytes,3,rep,name=hit_rules,json=hitRules" json:"hit_rules,omitempty"`
	HitTnames            []string `protobuf:"bytes,4,rep,name=hit_tnames,json=hitTnames" json:"hit_tnames,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ChannelHit) Reset()         { *m = ChannelHit{} }
func (m *ChannelHit) String() string { return proto.CompactTextString(m) }
func (*ChannelHit) ProtoMessage()    {}
func (*ChannelHit) Descriptor() ([]byte, []int) {
	return fileDescriptor_channel_1b1413e81bc023fa, []int{4}
}
func (m *ChannelHit) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChannelHit) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChannelHit.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ChannelHit) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChannelHit.Merge(dst, src)
}
func (m *ChannelHit) XXX_Size() int {
	return m.Size()
}
func (m *ChannelHit) XXX_DiscardUnknown() {
	xxx_messageInfo_ChannelHit.DiscardUnknown(m)
}

var xxx_messageInfo_ChannelHit proto.InternalMessageInfo

func (m *ChannelHit) GetTid() int64 {
	if m != nil {
		return m.Tid
	}
	return 0
}

func (m *ChannelHit) GetTname() string {
	if m != nil {
		return m.Tname
	}
	return ""
}

func (m *ChannelHit) GetHitRules() []string {
	if m != nil {
		return m.HitRules
	}
	return nil
}

func (m *ChannelHit) GetHitTnames() []string {
	if m != nil {
		return m.HitTnames
	}
	return nil
}

type ChannelCheckBack struct {
	Hits                 map[int64]*ChannelHit `protobuf:"bytes,1,rep,name=hits" json:"hits,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value"`
	Checkback            int32                 `protobuf:"varint,2,opt,name=checkback,proto3" json:"checkback,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *ChannelCheckBack) Reset()         { *m = ChannelCheckBack{} }
func (m *ChannelCheckBack) String() string { return proto.CompactTextString(m) }
func (*ChannelCheckBack) ProtoMessage()    {}
func (*ChannelCheckBack) Descriptor() ([]byte, []int) {
	return fileDescriptor_channel_1b1413e81bc023fa, []int{5}
}
func (m *ChannelCheckBack) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChannelCheckBack) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChannelCheckBack.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ChannelCheckBack) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChannelCheckBack.Merge(dst, src)
}
func (m *ChannelCheckBack) XXX_Size() int {
	return m.Size()
}
func (m *ChannelCheckBack) XXX_DiscardUnknown() {
	xxx_messageInfo_ChannelCheckBack.DiscardUnknown(m)
}

var xxx_messageInfo_ChannelCheckBack proto.InternalMessageInfo

func (m *ChannelCheckBack) GetHits() map[int64]*ChannelHit {
	if m != nil {
		return m.Hits
	}
	return nil
}

func (m *ChannelCheckBack) GetCheckback() int32 {
	if m != nil {
		return m.Checkback
	}
	return 0
}

func init() {
	proto.RegisterType((*ChannelCategory)(nil), "main.community.tag.v1.ChannelCategory")
	proto.RegisterType((*Channel)(nil), "main.community.tag.v1.Channel")
	proto.RegisterType((*ChannelSynonym)(nil), "main.community.tag.v1.ChannelSynonym")
	proto.RegisterType((*ChannelSquare)(nil), "main.community.tag.v1.ChannelSquare")
	proto.RegisterType((*ChannelHit)(nil), "main.community.tag.v1.ChannelHit")
	proto.RegisterType((*ChannelCheckBack)(nil), "main.community.tag.v1.ChannelCheckBack")
	proto.RegisterMapType((map[int64]*ChannelHit)(nil), "main.community.tag.v1.ChannelCheckBack.HitsEntry")
}
func (m *ChannelCategory) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChannelCategory) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintChannel(dAtA, i, uint64(m.Id))
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintChannel(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if m.State != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintChannel(dAtA, i, uint64(m.State))
	}
	if m.IntShield != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintChannel(dAtA, i, uint64(m.IntShield))
	}
	if m.Ctime != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintChannel(dAtA, i, uint64(m.Ctime))
	}
	if m.Mtime != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintChannel(dAtA, i, uint64(m.Mtime))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Channel) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Channel) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintChannel(dAtA, i, uint64(m.Id))
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintChannel(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if m.Type != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintChannel(dAtA, i, uint64(m.Type))
	}
	if m.TypeId != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintChannel(dAtA, i, uint64(m.TypeId))
	}
	if len(m.Cover) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintChannel(dAtA, i, uint64(len(m.Cover)))
		i += copy(dAtA[i:], m.Cover)
	}
	if len(m.HeadCover) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintChannel(dAtA, i, uint64(len(m.HeadCover)))
		i += copy(dAtA[i:], m.HeadCover)
	}
	if len(m.Content) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintChannel(dAtA, i, uint64(len(m.Content)))
		i += copy(dAtA[i:], m.Content)
	}
	if len(m.ShortContent) > 0 {
		dAtA[i] = 0x42
		i++
		i = encodeVarintChannel(dAtA, i, uint64(len(m.ShortContent)))
		i += copy(dAtA[i:], m.ShortContent)
	}
	if m.Bind != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintChannel(dAtA, i, uint64(m.Bind))
	}
	if m.Sub != 0 {
		dAtA[i] = 0x50
		i++
		i = encodeVarintChannel(dAtA, i, uint64(m.Sub))
	}
	if m.Attention != 0 {
		dAtA[i] = 0x58
		i++
		i = encodeVarintChannel(dAtA, i, uint64(m.Attention))
	}
	if m.Activity != 0 {
		dAtA[i] = 0x60
		i++
		i = encodeVarintChannel(dAtA, i, uint64(m.Activity))
	}
	if m.IntShield != 0 {
		dAtA[i] = 0x68
		i++
		i = encodeVarintChannel(dAtA, i, uint64(m.IntShield))
	}
	if m.State != 0 {
		dAtA[i] = 0x70
		i++
		i = encodeVarintChannel(dAtA, i, uint64(m.State))
	}
	if m.Ctime != 0 {
		dAtA[i] = 0x78
		i++
		i = encodeVarintChannel(dAtA, i, uint64(m.Ctime))
	}
	if m.Mtime != 0 {
		dAtA[i] = 0x80
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintChannel(dAtA, i, uint64(m.Mtime))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ChannelSynonym) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChannelSynonym) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintChannel(dAtA, i, uint64(m.Id))
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintChannel(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.Alias) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintChannel(dAtA, i, uint64(len(m.Alias)))
		i += copy(dAtA[i:], m.Alias)
	}
	if m.Ctime != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintChannel(dAtA, i, uint64(m.Ctime))
	}
	if m.Mtime != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintChannel(dAtA, i, uint64(m.Mtime))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ChannelSquare) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChannelSquare) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Channel != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintChannel(dAtA, i, uint64(m.Channel.Size()))
		n1, err := m.Channel.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if len(m.Oids) > 0 {
		dAtA3 := make([]byte, len(m.Oids)*10)
		var j2 int
		for _, num1 := range m.Oids {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA3[j2] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j2++
			}
			dAtA3[j2] = uint8(num)
			j2++
		}
		dAtA[i] = 0x12
		i++
		i = encodeVarintChannel(dAtA, i, uint64(j2))
		i += copy(dAtA[i:], dAtA3[:j2])
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ChannelHit) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChannelHit) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Tid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintChannel(dAtA, i, uint64(m.Tid))
	}
	if len(m.Tname) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintChannel(dAtA, i, uint64(len(m.Tname)))
		i += copy(dAtA[i:], m.Tname)
	}
	if len(m.HitRules) > 0 {
		for _, s := range m.HitRules {
			dAtA[i] = 0x1a
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.HitTnames) > 0 {
		for _, s := range m.HitTnames {
			dAtA[i] = 0x22
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ChannelCheckBack) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChannelCheckBack) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Hits) > 0 {
		for k, _ := range m.Hits {
			dAtA[i] = 0xa
			i++
			v := m.Hits[k]
			msgSize := 0
			if v != nil {
				msgSize = v.Size()
				msgSize += 1 + sovChannel(uint64(msgSize))
			}
			mapSize := 1 + sovChannel(uint64(k)) + msgSize
			i = encodeVarintChannel(dAtA, i, uint64(mapSize))
			dAtA[i] = 0x8
			i++
			i = encodeVarintChannel(dAtA, i, uint64(k))
			if v != nil {
				dAtA[i] = 0x12
				i++
				i = encodeVarintChannel(dAtA, i, uint64(v.Size()))
				n4, err := v.MarshalTo(dAtA[i:])
				if err != nil {
					return 0, err
				}
				i += n4
			}
		}
	}
	if m.Checkback != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintChannel(dAtA, i, uint64(m.Checkback))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintChannel(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *ChannelCategory) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovChannel(uint64(m.Id))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovChannel(uint64(l))
	}
	if m.State != 0 {
		n += 1 + sovChannel(uint64(m.State))
	}
	if m.IntShield != 0 {
		n += 1 + sovChannel(uint64(m.IntShield))
	}
	if m.Ctime != 0 {
		n += 1 + sovChannel(uint64(m.Ctime))
	}
	if m.Mtime != 0 {
		n += 1 + sovChannel(uint64(m.Mtime))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Channel) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovChannel(uint64(m.Id))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovChannel(uint64(l))
	}
	if m.Type != 0 {
		n += 1 + sovChannel(uint64(m.Type))
	}
	if m.TypeId != 0 {
		n += 1 + sovChannel(uint64(m.TypeId))
	}
	l = len(m.Cover)
	if l > 0 {
		n += 1 + l + sovChannel(uint64(l))
	}
	l = len(m.HeadCover)
	if l > 0 {
		n += 1 + l + sovChannel(uint64(l))
	}
	l = len(m.Content)
	if l > 0 {
		n += 1 + l + sovChannel(uint64(l))
	}
	l = len(m.ShortContent)
	if l > 0 {
		n += 1 + l + sovChannel(uint64(l))
	}
	if m.Bind != 0 {
		n += 1 + sovChannel(uint64(m.Bind))
	}
	if m.Sub != 0 {
		n += 1 + sovChannel(uint64(m.Sub))
	}
	if m.Attention != 0 {
		n += 1 + sovChannel(uint64(m.Attention))
	}
	if m.Activity != 0 {
		n += 1 + sovChannel(uint64(m.Activity))
	}
	if m.IntShield != 0 {
		n += 1 + sovChannel(uint64(m.IntShield))
	}
	if m.State != 0 {
		n += 1 + sovChannel(uint64(m.State))
	}
	if m.Ctime != 0 {
		n += 1 + sovChannel(uint64(m.Ctime))
	}
	if m.Mtime != 0 {
		n += 2 + sovChannel(uint64(m.Mtime))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ChannelSynonym) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovChannel(uint64(m.Id))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovChannel(uint64(l))
	}
	l = len(m.Alias)
	if l > 0 {
		n += 1 + l + sovChannel(uint64(l))
	}
	if m.Ctime != 0 {
		n += 1 + sovChannel(uint64(m.Ctime))
	}
	if m.Mtime != 0 {
		n += 1 + sovChannel(uint64(m.Mtime))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ChannelSquare) Size() (n int) {
	var l int
	_ = l
	if m.Channel != nil {
		l = m.Channel.Size()
		n += 1 + l + sovChannel(uint64(l))
	}
	if len(m.Oids) > 0 {
		l = 0
		for _, e := range m.Oids {
			l += sovChannel(uint64(e))
		}
		n += 1 + sovChannel(uint64(l)) + l
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ChannelHit) Size() (n int) {
	var l int
	_ = l
	if m.Tid != 0 {
		n += 1 + sovChannel(uint64(m.Tid))
	}
	l = len(m.Tname)
	if l > 0 {
		n += 1 + l + sovChannel(uint64(l))
	}
	if len(m.HitRules) > 0 {
		for _, s := range m.HitRules {
			l = len(s)
			n += 1 + l + sovChannel(uint64(l))
		}
	}
	if len(m.HitTnames) > 0 {
		for _, s := range m.HitTnames {
			l = len(s)
			n += 1 + l + sovChannel(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ChannelCheckBack) Size() (n int) {
	var l int
	_ = l
	if len(m.Hits) > 0 {
		for k, v := range m.Hits {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovChannel(uint64(l))
			}
			mapEntrySize := 1 + sovChannel(uint64(k)) + l
			n += mapEntrySize + 1 + sovChannel(uint64(mapEntrySize))
		}
	}
	if m.Checkback != 0 {
		n += 1 + sovChannel(uint64(m.Checkback))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovChannel(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozChannel(x uint64) (n int) {
	return sovChannel(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ChannelCategory) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChannel
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChannelCategory: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChannelCategory: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChannel
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IntShield", wireType)
			}
			m.IntShield = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IntShield |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ctime", wireType)
			}
			m.Ctime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ctime |= (go_common_library_time.Time(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mtime", wireType)
			}
			m.Mtime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mtime |= (go_common_library_time.Time(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipChannel(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChannel
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Channel) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChannel
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Channel: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Channel: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChannel
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeId", wireType)
			}
			m.TypeId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TypeId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cover", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChannel
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cover = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeadCover", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChannel
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HeadCover = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChannel
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Content = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShortContent", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChannel
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ShortContent = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bind", wireType)
			}
			m.Bind = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Bind |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sub", wireType)
			}
			m.Sub = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sub |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attention", wireType)
			}
			m.Attention = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Attention |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Activity", wireType)
			}
			m.Activity = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Activity |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IntShield", wireType)
			}
			m.IntShield = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IntShield |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ctime", wireType)
			}
			m.Ctime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ctime |= (go_common_library_time.Time(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mtime", wireType)
			}
			m.Mtime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mtime |= (go_common_library_time.Time(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipChannel(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChannel
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChannelSynonym) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChannel
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChannelSynonym: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChannelSynonym: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChannel
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Alias", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChannel
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Alias = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ctime", wireType)
			}
			m.Ctime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ctime |= (go_common_library_time.Time(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mtime", wireType)
			}
			m.Mtime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mtime |= (go_common_library_time.Time(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipChannel(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChannel
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChannelSquare) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChannel
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChannelSquare: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChannelSquare: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Channel", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChannel
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Channel == nil {
				m.Channel = &Channel{}
			}
			if err := m.Channel.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowChannel
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Oids = append(m.Oids, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowChannel
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthChannel
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowChannel
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Oids = append(m.Oids, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Oids", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipChannel(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChannel
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChannelHit) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChannel
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChannelHit: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChannelHit: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tid", wireType)
			}
			m.Tid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Tid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tname", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChannel
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tname = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HitRules", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChannel
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HitRules = append(m.HitRules, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HitTnames", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChannel
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HitTnames = append(m.HitTnames, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChannel(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChannel
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChannelCheckBack) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChannel
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChannelCheckBack: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChannelCheckBack: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hits", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChannel
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Hits == nil {
				m.Hits = make(map[int64]*ChannelHit)
			}
			var mapkey int64
			var mapvalue *ChannelHit
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowChannel
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowChannel
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= (int64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowChannel
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= (int(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthChannel
					}
					postmsgIndex := iNdEx + mapmsglen
					if mapmsglen < 0 {
						return ErrInvalidLengthChannel
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &ChannelHit{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipChannel(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthChannel
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Hits[mapkey] = mapvalue
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Checkback", wireType)
			}
			m.Checkback = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChannel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Checkback |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipChannel(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChannel
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipChannel(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowChannel
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowChannel
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowChannel
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthChannel
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowChannel
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipChannel(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthChannel = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowChannel   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("app/interface/main/tag/api/channel.proto", fileDescriptor_channel_1b1413e81bc023fa)
}

var fileDescriptor_channel_1b1413e81bc023fa = []byte{
	// 757 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x55, 0xcf, 0x8b, 0xdb, 0x46,
	0x14, 0x46, 0xbf, 0xec, 0xd5, 0xf3, 0xee, 0x66, 0x3b, 0xb4, 0x45, 0x4d, 0xb6, 0x96, 0x6b, 0x52,
	0x10, 0x14, 0x4b, 0xec, 0x16, 0xda, 0x90, 0x43, 0x0f, 0x36, 0x81, 0xed, 0x75, 0x92, 0x53, 0xa0,
	0x98, 0xb1, 0x34, 0xb1, 0x06, 0x5b, 0x23, 0x57, 0x1a, 0x1b, 0xf4, 0x4f, 0xf4, 0xd2, 0x7f, 0xaa,
	0xc7, 0x42, 0xef, 0xa2, 0x6c, 0x6f, 0xfa, 0x13, 0x7a, 0x2a, 0xf3, 0x24, 0xd9, 0x6d, 0x69, 0x13,
	0x92, 0xbd, 0xcc, 0xbc, 0xf7, 0xbd, 0xef, 0x8d, 0xe7, 0xfb, 0x78, 0x1e, 0x41, 0xc0, 0x76, 0xbb,
	0x48, 0x48, 0xc5, 0x8b, 0x37, 0x2c, 0xe6, 0x51, 0xc6, 0x84, 0x8c, 0x14, 0x5b, 0x47, 0x6c, 0x27,
	0xa2, 0x38, 0x65, 0x52, 0xf2, 0x6d, 0xb8, 0x2b, 0x72, 0x95, 0x93, 0x4f, 0x74, 0x2d, 0x8c, 0xf3,
	0x2c, 0xdb, 0x4b, 0xa1, 0xaa, 0x50, 0xb1, 0x75, 0x78, 0xb8, 0x79, 0x3c, 0x5b, 0x0b, 0x95, 0xee,
	0x57, 0xba, 0x10, 0xad, 0xf3, 0x75, 0x1e, 0x21, 0x7b, 0xb5, 0x7f, 0x83, 0x19, 0x26, 0x18, 0xb5,
	0xa7, 0x4c, 0x7f, 0x36, 0xe1, 0xd1, 0xa2, 0x3d, 0x77, 0xc1, 0x14, 0x5f, 0xe7, 0x45, 0x45, 0x3e,
	0x05, 0x53, 0x24, 0x9e, 0x31, 0x31, 0x02, 0x6b, 0x3e, 0x68, 0x6a, 0xdf, 0x14, 0x09, 0x35, 0x45,
	0x42, 0xae, 0xc1, 0x96, 0x2c, 0xe3, 0x9e, 0x39, 0x31, 0x02, 0x77, 0x7e, 0xd6, 0xd4, 0x3e, 0xe6,
	0x14, 0x57, 0xe2, 0x83, 0x53, 0x2a, 0xa6, 0xb8, 0x67, 0x4d, 0x8c, 0xc0, 0x99, 0xbb, 0x4d, 0xed,
	0xb7, 0x00, 0x6d, 0x37, 0x32, 0x03, 0x10, 0x52, 0x2d, 0xcb, 0x54, 0xf0, 0x6d, 0xe2, 0xd9, 0xc8,
	0xba, 0x6c, 0x6a, 0xff, 0x6f, 0x28, 0x75, 0x85, 0x54, 0x2f, 0x31, 0x24, 0xdf, 0x81, 0x13, 0x2b,
	0x91, 0x71, 0xcf, 0xc1, 0x8b, 0x04, 0xfa, 0x3c, 0x04, 0xfe, 0xac, 0xfd, 0x27, 0xeb, 0x7c, 0xa6,
	0x95, 0xe7, 0x32, 0xda, 0x8a, 0x55, 0xc1, 0x8a, 0x2a, 0xd2, 0x95, 0xf0, 0x95, 0xc8, 0x38, 0x6d,
	0x59, 0xe4, 0x39, 0x38, 0x19, 0xf6, 0x0f, 0xb0, 0xff, 0x69, 0x53, 0xfb, 0xc6, 0xec, 0x9d, 0xbd,
	0xd8, 0x32, 0xfd, 0xc9, 0x81, 0x61, 0xe7, 0xca, 0x07, 0xba, 0x71, 0x0d, 0xb6, 0xaa, 0x76, 0xbd,
	0x19, 0x58, 0xd5, 0x39, 0xc5, 0x95, 0x3c, 0x85, 0xa1, 0xde, 0x97, 0xa2, 0xf5, 0xc1, 0x9a, 0x8f,
	0x9a, 0xda, 0xef, 0x21, 0x3a, 0xd0, 0xc1, 0xf7, 0x89, 0x76, 0x34, 0xce, 0x0f, 0xbc, 0x40, 0x07,
	0xdc, 0xd6, 0x51, 0x04, 0x68, 0xbb, 0x69, 0x47, 0x53, 0xce, 0x92, 0x65, 0xcb, 0x1a, 0x20, 0x0b,
	0x1d, 0x3d, 0xa1, 0xd4, 0xd5, 0xf1, 0x02, 0xe9, 0x5f, 0xc2, 0x30, 0xce, 0xa5, 0xe2, 0x52, 0x79,
	0x43, 0xe4, 0xe2, 0xaf, 0x76, 0x10, 0xed, 0x03, 0xf2, 0x0d, 0x5c, 0x94, 0x69, 0x5e, 0xa8, 0x65,
	0x4f, 0x3e, 0x43, 0xf2, 0x47, 0x4d, 0xed, 0xff, 0xb3, 0x40, 0xcf, 0x31, 0x5d, 0x74, 0x7d, 0xd7,
	0x60, 0xaf, 0x84, 0x4c, 0x3c, 0x17, 0x15, 0xa1, 0x64, 0x9d, 0x53, 0x5c, 0xc9, 0x67, 0x60, 0x95,
	0xfb, 0x95, 0x07, 0x58, 0x1c, 0x36, 0xb5, 0xaf, 0x53, 0xaa, 0x17, 0xf2, 0x15, 0xb8, 0x4c, 0xe9,
	0x23, 0x44, 0x2e, 0xbd, 0x11, 0x1a, 0x76, 0xd1, 0xd4, 0xfe, 0x09, 0xa4, 0xa7, 0x90, 0x04, 0x70,
	0xc6, 0x62, 0x25, 0x0e, 0x42, 0x55, 0xde, 0x39, 0x72, 0xcf, 0x9b, 0xda, 0x3f, 0x62, 0xf4, 0x18,
	0xfd, 0x6b, 0xde, 0x2e, 0xde, 0x35, 0x6f, 0xc7, 0xf9, 0xbd, 0xfc, 0x9f, 0xf9, 0x3d, 0x0e, 0xe4,
	0xa3, 0x07, 0x0e, 0xe4, 0xd5, 0xfb, 0x0f, 0xe4, 0x1f, 0x06, 0x5c, 0x76, 0x03, 0xf9, 0xb2, 0x92,
	0xb9, 0xac, 0xb2, 0x0f, 0xff, 0x97, 0xb2, 0xad, 0x60, 0x25, 0x0e, 0x66, 0x37, 0x53, 0x08, 0xd0,
	0x76, 0x3b, 0xa9, 0xb4, 0x1f, 0xa8, 0xd2, 0x79, 0x7f, 0x95, 0x3f, 0xc0, 0x45, 0x2f, 0xf2, 0xc7,
	0x3d, 0x2b, 0x38, 0x79, 0x06, 0xc3, 0xee, 0xd1, 0x43, 0xa1, 0xa3, 0xdb, 0x71, 0xf8, 0x9f, 0xaf,
	0x5e, 0xd8, 0xb5, 0xd1, 0x9e, 0x4e, 0x08, 0xd8, 0xb9, 0x48, 0x4a, 0xcf, 0x9c, 0x58, 0x81, 0x45,
	0x31, 0x9e, 0xee, 0x00, 0x3a, 0xde, 0x9d, 0x50, 0xe4, 0x0a, 0x2c, 0xd5, 0x1b, 0x48, 0x75, 0x48,
	0x3e, 0x06, 0x47, 0x9d, 0xac, 0xa3, 0x6d, 0x42, 0x9e, 0x80, 0x9b, 0x0a, 0xb5, 0x2c, 0xf6, 0x5b,
	0xae, 0x5d, 0xb3, 0x02, 0x97, 0x9e, 0xa5, 0x42, 0x51, 0x9d, 0x93, 0xcf, 0x01, 0x74, 0x11, 0x99,
	0xa5, 0x67, 0x63, 0x55, 0xd3, 0x5f, 0x21, 0x30, 0xfd, 0xcd, 0x80, 0xab, 0xfe, 0x75, 0x4d, 0x79,
	0xbc, 0x99, 0xb3, 0x78, 0x43, 0x5e, 0x80, 0x9d, 0x0a, 0x55, 0x7a, 0xc6, 0xc4, 0x0a, 0x46, 0xb7,
	0x37, 0x6f, 0x57, 0x74, 0x6c, 0x0b, 0xef, 0x84, 0x2a, 0x5f, 0x48, 0x55, 0x54, 0x14, 0xdb, 0xc9,
	0x35, 0xb8, 0xb1, 0x2e, 0xae, 0x58, 0xbc, 0xc1, 0x1b, 0x3b, 0xf4, 0x04, 0x3c, 0x7e, 0x0d, 0xee,
	0xb1, 0x41, 0x4b, 0xdd, 0xf0, 0xaa, 0x97, 0xba, 0xe1, 0x15, 0xf9, 0x16, 0x9c, 0x03, 0xdb, 0xee,
	0x5b, 0xa9, 0xa3, 0xdb, 0x2f, 0xde, 0x7e, 0x89, 0x3b, 0xa1, 0x68, 0xcb, 0x7f, 0x6e, 0x3e, 0x33,
	0xe6, 0x57, 0xbf, 0xdc, 0x8f, 0x8d, 0x5f, 0xef, 0xc7, 0xc6, 0xef, 0xf7, 0x63, 0xe3, 0xb5, 0x79,
	0xb8, 0x59, 0x0d, 0xf0, 0x63, 0xf2, 0xf5, 0x5f, 0x01, 0x00, 0x00, 0xff, 0xff, 0xee, 0x9a, 0x58,
	0x70, 0xbe, 0x06, 0x00, 0x00,
}
