// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: app/interface/main/tag/api/request.proto

package v1

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type TagReq struct {
	Tid                  int64    `protobuf:"varint,1,opt,name=tid,proto3" json:"tid,omitempty"`
	Mid                  int64    `protobuf:"varint,2,opt,name=mid,proto3" json:"mid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TagReq) Reset()         { *m = TagReq{} }
func (m *TagReq) String() string { return proto.CompactTextString(m) }
func (*TagReq) ProtoMessage()    {}
func (*TagReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_request_12773670aefe0f81, []int{0}
}
func (m *TagReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TagReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TagReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *TagReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TagReq.Merge(dst, src)
}
func (m *TagReq) XXX_Size() int {
	return m.Size()
}
func (m *TagReq) XXX_DiscardUnknown() {
	xxx_messageInfo_TagReq.DiscardUnknown(m)
}

var xxx_messageInfo_TagReq proto.InternalMessageInfo

func (m *TagReq) GetTid() int64 {
	if m != nil {
		return m.Tid
	}
	return 0
}

func (m *TagReq) GetMid() int64 {
	if m != nil {
		return m.Mid
	}
	return 0
}

type TagsReq struct {
	Tids                 []int64  `protobuf:"varint,1,rep,packed,name=tids" json:"tids,omitempty"`
	Mid                  int64    `protobuf:"varint,2,opt,name=mid,proto3" json:"mid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TagsReq) Reset()         { *m = TagsReq{} }
func (m *TagsReq) String() string { return proto.CompactTextString(m) }
func (*TagsReq) ProtoMessage()    {}
func (*TagsReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_request_12773670aefe0f81, []int{1}
}
func (m *TagsReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TagsReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TagsReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *TagsReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TagsReq.Merge(dst, src)
}
func (m *TagsReq) XXX_Size() int {
	return m.Size()
}
func (m *TagsReq) XXX_DiscardUnknown() {
	xxx_messageInfo_TagsReq.DiscardUnknown(m)
}

var xxx_messageInfo_TagsReq proto.InternalMessageInfo

func (m *TagsReq) GetTids() []int64 {
	if m != nil {
		return m.Tids
	}
	return nil
}

func (m *TagsReq) GetMid() int64 {
	if m != nil {
		return m.Mid
	}
	return 0
}

type TagByNameReq struct {
	Tname                string   `protobuf:"bytes,1,opt,name=tname,proto3" json:"tname,omitempty"`
	Mid                  int64    `protobuf:"varint,2,opt,name=mid,proto3" json:"mid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TagByNameReq) Reset()         { *m = TagByNameReq{} }
func (m *TagByNameReq) String() string { return proto.CompactTextString(m) }
func (*TagByNameReq) ProtoMessage()    {}
func (*TagByNameReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_request_12773670aefe0f81, []int{2}
}
func (m *TagByNameReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TagByNameReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TagByNameReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *TagByNameReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TagByNameReq.Merge(dst, src)
}
func (m *TagByNameReq) XXX_Size() int {
	return m.Size()
}
func (m *TagByNameReq) XXX_DiscardUnknown() {
	xxx_messageInfo_TagByNameReq.DiscardUnknown(m)
}

var xxx_messageInfo_TagByNameReq proto.InternalMessageInfo

func (m *TagByNameReq) GetTname() string {
	if m != nil {
		return m.Tname
	}
	return ""
}

func (m *TagByNameReq) GetMid() int64 {
	if m != nil {
		return m.Mid
	}
	return 0
}

type TagByNamesReq struct {
	Tnames               []string `protobuf:"bytes,1,rep,name=tnames" json:"tnames,omitempty"`
	Mid                  int64    `protobuf:"varint,2,opt,name=mid,proto3" json:"mid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TagByNamesReq) Reset()         { *m = TagByNamesReq{} }
func (m *TagByNamesReq) String() string { return proto.CompactTextString(m) }
func (*TagByNamesReq) ProtoMessage()    {}
func (*TagByNamesReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_request_12773670aefe0f81, []int{3}
}
func (m *TagByNamesReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TagByNamesReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TagByNamesReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *TagByNamesReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TagByNamesReq.Merge(dst, src)
}
func (m *TagByNamesReq) XXX_Size() int {
	return m.Size()
}
func (m *TagByNamesReq) XXX_DiscardUnknown() {
	xxx_messageInfo_TagByNamesReq.DiscardUnknown(m)
}

var xxx_messageInfo_TagByNamesReq proto.InternalMessageInfo

func (m *TagByNamesReq) GetTnames() []string {
	if m != nil {
		return m.Tnames
	}
	return nil
}

func (m *TagByNamesReq) GetMid() int64 {
	if m != nil {
		return m.Mid
	}
	return 0
}

type ChannelCategoryReq struct {
	From                 int32    `protobuf:"varint,1,opt,name=from,proto3" json:"from,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ChannelCategoryReq) Reset()         { *m = ChannelCategoryReq{} }
func (m *ChannelCategoryReq) String() string { return proto.CompactTextString(m) }
func (*ChannelCategoryReq) ProtoMessage()    {}
func (*ChannelCategoryReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_request_12773670aefe0f81, []int{4}
}
func (m *ChannelCategoryReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChannelCategoryReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChannelCategoryReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ChannelCategoryReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChannelCategoryReq.Merge(dst, src)
}
func (m *ChannelCategoryReq) XXX_Size() int {
	return m.Size()
}
func (m *ChannelCategoryReq) XXX_DiscardUnknown() {
	xxx_messageInfo_ChannelCategoryReq.DiscardUnknown(m)
}

var xxx_messageInfo_ChannelCategoryReq proto.InternalMessageInfo

func (m *ChannelCategoryReq) GetFrom() int32 {
	if m != nil {
		return m.From
	}
	return 0
}

type ChanneListReq struct {
	Id                   int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Mid                  int64    `protobuf:"varint,2,opt,name=mid,proto3" json:"mid,omitempty"`
	From                 int32    `protobuf:"varint,3,opt,name=from,proto3" json:"from,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ChanneListReq) Reset()         { *m = ChanneListReq{} }
func (m *ChanneListReq) String() string { return proto.CompactTextString(m) }
func (*ChanneListReq) ProtoMessage()    {}
func (*ChanneListReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_request_12773670aefe0f81, []int{5}
}
func (m *ChanneListReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChanneListReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChanneListReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ChanneListReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChanneListReq.Merge(dst, src)
}
func (m *ChanneListReq) XXX_Size() int {
	return m.Size()
}
func (m *ChanneListReq) XXX_DiscardUnknown() {
	xxx_messageInfo_ChanneListReq.DiscardUnknown(m)
}

var xxx_messageInfo_ChanneListReq proto.InternalMessageInfo

func (m *ChanneListReq) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *ChanneListReq) GetMid() int64 {
	if m != nil {
		return m.Mid
	}
	return 0
}

func (m *ChanneListReq) GetFrom() int32 {
	if m != nil {
		return m.From
	}
	return 0
}

type ChannelDiscoveryReq struct {
	Mid                  int64    `protobuf:"varint,1,opt,name=mid,proto3" json:"mid,omitempty"`
	From                 int32    `protobuf:"varint,2,opt,name=from,proto3" json:"from,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ChannelDiscoveryReq) Reset()         { *m = ChannelDiscoveryReq{} }
func (m *ChannelDiscoveryReq) String() string { return proto.CompactTextString(m) }
func (*ChannelDiscoveryReq) ProtoMessage()    {}
func (*ChannelDiscoveryReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_request_12773670aefe0f81, []int{6}
}
func (m *ChannelDiscoveryReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChannelDiscoveryReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChannelDiscoveryReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ChannelDiscoveryReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChannelDiscoveryReq.Merge(dst, src)
}
func (m *ChannelDiscoveryReq) XXX_Size() int {
	return m.Size()
}
func (m *ChannelDiscoveryReq) XXX_DiscardUnknown() {
	xxx_messageInfo_ChannelDiscoveryReq.DiscardUnknown(m)
}

var xxx_messageInfo_ChannelDiscoveryReq proto.InternalMessageInfo

func (m *ChannelDiscoveryReq) GetMid() int64 {
	if m != nil {
		return m.Mid
	}
	return 0
}

func (m *ChannelDiscoveryReq) GetFrom() int32 {
	if m != nil {
		return m.From
	}
	return 0
}

type ChannelRecommendReq struct {
	Mid                  int64    `protobuf:"varint,1,opt,name=mid,proto3" json:"mid,omitempty"`
	From                 int32    `protobuf:"varint,2,opt,name=from,proto3" json:"from,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ChannelRecommendReq) Reset()         { *m = ChannelRecommendReq{} }
func (m *ChannelRecommendReq) String() string { return proto.CompactTextString(m) }
func (*ChannelRecommendReq) ProtoMessage()    {}
func (*ChannelRecommendReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_request_12773670aefe0f81, []int{7}
}
func (m *ChannelRecommendReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChannelRecommendReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChannelRecommendReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ChannelRecommendReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChannelRecommendReq.Merge(dst, src)
}
func (m *ChannelRecommendReq) XXX_Size() int {
	return m.Size()
}
func (m *ChannelRecommendReq) XXX_DiscardUnknown() {
	xxx_messageInfo_ChannelRecommendReq.DiscardUnknown(m)
}

var xxx_messageInfo_ChannelRecommendReq proto.InternalMessageInfo

func (m *ChannelRecommendReq) GetMid() int64 {
	if m != nil {
		return m.Mid
	}
	return 0
}

func (m *ChannelRecommendReq) GetFrom() int32 {
	if m != nil {
		return m.From
	}
	return 0
}

type ChannelSquareReq struct {
	Mid                  int64    `protobuf:"varint,1,opt,name=mid,proto3" json:"mid,omitempty"`
	TagNumber            int32    `protobuf:"varint,2,opt,name=tag_number,json=tagNumber,proto3" json:"tag_number,omitempty"`
	ResourceNumber       int32    `protobuf:"varint,3,opt,name=resource_number,json=resourceNumber,proto3" json:"resource_number,omitempty"`
	Type                 int32    `protobuf:"varint,4,opt,name=type,proto3" json:"type,omitempty"`
	Buvid                string   `protobuf:"bytes,5,opt,name=buvid,proto3" json:"buvid,omitempty"`
	Build                int32    `protobuf:"varint,6,opt,name=build,proto3" json:"build,omitempty"`
	LoginEvent           int32    `protobuf:"varint,7,opt,name=login_event,json=loginEvent,proto3" json:"login_event,omitempty"`
	DisplayId            int32    `protobuf:"varint,8,opt,name=display_id,json=displayId,proto3" json:"display_id,omitempty"`
	Plat                 int32    `protobuf:"varint,9,opt,name=plat,proto3" json:"plat,omitempty"`
	From                 int32    `protobuf:"varint,10,opt,name=from,proto3" json:"from,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ChannelSquareReq) Reset()         { *m = ChannelSquareReq{} }
func (m *ChannelSquareReq) String() string { return proto.CompactTextString(m) }
func (*ChannelSquareReq) ProtoMessage()    {}
func (*ChannelSquareReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_request_12773670aefe0f81, []int{8}
}
func (m *ChannelSquareReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChannelSquareReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChannelSquareReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ChannelSquareReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChannelSquareReq.Merge(dst, src)
}
func (m *ChannelSquareReq) XXX_Size() int {
	return m.Size()
}
func (m *ChannelSquareReq) XXX_DiscardUnknown() {
	xxx_messageInfo_ChannelSquareReq.DiscardUnknown(m)
}

var xxx_messageInfo_ChannelSquareReq proto.InternalMessageInfo

func (m *ChannelSquareReq) GetMid() int64 {
	if m != nil {
		return m.Mid
	}
	return 0
}

func (m *ChannelSquareReq) GetTagNumber() int32 {
	if m != nil {
		return m.TagNumber
	}
	return 0
}

func (m *ChannelSquareReq) GetResourceNumber() int32 {
	if m != nil {
		return m.ResourceNumber
	}
	return 0
}

func (m *ChannelSquareReq) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *ChannelSquareReq) GetBuvid() string {
	if m != nil {
		return m.Buvid
	}
	return ""
}

func (m *ChannelSquareReq) GetBuild() int32 {
	if m != nil {
		return m.Build
	}
	return 0
}

func (m *ChannelSquareReq) GetLoginEvent() int32 {
	if m != nil {
		return m.LoginEvent
	}
	return 0
}

func (m *ChannelSquareReq) GetDisplayId() int32 {
	if m != nil {
		return m.DisplayId
	}
	return 0
}

func (m *ChannelSquareReq) GetPlat() int32 {
	if m != nil {
		return m.Plat
	}
	return 0
}

func (m *ChannelSquareReq) GetFrom() int32 {
	if m != nil {
		return m.From
	}
	return 0
}

type ChannelResourcesReq struct {
	Tid                  int64    `protobuf:"varint,1,opt,name=tid,proto3" json:"tid,omitempty"`
	Tname                string   `protobuf:"bytes,2,opt,name=tname,proto3" json:"tname,omitempty"`
	Mid                  int64    `protobuf:"varint,3,opt,name=mid,proto3" json:"mid,omitempty"`
	Plat                 int32    `protobuf:"varint,4,opt,name=plat,proto3" json:"plat,omitempty"`
	LoginEvent           int32    `protobuf:"varint,5,opt,name=login_event,json=loginEvent,proto3" json:"login_event,omitempty"`
	RequestCnt           int32    `protobuf:"varint,6,opt,name=request_cnt,json=requestCnt,proto3" json:"request_cnt,omitempty"`
	DisplayId            int32    `protobuf:"varint,7,opt,name=display_id,json=displayId,proto3" json:"display_id,omitempty"`
	From                 int32    `protobuf:"varint,8,opt,name=from,proto3" json:"from,omitempty"`
	Type                 int32    `protobuf:"varint,9,opt,name=type,proto3" json:"type,omitempty"`
	Buvid                string   `protobuf:"bytes,10,opt,name=buvid,proto3" json:"buvid,omitempty"`
	Build                int32    `protobuf:"varint,11,opt,name=build,proto3" json:"build,omitempty"`
	Channel              int32    `protobuf:"varint,12,opt,name=channel,proto3" json:"channel,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ChannelResourcesReq) Reset()         { *m = ChannelResourcesReq{} }
func (m *ChannelResourcesReq) String() string { return proto.CompactTextString(m) }
func (*ChannelResourcesReq) ProtoMessage()    {}
func (*ChannelResourcesReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_request_12773670aefe0f81, []int{9}
}
func (m *ChannelResourcesReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChannelResourcesReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChannelResourcesReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ChannelResourcesReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChannelResourcesReq.Merge(dst, src)
}
func (m *ChannelResourcesReq) XXX_Size() int {
	return m.Size()
}
func (m *ChannelResourcesReq) XXX_DiscardUnknown() {
	xxx_messageInfo_ChannelResourcesReq.DiscardUnknown(m)
}

var xxx_messageInfo_ChannelResourcesReq proto.InternalMessageInfo

func (m *ChannelResourcesReq) GetTid() int64 {
	if m != nil {
		return m.Tid
	}
	return 0
}

func (m *ChannelResourcesReq) GetTname() string {
	if m != nil {
		return m.Tname
	}
	return ""
}

func (m *ChannelResourcesReq) GetMid() int64 {
	if m != nil {
		return m.Mid
	}
	return 0
}

func (m *ChannelResourcesReq) GetPlat() int32 {
	if m != nil {
		return m.Plat
	}
	return 0
}

func (m *ChannelResourcesReq) GetLoginEvent() int32 {
	if m != nil {
		return m.LoginEvent
	}
	return 0
}

func (m *ChannelResourcesReq) GetRequestCnt() int32 {
	if m != nil {
		return m.RequestCnt
	}
	return 0
}

func (m *ChannelResourcesReq) GetDisplayId() int32 {
	if m != nil {
		return m.DisplayId
	}
	return 0
}

func (m *ChannelResourcesReq) GetFrom() int32 {
	if m != nil {
		return m.From
	}
	return 0
}

func (m *ChannelResourcesReq) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *ChannelResourcesReq) GetBuvid() string {
	if m != nil {
		return m.Buvid
	}
	return ""
}

func (m *ChannelResourcesReq) GetBuild() int32 {
	if m != nil {
		return m.Build
	}
	return 0
}

func (m *ChannelResourcesReq) GetChannel() int32 {
	if m != nil {
		return m.Channel
	}
	return 0
}

type ChannelCheckBackReq struct {
	Oids                 []int64  `protobuf:"varint,1,rep,packed,name=oids" json:"oids,omitempty"`
	Type                 int32    `protobuf:"varint,2,opt,name=type,proto3" json:"type,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ChannelCheckBackReq) Reset()         { *m = ChannelCheckBackReq{} }
func (m *ChannelCheckBackReq) String() string { return proto.CompactTextString(m) }
func (*ChannelCheckBackReq) ProtoMessage()    {}
func (*ChannelCheckBackReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_request_12773670aefe0f81, []int{10}
}
func (m *ChannelCheckBackReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChannelCheckBackReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChannelCheckBackReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ChannelCheckBackReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChannelCheckBackReq.Merge(dst, src)
}
func (m *ChannelCheckBackReq) XXX_Size() int {
	return m.Size()
}
func (m *ChannelCheckBackReq) XXX_DiscardUnknown() {
	xxx_messageInfo_ChannelCheckBackReq.DiscardUnknown(m)
}

var xxx_messageInfo_ChannelCheckBackReq proto.InternalMessageInfo

func (m *ChannelCheckBackReq) GetOids() []int64 {
	if m != nil {
		return m.Oids
	}
	return nil
}

func (m *ChannelCheckBackReq) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

type ChannelReq struct {
	Mid                  int64    `protobuf:"varint,1,opt,name=mid,proto3" json:"mid,omitempty"`
	Tid                  int64    `protobuf:"varint,2,opt,name=tid,proto3" json:"tid,omitempty"`
	Tname                string   `protobuf:"bytes,3,opt,name=tname,proto3" json:"tname,omitempty"`
	From                 int32    `protobuf:"varint,4,opt,name=from,proto3" json:"from,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ChannelReq) Reset()         { *m = ChannelReq{} }
func (m *ChannelReq) String() string { return proto.CompactTextString(m) }
func (*ChannelReq) ProtoMessage()    {}
func (*ChannelReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_request_12773670aefe0f81, []int{11}
}
func (m *ChannelReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChannelReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChannelReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ChannelReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChannelReq.Merge(dst, src)
}
func (m *ChannelReq) XXX_Size() int {
	return m.Size()
}
func (m *ChannelReq) XXX_DiscardUnknown() {
	xxx_messageInfo_ChannelReq.DiscardUnknown(m)
}

var xxx_messageInfo_ChannelReq proto.InternalMessageInfo

func (m *ChannelReq) GetMid() int64 {
	if m != nil {
		return m.Mid
	}
	return 0
}

func (m *ChannelReq) GetTid() int64 {
	if m != nil {
		return m.Tid
	}
	return 0
}

func (m *ChannelReq) GetTname() string {
	if m != nil {
		return m.Tname
	}
	return ""
}

func (m *ChannelReq) GetFrom() int32 {
	if m != nil {
		return m.From
	}
	return 0
}

func init() {
	proto.RegisterType((*TagReq)(nil), "main.community.tag.v1.TagReq")
	proto.RegisterType((*TagsReq)(nil), "main.community.tag.v1.TagsReq")
	proto.RegisterType((*TagByNameReq)(nil), "main.community.tag.v1.TagByNameReq")
	proto.RegisterType((*TagByNamesReq)(nil), "main.community.tag.v1.TagByNamesReq")
	proto.RegisterType((*ChannelCategoryReq)(nil), "main.community.tag.v1.ChannelCategoryReq")
	proto.RegisterType((*ChanneListReq)(nil), "main.community.tag.v1.ChanneListReq")
	proto.RegisterType((*ChannelDiscoveryReq)(nil), "main.community.tag.v1.ChannelDiscoveryReq")
	proto.RegisterType((*ChannelRecommendReq)(nil), "main.community.tag.v1.ChannelRecommendReq")
	proto.RegisterType((*ChannelSquareReq)(nil), "main.community.tag.v1.ChannelSquareReq")
	proto.RegisterType((*ChannelResourcesReq)(nil), "main.community.tag.v1.ChannelResourcesReq")
	proto.RegisterType((*ChannelCheckBackReq)(nil), "main.community.tag.v1.ChannelCheckBackReq")
	proto.RegisterType((*ChannelReq)(nil), "main.community.tag.v1.ChannelReq")
}
func (m *TagReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TagReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Tid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintRequest(dAtA, i, uint64(m.Tid))
	}
	if m.Mid != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintRequest(dAtA, i, uint64(m.Mid))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *TagsReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TagsReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Tids) > 0 {
		dAtA2 := make([]byte, len(m.Tids)*10)
		var j1 int
		for _, num1 := range m.Tids {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		dAtA[i] = 0xa
		i++
		i = encodeVarintRequest(dAtA, i, uint64(j1))
		i += copy(dAtA[i:], dAtA2[:j1])
	}
	if m.Mid != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintRequest(dAtA, i, uint64(m.Mid))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *TagByNameReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TagByNameReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Tname) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintRequest(dAtA, i, uint64(len(m.Tname)))
		i += copy(dAtA[i:], m.Tname)
	}
	if m.Mid != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintRequest(dAtA, i, uint64(m.Mid))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *TagByNamesReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TagByNamesReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Tnames) > 0 {
		for _, s := range m.Tnames {
			dAtA[i] = 0xa
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if m.Mid != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintRequest(dAtA, i, uint64(m.Mid))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ChannelCategoryReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChannelCategoryReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.From != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintRequest(dAtA, i, uint64(m.From))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ChanneListReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChanneListReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintRequest(dAtA, i, uint64(m.Id))
	}
	if m.Mid != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintRequest(dAtA, i, uint64(m.Mid))
	}
	if m.From != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintRequest(dAtA, i, uint64(m.From))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ChannelDiscoveryReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChannelDiscoveryReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Mid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintRequest(dAtA, i, uint64(m.Mid))
	}
	if m.From != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintRequest(dAtA, i, uint64(m.From))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ChannelRecommendReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChannelRecommendReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Mid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintRequest(dAtA, i, uint64(m.Mid))
	}
	if m.From != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintRequest(dAtA, i, uint64(m.From))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ChannelSquareReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChannelSquareReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Mid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintRequest(dAtA, i, uint64(m.Mid))
	}
	if m.TagNumber != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintRequest(dAtA, i, uint64(m.TagNumber))
	}
	if m.ResourceNumber != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintRequest(dAtA, i, uint64(m.ResourceNumber))
	}
	if m.Type != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintRequest(dAtA, i, uint64(m.Type))
	}
	if len(m.Buvid) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintRequest(dAtA, i, uint64(len(m.Buvid)))
		i += copy(dAtA[i:], m.Buvid)
	}
	if m.Build != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintRequest(dAtA, i, uint64(m.Build))
	}
	if m.LoginEvent != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintRequest(dAtA, i, uint64(m.LoginEvent))
	}
	if m.DisplayId != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintRequest(dAtA, i, uint64(m.DisplayId))
	}
	if m.Plat != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintRequest(dAtA, i, uint64(m.Plat))
	}
	if m.From != 0 {
		dAtA[i] = 0x50
		i++
		i = encodeVarintRequest(dAtA, i, uint64(m.From))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ChannelResourcesReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChannelResourcesReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Tid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintRequest(dAtA, i, uint64(m.Tid))
	}
	if len(m.Tname) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintRequest(dAtA, i, uint64(len(m.Tname)))
		i += copy(dAtA[i:], m.Tname)
	}
	if m.Mid != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintRequest(dAtA, i, uint64(m.Mid))
	}
	if m.Plat != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintRequest(dAtA, i, uint64(m.Plat))
	}
	if m.LoginEvent != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintRequest(dAtA, i, uint64(m.LoginEvent))
	}
	if m.RequestCnt != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintRequest(dAtA, i, uint64(m.RequestCnt))
	}
	if m.DisplayId != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintRequest(dAtA, i, uint64(m.DisplayId))
	}
	if m.From != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintRequest(dAtA, i, uint64(m.From))
	}
	if m.Type != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintRequest(dAtA, i, uint64(m.Type))
	}
	if len(m.Buvid) > 0 {
		dAtA[i] = 0x52
		i++
		i = encodeVarintRequest(dAtA, i, uint64(len(m.Buvid)))
		i += copy(dAtA[i:], m.Buvid)
	}
	if m.Build != 0 {
		dAtA[i] = 0x58
		i++
		i = encodeVarintRequest(dAtA, i, uint64(m.Build))
	}
	if m.Channel != 0 {
		dAtA[i] = 0x60
		i++
		i = encodeVarintRequest(dAtA, i, uint64(m.Channel))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ChannelCheckBackReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChannelCheckBackReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Oids) > 0 {
		dAtA4 := make([]byte, len(m.Oids)*10)
		var j3 int
		for _, num1 := range m.Oids {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA4[j3] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j3++
			}
			dAtA4[j3] = uint8(num)
			j3++
		}
		dAtA[i] = 0xa
		i++
		i = encodeVarintRequest(dAtA, i, uint64(j3))
		i += copy(dAtA[i:], dAtA4[:j3])
	}
	if m.Type != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintRequest(dAtA, i, uint64(m.Type))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ChannelReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChannelReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Mid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintRequest(dAtA, i, uint64(m.Mid))
	}
	if m.Tid != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintRequest(dAtA, i, uint64(m.Tid))
	}
	if len(m.Tname) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintRequest(dAtA, i, uint64(len(m.Tname)))
		i += copy(dAtA[i:], m.Tname)
	}
	if m.From != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintRequest(dAtA, i, uint64(m.From))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintRequest(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *TagReq) Size() (n int) {
	var l int
	_ = l
	if m.Tid != 0 {
		n += 1 + sovRequest(uint64(m.Tid))
	}
	if m.Mid != 0 {
		n += 1 + sovRequest(uint64(m.Mid))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TagsReq) Size() (n int) {
	var l int
	_ = l
	if len(m.Tids) > 0 {
		l = 0
		for _, e := range m.Tids {
			l += sovRequest(uint64(e))
		}
		n += 1 + sovRequest(uint64(l)) + l
	}
	if m.Mid != 0 {
		n += 1 + sovRequest(uint64(m.Mid))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TagByNameReq) Size() (n int) {
	var l int
	_ = l
	l = len(m.Tname)
	if l > 0 {
		n += 1 + l + sovRequest(uint64(l))
	}
	if m.Mid != 0 {
		n += 1 + sovRequest(uint64(m.Mid))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TagByNamesReq) Size() (n int) {
	var l int
	_ = l
	if len(m.Tnames) > 0 {
		for _, s := range m.Tnames {
			l = len(s)
			n += 1 + l + sovRequest(uint64(l))
		}
	}
	if m.Mid != 0 {
		n += 1 + sovRequest(uint64(m.Mid))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ChannelCategoryReq) Size() (n int) {
	var l int
	_ = l
	if m.From != 0 {
		n += 1 + sovRequest(uint64(m.From))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ChanneListReq) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovRequest(uint64(m.Id))
	}
	if m.Mid != 0 {
		n += 1 + sovRequest(uint64(m.Mid))
	}
	if m.From != 0 {
		n += 1 + sovRequest(uint64(m.From))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ChannelDiscoveryReq) Size() (n int) {
	var l int
	_ = l
	if m.Mid != 0 {
		n += 1 + sovRequest(uint64(m.Mid))
	}
	if m.From != 0 {
		n += 1 + sovRequest(uint64(m.From))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ChannelRecommendReq) Size() (n int) {
	var l int
	_ = l
	if m.Mid != 0 {
		n += 1 + sovRequest(uint64(m.Mid))
	}
	if m.From != 0 {
		n += 1 + sovRequest(uint64(m.From))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ChannelSquareReq) Size() (n int) {
	var l int
	_ = l
	if m.Mid != 0 {
		n += 1 + sovRequest(uint64(m.Mid))
	}
	if m.TagNumber != 0 {
		n += 1 + sovRequest(uint64(m.TagNumber))
	}
	if m.ResourceNumber != 0 {
		n += 1 + sovRequest(uint64(m.ResourceNumber))
	}
	if m.Type != 0 {
		n += 1 + sovRequest(uint64(m.Type))
	}
	l = len(m.Buvid)
	if l > 0 {
		n += 1 + l + sovRequest(uint64(l))
	}
	if m.Build != 0 {
		n += 1 + sovRequest(uint64(m.Build))
	}
	if m.LoginEvent != 0 {
		n += 1 + sovRequest(uint64(m.LoginEvent))
	}
	if m.DisplayId != 0 {
		n += 1 + sovRequest(uint64(m.DisplayId))
	}
	if m.Plat != 0 {
		n += 1 + sovRequest(uint64(m.Plat))
	}
	if m.From != 0 {
		n += 1 + sovRequest(uint64(m.From))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ChannelResourcesReq) Size() (n int) {
	var l int
	_ = l
	if m.Tid != 0 {
		n += 1 + sovRequest(uint64(m.Tid))
	}
	l = len(m.Tname)
	if l > 0 {
		n += 1 + l + sovRequest(uint64(l))
	}
	if m.Mid != 0 {
		n += 1 + sovRequest(uint64(m.Mid))
	}
	if m.Plat != 0 {
		n += 1 + sovRequest(uint64(m.Plat))
	}
	if m.LoginEvent != 0 {
		n += 1 + sovRequest(uint64(m.LoginEvent))
	}
	if m.RequestCnt != 0 {
		n += 1 + sovRequest(uint64(m.RequestCnt))
	}
	if m.DisplayId != 0 {
		n += 1 + sovRequest(uint64(m.DisplayId))
	}
	if m.From != 0 {
		n += 1 + sovRequest(uint64(m.From))
	}
	if m.Type != 0 {
		n += 1 + sovRequest(uint64(m.Type))
	}
	l = len(m.Buvid)
	if l > 0 {
		n += 1 + l + sovRequest(uint64(l))
	}
	if m.Build != 0 {
		n += 1 + sovRequest(uint64(m.Build))
	}
	if m.Channel != 0 {
		n += 1 + sovRequest(uint64(m.Channel))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ChannelCheckBackReq) Size() (n int) {
	var l int
	_ = l
	if len(m.Oids) > 0 {
		l = 0
		for _, e := range m.Oids {
			l += sovRequest(uint64(e))
		}
		n += 1 + sovRequest(uint64(l)) + l
	}
	if m.Type != 0 {
		n += 1 + sovRequest(uint64(m.Type))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ChannelReq) Size() (n int) {
	var l int
	_ = l
	if m.Mid != 0 {
		n += 1 + sovRequest(uint64(m.Mid))
	}
	if m.Tid != 0 {
		n += 1 + sovRequest(uint64(m.Tid))
	}
	l = len(m.Tname)
	if l > 0 {
		n += 1 + l + sovRequest(uint64(l))
	}
	if m.From != 0 {
		n += 1 + sovRequest(uint64(m.From))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovRequest(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozRequest(x uint64) (n int) {
	return sovRequest(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *TagReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRequest
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TagReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TagReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tid", wireType)
			}
			m.Tid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Tid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRequest(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRequest
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TagsReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRequest
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TagsReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TagsReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowRequest
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Tids = append(m.Tids, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowRequest
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthRequest
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowRequest
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Tids = append(m.Tids, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Tids", wireType)
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRequest(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRequest
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TagByNameReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRequest
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TagByNameReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TagByNameReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tname", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRequest
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tname = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRequest(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRequest
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TagByNamesReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRequest
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TagByNamesReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TagByNamesReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tnames", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRequest
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tnames = append(m.Tnames, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRequest(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRequest
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChannelCategoryReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRequest
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChannelCategoryReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChannelCategoryReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			m.From = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.From |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRequest(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRequest
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChanneListReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRequest
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChanneListReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChanneListReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			m.From = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.From |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRequest(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRequest
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChannelDiscoveryReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRequest
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChannelDiscoveryReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChannelDiscoveryReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			m.From = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.From |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRequest(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRequest
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChannelRecommendReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRequest
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChannelRecommendReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChannelRecommendReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			m.From = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.From |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRequest(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRequest
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChannelSquareReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRequest
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChannelSquareReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChannelSquareReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TagNumber", wireType)
			}
			m.TagNumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TagNumber |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResourceNumber", wireType)
			}
			m.ResourceNumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ResourceNumber |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Buvid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRequest
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Buvid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Build", wireType)
			}
			m.Build = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Build |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LoginEvent", wireType)
			}
			m.LoginEvent = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LoginEvent |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisplayId", wireType)
			}
			m.DisplayId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DisplayId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Plat", wireType)
			}
			m.Plat = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Plat |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			m.From = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.From |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRequest(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRequest
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChannelResourcesReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRequest
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChannelResourcesReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChannelResourcesReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tid", wireType)
			}
			m.Tid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Tid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tname", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRequest
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tname = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Plat", wireType)
			}
			m.Plat = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Plat |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LoginEvent", wireType)
			}
			m.LoginEvent = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LoginEvent |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestCnt", wireType)
			}
			m.RequestCnt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RequestCnt |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisplayId", wireType)
			}
			m.DisplayId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DisplayId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			m.From = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.From |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Buvid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRequest
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Buvid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Build", wireType)
			}
			m.Build = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Build |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Channel", wireType)
			}
			m.Channel = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Channel |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRequest(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRequest
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChannelCheckBackReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRequest
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChannelCheckBackReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChannelCheckBackReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowRequest
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Oids = append(m.Oids, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowRequest
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthRequest
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowRequest
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Oids = append(m.Oids, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Oids", wireType)
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRequest(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRequest
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChannelReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRequest
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChannelReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChannelReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tid", wireType)
			}
			m.Tid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Tid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tname", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRequest
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tname = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			m.From = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.From |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRequest(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRequest
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipRequest(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowRequest
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRequest
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRequest
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthRequest
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowRequest
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipRequest(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthRequest = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowRequest   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("app/interface/main/tag/api/request.proto", fileDescriptor_request_12773670aefe0f81)
}

var fileDescriptor_request_12773670aefe0f81 = []byte{
	// 579 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x54, 0xcb, 0x8e, 0xd3, 0x30,
	0x14, 0x55, 0x92, 0x3e, 0xa6, 0x77, 0x1e, 0x54, 0xe1, 0x21, 0x0b, 0x89, 0xce, 0xa8, 0x1b, 0xba,
	0x80, 0x46, 0x23, 0x24, 0x24, 0x84, 0xd8, 0xb4, 0xcc, 0x02, 0x09, 0xcd, 0x22, 0x74, 0x35, 0x9b,
	0xca, 0x4d, 0x5c, 0xd7, 0x9a, 0xc6, 0x4e, 0x13, 0xa7, 0x52, 0xff, 0x83, 0x2f, 0xe1, 0x2b, 0x58,
	0xf2, 0x09, 0xa8, 0x5f, 0x82, 0xfc, 0x68, 0x1a, 0xa8, 0x17, 0xec, 0xee, 0x3d, 0xb9, 0xc7, 0xf7,
	0x9e, 0x73, 0xed, 0xc0, 0x08, 0xe7, 0x79, 0xc4, 0xb8, 0x24, 0xc5, 0x12, 0x27, 0x24, 0xca, 0x30,
	0xe3, 0x91, 0xc4, 0x34, 0xc2, 0x39, 0x8b, 0x0a, 0xb2, 0xa9, 0x48, 0x29, 0xc7, 0x79, 0x21, 0xa4,
	0x08, 0x9f, 0xab, 0x6f, 0xe3, 0x44, 0x64, 0x59, 0xc5, 0x99, 0xdc, 0x8d, 0x25, 0xa6, 0xe3, 0xed,
	0xed, 0xcb, 0xb7, 0x94, 0xc9, 0x55, 0xb5, 0x50, 0x1f, 0x22, 0x2a, 0xa8, 0x88, 0x74, 0xf5, 0xa2,
	0x5a, 0xea, 0x4c, 0x27, 0x3a, 0x32, 0xa7, 0x0c, 0xdf, 0x40, 0x67, 0x86, 0x69, 0x4c, 0x36, 0x61,
	0x1f, 0x02, 0xc9, 0x52, 0xe4, 0xdd, 0x78, 0xa3, 0x20, 0x56, 0xa1, 0x42, 0x32, 0x96, 0x22, 0xdf,
	0x20, 0x19, 0x4b, 0x87, 0x11, 0x74, 0x67, 0x98, 0x96, 0xaa, 0x3c, 0x84, 0x96, 0x64, 0x69, 0x89,
	0xbc, 0x9b, 0x60, 0x14, 0xc4, 0x3a, 0x76, 0x10, 0xde, 0xc3, 0xc5, 0x0c, 0xd3, 0xc9, 0xee, 0x1e,
	0x67, 0x44, 0xb1, 0x9e, 0x41, 0x5b, 0x72, 0x9c, 0x11, 0xdd, 0xa6, 0x17, 0x9b, 0xc4, 0xc1, 0xfb,
	0x00, 0x97, 0x35, 0x4f, 0xb7, 0x7b, 0x01, 0x1d, 0x5d, 0x6b, 0x1a, 0xf6, 0x62, 0x9b, 0x39, 0xa8,
	0x23, 0x08, 0xa7, 0x2b, 0xcc, 0x39, 0x59, 0x4f, 0xb1, 0x24, 0x54, 0x14, 0x3b, 0x3b, 0xee, 0xb2,
	0x10, 0x99, 0xee, 0xdb, 0x8e, 0x75, 0x3c, 0xbc, 0x83, 0x4b, 0x53, 0xf9, 0x95, 0x95, 0x52, 0x15,
	0x5d, 0x81, 0x5f, 0x3b, 0xe0, 0xbb, 0x0c, 0xa8, 0x8f, 0x09, 0x1a, 0xc7, 0x7c, 0x84, 0xa7, 0xb6,
	0xe1, 0x67, 0x56, 0x26, 0x62, 0x4b, 0x4c, 0x47, 0x4b, 0xf6, 0x4e, 0xc9, 0xbe, 0x93, 0x1c, 0x13,
	0xb5, 0x4b, 0xc2, 0xd3, 0xff, 0x27, 0x7f, 0xf7, 0xa1, 0x6f, 0xd9, 0xdf, 0x36, 0x15, 0x2e, 0x88,
	0x9b, 0xfa, 0x0a, 0x40, 0x62, 0x3a, 0xe7, 0x55, 0xb6, 0x20, 0x85, 0x3d, 0xa0, 0x27, 0x31, 0xbd,
	0xd7, 0x40, 0xf8, 0x1a, 0x9e, 0x14, 0xa4, 0x14, 0x55, 0x91, 0x90, 0x43, 0x8d, 0x91, 0x77, 0x75,
	0x80, 0x6d, 0xa1, 0x5a, 0xf9, 0x2e, 0x27, 0xa8, 0x65, 0x46, 0x50, 0xb1, 0x5a, 0xe8, 0xa2, 0xda,
	0xb2, 0x14, 0xb5, 0xcd, 0x42, 0x75, 0x62, 0x50, 0xb6, 0x4e, 0x51, 0x47, 0x97, 0x9a, 0x24, 0xbc,
	0x86, 0xf3, 0xb5, 0xa0, 0x8c, 0xcf, 0xc9, 0x96, 0x70, 0x89, 0xba, 0xfa, 0x1b, 0x68, 0xe8, 0x4e,
	0x21, 0x6a, 0xd0, 0x94, 0x95, 0xf9, 0x1a, 0xef, 0xe6, 0x2c, 0x45, 0x67, 0x66, 0x50, 0x8b, 0x7c,
	0xd1, 0x16, 0xe4, 0x6b, 0x2c, 0x51, 0xcf, 0xf4, 0x57, 0x71, 0x6d, 0x0b, 0x34, 0x6c, 0xf9, 0xe1,
	0x37, 0x4c, 0x35, 0x0a, 0x4a, 0xf7, 0x0d, 0xaf, 0xaf, 0xa3, 0xef, 0xb8, 0x8e, 0xc1, 0x5f, 0xe6,
	0xeb, 0xce, 0xad, 0x46, 0xe7, 0x7f, 0xd4, 0xb4, 0x4f, 0xd4, 0x5c, 0xc3, 0xb9, 0x7d, 0xb1, 0xf3,
	0x84, 0x4b, 0x6b, 0x05, 0x58, 0x68, 0x7a, 0x22, 0xb7, 0xeb, 0x90, 0xab, 0xa5, 0x9d, 0x1d, 0xa5,
	0xd5, 0x2b, 0xe8, 0xb9, 0x56, 0x00, 0xce, 0x15, 0x9c, 0x37, 0x57, 0x80, 0xa0, 0x9b, 0x18, 0x67,
	0xd0, 0x85, 0xc6, 0x0f, 0xe9, 0xf0, 0x53, 0xed, 0xd9, 0x74, 0x45, 0x92, 0xc7, 0x09, 0x4e, 0x1e,
	0xed, 0xbb, 0x11, 0x8d, 0x67, 0xae, 0xe2, 0x7a, 0x08, 0xff, 0x38, 0xc4, 0xf0, 0x01, 0xa0, 0xb6,
	0xdc, 0x75, 0x07, 0xad, 0xf7, 0xbe, 0xc3, 0xfb, 0xa0, 0xe9, 0xfd, 0x41, 0x74, 0xeb, 0x28, 0x7a,
	0xd2, 0xff, 0xb9, 0x1f, 0x78, 0xbf, 0xf6, 0x03, 0xef, 0xf7, 0x7e, 0xe0, 0x3d, 0xf8, 0xdb, 0xdb,
	0x45, 0x47, 0xff, 0xbc, 0xde, 0xfd, 0x09, 0x00, 0x00, 0xff, 0xff, 0xd8, 0x22, 0xce, 0xe8, 0x2e,
	0x05, 0x00, 0x00,
}
