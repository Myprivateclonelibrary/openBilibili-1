// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: app/interface/main/tag/api/reply.proto

package v1

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type TagReply struct {
	Tag                  *Tag     `protobuf:"bytes,1,opt,name=tag" json:"tag,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TagReply) Reset()         { *m = TagReply{} }
func (m *TagReply) String() string { return proto.CompactTextString(m) }
func (*TagReply) ProtoMessage()    {}
func (*TagReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_reply_75fee4bf31b05f39, []int{0}
}
func (m *TagReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TagReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TagReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *TagReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TagReply.Merge(dst, src)
}
func (m *TagReply) XXX_Size() int {
	return m.Size()
}
func (m *TagReply) XXX_DiscardUnknown() {
	xxx_messageInfo_TagReply.DiscardUnknown(m)
}

var xxx_messageInfo_TagReply proto.InternalMessageInfo

func (m *TagReply) GetTag() *Tag {
	if m != nil {
		return m.Tag
	}
	return nil
}

type TagsReply struct {
	Tags                 map[int64]*Tag `protobuf:"bytes,1,rep,name=tags" json:"tags,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *TagsReply) Reset()         { *m = TagsReply{} }
func (m *TagsReply) String() string { return proto.CompactTextString(m) }
func (*TagsReply) ProtoMessage()    {}
func (*TagsReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_reply_75fee4bf31b05f39, []int{1}
}
func (m *TagsReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TagsReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TagsReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *TagsReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TagsReply.Merge(dst, src)
}
func (m *TagsReply) XXX_Size() int {
	return m.Size()
}
func (m *TagsReply) XXX_DiscardUnknown() {
	xxx_messageInfo_TagsReply.DiscardUnknown(m)
}

var xxx_messageInfo_TagsReply proto.InternalMessageInfo

func (m *TagsReply) GetTags() map[int64]*Tag {
	if m != nil {
		return m.Tags
	}
	return nil
}

type ChannelCategoryReply struct {
	Categories           []*ChannelCategory `protobuf:"bytes,1,rep,name=categories" json:"categories,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *ChannelCategoryReply) Reset()         { *m = ChannelCategoryReply{} }
func (m *ChannelCategoryReply) String() string { return proto.CompactTextString(m) }
func (*ChannelCategoryReply) ProtoMessage()    {}
func (*ChannelCategoryReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_reply_75fee4bf31b05f39, []int{2}
}
func (m *ChannelCategoryReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChannelCategoryReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChannelCategoryReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ChannelCategoryReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChannelCategoryReply.Merge(dst, src)
}
func (m *ChannelCategoryReply) XXX_Size() int {
	return m.Size()
}
func (m *ChannelCategoryReply) XXX_DiscardUnknown() {
	xxx_messageInfo_ChannelCategoryReply.DiscardUnknown(m)
}

var xxx_messageInfo_ChannelCategoryReply proto.InternalMessageInfo

func (m *ChannelCategoryReply) GetCategories() []*ChannelCategory {
	if m != nil {
		return m.Categories
	}
	return nil
}

type ChannelsReply struct {
	Channels             []*Channel `protobuf:"bytes,1,rep,name=channels" json:"channels,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *ChannelsReply) Reset()         { *m = ChannelsReply{} }
func (m *ChannelsReply) String() string { return proto.CompactTextString(m) }
func (*ChannelsReply) ProtoMessage()    {}
func (*ChannelsReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_reply_75fee4bf31b05f39, []int{3}
}
func (m *ChannelsReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChannelsReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChannelsReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ChannelsReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChannelsReply.Merge(dst, src)
}
func (m *ChannelsReply) XXX_Size() int {
	return m.Size()
}
func (m *ChannelsReply) XXX_DiscardUnknown() {
	xxx_messageInfo_ChannelsReply.DiscardUnknown(m)
}

var xxx_messageInfo_ChannelsReply proto.InternalMessageInfo

func (m *ChannelsReply) GetChannels() []*Channel {
	if m != nil {
		return m.Channels
	}
	return nil
}

type ChannelResourcesReply struct {
	Oids                 []int64  `protobuf:"varint,1,rep,packed,name=oids" json:"oids,omitempty"`
	Failover             bool     `protobuf:"varint,2,opt,name=failover,proto3" json:"failover,omitempty"`
	WhetherChannel       bool     `protobuf:"varint,3,opt,name=whether_channel,json=whetherChannel,proto3" json:"whether_channel,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ChannelResourcesReply) Reset()         { *m = ChannelResourcesReply{} }
func (m *ChannelResourcesReply) String() string { return proto.CompactTextString(m) }
func (*ChannelResourcesReply) ProtoMessage()    {}
func (*ChannelResourcesReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_reply_75fee4bf31b05f39, []int{4}
}
func (m *ChannelResourcesReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChannelResourcesReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChannelResourcesReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ChannelResourcesReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChannelResourcesReply.Merge(dst, src)
}
func (m *ChannelResourcesReply) XXX_Size() int {
	return m.Size()
}
func (m *ChannelResourcesReply) XXX_DiscardUnknown() {
	xxx_messageInfo_ChannelResourcesReply.DiscardUnknown(m)
}

var xxx_messageInfo_ChannelResourcesReply proto.InternalMessageInfo

func (m *ChannelResourcesReply) GetOids() []int64 {
	if m != nil {
		return m.Oids
	}
	return nil
}

func (m *ChannelResourcesReply) GetFailover() bool {
	if m != nil {
		return m.Failover
	}
	return false
}

func (m *ChannelResourcesReply) GetWhetherChannel() bool {
	if m != nil {
		return m.WhetherChannel
	}
	return false
}

type ChannelSquareReply struct {
	Squares              []*ChannelSquare `protobuf:"bytes,1,rep,name=squares" json:"squares,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *ChannelSquareReply) Reset()         { *m = ChannelSquareReply{} }
func (m *ChannelSquareReply) String() string { return proto.CompactTextString(m) }
func (*ChannelSquareReply) ProtoMessage()    {}
func (*ChannelSquareReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_reply_75fee4bf31b05f39, []int{5}
}
func (m *ChannelSquareReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChannelSquareReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChannelSquareReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ChannelSquareReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChannelSquareReply.Merge(dst, src)
}
func (m *ChannelSquareReply) XXX_Size() int {
	return m.Size()
}
func (m *ChannelSquareReply) XXX_DiscardUnknown() {
	xxx_messageInfo_ChannelSquareReply.DiscardUnknown(m)
}

var xxx_messageInfo_ChannelSquareReply proto.InternalMessageInfo

func (m *ChannelSquareReply) GetSquares() []*ChannelSquare {
	if m != nil {
		return m.Squares
	}
	return nil
}

type ChannelCheckBackReply struct {
	Checkbacks           map[int64]*ChannelCheckBack `protobuf:"bytes,1,rep,name=checkbacks" json:"checkbacks,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_unrecognized     []byte                      `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *ChannelCheckBackReply) Reset()         { *m = ChannelCheckBackReply{} }
func (m *ChannelCheckBackReply) String() string { return proto.CompactTextString(m) }
func (*ChannelCheckBackReply) ProtoMessage()    {}
func (*ChannelCheckBackReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_reply_75fee4bf31b05f39, []int{6}
}
func (m *ChannelCheckBackReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChannelCheckBackReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChannelCheckBackReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ChannelCheckBackReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChannelCheckBackReply.Merge(dst, src)
}
func (m *ChannelCheckBackReply) XXX_Size() int {
	return m.Size()
}
func (m *ChannelCheckBackReply) XXX_DiscardUnknown() {
	xxx_messageInfo_ChannelCheckBackReply.DiscardUnknown(m)
}

var xxx_messageInfo_ChannelCheckBackReply proto.InternalMessageInfo

func (m *ChannelCheckBackReply) GetCheckbacks() map[int64]*ChannelCheckBack {
	if m != nil {
		return m.Checkbacks
	}
	return nil
}

type ChannelReply struct {
	Channel              *Channel          `protobuf:"bytes,1,opt,name=channel" json:"channel,omitempty"`
	Synonyms             []*ChannelSynonym `protobuf:"bytes,2,rep,name=synonyms" json:"synonyms,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *ChannelReply) Reset()         { *m = ChannelReply{} }
func (m *ChannelReply) String() string { return proto.CompactTextString(m) }
func (*ChannelReply) ProtoMessage()    {}
func (*ChannelReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_reply_75fee4bf31b05f39, []int{7}
}
func (m *ChannelReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChannelReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChannelReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ChannelReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChannelReply.Merge(dst, src)
}
func (m *ChannelReply) XXX_Size() int {
	return m.Size()
}
func (m *ChannelReply) XXX_DiscardUnknown() {
	xxx_messageInfo_ChannelReply.DiscardUnknown(m)
}

var xxx_messageInfo_ChannelReply proto.InternalMessageInfo

func (m *ChannelReply) GetChannel() *Channel {
	if m != nil {
		return m.Channel
	}
	return nil
}

func (m *ChannelReply) GetSynonyms() []*ChannelSynonym {
	if m != nil {
		return m.Synonyms
	}
	return nil
}

func init() {
	proto.RegisterType((*TagReply)(nil), "main.community.tag.v1.TagReply")
	proto.RegisterType((*TagsReply)(nil), "main.community.tag.v1.TagsReply")
	proto.RegisterMapType((map[int64]*Tag)(nil), "main.community.tag.v1.TagsReply.TagsEntry")
	proto.RegisterType((*ChannelCategoryReply)(nil), "main.community.tag.v1.ChannelCategoryReply")
	proto.RegisterType((*ChannelsReply)(nil), "main.community.tag.v1.ChannelsReply")
	proto.RegisterType((*ChannelResourcesReply)(nil), "main.community.tag.v1.ChannelResourcesReply")
	proto.RegisterType((*ChannelSquareReply)(nil), "main.community.tag.v1.ChannelSquareReply")
	proto.RegisterType((*ChannelCheckBackReply)(nil), "main.community.tag.v1.ChannelCheckBackReply")
	proto.RegisterMapType((map[int64]*ChannelCheckBack)(nil), "main.community.tag.v1.ChannelCheckBackReply.CheckbacksEntry")
	proto.RegisterType((*ChannelReply)(nil), "main.community.tag.v1.ChannelReply")
}
func (m *TagReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TagReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Tag != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintReply(dAtA, i, uint64(m.Tag.Size()))
		n1, err := m.Tag.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *TagsReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TagsReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Tags) > 0 {
		for k, _ := range m.Tags {
			dAtA[i] = 0xa
			i++
			v := m.Tags[k]
			msgSize := 0
			if v != nil {
				msgSize = v.Size()
				msgSize += 1 + sovReply(uint64(msgSize))
			}
			mapSize := 1 + sovReply(uint64(k)) + msgSize
			i = encodeVarintReply(dAtA, i, uint64(mapSize))
			dAtA[i] = 0x8
			i++
			i = encodeVarintReply(dAtA, i, uint64(k))
			if v != nil {
				dAtA[i] = 0x12
				i++
				i = encodeVarintReply(dAtA, i, uint64(v.Size()))
				n2, err := v.MarshalTo(dAtA[i:])
				if err != nil {
					return 0, err
				}
				i += n2
			}
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ChannelCategoryReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChannelCategoryReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Categories) > 0 {
		for _, msg := range m.Categories {
			dAtA[i] = 0xa
			i++
			i = encodeVarintReply(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ChannelsReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChannelsReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Channels) > 0 {
		for _, msg := range m.Channels {
			dAtA[i] = 0xa
			i++
			i = encodeVarintReply(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ChannelResourcesReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChannelResourcesReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Oids) > 0 {
		dAtA4 := make([]byte, len(m.Oids)*10)
		var j3 int
		for _, num1 := range m.Oids {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA4[j3] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j3++
			}
			dAtA4[j3] = uint8(num)
			j3++
		}
		dAtA[i] = 0xa
		i++
		i = encodeVarintReply(dAtA, i, uint64(j3))
		i += copy(dAtA[i:], dAtA4[:j3])
	}
	if m.Failover {
		dAtA[i] = 0x10
		i++
		if m.Failover {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.WhetherChannel {
		dAtA[i] = 0x18
		i++
		if m.WhetherChannel {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ChannelSquareReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChannelSquareReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Squares) > 0 {
		for _, msg := range m.Squares {
			dAtA[i] = 0xa
			i++
			i = encodeVarintReply(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ChannelCheckBackReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChannelCheckBackReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Checkbacks) > 0 {
		for k, _ := range m.Checkbacks {
			dAtA[i] = 0xa
			i++
			v := m.Checkbacks[k]
			msgSize := 0
			if v != nil {
				msgSize = v.Size()
				msgSize += 1 + sovReply(uint64(msgSize))
			}
			mapSize := 1 + sovReply(uint64(k)) + msgSize
			i = encodeVarintReply(dAtA, i, uint64(mapSize))
			dAtA[i] = 0x8
			i++
			i = encodeVarintReply(dAtA, i, uint64(k))
			if v != nil {
				dAtA[i] = 0x12
				i++
				i = encodeVarintReply(dAtA, i, uint64(v.Size()))
				n5, err := v.MarshalTo(dAtA[i:])
				if err != nil {
					return 0, err
				}
				i += n5
			}
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ChannelReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChannelReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Channel != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintReply(dAtA, i, uint64(m.Channel.Size()))
		n6, err := m.Channel.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	if len(m.Synonyms) > 0 {
		for _, msg := range m.Synonyms {
			dAtA[i] = 0x12
			i++
			i = encodeVarintReply(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintReply(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *TagReply) Size() (n int) {
	var l int
	_ = l
	if m.Tag != nil {
		l = m.Tag.Size()
		n += 1 + l + sovReply(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TagsReply) Size() (n int) {
	var l int
	_ = l
	if len(m.Tags) > 0 {
		for k, v := range m.Tags {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovReply(uint64(l))
			}
			mapEntrySize := 1 + sovReply(uint64(k)) + l
			n += mapEntrySize + 1 + sovReply(uint64(mapEntrySize))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ChannelCategoryReply) Size() (n int) {
	var l int
	_ = l
	if len(m.Categories) > 0 {
		for _, e := range m.Categories {
			l = e.Size()
			n += 1 + l + sovReply(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ChannelsReply) Size() (n int) {
	var l int
	_ = l
	if len(m.Channels) > 0 {
		for _, e := range m.Channels {
			l = e.Size()
			n += 1 + l + sovReply(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ChannelResourcesReply) Size() (n int) {
	var l int
	_ = l
	if len(m.Oids) > 0 {
		l = 0
		for _, e := range m.Oids {
			l += sovReply(uint64(e))
		}
		n += 1 + sovReply(uint64(l)) + l
	}
	if m.Failover {
		n += 2
	}
	if m.WhetherChannel {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ChannelSquareReply) Size() (n int) {
	var l int
	_ = l
	if len(m.Squares) > 0 {
		for _, e := range m.Squares {
			l = e.Size()
			n += 1 + l + sovReply(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ChannelCheckBackReply) Size() (n int) {
	var l int
	_ = l
	if len(m.Checkbacks) > 0 {
		for k, v := range m.Checkbacks {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovReply(uint64(l))
			}
			mapEntrySize := 1 + sovReply(uint64(k)) + l
			n += mapEntrySize + 1 + sovReply(uint64(mapEntrySize))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ChannelReply) Size() (n int) {
	var l int
	_ = l
	if m.Channel != nil {
		l = m.Channel.Size()
		n += 1 + l + sovReply(uint64(l))
	}
	if len(m.Synonyms) > 0 {
		for _, e := range m.Synonyms {
			l = e.Size()
			n += 1 + l + sovReply(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovReply(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozReply(x uint64) (n int) {
	return sovReply(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *TagReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowReply
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TagReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TagReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tag", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReply
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthReply
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Tag == nil {
				m.Tag = &Tag{}
			}
			if err := m.Tag.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipReply(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthReply
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TagsReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowReply
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TagsReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TagsReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tags", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReply
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthReply
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Tags == nil {
				m.Tags = make(map[int64]*Tag)
			}
			var mapkey int64
			var mapvalue *Tag
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowReply
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowReply
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= (int64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowReply
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= (int(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthReply
					}
					postmsgIndex := iNdEx + mapmsglen
					if mapmsglen < 0 {
						return ErrInvalidLengthReply
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &Tag{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipReply(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthReply
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Tags[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipReply(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthReply
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChannelCategoryReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowReply
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChannelCategoryReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChannelCategoryReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Categories", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReply
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthReply
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Categories = append(m.Categories, &ChannelCategory{})
			if err := m.Categories[len(m.Categories)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipReply(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthReply
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChannelsReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowReply
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChannelsReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChannelsReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Channels", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReply
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthReply
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Channels = append(m.Channels, &Channel{})
			if err := m.Channels[len(m.Channels)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipReply(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthReply
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChannelResourcesReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowReply
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChannelResourcesReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChannelResourcesReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowReply
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Oids = append(m.Oids, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowReply
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthReply
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowReply
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Oids = append(m.Oids, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Oids", wireType)
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Failover", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReply
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Failover = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WhetherChannel", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReply
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.WhetherChannel = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipReply(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthReply
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChannelSquareReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowReply
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChannelSquareReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChannelSquareReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Squares", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReply
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthReply
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Squares = append(m.Squares, &ChannelSquare{})
			if err := m.Squares[len(m.Squares)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipReply(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthReply
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChannelCheckBackReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowReply
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChannelCheckBackReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChannelCheckBackReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Checkbacks", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReply
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthReply
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Checkbacks == nil {
				m.Checkbacks = make(map[int64]*ChannelCheckBack)
			}
			var mapkey int64
			var mapvalue *ChannelCheckBack
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowReply
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowReply
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= (int64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowReply
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= (int(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthReply
					}
					postmsgIndex := iNdEx + mapmsglen
					if mapmsglen < 0 {
						return ErrInvalidLengthReply
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &ChannelCheckBack{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipReply(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthReply
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Checkbacks[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipReply(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthReply
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChannelReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowReply
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChannelReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChannelReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Channel", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReply
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthReply
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Channel == nil {
				m.Channel = &Channel{}
			}
			if err := m.Channel.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Synonyms", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReply
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthReply
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Synonyms = append(m.Synonyms, &ChannelSynonym{})
			if err := m.Synonyms[len(m.Synonyms)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipReply(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthReply
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipReply(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowReply
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowReply
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowReply
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthReply
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowReply
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipReply(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthReply = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowReply   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("app/interface/main/tag/api/reply.proto", fileDescriptor_reply_75fee4bf31b05f39)
}

var fileDescriptor_reply_75fee4bf31b05f39 = []byte{
	// 504 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x53, 0xcf, 0x6e, 0xd3, 0x4e,
	0x10, 0xd6, 0xc6, 0xfd, 0xfd, 0x6a, 0xa6, 0x40, 0x2b, 0x8b, 0x4a, 0x96, 0x0f, 0x51, 0x65, 0x95,
	0x36, 0x42, 0x60, 0xd3, 0x72, 0x89, 0x2a, 0x40, 0xa2, 0x11, 0x5c, 0xb8, 0xb9, 0x39, 0x21, 0x04,
	0xda, 0x2c, 0x9b, 0xb5, 0x95, 0xc4, 0x6b, 0xd6, 0xeb, 0x20, 0x3f, 0x03, 0x2f, 0xc1, 0xe3, 0x70,
	0xe4, 0x05, 0x90, 0x50, 0x9e, 0x04, 0xed, 0x3f, 0x2b, 0xad, 0xda, 0x84, 0xdb, 0xec, 0xec, 0xf7,
	0x7d, 0x3b, 0xf3, 0xcd, 0x2c, 0x9c, 0xe0, 0xaa, 0x4a, 0x8b, 0x52, 0x52, 0x31, 0xc5, 0x84, 0xa6,
	0x0b, 0x5c, 0x94, 0xa9, 0xc4, 0x2c, 0xc5, 0x55, 0x91, 0x0a, 0x5a, 0xcd, 0xdb, 0xa4, 0x12, 0x5c,
	0xf2, 0xe0, 0x50, 0xdd, 0x24, 0x84, 0x2f, 0x16, 0x4d, 0x59, 0xc8, 0x36, 0x91, 0x98, 0x25, 0xcb,
	0xb3, 0xe8, 0x78, 0x03, 0x5d, 0x41, 0x34, 0x39, 0x1a, 0x6c, 0x40, 0x91, 0x1c, 0x97, 0x25, 0x9d,
	0x5b, 0xe4, 0x33, 0x56, 0xc8, 0xbc, 0x99, 0xa8, 0x87, 0x52, 0xc6, 0x19, 0x4f, 0x75, 0x7a, 0xd2,
	0x4c, 0xf5, 0x49, 0x1f, 0x74, 0x64, 0xe0, 0xf1, 0x10, 0xfc, 0x31, 0x66, 0x99, 0xaa, 0x33, 0x78,
	0x0a, 0x9e, 0xc4, 0x2c, 0x44, 0x47, 0x68, 0xb0, 0x77, 0x1e, 0x25, 0xb7, 0xd6, 0x9b, 0x28, 0xb4,
	0x82, 0xc5, 0x3f, 0x10, 0xdc, 0x1b, 0x63, 0x56, 0x1b, 0xee, 0x6b, 0xd8, 0x91, 0x98, 0xd5, 0x21,
	0x3a, 0xf2, 0x06, 0x7b, 0xe7, 0x4f, 0xee, 0x26, 0x1b, 0xbc, 0x8e, 0xde, 0x96, 0x52, 0xb4, 0x99,
	0xe6, 0x45, 0x57, 0x46, 0x4c, 0xa7, 0x82, 0x03, 0xf0, 0x66, 0xb4, 0xd5, 0x85, 0x78, 0x99, 0x0a,
	0x83, 0xe7, 0xf0, 0xdf, 0x12, 0xcf, 0x1b, 0x1a, 0xf6, 0xb6, 0x16, 0x67, 0x80, 0x17, 0xbd, 0x21,
	0x8a, 0x3f, 0xc1, 0xa3, 0x91, 0x31, 0x67, 0x84, 0x25, 0x65, 0x5c, 0xb4, 0xa6, 0xd8, 0x77, 0x00,
	0xc4, 0x24, 0x0a, 0xea, 0x4a, 0x3e, 0xb9, 0x43, 0xf2, 0xa6, 0xc0, 0x1a, 0x33, 0x7e, 0x0f, 0x0f,
	0xec, 0xb5, 0x75, 0xe1, 0x02, 0x7c, 0x3b, 0x0d, 0x27, 0xdb, 0xdf, 0x2c, 0x9b, 0x75, 0xf8, 0xb8,
	0x82, 0x43, 0x97, 0xa4, 0x35, 0x6f, 0x04, 0xa1, 0x56, 0x34, 0x80, 0x1d, 0x5e, 0x7c, 0x31, 0x82,
	0x5e, 0xa6, 0xe3, 0x20, 0x02, 0x7f, 0x8a, 0x8b, 0x39, 0x5f, 0x52, 0xa1, 0x2d, 0xf1, 0xb3, 0xee,
	0x1c, 0x9c, 0xc2, 0xfe, 0xb7, 0x9c, 0xca, 0x9c, 0x8a, 0xcf, 0x56, 0x3c, 0xf4, 0x34, 0xe4, 0xa1,
	0x4d, 0xdb, 0x67, 0xe2, 0x31, 0x04, 0x36, 0xbc, 0xfa, 0xda, 0x60, 0x41, 0xdd, 0x24, 0x77, 0x6b,
	0x7d, 0x74, 0x2d, 0x1c, 0x6f, 0x6e, 0xc1, 0x72, 0x1d, 0x29, 0xfe, 0x8d, 0xba, 0x46, 0x46, 0x39,
	0x25, 0xb3, 0x4b, 0x4c, 0x66, 0x46, 0xf9, 0x23, 0x00, 0x51, 0x99, 0x09, 0x26, 0x33, 0x27, 0xfe,
	0x72, 0x8b, 0xed, 0xd7, 0x14, 0x92, 0x51, 0x47, 0x37, 0xbb, 0xb3, 0xa6, 0x17, 0x4d, 0x61, 0xff,
	0xc6, 0xf5, 0x2d, 0x7b, 0xf4, 0xea, 0xfa, 0x1e, 0x9d, 0xfe, 0xeb, 0xeb, 0x6b, 0x4b, 0xf5, 0x1d,
	0xc1, 0xfd, 0x6e, 0x50, 0xaa, 0xad, 0x21, 0xec, 0x3a, 0x9f, 0xcd, 0xd7, 0xd9, 0x36, 0x73, 0x07,
	0x0f, 0xde, 0x80, 0x5f, 0xb7, 0x25, 0x2f, 0xdb, 0x45, 0x1d, 0xf6, 0xb4, 0x1d, 0x8f, 0xb7, 0x78,
	0x6d, 0xd0, 0x59, 0x47, 0xbb, 0x3c, 0xf8, 0xb9, 0xea, 0xa3, 0x5f, 0xab, 0x3e, 0xfa, 0xb3, 0xea,
	0xa3, 0x0f, 0xbd, 0xe5, 0xd9, 0xe4, 0x7f, 0xfd, 0xb1, 0x5f, 0xfc, 0x0d, 0x00, 0x00, 0xff, 0xff,
	0x98, 0x16, 0x24, 0xac, 0x98, 0x04, 0x00, 0x00,
}
