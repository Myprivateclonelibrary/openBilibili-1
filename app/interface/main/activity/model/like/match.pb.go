// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: match.proto

package like

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import go_common_library_time "go-common/library/time"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Match struct {
	ID                   int64                       `protobuf:"varint,1,opt,name=ID,proto3" json:"id"`
	Sid                  int64                       `protobuf:"varint,2,opt,name=Sid,proto3" json:"sid"`
	MaxStake             int64                       `protobuf:"varint,3,opt,name=MaxStake,proto3" json:"max_stake"`
	Stake                int64                       `protobuf:"varint,4,opt,name=Stake,proto3" json:"stake"`
	Name                 string                      `protobuf:"bytes,5,opt,name=Name,proto3" json:"name"`
	Url                  string                      `protobuf:"bytes,6,opt,name=Url,proto3" json:"url"`
	Cover                string                      `protobuf:"bytes,7,opt,name=Cover,proto3" json:"cover"`
	Ctime                go_common_library_time.Time `protobuf:"varint,8,opt,name=Ctime,proto3,casttype=go-common/library/time.Time" json:"ctime"`
	Mtime                go_common_library_time.Time `protobuf:"varint,9,opt,name=Mtime,proto3,casttype=go-common/library/time.Time" json:"mtime"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_unrecognized     []byte                      `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *Match) Reset()         { *m = Match{} }
func (m *Match) String() string { return proto.CompactTextString(m) }
func (*Match) ProtoMessage()    {}
func (*Match) Descriptor() ([]byte, []int) {
	return fileDescriptor_match_7fb26d27fe620ca9, []int{0}
}
func (m *Match) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Match) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Match.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Match) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Match.Merge(dst, src)
}
func (m *Match) XXX_Size() int {
	return m.Size()
}
func (m *Match) XXX_DiscardUnknown() {
	xxx_messageInfo_Match.DiscardUnknown(m)
}

var xxx_messageInfo_Match proto.InternalMessageInfo

type MatchList struct {
	MatchList            []*Match `protobuf:"bytes,1,rep,name=matchList" json:"matchList,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MatchList) Reset()         { *m = MatchList{} }
func (m *MatchList) String() string { return proto.CompactTextString(m) }
func (*MatchList) ProtoMessage()    {}
func (*MatchList) Descriptor() ([]byte, []int) {
	return fileDescriptor_match_7fb26d27fe620ca9, []int{1}
}
func (m *MatchList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MatchList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MatchList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *MatchList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MatchList.Merge(dst, src)
}
func (m *MatchList) XXX_Size() int {
	return m.Size()
}
func (m *MatchList) XXX_DiscardUnknown() {
	xxx_messageInfo_MatchList.DiscardUnknown(m)
}

var xxx_messageInfo_MatchList proto.InternalMessageInfo

type Object struct {
	ID                   int64                       `protobuf:"varint,1,opt,name=ID,proto3" json:"id"`
	MatchId              int64                       `protobuf:"varint,2,opt,name=MatchId,proto3" json:"match_id"`
	Sid                  int64                       `protobuf:"varint,3,opt,name=Sid,proto3" json:"sid"`
	HomeName             string                      `protobuf:"bytes,4,opt,name=HomeName,proto3" json:"home_name"`
	HomeLogo             string                      `protobuf:"bytes,5,opt,name=HomeLogo,proto3" json:"home_logo"`
	HomeScore            int64                       `protobuf:"varint,6,opt,name=HomeScore,proto3" json:"home_score"`
	AwayName             string                      `protobuf:"bytes,7,opt,name=AwayName,proto3" json:"away_name"`
	AwayLogo             string                      `protobuf:"bytes,8,opt,name=AwayLogo,proto3" json:"away_logo"`
	AwayScore            int64                       `protobuf:"varint,9,opt,name=AwayScore,proto3" json:"away_score"`
	Result               int64                       `protobuf:"varint,10,opt,name=Result,proto3" json:"result"`
	Ctime                go_common_library_time.Time `protobuf:"varint,11,opt,name=Ctime,proto3,casttype=go-common/library/time.Time" json:"ctime"`
	Mtime                go_common_library_time.Time `protobuf:"varint,12,opt,name=Mtime,proto3,casttype=go-common/library/time.Time" json:"mtime"`
	Stime                go_common_library_time.Time `protobuf:"varint,13,opt,name=Stime,proto3,casttype=go-common/library/time.Time" json:"stime"`
	Etime                go_common_library_time.Time `protobuf:"varint,14,opt,name=Etime,proto3,casttype=go-common/library/time.Time" json:"etime"`
	UserResult           int64                       `protobuf:"varint,15,opt,name=UserResult,proto3" json:"user_result"`
	GameStime            go_common_library_time.Time `protobuf:"varint,16,opt,name=GameStime,proto3,casttype=go-common/library/time.Time" json:"game_stime"`
	MatchName            string                      `protobuf:"bytes,17,opt,name=MatchName,proto3" json:"match_name,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_unrecognized     []byte                      `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *Object) Reset()         { *m = Object{} }
func (m *Object) String() string { return proto.CompactTextString(m) }
func (*Object) ProtoMessage()    {}
func (*Object) Descriptor() ([]byte, []int) {
	return fileDescriptor_match_7fb26d27fe620ca9, []int{2}
}
func (m *Object) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Object) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Object.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Object) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Object.Merge(dst, src)
}
func (m *Object) XXX_Size() int {
	return m.Size()
}
func (m *Object) XXX_DiscardUnknown() {
	xxx_messageInfo_Object.DiscardUnknown(m)
}

var xxx_messageInfo_Object proto.InternalMessageInfo

type UserLog struct {
	ID                   int64                       `protobuf:"varint,1,opt,name=ID,proto3" json:"id"`
	MatchId              int64                       `protobuf:"varint,2,opt,name=MatchId,proto3" json:"match_id"`
	MOId                 int64                       `protobuf:"varint,3,opt,name=MOId,proto3" json:"m_o_id"`
	Sid                  int64                       `protobuf:"varint,4,opt,name=Sid,proto3" json:"sid"`
	Mid                  int64                       `protobuf:"varint,5,opt,name=Mid,proto3" json:"mid"`
	Result               int64                       `protobuf:"varint,6,opt,name=Result,proto3" json:"result"`
	Stake                int64                       `protobuf:"varint,7,opt,name=Stake,proto3" json:"stake"`
	Ctime                go_common_library_time.Time `protobuf:"varint,8,opt,name=Ctime,proto3,casttype=go-common/library/time.Time" json:"ctime"`
	Mtime                go_common_library_time.Time `protobuf:"varint,9,opt,name=Mtime,proto3,casttype=go-common/library/time.Time" json:"mtime"`
	ObjResult            int64                       `protobuf:"varint,10,opt,name=ObjResult,proto3" json:"obj_result"`
	HomeName             string                      `protobuf:"bytes,11,opt,name=HomeName,proto3" json:"home_name"`
	AwayName             string                      `protobuf:"bytes,12,opt,name=AwayName,proto3" json:"away_name"`
	GameStime            go_common_library_time.Time `protobuf:"varint,13,opt,name=GameStime,proto3,casttype=go-common/library/time.Time" json:"game_stime"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_unrecognized     []byte                      `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *UserLog) Reset()         { *m = UserLog{} }
func (m *UserLog) String() string { return proto.CompactTextString(m) }
func (*UserLog) ProtoMessage()    {}
func (*UserLog) Descriptor() ([]byte, []int) {
	return fileDescriptor_match_7fb26d27fe620ca9, []int{3}
}
func (m *UserLog) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UserLog) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UserLog.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *UserLog) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserLog.Merge(dst, src)
}
func (m *UserLog) XXX_Size() int {
	return m.Size()
}
func (m *UserLog) XXX_DiscardUnknown() {
	xxx_messageInfo_UserLog.DiscardUnknown(m)
}

var xxx_messageInfo_UserLog proto.InternalMessageInfo

type UserGuess struct {
	Total                int64    `protobuf:"varint,1,opt,name=Total,proto3" json:"total"`
	Win                  int64    `protobuf:"varint,2,opt,name=Win,proto3" json:"win"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UserGuess) Reset()         { *m = UserGuess{} }
func (m *UserGuess) String() string { return proto.CompactTextString(m) }
func (*UserGuess) ProtoMessage()    {}
func (*UserGuess) Descriptor() ([]byte, []int) {
	return fileDescriptor_match_7fb26d27fe620ca9, []int{4}
}
func (m *UserGuess) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UserGuess) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UserGuess.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *UserGuess) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserGuess.Merge(dst, src)
}
func (m *UserGuess) XXX_Size() int {
	return m.Size()
}
func (m *UserGuess) XXX_DiscardUnknown() {
	xxx_messageInfo_UserGuess.DiscardUnknown(m)
}

var xxx_messageInfo_UserGuess proto.InternalMessageInfo

func init() {
	proto.RegisterType((*Match)(nil), "activity.service.Match")
	proto.RegisterType((*MatchList)(nil), "activity.service.MatchList")
	proto.RegisterType((*Object)(nil), "activity.service.Object")
	proto.RegisterType((*UserLog)(nil), "activity.service.UserLog")
	proto.RegisterType((*UserGuess)(nil), "activity.service.UserGuess")
}
func (m *Match) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Match) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMatch(dAtA, i, uint64(m.ID))
	}
	if m.Sid != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintMatch(dAtA, i, uint64(m.Sid))
	}
	if m.MaxStake != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintMatch(dAtA, i, uint64(m.MaxStake))
	}
	if m.Stake != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintMatch(dAtA, i, uint64(m.Stake))
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintMatch(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.Url) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintMatch(dAtA, i, uint64(len(m.Url)))
		i += copy(dAtA[i:], m.Url)
	}
	if len(m.Cover) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintMatch(dAtA, i, uint64(len(m.Cover)))
		i += copy(dAtA[i:], m.Cover)
	}
	if m.Ctime != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintMatch(dAtA, i, uint64(m.Ctime))
	}
	if m.Mtime != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintMatch(dAtA, i, uint64(m.Mtime))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *MatchList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MatchList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.MatchList) > 0 {
		for _, msg := range m.MatchList {
			dAtA[i] = 0xa
			i++
			i = encodeVarintMatch(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Object) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Object) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMatch(dAtA, i, uint64(m.ID))
	}
	if m.MatchId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintMatch(dAtA, i, uint64(m.MatchId))
	}
	if m.Sid != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintMatch(dAtA, i, uint64(m.Sid))
	}
	if len(m.HomeName) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintMatch(dAtA, i, uint64(len(m.HomeName)))
		i += copy(dAtA[i:], m.HomeName)
	}
	if len(m.HomeLogo) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintMatch(dAtA, i, uint64(len(m.HomeLogo)))
		i += copy(dAtA[i:], m.HomeLogo)
	}
	if m.HomeScore != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintMatch(dAtA, i, uint64(m.HomeScore))
	}
	if len(m.AwayName) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintMatch(dAtA, i, uint64(len(m.AwayName)))
		i += copy(dAtA[i:], m.AwayName)
	}
	if len(m.AwayLogo) > 0 {
		dAtA[i] = 0x42
		i++
		i = encodeVarintMatch(dAtA, i, uint64(len(m.AwayLogo)))
		i += copy(dAtA[i:], m.AwayLogo)
	}
	if m.AwayScore != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintMatch(dAtA, i, uint64(m.AwayScore))
	}
	if m.Result != 0 {
		dAtA[i] = 0x50
		i++
		i = encodeVarintMatch(dAtA, i, uint64(m.Result))
	}
	if m.Ctime != 0 {
		dAtA[i] = 0x58
		i++
		i = encodeVarintMatch(dAtA, i, uint64(m.Ctime))
	}
	if m.Mtime != 0 {
		dAtA[i] = 0x60
		i++
		i = encodeVarintMatch(dAtA, i, uint64(m.Mtime))
	}
	if m.Stime != 0 {
		dAtA[i] = 0x68
		i++
		i = encodeVarintMatch(dAtA, i, uint64(m.Stime))
	}
	if m.Etime != 0 {
		dAtA[i] = 0x70
		i++
		i = encodeVarintMatch(dAtA, i, uint64(m.Etime))
	}
	if m.UserResult != 0 {
		dAtA[i] = 0x78
		i++
		i = encodeVarintMatch(dAtA, i, uint64(m.UserResult))
	}
	if m.GameStime != 0 {
		dAtA[i] = 0x80
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintMatch(dAtA, i, uint64(m.GameStime))
	}
	if len(m.MatchName) > 0 {
		dAtA[i] = 0x8a
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintMatch(dAtA, i, uint64(len(m.MatchName)))
		i += copy(dAtA[i:], m.MatchName)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *UserLog) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserLog) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMatch(dAtA, i, uint64(m.ID))
	}
	if m.MatchId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintMatch(dAtA, i, uint64(m.MatchId))
	}
	if m.MOId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintMatch(dAtA, i, uint64(m.MOId))
	}
	if m.Sid != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintMatch(dAtA, i, uint64(m.Sid))
	}
	if m.Mid != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintMatch(dAtA, i, uint64(m.Mid))
	}
	if m.Result != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintMatch(dAtA, i, uint64(m.Result))
	}
	if m.Stake != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintMatch(dAtA, i, uint64(m.Stake))
	}
	if m.Ctime != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintMatch(dAtA, i, uint64(m.Ctime))
	}
	if m.Mtime != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintMatch(dAtA, i, uint64(m.Mtime))
	}
	if m.ObjResult != 0 {
		dAtA[i] = 0x50
		i++
		i = encodeVarintMatch(dAtA, i, uint64(m.ObjResult))
	}
	if len(m.HomeName) > 0 {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintMatch(dAtA, i, uint64(len(m.HomeName)))
		i += copy(dAtA[i:], m.HomeName)
	}
	if len(m.AwayName) > 0 {
		dAtA[i] = 0x62
		i++
		i = encodeVarintMatch(dAtA, i, uint64(len(m.AwayName)))
		i += copy(dAtA[i:], m.AwayName)
	}
	if m.GameStime != 0 {
		dAtA[i] = 0x68
		i++
		i = encodeVarintMatch(dAtA, i, uint64(m.GameStime))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *UserGuess) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserGuess) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Total != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMatch(dAtA, i, uint64(m.Total))
	}
	if m.Win != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintMatch(dAtA, i, uint64(m.Win))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintMatch(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Match) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovMatch(uint64(m.ID))
	}
	if m.Sid != 0 {
		n += 1 + sovMatch(uint64(m.Sid))
	}
	if m.MaxStake != 0 {
		n += 1 + sovMatch(uint64(m.MaxStake))
	}
	if m.Stake != 0 {
		n += 1 + sovMatch(uint64(m.Stake))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovMatch(uint64(l))
	}
	l = len(m.Url)
	if l > 0 {
		n += 1 + l + sovMatch(uint64(l))
	}
	l = len(m.Cover)
	if l > 0 {
		n += 1 + l + sovMatch(uint64(l))
	}
	if m.Ctime != 0 {
		n += 1 + sovMatch(uint64(m.Ctime))
	}
	if m.Mtime != 0 {
		n += 1 + sovMatch(uint64(m.Mtime))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MatchList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.MatchList) > 0 {
		for _, e := range m.MatchList {
			l = e.Size()
			n += 1 + l + sovMatch(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Object) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovMatch(uint64(m.ID))
	}
	if m.MatchId != 0 {
		n += 1 + sovMatch(uint64(m.MatchId))
	}
	if m.Sid != 0 {
		n += 1 + sovMatch(uint64(m.Sid))
	}
	l = len(m.HomeName)
	if l > 0 {
		n += 1 + l + sovMatch(uint64(l))
	}
	l = len(m.HomeLogo)
	if l > 0 {
		n += 1 + l + sovMatch(uint64(l))
	}
	if m.HomeScore != 0 {
		n += 1 + sovMatch(uint64(m.HomeScore))
	}
	l = len(m.AwayName)
	if l > 0 {
		n += 1 + l + sovMatch(uint64(l))
	}
	l = len(m.AwayLogo)
	if l > 0 {
		n += 1 + l + sovMatch(uint64(l))
	}
	if m.AwayScore != 0 {
		n += 1 + sovMatch(uint64(m.AwayScore))
	}
	if m.Result != 0 {
		n += 1 + sovMatch(uint64(m.Result))
	}
	if m.Ctime != 0 {
		n += 1 + sovMatch(uint64(m.Ctime))
	}
	if m.Mtime != 0 {
		n += 1 + sovMatch(uint64(m.Mtime))
	}
	if m.Stime != 0 {
		n += 1 + sovMatch(uint64(m.Stime))
	}
	if m.Etime != 0 {
		n += 1 + sovMatch(uint64(m.Etime))
	}
	if m.UserResult != 0 {
		n += 1 + sovMatch(uint64(m.UserResult))
	}
	if m.GameStime != 0 {
		n += 2 + sovMatch(uint64(m.GameStime))
	}
	l = len(m.MatchName)
	if l > 0 {
		n += 2 + l + sovMatch(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UserLog) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovMatch(uint64(m.ID))
	}
	if m.MatchId != 0 {
		n += 1 + sovMatch(uint64(m.MatchId))
	}
	if m.MOId != 0 {
		n += 1 + sovMatch(uint64(m.MOId))
	}
	if m.Sid != 0 {
		n += 1 + sovMatch(uint64(m.Sid))
	}
	if m.Mid != 0 {
		n += 1 + sovMatch(uint64(m.Mid))
	}
	if m.Result != 0 {
		n += 1 + sovMatch(uint64(m.Result))
	}
	if m.Stake != 0 {
		n += 1 + sovMatch(uint64(m.Stake))
	}
	if m.Ctime != 0 {
		n += 1 + sovMatch(uint64(m.Ctime))
	}
	if m.Mtime != 0 {
		n += 1 + sovMatch(uint64(m.Mtime))
	}
	if m.ObjResult != 0 {
		n += 1 + sovMatch(uint64(m.ObjResult))
	}
	l = len(m.HomeName)
	if l > 0 {
		n += 1 + l + sovMatch(uint64(l))
	}
	l = len(m.AwayName)
	if l > 0 {
		n += 1 + l + sovMatch(uint64(l))
	}
	if m.GameStime != 0 {
		n += 1 + sovMatch(uint64(m.GameStime))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UserGuess) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Total != 0 {
		n += 1 + sovMatch(uint64(m.Total))
	}
	if m.Win != 0 {
		n += 1 + sovMatch(uint64(m.Win))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovMatch(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozMatch(x uint64) (n int) {
	return sovMatch(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Match) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMatch
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Match: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Match: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sid", wireType)
			}
			m.Sid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxStake", wireType)
			}
			m.MaxStake = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxStake |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stake", wireType)
			}
			m.Stake = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Stake |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMatch
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Url", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMatch
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Url = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cover", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMatch
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cover = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ctime", wireType)
			}
			m.Ctime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ctime |= (go_common_library_time.Time(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mtime", wireType)
			}
			m.Mtime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mtime |= (go_common_library_time.Time(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMatch(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMatch
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MatchList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMatch
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MatchList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MatchList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MatchList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMatch
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MatchList = append(m.MatchList, &Match{})
			if err := m.MatchList[len(m.MatchList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMatch(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMatch
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Object) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMatch
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Object: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Object: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MatchId", wireType)
			}
			m.MatchId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MatchId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sid", wireType)
			}
			m.Sid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HomeName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMatch
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HomeName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HomeLogo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMatch
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HomeLogo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HomeScore", wireType)
			}
			m.HomeScore = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HomeScore |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AwayName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMatch
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AwayName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AwayLogo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMatch
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AwayLogo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AwayScore", wireType)
			}
			m.AwayScore = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AwayScore |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			m.Result = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Result |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ctime", wireType)
			}
			m.Ctime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ctime |= (go_common_library_time.Time(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mtime", wireType)
			}
			m.Mtime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mtime |= (go_common_library_time.Time(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stime", wireType)
			}
			m.Stime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Stime |= (go_common_library_time.Time(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Etime", wireType)
			}
			m.Etime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Etime |= (go_common_library_time.Time(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserResult", wireType)
			}
			m.UserResult = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserResult |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameStime", wireType)
			}
			m.GameStime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GameStime |= (go_common_library_time.Time(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MatchName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMatch
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MatchName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMatch(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMatch
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserLog) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMatch
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserLog: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserLog: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MatchId", wireType)
			}
			m.MatchId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MatchId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MOId", wireType)
			}
			m.MOId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MOId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sid", wireType)
			}
			m.Sid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			m.Result = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Result |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stake", wireType)
			}
			m.Stake = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Stake |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ctime", wireType)
			}
			m.Ctime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ctime |= (go_common_library_time.Time(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mtime", wireType)
			}
			m.Mtime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mtime |= (go_common_library_time.Time(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjResult", wireType)
			}
			m.ObjResult = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ObjResult |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HomeName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMatch
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HomeName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AwayName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMatch
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AwayName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameStime", wireType)
			}
			m.GameStime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GameStime |= (go_common_library_time.Time(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMatch(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMatch
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserGuess) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMatch
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserGuess: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserGuess: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Total", wireType)
			}
			m.Total = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Total |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Win", wireType)
			}
			m.Win = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Win |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMatch(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMatch
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMatch(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMatch
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMatch
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMatch
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthMatch
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowMatch
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipMatch(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthMatch = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMatch   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("match.proto", fileDescriptor_match_7fb26d27fe620ca9) }

var fileDescriptor_match_7fb26d27fe620ca9 = []byte{
	// 772 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x55, 0xcd, 0x4e, 0xdb, 0x4a,
	0x14, 0x26, 0xb1, 0xe3, 0xc4, 0x13, 0xfe, 0xae, 0x75, 0x75, 0xaf, 0x69, 0x2b, 0x1b, 0x65, 0x51,
	0xa5, 0x12, 0x24, 0x52, 0xab, 0x76, 0x59, 0xa9, 0x81, 0x8a, 0x46, 0x25, 0x45, 0x9a, 0x80, 0x2a,
	0x75, 0x13, 0x39, 0xce, 0xd4, 0x0c, 0x64, 0x32, 0xc8, 0x76, 0x80, 0xbc, 0x49, 0x5f, 0xa4, 0x8f,
	0x50, 0x89, 0x25, 0x4f, 0x60, 0x01, 0xdd, 0xf9, 0x11, 0xba, 0xaa, 0xce, 0xb1, 0x1d, 0x03, 0x82,
	0x36, 0x2a, 0x8b, 0xee, 0xec, 0xef, 0xe7, 0xf8, 0x68, 0xce, 0x77, 0xc6, 0xa4, 0x2a, 0x9c, 0xd0,
	0xdd, 0x6f, 0x1c, 0xf9, 0x32, 0x94, 0xc6, 0xb2, 0xe3, 0x86, 0xfc, 0x98, 0x87, 0x93, 0x46, 0xc0,
	0xfc, 0x63, 0xee, 0xb2, 0x47, 0xeb, 0x1e, 0x0f, 0xf7, 0xc7, 0xfd, 0x86, 0x2b, 0x45, 0xd3, 0x93,
	0x9e, 0x6c, 0xa2, 0xb0, 0x3f, 0xfe, 0x8c, 0x6f, 0xf8, 0x82, 0x4f, 0x49, 0x81, 0xda, 0x45, 0x91,
	0x94, 0x3a, 0x50, 0xd0, 0xf8, 0x8f, 0x14, 0xdb, 0x9b, 0x66, 0x61, 0xb5, 0x50, 0x57, 0x5a, 0x5a,
	0x1c, 0xd9, 0x45, 0x3e, 0xa0, 0xc5, 0xf6, 0xa6, 0xb1, 0x42, 0x94, 0x2e, 0x1f, 0x98, 0x45, 0x24,
	0xca, 0x71, 0x64, 0x2b, 0x01, 0x1f, 0x50, 0xc0, 0x8c, 0x67, 0xa4, 0xd2, 0x71, 0x4e, 0xbb, 0xa1,
	0x73, 0xc8, 0x4c, 0x05, 0xf9, 0x85, 0x38, 0xb2, 0x75, 0xe1, 0x9c, 0xf6, 0x02, 0x00, 0xe9, 0x94,
	0x36, 0x6c, 0x52, 0x4a, 0x74, 0x2a, 0xea, 0xf4, 0x38, 0xb2, 0x4b, 0x89, 0x26, 0xc1, 0x8d, 0x27,
	0x44, 0xfd, 0xe0, 0x08, 0x66, 0x96, 0x56, 0x0b, 0x75, 0xbd, 0x55, 0x89, 0x23, 0x5b, 0x1d, 0x39,
	0x82, 0x51, 0x44, 0xa1, 0x89, 0x3d, 0x7f, 0x68, 0x6a, 0x48, 0x62, 0x13, 0x63, 0x7f, 0x48, 0x01,
	0x83, 0xca, 0x1b, 0xf2, 0x98, 0xf9, 0x66, 0x19, 0x49, 0xac, 0xec, 0x02, 0x40, 0x13, 0xdc, 0x78,
	0x4d, 0x4a, 0x1b, 0x21, 0x17, 0xcc, 0xac, 0xe0, 0xa7, 0xeb, 0x28, 0x00, 0xe0, 0x47, 0x64, 0x3f,
	0xf6, 0xe4, 0xba, 0x2b, 0x85, 0x90, 0xa3, 0xe6, 0x90, 0xf7, 0x7d, 0xc7, 0x9f, 0x34, 0x81, 0x69,
	0xec, 0x72, 0xc1, 0x68, 0x62, 0x03, 0x7f, 0x07, 0xfd, 0x7a, 0xee, 0x17, 0x33, 0xf9, 0xd1, 0x56,
	0x6b, 0x11, 0x1d, 0x4f, 0x78, 0x9b, 0x07, 0xa1, 0xf1, 0x92, 0xe8, 0x22, 0x7b, 0x31, 0x0b, 0xab,
	0x4a, 0xbd, 0xfa, 0xfc, 0xff, 0xc6, 0xed, 0x21, 0x36, 0x50, 0x4f, 0x73, 0x65, 0xed, 0x9b, 0x46,
	0xb4, 0x9d, 0xfe, 0x01, 0x73, 0xc3, 0x7b, 0xe7, 0xf4, 0x94, 0x94, 0xd1, 0xd6, 0xce, 0x66, 0x35,
	0x1f, 0x47, 0x76, 0x05, 0x4b, 0xf4, 0xf8, 0x80, 0x66, 0x64, 0x36, 0x4f, 0xe5, 0xee, 0x79, 0xbe,
	0x93, 0x82, 0xe1, 0x1c, 0x54, 0x3c, 0x4d, 0x9c, 0xe7, 0xbe, 0x14, 0xac, 0x87, 0xc3, 0x98, 0xd2,
	0x99, 0x74, 0x5b, 0x7a, 0x32, 0x1d, 0x59, 0x2e, 0x1d, 0x4a, 0x4f, 0xd2, 0x29, 0x6d, 0xac, 0x11,
	0x1d, 0x9e, 0xbb, 0xae, 0xf4, 0x19, 0x4e, 0x50, 0x69, 0x2d, 0xc6, 0x91, 0x4d, 0x50, 0x1b, 0x00,
	0x4a, 0x73, 0x01, 0x14, 0x7e, 0x73, 0xe2, 0x4c, 0xb0, 0x87, 0x72, 0x5e, 0xd8, 0x39, 0x71, 0x26,
	0x69, 0x0f, 0x19, 0x9d, 0x49, 0xb1, 0x87, 0xca, 0x2d, 0x69, 0xd2, 0x43, 0x46, 0x43, 0x0f, 0xf0,
	0x9c, 0xf4, 0xa0, 0xe7, 0x3d, 0xa0, 0x36, 0xed, 0x61, 0x2a, 0x30, 0x6a, 0x44, 0xa3, 0x2c, 0x18,
	0x0f, 0x43, 0x93, 0xa0, 0x94, 0xc4, 0x91, 0xad, 0xf9, 0x88, 0xd0, 0x94, 0xc9, 0x53, 0x55, 0x7d,
	0x60, 0xaa, 0xe6, 0xff, 0x28, 0x55, 0xe0, 0xef, 0xa2, 0x7f, 0x21, 0xf7, 0x07, 0x33, 0xf9, 0xbb,
	0x99, 0xff, 0x2d, 0xfa, 0x17, 0x73, 0x3f, 0x9b, 0xc9, 0x8f, 0x36, 0xa3, 0x49, 0xc8, 0x5e, 0xc0,
	0xfc, 0xf4, 0x9c, 0x96, 0xb0, 0xc8, 0x52, 0x1c, 0xd9, 0xd5, 0x71, 0xc0, 0xfc, 0x5e, 0x7a, 0x58,
	0xd7, 0x24, 0xc6, 0x7b, 0xa2, 0x6f, 0x39, 0x82, 0x25, 0x4d, 0x2f, 0xa3, 0x7e, 0x1d, 0x46, 0xe0,
	0x39, 0x10, 0x83, 0x59, 0xbe, 0x9c, 0xfb, 0x8d, 0x57, 0xe9, 0x4e, 0x61, 0x4c, 0xfe, 0xc1, 0xd9,
	0x9b, 0x71, 0x64, 0xff, 0x9b, 0xc4, 0x1d, 0x72, 0xb2, 0x26, 0x05, 0x0f, 0x99, 0x38, 0x0a, 0x27,
	0x34, 0x97, 0xd6, 0xbe, 0xaa, 0xa4, 0x0c, 0x3d, 0x6d, 0x4b, 0xef, 0xc1, 0x8b, 0x64, 0x11, 0xb5,
	0xb3, 0xd3, 0xce, 0x36, 0x09, 0x33, 0x22, 0x7a, 0x12, 0x24, 0x88, 0x67, 0x8b, 0xa6, 0xde, 0xb1,
	0x68, 0x2b, 0x44, 0xe9, 0xf0, 0x01, 0x2e, 0x4e, 0x4a, 0x09, 0xa0, 0x3a, 0x7c, 0x70, 0x2d, 0x7b,
	0xda, 0xbd, 0xd9, 0x9b, 0x5e, 0xa6, 0xe5, 0x7b, 0x2e, 0xd3, 0xbf, 0x7c, 0xe5, 0xc1, 0xba, 0xed,
	0xf4, 0x0f, 0x6e, 0xec, 0x10, 0xae, 0x9b, 0xec, 0x1f, 0x64, 0xd1, 0xc8, 0x05, 0x37, 0xae, 0x9d,
	0xea, 0x6f, 0xaf, 0x9d, 0xe9, 0xed, 0x30, 0xff, 0xeb, 0xdb, 0xe1, 0x46, 0xde, 0x16, 0x1e, 0x96,
	0xb7, 0xda, 0x16, 0xd1, 0x21, 0x36, 0x5b, 0x63, 0x16, 0x04, 0x70, 0xfc, 0xbb, 0x32, 0x74, 0x86,
	0x69, 0x76, 0xf0, 0xf8, 0x43, 0x00, 0x68, 0x82, 0xc3, 0x78, 0x3f, 0xf2, 0xd1, 0xf5, 0x5f, 0xe6,
	0x09, 0x1f, 0x51, 0xc0, 0x5a, 0xd6, 0xd9, 0xa5, 0x35, 0x77, 0x7e, 0x69, 0xcd, 0x9d, 0x5d, 0x59,
	0x85, 0xf3, 0x2b, 0xab, 0x70, 0x71, 0x65, 0x15, 0xbe, 0x7c, 0xb7, 0xe6, 0x3e, 0xa9, 0x43, 0x7e,
	0xc8, 0xfa, 0x1a, 0xfe, 0x96, 0x5f, 0xfc, 0x0c, 0x00, 0x00, 0xff, 0xff, 0xed, 0x06, 0xbd, 0x89,
	0xe6, 0x07, 0x00, 0x00,
}
