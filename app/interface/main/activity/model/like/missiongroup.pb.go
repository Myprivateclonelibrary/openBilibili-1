// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: missiongroup.proto

package like

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import go_common_library_time "go-common/library/time"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type MissionGroup struct {
	ID                   int64                       `protobuf:"varint,1,opt,name=ID,proto3" json:"id"`
	Sid                  int64                       `protobuf:"varint,2,opt,name=Sid,proto3" json:"sid"`
	Mid                  int64                       `protobuf:"varint,3,opt,name=Mid,proto3" json:"mid"`
	State                int64                       `protobuf:"varint,4,opt,name=State,proto3" json:"state"`
	Ctime                go_common_library_time.Time `protobuf:"varint,5,opt,name=Ctime,proto3,casttype=go-common/library/time.Time" json:"ctime"`
	Mtime                go_common_library_time.Time `protobuf:"varint,6,opt,name=Mtime,proto3,casttype=go-common/library/time.Time" json:"mtime"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_unrecognized     []byte                      `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *MissionGroup) Reset()         { *m = MissionGroup{} }
func (m *MissionGroup) String() string { return proto.CompactTextString(m) }
func (*MissionGroup) ProtoMessage()    {}
func (*MissionGroup) Descriptor() ([]byte, []int) {
	return fileDescriptor_missiongroup_2ff59dc279cfd0a8, []int{0}
}
func (m *MissionGroup) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MissionGroup) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MissionGroup.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *MissionGroup) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MissionGroup.Merge(dst, src)
}
func (m *MissionGroup) XXX_Size() int {
	return m.Size()
}
func (m *MissionGroup) XXX_DiscardUnknown() {
	xxx_messageInfo_MissionGroup.DiscardUnknown(m)
}

var xxx_messageInfo_MissionGroup proto.InternalMessageInfo

type ActMissionGroup struct {
	ID                   int64                       `protobuf:"varint,1,opt,name=ID,proto3" json:"id"`
	Lid                  int64                       `protobuf:"varint,2,opt,name=Lid,proto3" json:"lid"`
	Mid                  int64                       `protobuf:"varint,3,opt,name=Mid,proto3" json:"mid"`
	Action               int64                       `protobuf:"varint,4,opt,name=Action,proto3" json:"action"`
	Ctime                go_common_library_time.Time `protobuf:"varint,5,opt,name=Ctime,proto3,casttype=go-common/library/time.Time" json:"ctime"`
	Mtime                go_common_library_time.Time `protobuf:"varint,6,opt,name=Mtime,proto3,casttype=go-common/library/time.Time" json:"mtime"`
	Sid                  int64                       `protobuf:"varint,7,opt,name=Sid,proto3" json:"sid"`
	IP                   int64                       `protobuf:"varint,8,opt,name=IP,proto3" json:"ip"`
	IPv6                 []byte                      `protobuf:"bytes,9,opt,name=IPv6,proto3" json:"ipv6"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_unrecognized     []byte                      `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *ActMissionGroup) Reset()         { *m = ActMissionGroup{} }
func (m *ActMissionGroup) String() string { return proto.CompactTextString(m) }
func (*ActMissionGroup) ProtoMessage()    {}
func (*ActMissionGroup) Descriptor() ([]byte, []int) {
	return fileDescriptor_missiongroup_2ff59dc279cfd0a8, []int{1}
}
func (m *ActMissionGroup) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ActMissionGroup) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ActMissionGroup.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ActMissionGroup) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ActMissionGroup.Merge(dst, src)
}
func (m *ActMissionGroup) XXX_Size() int {
	return m.Size()
}
func (m *ActMissionGroup) XXX_DiscardUnknown() {
	xxx_messageInfo_ActMissionGroup.DiscardUnknown(m)
}

var xxx_messageInfo_ActMissionGroup proto.InternalMessageInfo

type ActMissionGroups struct {
	ActMissionGroups     []*ActMissionGroup `protobuf:"bytes,1,rep,name=actMissionGroups" json:"actMissionGroups,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *ActMissionGroups) Reset()         { *m = ActMissionGroups{} }
func (m *ActMissionGroups) String() string { return proto.CompactTextString(m) }
func (*ActMissionGroups) ProtoMessage()    {}
func (*ActMissionGroups) Descriptor() ([]byte, []int) {
	return fileDescriptor_missiongroup_2ff59dc279cfd0a8, []int{2}
}
func (m *ActMissionGroups) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ActMissionGroups) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ActMissionGroups.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ActMissionGroups) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ActMissionGroups.Merge(dst, src)
}
func (m *ActMissionGroups) XXX_Size() int {
	return m.Size()
}
func (m *ActMissionGroups) XXX_DiscardUnknown() {
	xxx_messageInfo_ActMissionGroups.DiscardUnknown(m)
}

var xxx_messageInfo_ActMissionGroups proto.InternalMessageInfo

func init() {
	proto.RegisterType((*MissionGroup)(nil), "activity.service.MissionGroup")
	proto.RegisterType((*ActMissionGroup)(nil), "activity.service.ActMissionGroup")
	proto.RegisterType((*ActMissionGroups)(nil), "activity.service.ActMissionGroups")
}
func (m *MissionGroup) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MissionGroup) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMissiongroup(dAtA, i, uint64(m.ID))
	}
	if m.Sid != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintMissiongroup(dAtA, i, uint64(m.Sid))
	}
	if m.Mid != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintMissiongroup(dAtA, i, uint64(m.Mid))
	}
	if m.State != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintMissiongroup(dAtA, i, uint64(m.State))
	}
	if m.Ctime != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintMissiongroup(dAtA, i, uint64(m.Ctime))
	}
	if m.Mtime != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintMissiongroup(dAtA, i, uint64(m.Mtime))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ActMissionGroup) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ActMissionGroup) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMissiongroup(dAtA, i, uint64(m.ID))
	}
	if m.Lid != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintMissiongroup(dAtA, i, uint64(m.Lid))
	}
	if m.Mid != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintMissiongroup(dAtA, i, uint64(m.Mid))
	}
	if m.Action != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintMissiongroup(dAtA, i, uint64(m.Action))
	}
	if m.Ctime != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintMissiongroup(dAtA, i, uint64(m.Ctime))
	}
	if m.Mtime != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintMissiongroup(dAtA, i, uint64(m.Mtime))
	}
	if m.Sid != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintMissiongroup(dAtA, i, uint64(m.Sid))
	}
	if m.IP != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintMissiongroup(dAtA, i, uint64(m.IP))
	}
	if len(m.IPv6) > 0 {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintMissiongroup(dAtA, i, uint64(len(m.IPv6)))
		i += copy(dAtA[i:], m.IPv6)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ActMissionGroups) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ActMissionGroups) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ActMissionGroups) > 0 {
		for _, msg := range m.ActMissionGroups {
			dAtA[i] = 0xa
			i++
			i = encodeVarintMissiongroup(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintMissiongroup(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *MissionGroup) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovMissiongroup(uint64(m.ID))
	}
	if m.Sid != 0 {
		n += 1 + sovMissiongroup(uint64(m.Sid))
	}
	if m.Mid != 0 {
		n += 1 + sovMissiongroup(uint64(m.Mid))
	}
	if m.State != 0 {
		n += 1 + sovMissiongroup(uint64(m.State))
	}
	if m.Ctime != 0 {
		n += 1 + sovMissiongroup(uint64(m.Ctime))
	}
	if m.Mtime != 0 {
		n += 1 + sovMissiongroup(uint64(m.Mtime))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ActMissionGroup) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovMissiongroup(uint64(m.ID))
	}
	if m.Lid != 0 {
		n += 1 + sovMissiongroup(uint64(m.Lid))
	}
	if m.Mid != 0 {
		n += 1 + sovMissiongroup(uint64(m.Mid))
	}
	if m.Action != 0 {
		n += 1 + sovMissiongroup(uint64(m.Action))
	}
	if m.Ctime != 0 {
		n += 1 + sovMissiongroup(uint64(m.Ctime))
	}
	if m.Mtime != 0 {
		n += 1 + sovMissiongroup(uint64(m.Mtime))
	}
	if m.Sid != 0 {
		n += 1 + sovMissiongroup(uint64(m.Sid))
	}
	if m.IP != 0 {
		n += 1 + sovMissiongroup(uint64(m.IP))
	}
	l = len(m.IPv6)
	if l > 0 {
		n += 1 + l + sovMissiongroup(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ActMissionGroups) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ActMissionGroups) > 0 {
		for _, e := range m.ActMissionGroups {
			l = e.Size()
			n += 1 + l + sovMissiongroup(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovMissiongroup(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozMissiongroup(x uint64) (n int) {
	return sovMissiongroup(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MissionGroup) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMissiongroup
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MissionGroup: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MissionGroup: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMissiongroup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sid", wireType)
			}
			m.Sid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMissiongroup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMissiongroup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMissiongroup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ctime", wireType)
			}
			m.Ctime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMissiongroup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ctime |= (go_common_library_time.Time(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mtime", wireType)
			}
			m.Mtime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMissiongroup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mtime |= (go_common_library_time.Time(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMissiongroup(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMissiongroup
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ActMissionGroup) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMissiongroup
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ActMissionGroup: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ActMissionGroup: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMissiongroup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lid", wireType)
			}
			m.Lid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMissiongroup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Lid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMissiongroup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Action", wireType)
			}
			m.Action = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMissiongroup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Action |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ctime", wireType)
			}
			m.Ctime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMissiongroup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ctime |= (go_common_library_time.Time(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mtime", wireType)
			}
			m.Mtime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMissiongroup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mtime |= (go_common_library_time.Time(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sid", wireType)
			}
			m.Sid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMissiongroup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IP", wireType)
			}
			m.IP = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMissiongroup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IP |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IPv6", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMissiongroup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMissiongroup
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IPv6 = append(m.IPv6[:0], dAtA[iNdEx:postIndex]...)
			if m.IPv6 == nil {
				m.IPv6 = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMissiongroup(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMissiongroup
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ActMissionGroups) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMissiongroup
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ActMissionGroups: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ActMissionGroups: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActMissionGroups", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMissiongroup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMissiongroup
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ActMissionGroups = append(m.ActMissionGroups, &ActMissionGroup{})
			if err := m.ActMissionGroups[len(m.ActMissionGroups)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMissiongroup(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMissiongroup
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMissiongroup(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMissiongroup
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMissiongroup
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMissiongroup
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthMissiongroup
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowMissiongroup
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipMissiongroup(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthMissiongroup = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMissiongroup   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("missiongroup.proto", fileDescriptor_missiongroup_2ff59dc279cfd0a8) }

var fileDescriptor_missiongroup_2ff59dc279cfd0a8 = []byte{
	// 406 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x92, 0x3d, 0x6b, 0xdc, 0x40,
	0x10, 0x86, 0x6f, 0xf5, 0x65, 0x7b, 0x63, 0x88, 0xd9, 0x22, 0x6c, 0x3e, 0x90, 0x2e, 0xaa, 0xd4,
	0x58, 0x82, 0x04, 0x5c, 0x06, 0x7c, 0x31, 0x04, 0x81, 0x05, 0xc7, 0x3a, 0x55, 0x3a, 0x7d, 0x45,
	0x19, 0x72, 0x7b, 0x2b, 0xa4, 0x3d, 0x81, 0xff, 0x49, 0x7e, 0x92, 0x4b, 0x17, 0xa9, 0x45, 0x7c,
	0xe9, 0xf4, 0x13, 0x02, 0x81, 0xb0, 0x2b, 0x87, 0xcb, 0x5d, 0x42, 0xb8, 0xce, 0xdd, 0xce, 0xfb,
	0xce, 0x3b, 0xb0, 0xcf, 0x0c, 0x26, 0x1c, 0xda, 0x16, 0xc4, 0xb2, 0x6a, 0xc4, 0xaa, 0x0e, 0xeb,
	0x46, 0x48, 0x41, 0x4e, 0xd2, 0x5c, 0x42, 0x07, 0xf2, 0x3a, 0x6c, 0xcb, 0xa6, 0x83, 0xbc, 0x7c,
	0x76, 0x5a, 0x81, 0xfc, 0xb4, 0xca, 0xc2, 0x5c, 0xf0, 0xa8, 0x12, 0x95, 0x88, 0x74, 0x63, 0xb6,
	0xfa, 0xa8, 0x2b, 0x5d, 0xe8, 0xd7, 0x38, 0xc0, 0xff, 0x89, 0xf0, 0x71, 0x32, 0xce, 0x7d, 0xa7,
	0xe6, 0x92, 0x27, 0xd8, 0x88, 0x2f, 0x28, 0x9a, 0xa2, 0xc0, 0x9c, 0x39, 0x43, 0xef, 0x19, 0x50,
	0x30, 0x23, 0xbe, 0x20, 0x4f, 0xb1, 0x79, 0x05, 0x05, 0x35, 0xb4, 0x71, 0x30, 0xf4, 0x9e, 0xd9,
	0x42, 0xc1, 0x94, 0xa6, 0xac, 0x04, 0x0a, 0x6a, 0x6e, 0x2c, 0xae, 0xac, 0x04, 0x0a, 0xe2, 0x61,
	0xfb, 0x4a, 0xa6, 0xb2, 0xa4, 0x96, 0x36, 0x8f, 0x86, 0xde, 0xb3, 0x5b, 0x25, 0xb0, 0x51, 0x27,
	0x6f, 0xb0, 0xfd, 0x56, 0x02, 0x2f, 0xa9, 0xad, 0x1b, 0x02, 0xd5, 0x90, 0x2b, 0xe1, 0x47, 0xef,
	0x3d, 0xaf, 0xc4, 0x69, 0x2e, 0x38, 0x17, 0xcb, 0x68, 0x01, 0x59, 0x93, 0x36, 0xd7, 0x91, 0x72,
	0xc2, 0xf7, 0xc0, 0x4b, 0x36, 0xc6, 0x54, 0x3e, 0xd1, 0x79, 0x67, 0x93, 0xe7, 0x7b, 0xe5, 0x75,
	0xcc, 0xff, 0x6a, 0xe0, 0xc7, 0xe7, 0xb9, 0xdc, 0x17, 0xc1, 0xe5, 0x36, 0x82, 0x85, 0xfa, 0xe7,
	0xe5, 0xff, 0x11, 0xf8, 0xd8, 0x39, 0xcf, 0x25, 0x88, 0xe5, 0x3d, 0x03, 0x3c, 0xf4, 0x9e, 0x93,
	0x6a, 0x85, 0xdd, 0x3b, 0x0f, 0x4d, 0xe1, 0xf7, 0x72, 0x0f, 0xfe, 0xb1, 0x5c, 0x05, 0x63, 0x4e,
	0x0f, 0xff, 0x80, 0x51, 0x33, 0x23, 0x9e, 0x93, 0x17, 0xd8, 0x8a, 0xe7, 0xdd, 0x19, 0x3d, 0x9a,
	0xa2, 0xe0, 0x78, 0x76, 0x38, 0xf4, 0x9e, 0x05, 0x75, 0x77, 0xc6, 0xb4, 0xea, 0xa7, 0xf8, 0x64,
	0x87, 0x6a, 0x4b, 0x12, 0xac, 0xae, 0x75, 0x4b, 0xa3, 0x68, 0x6a, 0x06, 0x8f, 0x5e, 0xbd, 0x0c,
	0x77, 0xcf, 0x38, 0xdc, 0x49, 0xb3, 0xbf, 0xa2, 0x33, 0xf7, 0xe6, 0xce, 0x9d, 0xdc, 0xde, 0xb9,
	0x93, 0x9b, 0xb5, 0x8b, 0x6e, 0xd7, 0x2e, 0xfa, 0xb6, 0x76, 0xd1, 0x97, 0xef, 0xee, 0xe4, 0x83,
	0xb5, 0x80, 0xcf, 0x65, 0xe6, 0xe8, 0x03, 0x7f, 0xfd, 0x2b, 0x00, 0x00, 0xff, 0xff, 0x17, 0x1e,
	0x9e, 0xd1, 0x37, 0x03, 0x00, 0x00,
}
