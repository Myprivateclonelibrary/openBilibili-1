// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: bws.proto

/*
	Package bws is a generated protocol buffer package.

	It is generated from these files:
		bws.proto

	It has these top-level messages:
		Users
		Point
		Points
		Achievement
		Achievements
*/
package bws

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import go_common_library_time "go-common/library/time"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Users struct {
	ID    int64                       `protobuf:"varint,1,opt,name=ID,proto3" json:"id"`
	Mid   int64                       `protobuf:"varint,2,opt,name=Mid,proto3" json:"mid"`
	Key   string                      `protobuf:"bytes,3,opt,name=Key,proto3" json:"key"`
	Ctime go_common_library_time.Time `protobuf:"varint,4,opt,name=Ctime,proto3,casttype=go-common/library/time.Time" json:"ctime"`
	Mtime go_common_library_time.Time `protobuf:"varint,5,opt,name=Mtime,proto3,casttype=go-common/library/time.Time" json:"mtime"`
	Bid   int64                       `protobuf:"varint,6,opt,name=Bid,proto3" json:"bid"`
}

func (m *Users) Reset()                    { *m = Users{} }
func (m *Users) String() string            { return proto.CompactTextString(m) }
func (*Users) ProtoMessage()               {}
func (*Users) Descriptor() ([]byte, []int) { return fileDescriptorBws, []int{0} }

type Point struct {
	ID           int64                       `protobuf:"varint,1,opt,name=ID,proto3" json:"id"`
	Name         string                      `protobuf:"bytes,2,opt,name=Name,proto3" json:"name"`
	Icon         string                      `protobuf:"bytes,3,opt,name=Icon,proto3" json:"icon"`
	Fid          int64                       `protobuf:"varint,4,opt,name=Fid,proto3" json:"fid"`
	Image        string                      `protobuf:"bytes,5,opt,name=Image,proto3" json:"image"`
	Unlocked     int64                       `protobuf:"varint,6,opt,name=Unlocked,proto3" json:"unlocked"`
	LockType     int64                       `protobuf:"varint,7,opt,name=LockType,proto3" json:"lockType"`
	Dic          string                      `protobuf:"bytes,8,opt,name=Dic,proto3" json:"dic"`
	Rule         string                      `protobuf:"bytes,9,opt,name=Rule,proto3" json:"rule"`
	Bid          int64                       `protobuf:"varint,10,opt,name=Bid,proto3" json:"bid"`
	LoseUnlocked int64                       `protobuf:"varint,11,opt,name=LoseUnlocked,proto3" json:"lose_unlocked"`
	OtherIp      string                      `protobuf:"bytes,12,opt,name=OtherIp,proto3" json:"other_ip"`
	Ower         int64                       `protobuf:"varint,13,opt,name=Ower,proto3" json:"ower"`
	Ctime        go_common_library_time.Time `protobuf:"varint,14,opt,name=Ctime,proto3,casttype=go-common/library/time.Time" json:"ctime"`
	Mtime        go_common_library_time.Time `protobuf:"varint,15,opt,name=Mtime,proto3,casttype=go-common/library/time.Time" json:"mtime"`
}

func (m *Point) Reset()                    { *m = Point{} }
func (m *Point) String() string            { return proto.CompactTextString(m) }
func (*Point) ProtoMessage()               {}
func (*Point) Descriptor() ([]byte, []int) { return fileDescriptorBws, []int{1} }

type Points struct {
	Points []*Point `protobuf:"bytes,1,rep,name=points" json:"points,omitempty"`
}

func (m *Points) Reset()                    { *m = Points{} }
func (m *Points) String() string            { return proto.CompactTextString(m) }
func (*Points) ProtoMessage()               {}
func (*Points) Descriptor() ([]byte, []int) { return fileDescriptorBws, []int{2} }

type Achievement struct {
	ID            int64                       `protobuf:"varint,1,opt,name=ID,proto3" json:"id"`
	Name          string                      `protobuf:"bytes,2,opt,name=Name,proto3" json:"name"`
	Icon          string                      `protobuf:"bytes,3,opt,name=Icon,proto3" json:"icon"`
	Dic           string                      `protobuf:"bytes,4,opt,name=Dic,proto3" json:"dic"`
	LockType      int64                       `protobuf:"varint,5,opt,name=LockType,proto3" json:"lockType"`
	Unlock        int64                       `protobuf:"varint,6,opt,name=Unlock,proto3" json:"unlock"`
	Bid           int64                       `protobuf:"varint,7,opt,name=Bid,proto3" json:"bid"`
	IconBig       string                      `protobuf:"bytes,8,opt,name=IconBig,proto3" json:"icon_big"`
	IconActive    string                      `protobuf:"bytes,9,opt,name=IconActive,proto3" json:"icon_active"`
	IconActiveBig string                      `protobuf:"bytes,10,opt,name=IconActiveBig,proto3" json:"icon_active_big"`
	Award         int64                       `protobuf:"varint,11,opt,name=Award,proto3" json:"award"`
	UserCount     int64                       `protobuf:"varint,12,opt,name=UserCount,proto3" json:"user_count"`
	Ctime         go_common_library_time.Time `protobuf:"varint,13,opt,name=Ctime,proto3,casttype=go-common/library/time.Time" json:"ctime"`
	Mtime         go_common_library_time.Time `protobuf:"varint,14,opt,name=Mtime,proto3,casttype=go-common/library/time.Time" json:"mtime"`
	Image         string                      `protobuf:"bytes,15,opt,name=Image,proto3" json:"image"`
	SuitID        int64                       `protobuf:"varint,16,opt,name=SuitID,proto3" json:"suit_id"`
}

func (m *Achievement) Reset()                    { *m = Achievement{} }
func (m *Achievement) String() string            { return proto.CompactTextString(m) }
func (*Achievement) ProtoMessage()               {}
func (*Achievement) Descriptor() ([]byte, []int) { return fileDescriptorBws, []int{3} }

type Achievements struct {
	Achievements []*Achievement `protobuf:"bytes,1,rep,name=achievements" json:"achievements,omitempty"`
}

func (m *Achievements) Reset()                    { *m = Achievements{} }
func (m *Achievements) String() string            { return proto.CompactTextString(m) }
func (*Achievements) ProtoMessage()               {}
func (*Achievements) Descriptor() ([]byte, []int) { return fileDescriptorBws, []int{4} }

func init() {
	proto.RegisterType((*Users)(nil), "activity.service.Users")
	proto.RegisterType((*Point)(nil), "activity.service.Point")
	proto.RegisterType((*Points)(nil), "activity.service.Points")
	proto.RegisterType((*Achievement)(nil), "activity.service.Achievement")
	proto.RegisterType((*Achievements)(nil), "activity.service.Achievements")
}
func (m *Users) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Users) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintBws(dAtA, i, uint64(m.ID))
	}
	if m.Mid != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintBws(dAtA, i, uint64(m.Mid))
	}
	if len(m.Key) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintBws(dAtA, i, uint64(len(m.Key)))
		i += copy(dAtA[i:], m.Key)
	}
	if m.Ctime != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintBws(dAtA, i, uint64(m.Ctime))
	}
	if m.Mtime != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintBws(dAtA, i, uint64(m.Mtime))
	}
	if m.Bid != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintBws(dAtA, i, uint64(m.Bid))
	}
	return i, nil
}

func (m *Point) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Point) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintBws(dAtA, i, uint64(m.ID))
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintBws(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.Icon) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintBws(dAtA, i, uint64(len(m.Icon)))
		i += copy(dAtA[i:], m.Icon)
	}
	if m.Fid != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintBws(dAtA, i, uint64(m.Fid))
	}
	if len(m.Image) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintBws(dAtA, i, uint64(len(m.Image)))
		i += copy(dAtA[i:], m.Image)
	}
	if m.Unlocked != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintBws(dAtA, i, uint64(m.Unlocked))
	}
	if m.LockType != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintBws(dAtA, i, uint64(m.LockType))
	}
	if len(m.Dic) > 0 {
		dAtA[i] = 0x42
		i++
		i = encodeVarintBws(dAtA, i, uint64(len(m.Dic)))
		i += copy(dAtA[i:], m.Dic)
	}
	if len(m.Rule) > 0 {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintBws(dAtA, i, uint64(len(m.Rule)))
		i += copy(dAtA[i:], m.Rule)
	}
	if m.Bid != 0 {
		dAtA[i] = 0x50
		i++
		i = encodeVarintBws(dAtA, i, uint64(m.Bid))
	}
	if m.LoseUnlocked != 0 {
		dAtA[i] = 0x58
		i++
		i = encodeVarintBws(dAtA, i, uint64(m.LoseUnlocked))
	}
	if len(m.OtherIp) > 0 {
		dAtA[i] = 0x62
		i++
		i = encodeVarintBws(dAtA, i, uint64(len(m.OtherIp)))
		i += copy(dAtA[i:], m.OtherIp)
	}
	if m.Ower != 0 {
		dAtA[i] = 0x68
		i++
		i = encodeVarintBws(dAtA, i, uint64(m.Ower))
	}
	if m.Ctime != 0 {
		dAtA[i] = 0x70
		i++
		i = encodeVarintBws(dAtA, i, uint64(m.Ctime))
	}
	if m.Mtime != 0 {
		dAtA[i] = 0x78
		i++
		i = encodeVarintBws(dAtA, i, uint64(m.Mtime))
	}
	return i, nil
}

func (m *Points) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Points) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Points) > 0 {
		for _, msg := range m.Points {
			dAtA[i] = 0xa
			i++
			i = encodeVarintBws(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *Achievement) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Achievement) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintBws(dAtA, i, uint64(m.ID))
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintBws(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.Icon) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintBws(dAtA, i, uint64(len(m.Icon)))
		i += copy(dAtA[i:], m.Icon)
	}
	if len(m.Dic) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintBws(dAtA, i, uint64(len(m.Dic)))
		i += copy(dAtA[i:], m.Dic)
	}
	if m.LockType != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintBws(dAtA, i, uint64(m.LockType))
	}
	if m.Unlock != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintBws(dAtA, i, uint64(m.Unlock))
	}
	if m.Bid != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintBws(dAtA, i, uint64(m.Bid))
	}
	if len(m.IconBig) > 0 {
		dAtA[i] = 0x42
		i++
		i = encodeVarintBws(dAtA, i, uint64(len(m.IconBig)))
		i += copy(dAtA[i:], m.IconBig)
	}
	if len(m.IconActive) > 0 {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintBws(dAtA, i, uint64(len(m.IconActive)))
		i += copy(dAtA[i:], m.IconActive)
	}
	if len(m.IconActiveBig) > 0 {
		dAtA[i] = 0x52
		i++
		i = encodeVarintBws(dAtA, i, uint64(len(m.IconActiveBig)))
		i += copy(dAtA[i:], m.IconActiveBig)
	}
	if m.Award != 0 {
		dAtA[i] = 0x58
		i++
		i = encodeVarintBws(dAtA, i, uint64(m.Award))
	}
	if m.UserCount != 0 {
		dAtA[i] = 0x60
		i++
		i = encodeVarintBws(dAtA, i, uint64(m.UserCount))
	}
	if m.Ctime != 0 {
		dAtA[i] = 0x68
		i++
		i = encodeVarintBws(dAtA, i, uint64(m.Ctime))
	}
	if m.Mtime != 0 {
		dAtA[i] = 0x70
		i++
		i = encodeVarintBws(dAtA, i, uint64(m.Mtime))
	}
	if len(m.Image) > 0 {
		dAtA[i] = 0x7a
		i++
		i = encodeVarintBws(dAtA, i, uint64(len(m.Image)))
		i += copy(dAtA[i:], m.Image)
	}
	if m.SuitID != 0 {
		dAtA[i] = 0x80
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintBws(dAtA, i, uint64(m.SuitID))
	}
	return i, nil
}

func (m *Achievements) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Achievements) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Achievements) > 0 {
		for _, msg := range m.Achievements {
			dAtA[i] = 0xa
			i++
			i = encodeVarintBws(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func encodeVarintBws(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Users) Size() (n int) {
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovBws(uint64(m.ID))
	}
	if m.Mid != 0 {
		n += 1 + sovBws(uint64(m.Mid))
	}
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovBws(uint64(l))
	}
	if m.Ctime != 0 {
		n += 1 + sovBws(uint64(m.Ctime))
	}
	if m.Mtime != 0 {
		n += 1 + sovBws(uint64(m.Mtime))
	}
	if m.Bid != 0 {
		n += 1 + sovBws(uint64(m.Bid))
	}
	return n
}

func (m *Point) Size() (n int) {
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovBws(uint64(m.ID))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovBws(uint64(l))
	}
	l = len(m.Icon)
	if l > 0 {
		n += 1 + l + sovBws(uint64(l))
	}
	if m.Fid != 0 {
		n += 1 + sovBws(uint64(m.Fid))
	}
	l = len(m.Image)
	if l > 0 {
		n += 1 + l + sovBws(uint64(l))
	}
	if m.Unlocked != 0 {
		n += 1 + sovBws(uint64(m.Unlocked))
	}
	if m.LockType != 0 {
		n += 1 + sovBws(uint64(m.LockType))
	}
	l = len(m.Dic)
	if l > 0 {
		n += 1 + l + sovBws(uint64(l))
	}
	l = len(m.Rule)
	if l > 0 {
		n += 1 + l + sovBws(uint64(l))
	}
	if m.Bid != 0 {
		n += 1 + sovBws(uint64(m.Bid))
	}
	if m.LoseUnlocked != 0 {
		n += 1 + sovBws(uint64(m.LoseUnlocked))
	}
	l = len(m.OtherIp)
	if l > 0 {
		n += 1 + l + sovBws(uint64(l))
	}
	if m.Ower != 0 {
		n += 1 + sovBws(uint64(m.Ower))
	}
	if m.Ctime != 0 {
		n += 1 + sovBws(uint64(m.Ctime))
	}
	if m.Mtime != 0 {
		n += 1 + sovBws(uint64(m.Mtime))
	}
	return n
}

func (m *Points) Size() (n int) {
	var l int
	_ = l
	if len(m.Points) > 0 {
		for _, e := range m.Points {
			l = e.Size()
			n += 1 + l + sovBws(uint64(l))
		}
	}
	return n
}

func (m *Achievement) Size() (n int) {
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovBws(uint64(m.ID))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovBws(uint64(l))
	}
	l = len(m.Icon)
	if l > 0 {
		n += 1 + l + sovBws(uint64(l))
	}
	l = len(m.Dic)
	if l > 0 {
		n += 1 + l + sovBws(uint64(l))
	}
	if m.LockType != 0 {
		n += 1 + sovBws(uint64(m.LockType))
	}
	if m.Unlock != 0 {
		n += 1 + sovBws(uint64(m.Unlock))
	}
	if m.Bid != 0 {
		n += 1 + sovBws(uint64(m.Bid))
	}
	l = len(m.IconBig)
	if l > 0 {
		n += 1 + l + sovBws(uint64(l))
	}
	l = len(m.IconActive)
	if l > 0 {
		n += 1 + l + sovBws(uint64(l))
	}
	l = len(m.IconActiveBig)
	if l > 0 {
		n += 1 + l + sovBws(uint64(l))
	}
	if m.Award != 0 {
		n += 1 + sovBws(uint64(m.Award))
	}
	if m.UserCount != 0 {
		n += 1 + sovBws(uint64(m.UserCount))
	}
	if m.Ctime != 0 {
		n += 1 + sovBws(uint64(m.Ctime))
	}
	if m.Mtime != 0 {
		n += 1 + sovBws(uint64(m.Mtime))
	}
	l = len(m.Image)
	if l > 0 {
		n += 1 + l + sovBws(uint64(l))
	}
	if m.SuitID != 0 {
		n += 2 + sovBws(uint64(m.SuitID))
	}
	return n
}

func (m *Achievements) Size() (n int) {
	var l int
	_ = l
	if len(m.Achievements) > 0 {
		for _, e := range m.Achievements {
			l = e.Size()
			n += 1 + l + sovBws(uint64(l))
		}
	}
	return n
}

func sovBws(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozBws(x uint64) (n int) {
	return sovBws(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Users) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBws
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Users: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Users: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBws
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBws
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBws
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBws
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ctime", wireType)
			}
			m.Ctime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBws
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ctime |= (go_common_library_time.Time(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mtime", wireType)
			}
			m.Mtime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBws
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mtime |= (go_common_library_time.Time(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bid", wireType)
			}
			m.Bid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBws
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Bid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBws(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBws
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Point) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBws
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Point: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Point: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBws
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBws
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBws
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Icon", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBws
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBws
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Icon = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fid", wireType)
			}
			m.Fid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBws
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Fid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Image", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBws
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBws
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Image = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Unlocked", wireType)
			}
			m.Unlocked = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBws
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Unlocked |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LockType", wireType)
			}
			m.LockType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBws
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LockType |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dic", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBws
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBws
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Dic = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rule", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBws
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBws
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Rule = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bid", wireType)
			}
			m.Bid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBws
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Bid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LoseUnlocked", wireType)
			}
			m.LoseUnlocked = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBws
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LoseUnlocked |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OtherIp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBws
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBws
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OtherIp = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ower", wireType)
			}
			m.Ower = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBws
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ower |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ctime", wireType)
			}
			m.Ctime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBws
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ctime |= (go_common_library_time.Time(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mtime", wireType)
			}
			m.Mtime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBws
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mtime |= (go_common_library_time.Time(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBws(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBws
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Points) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBws
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Points: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Points: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Points", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBws
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBws
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Points = append(m.Points, &Point{})
			if err := m.Points[len(m.Points)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBws(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBws
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Achievement) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBws
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Achievement: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Achievement: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBws
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBws
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBws
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Icon", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBws
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBws
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Icon = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dic", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBws
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBws
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Dic = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LockType", wireType)
			}
			m.LockType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBws
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LockType |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Unlock", wireType)
			}
			m.Unlock = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBws
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Unlock |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bid", wireType)
			}
			m.Bid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBws
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Bid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IconBig", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBws
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBws
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IconBig = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IconActive", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBws
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBws
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IconActive = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IconActiveBig", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBws
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBws
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IconActiveBig = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Award", wireType)
			}
			m.Award = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBws
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Award |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserCount", wireType)
			}
			m.UserCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBws
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserCount |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ctime", wireType)
			}
			m.Ctime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBws
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ctime |= (go_common_library_time.Time(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mtime", wireType)
			}
			m.Mtime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBws
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mtime |= (go_common_library_time.Time(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Image", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBws
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBws
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Image = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SuitID", wireType)
			}
			m.SuitID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBws
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SuitID |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBws(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBws
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Achievements) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBws
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Achievements: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Achievements: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Achievements", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBws
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBws
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Achievements = append(m.Achievements, &Achievement{})
			if err := m.Achievements[len(m.Achievements)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBws(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBws
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipBws(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowBws
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBws
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBws
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthBws
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowBws
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipBws(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthBws = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowBws   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("bws.proto", fileDescriptorBws) }

var fileDescriptorBws = []byte{
	// 745 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x55, 0xcd, 0x4e, 0xdb, 0x4c,
	0x14, 0xc5, 0x49, 0xec, 0x24, 0x93, 0x84, 0xf0, 0xf9, 0x93, 0xbe, 0xcf, 0xfd, 0x21, 0x46, 0xa9,
	0x84, 0xb2, 0x28, 0x89, 0xd4, 0xaa, 0x0b, 0x36, 0x95, 0x62, 0x22, 0xa4, 0xa8, 0x50, 0xda, 0x29,
	0x6c, 0xba, 0x89, 0xfc, 0x33, 0x84, 0x11, 0x71, 0x26, 0xf2, 0x0f, 0x51, 0x5e, 0xa2, 0xeb, 0x3e,
	0x4c, 0x1f, 0x80, 0x25, 0x4f, 0x60, 0x15, 0xba, 0xf3, 0xaa, 0xeb, 0xae, 0xaa, 0x7b, 0xed, 0xc4,
	0xa1, 0x40, 0x55, 0x81, 0xba, 0xf3, 0x9c, 0x73, 0x8f, 0xef, 0xb9, 0x33, 0xc7, 0x63, 0x52, 0xb6,
	0xa6, 0x7e, 0x7b, 0xe2, 0x89, 0x40, 0xa8, 0x6b, 0xa6, 0x1d, 0xf0, 0x33, 0x1e, 0xcc, 0xda, 0x3e,
	0xf3, 0xce, 0xb8, 0xcd, 0x1e, 0x6f, 0x0d, 0x79, 0x70, 0x12, 0x5a, 0x6d, 0x5b, 0xb8, 0x9d, 0xa1,
	0x18, 0x8a, 0x0e, 0x16, 0x5a, 0xe1, 0x31, 0xae, 0x70, 0x81, 0x4f, 0xc9, 0x0b, 0x9a, 0xdf, 0x25,
	0x22, 0x1f, 0xf9, 0xcc, 0xf3, 0xd5, 0xff, 0x48, 0xae, 0xdf, 0xd3, 0xa4, 0x0d, 0xa9, 0x95, 0x37,
	0x94, 0x38, 0xd2, 0x73, 0xdc, 0xa1, 0xb9, 0x7e, 0x4f, 0x7d, 0x44, 0xf2, 0xfb, 0xdc, 0xd1, 0x72,
	0x48, 0x14, 0xe3, 0x48, 0xcf, 0xbb, 0xdc, 0xa1, 0x80, 0x01, 0xf5, 0x86, 0xcd, 0xb4, 0xfc, 0x86,
	0xd4, 0x2a, 0x27, 0xd4, 0x29, 0x9b, 0x51, 0xc0, 0xd4, 0xd7, 0x44, 0xde, 0x09, 0xb8, 0xcb, 0xb4,
	0x02, 0xea, 0x5a, 0x71, 0xa4, 0xcb, 0x36, 0x00, 0x3f, 0x22, 0xfd, 0xc9, 0x50, 0x6c, 0xd9, 0xc2,
	0x75, 0xc5, 0xb8, 0x33, 0xe2, 0x96, 0x67, 0x7a, 0xb3, 0x0e, 0x30, 0xed, 0x43, 0xee, 0x32, 0x9a,
	0xc8, 0x40, 0xbf, 0x8f, 0x7a, 0x39, 0xd3, 0xbb, 0x7f, 0xa4, 0x47, 0x19, 0x58, 0x33, 0xb8, 0xa3,
	0x29, 0x99, 0x6b, 0x0b, 0x5c, 0x1b, 0xdc, 0x69, 0x7e, 0x29, 0x10, 0xf9, 0x9d, 0xe0, 0xe3, 0xe0,
	0xce, 0x91, 0x9f, 0x92, 0xc2, 0x5b, 0xd3, 0x65, 0x38, 0x73, 0xd9, 0x28, 0xc5, 0x91, 0x5e, 0x18,
	0x9b, 0x2e, 0xa3, 0x88, 0x02, 0xdb, 0xb7, 0xc5, 0x38, 0x1d, 0x1b, 0x59, 0x6e, 0x8b, 0x31, 0x45,
	0x14, 0x1a, 0xef, 0x72, 0x27, 0x1d, 0x1b, 0x1b, 0x1f, 0x43, 0xe3, 0x5d, 0xee, 0xa8, 0x3a, 0x91,
	0xfb, 0xae, 0x39, 0x4c, 0x66, 0x2a, 0x1b, 0x65, 0x98, 0x89, 0x03, 0x40, 0x13, 0x5c, 0x6d, 0x91,
	0xd2, 0xd1, 0x78, 0x24, 0xec, 0x53, 0x36, 0x77, 0x5e, 0x8d, 0x23, 0xbd, 0x14, 0xa6, 0x18, 0x5d,
	0xb0, 0x50, 0xb9, 0x27, 0xec, 0xd3, 0xc3, 0xd9, 0x84, 0x69, 0xc5, 0xac, 0x72, 0x94, 0x62, 0x74,
	0xc1, 0x82, 0x9f, 0x1e, 0xb7, 0xb5, 0x52, 0x76, 0x46, 0x0e, 0xb7, 0x29, 0x60, 0x30, 0x08, 0x0d,
	0x47, 0x4c, 0x2b, 0x67, 0x83, 0x78, 0xe1, 0x88, 0x51, 0x44, 0xe7, 0x3b, 0x48, 0x6e, 0xee, 0xa0,
	0xfa, 0x8a, 0x54, 0xf7, 0x84, 0xcf, 0x16, 0x5e, 0x2b, 0x58, 0xf3, 0x4f, 0x1c, 0xe9, 0xb5, 0x91,
	0xf0, 0xd9, 0x60, 0x61, 0xf8, 0x5a, 0x99, 0xba, 0x49, 0x8a, 0x07, 0xc1, 0x09, 0xf3, 0xfa, 0x13,
	0xad, 0x8a, 0x2d, 0xd1, 0xb3, 0x00, 0x68, 0xc0, 0x27, 0x74, 0x4e, 0x82, 0xaf, 0x83, 0x29, 0xf3,
	0xb4, 0x1a, 0xbe, 0x16, 0x7d, 0x89, 0x29, 0xf3, 0x28, 0xa2, 0x59, 0xb2, 0x56, 0x1f, 0x98, 0xac,
	0xfa, 0xbd, 0x92, 0xd5, 0xdc, 0x26, 0x0a, 0xa6, 0xc7, 0x57, 0x3b, 0x44, 0x99, 0xe0, 0x93, 0x26,
	0x6d, 0xe4, 0x5b, 0x95, 0x17, 0xff, 0xb7, 0x7f, 0xfd, 0x1a, 0xdb, 0x58, 0x49, 0xd3, 0xb2, 0xe6,
	0x27, 0x99, 0x54, 0xba, 0xf6, 0x09, 0x67, 0x67, 0xcc, 0x65, 0x7f, 0x2f, 0x7f, 0x70, 0xde, 0x85,
	0x5b, 0xce, 0x7b, 0x39, 0x34, 0xf2, 0x6f, 0x43, 0xd3, 0x24, 0x4a, 0x72, 0x6a, 0x69, 0x0c, 0x49,
	0x1c, 0xe9, 0x4a, 0x72, 0xaa, 0x34, 0x65, 0xe6, 0xf9, 0x28, 0xde, 0x92, 0x8f, 0x4d, 0x52, 0x04,
	0x2f, 0x06, 0x1f, 0xa6, 0xb9, 0xc3, 0x3e, 0x60, 0x72, 0x60, 0xf1, 0x21, 0x9d, 0x93, 0x6a, 0x87,
	0x10, 0x78, 0xec, 0xc2, 0xae, 0xcd, 0x63, 0x58, 0x8f, 0x23, 0xbd, 0x82, 0xa5, 0xb8, 0x99, 0x8c,
	0x2e, 0x95, 0xa8, 0xdb, 0xa4, 0x96, 0xad, 0xe0, 0xf5, 0x04, 0x35, 0xff, 0xc6, 0x91, 0x5e, 0x5f,
	0xd2, 0x60, 0x97, 0xeb, 0x95, 0xf0, 0xf1, 0x75, 0xa7, 0xa6, 0x37, 0x0f, 0x2b, 0x7e, 0x7c, 0x26,
	0x00, 0x34, 0xc1, 0xd5, 0xe7, 0xa4, 0x0c, 0x17, 0xe1, 0x8e, 0x08, 0xc7, 0x01, 0xe6, 0x33, 0x6f,
	0xac, 0xc6, 0x91, 0x4e, 0x42, 0x9f, 0x79, 0x03, 0x1b, 0x50, 0x9a, 0x15, 0x64, 0x29, 0xac, 0x3d,
	0x30, 0x85, 0xab, 0xf7, 0xbb, 0xdf, 0x16, 0x77, 0x49, 0xfd, 0x8e, 0xbb, 0xe4, 0x19, 0x51, 0x3e,
	0x84, 0x3c, 0xe8, 0xf7, 0xb4, 0x35, 0xec, 0x50, 0x89, 0x23, 0xbd, 0xe8, 0x87, 0x3c, 0x18, 0x70,
	0x87, 0xa6, 0x54, 0xf3, 0x3d, 0xa9, 0x2e, 0xe5, 0xd1, 0x57, 0xbb, 0xa4, 0x6a, 0x2e, 0xad, 0xd3,
	0x5c, 0xaf, 0xdf, 0xcc, 0xf5, 0x92, 0x8a, 0x5e, 0x93, 0x18, 0xeb, 0xe7, 0x97, 0x8d, 0x95, 0x8b,
	0xcb, 0xc6, 0xca, 0xf9, 0x55, 0x43, 0xba, 0xb8, 0x6a, 0x48, 0x5f, 0xaf, 0x1a, 0xd2, 0xe7, 0x6f,
	0x8d, 0x95, 0x8f, 0x79, 0x6b, 0xea, 0x5b, 0x0a, 0xfe, 0x76, 0x5e, 0xfe, 0x0c, 0x00, 0x00, 0xff,
	0xff, 0x89, 0x08, 0x4e, 0x13, 0xc4, 0x06, 0x00, 0x00,
}
