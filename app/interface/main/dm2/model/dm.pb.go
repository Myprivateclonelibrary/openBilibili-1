// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: app/interface/main/dm2/model/dm.proto

/*
	Package model is a generated protocol buffer package.

	It is generated from these files:
		app/interface/main/dm2/model/dm.proto

	It has these top-level messages:
		DM
		Content
		ContentSpecial
		Elem
		DMSeg
*/
package model

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import go_common_library_time "go-common/library/time"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type DM struct {
	ID         int64                       `protobuf:"varint,1,opt,name=ID,proto3" json:"id"`
	Type       int32                       `protobuf:"varint,2,opt,name=Type,proto3" json:"type"`
	Oid        int64                       `protobuf:"varint,3,opt,name=Oid,proto3" json:"oid"`
	Mid        int64                       `protobuf:"varint,4,opt,name=Mid,proto3" json:"mid"`
	Progress   int32                       `protobuf:"varint,5,opt,name=Progress,proto3" json:"progress"`
	Pool       int32                       `protobuf:"varint,6,opt,name=Pool,proto3" json:"pool"`
	Attr       int32                       `protobuf:"varint,7,opt,name=Attr,proto3" json:"attr"`
	State      int32                       `protobuf:"varint,8,opt,name=State,proto3" json:"state"`
	Ctime      go_common_library_time.Time `protobuf:"varint,9,opt,name=Ctime,proto3,casttype=go-common/library/time.Time" json:"ctime"`
	Mtime      go_common_library_time.Time `protobuf:"varint,10,opt,name=Mtime,proto3,casttype=go-common/library/time.Time" json:"mtime"`
	Content    *Content                    `protobuf:"bytes,11,opt,name=Content" json:"content,omitempty"`
	ContentSpe *ContentSpecial             `protobuf:"bytes,12,opt,name=ContentSpe" json:"content_special,omitempty"`
}

func (m *DM) Reset()                    { *m = DM{} }
func (m *DM) String() string            { return proto.CompactTextString(m) }
func (*DM) ProtoMessage()               {}
func (*DM) Descriptor() ([]byte, []int) { return fileDescriptorDm, []int{0} }

type Content struct {
	ID       int64                       `protobuf:"varint,1,opt,name=ID,proto3" json:"id"`
	FontSize int32                       `protobuf:"varint,2,opt,name=FontSize,proto3" json:"fontsize"`
	Color    int64                       `protobuf:"varint,3,opt,name=Color,proto3" json:"color"`
	Mode     int32                       `protobuf:"varint,4,opt,name=Mode,proto3" json:"mode"`
	IP       int64                       `protobuf:"varint,5,opt,name=IP,proto3" json:"ip"`
	Plat     int32                       `protobuf:"varint,6,opt,name=Plat,proto3" json:"plat"`
	Msg      string                      `protobuf:"bytes,7,opt,name=Msg,proto3" json:"msg"`
	Ctime    go_common_library_time.Time `protobuf:"varint,8,opt,name=Ctime,proto3,casttype=go-common/library/time.Time" json:"ctime"`
	Mtime    go_common_library_time.Time `protobuf:"varint,9,opt,name=Mtime,proto3,casttype=go-common/library/time.Time" json:"mtime"`
}

func (m *Content) Reset()                    { *m = Content{} }
func (m *Content) String() string            { return proto.CompactTextString(m) }
func (*Content) ProtoMessage()               {}
func (*Content) Descriptor() ([]byte, []int) { return fileDescriptorDm, []int{1} }

type ContentSpecial struct {
	ID    int64                       `protobuf:"varint,1,opt,name=ID,proto3" json:"id"`
	Msg   string                      `protobuf:"bytes,2,opt,name=Msg,proto3" json:"msg"`
	Ctime go_common_library_time.Time `protobuf:"varint,3,opt,name=Ctime,proto3,casttype=go-common/library/time.Time" json:"ctime"`
	Mtime go_common_library_time.Time `protobuf:"varint,4,opt,name=Mtime,proto3,casttype=go-common/library/time.Time" json:"mtime"`
}

func (m *ContentSpecial) Reset()                    { *m = ContentSpecial{} }
func (m *ContentSpecial) String() string            { return proto.CompactTextString(m) }
func (*ContentSpecial) ProtoMessage()               {}
func (*ContentSpecial) Descriptor() ([]byte, []int) { return fileDescriptorDm, []int{2} }

type Elem struct {
	Attribute string `protobuf:"bytes,1,opt,name=Attribute,proto3" json:"attribute,omitempty"`
	Content   string `protobuf:"bytes,2,opt,name=Content,proto3" json:"content,omitempty"`
}

func (m *Elem) Reset()                    { *m = Elem{} }
func (m *Elem) String() string            { return proto.CompactTextString(m) }
func (*Elem) ProtoMessage()               {}
func (*Elem) Descriptor() ([]byte, []int) { return fileDescriptorDm, []int{3} }

type DMSeg struct {
	Elems      []*Elem  `protobuf:"bytes,1,rep,name=Elems" json:"dms"`
	SpecialURL []string `protobuf:"bytes,2,rep,name=SpecialURL" json:"special_url,omitempty"`
}

func (m *DMSeg) Reset()                    { *m = DMSeg{} }
func (m *DMSeg) String() string            { return proto.CompactTextString(m) }
func (*DMSeg) ProtoMessage()               {}
func (*DMSeg) Descriptor() ([]byte, []int) { return fileDescriptorDm, []int{4} }

func init() {
	proto.RegisterType((*DM)(nil), "model.DM")
	proto.RegisterType((*Content)(nil), "model.Content")
	proto.RegisterType((*ContentSpecial)(nil), "model.ContentSpecial")
	proto.RegisterType((*Elem)(nil), "model.Elem")
	proto.RegisterType((*DMSeg)(nil), "model.DMSeg")
}
func (m *DM) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DM) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintDm(dAtA, i, uint64(m.ID))
	}
	if m.Type != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintDm(dAtA, i, uint64(m.Type))
	}
	if m.Oid != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintDm(dAtA, i, uint64(m.Oid))
	}
	if m.Mid != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintDm(dAtA, i, uint64(m.Mid))
	}
	if m.Progress != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintDm(dAtA, i, uint64(m.Progress))
	}
	if m.Pool != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintDm(dAtA, i, uint64(m.Pool))
	}
	if m.Attr != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintDm(dAtA, i, uint64(m.Attr))
	}
	if m.State != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintDm(dAtA, i, uint64(m.State))
	}
	if m.Ctime != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintDm(dAtA, i, uint64(m.Ctime))
	}
	if m.Mtime != 0 {
		dAtA[i] = 0x50
		i++
		i = encodeVarintDm(dAtA, i, uint64(m.Mtime))
	}
	if m.Content != nil {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintDm(dAtA, i, uint64(m.Content.Size()))
		n1, err := m.Content.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.ContentSpe != nil {
		dAtA[i] = 0x62
		i++
		i = encodeVarintDm(dAtA, i, uint64(m.ContentSpe.Size()))
		n2, err := m.ContentSpe.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	return i, nil
}

func (m *Content) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Content) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintDm(dAtA, i, uint64(m.ID))
	}
	if m.FontSize != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintDm(dAtA, i, uint64(m.FontSize))
	}
	if m.Color != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintDm(dAtA, i, uint64(m.Color))
	}
	if m.Mode != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintDm(dAtA, i, uint64(m.Mode))
	}
	if m.IP != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintDm(dAtA, i, uint64(m.IP))
	}
	if m.Plat != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintDm(dAtA, i, uint64(m.Plat))
	}
	if len(m.Msg) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintDm(dAtA, i, uint64(len(m.Msg)))
		i += copy(dAtA[i:], m.Msg)
	}
	if m.Ctime != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintDm(dAtA, i, uint64(m.Ctime))
	}
	if m.Mtime != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintDm(dAtA, i, uint64(m.Mtime))
	}
	return i, nil
}

func (m *ContentSpecial) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ContentSpecial) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintDm(dAtA, i, uint64(m.ID))
	}
	if len(m.Msg) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintDm(dAtA, i, uint64(len(m.Msg)))
		i += copy(dAtA[i:], m.Msg)
	}
	if m.Ctime != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintDm(dAtA, i, uint64(m.Ctime))
	}
	if m.Mtime != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintDm(dAtA, i, uint64(m.Mtime))
	}
	return i, nil
}

func (m *Elem) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Elem) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Attribute) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintDm(dAtA, i, uint64(len(m.Attribute)))
		i += copy(dAtA[i:], m.Attribute)
	}
	if len(m.Content) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintDm(dAtA, i, uint64(len(m.Content)))
		i += copy(dAtA[i:], m.Content)
	}
	return i, nil
}

func (m *DMSeg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DMSeg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Elems) > 0 {
		for _, msg := range m.Elems {
			dAtA[i] = 0xa
			i++
			i = encodeVarintDm(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.SpecialURL) > 0 {
		for _, s := range m.SpecialURL {
			dAtA[i] = 0x12
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	return i, nil
}

func encodeVarintDm(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *DM) Size() (n int) {
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovDm(uint64(m.ID))
	}
	if m.Type != 0 {
		n += 1 + sovDm(uint64(m.Type))
	}
	if m.Oid != 0 {
		n += 1 + sovDm(uint64(m.Oid))
	}
	if m.Mid != 0 {
		n += 1 + sovDm(uint64(m.Mid))
	}
	if m.Progress != 0 {
		n += 1 + sovDm(uint64(m.Progress))
	}
	if m.Pool != 0 {
		n += 1 + sovDm(uint64(m.Pool))
	}
	if m.Attr != 0 {
		n += 1 + sovDm(uint64(m.Attr))
	}
	if m.State != 0 {
		n += 1 + sovDm(uint64(m.State))
	}
	if m.Ctime != 0 {
		n += 1 + sovDm(uint64(m.Ctime))
	}
	if m.Mtime != 0 {
		n += 1 + sovDm(uint64(m.Mtime))
	}
	if m.Content != nil {
		l = m.Content.Size()
		n += 1 + l + sovDm(uint64(l))
	}
	if m.ContentSpe != nil {
		l = m.ContentSpe.Size()
		n += 1 + l + sovDm(uint64(l))
	}
	return n
}

func (m *Content) Size() (n int) {
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovDm(uint64(m.ID))
	}
	if m.FontSize != 0 {
		n += 1 + sovDm(uint64(m.FontSize))
	}
	if m.Color != 0 {
		n += 1 + sovDm(uint64(m.Color))
	}
	if m.Mode != 0 {
		n += 1 + sovDm(uint64(m.Mode))
	}
	if m.IP != 0 {
		n += 1 + sovDm(uint64(m.IP))
	}
	if m.Plat != 0 {
		n += 1 + sovDm(uint64(m.Plat))
	}
	l = len(m.Msg)
	if l > 0 {
		n += 1 + l + sovDm(uint64(l))
	}
	if m.Ctime != 0 {
		n += 1 + sovDm(uint64(m.Ctime))
	}
	if m.Mtime != 0 {
		n += 1 + sovDm(uint64(m.Mtime))
	}
	return n
}

func (m *ContentSpecial) Size() (n int) {
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovDm(uint64(m.ID))
	}
	l = len(m.Msg)
	if l > 0 {
		n += 1 + l + sovDm(uint64(l))
	}
	if m.Ctime != 0 {
		n += 1 + sovDm(uint64(m.Ctime))
	}
	if m.Mtime != 0 {
		n += 1 + sovDm(uint64(m.Mtime))
	}
	return n
}

func (m *Elem) Size() (n int) {
	var l int
	_ = l
	l = len(m.Attribute)
	if l > 0 {
		n += 1 + l + sovDm(uint64(l))
	}
	l = len(m.Content)
	if l > 0 {
		n += 1 + l + sovDm(uint64(l))
	}
	return n
}

func (m *DMSeg) Size() (n int) {
	var l int
	_ = l
	if len(m.Elems) > 0 {
		for _, e := range m.Elems {
			l = e.Size()
			n += 1 + l + sovDm(uint64(l))
		}
	}
	if len(m.SpecialURL) > 0 {
		for _, s := range m.SpecialURL {
			l = len(s)
			n += 1 + l + sovDm(uint64(l))
		}
	}
	return n
}

func sovDm(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozDm(x uint64) (n int) {
	return sovDm(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *DM) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DM: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DM: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Oid", wireType)
			}
			m.Oid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Oid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Progress", wireType)
			}
			m.Progress = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Progress |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pool", wireType)
			}
			m.Pool = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Pool |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attr", wireType)
			}
			m.Attr = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Attr |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ctime", wireType)
			}
			m.Ctime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ctime |= (go_common_library_time.Time(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mtime", wireType)
			}
			m.Mtime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mtime |= (go_common_library_time.Time(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDm
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Content == nil {
				m.Content = &Content{}
			}
			if err := m.Content.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContentSpe", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDm
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ContentSpe == nil {
				m.ContentSpe = &ContentSpecial{}
			}
			if err := m.ContentSpe.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Content) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Content: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Content: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FontSize", wireType)
			}
			m.FontSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FontSize |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Color", wireType)
			}
			m.Color = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Color |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mode", wireType)
			}
			m.Mode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mode |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IP", wireType)
			}
			m.IP = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IP |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Plat", wireType)
			}
			m.Plat = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Plat |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDm
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ctime", wireType)
			}
			m.Ctime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ctime |= (go_common_library_time.Time(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mtime", wireType)
			}
			m.Mtime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mtime |= (go_common_library_time.Time(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ContentSpecial) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ContentSpecial: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ContentSpecial: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDm
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ctime", wireType)
			}
			m.Ctime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ctime |= (go_common_library_time.Time(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mtime", wireType)
			}
			m.Mtime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mtime |= (go_common_library_time.Time(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Elem) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Elem: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Elem: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attribute", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDm
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Attribute = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDm
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Content = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DMSeg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DMSeg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DMSeg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Elems", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDm
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Elems = append(m.Elems, &Elem{})
			if err := m.Elems[len(m.Elems)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpecialURL", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDm
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SpecialURL = append(m.SpecialURL, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipDm(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowDm
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDm
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDm
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthDm
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowDm
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipDm(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthDm = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowDm   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("app/interface/main/dm2/model/dm.proto", fileDescriptorDm) }

var fileDescriptorDm = []byte{
	// 651 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x54, 0xcd, 0x6a, 0xdb, 0x4c,
	0x14, 0x8d, 0x24, 0x2b, 0xb1, 0xc6, 0x21, 0xf0, 0xe9, 0x6b, 0xda, 0x49, 0x7f, 0x2c, 0x63, 0x28,
	0x88, 0xd2, 0x58, 0x90, 0xd2, 0x45, 0x37, 0x2d, 0x55, 0xdc, 0x42, 0xa0, 0xa6, 0x66, 0x9c, 0xae,
	0x83, 0x2c, 0x4d, 0xd4, 0x01, 0x8d, 0x46, 0x48, 0xe3, 0x85, 0xf3, 0x10, 0x7d, 0xa9, 0x6e, 0xb2,
	0xcc, 0xbe, 0x20, 0x9a, 0x2c, 0xf5, 0x08, 0x5d, 0x95, 0xb9, 0x92, 0xa3, 0x78, 0x91, 0xb6, 0x24,
	0x3b, 0xcd, 0x39, 0x73, 0xee, 0xdc, 0x3b, 0xe7, 0x8c, 0xd0, 0xf3, 0x20, 0xcb, 0x3c, 0x96, 0x4a,
	0x9a, 0x9f, 0x06, 0x21, 0xf5, 0x78, 0xc0, 0x52, 0x2f, 0xe2, 0x07, 0x1e, 0x17, 0x11, 0x4d, 0xbc,
	0x88, 0x8f, 0xb2, 0x5c, 0x48, 0x61, 0x9b, 0xb0, 0x7e, 0xbc, 0x1f, 0x33, 0xf9, 0x75, 0x31, 0x1f,
	0x85, 0x82, 0x7b, 0xb1, 0x88, 0x85, 0x07, 0xec, 0x7c, 0x71, 0x0a, 0x2b, 0x58, 0xc0, 0x57, 0xad,
	0x1a, 0x7e, 0xeb, 0x20, 0x7d, 0x3c, 0xb1, 0x1f, 0x22, 0xfd, 0x68, 0x8c, 0xb5, 0x81, 0xe6, 0x1a,
	0xfe, 0x66, 0x55, 0x3a, 0x3a, 0x8b, 0x88, 0x7e, 0x34, 0xb6, 0x9f, 0xa2, 0xce, 0xf1, 0x32, 0xa3,
	0x58, 0x1f, 0x68, 0xae, 0xe9, 0x77, 0xab, 0xd2, 0xe9, 0xc8, 0x65, 0x46, 0x09, 0xa0, 0xf6, 0x1e,
	0x32, 0x3e, 0xb3, 0x08, 0x1b, 0x20, 0xdb, 0xaa, 0x4a, 0xc7, 0x10, 0x2c, 0x22, 0x0a, 0x53, 0xd4,
	0x84, 0x45, 0xb8, 0xd3, 0x52, 0x5c, 0x51, 0x13, 0x16, 0xd9, 0x2e, 0xea, 0x4e, 0x73, 0x11, 0xe7,
	0xb4, 0x28, 0xb0, 0x09, 0x75, 0xb7, 0xab, 0xd2, 0xe9, 0x66, 0x0d, 0x46, 0xae, 0x59, 0x75, 0xfa,
	0x54, 0x88, 0x04, 0x6f, 0xb6, 0xa7, 0x67, 0x42, 0x24, 0x04, 0x50, 0xc5, 0xbe, 0x97, 0x32, 0xc7,
	0x5b, 0x2d, 0x1b, 0x48, 0x99, 0x13, 0x40, 0x6d, 0x07, 0x99, 0x33, 0x19, 0x48, 0x8a, 0xbb, 0x40,
	0x5b, 0x55, 0xe9, 0x98, 0x85, 0x02, 0x48, 0x8d, 0xdb, 0x6f, 0x91, 0x79, 0x28, 0x19, 0xa7, 0xd8,
	0x82, 0x1e, 0x5d, 0xb5, 0x21, 0x54, 0xc0, 0xaf, 0xd2, 0x79, 0x12, 0x8b, 0xfd, 0x50, 0x70, 0x2e,
	0x52, 0x2f, 0x61, 0xf3, 0x3c, 0xc8, 0x97, 0x9e, 0x62, 0x46, 0xc7, 0x8c, 0x53, 0x52, 0xcb, 0x94,
	0x7e, 0x02, 0x7a, 0xd4, 0xea, 0xf9, 0x3f, 0xe9, 0x41, 0x66, 0xbf, 0x43, 0x5b, 0x87, 0x22, 0x95,
	0x34, 0x95, 0xb8, 0x37, 0xd0, 0xdc, 0xde, 0xc1, 0xce, 0x08, 0x1c, 0x1c, 0x35, 0xa8, 0xbf, 0x5b,
	0x95, 0xce, 0x7f, 0x61, 0xbd, 0x78, 0x29, 0x38, 0x93, 0x94, 0x67, 0x72, 0x49, 0x56, 0x2a, 0xfb,
	0x18, 0xa1, 0xe6, 0x73, 0x96, 0x51, 0xbc, 0x0d, 0x35, 0x76, 0xd7, 0x6b, 0xcc, 0x32, 0x1a, 0xb2,
	0x20, 0xf1, 0x9f, 0x55, 0xa5, 0xb3, 0xd7, 0x94, 0x3a, 0x29, 0x6a, 0xf0, 0x46, 0xc9, 0x1b, 0x75,
	0x86, 0x3f, 0xf4, 0xeb, 0xbe, 0x6e, 0x4d, 0x85, 0x8b, 0xba, 0x1f, 0x45, 0x2a, 0x67, 0xec, 0x6c,
	0x95, 0x0c, 0x70, 0xf0, 0x54, 0xa4, 0xb2, 0x60, 0x67, 0x94, 0x5c, 0xb3, 0xca, 0x85, 0x43, 0x91,
	0x88, 0xbc, 0xc9, 0x08, 0xb8, 0x10, 0x2a, 0x80, 0xd4, 0xb8, 0x32, 0x71, 0x22, 0x22, 0x0a, 0x41,
	0x69, 0x4c, 0x54, 0x13, 0x10, 0x40, 0xa1, 0x81, 0x29, 0x84, 0x64, 0xd5, 0x40, 0x46, 0xf4, 0xa3,
	0x29, 0x04, 0x23, 0x09, 0xe4, 0x5a, 0x30, 0x92, 0x40, 0x12, 0x40, 0x21, 0x7b, 0x45, 0x0c, 0xb9,
	0xb0, 0x9a, 0xec, 0x15, 0x31, 0x51, 0x58, 0x6b, 0x7a, 0xf7, 0x9e, 0xa6, 0x5b, 0x77, 0x32, 0x7d,
	0xf8, 0x5d, 0x43, 0x3b, 0xeb, 0xde, 0xdc, 0x7a, 0xc9, 0xcd, 0x14, 0xfa, 0x9f, 0xa6, 0x30, 0xee,
	0x39, 0x45, 0xe7, 0x6e, 0x53, 0xa4, 0xa8, 0xf3, 0x21, 0xa1, 0xdc, 0x7e, 0x8d, 0x2c, 0xf5, 0xd6,
	0xd8, 0x7c, 0x21, 0x29, 0x4c, 0x60, 0xf9, 0x8f, 0xaa, 0xd2, 0xf9, 0x3f, 0x58, 0x81, 0x37, 0x32,
	0xd6, 0xee, 0xb4, 0xbd, 0x36, 0xf9, 0xf5, 0x74, 0x7f, 0x49, 0xfa, 0x30, 0x45, 0xe6, 0x78, 0x32,
	0xa3, 0xb1, 0xfd, 0x02, 0x99, 0xea, 0xe0, 0x02, 0x6b, 0x03, 0xc3, 0xed, 0x1d, 0xf4, 0x9a, 0xb4,
	0x2b, 0xac, 0xbe, 0xa2, 0x88, 0x17, 0xa4, 0xde, 0x62, 0xbf, 0x41, 0xa8, 0xb9, 0xe2, 0x2f, 0xe4,
	0x13, 0xd6, 0x07, 0x86, 0x6b, 0xf9, 0x7b, 0x55, 0xe9, 0xec, 0x36, 0xf9, 0x3f, 0x59, 0xe4, 0x6b,
	0x6f, 0xa0, 0xdd, 0xec, 0x3f, 0x38, 0xbf, 0xec, 0x6f, 0x5c, 0x5c, 0xf6, 0x37, 0xce, 0xaf, 0xfa,
	0xda, 0xc5, 0x55, 0x5f, 0xfb, 0x79, 0xd5, 0xd7, 0xe6, 0x9b, 0xf0, 0xc7, 0x7c, 0xf5, 0x3b, 0x00,
	0x00, 0xff, 0xff, 0xe3, 0x56, 0x6c, 0x08, 0x90, 0x05, 0x00, 0x00,
}
