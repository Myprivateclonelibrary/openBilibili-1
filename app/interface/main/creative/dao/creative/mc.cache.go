// Code generated by $GOPATH/src/go-common/app/tool/cache/mc. DO NOT EDIT.

/*
  Package creative is a generated mc cache package.
  It is generated from:
  type _mc interface {
		// mc: -key=bgmKey
		CacheBgmData(c context.Context, key int64) (*BgmData, error)
		// mc: -key=noneKey
		CacheNone(c context.Context) (*BgmData, error)
		// 这里也支持自定义注释 会替换默认的注释
		// mc: -key=bgmKey -expire=d.articleExpire -encode=json|gzip
		AddCacheBgmData(c context.Context, key int64, value *BgmData) error
		// mc: -key=noneKey
		AddCacheNone(c context.Context, value *BgmData) error
		// mc: -key=bgmKey
		DelCacheBgmData(c context.Context, key int64) error
		// mc: -key=noneKey
		DelCacheNone(c context.Context) error
	}
*/

package creative

import (
	"context"
	"fmt"

	"go-common/library/cache/memcache"
	"go-common/library/log"
	"go-common/library/stat/prom"
)

var _ _mc

// CacheBgmData get data from mc
func (d *Dao) CacheBgmData(c context.Context, aid, cid, mtype int64) (res *BgmData, err error) {
	conn := d.mc.Get(c)
	defer conn.Close()
	key := bgmKey(aid, cid, mtype)
	reply, err := conn.Get(key)
	if err != nil {
		if err == memcache.ErrNotFound {
			err = nil
			return
		}
		prom.BusinessErrCount.Incr("mc:CacheBgmData")
		log.Errorv(c, log.KV("CacheBgmData", fmt.Sprintf("%+v", err)), log.KV("key", key))
		return
	}
	res = &BgmData{}
	err = conn.Scan(reply, res)
	if err != nil {
		prom.BusinessErrCount.Incr("mc:CacheBgmData")
		log.Errorv(c, log.KV("CacheBgmData", fmt.Sprintf("%+v", err)), log.KV("key", key))
		return
	}
	return
}

// AddCacheBgmData 这里也支持自定义注释 会替换默认的注释
func (d *Dao) AddCacheBgmData(c context.Context, aid, cid, mtype int64, val *BgmData) (err error) {
	if val == nil {
		return
	}
	conn := d.mc.Get(c)
	defer conn.Close()
	key := bgmKey(aid, cid, mtype)
	item := &memcache.Item{Key: key, Object: val, Expiration: 600, Flags: memcache.FlagJSON | memcache.FlagGzip}
	if err = conn.Set(item); err != nil {
		prom.BusinessErrCount.Incr("mc:AddCacheBgmData")
		log.Errorv(c, log.KV("AddCacheBgmData", fmt.Sprintf("%+v", err)), log.KV("key", key))
		return
	}
	return
}

// DelCacheBgmData delete data from mc
func (d *Dao) DelCacheBgmData(c context.Context, aid, cid, mtype int64) (err error) {
	conn := d.mc.Get(c)
	defer conn.Close()
	key := bgmKey(aid, cid, mtype)
	if err = conn.Delete(key); err != nil {
		if err == memcache.ErrNotFound {
			err = nil
			return
		}
		prom.BusinessErrCount.Incr("mc:DelCacheBgmData")
		log.Errorv(c, log.KV("DelCacheBgmData", fmt.Sprintf("%+v", err)), log.KV("key", key))
		return
	}
	return
}
