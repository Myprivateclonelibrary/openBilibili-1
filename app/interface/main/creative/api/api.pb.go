// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: app/interface/main/creative/api/grpc/v1/api.proto

/*
	Package v1 is a generated protocol buffer package.

	It is generated from these files:
		app/interface/main/creative/api/grpc/v1/api.proto

	It has these top-level messages:
		FlowRequest
		FlowResponse
		TaskRequest
		TaskReply
		Empty
*/
package v1

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import context "golang.org/x/net/context"
import grpc "google.golang.org/grpc"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type FlowRequest struct {
	Gid      int64   `protobuf:"varint,1,opt,name=gid,proto3" json:"gid,omitempty"`
	Business int64   `protobuf:"varint,2,opt,name=business,proto3" json:"business,omitempty"`
	Oids     []int64 `protobuf:"varint,3,rep,packed,name=oids" json:"oids,omitempty"`
}

func (m *FlowRequest) Reset()                    { *m = FlowRequest{} }
func (m *FlowRequest) String() string            { return proto.CompactTextString(m) }
func (*FlowRequest) ProtoMessage()               {}
func (*FlowRequest) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{0} }

func (m *FlowRequest) GetGid() int64 {
	if m != nil {
		return m.Gid
	}
	return 0
}

func (m *FlowRequest) GetBusiness() int64 {
	if m != nil {
		return m.Business
	}
	return 0
}

func (m *FlowRequest) GetOids() []int64 {
	if m != nil {
		return m.Oids
	}
	return nil
}

type FlowResponse struct {
	Oids []int64 `protobuf:"varint,1,rep,packed,name=oids" json:"oids,omitempty"`
}

func (m *FlowResponse) Reset()                    { *m = FlowResponse{} }
func (m *FlowResponse) String() string            { return proto.CompactTextString(m) }
func (*FlowResponse) ProtoMessage()               {}
func (*FlowResponse) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{1} }

func (m *FlowResponse) GetOids() []int64 {
	if m != nil {
		return m.Oids
	}
	return nil
}

// The request message containing the user's name.
type TaskRequest struct {
	Mid    int64 `protobuf:"varint,1,opt,name=mid,proto3" json:"mid,omitempty"`
	TaskId int64 `protobuf:"varint,2,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
}

func (m *TaskRequest) Reset()                    { *m = TaskRequest{} }
func (m *TaskRequest) String() string            { return proto.CompactTextString(m) }
func (*TaskRequest) ProtoMessage()               {}
func (*TaskRequest) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{2} }

func (m *TaskRequest) GetMid() int64 {
	if m != nil {
		return m.Mid
	}
	return 0
}

func (m *TaskRequest) GetTaskId() int64 {
	if m != nil {
		return m.TaskId
	}
	return 0
}

// The response message containing the greetings
type TaskReply struct {
	FinishState bool `protobuf:"varint,1,opt,name=finish_state,json=finishState,proto3" json:"finish_state,omitempty"`
}

func (m *TaskReply) Reset()                    { *m = TaskReply{} }
func (m *TaskReply) String() string            { return proto.CompactTextString(m) }
func (*TaskReply) ProtoMessage()               {}
func (*TaskReply) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{3} }

func (m *TaskReply) GetFinishState() bool {
	if m != nil {
		return m.FinishState
	}
	return false
}

type Empty struct {
}

func (m *Empty) Reset()                    { *m = Empty{} }
func (m *Empty) String() string            { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()               {}
func (*Empty) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{4} }

func init() {
	proto.RegisterType((*FlowRequest)(nil), "main.archive.creative.FlowRequest")
	proto.RegisterType((*FlowResponse)(nil), "main.archive.creative.FlowResponse")
	proto.RegisterType((*TaskRequest)(nil), "main.archive.creative.TaskRequest")
	proto.RegisterType((*TaskReply)(nil), "main.archive.creative.TaskReply")
	proto.RegisterType((*Empty)(nil), "main.archive.creative.Empty")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Creative service

type CreativeClient interface {
	// FlowJudge 查询flow情况
	FlowJudge(ctx context.Context, in *FlowRequest, opts ...grpc.CallOption) (*FlowResponse, error)
	// Sends a greeting
	CheckTaskState(ctx context.Context, in *TaskRequest, opts ...grpc.CallOption) (*TaskReply, error)
	// Ping Service
	Ping(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
	// Close Service
	Close(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
}

type creativeClient struct {
	cc *grpc.ClientConn
}

func NewCreativeClient(cc *grpc.ClientConn) CreativeClient {
	return &creativeClient{cc}
}

func (c *creativeClient) FlowJudge(ctx context.Context, in *FlowRequest, opts ...grpc.CallOption) (*FlowResponse, error) {
	out := new(FlowResponse)
	err := grpc.Invoke(ctx, "/main.archive.creative.Creative/FlowJudge", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *creativeClient) CheckTaskState(ctx context.Context, in *TaskRequest, opts ...grpc.CallOption) (*TaskReply, error) {
	out := new(TaskReply)
	err := grpc.Invoke(ctx, "/main.archive.creative.Creative/CheckTaskState", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *creativeClient) Ping(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/main.archive.creative.Creative/Ping", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *creativeClient) Close(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/main.archive.creative.Creative/Close", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Creative service

type CreativeServer interface {
	// FlowJudge 查询flow情况
	FlowJudge(context.Context, *FlowRequest) (*FlowResponse, error)
	// Sends a greeting
	CheckTaskState(context.Context, *TaskRequest) (*TaskReply, error)
	// Ping Service
	Ping(context.Context, *Empty) (*Empty, error)
	// Close Service
	Close(context.Context, *Empty) (*Empty, error)
}

func RegisterCreativeServer(s *grpc.Server, srv CreativeServer) {
	s.RegisterService(&_Creative_serviceDesc, srv)
}

func _Creative_FlowJudge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FlowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CreativeServer).FlowJudge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.archive.creative.Creative/FlowJudge",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CreativeServer).FlowJudge(ctx, req.(*FlowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Creative_CheckTaskState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CreativeServer).CheckTaskState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.archive.creative.Creative/CheckTaskState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CreativeServer).CheckTaskState(ctx, req.(*TaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Creative_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CreativeServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.archive.creative.Creative/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CreativeServer).Ping(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Creative_Close_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CreativeServer).Close(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.archive.creative.Creative/Close",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CreativeServer).Close(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _Creative_serviceDesc = grpc.ServiceDesc{
	ServiceName: "main.archive.creative.Creative",
	HandlerType: (*CreativeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FlowJudge",
			Handler:    _Creative_FlowJudge_Handler,
		},
		{
			MethodName: "CheckTaskState",
			Handler:    _Creative_CheckTaskState_Handler,
		},
		{
			MethodName: "Ping",
			Handler:    _Creative_Ping_Handler,
		},
		{
			MethodName: "Close",
			Handler:    _Creative_Close_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "app/interface/main/creative/api/grpc/v1/api.proto",
}

func (m *FlowRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FlowRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Gid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Gid))
	}
	if m.Business != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Business))
	}
	if len(m.Oids) > 0 {
		dAtA2 := make([]byte, len(m.Oids)*10)
		var j1 int
		for _, num1 := range m.Oids {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		dAtA[i] = 0x1a
		i++
		i = encodeVarintApi(dAtA, i, uint64(j1))
		i += copy(dAtA[i:], dAtA2[:j1])
	}
	return i, nil
}

func (m *FlowResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FlowResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Oids) > 0 {
		dAtA4 := make([]byte, len(m.Oids)*10)
		var j3 int
		for _, num1 := range m.Oids {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA4[j3] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j3++
			}
			dAtA4[j3] = uint8(num)
			j3++
		}
		dAtA[i] = 0xa
		i++
		i = encodeVarintApi(dAtA, i, uint64(j3))
		i += copy(dAtA[i:], dAtA4[:j3])
	}
	return i, nil
}

func (m *TaskRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TaskRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Mid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Mid))
	}
	if m.TaskId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.TaskId))
	}
	return i, nil
}

func (m *TaskReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TaskReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.FinishState {
		dAtA[i] = 0x8
		i++
		if m.FinishState {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *Empty) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Empty) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func encodeVarintApi(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *FlowRequest) Size() (n int) {
	var l int
	_ = l
	if m.Gid != 0 {
		n += 1 + sovApi(uint64(m.Gid))
	}
	if m.Business != 0 {
		n += 1 + sovApi(uint64(m.Business))
	}
	if len(m.Oids) > 0 {
		l = 0
		for _, e := range m.Oids {
			l += sovApi(uint64(e))
		}
		n += 1 + sovApi(uint64(l)) + l
	}
	return n
}

func (m *FlowResponse) Size() (n int) {
	var l int
	_ = l
	if len(m.Oids) > 0 {
		l = 0
		for _, e := range m.Oids {
			l += sovApi(uint64(e))
		}
		n += 1 + sovApi(uint64(l)) + l
	}
	return n
}

func (m *TaskRequest) Size() (n int) {
	var l int
	_ = l
	if m.Mid != 0 {
		n += 1 + sovApi(uint64(m.Mid))
	}
	if m.TaskId != 0 {
		n += 1 + sovApi(uint64(m.TaskId))
	}
	return n
}

func (m *TaskReply) Size() (n int) {
	var l int
	_ = l
	if m.FinishState {
		n += 2
	}
	return n
}

func (m *Empty) Size() (n int) {
	var l int
	_ = l
	return n
}

func sovApi(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozApi(x uint64) (n int) {
	return sovApi(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *FlowRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FlowRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FlowRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gid", wireType)
			}
			m.Gid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Gid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Business", wireType)
			}
			m.Business = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Business |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Oids = append(m.Oids, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthApi
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Oids = append(m.Oids, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Oids", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FlowResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FlowResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FlowResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Oids = append(m.Oids, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthApi
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Oids = append(m.Oids, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Oids", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TaskRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TaskRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TaskRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskId", wireType)
			}
			m.TaskId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TaskId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TaskReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TaskReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TaskReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FinishState", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.FinishState = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Empty) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Empty: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Empty: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipApi(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowApi
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowApi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowApi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthApi
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowApi
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipApi(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthApi = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowApi   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("app/interface/main/creative/api/grpc/v1/api.proto", fileDescriptorApi)
}

var fileDescriptorApi = []byte{
	// 377 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x92, 0xcf, 0x6e, 0x9b, 0x40,
	0x10, 0xc6, 0x8b, 0xf1, 0xdf, 0xb1, 0x55, 0x59, 0x2b, 0x55, 0xb5, 0x50, 0x65, 0xb9, 0xf4, 0xe2,
	0x4b, 0x59, 0xb9, 0xbd, 0xf4, 0x6c, 0xd4, 0x4a, 0xcd, 0x25, 0x11, 0xf1, 0x21, 0xca, 0xc5, 0x5a,
	0x60, 0x0d, 0x2b, 0x03, 0xbb, 0x61, 0x17, 0x22, 0x3f, 0x5f, 0x2e, 0x39, 0xe6, 0x11, 0x22, 0x3f,
	0x49, 0xc4, 0xe2, 0x38, 0x1c, 0x62, 0x5f, 0x72, 0x9b, 0x6f, 0xf8, 0xf1, 0x7d, 0x33, 0xa3, 0x85,
	0x05, 0x11, 0x02, 0xb3, 0x4c, 0xd1, 0x7c, 0x43, 0x02, 0x8a, 0x53, 0xc2, 0x32, 0x1c, 0xe4, 0x94,
	0x28, 0x56, 0x52, 0x4c, 0x04, 0xc3, 0x51, 0x2e, 0x02, 0x5c, 0x2e, 0xaa, 0xda, 0x11, 0x39, 0x57,
	0x1c, 0x7d, 0xa9, 0x20, 0x87, 0xe4, 0x41, 0xcc, 0x4a, 0xea, 0xbc, 0xc2, 0xd6, 0xcf, 0x88, 0xa9,
	0xb8, 0xf0, 0x9d, 0x80, 0xa7, 0x38, 0xe2, 0x11, 0xc7, 0x9a, 0xf6, 0x8b, 0x8d, 0x56, 0x5a, 0xe8,
	0xaa, 0x76, 0xb1, 0x2f, 0x61, 0xf8, 0x2f, 0xe1, 0xf7, 0x1e, 0xbd, 0x2b, 0xa8, 0x54, 0x68, 0x0c,
	0x66, 0xc4, 0xc2, 0x89, 0x31, 0x33, 0xe6, 0xa6, 0x57, 0x95, 0xc8, 0x82, 0xbe, 0x5f, 0x48, 0x96,
	0x51, 0x29, 0x27, 0x2d, 0xdd, 0x3e, 0x6a, 0x84, 0xa0, 0xcd, 0x59, 0x28, 0x27, 0xe6, 0xcc, 0x9c,
	0x9b, 0x9e, 0xae, 0x6d, 0x1b, 0x46, 0xb5, 0xa1, 0x14, 0x3c, 0x93, 0xf4, 0xc8, 0x18, 0x0d, 0xe6,
	0x0f, 0x0c, 0x57, 0x44, 0x6e, 0x1b, 0xa1, 0xe9, 0x5b, 0x68, 0xca, 0x42, 0xf4, 0x15, 0x7a, 0x8a,
	0xc8, 0xed, 0x9a, 0x85, 0x87, 0xcc, 0x6e, 0x25, 0xff, 0x87, 0xb6, 0x03, 0x83, 0xfa, 0x4f, 0x91,
	0xec, 0xd0, 0x77, 0x18, 0x6d, 0x58, 0xc6, 0x64, 0xbc, 0x96, 0x8a, 0x28, 0xaa, 0x0d, 0xfa, 0xde,
	0xb0, 0xee, 0x5d, 0x57, 0x2d, 0xbb, 0x07, 0x9d, 0xbf, 0xa9, 0x50, 0xbb, 0x5f, 0x0f, 0x2d, 0xe8,
	0xbb, 0x87, 0x1b, 0xa1, 0x15, 0x0c, 0xaa, 0x19, 0x2f, 0x8a, 0x30, 0xa2, 0xc8, 0x76, 0xde, 0x3d,
	0xa4, 0xd3, 0x38, 0x8b, 0xf5, 0xe3, 0x2c, 0x73, 0xd8, 0xf4, 0x06, 0x3e, 0xbb, 0x31, 0x0d, 0xb6,
	0xd5, 0x80, 0x3a, 0xfd, 0xa4, 0x75, 0x63, 0x79, 0x6b, 0x76, 0x96, 0x11, 0xc9, 0xce, 0xfe, 0x84,
	0x96, 0xd0, 0xbe, 0x62, 0x59, 0x84, 0xbe, 0x9d, 0x60, 0xf5, 0x8a, 0xd6, 0xd9, 0xaf, 0xc8, 0x85,
	0x8e, 0x9b, 0x70, 0x49, 0x3f, 0x62, 0xb2, 0x1c, 0x3f, 0xee, 0xa7, 0xc6, 0xd3, 0x7e, 0x6a, 0x3c,
	0xef, 0xa7, 0xc6, 0x6d, 0xab, 0x5c, 0xf8, 0x5d, 0xfd, 0x8c, 0x7e, 0xbf, 0x04, 0x00, 0x00, 0xff,
	0xff, 0xc5, 0x9e, 0x11, 0xf8, 0xc1, 0x02, 0x00, 0x00,
}
