// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: app/interface/bbq/bullet/api/api.proto

package api

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type DataReport struct {
	App                  string   `protobuf:"bytes,1,opt,name=app,proto3" json:"mobi_app" form:"mobi_app"`
	Client               string   `protobuf:"bytes,2,opt,name=client,proto3" json:"platform" form:"platform"`
	Version              string   `protobuf:"bytes,3,opt,name=version,proto3" json:"version" form:"version"`
	Channel              string   `protobuf:"bytes,4,opt,name=channel,proto3" json:"channel" form:"channel"`
	Location             string   `protobuf:"bytes,5,opt,name=location,proto3" json:"location" form:"location"`
	QueryId              string   `protobuf:"bytes,6,opt,name=query_id,json=queryId,proto3" json:"query_id" form:"query_id"`
	Buvid                string   `protobuf:"bytes,7,opt,name=buvid,proto3" json:"buvid" form:"buvid"`
	Svid                 int64    `protobuf:"varint,8,opt,name=svid,proto3" json:"svid" form:"oid"`
	TotalDuration        int32    `protobuf:"varint,9,opt,name=total_duration,json=totalDuration,proto3" json:"total_duration" form:"total_duration"`
	PlayDuration         int32    `protobuf:"varint,10,opt,name=play_duration,json=playDuration,proto3" json:"duration" form:"duration"`
	DataType             int32    `protobuf:"varint,11,opt,name=data_type,json=dataType,proto3" json:"data_type" form:"data_type"`
	Page                 int32    `protobuf:"varint,12,opt,name=page,proto3" json:"page_id" form:"page_id"`
	Module               int32    `protobuf:"varint,13,opt,name=module,proto3" json:"module_id" form:"module_id"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DataReport) Reset()         { *m = DataReport{} }
func (m *DataReport) String() string { return proto.CompactTextString(m) }
func (*DataReport) ProtoMessage()    {}
func (*DataReport) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_9abcbb21039b5df1, []int{0}
}
func (m *DataReport) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DataReport) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DataReport.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *DataReport) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DataReport.Merge(dst, src)
}
func (m *DataReport) XXX_Size() int {
	return m.Size()
}
func (m *DataReport) XXX_DiscardUnknown() {
	xxx_messageInfo_DataReport.DiscardUnknown(m)
}

var xxx_messageInfo_DataReport proto.InternalMessageInfo

type ListBulletReq struct {
	Oid                  int64    `protobuf:"varint,1,opt,name=oid,proto3" json:"oid,omitempty" form:"oid"`
	StartMs              int32    `protobuf:"varint,2,opt,name=start_ms,json=startMs,proto3" json:"start_ms,omitempty" form:"start_ms"`
	EndMs                int32    `protobuf:"varint,3,opt,name=end_ms,json=endMs,proto3" json:"end_ms,omitempty" form:"end_ms"`
	CursorNext           string   `protobuf:"bytes,4,opt,name=cursor_next,json=cursorNext,proto3" json:"cursor_next,omitempty" form:"cursor_next"`
	Mid                  int64    `protobuf:"varint,5,opt,name=mid,proto3" json:"mid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListBulletReq) Reset()         { *m = ListBulletReq{} }
func (m *ListBulletReq) String() string { return proto.CompactTextString(m) }
func (*ListBulletReq) ProtoMessage()    {}
func (*ListBulletReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_9abcbb21039b5df1, []int{1}
}
func (m *ListBulletReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListBulletReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListBulletReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ListBulletReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListBulletReq.Merge(dst, src)
}
func (m *ListBulletReq) XXX_Size() int {
	return m.Size()
}
func (m *ListBulletReq) XXX_DiscardUnknown() {
	xxx_messageInfo_ListBulletReq.DiscardUnknown(m)
}

var xxx_messageInfo_ListBulletReq proto.InternalMessageInfo

type Bullet struct {
	Id                   int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Oid                  int64    `protobuf:"varint,2,opt,name=oid,proto3" json:"oid,omitempty" form:"oid"`
	Mid                  int64    `protobuf:"varint,3,opt,name=mid,proto3" json:"mid" form:"mid"`
	OffsetMs             int32    `protobuf:"varint,4,opt,name=offset_ms,json=offsetMs,proto3" json:"offset_ms" form:"offset_ms"`
	Offset               int32    `protobuf:"varint,5,opt,name=offset,proto3" json:"offset,omitempty"`
	Content              string   `protobuf:"bytes,6,opt,name=content,proto3" json:"content" form:"content"`
	CursorValue          string   `protobuf:"bytes,7,opt,name=cursor_value,json=cursorValue,proto3" json:"cursor_value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Bullet) Reset()         { *m = Bullet{} }
func (m *Bullet) String() string { return proto.CompactTextString(m) }
func (*Bullet) ProtoMessage()    {}
func (*Bullet) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_9abcbb21039b5df1, []int{2}
}
func (m *Bullet) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Bullet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Bullet.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Bullet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Bullet.Merge(dst, src)
}
func (m *Bullet) XXX_Size() int {
	return m.Size()
}
func (m *Bullet) XXX_DiscardUnknown() {
	xxx_messageInfo_Bullet.DiscardUnknown(m)
}

var xxx_messageInfo_Bullet proto.InternalMessageInfo

type ListBulletReply struct {
	HasMore              bool      `protobuf:"varint,1,opt,name=has_more,json=hasMore,proto3" json:"has_more"`
	List                 []*Bullet `protobuf:"bytes,2,rep,name=list" json:"list,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *ListBulletReply) Reset()         { *m = ListBulletReply{} }
func (m *ListBulletReply) String() string { return proto.CompactTextString(m) }
func (*ListBulletReply) ProtoMessage()    {}
func (*ListBulletReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_9abcbb21039b5df1, []int{3}
}
func (m *ListBulletReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListBulletReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListBulletReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ListBulletReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListBulletReply.Merge(dst, src)
}
func (m *ListBulletReply) XXX_Size() int {
	return m.Size()
}
func (m *ListBulletReply) XXX_DiscardUnknown() {
	xxx_messageInfo_ListBulletReply.DiscardUnknown(m)
}

var xxx_messageInfo_ListBulletReply proto.InternalMessageInfo

func init() {
	proto.RegisterType((*DataReport)(nil), "bbq.interface.bullet.v1.DataReport")
	proto.RegisterType((*ListBulletReq)(nil), "bbq.interface.bullet.v1.ListBulletReq")
	proto.RegisterType((*Bullet)(nil), "bbq.interface.bullet.v1.Bullet")
	proto.RegisterType((*ListBulletReply)(nil), "bbq.interface.bullet.v1.ListBulletReply")
}
func (m *DataReport) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DataReport) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.App) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.App)))
		i += copy(dAtA[i:], m.App)
	}
	if len(m.Client) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Client)))
		i += copy(dAtA[i:], m.Client)
	}
	if len(m.Version) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Version)))
		i += copy(dAtA[i:], m.Version)
	}
	if len(m.Channel) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Channel)))
		i += copy(dAtA[i:], m.Channel)
	}
	if len(m.Location) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Location)))
		i += copy(dAtA[i:], m.Location)
	}
	if len(m.QueryId) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.QueryId)))
		i += copy(dAtA[i:], m.QueryId)
	}
	if len(m.Buvid) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Buvid)))
		i += copy(dAtA[i:], m.Buvid)
	}
	if m.Svid != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Svid))
	}
	if m.TotalDuration != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.TotalDuration))
	}
	if m.PlayDuration != 0 {
		dAtA[i] = 0x50
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.PlayDuration))
	}
	if m.DataType != 0 {
		dAtA[i] = 0x58
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.DataType))
	}
	if m.Page != 0 {
		dAtA[i] = 0x60
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Page))
	}
	if m.Module != 0 {
		dAtA[i] = 0x68
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Module))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ListBulletReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListBulletReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Oid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Oid))
	}
	if m.StartMs != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.StartMs))
	}
	if m.EndMs != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.EndMs))
	}
	if len(m.CursorNext) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.CursorNext)))
		i += copy(dAtA[i:], m.CursorNext)
	}
	if m.Mid != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Mid))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Bullet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Bullet) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Id))
	}
	if m.Oid != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Oid))
	}
	if m.Mid != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Mid))
	}
	if m.OffsetMs != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.OffsetMs))
	}
	if m.Offset != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Offset))
	}
	if len(m.Content) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Content)))
		i += copy(dAtA[i:], m.Content)
	}
	if len(m.CursorValue) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.CursorValue)))
		i += copy(dAtA[i:], m.CursorValue)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ListBulletReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListBulletReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.HasMore {
		dAtA[i] = 0x8
		i++
		if m.HasMore {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.List) > 0 {
		for _, msg := range m.List {
			dAtA[i] = 0x12
			i++
			i = encodeVarintApi(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintApi(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *DataReport) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.App)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Client)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Version)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Channel)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Location)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.QueryId)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Buvid)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Svid != 0 {
		n += 1 + sovApi(uint64(m.Svid))
	}
	if m.TotalDuration != 0 {
		n += 1 + sovApi(uint64(m.TotalDuration))
	}
	if m.PlayDuration != 0 {
		n += 1 + sovApi(uint64(m.PlayDuration))
	}
	if m.DataType != 0 {
		n += 1 + sovApi(uint64(m.DataType))
	}
	if m.Page != 0 {
		n += 1 + sovApi(uint64(m.Page))
	}
	if m.Module != 0 {
		n += 1 + sovApi(uint64(m.Module))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ListBulletReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Oid != 0 {
		n += 1 + sovApi(uint64(m.Oid))
	}
	if m.StartMs != 0 {
		n += 1 + sovApi(uint64(m.StartMs))
	}
	if m.EndMs != 0 {
		n += 1 + sovApi(uint64(m.EndMs))
	}
	l = len(m.CursorNext)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Mid != 0 {
		n += 1 + sovApi(uint64(m.Mid))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Bullet) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovApi(uint64(m.Id))
	}
	if m.Oid != 0 {
		n += 1 + sovApi(uint64(m.Oid))
	}
	if m.Mid != 0 {
		n += 1 + sovApi(uint64(m.Mid))
	}
	if m.OffsetMs != 0 {
		n += 1 + sovApi(uint64(m.OffsetMs))
	}
	if m.Offset != 0 {
		n += 1 + sovApi(uint64(m.Offset))
	}
	l = len(m.Content)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.CursorValue)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ListBulletReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.HasMore {
		n += 2
	}
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovApi(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozApi(x uint64) (n int) {
	return sovApi(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *DataReport) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DataReport: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DataReport: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field App", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.App = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Client", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Client = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Version = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Channel", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Channel = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Location", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Location = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QueryId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.QueryId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Buvid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Buvid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Svid", wireType)
			}
			m.Svid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Svid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalDuration", wireType)
			}
			m.TotalDuration = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalDuration |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayDuration", wireType)
			}
			m.PlayDuration = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PlayDuration |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataType", wireType)
			}
			m.DataType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DataType |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Page", wireType)
			}
			m.Page = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Page |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Module", wireType)
			}
			m.Module = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Module |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListBulletReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListBulletReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListBulletReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Oid", wireType)
			}
			m.Oid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Oid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartMs", wireType)
			}
			m.StartMs = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartMs |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndMs", wireType)
			}
			m.EndMs = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EndMs |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CursorNext", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CursorNext = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Bullet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Bullet: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Bullet: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Oid", wireType)
			}
			m.Oid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Oid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OffsetMs", wireType)
			}
			m.OffsetMs = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OffsetMs |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Offset", wireType)
			}
			m.Offset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Offset |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Content = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CursorValue", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CursorValue = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListBulletReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListBulletReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListBulletReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HasMore", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.HasMore = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &Bullet{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipApi(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowApi
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowApi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowApi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthApi
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowApi
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipApi(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthApi = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowApi   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("app/interface/bbq/bullet/api/api.proto", fileDescriptor_api_9abcbb21039b5df1)
}

var fileDescriptor_api_9abcbb21039b5df1 = []byte{
	// 807 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x94, 0xcd, 0x6e, 0x2b, 0x35,
	0x14, 0xc7, 0x99, 0x4c, 0x32, 0x99, 0xba, 0x49, 0x6f, 0x31, 0x6a, 0x19, 0xae, 0x44, 0x5d, 0xbc,
	0xe0, 0x46, 0x7c, 0x24, 0x2a, 0x2c, 0x2a, 0x2e, 0x82, 0xc5, 0xa8, 0x12, 0x42, 0xa2, 0x2c, 0x2c,
	0xc4, 0x82, 0x4d, 0xe4, 0xc9, 0x38, 0xed, 0x48, 0x33, 0x63, 0x77, 0xc6, 0x53, 0xdd, 0xac, 0xd9,
	0xf0, 0x3e, 0xbc, 0xc4, 0x5d, 0xb2, 0x62, 0x69, 0x41, 0x97, 0x59, 0xe6, 0x09, 0x90, 0x3f, 0x26,
	0x0e, 0x57, 0xea, 0x22, 0xd2, 0x39, 0x3f, 0xff, 0xff, 0x27, 0xf6, 0x19, 0x1f, 0x83, 0x4f, 0xa9,
	0x10, 0x8b, 0xa2, 0x96, 0xac, 0x59, 0xd3, 0x15, 0x5b, 0x64, 0xd9, 0xc3, 0x22, 0xeb, 0xca, 0x92,
	0xc9, 0x05, 0x15, 0x85, 0xfe, 0xcd, 0x45, 0xc3, 0x25, 0x87, 0x1f, 0x66, 0xd9, 0xc3, 0x7c, 0xaf,
	0x9b, 0x5b, 0xcd, 0xfc, 0xf1, 0xea, 0xe5, 0x97, 0x77, 0x85, 0xbc, 0xef, 0xb2, 0xf9, 0x8a, 0x57,
	0x8b, 0x3b, 0x7e, 0xc7, 0x17, 0x46, 0x9f, 0x75, 0x6b, 0x93, 0x99, 0xc4, 0x44, 0xb6, 0x0e, 0xfe,
	0x23, 0x02, 0xe0, 0x86, 0x4a, 0x4a, 0x98, 0xe0, 0x8d, 0x84, 0x57, 0x20, 0xa4, 0x42, 0x24, 0xc1,
	0x65, 0x30, 0x3b, 0x4a, 0xd1, 0x56, 0xa1, 0xb8, 0xe2, 0x59, 0xb1, 0xa4, 0x42, 0xec, 0x14, 0x7a,
	0xb1, 0xe6, 0x4d, 0xf5, 0x1a, 0xf7, 0x04, 0x13, 0xad, 0x85, 0xd7, 0x20, 0x5a, 0x95, 0x05, 0xab,
	0x65, 0x32, 0xf0, 0x2e, 0x51, 0x52, 0xa9, 0xd5, 0xde, 0xd5, 0x13, 0x4c, 0x9c, 0x1c, 0x5e, 0x83,
	0xf1, 0x23, 0x6b, 0xda, 0x82, 0xd7, 0x49, 0x68, 0x9c, 0x1f, 0x6f, 0x15, 0xea, 0xd1, 0x4e, 0xa1,
	0x13, 0x6b, 0x74, 0x00, 0x93, 0x7e, 0x49, 0x1b, 0x57, 0xf7, 0xb4, 0xae, 0x59, 0x99, 0x0c, 0xbd,
	0xd1, 0x21, 0x6f, 0x74, 0x00, 0x93, 0x7e, 0x09, 0x7e, 0x0b, 0xe2, 0x92, 0xaf, 0xa8, 0xd4, 0x7f,
	0x39, 0xf2, 0x9b, 0xed, 0x99, 0xdf, 0x6c, 0x4f, 0x30, 0xd9, 0x2f, 0xc2, 0xd7, 0x20, 0x7e, 0xe8,
	0x58, 0xb3, 0x59, 0x16, 0x79, 0x12, 0x79, 0x73, 0xcf, 0xbc, 0xb9, 0x27, 0x98, 0x8c, 0x4d, 0xf8,
	0x63, 0x0e, 0x17, 0x60, 0x94, 0x75, 0x8f, 0x45, 0x9e, 0x8c, 0x8d, 0xf1, 0xa3, 0xad, 0x42, 0x16,
	0xec, 0x14, 0x9a, 0x58, 0x97, 0x49, 0x31, 0xb1, 0x18, 0x7e, 0x06, 0x86, 0xad, 0xd6, 0xc7, 0x97,
	0xc1, 0x2c, 0x4c, 0xcf, 0xb7, 0x0a, 0x99, 0x7c, 0xa7, 0x10, 0xb0, 0x72, 0xae, 0xc5, 0x86, 0x41,
	0x02, 0x4e, 0x24, 0x97, 0xb4, 0x5c, 0xe6, 0x5d, 0x63, 0xcf, 0x76, 0x74, 0x19, 0xcc, 0x46, 0xe9,
	0xe7, 0x5b, 0x85, 0xde, 0x59, 0xd9, 0x29, 0x74, 0x66, 0xfd, 0xff, 0xe7, 0x98, 0x4c, 0x0d, 0xb8,
	0x71, 0x39, 0xbc, 0x01, 0x53, 0x51, 0xd2, 0x8d, 0x2f, 0x09, 0x4c, 0x49, 0x73, 0xe2, 0x83, 0x62,
	0xee, 0xc4, 0xbe, 0xcc, 0x44, 0xbb, 0xf6, 0x55, 0xbe, 0x07, 0x47, 0x39, 0x95, 0x74, 0x29, 0x37,
	0x82, 0x25, 0xc7, 0xa6, 0xc2, 0x27, 0x5b, 0x85, 0x3c, 0xdc, 0x29, 0x74, 0xea, 0x4a, 0xf4, 0x08,
	0x93, 0x58, 0xc7, 0xbf, 0x6c, 0x04, 0x83, 0x57, 0x60, 0x28, 0xe8, 0x1d, 0x4b, 0x26, 0xc6, 0x6a,
	0xbe, 0xb2, 0xce, 0x6d, 0xb7, 0xdd, 0x57, 0x76, 0x00, 0x13, 0x23, 0x85, 0xdf, 0x80, 0xa8, 0xe2,
	0x79, 0x57, 0xb2, 0x64, 0xea, 0xff, 0xcf, 0x12, 0x6b, 0x3b, 0xed, 0x2f, 0xb1, 0x43, 0x98, 0x38,
	0x03, 0xfe, 0x3b, 0x00, 0xd3, 0x9f, 0x8a, 0x56, 0xa6, 0x66, 0x96, 0x08, 0x7b, 0x80, 0x97, 0x20,
	0xe4, 0x45, 0x6e, 0xa6, 0x21, 0x4c, 0x4f, 0xde, 0x69, 0xbe, 0x5e, 0x82, 0x73, 0x10, 0xb7, 0x92,
	0x36, 0x72, 0x59, 0xb5, 0xe6, 0xfa, 0x8f, 0xd2, 0x0f, 0x7c, 0x5b, 0xfa, 0x15, 0x4c, 0xc6, 0x26,
	0xbc, 0x6d, 0xe1, 0x0c, 0x44, 0xac, 0xce, 0xb5, 0x3a, 0x34, 0xea, 0xf7, 0x77, 0x0a, 0x4d, 0xad,
	0xda, 0x72, 0x4c, 0x46, 0xac, 0xce, 0x6f, 0x5b, 0x78, 0x0d, 0x8e, 0x57, 0x5d, 0xd3, 0xf2, 0x66,
	0x59, 0xb3, 0x37, 0xd2, 0x5d, 0xf4, 0xf3, 0x9d, 0x42, 0xd0, 0xdd, 0x6e, 0xbf, 0x88, 0x09, 0xb0,
	0xd9, 0xcf, 0xec, 0x8d, 0x84, 0xa7, 0x20, 0xac, 0x8a, 0xdc, 0xdc, 0xef, 0x90, 0xe8, 0x10, 0xff,
	0x39, 0x00, 0x91, 0x3d, 0x14, 0x3c, 0x01, 0x83, 0xfe, 0x40, 0x64, 0x50, 0xe4, 0xfd, 0x09, 0x07,
	0xcf, 0x9f, 0xf0, 0x95, 0x2d, 0x17, 0x1a, 0xc5, 0xd9, 0x56, 0x21, 0x9d, 0x7a, 0x61, 0x65, 0x84,
	0x55, 0x91, 0xeb, 0x8f, 0xcd, 0xd7, 0xeb, 0x96, 0x99, 0x5e, 0x0c, 0x7d, 0xf3, 0xf7, 0xd0, 0x37,
	0x7f, 0x8f, 0x30, 0x89, 0x6d, 0x7c, 0xdb, 0xc2, 0x73, 0x10, 0xd9, 0xd8, 0x6c, 0x7d, 0x44, 0x5c,
	0x66, 0xa6, 0x9d, 0xd7, 0x52, 0x3f, 0x30, 0xd1, 0xc1, 0xb4, 0x5b, 0x74, 0x30, 0xed, 0x16, 0xe8,
	0x69, 0xb7, 0x11, 0xfc, 0x0e, 0x4c, 0x5c, 0x93, 0x1e, 0x69, 0xd9, 0x31, 0x37, 0x7b, 0x2f, 0xb7,
	0x0a, 0x9d, 0x1f, 0xf2, 0x2f, 0x78, 0x55, 0x48, 0x56, 0x09, 0xb9, 0x21, 0xae, 0xe3, 0xbf, 0x6a,
	0x8c, 0x7f, 0x0f, 0xc0, 0x8b, 0xc3, 0xeb, 0x20, 0xca, 0x0d, 0x7c, 0x05, 0xe2, 0x7b, 0xda, 0x2e,
	0x2b, 0xde, 0x30, 0xd3, 0xc4, 0x38, 0x9d, 0xe8, 0x89, 0xe8, 0x19, 0x19, 0xdf, 0xd3, 0xf6, 0x96,
	0x37, 0x0c, 0xfe, 0x00, 0x86, 0x65, 0xd1, 0xea, 0x27, 0x31, 0x9c, 0x1d, 0x7f, 0x85, 0xe6, 0xcf,
	0xbc, 0xd6, 0x73, 0x5b, 0x3c, 0x85, 0x7a, 0x54, 0xb5, 0xe1, 0x60, 0x33, 0xa6, 0x40, 0x7a, 0xf6,
	0xf6, 0xdf, 0x8b, 0xf7, 0xde, 0x3e, 0x5d, 0x04, 0x7f, 0x3d, 0x5d, 0x04, 0xff, 0x3c, 0x5d, 0x04,
	0xbf, 0x85, 0x54, 0x14, 0x59, 0x64, 0x5e, 0xef, 0xaf, 0xff, 0x0b, 0x00, 0x00, 0xff, 0xff, 0x28,
	0xf5, 0xab, 0x74, 0x2f, 0x06, 0x00, 0x00,
}
