// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: dm.proto

package v1

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"
import _ "google.golang.org/genproto/googleapis/api/annotations"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type SendMsgReq struct {
	Msg                  string   `protobuf:"bytes,1,opt,name=Msg,proto3" json:"Msg,omitempty" form:"msg" validate:"required"`
	Ts                   string   `protobuf:"bytes,2,opt,name=Ts,proto3" json:"Ts,omitempty" form:"ts"  validate:"required"`
	RoomID               int64    `protobuf:"varint,3,opt,name=RoomID,proto3" json:"RoomID,omitempty" form:"room_id" validate:"required"`
	Group                string   `protobuf:"bytes,4,opt,name=Group,proto3" json:"Group,omitempty" form:"group" validate:"required"`
	Sign                 string   `protobuf:"bytes,5,opt,name=Sign,proto3" json:"Sign,omitempty" form:"sign" validate:"required"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SendMsgReq) Reset()         { *m = SendMsgReq{} }
func (m *SendMsgReq) String() string { return proto.CompactTextString(m) }
func (*SendMsgReq) ProtoMessage()    {}
func (*SendMsgReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_dm_1bcdb7fd715c39b4, []int{0}
}
func (m *SendMsgReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SendMsgReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SendMsgReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *SendMsgReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SendMsgReq.Merge(dst, src)
}
func (m *SendMsgReq) XXX_Size() int {
	return m.Size()
}
func (m *SendMsgReq) XXX_DiscardUnknown() {
	xxx_messageInfo_SendMsgReq.DiscardUnknown(m)
}

var xxx_messageInfo_SendMsgReq proto.InternalMessageInfo

func (m *SendMsgReq) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func (m *SendMsgReq) GetTs() string {
	if m != nil {
		return m.Ts
	}
	return ""
}

func (m *SendMsgReq) GetRoomID() int64 {
	if m != nil {
		return m.RoomID
	}
	return 0
}

func (m *SendMsgReq) GetGroup() string {
	if m != nil {
		return m.Group
	}
	return ""
}

func (m *SendMsgReq) GetSign() string {
	if m != nil {
		return m.Sign
	}
	return ""
}

type SendMsgResp struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SendMsgResp) Reset()         { *m = SendMsgResp{} }
func (m *SendMsgResp) String() string { return proto.CompactTextString(m) }
func (*SendMsgResp) ProtoMessage()    {}
func (*SendMsgResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_dm_1bcdb7fd715c39b4, []int{1}
}
func (m *SendMsgResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SendMsgResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SendMsgResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *SendMsgResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SendMsgResp.Merge(dst, src)
}
func (m *SendMsgResp) XXX_Size() int {
	return m.Size()
}
func (m *SendMsgResp) XXX_DiscardUnknown() {
	xxx_messageInfo_SendMsgResp.DiscardUnknown(m)
}

var xxx_messageInfo_SendMsgResp proto.InternalMessageInfo

type GetConfReq struct {
	Ts                   string   `protobuf:"bytes,1,opt,name=Ts,proto3" json:"Ts,omitempty" form:"ts"  validate:"required"`
	Sign                 string   `protobuf:"bytes,2,opt,name=Sign,proto3" json:"Sign,omitempty" form:"sign" validate:"required"`
	Group                string   `protobuf:"bytes,3,opt,name=Group,proto3" json:"Group,omitempty" form:"group" validate:"required"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetConfReq) Reset()         { *m = GetConfReq{} }
func (m *GetConfReq) String() string { return proto.CompactTextString(m) }
func (*GetConfReq) ProtoMessage()    {}
func (*GetConfReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_dm_1bcdb7fd715c39b4, []int{2}
}
func (m *GetConfReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetConfReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetConfReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *GetConfReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetConfReq.Merge(dst, src)
}
func (m *GetConfReq) XXX_Size() int {
	return m.Size()
}
func (m *GetConfReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GetConfReq.DiscardUnknown(m)
}

var xxx_messageInfo_GetConfReq proto.InternalMessageInfo

func (m *GetConfReq) GetTs() string {
	if m != nil {
		return m.Ts
	}
	return ""
}

func (m *GetConfReq) GetSign() string {
	if m != nil {
		return m.Sign
	}
	return ""
}

func (m *GetConfReq) GetGroup() string {
	if m != nil {
		return m.Group
	}
	return ""
}

type GetConfResp struct {
	WSPort               []int64  `protobuf:"varint,1,rep,packed,name=WSPort" json:"ws_port"`
	WSSPort              []int64  `protobuf:"varint,2,rep,packed,name=WSSPort" json:"wss_port"`
	TCPPort              []int64  `protobuf:"varint,3,rep,packed,name=TCPPort" json:"tcp_port"`
	IPList               []string `protobuf:"bytes,4,rep,name=IPList" json:"ip_list"`
	DomianList           []string `protobuf:"bytes,5,rep,name=DomianList" json:"domain_list"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetConfResp) Reset()         { *m = GetConfResp{} }
func (m *GetConfResp) String() string { return proto.CompactTextString(m) }
func (*GetConfResp) ProtoMessage()    {}
func (*GetConfResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_dm_1bcdb7fd715c39b4, []int{3}
}
func (m *GetConfResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetConfResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetConfResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *GetConfResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetConfResp.Merge(dst, src)
}
func (m *GetConfResp) XXX_Size() int {
	return m.Size()
}
func (m *GetConfResp) XXX_DiscardUnknown() {
	xxx_messageInfo_GetConfResp.DiscardUnknown(m)
}

var xxx_messageInfo_GetConfResp proto.InternalMessageInfo

func (m *GetConfResp) GetWSPort() []int64 {
	if m != nil {
		return m.WSPort
	}
	return nil
}

func (m *GetConfResp) GetWSSPort() []int64 {
	if m != nil {
		return m.WSSPort
	}
	return nil
}

func (m *GetConfResp) GetTCPPort() []int64 {
	if m != nil {
		return m.TCPPort
	}
	return nil
}

func (m *GetConfResp) GetIPList() []string {
	if m != nil {
		return m.IPList
	}
	return nil
}

func (m *GetConfResp) GetDomianList() []string {
	if m != nil {
		return m.DomianList
	}
	return nil
}

func init() {
	proto.RegisterType((*SendMsgReq)(nil), "live.openinterface.v1.SendMsgReq")
	proto.RegisterType((*SendMsgResp)(nil), "live.openinterface.v1.SendMsgResp")
	proto.RegisterType((*GetConfReq)(nil), "live.openinterface.v1.GetConfReq")
	proto.RegisterType((*GetConfResp)(nil), "live.openinterface.v1.GetConfResp")
}
func (m *SendMsgReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SendMsgReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Msg) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintDm(dAtA, i, uint64(len(m.Msg)))
		i += copy(dAtA[i:], m.Msg)
	}
	if len(m.Ts) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintDm(dAtA, i, uint64(len(m.Ts)))
		i += copy(dAtA[i:], m.Ts)
	}
	if m.RoomID != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintDm(dAtA, i, uint64(m.RoomID))
	}
	if len(m.Group) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintDm(dAtA, i, uint64(len(m.Group)))
		i += copy(dAtA[i:], m.Group)
	}
	if len(m.Sign) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintDm(dAtA, i, uint64(len(m.Sign)))
		i += copy(dAtA[i:], m.Sign)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *SendMsgResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SendMsgResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GetConfReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetConfReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Ts) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintDm(dAtA, i, uint64(len(m.Ts)))
		i += copy(dAtA[i:], m.Ts)
	}
	if len(m.Sign) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintDm(dAtA, i, uint64(len(m.Sign)))
		i += copy(dAtA[i:], m.Sign)
	}
	if len(m.Group) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintDm(dAtA, i, uint64(len(m.Group)))
		i += copy(dAtA[i:], m.Group)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GetConfResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetConfResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.WSPort) > 0 {
		dAtA2 := make([]byte, len(m.WSPort)*10)
		var j1 int
		for _, num1 := range m.WSPort {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		dAtA[i] = 0xa
		i++
		i = encodeVarintDm(dAtA, i, uint64(j1))
		i += copy(dAtA[i:], dAtA2[:j1])
	}
	if len(m.WSSPort) > 0 {
		dAtA4 := make([]byte, len(m.WSSPort)*10)
		var j3 int
		for _, num1 := range m.WSSPort {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA4[j3] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j3++
			}
			dAtA4[j3] = uint8(num)
			j3++
		}
		dAtA[i] = 0x12
		i++
		i = encodeVarintDm(dAtA, i, uint64(j3))
		i += copy(dAtA[i:], dAtA4[:j3])
	}
	if len(m.TCPPort) > 0 {
		dAtA6 := make([]byte, len(m.TCPPort)*10)
		var j5 int
		for _, num1 := range m.TCPPort {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA6[j5] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j5++
			}
			dAtA6[j5] = uint8(num)
			j5++
		}
		dAtA[i] = 0x1a
		i++
		i = encodeVarintDm(dAtA, i, uint64(j5))
		i += copy(dAtA[i:], dAtA6[:j5])
	}
	if len(m.IPList) > 0 {
		for _, s := range m.IPList {
			dAtA[i] = 0x22
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.DomianList) > 0 {
		for _, s := range m.DomianList {
			dAtA[i] = 0x2a
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintDm(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *SendMsgReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Msg)
	if l > 0 {
		n += 1 + l + sovDm(uint64(l))
	}
	l = len(m.Ts)
	if l > 0 {
		n += 1 + l + sovDm(uint64(l))
	}
	if m.RoomID != 0 {
		n += 1 + sovDm(uint64(m.RoomID))
	}
	l = len(m.Group)
	if l > 0 {
		n += 1 + l + sovDm(uint64(l))
	}
	l = len(m.Sign)
	if l > 0 {
		n += 1 + l + sovDm(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SendMsgResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetConfReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Ts)
	if l > 0 {
		n += 1 + l + sovDm(uint64(l))
	}
	l = len(m.Sign)
	if l > 0 {
		n += 1 + l + sovDm(uint64(l))
	}
	l = len(m.Group)
	if l > 0 {
		n += 1 + l + sovDm(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetConfResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.WSPort) > 0 {
		l = 0
		for _, e := range m.WSPort {
			l += sovDm(uint64(e))
		}
		n += 1 + sovDm(uint64(l)) + l
	}
	if len(m.WSSPort) > 0 {
		l = 0
		for _, e := range m.WSSPort {
			l += sovDm(uint64(e))
		}
		n += 1 + sovDm(uint64(l)) + l
	}
	if len(m.TCPPort) > 0 {
		l = 0
		for _, e := range m.TCPPort {
			l += sovDm(uint64(e))
		}
		n += 1 + sovDm(uint64(l)) + l
	}
	if len(m.IPList) > 0 {
		for _, s := range m.IPList {
			l = len(s)
			n += 1 + l + sovDm(uint64(l))
		}
	}
	if len(m.DomianList) > 0 {
		for _, s := range m.DomianList {
			l = len(s)
			n += 1 + l + sovDm(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovDm(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozDm(x uint64) (n int) {
	return sovDm(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *SendMsgReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SendMsgReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SendMsgReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDm
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ts", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDm
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ts = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoomID", wireType)
			}
			m.RoomID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RoomID |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Group", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDm
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Group = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sign", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDm
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sign = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SendMsgResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SendMsgResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SendMsgResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipDm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetConfReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetConfReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetConfReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ts", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDm
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ts = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sign", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDm
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sign = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Group", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDm
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Group = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetConfResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetConfResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetConfResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowDm
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.WSPort = append(m.WSPort, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowDm
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthDm
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.WSPort) == 0 {
					m.WSPort = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowDm
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.WSPort = append(m.WSPort, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field WSPort", wireType)
			}
		case 2:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowDm
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.WSSPort = append(m.WSSPort, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowDm
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthDm
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.WSSPort) == 0 {
					m.WSSPort = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowDm
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.WSSPort = append(m.WSSPort, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field WSSPort", wireType)
			}
		case 3:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowDm
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.TCPPort = append(m.TCPPort, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowDm
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthDm
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.TCPPort) == 0 {
					m.TCPPort = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowDm
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.TCPPort = append(m.TCPPort, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field TCPPort", wireType)
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IPList", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDm
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IPList = append(m.IPList, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DomianList", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDm
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DomianList = append(m.DomianList, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipDm(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowDm
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDm
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDm
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthDm
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowDm
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipDm(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthDm = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowDm   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("dm.proto", fileDescriptor_dm_1bcdb7fd715c39b4) }

var fileDescriptor_dm_1bcdb7fd715c39b4 = []byte{
	// 546 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x93, 0x41, 0x6b, 0xdb, 0x3c,
	0x18, 0xc7, 0xb1, 0xdd, 0x26, 0xad, 0xf2, 0xbe, 0x6c, 0x08, 0x06, 0x26, 0x8c, 0xd8, 0x53, 0xb6,
	0x12, 0x18, 0xb5, 0x49, 0x37, 0x18, 0xe4, 0xb0, 0x43, 0x5a, 0x28, 0x85, 0x15, 0x42, 0x12, 0x28,
	0xec, 0x12, 0x9c, 0x58, 0xd1, 0x04, 0x91, 0xe4, 0x5a, 0x4a, 0xba, 0x4b, 0x2f, 0xfd, 0x0a, 0xfb,
	0x18, 0x3b, 0xef, 0x3b, 0xec, 0x38, 0xd8, 0x65, 0x27, 0x33, 0xc2, 0x4e, 0x39, 0xe6, 0x13, 0x0c,
	0x4b, 0x4e, 0x52, 0x46, 0xba, 0x91, 0x9b, 0xe5, 0xe7, 0xf7, 0xf3, 0xff, 0xd1, 0x63, 0x09, 0x1c,
	0xc4, 0x2c, 0x48, 0x52, 0xa1, 0x04, 0x7c, 0x32, 0xa1, 0x33, 0x1c, 0x88, 0x04, 0x73, 0xca, 0x15,
	0x4e, 0xc7, 0xd1, 0x08, 0x07, 0xb3, 0x66, 0xf5, 0x98, 0x50, 0xf5, 0x61, 0x3a, 0x0c, 0x46, 0x82,
	0x85, 0x44, 0x10, 0x11, 0x6a, 0x7a, 0x38, 0x1d, 0xeb, 0x95, 0x5e, 0xe8, 0x27, 0xf3, 0x95, 0xea,
	0x53, 0x22, 0x04, 0x99, 0xe0, 0x30, 0x4a, 0x68, 0x18, 0x71, 0x2e, 0x54, 0xa4, 0xa8, 0xe0, 0xd2,
	0x54, 0xd1, 0x67, 0x1b, 0x80, 0x1e, 0xe6, 0xf1, 0xa5, 0x24, 0x5d, 0x7c, 0x0d, 0x5f, 0x03, 0xe7,
	0x52, 0x12, 0xd7, 0xf2, 0xad, 0xc6, 0x61, 0x1b, 0x2d, 0x33, 0xaf, 0x36, 0x16, 0x29, 0x6b, 0x21,
	0x26, 0x09, 0xf2, 0x67, 0xd1, 0x84, 0xc6, 0x91, 0xc2, 0x2d, 0x94, 0xe2, 0xeb, 0x29, 0x4d, 0x71,
	0x8c, 0xba, 0x39, 0x0e, 0x4f, 0x80, 0xdd, 0x97, 0xae, 0xfd, 0xa7, 0xa4, 0x24, 0xf2, 0xb7, 0x4a,
	0x76, 0x5f, 0xc2, 0xb7, 0xa0, 0xd4, 0x15, 0x82, 0x5d, 0x9c, 0xb9, 0x8e, 0x6f, 0x35, 0x9c, 0xf6,
	0xd1, 0x32, 0xf3, 0x90, 0xf1, 0x52, 0x21, 0xd8, 0x80, 0xc6, 0xdb, 0x03, 0x0b, 0x0b, 0xb6, 0xc0,
	0xfe, 0x79, 0x2a, 0xa6, 0x89, 0xbb, 0xa7, 0x63, 0x9f, 0x2f, 0x33, 0xcf, 0x37, 0x3a, 0xc9, 0x5f,
	0x6f, 0x97, 0x8d, 0x02, 0xdf, 0x80, 0xbd, 0x1e, 0x25, 0xdc, 0xdd, 0xd7, 0x6a, 0x7d, 0x99, 0x79,
	0x9e, 0x51, 0x25, 0x25, 0x7c, 0xbb, 0xa9, 0x05, 0xf4, 0x3f, 0xa8, 0xac, 0x87, 0x25, 0x13, 0xf4,
	0xc5, 0x02, 0xe0, 0x1c, 0xab, 0x53, 0xc1, 0xc7, 0xf9, 0xf0, 0xcc, 0x18, 0xac, 0x9d, 0xc6, 0xb0,
	0x6a, 0xc5, 0xde, 0xb1, 0x95, 0xcd, 0xfe, 0x9d, 0x9d, 0xf7, 0x8f, 0x7e, 0x58, 0xa0, 0xb2, 0xee,
	0x5b, 0x26, 0xb0, 0x0e, 0x4a, 0x57, 0xbd, 0x8e, 0x48, 0x95, 0x6b, 0xf9, 0x4e, 0xc3, 0x69, 0x57,
	0x16, 0x99, 0x57, 0xbe, 0x91, 0x83, 0x44, 0xa4, 0xaa, 0x5b, 0x94, 0xe0, 0x11, 0x28, 0x5f, 0xf5,
	0x0c, 0x65, 0x6b, 0xea, 0xbf, 0x45, 0xe6, 0x1d, 0xdc, 0xc8, 0x02, 0x5b, 0x15, 0x73, 0xae, 0x7f,
	0xda, 0xd1, 0x9c, 0xb3, 0xe1, 0xd4, 0x28, 0x29, 0xb8, 0xa2, 0x98, 0x87, 0x5e, 0x74, 0xde, 0x51,
	0xa9, 0xdc, 0x3d, 0xdf, 0x69, 0x1c, 0x9a, 0x50, 0x9a, 0x0c, 0x26, 0x54, 0xaa, 0x6e, 0x51, 0x82,
	0x21, 0x00, 0x67, 0x82, 0xd1, 0x88, 0x6b, 0x70, 0x5f, 0x83, 0x8f, 0x16, 0x99, 0x57, 0x89, 0x05,
	0x8b, 0x28, 0x37, 0xf0, 0x3d, 0xe4, 0xe4, 0xce, 0x06, 0x76, 0xcc, 0xe0, 0x2d, 0x28, 0x4b, 0xcc,
	0x63, 0x26, 0x09, 0x7c, 0x16, 0x6c, 0xbd, 0x46, 0xc1, 0xe6, 0xd4, 0x57, 0xd1, 0xbf, 0x10, 0x99,
	0xa0, 0x97, 0x77, 0xdf, 0x7f, 0x7d, 0xb2, 0x5f, 0xa0, 0x7a, 0xf8, 0x31, 0x87, 0xc3, 0x1c, 0x3e,
	0x5e, 0xd3, 0xe1, 0xac, 0x19, 0xc6, 0x2c, 0x5c, 0x65, 0xde, 0x82, 0x32, 0x31, 0xf3, 0x7d, 0x30,
	0x7e, 0x73, 0x6e, 0x1e, 0x8c, 0xbf, 0xf7, 0x8b, 0x56, 0xf1, 0xf0, 0xaf, 0xf1, 0x45, 0x66, 0xfb,
	0xf1, 0xd7, 0x79, 0xcd, 0xfa, 0x36, 0xaf, 0x59, 0x3f, 0xe7, 0x35, 0xeb, 0xbd, 0x3d, 0x6b, 0x0e,
	0x4b, 0xfa, 0xb6, 0xbf, 0xfa, 0x1d, 0x00, 0x00, 0xff, 0xff, 0xab, 0x39, 0x6d, 0x7e, 0x5d, 0x04,
	0x00, 0x00,
}
