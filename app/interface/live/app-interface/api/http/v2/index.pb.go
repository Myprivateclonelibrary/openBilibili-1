// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: api/http/v2/index.proto

package v2

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// 接口1：GetAllList
type GetAllListReq struct {
	// 平台
	Platform string `protobuf:"bytes,1,opt,name=platform,proto3" json:"platform,omitempty" form:"platform" validate:"required"`
	// 设备
	Device string `protobuf:"bytes,2,opt,name=device,proto3" json:"device,omitempty" form:"device" validate:"required"`
	// 分辨率
	Scale string `protobuf:"bytes,3,opt,name=scale,proto3" json:"scale,omitempty" form:"scale" validate:"required"`
	// 版本号
	Build int64 `protobuf:"varint,4,opt,name=build,proto3" json:"build,omitempty" form:"build" validate:"required"`
	// 关注页码
	RelationPage int64 `protobuf:"varint,5,opt,name=relation_page,json=relationPage,proto3" json:"relation_page,omitempty" form:"relation_page" validate:"required"`
	// 推荐页码 当前推荐页（用于天马强推），不传默认按1处理
	RecPage int64 `protobuf:"varint,6,opt,name=rec_page,json=recPage,proto3" json:"rec_page,omitempty" form:"rec_page"`
	Quality int64 `protobuf:"varint,7,opt,name=quality,proto3" json:"quality,omitempty" form:"quality"`
}

func (m *GetAllListReq) Reset()         { *m = GetAllListReq{} }
func (m *GetAllListReq) String() string { return proto.CompactTextString(m) }
func (*GetAllListReq) ProtoMessage()    {}
func (*GetAllListReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_index_6a75d6dc6295118d, []int{0}
}
func (m *GetAllListReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetAllListReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetAllListReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *GetAllListReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetAllListReq.Merge(dst, src)
}
func (m *GetAllListReq) XXX_Size() int {
	return m.Size()
}
func (m *GetAllListReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GetAllListReq.DiscardUnknown(m)
}

var xxx_messageInfo_GetAllListReq proto.InternalMessageInfo

func (m *GetAllListReq) GetPlatform() string {
	if m != nil {
		return m.Platform
	}
	return ""
}

func (m *GetAllListReq) GetDevice() string {
	if m != nil {
		return m.Device
	}
	return ""
}

func (m *GetAllListReq) GetScale() string {
	if m != nil {
		return m.Scale
	}
	return ""
}

func (m *GetAllListReq) GetBuild() int64 {
	if m != nil {
		return m.Build
	}
	return 0
}

func (m *GetAllListReq) GetRelationPage() int64 {
	if m != nil {
		return m.RelationPage
	}
	return 0
}

func (m *GetAllListReq) GetRecPage() int64 {
	if m != nil {
		return m.RecPage
	}
	return 0
}

func (m *GetAllListReq) GetQuality() int64 {
	if m != nil {
		return m.Quality
	}
	return 0
}

// GetAllList响应
type GetAllListResp struct {
	// 刷新重新请求间隔
	Interval int64 `protobuf:"varint,1,opt,name=interval,proto3" json:"interval"`
	// 是否命中天马灰度
	IsSkyHorseGray int64 `protobuf:"varint,2,opt,name=is_sky_horse_gray,json=isSkyHorseGray,proto3" json:"is_sky_horse_gray"`
	// banner类型
	Banner []*MBanner `protobuf:"bytes,3,rep,name=banner" json:"banner"`
	// 常用标签类型
	MyTag []*MMyTag `protobuf:"bytes,4,rep,name=my_tag,json=myTag" json:"my_tag"`
	// 分区入口类型
	AreaEntrance []*MAreaEntrance `protobuf:"bytes,5,rep,name=area_entrance,json=areaEntrance" json:"area_entrance"`
	// 大航海提示类型
	SeaPatrol []*MSeaPatrol `protobuf:"bytes,6,rep,name=sea_patrol,json=seaPatrol" json:"sea_patrol"`
	// 我的关注类型
	MyIdol []*MMyIdol `protobuf:"bytes,7,rep,name=my_idol,json=myIdol" json:"my_idol"`
	// 通用房间列表类型
	RoomList []*MRoomBlock `protobuf:"bytes,8,rep,name=room_list,json=roomList" json:"room_list"`
	// 小时榜类型
	HourRank []*MHourRank `protobuf:"bytes,9,rep,name=hour_rank,json=hourRank" json:"hour_rank"`
	// 活动卡
	ActivityCard []*MActivityCard `protobuf:"bytes,10,rep,name=activity_card,json=activityCard" json:"activity_card"`
}

func (m *GetAllListResp) Reset()         { *m = GetAllListResp{} }
func (m *GetAllListResp) String() string { return proto.CompactTextString(m) }
func (*GetAllListResp) ProtoMessage()    {}
func (*GetAllListResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_index_6a75d6dc6295118d, []int{1}
}
func (m *GetAllListResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetAllListResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetAllListResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *GetAllListResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetAllListResp.Merge(dst, src)
}
func (m *GetAllListResp) XXX_Size() int {
	return m.Size()
}
func (m *GetAllListResp) XXX_DiscardUnknown() {
	xxx_messageInfo_GetAllListResp.DiscardUnknown(m)
}

var xxx_messageInfo_GetAllListResp proto.InternalMessageInfo

func (m *GetAllListResp) GetInterval() int64 {
	if m != nil {
		return m.Interval
	}
	return 0
}

func (m *GetAllListResp) GetIsSkyHorseGray() int64 {
	if m != nil {
		return m.IsSkyHorseGray
	}
	return 0
}

func (m *GetAllListResp) GetBanner() []*MBanner {
	if m != nil {
		return m.Banner
	}
	return nil
}

func (m *GetAllListResp) GetMyTag() []*MMyTag {
	if m != nil {
		return m.MyTag
	}
	return nil
}

func (m *GetAllListResp) GetAreaEntrance() []*MAreaEntrance {
	if m != nil {
		return m.AreaEntrance
	}
	return nil
}

func (m *GetAllListResp) GetSeaPatrol() []*MSeaPatrol {
	if m != nil {
		return m.SeaPatrol
	}
	return nil
}

func (m *GetAllListResp) GetMyIdol() []*MMyIdol {
	if m != nil {
		return m.MyIdol
	}
	return nil
}

func (m *GetAllListResp) GetRoomList() []*MRoomBlock {
	if m != nil {
		return m.RoomList
	}
	return nil
}

func (m *GetAllListResp) GetHourRank() []*MHourRank {
	if m != nil {
		return m.HourRank
	}
	return nil
}

func (m *GetAllListResp) GetActivityCard() []*MActivityCard {
	if m != nil {
		return m.ActivityCard
	}
	return nil
}

// module define begin
// banner banner位
type MBanner struct {
	// 模块信息
	ModuleInfo *ModuleInfo `protobuf:"bytes,1,opt,name=module_info,json=moduleInfo" json:"module_info"`
	// 模块列表
	List []*PicItem `protobuf:"bytes,2,rep,name=list" json:"list"`
}

func (m *MBanner) Reset()         { *m = MBanner{} }
func (m *MBanner) String() string { return proto.CompactTextString(m) }
func (*MBanner) ProtoMessage()    {}
func (*MBanner) Descriptor() ([]byte, []int) {
	return fileDescriptor_index_6a75d6dc6295118d, []int{2}
}
func (m *MBanner) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MBanner) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MBanner.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *MBanner) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MBanner.Merge(dst, src)
}
func (m *MBanner) XXX_Size() int {
	return m.Size()
}
func (m *MBanner) XXX_DiscardUnknown() {
	xxx_messageInfo_MBanner.DiscardUnknown(m)
}

var xxx_messageInfo_MBanner proto.InternalMessageInfo

func (m *MBanner) GetModuleInfo() *ModuleInfo {
	if m != nil {
		return m.ModuleInfo
	}
	return nil
}

func (m *MBanner) GetList() []*PicItem {
	if m != nil {
		return m.List
	}
	return nil
}

// MyTag 常用标签
type MMyTag struct {
	ModuleInfo *ModuleInfo  `protobuf:"bytes,1,opt,name=module_info,json=moduleInfo" json:"module_info"`
	ExtraInfo  *MyTagExtra  `protobuf:"bytes,2,opt,name=extra_info,json=extraInfo" json:"extra_info"`
	List       []*MyTagItem `protobuf:"bytes,3,rep,name=list" json:"list"`
}

func (m *MMyTag) Reset()         { *m = MMyTag{} }
func (m *MMyTag) String() string { return proto.CompactTextString(m) }
func (*MMyTag) ProtoMessage()    {}
func (*MMyTag) Descriptor() ([]byte, []int) {
	return fileDescriptor_index_6a75d6dc6295118d, []int{3}
}
func (m *MMyTag) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MMyTag) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MMyTag.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *MMyTag) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MMyTag.Merge(dst, src)
}
func (m *MMyTag) XXX_Size() int {
	return m.Size()
}
func (m *MMyTag) XXX_DiscardUnknown() {
	xxx_messageInfo_MMyTag.DiscardUnknown(m)
}

var xxx_messageInfo_MMyTag proto.InternalMessageInfo

func (m *MMyTag) GetModuleInfo() *ModuleInfo {
	if m != nil {
		return m.ModuleInfo
	}
	return nil
}

func (m *MMyTag) GetExtraInfo() *MyTagExtra {
	if m != nil {
		return m.ExtraInfo
	}
	return nil
}

func (m *MMyTag) GetList() []*MyTagItem {
	if m != nil {
		return m.List
	}
	return nil
}

// AreaEntrance 分区入口
type MAreaEntrance struct {
	ModuleInfo *ModuleInfo `protobuf:"bytes,1,opt,name=module_info,json=moduleInfo" json:"module_info"`
	List       []*PicItem  `protobuf:"bytes,2,rep,name=list" json:"list"`
}

func (m *MAreaEntrance) Reset()         { *m = MAreaEntrance{} }
func (m *MAreaEntrance) String() string { return proto.CompactTextString(m) }
func (*MAreaEntrance) ProtoMessage()    {}
func (*MAreaEntrance) Descriptor() ([]byte, []int) {
	return fileDescriptor_index_6a75d6dc6295118d, []int{4}
}
func (m *MAreaEntrance) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MAreaEntrance) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MAreaEntrance.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *MAreaEntrance) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MAreaEntrance.Merge(dst, src)
}
func (m *MAreaEntrance) XXX_Size() int {
	return m.Size()
}
func (m *MAreaEntrance) XXX_DiscardUnknown() {
	xxx_messageInfo_MAreaEntrance.DiscardUnknown(m)
}

var xxx_messageInfo_MAreaEntrance proto.InternalMessageInfo

func (m *MAreaEntrance) GetModuleInfo() *ModuleInfo {
	if m != nil {
		return m.ModuleInfo
	}
	return nil
}

func (m *MAreaEntrance) GetList() []*PicItem {
	if m != nil {
		return m.List
	}
	return nil
}

// SeaPatrol 大航海提示
type MSeaPatrol struct {
	ModuleInfo *ModuleInfo `protobuf:"bytes,1,opt,name=module_info,json=moduleInfo" json:"module_info"`
	ExtraInfo  *PicItem    `protobuf:"bytes,2,opt,name=extra_info,json=extraInfo" json:"extra_info"`
}

func (m *MSeaPatrol) Reset()         { *m = MSeaPatrol{} }
func (m *MSeaPatrol) String() string { return proto.CompactTextString(m) }
func (*MSeaPatrol) ProtoMessage()    {}
func (*MSeaPatrol) Descriptor() ([]byte, []int) {
	return fileDescriptor_index_6a75d6dc6295118d, []int{5}
}
func (m *MSeaPatrol) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MSeaPatrol) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MSeaPatrol.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *MSeaPatrol) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MSeaPatrol.Merge(dst, src)
}
func (m *MSeaPatrol) XXX_Size() int {
	return m.Size()
}
func (m *MSeaPatrol) XXX_DiscardUnknown() {
	xxx_messageInfo_MSeaPatrol.DiscardUnknown(m)
}

var xxx_messageInfo_MSeaPatrol proto.InternalMessageInfo

func (m *MSeaPatrol) GetModuleInfo() *ModuleInfo {
	if m != nil {
		return m.ModuleInfo
	}
	return nil
}

func (m *MSeaPatrol) GetExtraInfo() *PicItem {
	if m != nil {
		return m.ExtraInfo
	}
	return nil
}

// MyIdol 我的关注
type MMyIdol struct {
	ModuleInfo *ModuleInfo   `protobuf:"bytes,1,opt,name=module_info,json=moduleInfo" json:"module_info"`
	ExtraInfo  *MyIdolExtra  `protobuf:"bytes,2,opt,name=extra_info,json=extraInfo" json:"extra_info"`
	List       []*MyIdolItem `protobuf:"bytes,3,rep,name=list" json:"list"`
}

func (m *MMyIdol) Reset()         { *m = MMyIdol{} }
func (m *MMyIdol) String() string { return proto.CompactTextString(m) }
func (*MMyIdol) ProtoMessage()    {}
func (*MMyIdol) Descriptor() ([]byte, []int) {
	return fileDescriptor_index_6a75d6dc6295118d, []int{6}
}
func (m *MMyIdol) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MMyIdol) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MMyIdol.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *MMyIdol) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MMyIdol.Merge(dst, src)
}
func (m *MMyIdol) XXX_Size() int {
	return m.Size()
}
func (m *MMyIdol) XXX_DiscardUnknown() {
	xxx_messageInfo_MMyIdol.DiscardUnknown(m)
}

var xxx_messageInfo_MMyIdol proto.InternalMessageInfo

func (m *MMyIdol) GetModuleInfo() *ModuleInfo {
	if m != nil {
		return m.ModuleInfo
	}
	return nil
}

func (m *MMyIdol) GetExtraInfo() *MyIdolExtra {
	if m != nil {
		return m.ExtraInfo
	}
	return nil
}

func (m *MMyIdol) GetList() []*MyIdolItem {
	if m != nil {
		return m.List
	}
	return nil
}

// RoomList 房间列表
type MRoomBlock struct {
	ModuleInfo *ModuleInfo       `protobuf:"bytes,1,opt,name=module_info,json=moduleInfo" json:"module_info"`
	List       []*CommonRoomItem `protobuf:"bytes,3,rep,name=list" json:"list"`
}

func (m *MRoomBlock) Reset()         { *m = MRoomBlock{} }
func (m *MRoomBlock) String() string { return proto.CompactTextString(m) }
func (*MRoomBlock) ProtoMessage()    {}
func (*MRoomBlock) Descriptor() ([]byte, []int) {
	return fileDescriptor_index_6a75d6dc6295118d, []int{7}
}
func (m *MRoomBlock) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MRoomBlock) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MRoomBlock.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *MRoomBlock) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MRoomBlock.Merge(dst, src)
}
func (m *MRoomBlock) XXX_Size() int {
	return m.Size()
}
func (m *MRoomBlock) XXX_DiscardUnknown() {
	xxx_messageInfo_MRoomBlock.DiscardUnknown(m)
}

var xxx_messageInfo_MRoomBlock proto.InternalMessageInfo

func (m *MRoomBlock) GetModuleInfo() *ModuleInfo {
	if m != nil {
		return m.ModuleInfo
	}
	return nil
}

func (m *MRoomBlock) GetList() []*CommonRoomItem {
	if m != nil {
		return m.List
	}
	return nil
}

// MHourRank 小时榜
type MHourRank struct {
	ModuleInfo *ModuleInfo     `protobuf:"bytes,1,opt,name=module_info,json=moduleInfo" json:"module_info"`
	ExtraInfo  *HourRankExtra  `protobuf:"bytes,2,opt,name=extra_info,json=extraInfo" json:"extra_info"`
	List       []*HourRankItem `protobuf:"bytes,3,rep,name=list" json:"list"`
}

func (m *MHourRank) Reset()         { *m = MHourRank{} }
func (m *MHourRank) String() string { return proto.CompactTextString(m) }
func (*MHourRank) ProtoMessage()    {}
func (*MHourRank) Descriptor() ([]byte, []int) {
	return fileDescriptor_index_6a75d6dc6295118d, []int{8}
}
func (m *MHourRank) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MHourRank) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MHourRank.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *MHourRank) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MHourRank.Merge(dst, src)
}
func (m *MHourRank) XXX_Size() int {
	return m.Size()
}
func (m *MHourRank) XXX_DiscardUnknown() {
	xxx_messageInfo_MHourRank.DiscardUnknown(m)
}

var xxx_messageInfo_MHourRank proto.InternalMessageInfo

func (m *MHourRank) GetModuleInfo() *ModuleInfo {
	if m != nil {
		return m.ModuleInfo
	}
	return nil
}

func (m *MHourRank) GetExtraInfo() *HourRankExtra {
	if m != nil {
		return m.ExtraInfo
	}
	return nil
}

func (m *MHourRank) GetList() []*HourRankItem {
	if m != nil {
		return m.List
	}
	return nil
}

// MActivityCard 活动卡
type MActivityCard struct {
	ModuleInfo *ModuleInfo         `protobuf:"bytes,1,opt,name=module_info,json=moduleInfo" json:"module_info"`
	List       []*ActivityCardItem `protobuf:"bytes,2,rep,name=list" json:"list"`
}

func (m *MActivityCard) Reset()         { *m = MActivityCard{} }
func (m *MActivityCard) String() string { return proto.CompactTextString(m) }
func (*MActivityCard) ProtoMessage()    {}
func (*MActivityCard) Descriptor() ([]byte, []int) {
	return fileDescriptor_index_6a75d6dc6295118d, []int{9}
}
func (m *MActivityCard) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MActivityCard) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MActivityCard.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *MActivityCard) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MActivityCard.Merge(dst, src)
}
func (m *MActivityCard) XXX_Size() int {
	return m.Size()
}
func (m *MActivityCard) XXX_DiscardUnknown() {
	xxx_messageInfo_MActivityCard.DiscardUnknown(m)
}

var xxx_messageInfo_MActivityCard proto.InternalMessageInfo

func (m *MActivityCard) GetModuleInfo() *ModuleInfo {
	if m != nil {
		return m.ModuleInfo
	}
	return nil
}

func (m *MActivityCard) GetList() []*ActivityCardItem {
	if m != nil {
		return m.List
	}
	return nil
}

// ...
// ModuleInfo
type ModuleInfo struct {
	// 模块id
	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id"`
	// 模块跳转链接
	Link string `protobuf:"bytes,2,opt,name=link,proto3" json:"link"`
	// 模块图标
	Pic string `protobuf:"bytes,3,opt,name=pic,proto3" json:"pic"`
	// 模块标题
	Title string `protobuf:"bytes,4,opt,name=title,proto3" json:"title"`
	// 模块类型 1: banner 2: 导航栏 3: 运营推荐分区-标准 4: 运营推荐分区-方 5：排行榜（小时榜） 6: 推荐主播-标准 7: 推荐主播-方 8:我的关注(用户相关) 9：一级分区-标准 10：一级分区-方 11: 活动卡片 12：常用标签推荐入口(用户相关) 13：常用标签推荐房间列表(用户相关) 14：大航海提示入口
	Type int64 `protobuf:"varint,5,opt,name=type,proto3" json:"type"`
	// 模块排序值
	Sort int64 `protobuf:"varint,6,opt,name=sort,proto3" json:"sort"`
	// 模块数据源数量，按需、目前只有推荐有，其它模块都是默认值0
	Count int64 `protobuf:"varint,7,opt,name=count,proto3" json:"count"`
}

func (m *ModuleInfo) Reset()         { *m = ModuleInfo{} }
func (m *ModuleInfo) String() string { return proto.CompactTextString(m) }
func (*ModuleInfo) ProtoMessage()    {}
func (*ModuleInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_index_6a75d6dc6295118d, []int{10}
}
func (m *ModuleInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ModuleInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ModuleInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ModuleInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ModuleInfo.Merge(dst, src)
}
func (m *ModuleInfo) XXX_Size() int {
	return m.Size()
}
func (m *ModuleInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ModuleInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ModuleInfo proto.InternalMessageInfo

func (m *ModuleInfo) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *ModuleInfo) GetLink() string {
	if m != nil {
		return m.Link
	}
	return ""
}

func (m *ModuleInfo) GetPic() string {
	if m != nil {
		return m.Pic
	}
	return ""
}

func (m *ModuleInfo) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *ModuleInfo) GetType() int64 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *ModuleInfo) GetSort() int64 {
	if m != nil {
		return m.Sort
	}
	return 0
}

func (m *ModuleInfo) GetCount() int64 {
	if m != nil {
		return m.Count
	}
	return 0
}

// PicItem 比如banner、分区入口、大航海提示等等
type PicItem struct {
	// 唯一标识id
	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id"`
	// 跳转url
	Link string `protobuf:"bytes,2,opt,name=link,proto3" json:"link"`
	// 图片url
	Pic string `protobuf:"bytes,3,opt,name=pic,proto3" json:"pic"`
	// 标题
	Title string `protobuf:"bytes,4,opt,name=title,proto3" json:"title"`
	// 内容
	Content string `protobuf:"bytes,5,opt,name=content,proto3" json:"content"`
}

func (m *PicItem) Reset()         { *m = PicItem{} }
func (m *PicItem) String() string { return proto.CompactTextString(m) }
func (*PicItem) ProtoMessage()    {}
func (*PicItem) Descriptor() ([]byte, []int) {
	return fileDescriptor_index_6a75d6dc6295118d, []int{11}
}
func (m *PicItem) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PicItem) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PicItem.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *PicItem) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PicItem.Merge(dst, src)
}
func (m *PicItem) XXX_Size() int {
	return m.Size()
}
func (m *PicItem) XXX_DiscardUnknown() {
	xxx_messageInfo_PicItem.DiscardUnknown(m)
}

var xxx_messageInfo_PicItem proto.InternalMessageInfo

func (m *PicItem) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *PicItem) GetLink() string {
	if m != nil {
		return m.Link
	}
	return ""
}

func (m *PicItem) GetPic() string {
	if m != nil {
		return m.Pic
	}
	return ""
}

func (m *PicItem) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *PicItem) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

// MyTagItem
type MyTagItem struct {
	AreaV2Id         int64  `protobuf:"varint,1,opt,name=area_v2_id,json=areaV2Id,proto3" json:"area_v2_id"`
	AreaV2Name       string `protobuf:"bytes,2,opt,name=area_v2_name,json=areaV2Name,proto3" json:"area_v2_name"`
	AreaV2ParentId   int64  `protobuf:"varint,3,opt,name=area_v2_parent_id,json=areaV2ParentId,proto3" json:"area_v2_parent_id"`
	AreaV2ParentName string `protobuf:"bytes,4,opt,name=area_v2_parent_name,json=areaV2ParentName,proto3" json:"area_v2_parent_name"`
	Pic              string `protobuf:"bytes,5,opt,name=pic,proto3" json:"pic"`
	Link             string `protobuf:"bytes,6,opt,name=link,proto3" json:"link"`
	IsAdvice         int64  `protobuf:"varint,7,opt,name=is_advice,json=isAdvice,proto3" json:"is_advice"`
}

func (m *MyTagItem) Reset()         { *m = MyTagItem{} }
func (m *MyTagItem) String() string { return proto.CompactTextString(m) }
func (*MyTagItem) ProtoMessage()    {}
func (*MyTagItem) Descriptor() ([]byte, []int) {
	return fileDescriptor_index_6a75d6dc6295118d, []int{12}
}
func (m *MyTagItem) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MyTagItem) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MyTagItem.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *MyTagItem) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MyTagItem.Merge(dst, src)
}
func (m *MyTagItem) XXX_Size() int {
	return m.Size()
}
func (m *MyTagItem) XXX_DiscardUnknown() {
	xxx_messageInfo_MyTagItem.DiscardUnknown(m)
}

var xxx_messageInfo_MyTagItem proto.InternalMessageInfo

func (m *MyTagItem) GetAreaV2Id() int64 {
	if m != nil {
		return m.AreaV2Id
	}
	return 0
}

func (m *MyTagItem) GetAreaV2Name() string {
	if m != nil {
		return m.AreaV2Name
	}
	return ""
}

func (m *MyTagItem) GetAreaV2ParentId() int64 {
	if m != nil {
		return m.AreaV2ParentId
	}
	return 0
}

func (m *MyTagItem) GetAreaV2ParentName() string {
	if m != nil {
		return m.AreaV2ParentName
	}
	return ""
}

func (m *MyTagItem) GetPic() string {
	if m != nil {
		return m.Pic
	}
	return ""
}

func (m *MyTagItem) GetLink() string {
	if m != nil {
		return m.Link
	}
	return ""
}

func (m *MyTagItem) GetIsAdvice() int64 {
	if m != nil {
		return m.IsAdvice
	}
	return 0
}

// MyTagExtra
type MyTagExtra struct {
	// 是否命中常用标签灰度
	IsGray int64 `protobuf:"varint,1,opt,name=is_gray,json=isGray,proto3" json:"is_gray"`
	// offline已下线标签
	Offline []*OfflineTag `protobuf:"bytes,2,rep,name=offline" json:"offline"`
}

func (m *MyTagExtra) Reset()         { *m = MyTagExtra{} }
func (m *MyTagExtra) String() string { return proto.CompactTextString(m) }
func (*MyTagExtra) ProtoMessage()    {}
func (*MyTagExtra) Descriptor() ([]byte, []int) {
	return fileDescriptor_index_6a75d6dc6295118d, []int{13}
}
func (m *MyTagExtra) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MyTagExtra) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MyTagExtra.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *MyTagExtra) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MyTagExtra.Merge(dst, src)
}
func (m *MyTagExtra) XXX_Size() int {
	return m.Size()
}
func (m *MyTagExtra) XXX_DiscardUnknown() {
	xxx_messageInfo_MyTagExtra.DiscardUnknown(m)
}

var xxx_messageInfo_MyTagExtra proto.InternalMessageInfo

func (m *MyTagExtra) GetIsGray() int64 {
	if m != nil {
		return m.IsGray
	}
	return 0
}

func (m *MyTagExtra) GetOffline() []*OfflineTag {
	if m != nil {
		return m.Offline
	}
	return nil
}

// OfflineTag
type OfflineTag struct {
	Id         int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id"`
	AreaV2Name string `protobuf:"bytes,2,opt,name=area_v2_name,json=areaV2Name,proto3" json:"area_v2_name"`
}

func (m *OfflineTag) Reset()         { *m = OfflineTag{} }
func (m *OfflineTag) String() string { return proto.CompactTextString(m) }
func (*OfflineTag) ProtoMessage()    {}
func (*OfflineTag) Descriptor() ([]byte, []int) {
	return fileDescriptor_index_6a75d6dc6295118d, []int{14}
}
func (m *OfflineTag) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OfflineTag) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OfflineTag.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *OfflineTag) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OfflineTag.Merge(dst, src)
}
func (m *OfflineTag) XXX_Size() int {
	return m.Size()
}
func (m *OfflineTag) XXX_DiscardUnknown() {
	xxx_messageInfo_OfflineTag.DiscardUnknown(m)
}

var xxx_messageInfo_OfflineTag proto.InternalMessageInfo

func (m *OfflineTag) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *OfflineTag) GetAreaV2Name() string {
	if m != nil {
		return m.AreaV2Name
	}
	return ""
}

// MyIdolExtra
type MyIdolExtra struct {
	TotalCount   int64  `protobuf:"varint,1,opt,name=total_count,json=totalCount,proto3" json:"total_count"`
	TimeDesc     string `protobuf:"bytes,2,opt,name=time_desc,json=timeDesc,proto3" json:"time_desc"`
	UnameDesc    string `protobuf:"bytes,3,opt,name=uname_desc,json=unameDesc,proto3" json:"uname_desc"`
	TagsDesc     string `protobuf:"bytes,4,opt,name=tags_desc,json=tagsDesc,proto3" json:"tags_desc"`
	CardType     int64  `protobuf:"varint,5,opt,name=card_type,json=cardType,proto3" json:"card_type"`
	RelationPage int64  `protobuf:"varint,6,opt,name=relation_page,json=relationPage,proto3" json:"relation_page"`
}

func (m *MyIdolExtra) Reset()         { *m = MyIdolExtra{} }
func (m *MyIdolExtra) String() string { return proto.CompactTextString(m) }
func (*MyIdolExtra) ProtoMessage()    {}
func (*MyIdolExtra) Descriptor() ([]byte, []int) {
	return fileDescriptor_index_6a75d6dc6295118d, []int{15}
}
func (m *MyIdolExtra) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MyIdolExtra) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MyIdolExtra.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *MyIdolExtra) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MyIdolExtra.Merge(dst, src)
}
func (m *MyIdolExtra) XXX_Size() int {
	return m.Size()
}
func (m *MyIdolExtra) XXX_DiscardUnknown() {
	xxx_messageInfo_MyIdolExtra.DiscardUnknown(m)
}

var xxx_messageInfo_MyIdolExtra proto.InternalMessageInfo

func (m *MyIdolExtra) GetTotalCount() int64 {
	if m != nil {
		return m.TotalCount
	}
	return 0
}

func (m *MyIdolExtra) GetTimeDesc() string {
	if m != nil {
		return m.TimeDesc
	}
	return ""
}

func (m *MyIdolExtra) GetUnameDesc() string {
	if m != nil {
		return m.UnameDesc
	}
	return ""
}

func (m *MyIdolExtra) GetTagsDesc() string {
	if m != nil {
		return m.TagsDesc
	}
	return ""
}

func (m *MyIdolExtra) GetCardType() int64 {
	if m != nil {
		return m.CardType
	}
	return 0
}

func (m *MyIdolExtra) GetRelationPage() int64 {
	if m != nil {
		return m.RelationPage
	}
	return 0
}

// MyIdolItem
type MyIdolItem struct {
	Roomid           int64   `protobuf:"varint,1,opt,name=roomid,proto3" json:"roomid"`
	Uid              int64   `protobuf:"varint,2,opt,name=uid,proto3" json:"uid"`
	Uname            string  `protobuf:"bytes,3,opt,name=uname,proto3" json:"uname"`
	Face             string  `protobuf:"bytes,4,opt,name=face,proto3" json:"face"`
	Cover            string  `protobuf:"bytes,5,opt,name=cover,proto3" json:"cover"`
	Title            string  `protobuf:"bytes,6,opt,name=title,proto3" json:"title"`
	Area             int64   `protobuf:"varint,7,opt,name=area,proto3" json:"area"`
	LiveTime         int64   `protobuf:"varint,8,opt,name=live_time,json=liveTime,proto3" json:"live_time"`
	AreaName         string  `protobuf:"bytes,9,opt,name=area_name,json=areaName,proto3" json:"area_name"`
	AreaV2Id         int64   `protobuf:"varint,10,opt,name=area_v2_id,json=areaV2Id,proto3" json:"area_v2_id"`
	AreaV2Name       string  `protobuf:"bytes,11,opt,name=area_v2_name,json=areaV2Name,proto3" json:"area_v2_name"`
	AreaV2ParentName string  `protobuf:"bytes,12,opt,name=area_v2_parent_name,json=areaV2ParentName,proto3" json:"area_v2_parent_name"`
	AreaV2ParentId   int64   `protobuf:"varint,13,opt,name=area_v2_parent_id,json=areaV2ParentId,proto3" json:"area_v2_parent_id"`
	LiveTagName      string  `protobuf:"bytes,14,opt,name=live_tag_name,json=liveTagName,proto3" json:"live_tag_name"`
	Online           int64   `protobuf:"varint,15,opt,name=online,proto3" json:"online"`
	PlayUrl          string  `protobuf:"bytes,16,opt,name=play_url,json=playUrl,proto3" json:"play_url"`
	PlayUrlH265      string  `protobuf:"bytes,17,opt,name=play_url_h265,json=playUrlH265,proto3" json:"play_url_h265"`
	AcceptQuality    []int64 `protobuf:"varint,18,rep,packed,name=accept_quality,json=acceptQuality" json:"accept_quality"`
	CurrentQuality   int64   `protobuf:"varint,19,opt,name=current_quality,json=currentQuality,proto3" json:"current_quality"`
	PkId             int64   `protobuf:"varint,20,opt,name=pk_id,json=pkId,proto3" json:"pk_id"`
	Link             string  `protobuf:"bytes,21,opt,name=link,proto3" json:"link"`
	SpecialAttention int64   `protobuf:"varint,22,opt,name=special_attention,json=specialAttention,proto3" json:"special_attention"`
	BroadcastType    int64   `protobuf:"varint,23,opt,name=broadcast_type,json=broadcastType,proto3" json:"broadcast_type"`
	PendentRu        string  `protobuf:"bytes,24,opt,name=pendent_ru,json=pendentRu,proto3" json:"pendent_ru"`
	PendentRuColor   string  `protobuf:"bytes,25,opt,name=pendent_ru_color,json=pendentRuColor,proto3" json:"pendent_ru_color"`
	PendentRuPic     string  `protobuf:"bytes,26,opt,name=pendent_ru_pic,json=pendentRuPic,proto3" json:"pendent_ru_pic"`
	OfficialVerify   int64   `protobuf:"varint,27,opt,name=official_verify,json=officialVerify,proto3" json:"official_verify"`
}

func (m *MyIdolItem) Reset()         { *m = MyIdolItem{} }
func (m *MyIdolItem) String() string { return proto.CompactTextString(m) }
func (*MyIdolItem) ProtoMessage()    {}
func (*MyIdolItem) Descriptor() ([]byte, []int) {
	return fileDescriptor_index_6a75d6dc6295118d, []int{16}
}
func (m *MyIdolItem) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MyIdolItem) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MyIdolItem.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *MyIdolItem) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MyIdolItem.Merge(dst, src)
}
func (m *MyIdolItem) XXX_Size() int {
	return m.Size()
}
func (m *MyIdolItem) XXX_DiscardUnknown() {
	xxx_messageInfo_MyIdolItem.DiscardUnknown(m)
}

var xxx_messageInfo_MyIdolItem proto.InternalMessageInfo

func (m *MyIdolItem) GetRoomid() int64 {
	if m != nil {
		return m.Roomid
	}
	return 0
}

func (m *MyIdolItem) GetUid() int64 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *MyIdolItem) GetUname() string {
	if m != nil {
		return m.Uname
	}
	return ""
}

func (m *MyIdolItem) GetFace() string {
	if m != nil {
		return m.Face
	}
	return ""
}

func (m *MyIdolItem) GetCover() string {
	if m != nil {
		return m.Cover
	}
	return ""
}

func (m *MyIdolItem) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *MyIdolItem) GetArea() int64 {
	if m != nil {
		return m.Area
	}
	return 0
}

func (m *MyIdolItem) GetLiveTime() int64 {
	if m != nil {
		return m.LiveTime
	}
	return 0
}

func (m *MyIdolItem) GetAreaName() string {
	if m != nil {
		return m.AreaName
	}
	return ""
}

func (m *MyIdolItem) GetAreaV2Id() int64 {
	if m != nil {
		return m.AreaV2Id
	}
	return 0
}

func (m *MyIdolItem) GetAreaV2Name() string {
	if m != nil {
		return m.AreaV2Name
	}
	return ""
}

func (m *MyIdolItem) GetAreaV2ParentName() string {
	if m != nil {
		return m.AreaV2ParentName
	}
	return ""
}

func (m *MyIdolItem) GetAreaV2ParentId() int64 {
	if m != nil {
		return m.AreaV2ParentId
	}
	return 0
}

func (m *MyIdolItem) GetLiveTagName() string {
	if m != nil {
		return m.LiveTagName
	}
	return ""
}

func (m *MyIdolItem) GetOnline() int64 {
	if m != nil {
		return m.Online
	}
	return 0
}

func (m *MyIdolItem) GetPlayUrl() string {
	if m != nil {
		return m.PlayUrl
	}
	return ""
}

func (m *MyIdolItem) GetPlayUrlH265() string {
	if m != nil {
		return m.PlayUrlH265
	}
	return ""
}

func (m *MyIdolItem) GetAcceptQuality() []int64 {
	if m != nil {
		return m.AcceptQuality
	}
	return nil
}

func (m *MyIdolItem) GetCurrentQuality() int64 {
	if m != nil {
		return m.CurrentQuality
	}
	return 0
}

func (m *MyIdolItem) GetPkId() int64 {
	if m != nil {
		return m.PkId
	}
	return 0
}

func (m *MyIdolItem) GetLink() string {
	if m != nil {
		return m.Link
	}
	return ""
}

func (m *MyIdolItem) GetSpecialAttention() int64 {
	if m != nil {
		return m.SpecialAttention
	}
	return 0
}

func (m *MyIdolItem) GetBroadcastType() int64 {
	if m != nil {
		return m.BroadcastType
	}
	return 0
}

func (m *MyIdolItem) GetPendentRu() string {
	if m != nil {
		return m.PendentRu
	}
	return ""
}

func (m *MyIdolItem) GetPendentRuColor() string {
	if m != nil {
		return m.PendentRuColor
	}
	return ""
}

func (m *MyIdolItem) GetPendentRuPic() string {
	if m != nil {
		return m.PendentRuPic
	}
	return ""
}

func (m *MyIdolItem) GetOfficialVerify() int64 {
	if m != nil {
		return m.OfficialVerify
	}
	return 0
}

// ActivityCardItem
type ActivityCardItem struct {
	Card *BannerCardItem `protobuf:"bytes,1,opt,name=card" json:"card"`
	Room []*RoomCardItem `protobuf:"bytes,2,rep,name=room" json:"room"`
	Av   []*AvCardItem   `protobuf:"bytes,3,rep,name=av" json:"av"`
}

func (m *ActivityCardItem) Reset()         { *m = ActivityCardItem{} }
func (m *ActivityCardItem) String() string { return proto.CompactTextString(m) }
func (*ActivityCardItem) ProtoMessage()    {}
func (*ActivityCardItem) Descriptor() ([]byte, []int) {
	return fileDescriptor_index_6a75d6dc6295118d, []int{17}
}
func (m *ActivityCardItem) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ActivityCardItem) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ActivityCardItem.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ActivityCardItem) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ActivityCardItem.Merge(dst, src)
}
func (m *ActivityCardItem) XXX_Size() int {
	return m.Size()
}
func (m *ActivityCardItem) XXX_DiscardUnknown() {
	xxx_messageInfo_ActivityCardItem.DiscardUnknown(m)
}

var xxx_messageInfo_ActivityCardItem proto.InternalMessageInfo

func (m *ActivityCardItem) GetCard() *BannerCardItem {
	if m != nil {
		return m.Card
	}
	return nil
}

func (m *ActivityCardItem) GetRoom() []*RoomCardItem {
	if m != nil {
		return m.Room
	}
	return nil
}

func (m *ActivityCardItem) GetAv() []*AvCardItem {
	if m != nil {
		return m.Av
	}
	return nil
}

// BannerCardItem
type BannerCardItem struct {
	// 活动id
	Aid int64 `protobuf:"varint,1,opt,name=aid,proto3" json:"aid"`
	// 活动图片
	Pic string `protobuf:"bytes,2,opt,name=pic,proto3" json:"pic"`
	// 活动标题
	Title string `protobuf:"bytes,3,opt,name=title,proto3" json:"title"`
	// 活动文案
	Text string `protobuf:"bytes,4,opt,name=text,proto3" json:"text"`
	// 图片链接
	PicLink string `protobuf:"bytes,5,opt,name=pic_link,json=picLink,proto3" json:"pic_link"`
	// 围观链接
	GoLink string `protobuf:"bytes,6,opt,name=go_link,json=goLink,proto3" json:"go_link"`
	// 三种：去围观，预约，已预约
	ButtonText string `protobuf:"bytes,7,opt,name=button_text,json=buttonText,proto3" json:"button_text"`
	// 代表卡片所处于的状态 0可以去围观,1用户可以点击去预约,2用户可以点击取消预约
	Status int64 `protobuf:"varint,8,opt,name=status,proto3" json:"status"`
	// card,room和av排序值
	Sort int64 `protobuf:"varint,9,opt,name=sort,proto3" json:"sort"`
}

func (m *BannerCardItem) Reset()         { *m = BannerCardItem{} }
func (m *BannerCardItem) String() string { return proto.CompactTextString(m) }
func (*BannerCardItem) ProtoMessage()    {}
func (*BannerCardItem) Descriptor() ([]byte, []int) {
	return fileDescriptor_index_6a75d6dc6295118d, []int{18}
}
func (m *BannerCardItem) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BannerCardItem) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BannerCardItem.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *BannerCardItem) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BannerCardItem.Merge(dst, src)
}
func (m *BannerCardItem) XXX_Size() int {
	return m.Size()
}
func (m *BannerCardItem) XXX_DiscardUnknown() {
	xxx_messageInfo_BannerCardItem.DiscardUnknown(m)
}

var xxx_messageInfo_BannerCardItem proto.InternalMessageInfo

func (m *BannerCardItem) GetAid() int64 {
	if m != nil {
		return m.Aid
	}
	return 0
}

func (m *BannerCardItem) GetPic() string {
	if m != nil {
		return m.Pic
	}
	return ""
}

func (m *BannerCardItem) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *BannerCardItem) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

func (m *BannerCardItem) GetPicLink() string {
	if m != nil {
		return m.PicLink
	}
	return ""
}

func (m *BannerCardItem) GetGoLink() string {
	if m != nil {
		return m.GoLink
	}
	return ""
}

func (m *BannerCardItem) GetButtonText() string {
	if m != nil {
		return m.ButtonText
	}
	return ""
}

func (m *BannerCardItem) GetStatus() int64 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *BannerCardItem) GetSort() int64 {
	if m != nil {
		return m.Sort
	}
	return 0
}

// RoomCardItem
type RoomCardItem struct {
	// 是否开播
	IsLive int64 `protobuf:"varint,1,opt,name=is_live,json=isLive,proto3" json:"is_live"`
	// 房间id
	RoomId int64 `protobuf:"varint,2,opt,name=room_id,json=roomId,proto3" json:"room_id"`
	// 房间标题
	Title string `protobuf:"bytes,3,opt,name=title,proto3" json:"title"`
	// 主播名
	UName string `protobuf:"bytes,4,opt,name=u_name,json=uName,proto3" json:"u_name"`
	// 人气值
	Online int64 `protobuf:"varint,5,opt,name=online,proto3" json:"online"`
	// 封面
	Cover string `protobuf:"bytes,6,opt,name=cover,proto3" json:"cover"`
	// 父一级分区id
	AreaV2ParentId int64 `protobuf:"varint,7,opt,name=area_v2_parent_id,json=areaV2ParentId,proto3" json:"area_v2_parent_id"`
	// 二级分区id
	AreaV2Id int64 `protobuf:"varint,8,opt,name=area_v2_id,json=areaV2Id,proto3" json:"area_v2_id"`
	// card,room和av排序值
	Sort int64 `protobuf:"varint,9,opt,name=sort,proto3" json:"sort"`
}

func (m *RoomCardItem) Reset()         { *m = RoomCardItem{} }
func (m *RoomCardItem) String() string { return proto.CompactTextString(m) }
func (*RoomCardItem) ProtoMessage()    {}
func (*RoomCardItem) Descriptor() ([]byte, []int) {
	return fileDescriptor_index_6a75d6dc6295118d, []int{19}
}
func (m *RoomCardItem) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RoomCardItem) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RoomCardItem.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *RoomCardItem) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RoomCardItem.Merge(dst, src)
}
func (m *RoomCardItem) XXX_Size() int {
	return m.Size()
}
func (m *RoomCardItem) XXX_DiscardUnknown() {
	xxx_messageInfo_RoomCardItem.DiscardUnknown(m)
}

var xxx_messageInfo_RoomCardItem proto.InternalMessageInfo

func (m *RoomCardItem) GetIsLive() int64 {
	if m != nil {
		return m.IsLive
	}
	return 0
}

func (m *RoomCardItem) GetRoomId() int64 {
	if m != nil {
		return m.RoomId
	}
	return 0
}

func (m *RoomCardItem) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *RoomCardItem) GetUName() string {
	if m != nil {
		return m.UName
	}
	return ""
}

func (m *RoomCardItem) GetOnline() int64 {
	if m != nil {
		return m.Online
	}
	return 0
}

func (m *RoomCardItem) GetCover() string {
	if m != nil {
		return m.Cover
	}
	return ""
}

func (m *RoomCardItem) GetAreaV2ParentId() int64 {
	if m != nil {
		return m.AreaV2ParentId
	}
	return 0
}

func (m *RoomCardItem) GetAreaV2Id() int64 {
	if m != nil {
		return m.AreaV2Id
	}
	return 0
}

func (m *RoomCardItem) GetSort() int64 {
	if m != nil {
		return m.Sort
	}
	return 0
}

// AvCardItem
type AvCardItem struct {
	// 视频
	Avid int64 `protobuf:"varint,1,opt,name=avid,proto3" json:"avid"`
	// avid
	Title string `protobuf:"bytes,2,opt,name=title,proto3" json:"title"`
	// 视频标题
	ViewCount int64 `protobuf:"varint,3,opt,name=view_count,json=viewCount,proto3" json:"view_count"`
	// 浏览
	DanMaKu int64 `protobuf:"varint,4,opt,name=dan_ma_ku,json=danMaKu,proto3" json:"dan_ma_ku"`
	// 弹幕
	Duration int64 `protobuf:"varint,5,opt,name=duration,proto3" json:"duration"`
	// 时长
	Cover string `protobuf:"bytes,6,opt,name=cover,proto3" json:"cover"`
	// card,room和av排序值
	Sort int64 `protobuf:"varint,7,opt,name=sort,proto3" json:"sort"`
}

func (m *AvCardItem) Reset()         { *m = AvCardItem{} }
func (m *AvCardItem) String() string { return proto.CompactTextString(m) }
func (*AvCardItem) ProtoMessage()    {}
func (*AvCardItem) Descriptor() ([]byte, []int) {
	return fileDescriptor_index_6a75d6dc6295118d, []int{20}
}
func (m *AvCardItem) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AvCardItem) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AvCardItem.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *AvCardItem) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AvCardItem.Merge(dst, src)
}
func (m *AvCardItem) XXX_Size() int {
	return m.Size()
}
func (m *AvCardItem) XXX_DiscardUnknown() {
	xxx_messageInfo_AvCardItem.DiscardUnknown(m)
}

var xxx_messageInfo_AvCardItem proto.InternalMessageInfo

func (m *AvCardItem) GetAvid() int64 {
	if m != nil {
		return m.Avid
	}
	return 0
}

func (m *AvCardItem) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *AvCardItem) GetViewCount() int64 {
	if m != nil {
		return m.ViewCount
	}
	return 0
}

func (m *AvCardItem) GetDanMaKu() int64 {
	if m != nil {
		return m.DanMaKu
	}
	return 0
}

func (m *AvCardItem) GetDuration() int64 {
	if m != nil {
		return m.Duration
	}
	return 0
}

func (m *AvCardItem) GetCover() string {
	if m != nil {
		return m.Cover
	}
	return ""
}

func (m *AvCardItem) GetSort() int64 {
	if m != nil {
		return m.Sort
	}
	return 0
}

// CommonRoomItem
type CommonRoomItem struct {
	// 当前拥有清晰度列表
	AcceptQuality []int64 `protobuf:"varint,1,rep,packed,name=accept_quality,json=acceptQuality" json:"accept_quality"`
	// 二级分区id
	AreaV2Id int64 `protobuf:"varint,2,opt,name=area_v2_id,json=areaV2Id,proto3" json:"area_v2_id"`
	// 一级分区id
	AreaV2ParentId int64 `protobuf:"varint,3,opt,name=area_v2_parent_id,json=areaV2ParentId,proto3" json:"area_v2_parent_id"`
	// 二级分区名称
	AreaV2Name string `protobuf:"bytes,4,opt,name=area_v2_name,json=areaV2Name,proto3" json:"area_v2_name"`
	// 一级分区名称
	AreaV2ParentName string `protobuf:"bytes,5,opt,name=area_v2_parent_name,json=areaV2ParentName,proto3" json:"area_v2_parent_name"`
	// 横竖屏  0:横屏 1:竖屏 -1:异常情况
	BroadcastType int64 `protobuf:"varint,6,opt,name=broadcast_type,json=broadcastType,proto3" json:"broadcast_type"`
	// 封面，封面现在有3种：关键帧、封面图、秀场封面（正方形的），返回哪个由后端决定
	Cover string `protobuf:"bytes,7,opt,name=cover,proto3" json:"cover"`
	// 当前清晰度,清晰度((0)) 0:默认码率, 2:800 3:1500 4:原画
	CurrentQuality int64 `protobuf:"varint,8,opt,name=current_quality,json=currentQuality,proto3" json:"current_quality"`
	// 主播头像
	Face string `protobuf:"bytes,9,opt,name=face,proto3" json:"face"`
	// 跳转链接
	Link string `protobuf:"bytes,10,opt,name=link,proto3" json:"link"`
	// 人气值
	Online int64 `protobuf:"varint,11,opt,name=online,proto3" json:"online"`
	// 新版角标-右上 默认为空 只能是文字！！！@古月 【5.29显示更新】：服务端还是吐右上（兼容老版），5.29显示在左上
	PendentRu string `protobuf:"bytes,12,opt,name=pendent_ru,json=pendentRu,proto3" json:"pendent_ru"`
	// 【5.29显示更新】：服务端还是吐右上，5.29客户端显示在左上,对应的背景图片
	PendentRuColor string `protobuf:"bytes,13,opt,name=pendent_ru_color,json=pendentRuColor,proto3" json:"pendent_ru_color"`
	// 新版移动端角标色值-右上
	PendentRuPic string `protobuf:"bytes,14,opt,name=pendent_ru_pic,json=pendentRuPic,proto3" json:"pendent_ru_pic"`
	// pk_id
	PkId int64 `protobuf:"varint,15,opt,name=pk_id,json=pkId,proto3" json:"pk_id"`
	// 秒开播放串 h264
	PlayUrl string `protobuf:"bytes,16,opt,name=play_url,json=playUrl,proto3" json:"play_url"`
	// 推荐类型 1：人气 2：营收 3：运营强推 4：天马推荐（暂定）用于客户端打点
	RecType int64 `protobuf:"varint,17,opt,name=rec_type,json=recType,proto3" json:"rec_type"`
	// 房间id
	Roomid int64 `protobuf:"varint,18,opt,name=roomid,proto3" json:"roomid"`
	// 房间标题
	Title string `protobuf:"bytes,19,opt,name=title,proto3" json:"title"`
	// 主播uname
	Uname string `protobuf:"bytes,20,opt,name=uname,proto3" json:"uname"`
	// 秒开播放串 h265
	PlayUrlH265 string `protobuf:"bytes,21,opt,name=play_url_h265,json=playUrlH265,proto3" json:"play_url_h265"`
}

func (m *CommonRoomItem) Reset()         { *m = CommonRoomItem{} }
func (m *CommonRoomItem) String() string { return proto.CompactTextString(m) }
func (*CommonRoomItem) ProtoMessage()    {}
func (*CommonRoomItem) Descriptor() ([]byte, []int) {
	return fileDescriptor_index_6a75d6dc6295118d, []int{21}
}
func (m *CommonRoomItem) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CommonRoomItem) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CommonRoomItem.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *CommonRoomItem) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CommonRoomItem.Merge(dst, src)
}
func (m *CommonRoomItem) XXX_Size() int {
	return m.Size()
}
func (m *CommonRoomItem) XXX_DiscardUnknown() {
	xxx_messageInfo_CommonRoomItem.DiscardUnknown(m)
}

var xxx_messageInfo_CommonRoomItem proto.InternalMessageInfo

func (m *CommonRoomItem) GetAcceptQuality() []int64 {
	if m != nil {
		return m.AcceptQuality
	}
	return nil
}

func (m *CommonRoomItem) GetAreaV2Id() int64 {
	if m != nil {
		return m.AreaV2Id
	}
	return 0
}

func (m *CommonRoomItem) GetAreaV2ParentId() int64 {
	if m != nil {
		return m.AreaV2ParentId
	}
	return 0
}

func (m *CommonRoomItem) GetAreaV2Name() string {
	if m != nil {
		return m.AreaV2Name
	}
	return ""
}

func (m *CommonRoomItem) GetAreaV2ParentName() string {
	if m != nil {
		return m.AreaV2ParentName
	}
	return ""
}

func (m *CommonRoomItem) GetBroadcastType() int64 {
	if m != nil {
		return m.BroadcastType
	}
	return 0
}

func (m *CommonRoomItem) GetCover() string {
	if m != nil {
		return m.Cover
	}
	return ""
}

func (m *CommonRoomItem) GetCurrentQuality() int64 {
	if m != nil {
		return m.CurrentQuality
	}
	return 0
}

func (m *CommonRoomItem) GetFace() string {
	if m != nil {
		return m.Face
	}
	return ""
}

func (m *CommonRoomItem) GetLink() string {
	if m != nil {
		return m.Link
	}
	return ""
}

func (m *CommonRoomItem) GetOnline() int64 {
	if m != nil {
		return m.Online
	}
	return 0
}

func (m *CommonRoomItem) GetPendentRu() string {
	if m != nil {
		return m.PendentRu
	}
	return ""
}

func (m *CommonRoomItem) GetPendentRuColor() string {
	if m != nil {
		return m.PendentRuColor
	}
	return ""
}

func (m *CommonRoomItem) GetPendentRuPic() string {
	if m != nil {
		return m.PendentRuPic
	}
	return ""
}

func (m *CommonRoomItem) GetPkId() int64 {
	if m != nil {
		return m.PkId
	}
	return 0
}

func (m *CommonRoomItem) GetPlayUrl() string {
	if m != nil {
		return m.PlayUrl
	}
	return ""
}

func (m *CommonRoomItem) GetRecType() int64 {
	if m != nil {
		return m.RecType
	}
	return 0
}

func (m *CommonRoomItem) GetRoomid() int64 {
	if m != nil {
		return m.Roomid
	}
	return 0
}

func (m *CommonRoomItem) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *CommonRoomItem) GetUname() string {
	if m != nil {
		return m.Uname
	}
	return ""
}

func (m *CommonRoomItem) GetPlayUrlH265() string {
	if m != nil {
		return m.PlayUrlH265
	}
	return ""
}

// HourRankItem
type HourRankItem struct {
	// 排名
	Rank int64 `protobuf:"varint,1,opt,name=rank,proto3" json:"rank"`
	// 用户uid
	Uid int64 `protobuf:"varint,2,opt,name=uid,proto3" json:"uid"`
	// 房间id
	Roomid int64 `protobuf:"varint,3,opt,name=roomid,proto3" json:"roomid"`
	// 用户昵称
	Uname string `protobuf:"bytes,4,opt,name=uname,proto3" json:"uname"`
	// 用户头像
	Face string `protobuf:"bytes,5,opt,name=face,proto3" json:"face"`
	// 直播状态
	LiveStatus int64 `protobuf:"varint,6,opt,name=live_status,json=liveStatus,proto3" json:"live_status"`
	// 父分区id
	AreaV2ParentId int64 `protobuf:"varint,7,opt,name=area_v2_parent_id,json=areaV2ParentId,proto3" json:"area_v2_parent_id"`
	// 父分区名称
	AreaV2ParentName string `protobuf:"bytes,8,opt,name=area_v2_parent_name,json=areaV2ParentName,proto3" json:"area_v2_parent_name"`
	// 子分区id
	AreaV2Id int64 `protobuf:"varint,9,opt,name=area_v2_id,json=areaV2Id,proto3" json:"area_v2_id"`
	// 子分区名称
	AreaV2Name string `protobuf:"bytes,10,opt,name=area_v2_name,json=areaV2Name,proto3" json:"area_v2_name"`
}

func (m *HourRankItem) Reset()         { *m = HourRankItem{} }
func (m *HourRankItem) String() string { return proto.CompactTextString(m) }
func (*HourRankItem) ProtoMessage()    {}
func (*HourRankItem) Descriptor() ([]byte, []int) {
	return fileDescriptor_index_6a75d6dc6295118d, []int{22}
}
func (m *HourRankItem) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HourRankItem) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HourRankItem.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *HourRankItem) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HourRankItem.Merge(dst, src)
}
func (m *HourRankItem) XXX_Size() int {
	return m.Size()
}
func (m *HourRankItem) XXX_DiscardUnknown() {
	xxx_messageInfo_HourRankItem.DiscardUnknown(m)
}

var xxx_messageInfo_HourRankItem proto.InternalMessageInfo

func (m *HourRankItem) GetRank() int64 {
	if m != nil {
		return m.Rank
	}
	return 0
}

func (m *HourRankItem) GetUid() int64 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *HourRankItem) GetRoomid() int64 {
	if m != nil {
		return m.Roomid
	}
	return 0
}

func (m *HourRankItem) GetUname() string {
	if m != nil {
		return m.Uname
	}
	return ""
}

func (m *HourRankItem) GetFace() string {
	if m != nil {
		return m.Face
	}
	return ""
}

func (m *HourRankItem) GetLiveStatus() int64 {
	if m != nil {
		return m.LiveStatus
	}
	return 0
}

func (m *HourRankItem) GetAreaV2ParentId() int64 {
	if m != nil {
		return m.AreaV2ParentId
	}
	return 0
}

func (m *HourRankItem) GetAreaV2ParentName() string {
	if m != nil {
		return m.AreaV2ParentName
	}
	return ""
}

func (m *HourRankItem) GetAreaV2Id() int64 {
	if m != nil {
		return m.AreaV2Id
	}
	return 0
}

func (m *HourRankItem) GetAreaV2Name() string {
	if m != nil {
		return m.AreaV2Name
	}
	return ""
}

type HourRankExtra struct {
	// 14:00-15:00榜单
	SubTitle string `protobuf:"bytes,1,opt,name=sub_title,json=subTitle,proto3" json:"sub_title"`
}

func (m *HourRankExtra) Reset()         { *m = HourRankExtra{} }
func (m *HourRankExtra) String() string { return proto.CompactTextString(m) }
func (*HourRankExtra) ProtoMessage()    {}
func (*HourRankExtra) Descriptor() ([]byte, []int) {
	return fileDescriptor_index_6a75d6dc6295118d, []int{23}
}
func (m *HourRankExtra) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HourRankExtra) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HourRankExtra.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *HourRankExtra) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HourRankExtra.Merge(dst, src)
}
func (m *HourRankExtra) XXX_Size() int {
	return m.Size()
}
func (m *HourRankExtra) XXX_DiscardUnknown() {
	xxx_messageInfo_HourRankExtra.DiscardUnknown(m)
}

var xxx_messageInfo_HourRankExtra proto.InternalMessageInfo

func (m *HourRankExtra) GetSubTitle() string {
	if m != nil {
		return m.SubTitle
	}
	return ""
}

// 接口2：换一换
type ChangeReq struct {
	// 模块id
	ModuleId int64 `protobuf:"varint,1,opt,name=module_id,json=moduleId,proto3" json:"module_id,omitempty" form:"module_id" validate:"required"`
	// 关注的room ids
	AttentionRoomId string `protobuf:"bytes,2,opt,name=attention_room_id,json=attentionRoomId,proto3" json:"attention_room_id,omitempty" form:"attention_room_id"`
	// 换一换的当前页数
	Page     int64  `protobuf:"varint,3,opt,name=page,proto3" json:"page,omitempty" form:"page" validate:"required"`
	Platform string `protobuf:"bytes,4,opt,name=platform,proto3" json:"platform,omitempty" form:"platform" validate:"required"`
	Build    int64  `protobuf:"varint,5,opt,name=build,proto3" json:"build,omitempty" form:"build" validate:"required"`
	Device   string `protobuf:"bytes,6,opt,name=device,proto3" json:"device,omitempty" form:"device" validate:"required"`
	Quality  int64  `protobuf:"varint,7,opt,name=quality,proto3" json:"quality,omitempty" form:"quality"`
}

func (m *ChangeReq) Reset()         { *m = ChangeReq{} }
func (m *ChangeReq) String() string { return proto.CompactTextString(m) }
func (*ChangeReq) ProtoMessage()    {}
func (*ChangeReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_index_6a75d6dc6295118d, []int{24}
}
func (m *ChangeReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChangeReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChangeReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ChangeReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChangeReq.Merge(dst, src)
}
func (m *ChangeReq) XXX_Size() int {
	return m.Size()
}
func (m *ChangeReq) XXX_DiscardUnknown() {
	xxx_messageInfo_ChangeReq.DiscardUnknown(m)
}

var xxx_messageInfo_ChangeReq proto.InternalMessageInfo

func (m *ChangeReq) GetModuleId() int64 {
	if m != nil {
		return m.ModuleId
	}
	return 0
}

func (m *ChangeReq) GetAttentionRoomId() string {
	if m != nil {
		return m.AttentionRoomId
	}
	return ""
}

func (m *ChangeReq) GetPage() int64 {
	if m != nil {
		return m.Page
	}
	return 0
}

func (m *ChangeReq) GetPlatform() string {
	if m != nil {
		return m.Platform
	}
	return ""
}

func (m *ChangeReq) GetBuild() int64 {
	if m != nil {
		return m.Build
	}
	return 0
}

func (m *ChangeReq) GetDevice() string {
	if m != nil {
		return m.Device
	}
	return ""
}

func (m *ChangeReq) GetQuality() int64 {
	if m != nil {
		return m.Quality
	}
	return 0
}

// 换一换响应
type ChangeResp struct {
	ModuleInfo     *ModuleInfo       `protobuf:"bytes,1,opt,name=module_info,json=moduleInfo" json:"module_info,omitempty"`
	IsSkyHorseGray int64             `protobuf:"varint,2,opt,name=is_sky_horse_gray,json=isSkyHorseGray,proto3" json:"is_sky_horse_gray"`
	List           []*CommonRoomItem `protobuf:"bytes,3,rep,name=list" json:"list,omitempty"`
}

func (m *ChangeResp) Reset()         { *m = ChangeResp{} }
func (m *ChangeResp) String() string { return proto.CompactTextString(m) }
func (*ChangeResp) ProtoMessage()    {}
func (*ChangeResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_index_6a75d6dc6295118d, []int{25}
}
func (m *ChangeResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChangeResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChangeResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ChangeResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChangeResp.Merge(dst, src)
}
func (m *ChangeResp) XXX_Size() int {
	return m.Size()
}
func (m *ChangeResp) XXX_DiscardUnknown() {
	xxx_messageInfo_ChangeResp.DiscardUnknown(m)
}

var xxx_messageInfo_ChangeResp proto.InternalMessageInfo

func (m *ChangeResp) GetModuleInfo() *ModuleInfo {
	if m != nil {
		return m.ModuleInfo
	}
	return nil
}

func (m *ChangeResp) GetIsSkyHorseGray() int64 {
	if m != nil {
		return m.IsSkyHorseGray
	}
	return 0
}

func (m *ChangeResp) GetList() []*CommonRoomItem {
	if m != nil {
		return m.List
	}
	return nil
}

func init() {
	proto.RegisterType((*GetAllListReq)(nil), "live.appinterface.v2.GetAllListReq")
	proto.RegisterType((*GetAllListResp)(nil), "live.appinterface.v2.GetAllListResp")
	proto.RegisterType((*MBanner)(nil), "live.appinterface.v2.MBanner")
	proto.RegisterType((*MMyTag)(nil), "live.appinterface.v2.MMyTag")
	proto.RegisterType((*MAreaEntrance)(nil), "live.appinterface.v2.MAreaEntrance")
	proto.RegisterType((*MSeaPatrol)(nil), "live.appinterface.v2.MSeaPatrol")
	proto.RegisterType((*MMyIdol)(nil), "live.appinterface.v2.MMyIdol")
	proto.RegisterType((*MRoomBlock)(nil), "live.appinterface.v2.MRoomBlock")
	proto.RegisterType((*MHourRank)(nil), "live.appinterface.v2.MHourRank")
	proto.RegisterType((*MActivityCard)(nil), "live.appinterface.v2.MActivityCard")
	proto.RegisterType((*ModuleInfo)(nil), "live.appinterface.v2.ModuleInfo")
	proto.RegisterType((*PicItem)(nil), "live.appinterface.v2.PicItem")
	proto.RegisterType((*MyTagItem)(nil), "live.appinterface.v2.MyTagItem")
	proto.RegisterType((*MyTagExtra)(nil), "live.appinterface.v2.MyTagExtra")
	proto.RegisterType((*OfflineTag)(nil), "live.appinterface.v2.OfflineTag")
	proto.RegisterType((*MyIdolExtra)(nil), "live.appinterface.v2.MyIdolExtra")
	proto.RegisterType((*MyIdolItem)(nil), "live.appinterface.v2.MyIdolItem")
	proto.RegisterType((*ActivityCardItem)(nil), "live.appinterface.v2.ActivityCardItem")
	proto.RegisterType((*BannerCardItem)(nil), "live.appinterface.v2.BannerCardItem")
	proto.RegisterType((*RoomCardItem)(nil), "live.appinterface.v2.RoomCardItem")
	proto.RegisterType((*AvCardItem)(nil), "live.appinterface.v2.AvCardItem")
	proto.RegisterType((*CommonRoomItem)(nil), "live.appinterface.v2.CommonRoomItem")
	proto.RegisterType((*HourRankItem)(nil), "live.appinterface.v2.HourRankItem")
	proto.RegisterType((*HourRankExtra)(nil), "live.appinterface.v2.HourRankExtra")
	proto.RegisterType((*ChangeReq)(nil), "live.appinterface.v2.ChangeReq")
	proto.RegisterType((*ChangeResp)(nil), "live.appinterface.v2.ChangeResp")
}
func (m *GetAllListReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetAllListReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Platform) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintIndex(dAtA, i, uint64(len(m.Platform)))
		i += copy(dAtA[i:], m.Platform)
	}
	if len(m.Device) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintIndex(dAtA, i, uint64(len(m.Device)))
		i += copy(dAtA[i:], m.Device)
	}
	if len(m.Scale) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintIndex(dAtA, i, uint64(len(m.Scale)))
		i += copy(dAtA[i:], m.Scale)
	}
	if m.Build != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintIndex(dAtA, i, uint64(m.Build))
	}
	if m.RelationPage != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintIndex(dAtA, i, uint64(m.RelationPage))
	}
	if m.RecPage != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintIndex(dAtA, i, uint64(m.RecPage))
	}
	if m.Quality != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintIndex(dAtA, i, uint64(m.Quality))
	}
	return i, nil
}

func (m *GetAllListResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetAllListResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Interval != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintIndex(dAtA, i, uint64(m.Interval))
	}
	if m.IsSkyHorseGray != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintIndex(dAtA, i, uint64(m.IsSkyHorseGray))
	}
	if len(m.Banner) > 0 {
		for _, msg := range m.Banner {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintIndex(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.MyTag) > 0 {
		for _, msg := range m.MyTag {
			dAtA[i] = 0x22
			i++
			i = encodeVarintIndex(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.AreaEntrance) > 0 {
		for _, msg := range m.AreaEntrance {
			dAtA[i] = 0x2a
			i++
			i = encodeVarintIndex(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.SeaPatrol) > 0 {
		for _, msg := range m.SeaPatrol {
			dAtA[i] = 0x32
			i++
			i = encodeVarintIndex(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.MyIdol) > 0 {
		for _, msg := range m.MyIdol {
			dAtA[i] = 0x3a
			i++
			i = encodeVarintIndex(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.RoomList) > 0 {
		for _, msg := range m.RoomList {
			dAtA[i] = 0x42
			i++
			i = encodeVarintIndex(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.HourRank) > 0 {
		for _, msg := range m.HourRank {
			dAtA[i] = 0x4a
			i++
			i = encodeVarintIndex(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.ActivityCard) > 0 {
		for _, msg := range m.ActivityCard {
			dAtA[i] = 0x52
			i++
			i = encodeVarintIndex(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *MBanner) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MBanner) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ModuleInfo != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintIndex(dAtA, i, uint64(m.ModuleInfo.Size()))
		n1, err := m.ModuleInfo.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if len(m.List) > 0 {
		for _, msg := range m.List {
			dAtA[i] = 0x12
			i++
			i = encodeVarintIndex(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *MMyTag) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MMyTag) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ModuleInfo != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintIndex(dAtA, i, uint64(m.ModuleInfo.Size()))
		n2, err := m.ModuleInfo.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if m.ExtraInfo != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintIndex(dAtA, i, uint64(m.ExtraInfo.Size()))
		n3, err := m.ExtraInfo.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	if len(m.List) > 0 {
		for _, msg := range m.List {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintIndex(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *MAreaEntrance) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MAreaEntrance) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ModuleInfo != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintIndex(dAtA, i, uint64(m.ModuleInfo.Size()))
		n4, err := m.ModuleInfo.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	if len(m.List) > 0 {
		for _, msg := range m.List {
			dAtA[i] = 0x12
			i++
			i = encodeVarintIndex(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *MSeaPatrol) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MSeaPatrol) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ModuleInfo != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintIndex(dAtA, i, uint64(m.ModuleInfo.Size()))
		n5, err := m.ModuleInfo.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	if m.ExtraInfo != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintIndex(dAtA, i, uint64(m.ExtraInfo.Size()))
		n6, err := m.ExtraInfo.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	return i, nil
}

func (m *MMyIdol) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MMyIdol) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ModuleInfo != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintIndex(dAtA, i, uint64(m.ModuleInfo.Size()))
		n7, err := m.ModuleInfo.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	if m.ExtraInfo != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintIndex(dAtA, i, uint64(m.ExtraInfo.Size()))
		n8, err := m.ExtraInfo.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n8
	}
	if len(m.List) > 0 {
		for _, msg := range m.List {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintIndex(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *MRoomBlock) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MRoomBlock) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ModuleInfo != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintIndex(dAtA, i, uint64(m.ModuleInfo.Size()))
		n9, err := m.ModuleInfo.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n9
	}
	if len(m.List) > 0 {
		for _, msg := range m.List {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintIndex(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *MHourRank) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MHourRank) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ModuleInfo != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintIndex(dAtA, i, uint64(m.ModuleInfo.Size()))
		n10, err := m.ModuleInfo.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n10
	}
	if m.ExtraInfo != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintIndex(dAtA, i, uint64(m.ExtraInfo.Size()))
		n11, err := m.ExtraInfo.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n11
	}
	if len(m.List) > 0 {
		for _, msg := range m.List {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintIndex(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *MActivityCard) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MActivityCard) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ModuleInfo != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintIndex(dAtA, i, uint64(m.ModuleInfo.Size()))
		n12, err := m.ModuleInfo.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n12
	}
	if len(m.List) > 0 {
		for _, msg := range m.List {
			dAtA[i] = 0x12
			i++
			i = encodeVarintIndex(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *ModuleInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ModuleInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintIndex(dAtA, i, uint64(m.Id))
	}
	if len(m.Link) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintIndex(dAtA, i, uint64(len(m.Link)))
		i += copy(dAtA[i:], m.Link)
	}
	if len(m.Pic) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintIndex(dAtA, i, uint64(len(m.Pic)))
		i += copy(dAtA[i:], m.Pic)
	}
	if len(m.Title) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintIndex(dAtA, i, uint64(len(m.Title)))
		i += copy(dAtA[i:], m.Title)
	}
	if m.Type != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintIndex(dAtA, i, uint64(m.Type))
	}
	if m.Sort != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintIndex(dAtA, i, uint64(m.Sort))
	}
	if m.Count != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintIndex(dAtA, i, uint64(m.Count))
	}
	return i, nil
}

func (m *PicItem) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PicItem) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintIndex(dAtA, i, uint64(m.Id))
	}
	if len(m.Link) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintIndex(dAtA, i, uint64(len(m.Link)))
		i += copy(dAtA[i:], m.Link)
	}
	if len(m.Pic) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintIndex(dAtA, i, uint64(len(m.Pic)))
		i += copy(dAtA[i:], m.Pic)
	}
	if len(m.Title) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintIndex(dAtA, i, uint64(len(m.Title)))
		i += copy(dAtA[i:], m.Title)
	}
	if len(m.Content) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintIndex(dAtA, i, uint64(len(m.Content)))
		i += copy(dAtA[i:], m.Content)
	}
	return i, nil
}

func (m *MyTagItem) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MyTagItem) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.AreaV2Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintIndex(dAtA, i, uint64(m.AreaV2Id))
	}
	if len(m.AreaV2Name) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintIndex(dAtA, i, uint64(len(m.AreaV2Name)))
		i += copy(dAtA[i:], m.AreaV2Name)
	}
	if m.AreaV2ParentId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintIndex(dAtA, i, uint64(m.AreaV2ParentId))
	}
	if len(m.AreaV2ParentName) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintIndex(dAtA, i, uint64(len(m.AreaV2ParentName)))
		i += copy(dAtA[i:], m.AreaV2ParentName)
	}
	if len(m.Pic) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintIndex(dAtA, i, uint64(len(m.Pic)))
		i += copy(dAtA[i:], m.Pic)
	}
	if len(m.Link) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintIndex(dAtA, i, uint64(len(m.Link)))
		i += copy(dAtA[i:], m.Link)
	}
	if m.IsAdvice != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintIndex(dAtA, i, uint64(m.IsAdvice))
	}
	return i, nil
}

func (m *MyTagExtra) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MyTagExtra) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.IsGray != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintIndex(dAtA, i, uint64(m.IsGray))
	}
	if len(m.Offline) > 0 {
		for _, msg := range m.Offline {
			dAtA[i] = 0x12
			i++
			i = encodeVarintIndex(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *OfflineTag) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OfflineTag) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintIndex(dAtA, i, uint64(m.Id))
	}
	if len(m.AreaV2Name) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintIndex(dAtA, i, uint64(len(m.AreaV2Name)))
		i += copy(dAtA[i:], m.AreaV2Name)
	}
	return i, nil
}

func (m *MyIdolExtra) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MyIdolExtra) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.TotalCount != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintIndex(dAtA, i, uint64(m.TotalCount))
	}
	if len(m.TimeDesc) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintIndex(dAtA, i, uint64(len(m.TimeDesc)))
		i += copy(dAtA[i:], m.TimeDesc)
	}
	if len(m.UnameDesc) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintIndex(dAtA, i, uint64(len(m.UnameDesc)))
		i += copy(dAtA[i:], m.UnameDesc)
	}
	if len(m.TagsDesc) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintIndex(dAtA, i, uint64(len(m.TagsDesc)))
		i += copy(dAtA[i:], m.TagsDesc)
	}
	if m.CardType != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintIndex(dAtA, i, uint64(m.CardType))
	}
	if m.RelationPage != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintIndex(dAtA, i, uint64(m.RelationPage))
	}
	return i, nil
}

func (m *MyIdolItem) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MyIdolItem) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Roomid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintIndex(dAtA, i, uint64(m.Roomid))
	}
	if m.Uid != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintIndex(dAtA, i, uint64(m.Uid))
	}
	if len(m.Uname) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintIndex(dAtA, i, uint64(len(m.Uname)))
		i += copy(dAtA[i:], m.Uname)
	}
	if len(m.Face) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintIndex(dAtA, i, uint64(len(m.Face)))
		i += copy(dAtA[i:], m.Face)
	}
	if len(m.Cover) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintIndex(dAtA, i, uint64(len(m.Cover)))
		i += copy(dAtA[i:], m.Cover)
	}
	if len(m.Title) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintIndex(dAtA, i, uint64(len(m.Title)))
		i += copy(dAtA[i:], m.Title)
	}
	if m.Area != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintIndex(dAtA, i, uint64(m.Area))
	}
	if m.LiveTime != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintIndex(dAtA, i, uint64(m.LiveTime))
	}
	if len(m.AreaName) > 0 {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintIndex(dAtA, i, uint64(len(m.AreaName)))
		i += copy(dAtA[i:], m.AreaName)
	}
	if m.AreaV2Id != 0 {
		dAtA[i] = 0x50
		i++
		i = encodeVarintIndex(dAtA, i, uint64(m.AreaV2Id))
	}
	if len(m.AreaV2Name) > 0 {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintIndex(dAtA, i, uint64(len(m.AreaV2Name)))
		i += copy(dAtA[i:], m.AreaV2Name)
	}
	if len(m.AreaV2ParentName) > 0 {
		dAtA[i] = 0x62
		i++
		i = encodeVarintIndex(dAtA, i, uint64(len(m.AreaV2ParentName)))
		i += copy(dAtA[i:], m.AreaV2ParentName)
	}
	if m.AreaV2ParentId != 0 {
		dAtA[i] = 0x68
		i++
		i = encodeVarintIndex(dAtA, i, uint64(m.AreaV2ParentId))
	}
	if len(m.LiveTagName) > 0 {
		dAtA[i] = 0x72
		i++
		i = encodeVarintIndex(dAtA, i, uint64(len(m.LiveTagName)))
		i += copy(dAtA[i:], m.LiveTagName)
	}
	if m.Online != 0 {
		dAtA[i] = 0x78
		i++
		i = encodeVarintIndex(dAtA, i, uint64(m.Online))
	}
	if len(m.PlayUrl) > 0 {
		dAtA[i] = 0x82
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintIndex(dAtA, i, uint64(len(m.PlayUrl)))
		i += copy(dAtA[i:], m.PlayUrl)
	}
	if len(m.PlayUrlH265) > 0 {
		dAtA[i] = 0x8a
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintIndex(dAtA, i, uint64(len(m.PlayUrlH265)))
		i += copy(dAtA[i:], m.PlayUrlH265)
	}
	if len(m.AcceptQuality) > 0 {
		dAtA14 := make([]byte, len(m.AcceptQuality)*10)
		var j13 int
		for _, num1 := range m.AcceptQuality {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA14[j13] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j13++
			}
			dAtA14[j13] = uint8(num)
			j13++
		}
		dAtA[i] = 0x92
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintIndex(dAtA, i, uint64(j13))
		i += copy(dAtA[i:], dAtA14[:j13])
	}
	if m.CurrentQuality != 0 {
		dAtA[i] = 0x98
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintIndex(dAtA, i, uint64(m.CurrentQuality))
	}
	if m.PkId != 0 {
		dAtA[i] = 0xa0
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintIndex(dAtA, i, uint64(m.PkId))
	}
	if len(m.Link) > 0 {
		dAtA[i] = 0xaa
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintIndex(dAtA, i, uint64(len(m.Link)))
		i += copy(dAtA[i:], m.Link)
	}
	if m.SpecialAttention != 0 {
		dAtA[i] = 0xb0
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintIndex(dAtA, i, uint64(m.SpecialAttention))
	}
	if m.BroadcastType != 0 {
		dAtA[i] = 0xb8
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintIndex(dAtA, i, uint64(m.BroadcastType))
	}
	if len(m.PendentRu) > 0 {
		dAtA[i] = 0xc2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintIndex(dAtA, i, uint64(len(m.PendentRu)))
		i += copy(dAtA[i:], m.PendentRu)
	}
	if len(m.PendentRuColor) > 0 {
		dAtA[i] = 0xca
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintIndex(dAtA, i, uint64(len(m.PendentRuColor)))
		i += copy(dAtA[i:], m.PendentRuColor)
	}
	if len(m.PendentRuPic) > 0 {
		dAtA[i] = 0xd2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintIndex(dAtA, i, uint64(len(m.PendentRuPic)))
		i += copy(dAtA[i:], m.PendentRuPic)
	}
	if m.OfficialVerify != 0 {
		dAtA[i] = 0xd8
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintIndex(dAtA, i, uint64(m.OfficialVerify))
	}
	return i, nil
}

func (m *ActivityCardItem) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ActivityCardItem) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Card != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintIndex(dAtA, i, uint64(m.Card.Size()))
		n15, err := m.Card.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n15
	}
	if len(m.Room) > 0 {
		for _, msg := range m.Room {
			dAtA[i] = 0x12
			i++
			i = encodeVarintIndex(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Av) > 0 {
		for _, msg := range m.Av {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintIndex(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *BannerCardItem) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BannerCardItem) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Aid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintIndex(dAtA, i, uint64(m.Aid))
	}
	if len(m.Pic) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintIndex(dAtA, i, uint64(len(m.Pic)))
		i += copy(dAtA[i:], m.Pic)
	}
	if len(m.Title) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintIndex(dAtA, i, uint64(len(m.Title)))
		i += copy(dAtA[i:], m.Title)
	}
	if len(m.Text) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintIndex(dAtA, i, uint64(len(m.Text)))
		i += copy(dAtA[i:], m.Text)
	}
	if len(m.PicLink) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintIndex(dAtA, i, uint64(len(m.PicLink)))
		i += copy(dAtA[i:], m.PicLink)
	}
	if len(m.GoLink) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintIndex(dAtA, i, uint64(len(m.GoLink)))
		i += copy(dAtA[i:], m.GoLink)
	}
	if len(m.ButtonText) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintIndex(dAtA, i, uint64(len(m.ButtonText)))
		i += copy(dAtA[i:], m.ButtonText)
	}
	if m.Status != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintIndex(dAtA, i, uint64(m.Status))
	}
	if m.Sort != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintIndex(dAtA, i, uint64(m.Sort))
	}
	return i, nil
}

func (m *RoomCardItem) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RoomCardItem) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.IsLive != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintIndex(dAtA, i, uint64(m.IsLive))
	}
	if m.RoomId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintIndex(dAtA, i, uint64(m.RoomId))
	}
	if len(m.Title) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintIndex(dAtA, i, uint64(len(m.Title)))
		i += copy(dAtA[i:], m.Title)
	}
	if len(m.UName) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintIndex(dAtA, i, uint64(len(m.UName)))
		i += copy(dAtA[i:], m.UName)
	}
	if m.Online != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintIndex(dAtA, i, uint64(m.Online))
	}
	if len(m.Cover) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintIndex(dAtA, i, uint64(len(m.Cover)))
		i += copy(dAtA[i:], m.Cover)
	}
	if m.AreaV2ParentId != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintIndex(dAtA, i, uint64(m.AreaV2ParentId))
	}
	if m.AreaV2Id != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintIndex(dAtA, i, uint64(m.AreaV2Id))
	}
	if m.Sort != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintIndex(dAtA, i, uint64(m.Sort))
	}
	return i, nil
}

func (m *AvCardItem) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AvCardItem) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Avid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintIndex(dAtA, i, uint64(m.Avid))
	}
	if len(m.Title) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintIndex(dAtA, i, uint64(len(m.Title)))
		i += copy(dAtA[i:], m.Title)
	}
	if m.ViewCount != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintIndex(dAtA, i, uint64(m.ViewCount))
	}
	if m.DanMaKu != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintIndex(dAtA, i, uint64(m.DanMaKu))
	}
	if m.Duration != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintIndex(dAtA, i, uint64(m.Duration))
	}
	if len(m.Cover) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintIndex(dAtA, i, uint64(len(m.Cover)))
		i += copy(dAtA[i:], m.Cover)
	}
	if m.Sort != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintIndex(dAtA, i, uint64(m.Sort))
	}
	return i, nil
}

func (m *CommonRoomItem) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CommonRoomItem) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.AcceptQuality) > 0 {
		dAtA17 := make([]byte, len(m.AcceptQuality)*10)
		var j16 int
		for _, num1 := range m.AcceptQuality {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA17[j16] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j16++
			}
			dAtA17[j16] = uint8(num)
			j16++
		}
		dAtA[i] = 0xa
		i++
		i = encodeVarintIndex(dAtA, i, uint64(j16))
		i += copy(dAtA[i:], dAtA17[:j16])
	}
	if m.AreaV2Id != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintIndex(dAtA, i, uint64(m.AreaV2Id))
	}
	if m.AreaV2ParentId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintIndex(dAtA, i, uint64(m.AreaV2ParentId))
	}
	if len(m.AreaV2Name) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintIndex(dAtA, i, uint64(len(m.AreaV2Name)))
		i += copy(dAtA[i:], m.AreaV2Name)
	}
	if len(m.AreaV2ParentName) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintIndex(dAtA, i, uint64(len(m.AreaV2ParentName)))
		i += copy(dAtA[i:], m.AreaV2ParentName)
	}
	if m.BroadcastType != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintIndex(dAtA, i, uint64(m.BroadcastType))
	}
	if len(m.Cover) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintIndex(dAtA, i, uint64(len(m.Cover)))
		i += copy(dAtA[i:], m.Cover)
	}
	if m.CurrentQuality != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintIndex(dAtA, i, uint64(m.CurrentQuality))
	}
	if len(m.Face) > 0 {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintIndex(dAtA, i, uint64(len(m.Face)))
		i += copy(dAtA[i:], m.Face)
	}
	if len(m.Link) > 0 {
		dAtA[i] = 0x52
		i++
		i = encodeVarintIndex(dAtA, i, uint64(len(m.Link)))
		i += copy(dAtA[i:], m.Link)
	}
	if m.Online != 0 {
		dAtA[i] = 0x58
		i++
		i = encodeVarintIndex(dAtA, i, uint64(m.Online))
	}
	if len(m.PendentRu) > 0 {
		dAtA[i] = 0x62
		i++
		i = encodeVarintIndex(dAtA, i, uint64(len(m.PendentRu)))
		i += copy(dAtA[i:], m.PendentRu)
	}
	if len(m.PendentRuColor) > 0 {
		dAtA[i] = 0x6a
		i++
		i = encodeVarintIndex(dAtA, i, uint64(len(m.PendentRuColor)))
		i += copy(dAtA[i:], m.PendentRuColor)
	}
	if len(m.PendentRuPic) > 0 {
		dAtA[i] = 0x72
		i++
		i = encodeVarintIndex(dAtA, i, uint64(len(m.PendentRuPic)))
		i += copy(dAtA[i:], m.PendentRuPic)
	}
	if m.PkId != 0 {
		dAtA[i] = 0x78
		i++
		i = encodeVarintIndex(dAtA, i, uint64(m.PkId))
	}
	if len(m.PlayUrl) > 0 {
		dAtA[i] = 0x82
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintIndex(dAtA, i, uint64(len(m.PlayUrl)))
		i += copy(dAtA[i:], m.PlayUrl)
	}
	if m.RecType != 0 {
		dAtA[i] = 0x88
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintIndex(dAtA, i, uint64(m.RecType))
	}
	if m.Roomid != 0 {
		dAtA[i] = 0x90
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintIndex(dAtA, i, uint64(m.Roomid))
	}
	if len(m.Title) > 0 {
		dAtA[i] = 0x9a
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintIndex(dAtA, i, uint64(len(m.Title)))
		i += copy(dAtA[i:], m.Title)
	}
	if len(m.Uname) > 0 {
		dAtA[i] = 0xa2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintIndex(dAtA, i, uint64(len(m.Uname)))
		i += copy(dAtA[i:], m.Uname)
	}
	if len(m.PlayUrlH265) > 0 {
		dAtA[i] = 0xaa
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintIndex(dAtA, i, uint64(len(m.PlayUrlH265)))
		i += copy(dAtA[i:], m.PlayUrlH265)
	}
	return i, nil
}

func (m *HourRankItem) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HourRankItem) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Rank != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintIndex(dAtA, i, uint64(m.Rank))
	}
	if m.Uid != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintIndex(dAtA, i, uint64(m.Uid))
	}
	if m.Roomid != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintIndex(dAtA, i, uint64(m.Roomid))
	}
	if len(m.Uname) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintIndex(dAtA, i, uint64(len(m.Uname)))
		i += copy(dAtA[i:], m.Uname)
	}
	if len(m.Face) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintIndex(dAtA, i, uint64(len(m.Face)))
		i += copy(dAtA[i:], m.Face)
	}
	if m.LiveStatus != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintIndex(dAtA, i, uint64(m.LiveStatus))
	}
	if m.AreaV2ParentId != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintIndex(dAtA, i, uint64(m.AreaV2ParentId))
	}
	if len(m.AreaV2ParentName) > 0 {
		dAtA[i] = 0x42
		i++
		i = encodeVarintIndex(dAtA, i, uint64(len(m.AreaV2ParentName)))
		i += copy(dAtA[i:], m.AreaV2ParentName)
	}
	if m.AreaV2Id != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintIndex(dAtA, i, uint64(m.AreaV2Id))
	}
	if len(m.AreaV2Name) > 0 {
		dAtA[i] = 0x52
		i++
		i = encodeVarintIndex(dAtA, i, uint64(len(m.AreaV2Name)))
		i += copy(dAtA[i:], m.AreaV2Name)
	}
	return i, nil
}

func (m *HourRankExtra) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HourRankExtra) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.SubTitle) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintIndex(dAtA, i, uint64(len(m.SubTitle)))
		i += copy(dAtA[i:], m.SubTitle)
	}
	return i, nil
}

func (m *ChangeReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChangeReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ModuleId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintIndex(dAtA, i, uint64(m.ModuleId))
	}
	if len(m.AttentionRoomId) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintIndex(dAtA, i, uint64(len(m.AttentionRoomId)))
		i += copy(dAtA[i:], m.AttentionRoomId)
	}
	if m.Page != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintIndex(dAtA, i, uint64(m.Page))
	}
	if len(m.Platform) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintIndex(dAtA, i, uint64(len(m.Platform)))
		i += copy(dAtA[i:], m.Platform)
	}
	if m.Build != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintIndex(dAtA, i, uint64(m.Build))
	}
	if len(m.Device) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintIndex(dAtA, i, uint64(len(m.Device)))
		i += copy(dAtA[i:], m.Device)
	}
	if m.Quality != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintIndex(dAtA, i, uint64(m.Quality))
	}
	return i, nil
}

func (m *ChangeResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChangeResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ModuleInfo != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintIndex(dAtA, i, uint64(m.ModuleInfo.Size()))
		n18, err := m.ModuleInfo.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n18
	}
	if m.IsSkyHorseGray != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintIndex(dAtA, i, uint64(m.IsSkyHorseGray))
	}
	if len(m.List) > 0 {
		for _, msg := range m.List {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintIndex(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func encodeVarintIndex(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *GetAllListReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Platform)
	if l > 0 {
		n += 1 + l + sovIndex(uint64(l))
	}
	l = len(m.Device)
	if l > 0 {
		n += 1 + l + sovIndex(uint64(l))
	}
	l = len(m.Scale)
	if l > 0 {
		n += 1 + l + sovIndex(uint64(l))
	}
	if m.Build != 0 {
		n += 1 + sovIndex(uint64(m.Build))
	}
	if m.RelationPage != 0 {
		n += 1 + sovIndex(uint64(m.RelationPage))
	}
	if m.RecPage != 0 {
		n += 1 + sovIndex(uint64(m.RecPage))
	}
	if m.Quality != 0 {
		n += 1 + sovIndex(uint64(m.Quality))
	}
	return n
}

func (m *GetAllListResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Interval != 0 {
		n += 1 + sovIndex(uint64(m.Interval))
	}
	if m.IsSkyHorseGray != 0 {
		n += 1 + sovIndex(uint64(m.IsSkyHorseGray))
	}
	if len(m.Banner) > 0 {
		for _, e := range m.Banner {
			l = e.Size()
			n += 1 + l + sovIndex(uint64(l))
		}
	}
	if len(m.MyTag) > 0 {
		for _, e := range m.MyTag {
			l = e.Size()
			n += 1 + l + sovIndex(uint64(l))
		}
	}
	if len(m.AreaEntrance) > 0 {
		for _, e := range m.AreaEntrance {
			l = e.Size()
			n += 1 + l + sovIndex(uint64(l))
		}
	}
	if len(m.SeaPatrol) > 0 {
		for _, e := range m.SeaPatrol {
			l = e.Size()
			n += 1 + l + sovIndex(uint64(l))
		}
	}
	if len(m.MyIdol) > 0 {
		for _, e := range m.MyIdol {
			l = e.Size()
			n += 1 + l + sovIndex(uint64(l))
		}
	}
	if len(m.RoomList) > 0 {
		for _, e := range m.RoomList {
			l = e.Size()
			n += 1 + l + sovIndex(uint64(l))
		}
	}
	if len(m.HourRank) > 0 {
		for _, e := range m.HourRank {
			l = e.Size()
			n += 1 + l + sovIndex(uint64(l))
		}
	}
	if len(m.ActivityCard) > 0 {
		for _, e := range m.ActivityCard {
			l = e.Size()
			n += 1 + l + sovIndex(uint64(l))
		}
	}
	return n
}

func (m *MBanner) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ModuleInfo != nil {
		l = m.ModuleInfo.Size()
		n += 1 + l + sovIndex(uint64(l))
	}
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovIndex(uint64(l))
		}
	}
	return n
}

func (m *MMyTag) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ModuleInfo != nil {
		l = m.ModuleInfo.Size()
		n += 1 + l + sovIndex(uint64(l))
	}
	if m.ExtraInfo != nil {
		l = m.ExtraInfo.Size()
		n += 1 + l + sovIndex(uint64(l))
	}
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovIndex(uint64(l))
		}
	}
	return n
}

func (m *MAreaEntrance) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ModuleInfo != nil {
		l = m.ModuleInfo.Size()
		n += 1 + l + sovIndex(uint64(l))
	}
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovIndex(uint64(l))
		}
	}
	return n
}

func (m *MSeaPatrol) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ModuleInfo != nil {
		l = m.ModuleInfo.Size()
		n += 1 + l + sovIndex(uint64(l))
	}
	if m.ExtraInfo != nil {
		l = m.ExtraInfo.Size()
		n += 1 + l + sovIndex(uint64(l))
	}
	return n
}

func (m *MMyIdol) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ModuleInfo != nil {
		l = m.ModuleInfo.Size()
		n += 1 + l + sovIndex(uint64(l))
	}
	if m.ExtraInfo != nil {
		l = m.ExtraInfo.Size()
		n += 1 + l + sovIndex(uint64(l))
	}
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovIndex(uint64(l))
		}
	}
	return n
}

func (m *MRoomBlock) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ModuleInfo != nil {
		l = m.ModuleInfo.Size()
		n += 1 + l + sovIndex(uint64(l))
	}
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovIndex(uint64(l))
		}
	}
	return n
}

func (m *MHourRank) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ModuleInfo != nil {
		l = m.ModuleInfo.Size()
		n += 1 + l + sovIndex(uint64(l))
	}
	if m.ExtraInfo != nil {
		l = m.ExtraInfo.Size()
		n += 1 + l + sovIndex(uint64(l))
	}
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovIndex(uint64(l))
		}
	}
	return n
}

func (m *MActivityCard) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ModuleInfo != nil {
		l = m.ModuleInfo.Size()
		n += 1 + l + sovIndex(uint64(l))
	}
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovIndex(uint64(l))
		}
	}
	return n
}

func (m *ModuleInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovIndex(uint64(m.Id))
	}
	l = len(m.Link)
	if l > 0 {
		n += 1 + l + sovIndex(uint64(l))
	}
	l = len(m.Pic)
	if l > 0 {
		n += 1 + l + sovIndex(uint64(l))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovIndex(uint64(l))
	}
	if m.Type != 0 {
		n += 1 + sovIndex(uint64(m.Type))
	}
	if m.Sort != 0 {
		n += 1 + sovIndex(uint64(m.Sort))
	}
	if m.Count != 0 {
		n += 1 + sovIndex(uint64(m.Count))
	}
	return n
}

func (m *PicItem) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovIndex(uint64(m.Id))
	}
	l = len(m.Link)
	if l > 0 {
		n += 1 + l + sovIndex(uint64(l))
	}
	l = len(m.Pic)
	if l > 0 {
		n += 1 + l + sovIndex(uint64(l))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovIndex(uint64(l))
	}
	l = len(m.Content)
	if l > 0 {
		n += 1 + l + sovIndex(uint64(l))
	}
	return n
}

func (m *MyTagItem) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AreaV2Id != 0 {
		n += 1 + sovIndex(uint64(m.AreaV2Id))
	}
	l = len(m.AreaV2Name)
	if l > 0 {
		n += 1 + l + sovIndex(uint64(l))
	}
	if m.AreaV2ParentId != 0 {
		n += 1 + sovIndex(uint64(m.AreaV2ParentId))
	}
	l = len(m.AreaV2ParentName)
	if l > 0 {
		n += 1 + l + sovIndex(uint64(l))
	}
	l = len(m.Pic)
	if l > 0 {
		n += 1 + l + sovIndex(uint64(l))
	}
	l = len(m.Link)
	if l > 0 {
		n += 1 + l + sovIndex(uint64(l))
	}
	if m.IsAdvice != 0 {
		n += 1 + sovIndex(uint64(m.IsAdvice))
	}
	return n
}

func (m *MyTagExtra) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IsGray != 0 {
		n += 1 + sovIndex(uint64(m.IsGray))
	}
	if len(m.Offline) > 0 {
		for _, e := range m.Offline {
			l = e.Size()
			n += 1 + l + sovIndex(uint64(l))
		}
	}
	return n
}

func (m *OfflineTag) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovIndex(uint64(m.Id))
	}
	l = len(m.AreaV2Name)
	if l > 0 {
		n += 1 + l + sovIndex(uint64(l))
	}
	return n
}

func (m *MyIdolExtra) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TotalCount != 0 {
		n += 1 + sovIndex(uint64(m.TotalCount))
	}
	l = len(m.TimeDesc)
	if l > 0 {
		n += 1 + l + sovIndex(uint64(l))
	}
	l = len(m.UnameDesc)
	if l > 0 {
		n += 1 + l + sovIndex(uint64(l))
	}
	l = len(m.TagsDesc)
	if l > 0 {
		n += 1 + l + sovIndex(uint64(l))
	}
	if m.CardType != 0 {
		n += 1 + sovIndex(uint64(m.CardType))
	}
	if m.RelationPage != 0 {
		n += 1 + sovIndex(uint64(m.RelationPage))
	}
	return n
}

func (m *MyIdolItem) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Roomid != 0 {
		n += 1 + sovIndex(uint64(m.Roomid))
	}
	if m.Uid != 0 {
		n += 1 + sovIndex(uint64(m.Uid))
	}
	l = len(m.Uname)
	if l > 0 {
		n += 1 + l + sovIndex(uint64(l))
	}
	l = len(m.Face)
	if l > 0 {
		n += 1 + l + sovIndex(uint64(l))
	}
	l = len(m.Cover)
	if l > 0 {
		n += 1 + l + sovIndex(uint64(l))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovIndex(uint64(l))
	}
	if m.Area != 0 {
		n += 1 + sovIndex(uint64(m.Area))
	}
	if m.LiveTime != 0 {
		n += 1 + sovIndex(uint64(m.LiveTime))
	}
	l = len(m.AreaName)
	if l > 0 {
		n += 1 + l + sovIndex(uint64(l))
	}
	if m.AreaV2Id != 0 {
		n += 1 + sovIndex(uint64(m.AreaV2Id))
	}
	l = len(m.AreaV2Name)
	if l > 0 {
		n += 1 + l + sovIndex(uint64(l))
	}
	l = len(m.AreaV2ParentName)
	if l > 0 {
		n += 1 + l + sovIndex(uint64(l))
	}
	if m.AreaV2ParentId != 0 {
		n += 1 + sovIndex(uint64(m.AreaV2ParentId))
	}
	l = len(m.LiveTagName)
	if l > 0 {
		n += 1 + l + sovIndex(uint64(l))
	}
	if m.Online != 0 {
		n += 1 + sovIndex(uint64(m.Online))
	}
	l = len(m.PlayUrl)
	if l > 0 {
		n += 2 + l + sovIndex(uint64(l))
	}
	l = len(m.PlayUrlH265)
	if l > 0 {
		n += 2 + l + sovIndex(uint64(l))
	}
	if len(m.AcceptQuality) > 0 {
		l = 0
		for _, e := range m.AcceptQuality {
			l += sovIndex(uint64(e))
		}
		n += 2 + sovIndex(uint64(l)) + l
	}
	if m.CurrentQuality != 0 {
		n += 2 + sovIndex(uint64(m.CurrentQuality))
	}
	if m.PkId != 0 {
		n += 2 + sovIndex(uint64(m.PkId))
	}
	l = len(m.Link)
	if l > 0 {
		n += 2 + l + sovIndex(uint64(l))
	}
	if m.SpecialAttention != 0 {
		n += 2 + sovIndex(uint64(m.SpecialAttention))
	}
	if m.BroadcastType != 0 {
		n += 2 + sovIndex(uint64(m.BroadcastType))
	}
	l = len(m.PendentRu)
	if l > 0 {
		n += 2 + l + sovIndex(uint64(l))
	}
	l = len(m.PendentRuColor)
	if l > 0 {
		n += 2 + l + sovIndex(uint64(l))
	}
	l = len(m.PendentRuPic)
	if l > 0 {
		n += 2 + l + sovIndex(uint64(l))
	}
	if m.OfficialVerify != 0 {
		n += 2 + sovIndex(uint64(m.OfficialVerify))
	}
	return n
}

func (m *ActivityCardItem) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Card != nil {
		l = m.Card.Size()
		n += 1 + l + sovIndex(uint64(l))
	}
	if len(m.Room) > 0 {
		for _, e := range m.Room {
			l = e.Size()
			n += 1 + l + sovIndex(uint64(l))
		}
	}
	if len(m.Av) > 0 {
		for _, e := range m.Av {
			l = e.Size()
			n += 1 + l + sovIndex(uint64(l))
		}
	}
	return n
}

func (m *BannerCardItem) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Aid != 0 {
		n += 1 + sovIndex(uint64(m.Aid))
	}
	l = len(m.Pic)
	if l > 0 {
		n += 1 + l + sovIndex(uint64(l))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovIndex(uint64(l))
	}
	l = len(m.Text)
	if l > 0 {
		n += 1 + l + sovIndex(uint64(l))
	}
	l = len(m.PicLink)
	if l > 0 {
		n += 1 + l + sovIndex(uint64(l))
	}
	l = len(m.GoLink)
	if l > 0 {
		n += 1 + l + sovIndex(uint64(l))
	}
	l = len(m.ButtonText)
	if l > 0 {
		n += 1 + l + sovIndex(uint64(l))
	}
	if m.Status != 0 {
		n += 1 + sovIndex(uint64(m.Status))
	}
	if m.Sort != 0 {
		n += 1 + sovIndex(uint64(m.Sort))
	}
	return n
}

func (m *RoomCardItem) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IsLive != 0 {
		n += 1 + sovIndex(uint64(m.IsLive))
	}
	if m.RoomId != 0 {
		n += 1 + sovIndex(uint64(m.RoomId))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovIndex(uint64(l))
	}
	l = len(m.UName)
	if l > 0 {
		n += 1 + l + sovIndex(uint64(l))
	}
	if m.Online != 0 {
		n += 1 + sovIndex(uint64(m.Online))
	}
	l = len(m.Cover)
	if l > 0 {
		n += 1 + l + sovIndex(uint64(l))
	}
	if m.AreaV2ParentId != 0 {
		n += 1 + sovIndex(uint64(m.AreaV2ParentId))
	}
	if m.AreaV2Id != 0 {
		n += 1 + sovIndex(uint64(m.AreaV2Id))
	}
	if m.Sort != 0 {
		n += 1 + sovIndex(uint64(m.Sort))
	}
	return n
}

func (m *AvCardItem) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Avid != 0 {
		n += 1 + sovIndex(uint64(m.Avid))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovIndex(uint64(l))
	}
	if m.ViewCount != 0 {
		n += 1 + sovIndex(uint64(m.ViewCount))
	}
	if m.DanMaKu != 0 {
		n += 1 + sovIndex(uint64(m.DanMaKu))
	}
	if m.Duration != 0 {
		n += 1 + sovIndex(uint64(m.Duration))
	}
	l = len(m.Cover)
	if l > 0 {
		n += 1 + l + sovIndex(uint64(l))
	}
	if m.Sort != 0 {
		n += 1 + sovIndex(uint64(m.Sort))
	}
	return n
}

func (m *CommonRoomItem) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.AcceptQuality) > 0 {
		l = 0
		for _, e := range m.AcceptQuality {
			l += sovIndex(uint64(e))
		}
		n += 1 + sovIndex(uint64(l)) + l
	}
	if m.AreaV2Id != 0 {
		n += 1 + sovIndex(uint64(m.AreaV2Id))
	}
	if m.AreaV2ParentId != 0 {
		n += 1 + sovIndex(uint64(m.AreaV2ParentId))
	}
	l = len(m.AreaV2Name)
	if l > 0 {
		n += 1 + l + sovIndex(uint64(l))
	}
	l = len(m.AreaV2ParentName)
	if l > 0 {
		n += 1 + l + sovIndex(uint64(l))
	}
	if m.BroadcastType != 0 {
		n += 1 + sovIndex(uint64(m.BroadcastType))
	}
	l = len(m.Cover)
	if l > 0 {
		n += 1 + l + sovIndex(uint64(l))
	}
	if m.CurrentQuality != 0 {
		n += 1 + sovIndex(uint64(m.CurrentQuality))
	}
	l = len(m.Face)
	if l > 0 {
		n += 1 + l + sovIndex(uint64(l))
	}
	l = len(m.Link)
	if l > 0 {
		n += 1 + l + sovIndex(uint64(l))
	}
	if m.Online != 0 {
		n += 1 + sovIndex(uint64(m.Online))
	}
	l = len(m.PendentRu)
	if l > 0 {
		n += 1 + l + sovIndex(uint64(l))
	}
	l = len(m.PendentRuColor)
	if l > 0 {
		n += 1 + l + sovIndex(uint64(l))
	}
	l = len(m.PendentRuPic)
	if l > 0 {
		n += 1 + l + sovIndex(uint64(l))
	}
	if m.PkId != 0 {
		n += 1 + sovIndex(uint64(m.PkId))
	}
	l = len(m.PlayUrl)
	if l > 0 {
		n += 2 + l + sovIndex(uint64(l))
	}
	if m.RecType != 0 {
		n += 2 + sovIndex(uint64(m.RecType))
	}
	if m.Roomid != 0 {
		n += 2 + sovIndex(uint64(m.Roomid))
	}
	l = len(m.Title)
	if l > 0 {
		n += 2 + l + sovIndex(uint64(l))
	}
	l = len(m.Uname)
	if l > 0 {
		n += 2 + l + sovIndex(uint64(l))
	}
	l = len(m.PlayUrlH265)
	if l > 0 {
		n += 2 + l + sovIndex(uint64(l))
	}
	return n
}

func (m *HourRankItem) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Rank != 0 {
		n += 1 + sovIndex(uint64(m.Rank))
	}
	if m.Uid != 0 {
		n += 1 + sovIndex(uint64(m.Uid))
	}
	if m.Roomid != 0 {
		n += 1 + sovIndex(uint64(m.Roomid))
	}
	l = len(m.Uname)
	if l > 0 {
		n += 1 + l + sovIndex(uint64(l))
	}
	l = len(m.Face)
	if l > 0 {
		n += 1 + l + sovIndex(uint64(l))
	}
	if m.LiveStatus != 0 {
		n += 1 + sovIndex(uint64(m.LiveStatus))
	}
	if m.AreaV2ParentId != 0 {
		n += 1 + sovIndex(uint64(m.AreaV2ParentId))
	}
	l = len(m.AreaV2ParentName)
	if l > 0 {
		n += 1 + l + sovIndex(uint64(l))
	}
	if m.AreaV2Id != 0 {
		n += 1 + sovIndex(uint64(m.AreaV2Id))
	}
	l = len(m.AreaV2Name)
	if l > 0 {
		n += 1 + l + sovIndex(uint64(l))
	}
	return n
}

func (m *HourRankExtra) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SubTitle)
	if l > 0 {
		n += 1 + l + sovIndex(uint64(l))
	}
	return n
}

func (m *ChangeReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ModuleId != 0 {
		n += 1 + sovIndex(uint64(m.ModuleId))
	}
	l = len(m.AttentionRoomId)
	if l > 0 {
		n += 1 + l + sovIndex(uint64(l))
	}
	if m.Page != 0 {
		n += 1 + sovIndex(uint64(m.Page))
	}
	l = len(m.Platform)
	if l > 0 {
		n += 1 + l + sovIndex(uint64(l))
	}
	if m.Build != 0 {
		n += 1 + sovIndex(uint64(m.Build))
	}
	l = len(m.Device)
	if l > 0 {
		n += 1 + l + sovIndex(uint64(l))
	}
	if m.Quality != 0 {
		n += 1 + sovIndex(uint64(m.Quality))
	}
	return n
}

func (m *ChangeResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ModuleInfo != nil {
		l = m.ModuleInfo.Size()
		n += 1 + l + sovIndex(uint64(l))
	}
	if m.IsSkyHorseGray != 0 {
		n += 1 + sovIndex(uint64(m.IsSkyHorseGray))
	}
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovIndex(uint64(l))
		}
	}
	return n
}

func sovIndex(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozIndex(x uint64) (n int) {
	return sovIndex(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *GetAllListReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIndex
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetAllListReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetAllListReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Platform", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIndex
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Platform = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Device", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIndex
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Device = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Scale", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIndex
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Scale = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Build", wireType)
			}
			m.Build = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Build |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RelationPage", wireType)
			}
			m.RelationPage = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RelationPage |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecPage", wireType)
			}
			m.RecPage = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RecPage |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Quality", wireType)
			}
			m.Quality = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Quality |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipIndex(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIndex
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetAllListResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIndex
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetAllListResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetAllListResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Interval", wireType)
			}
			m.Interval = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Interval |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsSkyHorseGray", wireType)
			}
			m.IsSkyHorseGray = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IsSkyHorseGray |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Banner", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIndex
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Banner = append(m.Banner, &MBanner{})
			if err := m.Banner[len(m.Banner)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MyTag", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIndex
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MyTag = append(m.MyTag, &MMyTag{})
			if err := m.MyTag[len(m.MyTag)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AreaEntrance", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIndex
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AreaEntrance = append(m.AreaEntrance, &MAreaEntrance{})
			if err := m.AreaEntrance[len(m.AreaEntrance)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SeaPatrol", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIndex
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SeaPatrol = append(m.SeaPatrol, &MSeaPatrol{})
			if err := m.SeaPatrol[len(m.SeaPatrol)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MyIdol", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIndex
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MyIdol = append(m.MyIdol, &MMyIdol{})
			if err := m.MyIdol[len(m.MyIdol)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoomList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIndex
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RoomList = append(m.RoomList, &MRoomBlock{})
			if err := m.RoomList[len(m.RoomList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HourRank", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIndex
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HourRank = append(m.HourRank, &MHourRank{})
			if err := m.HourRank[len(m.HourRank)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActivityCard", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIndex
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ActivityCard = append(m.ActivityCard, &MActivityCard{})
			if err := m.ActivityCard[len(m.ActivityCard)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIndex(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIndex
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MBanner) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIndex
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MBanner: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MBanner: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ModuleInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIndex
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ModuleInfo == nil {
				m.ModuleInfo = &ModuleInfo{}
			}
			if err := m.ModuleInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIndex
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &PicItem{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIndex(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIndex
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MMyTag) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIndex
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MMyTag: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MMyTag: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ModuleInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIndex
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ModuleInfo == nil {
				m.ModuleInfo = &ModuleInfo{}
			}
			if err := m.ModuleInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExtraInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIndex
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ExtraInfo == nil {
				m.ExtraInfo = &MyTagExtra{}
			}
			if err := m.ExtraInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIndex
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &MyTagItem{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIndex(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIndex
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MAreaEntrance) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIndex
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MAreaEntrance: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MAreaEntrance: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ModuleInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIndex
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ModuleInfo == nil {
				m.ModuleInfo = &ModuleInfo{}
			}
			if err := m.ModuleInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIndex
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &PicItem{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIndex(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIndex
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MSeaPatrol) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIndex
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MSeaPatrol: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MSeaPatrol: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ModuleInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIndex
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ModuleInfo == nil {
				m.ModuleInfo = &ModuleInfo{}
			}
			if err := m.ModuleInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExtraInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIndex
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ExtraInfo == nil {
				m.ExtraInfo = &PicItem{}
			}
			if err := m.ExtraInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIndex(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIndex
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MMyIdol) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIndex
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MMyIdol: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MMyIdol: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ModuleInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIndex
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ModuleInfo == nil {
				m.ModuleInfo = &ModuleInfo{}
			}
			if err := m.ModuleInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExtraInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIndex
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ExtraInfo == nil {
				m.ExtraInfo = &MyIdolExtra{}
			}
			if err := m.ExtraInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIndex
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &MyIdolItem{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIndex(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIndex
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MRoomBlock) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIndex
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MRoomBlock: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MRoomBlock: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ModuleInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIndex
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ModuleInfo == nil {
				m.ModuleInfo = &ModuleInfo{}
			}
			if err := m.ModuleInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIndex
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &CommonRoomItem{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIndex(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIndex
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MHourRank) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIndex
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MHourRank: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MHourRank: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ModuleInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIndex
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ModuleInfo == nil {
				m.ModuleInfo = &ModuleInfo{}
			}
			if err := m.ModuleInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExtraInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIndex
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ExtraInfo == nil {
				m.ExtraInfo = &HourRankExtra{}
			}
			if err := m.ExtraInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIndex
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &HourRankItem{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIndex(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIndex
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MActivityCard) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIndex
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MActivityCard: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MActivityCard: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ModuleInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIndex
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ModuleInfo == nil {
				m.ModuleInfo = &ModuleInfo{}
			}
			if err := m.ModuleInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIndex
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &ActivityCardItem{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIndex(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIndex
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ModuleInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIndex
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ModuleInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ModuleInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Link", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIndex
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Link = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pic", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIndex
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pic = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIndex
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sort", wireType)
			}
			m.Sort = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sort |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipIndex(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIndex
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PicItem) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIndex
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PicItem: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PicItem: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Link", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIndex
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Link = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pic", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIndex
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pic = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIndex
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIndex
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Content = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIndex(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIndex
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MyTagItem) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIndex
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MyTagItem: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MyTagItem: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AreaV2Id", wireType)
			}
			m.AreaV2Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AreaV2Id |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AreaV2Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIndex
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AreaV2Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AreaV2ParentId", wireType)
			}
			m.AreaV2ParentId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AreaV2ParentId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AreaV2ParentName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIndex
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AreaV2ParentName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pic", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIndex
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pic = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Link", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIndex
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Link = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsAdvice", wireType)
			}
			m.IsAdvice = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IsAdvice |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipIndex(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIndex
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MyTagExtra) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIndex
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MyTagExtra: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MyTagExtra: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsGray", wireType)
			}
			m.IsGray = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IsGray |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Offline", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIndex
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Offline = append(m.Offline, &OfflineTag{})
			if err := m.Offline[len(m.Offline)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIndex(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIndex
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OfflineTag) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIndex
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OfflineTag: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OfflineTag: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AreaV2Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIndex
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AreaV2Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIndex(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIndex
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MyIdolExtra) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIndex
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MyIdolExtra: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MyIdolExtra: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalCount", wireType)
			}
			m.TotalCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalCount |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeDesc", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIndex
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TimeDesc = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnameDesc", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIndex
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UnameDesc = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TagsDesc", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIndex
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TagsDesc = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CardType", wireType)
			}
			m.CardType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CardType |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RelationPage", wireType)
			}
			m.RelationPage = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RelationPage |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipIndex(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIndex
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MyIdolItem) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIndex
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MyIdolItem: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MyIdolItem: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Roomid", wireType)
			}
			m.Roomid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Roomid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uname", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIndex
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Uname = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Face", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIndex
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Face = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cover", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIndex
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cover = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIndex
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Area", wireType)
			}
			m.Area = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Area |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LiveTime", wireType)
			}
			m.LiveTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LiveTime |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AreaName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIndex
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AreaName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AreaV2Id", wireType)
			}
			m.AreaV2Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AreaV2Id |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AreaV2Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIndex
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AreaV2Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AreaV2ParentName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIndex
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AreaV2ParentName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AreaV2ParentId", wireType)
			}
			m.AreaV2ParentId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AreaV2ParentId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LiveTagName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIndex
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LiveTagName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Online", wireType)
			}
			m.Online = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Online |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIndex
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PlayUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayUrlH265", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIndex
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PlayUrlH265 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 18:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowIndex
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.AcceptQuality = append(m.AcceptQuality, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowIndex
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthIndex
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.AcceptQuality) == 0 {
					m.AcceptQuality = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowIndex
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.AcceptQuality = append(m.AcceptQuality, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field AcceptQuality", wireType)
			}
		case 19:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentQuality", wireType)
			}
			m.CurrentQuality = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CurrentQuality |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 20:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PkId", wireType)
			}
			m.PkId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PkId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Link", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIndex
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Link = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 22:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpecialAttention", wireType)
			}
			m.SpecialAttention = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SpecialAttention |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 23:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BroadcastType", wireType)
			}
			m.BroadcastType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BroadcastType |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 24:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PendentRu", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIndex
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PendentRu = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 25:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PendentRuColor", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIndex
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PendentRuColor = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 26:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PendentRuPic", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIndex
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PendentRuPic = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 27:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OfficialVerify", wireType)
			}
			m.OfficialVerify = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OfficialVerify |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipIndex(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIndex
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ActivityCardItem) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIndex
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ActivityCardItem: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ActivityCardItem: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Card", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIndex
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Card == nil {
				m.Card = &BannerCardItem{}
			}
			if err := m.Card.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Room", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIndex
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Room = append(m.Room, &RoomCardItem{})
			if err := m.Room[len(m.Room)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Av", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIndex
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Av = append(m.Av, &AvCardItem{})
			if err := m.Av[len(m.Av)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIndex(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIndex
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BannerCardItem) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIndex
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BannerCardItem: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BannerCardItem: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Aid", wireType)
			}
			m.Aid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Aid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pic", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIndex
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pic = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIndex
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Text", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIndex
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Text = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PicLink", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIndex
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PicLink = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GoLink", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIndex
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GoLink = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ButtonText", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIndex
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ButtonText = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sort", wireType)
			}
			m.Sort = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sort |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipIndex(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIndex
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RoomCardItem) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIndex
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RoomCardItem: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RoomCardItem: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsLive", wireType)
			}
			m.IsLive = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IsLive |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoomId", wireType)
			}
			m.RoomId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RoomId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIndex
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIndex
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Online", wireType)
			}
			m.Online = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Online |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cover", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIndex
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cover = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AreaV2ParentId", wireType)
			}
			m.AreaV2ParentId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AreaV2ParentId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AreaV2Id", wireType)
			}
			m.AreaV2Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AreaV2Id |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sort", wireType)
			}
			m.Sort = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sort |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipIndex(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIndex
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AvCardItem) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIndex
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AvCardItem: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AvCardItem: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Avid", wireType)
			}
			m.Avid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Avid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIndex
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ViewCount", wireType)
			}
			m.ViewCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ViewCount |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DanMaKu", wireType)
			}
			m.DanMaKu = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DanMaKu |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Duration", wireType)
			}
			m.Duration = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Duration |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cover", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIndex
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cover = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sort", wireType)
			}
			m.Sort = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sort |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipIndex(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIndex
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CommonRoomItem) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIndex
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CommonRoomItem: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CommonRoomItem: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowIndex
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.AcceptQuality = append(m.AcceptQuality, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowIndex
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthIndex
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.AcceptQuality) == 0 {
					m.AcceptQuality = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowIndex
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.AcceptQuality = append(m.AcceptQuality, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field AcceptQuality", wireType)
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AreaV2Id", wireType)
			}
			m.AreaV2Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AreaV2Id |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AreaV2ParentId", wireType)
			}
			m.AreaV2ParentId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AreaV2ParentId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AreaV2Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIndex
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AreaV2Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AreaV2ParentName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIndex
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AreaV2ParentName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BroadcastType", wireType)
			}
			m.BroadcastType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BroadcastType |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cover", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIndex
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cover = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentQuality", wireType)
			}
			m.CurrentQuality = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CurrentQuality |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Face", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIndex
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Face = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Link", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIndex
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Link = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Online", wireType)
			}
			m.Online = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Online |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PendentRu", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIndex
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PendentRu = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PendentRuColor", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIndex
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PendentRuColor = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PendentRuPic", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIndex
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PendentRuPic = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PkId", wireType)
			}
			m.PkId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PkId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIndex
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PlayUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecType", wireType)
			}
			m.RecType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RecType |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Roomid", wireType)
			}
			m.Roomid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Roomid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIndex
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uname", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIndex
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Uname = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayUrlH265", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIndex
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PlayUrlH265 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIndex(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIndex
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HourRankItem) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIndex
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HourRankItem: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HourRankItem: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rank", wireType)
			}
			m.Rank = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Rank |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Roomid", wireType)
			}
			m.Roomid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Roomid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uname", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIndex
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Uname = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Face", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIndex
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Face = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LiveStatus", wireType)
			}
			m.LiveStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LiveStatus |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AreaV2ParentId", wireType)
			}
			m.AreaV2ParentId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AreaV2ParentId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AreaV2ParentName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIndex
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AreaV2ParentName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AreaV2Id", wireType)
			}
			m.AreaV2Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AreaV2Id |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AreaV2Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIndex
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AreaV2Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIndex(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIndex
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HourRankExtra) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIndex
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HourRankExtra: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HourRankExtra: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubTitle", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIndex
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SubTitle = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIndex(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIndex
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChangeReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIndex
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChangeReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChangeReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ModuleId", wireType)
			}
			m.ModuleId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ModuleId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AttentionRoomId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIndex
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AttentionRoomId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Page", wireType)
			}
			m.Page = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Page |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Platform", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIndex
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Platform = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Build", wireType)
			}
			m.Build = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Build |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Device", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIndex
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Device = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Quality", wireType)
			}
			m.Quality = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Quality |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipIndex(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIndex
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChangeResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIndex
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChangeResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChangeResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ModuleInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIndex
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ModuleInfo == nil {
				m.ModuleInfo = &ModuleInfo{}
			}
			if err := m.ModuleInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsSkyHorseGray", wireType)
			}
			m.IsSkyHorseGray = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IsSkyHorseGray |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIndex
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &CommonRoomItem{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIndex(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIndex
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipIndex(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowIndex
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowIndex
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowIndex
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthIndex
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowIndex
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipIndex(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthIndex = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowIndex   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("api/http/v2/index.proto", fileDescriptor_index_6a75d6dc6295118d) }

var fileDescriptor_index_6a75d6dc6295118d = []byte{
	// 2579 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x5a, 0xcf, 0x6f, 0x1c, 0x49,
	0xf5, 0xcf, 0xcc, 0x78, 0x7e, 0x3d, 0xdb, 0x63, 0xbb, 0x93, 0x6c, 0x66, 0xf3, 0xcd, 0xd7, 0xed,
	0x74, 0xbc, 0xc4, 0xa0, 0xc4, 0x89, 0x8c, 0x12, 0x42, 0x96, 0x5d, 0xd6, 0xe3, 0x0d, 0x89, 0x95,
	0x84, 0x78, 0x2b, 0x61, 0x41, 0x70, 0x68, 0x95, 0xbb, 0xcb, 0xe3, 0x96, 0x67, 0xba, 0x27, 0xfd,
	0x63, 0xc8, 0x88, 0x3b, 0x47, 0xc4, 0x99, 0x13, 0x42, 0x5c, 0x40, 0x82, 0xbf, 0x80, 0x1b, 0x97,
	0x48, 0x5c, 0x56, 0x9c, 0x90, 0x40, 0x2d, 0x94, 0x9c, 0x18, 0x90, 0x10, 0x96, 0xb8, 0xa3, 0x7a,
	0x55, 0xfd, 0xcb, 0xee, 0x1e, 0xff, 0x88, 0x2c, 0xb8, 0x74, 0x57, 0xbd, 0x7a, 0xef, 0x75, 0x55,
	0xbd, 0x57, 0xef, 0x7d, 0xaa, 0xaa, 0xe1, 0x12, 0x1d, 0x58, 0xb7, 0x76, 0x7d, 0x7f, 0x70, 0x6b,
	0xb8, 0x76, 0xcb, 0xb2, 0x4d, 0xf6, 0x6a, 0x75, 0xe0, 0x3a, 0xbe, 0xa3, 0x5c, 0xe8, 0x59, 0x43,
	0xb6, 0x4a, 0x07, 0x03, 0xcb, 0xf6, 0x99, 0xbb, 0x43, 0x0d, 0xb6, 0x3a, 0x5c, 0xbb, 0x7c, 0xb3,
	0x6b, 0xf9, 0xbb, 0xc1, 0xf6, 0xaa, 0xe1, 0xf4, 0x6f, 0x75, 0x9d, 0xae, 0x73, 0x0b, 0x99, 0xb7,
	0x83, 0x1d, 0xac, 0x61, 0x05, 0x4b, 0x42, 0x89, 0xf6, 0xbb, 0x0a, 0xcc, 0x3e, 0x64, 0xfe, 0x7a,
	0xaf, 0xf7, 0xc4, 0xf2, 0x7c, 0xc2, 0x5e, 0x2a, 0x1b, 0xd0, 0x18, 0xf4, 0xa8, 0xbf, 0xe3, 0xb8,
	0xfd, 0x76, 0x69, 0xa9, 0xb4, 0xd2, 0xec, 0x5c, 0xdf, 0x0f, 0xd5, 0x6b, 0xbc, 0x7e, 0x5f, 0x8b,
	0x5a, 0xb4, 0xa5, 0x21, 0xed, 0x59, 0x26, 0xf5, 0xd9, 0x7d, 0xcd, 0x65, 0x2f, 0x03, 0xcb, 0x65,
	0xa6, 0x46, 0x62, 0x41, 0xe5, 0x23, 0xa8, 0x99, 0x6c, 0x68, 0x19, 0xac, 0x5d, 0x46, 0x15, 0x1f,
	0xec, 0x87, 0xea, 0x55, 0xa1, 0x42, 0xd0, 0xf3, 0x15, 0x48, 0x21, 0xe5, 0x3e, 0x54, 0x3d, 0x83,
	0xf6, 0x58, 0xbb, 0x82, 0xd2, 0xcb, 0xfb, 0xa1, 0xba, 0x24, 0xa4, 0x91, 0x9c, 0x2f, 0x2c, 0x44,
	0xb8, 0xec, 0x76, 0x60, 0xf5, 0xcc, 0xf6, 0xd4, 0x52, 0x69, 0xa5, 0x92, 0x96, 0x45, 0x72, 0x81,
	0x2c, 0xb6, 0x29, 0x9f, 0xc1, 0xac, 0xcb, 0x7a, 0xd4, 0xb7, 0x1c, 0x5b, 0x1f, 0xd0, 0x2e, 0x6b,
	0x57, 0x51, 0xc7, 0x8d, 0xfd, 0x50, 0x5d, 0x11, 0x3a, 0x32, 0xcd, 0xf9, 0xba, 0x66, 0x22, 0x9e,
	0x2d, 0xda, 0x65, 0xca, 0x2a, 0x34, 0x5c, 0x66, 0x08, 0x6d, 0x35, 0xd4, 0x76, 0x7e, 0x3f, 0x54,
	0xe7, 0x22, 0x6d, 0xa2, 0x45, 0x23, 0x75, 0x97, 0x19, 0xc8, 0x7f, 0x03, 0xea, 0x2f, 0x03, 0xda,
	0xb3, 0xfc, 0x51, 0xbb, 0x8e, 0xec, 0xca, 0x7e, 0xa8, 0xb6, 0x04, 0xbb, 0x6c, 0xd0, 0x48, 0xc4,
	0xa2, 0xfd, 0xbd, 0x0a, 0xad, 0xb4, 0xf9, 0xbc, 0x81, 0xb2, 0x02, 0x0d, 0x74, 0x88, 0x21, 0xed,
	0xa1, 0xfd, 0x2a, 0x9d, 0x99, 0x71, 0xa8, 0xc6, 0x34, 0x12, 0x97, 0x94, 0x4f, 0x60, 0xc1, 0xf2,
	0x74, 0x6f, 0x6f, 0xa4, 0xef, 0x3a, 0xae, 0xc7, 0xf4, 0xae, 0x4b, 0x47, 0x68, 0xaf, 0x4a, 0xe7,
	0xe2, 0x38, 0x54, 0x0f, 0x37, 0x92, 0x96, 0xe5, 0x3d, 0xdf, 0x1b, 0x3d, 0xe2, 0x84, 0x87, 0x2e,
	0x1d, 0x29, 0xeb, 0x50, 0xdb, 0xa6, 0xb6, 0xcd, 0xdc, 0x76, 0x65, 0xa9, 0xb2, 0x32, 0xbd, 0xf6,
	0xff, 0xab, 0x79, 0x3e, 0xb9, 0xfa, 0xb4, 0x83, 0x4c, 0x1d, 0x18, 0x87, 0xaa, 0x14, 0x20, 0xf2,
	0xad, 0x7c, 0x13, 0x6a, 0xfd, 0x91, 0xee, 0xd3, 0x6e, 0x7b, 0x0a, 0x55, 0x5c, 0x29, 0x50, 0xf1,
	0x74, 0xf4, 0x82, 0x76, 0x85, 0x06, 0xc1, 0x4f, 0xaa, 0x7d, 0x4e, 0x52, 0x7e, 0x00, 0xb3, 0xd4,
	0x65, 0x54, 0x67, 0xb6, 0xef, 0x52, 0xdb, 0xe0, 0x36, 0xe3, 0x7a, 0xae, 0x15, 0xe8, 0x59, 0x77,
	0x19, 0x7d, 0x20, 0x59, 0x3b, 0x0b, 0xe3, 0x50, 0xcd, 0x4a, 0x93, 0x19, 0x9a, 0x62, 0x50, 0x9e,
	0x01, 0x78, 0x8c, 0xea, 0x03, 0xea, 0xbb, 0x4e, 0xaf, 0x5d, 0x43, 0xcd, 0x4b, 0x05, 0x9a, 0x9f,
	0x33, 0xba, 0x85, 0x7c, 0x9d, 0xd6, 0x38, 0x54, 0x53, 0x72, 0xa4, 0xe9, 0x45, 0x4d, 0xca, 0x06,
	0xd4, 0xfb, 0x23, 0xdd, 0x32, 0x9d, 0x5e, 0xbb, 0x3e, 0x71, 0xca, 0x9e, 0x8e, 0x36, 0x4d, 0xa7,
	0xd7, 0x99, 0x1e, 0x87, 0x6a, 0x24, 0x41, 0x6a, 0x7d, 0x24, 0x2a, 0x4f, 0xa0, 0xe9, 0x3a, 0x4e,
	0x5f, 0xef, 0x59, 0x9e, 0xdf, 0x6e, 0x4c, 0xec, 0x14, 0x71, 0x9c, 0x7e, 0xa7, 0xe7, 0x18, 0x7b,
	0x9d, 0xd9, 0x71, 0xa8, 0x26, 0x62, 0xa4, 0xc1, 0x8b, 0xdc, 0x69, 0x94, 0xc7, 0xd0, 0xdc, 0x75,
	0x02, 0x57, 0x77, 0xa9, 0xbd, 0xd7, 0x6e, 0xa2, 0x36, 0xb5, 0x40, 0xdb, 0x23, 0x27, 0x70, 0x09,
	0xb5, 0xa5, 0xb2, 0x58, 0x8a, 0x34, 0x76, 0x65, 0x03, 0x5a, 0xc3, 0xf0, 0xad, 0xa1, 0xe5, 0x8f,
	0x74, 0x83, 0xba, 0x66, 0x1b, 0x26, 0x5b, 0x43, 0xf2, 0x6e, 0x50, 0xd7, 0x94, 0xd6, 0x48, 0x4b,
	0x93, 0x19, 0x9a, 0x62, 0xd0, 0x7e, 0x56, 0x82, 0xba, 0xf4, 0x25, 0x85, 0xc0, 0x74, 0xdf, 0x31,
	0x83, 0x1e, 0xd3, 0x2d, 0x7b, 0xc7, 0x41, 0x4f, 0x2f, 0x9e, 0x05, 0x64, 0xdc, 0xb4, 0x77, 0x9c,
	0xce, 0xdc, 0x38, 0x54, 0xd3, 0x82, 0x04, 0xfa, 0x71, 0xa3, 0xf2, 0x21, 0x4c, 0xe1, 0x94, 0x96,
	0x27, 0x59, 0x66, 0xcb, 0x32, 0x36, 0x7d, 0xd6, 0xef, 0x34, 0xc6, 0xa1, 0x8a, 0xec, 0x04, 0x9f,
	0xda, 0x3f, 0x4a, 0x50, 0x13, 0x5e, 0x7a, 0x26, 0x7d, 0x7b, 0x06, 0xc0, 0x5e, 0xf9, 0x2e, 0x15,
	0x2a, 0xcb, 0x13, 0x55, 0xf2, 0x4e, 0x3c, 0xe0, 0xcc, 0xc2, 0x13, 0x13, 0x39, 0xd2, 0xc4, 0x32,
	0x2a, 0xfc, 0x48, 0x0e, 0xb6, 0x32, 0xd1, 0xe2, 0x5c, 0x55, 0xee, 0x70, 0x7f, 0x5e, 0x82, 0xd9,
	0xcc, 0x62, 0xfa, 0xdf, 0xb3, 0xc8, 0x6f, 0x4b, 0x00, 0xc9, 0xaa, 0x3c, 0x93, 0xfe, 0x3d, 0xc9,
	0xb1, 0xca, 0x11, 0xbd, 0x2c, 0x36, 0x89, 0xf6, 0x4f, 0xee, 0xdf, 0x62, 0xe1, 0x9f, 0x49, 0x6f,
	0xb7, 0x72, 0x7a, 0x7b, 0xb5, 0xc8, 0xf0, 0xbc, 0x17, 0x47, 0x3a, 0xd1, 0xc7, 0x19, 0x27, 0x5a,
	0x9a, 0xa4, 0x2b, 0xd7, 0x44, 0xbf, 0xe4, 0x26, 0x8a, 0x63, 0xd4, 0x99, 0x0c, 0xba, 0x93, 0xe9,
	0xe2, 0x72, 0xbe, 0xb2, 0x0d, 0xa7, 0xdf, 0x77, 0x6c, 0xde, 0x91, 0xdc, 0x6e, 0xfe, 0xbb, 0x04,
	0xcd, 0x38, 0xf8, 0x9d, 0x49, 0x2f, 0x49, 0x8e, 0x69, 0x0a, 0x82, 0x66, 0xd4, 0x8f, 0x23, 0x8d,
	0xf3, 0x49, 0x66, 0xe4, 0xda, 0x64, 0x6d, 0xb9, 0xe3, 0xfe, 0x15, 0x2e, 0xf2, 0x54, 0x08, 0x3e,
	0x93, 0xb1, 0x7f, 0x9a, 0x59, 0xe4, 0x5f, 0xca, 0x57, 0x96, 0xee, 0x45, 0x6e, 0x5f, 0xff, 0xcc,
	0x5d, 0x29, 0x51, 0xfa, 0x1e, 0x94, 0x2d, 0x53, 0x02, 0xa0, 0xda, 0x38, 0x54, 0xcb, 0x96, 0x49,
	0xca, 0x96, 0xa9, 0x5c, 0xe1, 0x1f, 0xb3, 0xf7, 0x24, 0x2e, 0x95, 0x4a, 0xec, 0x3d, 0x82, 0x4f,
	0xe5, 0x7d, 0xa8, 0x0c, 0x2c, 0x43, 0xc2, 0xce, 0xfa, 0x38, 0x54, 0x79, 0x95, 0xf0, 0x87, 0xa2,
	0x42, 0xd5, 0xb7, 0xfc, 0x1e, 0x43, 0x5c, 0xd9, 0xec, 0x34, 0xc7, 0xa1, 0x2a, 0x08, 0x44, 0xbc,
	0xb8, 0x66, 0x7f, 0x34, 0x88, 0x30, 0x23, 0x6a, 0xe6, 0x75, 0x82, 0x4f, 0xde, 0xea, 0x39, 0xae,
	0x2f, 0x31, 0x20, 0xb6, 0xf2, 0x3a, 0xc1, 0x27, 0x57, 0x6e, 0x38, 0x81, 0xed, 0x4b, 0xcc, 0x87,
	0xca, 0x91, 0x40, 0xc4, 0x4b, 0xfb, 0x45, 0x09, 0xea, 0x32, 0x82, 0xfc, 0x17, 0x86, 0xf6, 0x01,
	0xd4, 0x0d, 0xc7, 0xf6, 0x99, 0xed, 0xe3, 0xe8, 0x9a, 0x02, 0x96, 0x48, 0x12, 0x89, 0x0a, 0xda,
	0x5f, 0xca, 0xd0, 0x8c, 0x33, 0x86, 0x72, 0x03, 0x00, 0xa1, 0xd5, 0x70, 0x4d, 0x8f, 0xbb, 0x8b,
	0xde, 0x9a, 0x50, 0x49, 0x83, 0x97, 0x3f, 0x5f, 0xdb, 0x34, 0x95, 0x35, 0x98, 0x89, 0xe8, 0x36,
	0xed, 0x47, 0xfb, 0x86, 0xf9, 0x71, 0xa8, 0x66, 0xe8, 0x04, 0x84, 0xc4, 0xb7, 0x69, 0x9f, 0x71,
	0x00, 0x1b, 0xb5, 0x0d, 0xa8, 0xcb, 0x6c, 0x9f, 0x7f, 0xa8, 0x92, 0x00, 0xd8, 0x43, 0x8d, 0xa4,
	0x25, 0xa4, 0xb7, 0x90, 0xb0, 0x69, 0x2a, 0xdf, 0x82, 0xf3, 0x07, 0x98, 0xf0, 0xe3, 0x62, 0x1e,
	0x2e, 0x8d, 0x43, 0x35, 0xaf, 0x99, 0xcc, 0xa7, 0xb5, 0x60, 0x4f, 0xe4, 0xe4, 0x56, 0x73, 0x26,
	0x37, 0xb2, 0x4a, 0x2d, 0xd7, 0x2a, 0x5f, 0x81, 0xa6, 0xe5, 0xe9, 0xd4, 0xc4, 0xbd, 0x92, 0x30,
	0x3e, 0x62, 0xab, 0x98, 0x48, 0x1a, 0x96, 0xb7, 0x8e, 0x25, 0xed, 0x47, 0x00, 0x49, 0x6a, 0x57,
	0x96, 0xa1, 0x6e, 0x79, 0x02, 0xb3, 0x8b, 0xb9, 0x45, 0x9b, 0x48, 0x12, 0xa9, 0x59, 0x1e, 0x22,
	0xf4, 0x87, 0x50, 0x77, 0x76, 0x76, 0x7a, 0x96, 0xcd, 0xe4, 0xf2, 0x2a, 0x58, 0xab, 0xcf, 0x04,
	0x13, 0xc7, 0xd8, 0xa8, 0x47, 0x0a, 0x91, 0xa8, 0xa0, 0x7d, 0x0f, 0x20, 0xe1, 0x29, 0x74, 0xc1,
	0x53, 0x58, 0x51, 0xfb, 0x75, 0x19, 0xa6, 0x53, 0xe9, 0x46, 0xb9, 0x0d, 0xd3, 0xbe, 0xe3, 0xd3,
	0x9e, 0x2e, 0x56, 0x84, 0xf8, 0x08, 0x06, 0x90, 0x14, 0x99, 0x00, 0x56, 0x36, 0x78, 0x99, 0x4f,
	0xa2, 0x6f, 0xf5, 0x99, 0x6e, 0x32, 0xcf, 0x90, 0x9f, 0xc4, 0x49, 0x8c, 0x89, 0xa4, 0xc1, 0x8b,
	0x9f, 0x32, 0xcf, 0x50, 0x6e, 0x02, 0x04, 0xbc, 0x0b, 0x82, 0x59, 0xac, 0x06, 0xf4, 0xca, 0x84,
	0x4a, 0x9a, 0x58, 0x46, 0x76, 0xae, 0x9a, 0x76, 0x3d, 0xc1, 0x3d, 0x95, 0x52, 0x1d, 0x11, 0x49,
	0x83, 0x17, 0x23, 0x5e, 0x0e, 0x5a, 0xf5, 0x54, 0x14, 0x40, 0xde, 0x98, 0x48, 0x1a, 0xbc, 0xf8,
	0x82, 0x87, 0x83, 0xbb, 0x07, 0x77, 0x9a, 0x22, 0x2e, 0x20, 0x04, 0xce, 0x34, 0x64, 0xb7, 0x93,
	0xda, 0x8f, 0x81, 0x3b, 0x41, 0x94, 0x4f, 0x15, 0x0d, 0x6a, 0x1c, 0xc7, 0xc7, 0xb6, 0xc0, 0xfd,
	0x91, 0xa0, 0x10, 0xf9, 0xe6, 0xbe, 0x19, 0x58, 0xa6, 0xdc, 0xd8, 0xa1, 0x6f, 0x06, 0x96, 0x49,
	0xf8, 0x83, 0x2f, 0x7c, 0x1c, 0xaa, 0x9c, 0x07, 0x5c, 0xf8, 0x48, 0x20, 0xe2, 0xc5, 0x9d, 0x97,
	0x7b, 0x88, 0x1c, 0x39, 0x3a, 0x2f, 0xaf, 0x13, 0x7c, 0x8a, 0xa8, 0x35, 0x64, 0xae, 0xf4, 0x7b,
	0x19, 0xb5, 0x86, 0xcc, 0x25, 0xe2, 0x95, 0x04, 0x96, 0x5a, 0x71, 0xcc, 0xe4, 0x9e, 0x20, 0x3d,
	0x1f, 0xf5, 0xf3, 0x3a, 0xc1, 0x27, 0x9f, 0x50, 0xee, 0xac, 0x3a, 0x37, 0x5e, 0xbb, 0x91, 0x4c,
	0x68, 0x4c, 0x24, 0x0d, 0x5e, 0x7c, 0x61, 0xf5, 0x19, 0xe7, 0x45, 0x0f, 0xc3, 0xe1, 0x34, 0x13,
	0x43, 0xc5, 0x44, 0x11, 0x6b, 0x70, 0xb5, 0x66, 0x23, 0x13, 0x9c, 0x30, 0x32, 0x4d, 0x1f, 0x23,
	0x32, 0x15, 0xc4, 0x95, 0x99, 0x93, 0xc6, 0x95, 0xdc, 0x08, 0x37, 0x7b, 0x92, 0x08, 0x77, 0x07,
	0x66, 0xc5, 0x74, 0xd1, 0xae, 0xe8, 0x43, 0x0b, 0xfb, 0x80, 0x8e, 0x96, 0x69, 0x20, 0xd3, 0x38,
	0x97, 0xb4, 0x8b, 0x1f, 0xd6, 0xa0, 0xe6, 0xd8, 0x18, 0x36, 0xe6, 0x12, 0xc7, 0x12, 0x14, 0x22,
	0xdf, 0xca, 0x75, 0x3c, 0x29, 0x1a, 0xe9, 0x81, 0xdb, 0x6b, 0xcf, 0xa3, 0x56, 0x3c, 0x69, 0x88,
	0x68, 0xa4, 0xce, 0x4b, 0xdf, 0x71, 0x7b, 0xbc, 0x0f, 0x11, 0x51, 0xdf, 0x5d, 0xbb, 0x7b, 0xa7,
	0xbd, 0x90, 0xf4, 0x21, 0xd3, 0x40, 0xa6, 0xa5, 0xc8, 0xa3, 0xb5, 0xbb, 0x77, 0x94, 0xaf, 0x43,
	0x8b, 0x1a, 0x06, 0x1b, 0xf8, 0x7a, 0x74, 0x22, 0xa2, 0x2c, 0x55, 0x56, 0x2a, 0x1d, 0x65, 0x1c,
	0xaa, 0x07, 0x5a, 0xc8, 0xac, 0xa8, 0x7f, 0x26, 0xaa, 0xca, 0x37, 0x60, 0xce, 0x08, 0x5c, 0x9c,
	0x93, 0x48, 0xf6, 0xbc, 0x38, 0x7c, 0x19, 0x87, 0xea, 0xc1, 0x26, 0xd2, 0x92, 0x84, 0x48, 0x7a,
	0x11, 0xaa, 0x83, 0x3d, 0x3e, 0xd3, 0x17, 0x92, 0x6c, 0x8c, 0x04, 0x32, 0x35, 0xd8, 0xdb, 0x4c,
	0x12, 0xed, 0xc5, 0xdc, 0x90, 0xde, 0x81, 0x05, 0x6f, 0xc0, 0x0c, 0x8b, 0xf6, 0x74, 0xea, 0xf3,
	0xbc, 0x68, 0x39, 0x76, 0xfb, 0xbd, 0xc4, 0x66, 0x87, 0x1a, 0xc9, 0xbc, 0x24, 0xad, 0x47, 0x14,
	0x3e, 0xf4, 0x6d, 0xd7, 0xa1, 0xa6, 0x41, 0x3d, 0x5f, 0xc4, 0x93, 0x4b, 0xe2, 0x30, 0x88, 0x0f,
	0x3d, 0xdb, 0x42, 0x66, 0xe3, 0x3a, 0x46, 0x96, 0x9b, 0x00, 0x03, 0x66, 0x9b, 0x7c, 0x7c, 0x6e,
	0xd0, 0x6e, 0x27, 0x01, 0x2e, 0xa1, 0x92, 0xa6, 0x2c, 0x93, 0x40, 0xf9, 0x18, 0xe6, 0x93, 0x06,
	0xdd, 0x70, 0x7a, 0x8e, 0xdb, 0x7e, 0x1f, 0x85, 0x2e, 0x8c, 0x43, 0xf5, 0x50, 0x1b, 0x69, 0xc5,
	0xa2, 0x1b, 0xbc, 0xae, 0xdc, 0x83, 0x56, 0x8a, 0x87, 0x27, 0xc1, 0xcb, 0x28, 0x8d, 0x3d, 0xcd,
	0xb6, 0x90, 0x99, 0x58, 0x76, 0xcb, 0x32, 0xb8, 0x8d, 0x9c, 0x9d, 0x1d, 0x0b, 0xe7, 0x62, 0xc8,
	0x5c, 0x6b, 0x67, 0xd4, 0xfe, 0xbf, 0xc4, 0x46, 0x07, 0x9a, 0x48, 0x2b, 0x22, 0x7c, 0x8e, 0x75,
	0xed, 0x8f, 0x25, 0x98, 0x3f, 0x88, 0x09, 0x39, 0xd6, 0xc7, 0x43, 0x07, 0x01, 0x4b, 0x0b, 0xb0,
	0xbe, 0x38, 0x40, 0xc8, 0xe2, 0x48, 0x3c, 0x6c, 0xc0, 0x27, 0x47, 0xcd, 0x3c, 0x70, 0xca, 0x74,
	0x59, 0x80, 0x9a, 0xf9, 0x4e, 0x21, 0xab, 0x81, 0xcb, 0x10, 0x7c, 0x2a, 0xf7, 0xa0, 0x4c, 0x87,
	0x93, 0xb7, 0x44, 0xeb, 0xc3, 0x58, 0x1a, 0xd3, 0x27, 0x1d, 0x92, 0x32, 0x1d, 0x6a, 0xaf, 0xcb,
	0xd0, 0xca, 0x76, 0x8f, 0x47, 0x6f, 0x1a, 0x87, 0x77, 0x8c, 0xde, 0x94, 0x47, 0x6f, 0x2a, 0x02,
	0x3b, 0x9f, 0xef, 0xf2, 0x24, 0x44, 0x57, 0x99, 0x00, 0x56, 0xd9, 0x2b, 0x3f, 0x1d, 0xd8, 0x79,
	0x9d, 0xe0, 0x13, 0x57, 0xb6, 0x65, 0xe8, 0xe8, 0xe4, 0xd5, 0xd4, 0xca, 0x96, 0x34, 0x52, 0x1f,
	0x58, 0xc6, 0x13, 0xee, 0xeb, 0xcb, 0x50, 0xef, 0x3a, 0x7a, 0x0a, 0xdf, 0x20, 0x78, 0x90, 0x24,
	0x52, 0xeb, 0x3a, 0xc8, 0x75, 0x1b, 0xa6, 0xb7, 0x03, 0xdf, 0x77, 0x6c, 0x1d, 0xbf, 0x59, 0x47,
	0x4e, 0xcc, 0xe8, 0x29, 0x32, 0x01, 0x51, 0x79, 0xc1, 0x3b, 0xa0, 0x41, 0xcd, 0xf3, 0xa9, 0x1f,
	0x78, 0x32, 0xec, 0x63, 0xf8, 0x11, 0x14, 0x22, 0xdf, 0x31, 0xa2, 0x6e, 0xe6, 0x21, 0x6a, 0xed,
	0x5f, 0x65, 0x98, 0x49, 0x5b, 0x49, 0xe2, 0x25, 0x6e, 0x8d, 0x03, 0x78, 0x89, 0x93, 0x38, 0x5e,
	0x7a, 0x62, 0x0d, 0x19, 0xe7, 0xc2, 0x33, 0xb2, 0x38, 0x61, 0x22, 0x97, 0x24, 0x89, 0x94, 0xba,
	0x69, 0x1e, 0x3d, 0xbd, 0x57, 0xa1, 0x16, 0xa4, 0xa1, 0x24, 0xf6, 0x5f, 0x50, 0x48, 0x35, 0x38,
	0x10, 0x61, 0xab, 0x85, 0x11, 0x36, 0x4e, 0xb0, 0xb5, 0x82, 0x04, 0x9b, 0x9b, 0x1f, 0xea, 0x27,
	0xc9, 0x0f, 0xd9, 0x5c, 0xd8, 0x38, 0x22, 0x17, 0x4e, 0x9e, 0xf3, 0x9f, 0x94, 0x01, 0x12, 0xcf,
	0xc6, 0xe4, 0x3e, 0x8c, 0x7d, 0x57, 0x24, 0xf7, 0x21, 0x0f, 0xa2, 0xfc, 0x99, 0xcc, 0x61, 0xb9,
	0x60, 0x0e, 0x6f, 0x02, 0x0c, 0x2d, 0xf6, 0x43, 0x09, 0x03, 0x2b, 0x49, 0xcf, 0x12, 0x2a, 0x69,
	0xf2, 0xb2, 0x00, 0x81, 0x5f, 0x86, 0xa6, 0x49, 0x6d, 0xbd, 0x4f, 0xf5, 0xbd, 0x40, 0x9e, 0xfd,
	0x23, 0x00, 0x88, 0x89, 0xa4, 0x6e, 0x52, 0xfb, 0x29, 0x7d, 0x1c, 0x28, 0x2b, 0xd0, 0x30, 0x03,
	0x17, 0x41, 0x95, 0x9c, 0x7c, 0x74, 0xef, 0x88, 0x46, 0xe2, 0xd2, 0xd1, 0x06, 0x88, 0x26, 0xa4,
	0x9e, 0x3b, 0x21, 0x7f, 0xab, 0x43, 0x2b, 0x7b, 0xb4, 0x90, 0x93, 0xd4, 0x4a, 0xc7, 0x4d, 0x6a,
	0x59, 0x53, 0x95, 0x8f, 0x30, 0xd5, 0xbb, 0x6f, 0x8e, 0x0e, 0x02, 0x9f, 0xa9, 0xd3, 0x03, 0x9f,
	0xea, 0x49, 0x81, 0xcf, 0xe1, 0x04, 0x58, 0x3b, 0x6e, 0x02, 0x8c, 0x6d, 0x56, 0x2f, 0xb0, 0x59,
	0x0e, 0x38, 0x68, 0x1c, 0x1f, 0x1c, 0x44, 0x90, 0xb8, 0x99, 0x0b, 0x89, 0x23, 0x68, 0x00, 0xb9,
	0xd0, 0x20, 0x59, 0xf3, 0xd3, 0x85, 0x6b, 0x3e, 0x9b, 0xbf, 0x67, 0x4e, 0x93, 0xbf, 0x67, 0xdf,
	0x29, 0x7f, 0xb7, 0x8e, 0x99, 0xbf, 0x63, 0x94, 0x34, 0x97, 0x8f, 0x92, 0x8e, 0x0d, 0x0f, 0xaf,
	0x8b, 0x2b, 0x32, 0xb4, 0xf2, 0x42, 0xb2, 0x1c, 0x23, 0x1a, 0xde, 0x8d, 0xa1, 0x65, 0x93, 0xdd,
	0x8e, 0x52, 0xb8, 0xdb, 0x89, 0xc3, 0xca, 0xf9, 0x82, 0xb0, 0x12, 0xef, 0x79, 0x2e, 0x14, 0xec,
	0x79, 0x0e, 0xa1, 0xd5, 0x8b, 0xc7, 0x41, 0xab, 0xda, 0xeb, 0x0a, 0xcc, 0xa4, 0x0f, 0xd3, 0xb8,
	0x2b, 0xe0, 0x95, 0x4a, 0x2a, 0xfc, 0xe1, 0x65, 0x09, 0x3e, 0x27, 0xed, 0xca, 0x92, 0x61, 0x56,
	0x26, 0x0d, 0x33, 0x48, 0x2d, 0xca, 0xe2, 0x9d, 0x5b, 0x35, 0xd7, 0x4d, 0x6f, 0x03, 0xa2, 0x7d,
	0x5d, 0x26, 0xd9, 0x5a, 0xb2, 0xc7, 0x4e, 0x91, 0x09, 0xf0, 0xca, 0x73, 0x91, 0x6d, 0xdf, 0x3d,
	0xd3, 0x14, 0x84, 0x86, 0xc6, 0x49, 0x43, 0x43, 0x36, 0x0c, 0x36, 0x4f, 0xb8, 0x7b, 0x83, 0x63,
	0x9c, 0x48, 0x7c, 0x08, 0xb3, 0x99, 0x43, 0x56, 0xbe, 0xb9, 0xf4, 0x82, 0x6d, 0x5d, 0x38, 0x56,
	0x29, 0xd9, 0x5c, 0xc6, 0x44, 0xd2, 0xf0, 0x82, 0xed, 0x17, 0xbc, 0xa4, 0xfd, 0xbe, 0x02, 0xcd,
	0x8d, 0x5d, 0x6a, 0x77, 0x19, 0x61, 0x2f, 0x95, 0x07, 0xd0, 0x8c, 0x8e, 0x3d, 0xa3, 0x44, 0xb8,
	0xb2, 0x1f, 0xaa, 0xcb, 0xe2, 0x42, 0x37, 0x6e, 0x2a, 0xb8, 0x4f, 0x97, 0x87, 0xa4, 0xa6, 0xf2,
	0x08, 0x16, 0xe2, 0xed, 0x82, 0x9e, 0x06, 0x28, 0xcd, 0xce, 0x95, 0xfd, 0x50, 0x6d, 0x0b, 0x75,
	0x87, 0x58, 0x34, 0x32, 0x97, 0xec, 0x32, 0x04, 0x74, 0xf9, 0x1a, 0x4c, 0xe1, 0x79, 0x83, 0x70,
	0xad, 0x6b, 0xfb, 0xa1, 0xaa, 0xca, 0xab, 0xfd, 0xc2, 0x0b, 0x6d, 0x14, 0xc8, 0xfc, 0x17, 0x30,
	0x75, 0xda, 0xff, 0x02, 0xe2, 0xcb, 0xf9, 0xea, 0xc9, 0x2f, 0xe7, 0x93, 0x7f, 0x0a, 0x6a, 0xa7,
	0xf9, 0xa7, 0xe0, 0x64, 0x17, 0xeb, 0x7f, 0x28, 0x01, 0x44, 0x56, 0xf4, 0x06, 0xca, 0xfa, 0xa9,
	0x8e, 0xbd, 0x33, 0xa7, 0xdc, 0xef, 0x7e, 0xdb, 0x7e, 0xef, 0xe4, 0x37, 0x19, 0xe2, 0x6c, 0x7c,
	0xed, 0x37, 0x25, 0xa8, 0x6e, 0xda, 0x26, 0x7b, 0xa5, 0x7c, 0x17, 0xa0, 0x1b, 0xff, 0x2f, 0xa0,
	0x14, 0xdc, 0x30, 0x64, 0x7e, 0x08, 0xb9, 0xbc, 0x7c, 0x34, 0x93, 0x37, 0x50, 0x1e, 0x43, 0xcd,
	0xc0, 0xf9, 0x52, 0x0a, 0xae, 0x12, 0xe3, 0x35, 0x71, 0x79, 0x69, 0x32, 0x83, 0x37, 0xe8, 0x5c,
	0x79, 0xfd, 0x66, 0xb1, 0xf4, 0xc5, 0x9b, 0xc5, 0xd2, 0x5f, 0xdf, 0x2c, 0x96, 0x7e, 0xfa, 0x76,
	0xf1, 0xdc, 0x17, 0x6f, 0x17, 0xcf, 0xfd, 0xe9, 0xed, 0xe2, 0xb9, 0xef, 0x97, 0x87, 0x6b, 0xdb,
	0x35, 0xfc, 0x75, 0xe5, 0xab, 0xff, 0x09, 0x00, 0x00, 0xff, 0xff, 0x1e, 0x6c, 0x9a, 0x1e, 0x1a,
	0x23, 0x00, 0x00,
}
