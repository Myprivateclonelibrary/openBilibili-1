// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: api/http/v1/index.proto

package v1

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type GetAllListResp struct {
}

func (m *GetAllListResp) Reset()         { *m = GetAllListResp{} }
func (m *GetAllListResp) String() string { return proto.CompactTextString(m) }
func (*GetAllListResp) ProtoMessage()    {}
func (*GetAllListResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_index_a6c1bae85ae326d5, []int{0}
}
func (m *GetAllListResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetAllListResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetAllListResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *GetAllListResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetAllListResp.Merge(dst, src)
}
func (m *GetAllListResp) XXX_Size() int {
	return m.Size()
}
func (m *GetAllListResp) XXX_DiscardUnknown() {
	xxx_messageInfo_GetAllListResp.DiscardUnknown(m)
}

var xxx_messageInfo_GetAllListResp proto.InternalMessageInfo

// GetAllList请求
type GetAllListReq struct {
	// 平台
	Platform string `protobuf:"bytes,1,opt,name=platform,proto3" json:"platform,omitempty" form:"platform" validate:"required"`
	// 设备
	Device string `protobuf:"bytes,2,opt,name=device,proto3" json:"device,omitempty" form:"device" validate:"required"`
	// 分辨率
	Scale string `protobuf:"bytes,3,opt,name=scale,proto3" json:"scale,omitempty" form:"scale" validate:"required"`
	// 版本号
	Build int64 `protobuf:"varint,4,opt,name=build,proto3" json:"build,omitempty" form:"build" validate:"required"`
	// 关注页码
	RelationPage int64 `protobuf:"varint,5,opt,name=relation_page,json=relationPage,proto3" json:"relation_page,omitempty" form:"relation_page" validate:"required"`
	// 模块id（可选）
	ModuleId int64 `protobuf:"varint,6,opt,name=module_id,json=moduleId,proto3" json:"module_id,omitempty" form:"module_id"`
}

func (m *GetAllListReq) Reset()         { *m = GetAllListReq{} }
func (m *GetAllListReq) String() string { return proto.CompactTextString(m) }
func (*GetAllListReq) ProtoMessage()    {}
func (*GetAllListReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_index_a6c1bae85ae326d5, []int{1}
}
func (m *GetAllListReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetAllListReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetAllListReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *GetAllListReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetAllListReq.Merge(dst, src)
}
func (m *GetAllListReq) XXX_Size() int {
	return m.Size()
}
func (m *GetAllListReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GetAllListReq.DiscardUnknown(m)
}

var xxx_messageInfo_GetAllListReq proto.InternalMessageInfo

func (m *GetAllListReq) GetPlatform() string {
	if m != nil {
		return m.Platform
	}
	return ""
}

func (m *GetAllListReq) GetDevice() string {
	if m != nil {
		return m.Device
	}
	return ""
}

func (m *GetAllListReq) GetScale() string {
	if m != nil {
		return m.Scale
	}
	return ""
}

func (m *GetAllListReq) GetBuild() int64 {
	if m != nil {
		return m.Build
	}
	return 0
}

func (m *GetAllListReq) GetRelationPage() int64 {
	if m != nil {
		return m.RelationPage
	}
	return 0
}

func (m *GetAllListReq) GetModuleId() int64 {
	if m != nil {
		return m.ModuleId
	}
	return 0
}

// 换一换
type ChangeReq struct {
	// 模块id
	// `mock:"1"`
	ModuleId        int64  `protobuf:"varint,1,opt,name=module_id,json=moduleId,proto3" json:"module_id,omitempty" form:"module_id" validate:"required"`
	AttentionRoomId string `protobuf:"bytes,2,opt,name=attention_room_id,json=attentionRoomId,proto3" json:"attention_room_id,omitempty" form:"attention_room_id" validate:"required"`
	// 平台
	Platform string `protobuf:"bytes,3,opt,name=platform,proto3" json:"platform,omitempty" form:"platform"`
	// 设备
	Device string `protobuf:"bytes,4,opt,name=device,proto3" json:"device,omitempty" form:"device"`
	// 分辨率
	Scale string `protobuf:"bytes,5,opt,name=scale,proto3" json:"scale,omitempty" form:"scale"`
	// 版本号
	Build int64 `protobuf:"varint,6,opt,name=build,proto3" json:"build,omitempty" form:"build"`
}

func (m *ChangeReq) Reset()         { *m = ChangeReq{} }
func (m *ChangeReq) String() string { return proto.CompactTextString(m) }
func (*ChangeReq) ProtoMessage()    {}
func (*ChangeReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_index_a6c1bae85ae326d5, []int{2}
}
func (m *ChangeReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChangeReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChangeReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ChangeReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChangeReq.Merge(dst, src)
}
func (m *ChangeReq) XXX_Size() int {
	return m.Size()
}
func (m *ChangeReq) XXX_DiscardUnknown() {
	xxx_messageInfo_ChangeReq.DiscardUnknown(m)
}

var xxx_messageInfo_ChangeReq proto.InternalMessageInfo

func (m *ChangeReq) GetModuleId() int64 {
	if m != nil {
		return m.ModuleId
	}
	return 0
}

func (m *ChangeReq) GetAttentionRoomId() string {
	if m != nil {
		return m.AttentionRoomId
	}
	return ""
}

func (m *ChangeReq) GetPlatform() string {
	if m != nil {
		return m.Platform
	}
	return ""
}

func (m *ChangeReq) GetDevice() string {
	if m != nil {
		return m.Device
	}
	return ""
}

func (m *ChangeReq) GetScale() string {
	if m != nil {
		return m.Scale
	}
	return ""
}

func (m *ChangeReq) GetBuild() int64 {
	if m != nil {
		return m.Build
	}
	return 0
}

// 换一换响应
type ChangeResp struct {
	ModuleList []*ChangeResp_ModuleList `protobuf:"bytes,1,rep,name=module_list,json=moduleList" json:"module_list"`
}

func (m *ChangeResp) Reset()         { *m = ChangeResp{} }
func (m *ChangeResp) String() string { return proto.CompactTextString(m) }
func (*ChangeResp) ProtoMessage()    {}
func (*ChangeResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_index_a6c1bae85ae326d5, []int{3}
}
func (m *ChangeResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChangeResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChangeResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ChangeResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChangeResp.Merge(dst, src)
}
func (m *ChangeResp) XXX_Size() int {
	return m.Size()
}
func (m *ChangeResp) XXX_DiscardUnknown() {
	xxx_messageInfo_ChangeResp.DiscardUnknown(m)
}

var xxx_messageInfo_ChangeResp proto.InternalMessageInfo

func (m *ChangeResp) GetModuleList() []*ChangeResp_ModuleList {
	if m != nil {
		return m.ModuleList
	}
	return nil
}

// 返回码
type ChangeResp_List struct {
	Roomid           int64   `protobuf:"varint,1,opt,name=roomid,proto3" json:"roomid"`
	Title            string  `protobuf:"bytes,2,opt,name=title,proto3" json:"title"`
	Uname            string  `protobuf:"bytes,3,opt,name=uname,proto3" json:"uname"`
	Online           int64   `protobuf:"varint,4,opt,name=online,proto3" json:"online"`
	Cover            string  `protobuf:"bytes,5,opt,name=cover,proto3" json:"cover"`
	Link             string  `protobuf:"bytes,6,opt,name=link,proto3" json:"link"`
	Face             string  `protobuf:"bytes,7,opt,name=face,proto3" json:"face"`
	AreaV2ParentId   int64   `protobuf:"varint,8,opt,name=area_v2_parent_id,json=areaV2ParentId,proto3" json:"area_v2_parent_id"`
	AreaV2ParentName string  `protobuf:"bytes,9,opt,name=area_v2_parent_name,json=areaV2ParentName,proto3" json:"area_v2_parent_name"`
	AreaV2Id         int64   `protobuf:"varint,10,opt,name=area_v2_id,json=areaV2Id,proto3" json:"area_v2_id"`
	AreaV2Name       string  `protobuf:"bytes,11,opt,name=area_v2_name,json=areaV2Name,proto3" json:"area_v2_name"`
	PlayUrl          string  `protobuf:"bytes,12,opt,name=play_url,json=playUrl,proto3" json:"play_url,omitempty"`
	PlayUrlH265      string  `protobuf:"bytes,13,opt,name=play_url_h265,json=playUrlH265,proto3" json:"play_url_h265,omitempty"`
	CurrentQuality   int64   `protobuf:"varint,14,opt,name=current_quality,json=currentQuality,proto3" json:"current_quality,omitempty"`
	BroadcastType    int64   `protobuf:"varint,15,opt,name=broadcast_type,json=broadcastType,proto3" json:"broadcast_type"`
	PendentRu        string  `protobuf:"bytes,16,opt,name=pendent_ru,json=pendentRu,proto3" json:"pendent_ru"`
	PendentRuPic     string  `protobuf:"bytes,17,opt,name=pendent_ru_pic,json=pendentRuPic,proto3" json:"pendent_ru_pic"`
	PendentRuColor   string  `protobuf:"bytes,18,opt,name=pendent_ru_color,json=pendentRuColor,proto3" json:"pendent_ru_color"`
	RecType          int64   `protobuf:"varint,19,opt,name=rec_type,json=recType,proto3" json:"rec_type"`
	PkId             int64   `protobuf:"varint,20,opt,name=pk_id,json=pkId,proto3" json:"pk_id"`
	AcceptQuality    []int64 `protobuf:"varint,21,rep,packed,name=accept_quality,json=acceptQuality" json:"accept_quality,omitempty"`
}

func (m *ChangeResp_List) Reset()         { *m = ChangeResp_List{} }
func (m *ChangeResp_List) String() string { return proto.CompactTextString(m) }
func (*ChangeResp_List) ProtoMessage()    {}
func (*ChangeResp_List) Descriptor() ([]byte, []int) {
	return fileDescriptor_index_a6c1bae85ae326d5, []int{3, 0}
}
func (m *ChangeResp_List) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChangeResp_List) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChangeResp_List.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ChangeResp_List) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChangeResp_List.Merge(dst, src)
}
func (m *ChangeResp_List) XXX_Size() int {
	return m.Size()
}
func (m *ChangeResp_List) XXX_DiscardUnknown() {
	xxx_messageInfo_ChangeResp_List.DiscardUnknown(m)
}

var xxx_messageInfo_ChangeResp_List proto.InternalMessageInfo

func (m *ChangeResp_List) GetRoomid() int64 {
	if m != nil {
		return m.Roomid
	}
	return 0
}

func (m *ChangeResp_List) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *ChangeResp_List) GetUname() string {
	if m != nil {
		return m.Uname
	}
	return ""
}

func (m *ChangeResp_List) GetOnline() int64 {
	if m != nil {
		return m.Online
	}
	return 0
}

func (m *ChangeResp_List) GetCover() string {
	if m != nil {
		return m.Cover
	}
	return ""
}

func (m *ChangeResp_List) GetLink() string {
	if m != nil {
		return m.Link
	}
	return ""
}

func (m *ChangeResp_List) GetFace() string {
	if m != nil {
		return m.Face
	}
	return ""
}

func (m *ChangeResp_List) GetAreaV2ParentId() int64 {
	if m != nil {
		return m.AreaV2ParentId
	}
	return 0
}

func (m *ChangeResp_List) GetAreaV2ParentName() string {
	if m != nil {
		return m.AreaV2ParentName
	}
	return ""
}

func (m *ChangeResp_List) GetAreaV2Id() int64 {
	if m != nil {
		return m.AreaV2Id
	}
	return 0
}

func (m *ChangeResp_List) GetAreaV2Name() string {
	if m != nil {
		return m.AreaV2Name
	}
	return ""
}

func (m *ChangeResp_List) GetPlayUrl() string {
	if m != nil {
		return m.PlayUrl
	}
	return ""
}

func (m *ChangeResp_List) GetPlayUrlH265() string {
	if m != nil {
		return m.PlayUrlH265
	}
	return ""
}

func (m *ChangeResp_List) GetCurrentQuality() int64 {
	if m != nil {
		return m.CurrentQuality
	}
	return 0
}

func (m *ChangeResp_List) GetBroadcastType() int64 {
	if m != nil {
		return m.BroadcastType
	}
	return 0
}

func (m *ChangeResp_List) GetPendentRu() string {
	if m != nil {
		return m.PendentRu
	}
	return ""
}

func (m *ChangeResp_List) GetPendentRuPic() string {
	if m != nil {
		return m.PendentRuPic
	}
	return ""
}

func (m *ChangeResp_List) GetPendentRuColor() string {
	if m != nil {
		return m.PendentRuColor
	}
	return ""
}

func (m *ChangeResp_List) GetRecType() int64 {
	if m != nil {
		return m.RecType
	}
	return 0
}

func (m *ChangeResp_List) GetPkId() int64 {
	if m != nil {
		return m.PkId
	}
	return 0
}

func (m *ChangeResp_List) GetAcceptQuality() []int64 {
	if m != nil {
		return m.AcceptQuality
	}
	return nil
}

type ChangeResp_ModuleInfo struct {
	// 模块id
	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id"`
	// 标题
	Title string `protobuf:"bytes,2,opt,name=title,proto3" json:"title"`
	// 图标
	Pic string `protobuf:"bytes,3,opt,name=pic,proto3" json:"pic"`
	// list数据类型  1: banner 2: 导航栏 3: 运营推荐分区-标准 4: 运营推荐分区-方 5：排行榜（小时榜） 6: 推荐主播-标准 7: 推荐主播-方 8:我的关注(用户相关) 9：一级分区-标准 10：一级分区-方 11: 活动卡片 12：常用标签推荐入口(用户相关) 13：常用标签推荐房间列表(用户相关) 14：大航海提示入口
	Type int64 `protobuf:"varint,4,opt,name=type,proto3" json:"type"`
	// 跳转链接
	Link string `protobuf:"bytes,5,opt,name=link,proto3" json:"link"`
	// 该模块数据总数
	Count          int64 `protobuf:"varint,6,opt,name=count,proto3" json:"count"`
	IsSkyHorseGray int64 `protobuf:"varint,7,opt,name=is_sky_horse_gray,json=isSkyHorseGray,proto3" json:"is_sky_horse_gray"`
}

func (m *ChangeResp_ModuleInfo) Reset()         { *m = ChangeResp_ModuleInfo{} }
func (m *ChangeResp_ModuleInfo) String() string { return proto.CompactTextString(m) }
func (*ChangeResp_ModuleInfo) ProtoMessage()    {}
func (*ChangeResp_ModuleInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_index_a6c1bae85ae326d5, []int{3, 1}
}
func (m *ChangeResp_ModuleInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChangeResp_ModuleInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChangeResp_ModuleInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ChangeResp_ModuleInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChangeResp_ModuleInfo.Merge(dst, src)
}
func (m *ChangeResp_ModuleInfo) XXX_Size() int {
	return m.Size()
}
func (m *ChangeResp_ModuleInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ChangeResp_ModuleInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ChangeResp_ModuleInfo proto.InternalMessageInfo

func (m *ChangeResp_ModuleInfo) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *ChangeResp_ModuleInfo) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *ChangeResp_ModuleInfo) GetPic() string {
	if m != nil {
		return m.Pic
	}
	return ""
}

func (m *ChangeResp_ModuleInfo) GetType() int64 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *ChangeResp_ModuleInfo) GetLink() string {
	if m != nil {
		return m.Link
	}
	return ""
}

func (m *ChangeResp_ModuleInfo) GetCount() int64 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *ChangeResp_ModuleInfo) GetIsSkyHorseGray() int64 {
	if m != nil {
		return m.IsSkyHorseGray
	}
	return 0
}

type ChangeResp_ModuleList struct {
	//
	ModuleInfo *ChangeResp_ModuleInfo `protobuf:"bytes,1,opt,name=module_info,json=moduleInfo" json:"module_info"`
	// 注意：可能是 PicList{id,pic,link,title}，需要根据ModuleInfo里的type判断
	List []*ChangeResp_List `protobuf:"bytes,2,rep,name=list" json:"list"`
}

func (m *ChangeResp_ModuleList) Reset()         { *m = ChangeResp_ModuleList{} }
func (m *ChangeResp_ModuleList) String() string { return proto.CompactTextString(m) }
func (*ChangeResp_ModuleList) ProtoMessage()    {}
func (*ChangeResp_ModuleList) Descriptor() ([]byte, []int) {
	return fileDescriptor_index_a6c1bae85ae326d5, []int{3, 2}
}
func (m *ChangeResp_ModuleList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChangeResp_ModuleList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChangeResp_ModuleList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ChangeResp_ModuleList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChangeResp_ModuleList.Merge(dst, src)
}
func (m *ChangeResp_ModuleList) XXX_Size() int {
	return m.Size()
}
func (m *ChangeResp_ModuleList) XXX_DiscardUnknown() {
	xxx_messageInfo_ChangeResp_ModuleList.DiscardUnknown(m)
}

var xxx_messageInfo_ChangeResp_ModuleList proto.InternalMessageInfo

func (m *ChangeResp_ModuleList) GetModuleInfo() *ChangeResp_ModuleInfo {
	if m != nil {
		return m.ModuleInfo
	}
	return nil
}

func (m *ChangeResp_ModuleList) GetList() []*ChangeResp_List {
	if m != nil {
		return m.List
	}
	return nil
}

func init() {
	proto.RegisterType((*GetAllListResp)(nil), "live.appinterface.v1.GetAllListResp")
	proto.RegisterType((*GetAllListReq)(nil), "live.appinterface.v1.GetAllListReq")
	proto.RegisterType((*ChangeReq)(nil), "live.appinterface.v1.ChangeReq")
	proto.RegisterType((*ChangeResp)(nil), "live.appinterface.v1.ChangeResp")
	proto.RegisterType((*ChangeResp_List)(nil), "live.appinterface.v1.ChangeResp.List")
	proto.RegisterType((*ChangeResp_ModuleInfo)(nil), "live.appinterface.v1.ChangeResp.ModuleInfo")
	proto.RegisterType((*ChangeResp_ModuleList)(nil), "live.appinterface.v1.ChangeResp.ModuleList")
}
func (m *GetAllListResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetAllListResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *GetAllListReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetAllListReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Platform) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintIndex(dAtA, i, uint64(len(m.Platform)))
		i += copy(dAtA[i:], m.Platform)
	}
	if len(m.Device) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintIndex(dAtA, i, uint64(len(m.Device)))
		i += copy(dAtA[i:], m.Device)
	}
	if len(m.Scale) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintIndex(dAtA, i, uint64(len(m.Scale)))
		i += copy(dAtA[i:], m.Scale)
	}
	if m.Build != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintIndex(dAtA, i, uint64(m.Build))
	}
	if m.RelationPage != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintIndex(dAtA, i, uint64(m.RelationPage))
	}
	if m.ModuleId != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintIndex(dAtA, i, uint64(m.ModuleId))
	}
	return i, nil
}

func (m *ChangeReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChangeReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ModuleId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintIndex(dAtA, i, uint64(m.ModuleId))
	}
	if len(m.AttentionRoomId) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintIndex(dAtA, i, uint64(len(m.AttentionRoomId)))
		i += copy(dAtA[i:], m.AttentionRoomId)
	}
	if len(m.Platform) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintIndex(dAtA, i, uint64(len(m.Platform)))
		i += copy(dAtA[i:], m.Platform)
	}
	if len(m.Device) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintIndex(dAtA, i, uint64(len(m.Device)))
		i += copy(dAtA[i:], m.Device)
	}
	if len(m.Scale) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintIndex(dAtA, i, uint64(len(m.Scale)))
		i += copy(dAtA[i:], m.Scale)
	}
	if m.Build != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintIndex(dAtA, i, uint64(m.Build))
	}
	return i, nil
}

func (m *ChangeResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChangeResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ModuleList) > 0 {
		for _, msg := range m.ModuleList {
			dAtA[i] = 0xa
			i++
			i = encodeVarintIndex(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *ChangeResp_List) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChangeResp_List) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Roomid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintIndex(dAtA, i, uint64(m.Roomid))
	}
	if len(m.Title) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintIndex(dAtA, i, uint64(len(m.Title)))
		i += copy(dAtA[i:], m.Title)
	}
	if len(m.Uname) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintIndex(dAtA, i, uint64(len(m.Uname)))
		i += copy(dAtA[i:], m.Uname)
	}
	if m.Online != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintIndex(dAtA, i, uint64(m.Online))
	}
	if len(m.Cover) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintIndex(dAtA, i, uint64(len(m.Cover)))
		i += copy(dAtA[i:], m.Cover)
	}
	if len(m.Link) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintIndex(dAtA, i, uint64(len(m.Link)))
		i += copy(dAtA[i:], m.Link)
	}
	if len(m.Face) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintIndex(dAtA, i, uint64(len(m.Face)))
		i += copy(dAtA[i:], m.Face)
	}
	if m.AreaV2ParentId != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintIndex(dAtA, i, uint64(m.AreaV2ParentId))
	}
	if len(m.AreaV2ParentName) > 0 {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintIndex(dAtA, i, uint64(len(m.AreaV2ParentName)))
		i += copy(dAtA[i:], m.AreaV2ParentName)
	}
	if m.AreaV2Id != 0 {
		dAtA[i] = 0x50
		i++
		i = encodeVarintIndex(dAtA, i, uint64(m.AreaV2Id))
	}
	if len(m.AreaV2Name) > 0 {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintIndex(dAtA, i, uint64(len(m.AreaV2Name)))
		i += copy(dAtA[i:], m.AreaV2Name)
	}
	if len(m.PlayUrl) > 0 {
		dAtA[i] = 0x62
		i++
		i = encodeVarintIndex(dAtA, i, uint64(len(m.PlayUrl)))
		i += copy(dAtA[i:], m.PlayUrl)
	}
	if len(m.PlayUrlH265) > 0 {
		dAtA[i] = 0x6a
		i++
		i = encodeVarintIndex(dAtA, i, uint64(len(m.PlayUrlH265)))
		i += copy(dAtA[i:], m.PlayUrlH265)
	}
	if m.CurrentQuality != 0 {
		dAtA[i] = 0x70
		i++
		i = encodeVarintIndex(dAtA, i, uint64(m.CurrentQuality))
	}
	if m.BroadcastType != 0 {
		dAtA[i] = 0x78
		i++
		i = encodeVarintIndex(dAtA, i, uint64(m.BroadcastType))
	}
	if len(m.PendentRu) > 0 {
		dAtA[i] = 0x82
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintIndex(dAtA, i, uint64(len(m.PendentRu)))
		i += copy(dAtA[i:], m.PendentRu)
	}
	if len(m.PendentRuPic) > 0 {
		dAtA[i] = 0x8a
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintIndex(dAtA, i, uint64(len(m.PendentRuPic)))
		i += copy(dAtA[i:], m.PendentRuPic)
	}
	if len(m.PendentRuColor) > 0 {
		dAtA[i] = 0x92
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintIndex(dAtA, i, uint64(len(m.PendentRuColor)))
		i += copy(dAtA[i:], m.PendentRuColor)
	}
	if m.RecType != 0 {
		dAtA[i] = 0x98
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintIndex(dAtA, i, uint64(m.RecType))
	}
	if m.PkId != 0 {
		dAtA[i] = 0xa0
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintIndex(dAtA, i, uint64(m.PkId))
	}
	if len(m.AcceptQuality) > 0 {
		dAtA2 := make([]byte, len(m.AcceptQuality)*10)
		var j1 int
		for _, num1 := range m.AcceptQuality {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		dAtA[i] = 0xaa
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintIndex(dAtA, i, uint64(j1))
		i += copy(dAtA[i:], dAtA2[:j1])
	}
	return i, nil
}

func (m *ChangeResp_ModuleInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChangeResp_ModuleInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintIndex(dAtA, i, uint64(m.Id))
	}
	if len(m.Title) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintIndex(dAtA, i, uint64(len(m.Title)))
		i += copy(dAtA[i:], m.Title)
	}
	if len(m.Pic) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintIndex(dAtA, i, uint64(len(m.Pic)))
		i += copy(dAtA[i:], m.Pic)
	}
	if m.Type != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintIndex(dAtA, i, uint64(m.Type))
	}
	if len(m.Link) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintIndex(dAtA, i, uint64(len(m.Link)))
		i += copy(dAtA[i:], m.Link)
	}
	if m.Count != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintIndex(dAtA, i, uint64(m.Count))
	}
	if m.IsSkyHorseGray != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintIndex(dAtA, i, uint64(m.IsSkyHorseGray))
	}
	return i, nil
}

func (m *ChangeResp_ModuleList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChangeResp_ModuleList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ModuleInfo != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintIndex(dAtA, i, uint64(m.ModuleInfo.Size()))
		n3, err := m.ModuleInfo.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	if len(m.List) > 0 {
		for _, msg := range m.List {
			dAtA[i] = 0x12
			i++
			i = encodeVarintIndex(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func encodeVarintIndex(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *GetAllListResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *GetAllListReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Platform)
	if l > 0 {
		n += 1 + l + sovIndex(uint64(l))
	}
	l = len(m.Device)
	if l > 0 {
		n += 1 + l + sovIndex(uint64(l))
	}
	l = len(m.Scale)
	if l > 0 {
		n += 1 + l + sovIndex(uint64(l))
	}
	if m.Build != 0 {
		n += 1 + sovIndex(uint64(m.Build))
	}
	if m.RelationPage != 0 {
		n += 1 + sovIndex(uint64(m.RelationPage))
	}
	if m.ModuleId != 0 {
		n += 1 + sovIndex(uint64(m.ModuleId))
	}
	return n
}

func (m *ChangeReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ModuleId != 0 {
		n += 1 + sovIndex(uint64(m.ModuleId))
	}
	l = len(m.AttentionRoomId)
	if l > 0 {
		n += 1 + l + sovIndex(uint64(l))
	}
	l = len(m.Platform)
	if l > 0 {
		n += 1 + l + sovIndex(uint64(l))
	}
	l = len(m.Device)
	if l > 0 {
		n += 1 + l + sovIndex(uint64(l))
	}
	l = len(m.Scale)
	if l > 0 {
		n += 1 + l + sovIndex(uint64(l))
	}
	if m.Build != 0 {
		n += 1 + sovIndex(uint64(m.Build))
	}
	return n
}

func (m *ChangeResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ModuleList) > 0 {
		for _, e := range m.ModuleList {
			l = e.Size()
			n += 1 + l + sovIndex(uint64(l))
		}
	}
	return n
}

func (m *ChangeResp_List) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Roomid != 0 {
		n += 1 + sovIndex(uint64(m.Roomid))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovIndex(uint64(l))
	}
	l = len(m.Uname)
	if l > 0 {
		n += 1 + l + sovIndex(uint64(l))
	}
	if m.Online != 0 {
		n += 1 + sovIndex(uint64(m.Online))
	}
	l = len(m.Cover)
	if l > 0 {
		n += 1 + l + sovIndex(uint64(l))
	}
	l = len(m.Link)
	if l > 0 {
		n += 1 + l + sovIndex(uint64(l))
	}
	l = len(m.Face)
	if l > 0 {
		n += 1 + l + sovIndex(uint64(l))
	}
	if m.AreaV2ParentId != 0 {
		n += 1 + sovIndex(uint64(m.AreaV2ParentId))
	}
	l = len(m.AreaV2ParentName)
	if l > 0 {
		n += 1 + l + sovIndex(uint64(l))
	}
	if m.AreaV2Id != 0 {
		n += 1 + sovIndex(uint64(m.AreaV2Id))
	}
	l = len(m.AreaV2Name)
	if l > 0 {
		n += 1 + l + sovIndex(uint64(l))
	}
	l = len(m.PlayUrl)
	if l > 0 {
		n += 1 + l + sovIndex(uint64(l))
	}
	l = len(m.PlayUrlH265)
	if l > 0 {
		n += 1 + l + sovIndex(uint64(l))
	}
	if m.CurrentQuality != 0 {
		n += 1 + sovIndex(uint64(m.CurrentQuality))
	}
	if m.BroadcastType != 0 {
		n += 1 + sovIndex(uint64(m.BroadcastType))
	}
	l = len(m.PendentRu)
	if l > 0 {
		n += 2 + l + sovIndex(uint64(l))
	}
	l = len(m.PendentRuPic)
	if l > 0 {
		n += 2 + l + sovIndex(uint64(l))
	}
	l = len(m.PendentRuColor)
	if l > 0 {
		n += 2 + l + sovIndex(uint64(l))
	}
	if m.RecType != 0 {
		n += 2 + sovIndex(uint64(m.RecType))
	}
	if m.PkId != 0 {
		n += 2 + sovIndex(uint64(m.PkId))
	}
	if len(m.AcceptQuality) > 0 {
		l = 0
		for _, e := range m.AcceptQuality {
			l += sovIndex(uint64(e))
		}
		n += 2 + sovIndex(uint64(l)) + l
	}
	return n
}

func (m *ChangeResp_ModuleInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovIndex(uint64(m.Id))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovIndex(uint64(l))
	}
	l = len(m.Pic)
	if l > 0 {
		n += 1 + l + sovIndex(uint64(l))
	}
	if m.Type != 0 {
		n += 1 + sovIndex(uint64(m.Type))
	}
	l = len(m.Link)
	if l > 0 {
		n += 1 + l + sovIndex(uint64(l))
	}
	if m.Count != 0 {
		n += 1 + sovIndex(uint64(m.Count))
	}
	if m.IsSkyHorseGray != 0 {
		n += 1 + sovIndex(uint64(m.IsSkyHorseGray))
	}
	return n
}

func (m *ChangeResp_ModuleList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ModuleInfo != nil {
		l = m.ModuleInfo.Size()
		n += 1 + l + sovIndex(uint64(l))
	}
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovIndex(uint64(l))
		}
	}
	return n
}

func sovIndex(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozIndex(x uint64) (n int) {
	return sovIndex(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *GetAllListResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIndex
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetAllListResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetAllListResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipIndex(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIndex
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetAllListReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIndex
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetAllListReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetAllListReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Platform", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIndex
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Platform = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Device", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIndex
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Device = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Scale", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIndex
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Scale = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Build", wireType)
			}
			m.Build = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Build |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RelationPage", wireType)
			}
			m.RelationPage = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RelationPage |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ModuleId", wireType)
			}
			m.ModuleId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ModuleId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipIndex(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIndex
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChangeReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIndex
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChangeReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChangeReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ModuleId", wireType)
			}
			m.ModuleId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ModuleId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AttentionRoomId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIndex
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AttentionRoomId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Platform", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIndex
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Platform = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Device", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIndex
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Device = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Scale", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIndex
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Scale = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Build", wireType)
			}
			m.Build = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Build |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipIndex(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIndex
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChangeResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIndex
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChangeResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChangeResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ModuleList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIndex
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ModuleList = append(m.ModuleList, &ChangeResp_ModuleList{})
			if err := m.ModuleList[len(m.ModuleList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIndex(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIndex
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChangeResp_List) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIndex
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: List: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: List: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Roomid", wireType)
			}
			m.Roomid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Roomid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIndex
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uname", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIndex
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Uname = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Online", wireType)
			}
			m.Online = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Online |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cover", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIndex
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cover = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Link", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIndex
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Link = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Face", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIndex
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Face = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AreaV2ParentId", wireType)
			}
			m.AreaV2ParentId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AreaV2ParentId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AreaV2ParentName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIndex
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AreaV2ParentName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AreaV2Id", wireType)
			}
			m.AreaV2Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AreaV2Id |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AreaV2Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIndex
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AreaV2Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIndex
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PlayUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayUrlH265", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIndex
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PlayUrlH265 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentQuality", wireType)
			}
			m.CurrentQuality = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CurrentQuality |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BroadcastType", wireType)
			}
			m.BroadcastType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BroadcastType |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PendentRu", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIndex
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PendentRu = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PendentRuPic", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIndex
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PendentRuPic = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PendentRuColor", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIndex
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PendentRuColor = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 19:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecType", wireType)
			}
			m.RecType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RecType |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 20:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PkId", wireType)
			}
			m.PkId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PkId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 21:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowIndex
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.AcceptQuality = append(m.AcceptQuality, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowIndex
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthIndex
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.AcceptQuality) == 0 {
					m.AcceptQuality = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowIndex
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.AcceptQuality = append(m.AcceptQuality, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field AcceptQuality", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipIndex(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIndex
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChangeResp_ModuleInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIndex
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ModuleInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ModuleInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIndex
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pic", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIndex
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pic = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Link", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIndex
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Link = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsSkyHorseGray", wireType)
			}
			m.IsSkyHorseGray = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IsSkyHorseGray |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipIndex(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIndex
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChangeResp_ModuleList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIndex
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ModuleList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ModuleList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ModuleInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIndex
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ModuleInfo == nil {
				m.ModuleInfo = &ChangeResp_ModuleInfo{}
			}
			if err := m.ModuleInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIndex
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &ChangeResp_List{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIndex(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIndex
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipIndex(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowIndex
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowIndex
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowIndex
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthIndex
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowIndex
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipIndex(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthIndex = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowIndex   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("api/http/v1/index.proto", fileDescriptor_index_a6c1bae85ae326d5) }

var fileDescriptor_index_a6c1bae85ae326d5 = []byte{
	// 1183 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x56, 0xcd, 0x6e, 0xdb, 0x46,
	0x10, 0x8e, 0x24, 0xcb, 0x96, 0xd6, 0x92, 0x6c, 0x6f, 0x9c, 0x84, 0x71, 0x53, 0xad, 0xaa, 0xfc,
	0xa9, 0xa8, 0x23, 0xd5, 0x2a, 0x12, 0xb4, 0x01, 0xfa, 0x67, 0xa3, 0x49, 0x84, 0xfe, 0x20, 0xd9,
	0xfe, 0x01, 0x45, 0x0b, 0x81, 0x26, 0xd7, 0xf2, 0xc2, 0x14, 0x49, 0x93, 0x4b, 0xa1, 0x7a, 0x82,
	0x5e, 0xdb, 0xd7, 0x28, 0x50, 0xa0, 0x8f, 0xd1, 0x63, 0x8e, 0x3d, 0x14, 0x8b, 0x22, 0xb9, 0xf1,
	0xa8, 0x17, 0x68, 0xb1, 0xb3, 0x24, 0x45, 0xd9, 0x6a, 0x9d, 0x0b, 0x97, 0x3b, 0xdf, 0x7c, 0xdf,
	0x72, 0x66, 0x67, 0x06, 0x44, 0xd7, 0x4c, 0x9f, 0xf7, 0x8e, 0x85, 0xf0, 0x7b, 0x93, 0xbd, 0x1e,
	0x77, 0x6d, 0xf6, 0x63, 0xd7, 0x0f, 0x3c, 0xe1, 0xe1, 0x6d, 0x87, 0x4f, 0x58, 0xd7, 0xf4, 0x7d,
	0xee, 0x0a, 0x16, 0x1c, 0x99, 0x16, 0xeb, 0x4e, 0xf6, 0x76, 0xee, 0x8d, 0xb8, 0x38, 0x8e, 0x0e,
	0xbb, 0x96, 0x37, 0xee, 0x8d, 0xbc, 0x91, 0xd7, 0x03, 0xe7, 0xc3, 0xe8, 0x08, 0x76, 0xb0, 0x81,
	0x37, 0x2d, 0xd2, 0xde, 0x44, 0x8d, 0xc7, 0x4c, 0x7c, 0xec, 0x38, 0x9f, 0xf1, 0x50, 0x50, 0x16,
	0xfa, 0xed, 0x5f, 0x4a, 0xa8, 0x9e, 0x37, 0x9d, 0xe2, 0x03, 0x54, 0xf1, 0x1d, 0x53, 0x1c, 0x79,
	0xc1, 0xd8, 0x28, 0xb4, 0x0a, 0x9d, 0xea, 0xfe, 0xdd, 0x99, 0x24, 0x37, 0xd5, 0xfe, 0x61, 0x3b,
	0x45, 0xda, 0xad, 0x89, 0xe9, 0x70, 0xdb, 0x14, 0xec, 0x61, 0x3b, 0x60, 0xa7, 0x11, 0x0f, 0x98,
	0xdd, 0xa6, 0x19, 0x11, 0xbf, 0x8f, 0x56, 0x6d, 0x36, 0xe1, 0x16, 0x33, 0x8a, 0x20, 0x71, 0x7b,
	0x26, 0xc9, 0x1b, 0x5a, 0x42, 0xdb, 0x97, 0x0b, 0x24, 0x24, 0xfc, 0x10, 0x95, 0x43, 0xcb, 0x74,
	0x98, 0x51, 0x02, 0xf6, 0xad, 0x99, 0x24, 0x2d, 0xcd, 0x06, 0xf3, 0x72, 0xb2, 0xa6, 0x28, 0xee,
	0x61, 0xc4, 0x1d, 0xdb, 0x58, 0x69, 0x15, 0x3a, 0xa5, 0x3c, 0x17, 0xcc, 0xff, 0xc1, 0x05, 0x0c,
	0x3f, 0x43, 0xf5, 0x80, 0x39, 0xa6, 0xe0, 0x9e, 0x3b, 0xf4, 0xcd, 0x11, 0x33, 0xca, 0xa0, 0xb1,
	0x3b, 0x93, 0xa4, 0xa3, 0x35, 0x16, 0xe0, 0xe5, 0x5a, 0xb5, 0xd4, 0xe7, 0xa9, 0x39, 0x62, 0x78,
	0x0f, 0x55, 0xc7, 0x9e, 0x1d, 0x39, 0x6c, 0xc8, 0x6d, 0x63, 0x15, 0xe4, 0xb6, 0x67, 0x92, 0x6c,
	0x6a, 0xb9, 0x0c, 0x6a, 0xd3, 0x8a, 0x7e, 0x1f, 0xd8, 0xed, 0xbf, 0x8a, 0xa8, 0x7a, 0x70, 0x6c,
	0xba, 0x23, 0xa6, 0xee, 0xe3, 0x93, 0xbc, 0x40, 0x01, 0x04, 0x3a, 0x33, 0x49, 0x6e, 0x9d, 0x15,
	0x58, 0x7e, 0x23, 0xa9, 0x28, 0xfe, 0x1e, 0x6d, 0x99, 0x42, 0x30, 0x17, 0x3e, 0x3e, 0xf0, 0xbc,
	0xb1, 0x92, 0xd3, 0x97, 0xf3, 0xf6, 0x4c, 0x92, 0x5d, 0x2d, 0x77, 0xce, 0x65, 0xb9, 0xec, 0x46,
	0xe6, 0x47, 0x3d, 0x6f, 0x3c, 0xb0, 0x71, 0x2f, 0x57, 0x34, 0xfa, 0xce, 0x2e, 0xcf, 0x24, 0xd9,
	0x38, 0x53, 0x34, 0xb9, 0x02, 0x79, 0x33, 0x2b, 0x90, 0x15, 0x70, 0xdf, 0x9a, 0x49, 0x52, 0x5f,
	0x28, 0x90, 0xac, 0x18, 0xee, 0xa4, 0xc5, 0x50, 0x06, 0xcf, 0xcd, 0x99, 0x24, 0xb5, 0x7c, 0x31,
	0xa4, 0x17, 0x7f, 0x27, 0xbd, 0x78, 0x9d, 0xe5, 0x9c, 0x9f, 0xbe, 0xf8, 0xe4, 0x92, 0xdb, 0xbf,
	0xd6, 0x10, 0x4a, 0xd3, 0x1b, 0xfa, 0xf8, 0x07, 0xb4, 0x9e, 0x24, 0xd1, 0xe1, 0xa1, 0x30, 0x0a,
	0xad, 0x52, 0x67, 0xbd, 0xff, 0x56, 0x77, 0x59, 0xbb, 0x75, 0xe7, 0xb4, 0xee, 0xe7, 0xc0, 0x51,
	0x4d, 0xb3, 0xbf, 0x11, 0x4b, 0x92, 0xd7, 0xa0, 0x68, 0x9c, 0x81, 0x3b, 0x3f, 0x55, 0xd0, 0x8a,
	0x7a, 0xc1, 0x6d, 0xb4, 0xaa, 0x72, 0x9a, 0x5d, 0x22, 0x8a, 0x25, 0x49, 0x2c, 0x34, 0x59, 0x31,
	0x41, 0x65, 0xc1, 0x85, 0x93, 0x76, 0x4d, 0x35, 0x96, 0x44, 0x1b, 0xa8, 0x5e, 0x94, 0x43, 0xe4,
	0x9a, 0xe3, 0xb4, 0x31, 0xc0, 0x01, 0x0c, 0x54, 0x2f, 0xea, 0x14, 0xcf, 0x75, 0xb8, 0xcb, 0x92,
	0xf2, 0x87, 0x53, 0xb4, 0x85, 0x26, 0xab, 0x12, 0xb1, 0xbc, 0x09, 0x0b, 0x92, 0x84, 0x82, 0x08,
	0x18, 0xa8, 0x5e, 0xf0, 0x0d, 0xb4, 0xe2, 0x70, 0xf7, 0x04, 0x12, 0x59, 0xdd, 0xaf, 0xc4, 0x92,
	0xc0, 0x9e, 0xc2, 0x53, 0xa1, 0x2a, 0x1f, 0xc6, 0xda, 0x1c, 0x55, 0x7b, 0x0a, 0x4f, 0xfc, 0x11,
	0xda, 0x32, 0x03, 0x66, 0x0e, 0x27, 0xfd, 0xa1, 0x6f, 0x06, 0xcc, 0x15, 0xaa, 0xce, 0x2a, 0xf0,
	0x2d, 0x57, 0x62, 0x49, 0xce, 0x83, 0xb4, 0xa1, 0x4c, 0xdf, 0xf4, 0x9f, 0x82, 0x61, 0x60, 0xe3,
	0x47, 0xe8, 0xf2, 0x19, 0x27, 0x88, 0xb8, 0x0a, 0xc7, 0x5d, 0x8b, 0x25, 0x59, 0x06, 0xd3, 0xcd,
	0xbc, 0xca, 0x17, 0x2a, 0x15, 0xbb, 0x08, 0xa5, 0x8e, 0xdc, 0x36, 0x10, 0x7c, 0x42, 0x23, 0x96,
	0x24, 0x67, 0xa5, 0x15, 0xcd, 0x1a, 0xd8, 0xb8, 0x8f, 0x6a, 0xa9, 0x1d, 0x8e, 0x5b, 0xd7, 0xc5,
	0x16, 0x4b, 0xb2, 0x60, 0xa7, 0x48, 0x33, 0xe0, 0x84, 0x3d, 0xa8, 0xfa, 0xe9, 0x30, 0x0a, 0x1c,
	0xa3, 0x06, 0xfe, 0x57, 0x63, 0x49, 0x70, 0x6a, 0xdb, 0xf5, 0xc6, 0x5c, 0xb0, 0xb1, 0x2f, 0xa6,
	0x74, 0x4d, 0xd9, 0xbe, 0x0e, 0x1c, 0xfc, 0x21, 0xaa, 0xa7, 0xf0, 0xf0, 0xb8, 0xff, 0xe0, 0xbe,
	0x51, 0x07, 0xde, 0x6b, 0xb1, 0x24, 0xd7, 0x16, 0x80, 0x1c, 0x79, 0x3d, 0x21, 0x3f, 0xe9, 0x3f,
	0xb8, 0x8f, 0x1f, 0xa1, 0x0d, 0x2b, 0x0a, 0x20, 0xee, 0xd3, 0xc8, 0x74, 0xb8, 0x98, 0x1a, 0x0d,
	0x08, 0xed, 0xf5, 0x58, 0x92, 0xeb, 0x67, 0xa0, 0x9c, 0x48, 0x23, 0x81, 0x9e, 0x69, 0x04, 0xbf,
	0x87, 0x1a, 0x87, 0x81, 0x67, 0xda, 0x96, 0x19, 0x8a, 0xa1, 0x98, 0xfa, 0xcc, 0xd8, 0x00, 0x19,
	0x1c, 0x4b, 0x72, 0x06, 0xa1, 0xf5, 0x6c, 0xff, 0xd5, 0xd4, 0x67, 0xf8, 0x1e, 0x42, 0x3e, 0x73,
	0x6d, 0x75, 0x4e, 0x10, 0x19, 0x9b, 0x10, 0x00, 0x24, 0x76, 0x6e, 0xa5, 0xd5, 0xe4, 0x9d, 0x46,
	0xf8, 0x5d, 0xd4, 0x98, 0x03, 0x43, 0x9f, 0x5b, 0xc6, 0x16, 0x50, 0xe0, 0xa4, 0x45, 0x84, 0xd6,
	0x32, 0xda, 0x53, 0x6e, 0xe1, 0x0f, 0xd0, 0x66, 0x0e, 0xb7, 0x3c, 0xc7, 0x0b, 0x0c, 0x0c, 0xdc,
	0xed, 0x58, 0x92, 0x73, 0x18, 0x6d, 0x64, 0xec, 0x03, 0xb5, 0xc7, 0x77, 0x51, 0x25, 0x60, 0x96,
	0x8e, 0xee, 0x32, 0x44, 0x57, 0x8b, 0x25, 0xc9, 0x6c, 0x74, 0x2d, 0x60, 0x16, 0x44, 0xd4, 0x44,
	0x65, 0xff, 0x44, 0x55, 0xc9, 0x36, 0x78, 0x41, 0x47, 0x80, 0x81, 0xae, 0xf8, 0x27, 0x03, 0x1b,
	0x1f, 0xa0, 0x86, 0x69, 0x59, 0xcc, 0x9f, 0xe7, 0xfc, 0x4a, 0xab, 0xd4, 0x29, 0xed, 0xdf, 0x88,
	0x25, 0x31, 0x16, 0x91, 0x5c, 0xca, 0xeb, 0x1a, 0x49, 0x32, 0xbe, 0xf3, 0x4f, 0x01, 0x21, 0x3d,
	0x35, 0x06, 0xee, 0x91, 0x87, 0xaf, 0xa2, 0x62, 0x36, 0x0b, 0x56, 0x63, 0x49, 0x8a, 0xdc, 0xa6,
	0xc5, 0x57, 0x99, 0x01, 0xd7, 0x51, 0x49, 0x25, 0x51, 0x4f, 0x80, 0xb5, 0x58, 0x12, 0xb5, 0xa5,
	0xea, 0xa1, 0x5a, 0x13, 0x82, 0xd5, 0xbd, 0x0f, 0xad, 0x09, 0x81, 0xc2, 0x33, 0x6b, 0xeb, 0xf2,
	0xd2, 0xb6, 0x86, 0xa9, 0x10, 0xb9, 0x22, 0x19, 0x9f, 0xc9, 0x54, 0x88, 0x5c, 0x41, 0xf5, 0xa2,
	0x3a, 0x9b, 0x87, 0xc3, 0xf0, 0x64, 0x3a, 0x3c, 0xf6, 0x82, 0x90, 0x0d, 0x47, 0x81, 0x39, 0x85,
	0x21, 0x90, 0x74, 0xf6, 0x39, 0x90, 0x36, 0x78, 0xf8, 0xe5, 0xc9, 0xf4, 0x89, 0x32, 0x3c, 0x0e,
	0xcc, 0xe9, 0xce, 0xef, 0x59, 0x06, 0x60, 0x22, 0xce, 0x27, 0x2f, 0x77, 0x8f, 0x3c, 0x48, 0xc5,
	0xab, 0x4f, 0x5e, 0x95, 0xc3, 0x85, 0xc9, 0xab, 0x34, 0xd2, 0xc9, 0x0b, 0x09, 0x3e, 0x50, 0xe1,
	0x86, 0xc2, 0x28, 0xc2, 0x44, 0xbf, 0x7d, 0xa1, 0x2e, 0xcc, 0xf2, 0x24, 0x2b, 0xa1, 0xa0, 0xf0,
	0xec, 0xff, 0x56, 0x40, 0xe5, 0x81, 0xfa, 0x0d, 0xc3, 0xdf, 0x22, 0x34, 0xca, 0x7e, 0x94, 0xf0,
	0xcd, 0xe5, 0x72, 0x0b, 0xbf, 0x52, 0x3b, 0xb7, 0x2e, 0x76, 0x0a, 0x7d, 0xfc, 0x29, 0x5a, 0xb5,
	0xe0, 0x2b, 0x30, 0xf9, 0xff, 0x6f, 0x3c, 0xdd, 0x69, 0x5d, 0x14, 0xc4, 0xfe, 0x8d, 0x3f, 0x5e,
	0x34, 0x0b, 0xcf, 0x5f, 0x34, 0x0b, 0x7f, 0xbf, 0x68, 0x16, 0x7e, 0x7e, 0xd9, 0xbc, 0xf4, 0xfc,
	0x65, 0xf3, 0xd2, 0x9f, 0x2f, 0x9b, 0x97, 0xbe, 0x2b, 0x4e, 0xf6, 0x0e, 0x57, 0xe1, 0x37, 0xf0,
	0x9d, 0x7f, 0x03, 0x00, 0x00, 0xff, 0xff, 0x31, 0x65, 0x56, 0xd5, 0x66, 0x0a, 0x00, 0x00,
}
