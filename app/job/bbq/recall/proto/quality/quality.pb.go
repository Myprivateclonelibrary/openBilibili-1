// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: app/job/bbq/recall/proto/quality/quality.proto

package quality

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import encoding_binary "encoding/binary"

import strings "strings"
import reflect "reflect"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type VideoQuality struct {
	Svid                 string   `protobuf:"bytes,1,opt,name=svid,proto3" json:"svid,omitempty"`
	QualityInfoM         *Quality `protobuf:"bytes,2,opt,name=quality_info_m,json=qualityInfoM" json:"quality_info_m,omitempty"`
	QualityInfoW         *Quality `protobuf:"bytes,3,opt,name=quality_info_w,json=qualityInfoW" json:"quality_info_w,omitempty"`
	QualityInfoH         *Quality `protobuf:"bytes,4,opt,name=quality_info_h,json=qualityInfoH" json:"quality_info_h,omitempty"`
	QualityInfoMsM       *Quality `protobuf:"bytes,5,opt,name=quality_info_ms_m,json=qualityInfoMsM" json:"quality_info_ms_m,omitempty"`
	QualityInfoMsW       *Quality `protobuf:"bytes,6,opt,name=quality_info_ms_w,json=qualityInfoMsW" json:"quality_info_ms_w,omitempty"`
	QualityInfoMsH       *Quality `protobuf:"bytes,7,opt,name=quality_info_ms_h,json=qualityInfoMsH" json:"quality_info_ms_h,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VideoQuality) Reset()      { *m = VideoQuality{} }
func (*VideoQuality) ProtoMessage() {}
func (*VideoQuality) Descriptor() ([]byte, []int) {
	return fileDescriptor_quality_e12e2285f710c9e7, []int{0}
}
func (m *VideoQuality) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VideoQuality) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VideoQuality.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *VideoQuality) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VideoQuality.Merge(dst, src)
}
func (m *VideoQuality) XXX_Size() int {
	return m.Size()
}
func (m *VideoQuality) XXX_DiscardUnknown() {
	xxx_messageInfo_VideoQuality.DiscardUnknown(m)
}

var xxx_messageInfo_VideoQuality proto.InternalMessageInfo

// 质量
type Quality struct {
	PubTime              uint64   `protobuf:"varint,1,opt,name=pub_time,json=pubTime,proto3" json:"pub_time,omitempty"`
	PlayCnt              uint32   `protobuf:"varint,2,opt,name=play_cnt,json=playCnt,proto3" json:"play_cnt,omitempty"`
	AbsolutePlayCnt      uint32   `protobuf:"varint,3,opt,name=absolute_play_cnt,json=absolutePlayCnt,proto3" json:"absolute_play_cnt,omitempty"`
	FavCnt               uint32   `protobuf:"varint,4,opt,name=fav_cnt,json=favCnt,proto3" json:"fav_cnt,omitempty"`
	LikeCnt              uint32   `protobuf:"varint,5,opt,name=like_cnt,json=likeCnt,proto3" json:"like_cnt,omitempty"`
	CoinCnt              uint32   `protobuf:"varint,6,opt,name=coin_cnt,json=coinCnt,proto3" json:"coin_cnt,omitempty"`
	ShareCnt             uint32   `protobuf:"varint,7,opt,name=share_cnt,json=shareCnt,proto3" json:"share_cnt,omitempty"`
	DanmuCnt             uint32   `protobuf:"varint,8,opt,name=danmu_cnt,json=danmuCnt,proto3" json:"danmu_cnt,omitempty"`
	NegEvalCnt           uint32   `protobuf:"varint,9,opt,name=neg_eval_cnt,json=negEvalCnt,proto3" json:"neg_eval_cnt,omitempty"`
	CommentAddCnt        uint32   `protobuf:"varint,10,opt,name=comment_add_cnt,json=commentAddCnt,proto3" json:"comment_add_cnt,omitempty"`
	CommentLikeCnt       uint32   `protobuf:"varint,11,opt,name=comment_like_cnt,json=commentLikeCnt,proto3" json:"comment_like_cnt,omitempty"`
	CommentReportCnt     uint32   `protobuf:"varint,12,opt,name=comment_report_cnt,json=commentReportCnt,proto3" json:"comment_report_cnt,omitempty"`
	AbsolutePlayRate     float64  `protobuf:"fixed64,13,opt,name=absolute_play_rate,json=absolutePlayRate,proto3" json:"absolute_play_rate,omitempty"`
	LikeRate             float64  `protobuf:"fixed64,14,opt,name=like_rate,json=likeRate,proto3" json:"like_rate,omitempty"`
	ShareRate            float64  `protobuf:"fixed64,15,opt,name=share_rate,json=shareRate,proto3" json:"share_rate,omitempty"`
	ReplyRate            float64  `protobuf:"fixed64,16,opt,name=reply_rate,json=replyRate,proto3" json:"reply_rate,omitempty"`
	ImpCnt               uint32   `protobuf:"varint,17,opt,name=imp_cnt,json=impCnt,proto3" json:"imp_cnt,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Quality) Reset()      { *m = Quality{} }
func (*Quality) ProtoMessage() {}
func (*Quality) Descriptor() ([]byte, []int) {
	return fileDescriptor_quality_e12e2285f710c9e7, []int{1}
}
func (m *Quality) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Quality) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Quality.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Quality) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Quality.Merge(dst, src)
}
func (m *Quality) XXX_Size() int {
	return m.Size()
}
func (m *Quality) XXX_DiscardUnknown() {
	xxx_messageInfo_Quality.DiscardUnknown(m)
}

var xxx_messageInfo_Quality proto.InternalMessageInfo

func init() {
	proto.RegisterType((*VideoQuality)(nil), "VideoQuality")
	proto.RegisterType((*Quality)(nil), "Quality")
}
func (m *VideoQuality) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VideoQuality) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Svid) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintQuality(dAtA, i, uint64(len(m.Svid)))
		i += copy(dAtA[i:], m.Svid)
	}
	if m.QualityInfoM != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintQuality(dAtA, i, uint64(m.QualityInfoM.Size()))
		n1, err := m.QualityInfoM.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.QualityInfoW != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintQuality(dAtA, i, uint64(m.QualityInfoW.Size()))
		n2, err := m.QualityInfoW.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if m.QualityInfoH != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintQuality(dAtA, i, uint64(m.QualityInfoH.Size()))
		n3, err := m.QualityInfoH.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	if m.QualityInfoMsM != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintQuality(dAtA, i, uint64(m.QualityInfoMsM.Size()))
		n4, err := m.QualityInfoMsM.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	if m.QualityInfoMsW != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintQuality(dAtA, i, uint64(m.QualityInfoMsW.Size()))
		n5, err := m.QualityInfoMsW.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	if m.QualityInfoMsH != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintQuality(dAtA, i, uint64(m.QualityInfoMsH.Size()))
		n6, err := m.QualityInfoMsH.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Quality) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Quality) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.PubTime != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintQuality(dAtA, i, uint64(m.PubTime))
	}
	if m.PlayCnt != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintQuality(dAtA, i, uint64(m.PlayCnt))
	}
	if m.AbsolutePlayCnt != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintQuality(dAtA, i, uint64(m.AbsolutePlayCnt))
	}
	if m.FavCnt != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintQuality(dAtA, i, uint64(m.FavCnt))
	}
	if m.LikeCnt != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintQuality(dAtA, i, uint64(m.LikeCnt))
	}
	if m.CoinCnt != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintQuality(dAtA, i, uint64(m.CoinCnt))
	}
	if m.ShareCnt != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintQuality(dAtA, i, uint64(m.ShareCnt))
	}
	if m.DanmuCnt != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintQuality(dAtA, i, uint64(m.DanmuCnt))
	}
	if m.NegEvalCnt != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintQuality(dAtA, i, uint64(m.NegEvalCnt))
	}
	if m.CommentAddCnt != 0 {
		dAtA[i] = 0x50
		i++
		i = encodeVarintQuality(dAtA, i, uint64(m.CommentAddCnt))
	}
	if m.CommentLikeCnt != 0 {
		dAtA[i] = 0x58
		i++
		i = encodeVarintQuality(dAtA, i, uint64(m.CommentLikeCnt))
	}
	if m.CommentReportCnt != 0 {
		dAtA[i] = 0x60
		i++
		i = encodeVarintQuality(dAtA, i, uint64(m.CommentReportCnt))
	}
	if m.AbsolutePlayRate != 0 {
		dAtA[i] = 0x69
		i++
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.AbsolutePlayRate))))
		i += 8
	}
	if m.LikeRate != 0 {
		dAtA[i] = 0x71
		i++
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.LikeRate))))
		i += 8
	}
	if m.ShareRate != 0 {
		dAtA[i] = 0x79
		i++
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.ShareRate))))
		i += 8
	}
	if m.ReplyRate != 0 {
		dAtA[i] = 0x81
		i++
		dAtA[i] = 0x1
		i++
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.ReplyRate))))
		i += 8
	}
	if m.ImpCnt != 0 {
		dAtA[i] = 0x88
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintQuality(dAtA, i, uint64(m.ImpCnt))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintQuality(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *VideoQuality) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Svid)
	if l > 0 {
		n += 1 + l + sovQuality(uint64(l))
	}
	if m.QualityInfoM != nil {
		l = m.QualityInfoM.Size()
		n += 1 + l + sovQuality(uint64(l))
	}
	if m.QualityInfoW != nil {
		l = m.QualityInfoW.Size()
		n += 1 + l + sovQuality(uint64(l))
	}
	if m.QualityInfoH != nil {
		l = m.QualityInfoH.Size()
		n += 1 + l + sovQuality(uint64(l))
	}
	if m.QualityInfoMsM != nil {
		l = m.QualityInfoMsM.Size()
		n += 1 + l + sovQuality(uint64(l))
	}
	if m.QualityInfoMsW != nil {
		l = m.QualityInfoMsW.Size()
		n += 1 + l + sovQuality(uint64(l))
	}
	if m.QualityInfoMsH != nil {
		l = m.QualityInfoMsH.Size()
		n += 1 + l + sovQuality(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Quality) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PubTime != 0 {
		n += 1 + sovQuality(uint64(m.PubTime))
	}
	if m.PlayCnt != 0 {
		n += 1 + sovQuality(uint64(m.PlayCnt))
	}
	if m.AbsolutePlayCnt != 0 {
		n += 1 + sovQuality(uint64(m.AbsolutePlayCnt))
	}
	if m.FavCnt != 0 {
		n += 1 + sovQuality(uint64(m.FavCnt))
	}
	if m.LikeCnt != 0 {
		n += 1 + sovQuality(uint64(m.LikeCnt))
	}
	if m.CoinCnt != 0 {
		n += 1 + sovQuality(uint64(m.CoinCnt))
	}
	if m.ShareCnt != 0 {
		n += 1 + sovQuality(uint64(m.ShareCnt))
	}
	if m.DanmuCnt != 0 {
		n += 1 + sovQuality(uint64(m.DanmuCnt))
	}
	if m.NegEvalCnt != 0 {
		n += 1 + sovQuality(uint64(m.NegEvalCnt))
	}
	if m.CommentAddCnt != 0 {
		n += 1 + sovQuality(uint64(m.CommentAddCnt))
	}
	if m.CommentLikeCnt != 0 {
		n += 1 + sovQuality(uint64(m.CommentLikeCnt))
	}
	if m.CommentReportCnt != 0 {
		n += 1 + sovQuality(uint64(m.CommentReportCnt))
	}
	if m.AbsolutePlayRate != 0 {
		n += 9
	}
	if m.LikeRate != 0 {
		n += 9
	}
	if m.ShareRate != 0 {
		n += 9
	}
	if m.ReplyRate != 0 {
		n += 10
	}
	if m.ImpCnt != 0 {
		n += 2 + sovQuality(uint64(m.ImpCnt))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovQuality(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozQuality(x uint64) (n int) {
	return sovQuality(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *VideoQuality) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&VideoQuality{`,
		`Svid:` + fmt.Sprintf("%v", this.Svid) + `,`,
		`QualityInfoM:` + strings.Replace(fmt.Sprintf("%v", this.QualityInfoM), "Quality", "Quality", 1) + `,`,
		`QualityInfoW:` + strings.Replace(fmt.Sprintf("%v", this.QualityInfoW), "Quality", "Quality", 1) + `,`,
		`QualityInfoH:` + strings.Replace(fmt.Sprintf("%v", this.QualityInfoH), "Quality", "Quality", 1) + `,`,
		`QualityInfoMsM:` + strings.Replace(fmt.Sprintf("%v", this.QualityInfoMsM), "Quality", "Quality", 1) + `,`,
		`QualityInfoMsW:` + strings.Replace(fmt.Sprintf("%v", this.QualityInfoMsW), "Quality", "Quality", 1) + `,`,
		`QualityInfoMsH:` + strings.Replace(fmt.Sprintf("%v", this.QualityInfoMsH), "Quality", "Quality", 1) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Quality) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Quality{`,
		`PubTime:` + fmt.Sprintf("%v", this.PubTime) + `,`,
		`PlayCnt:` + fmt.Sprintf("%v", this.PlayCnt) + `,`,
		`AbsolutePlayCnt:` + fmt.Sprintf("%v", this.AbsolutePlayCnt) + `,`,
		`FavCnt:` + fmt.Sprintf("%v", this.FavCnt) + `,`,
		`LikeCnt:` + fmt.Sprintf("%v", this.LikeCnt) + `,`,
		`CoinCnt:` + fmt.Sprintf("%v", this.CoinCnt) + `,`,
		`ShareCnt:` + fmt.Sprintf("%v", this.ShareCnt) + `,`,
		`DanmuCnt:` + fmt.Sprintf("%v", this.DanmuCnt) + `,`,
		`NegEvalCnt:` + fmt.Sprintf("%v", this.NegEvalCnt) + `,`,
		`CommentAddCnt:` + fmt.Sprintf("%v", this.CommentAddCnt) + `,`,
		`CommentLikeCnt:` + fmt.Sprintf("%v", this.CommentLikeCnt) + `,`,
		`CommentReportCnt:` + fmt.Sprintf("%v", this.CommentReportCnt) + `,`,
		`AbsolutePlayRate:` + fmt.Sprintf("%v", this.AbsolutePlayRate) + `,`,
		`LikeRate:` + fmt.Sprintf("%v", this.LikeRate) + `,`,
		`ShareRate:` + fmt.Sprintf("%v", this.ShareRate) + `,`,
		`ReplyRate:` + fmt.Sprintf("%v", this.ReplyRate) + `,`,
		`ImpCnt:` + fmt.Sprintf("%v", this.ImpCnt) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringQuality(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *VideoQuality) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuality
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VideoQuality: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VideoQuality: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Svid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuality
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuality
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Svid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QualityInfoM", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuality
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuality
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.QualityInfoM == nil {
				m.QualityInfoM = &Quality{}
			}
			if err := m.QualityInfoM.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QualityInfoW", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuality
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuality
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.QualityInfoW == nil {
				m.QualityInfoW = &Quality{}
			}
			if err := m.QualityInfoW.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QualityInfoH", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuality
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuality
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.QualityInfoH == nil {
				m.QualityInfoH = &Quality{}
			}
			if err := m.QualityInfoH.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QualityInfoMsM", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuality
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuality
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.QualityInfoMsM == nil {
				m.QualityInfoMsM = &Quality{}
			}
			if err := m.QualityInfoMsM.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QualityInfoMsW", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuality
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuality
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.QualityInfoMsW == nil {
				m.QualityInfoMsW = &Quality{}
			}
			if err := m.QualityInfoMsW.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QualityInfoMsH", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuality
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuality
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.QualityInfoMsH == nil {
				m.QualityInfoMsH = &Quality{}
			}
			if err := m.QualityInfoMsH.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuality(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQuality
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Quality) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuality
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Quality: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Quality: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PubTime", wireType)
			}
			m.PubTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuality
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PubTime |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayCnt", wireType)
			}
			m.PlayCnt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuality
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PlayCnt |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AbsolutePlayCnt", wireType)
			}
			m.AbsolutePlayCnt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuality
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AbsolutePlayCnt |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FavCnt", wireType)
			}
			m.FavCnt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuality
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FavCnt |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LikeCnt", wireType)
			}
			m.LikeCnt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuality
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LikeCnt |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoinCnt", wireType)
			}
			m.CoinCnt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuality
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CoinCnt |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShareCnt", wireType)
			}
			m.ShareCnt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuality
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ShareCnt |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DanmuCnt", wireType)
			}
			m.DanmuCnt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuality
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DanmuCnt |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NegEvalCnt", wireType)
			}
			m.NegEvalCnt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuality
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NegEvalCnt |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommentAddCnt", wireType)
			}
			m.CommentAddCnt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuality
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CommentAddCnt |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommentLikeCnt", wireType)
			}
			m.CommentLikeCnt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuality
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CommentLikeCnt |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommentReportCnt", wireType)
			}
			m.CommentReportCnt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuality
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CommentReportCnt |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field AbsolutePlayRate", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.AbsolutePlayRate = float64(math.Float64frombits(v))
		case 14:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field LikeRate", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.LikeRate = float64(math.Float64frombits(v))
		case 15:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShareRate", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.ShareRate = float64(math.Float64frombits(v))
		case 16:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReplyRate", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.ReplyRate = float64(math.Float64frombits(v))
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ImpCnt", wireType)
			}
			m.ImpCnt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuality
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ImpCnt |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuality(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQuality
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuality(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuality
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuality
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuality
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthQuality
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowQuality
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipQuality(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthQuality = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuality   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("app/job/bbq/recall/proto/quality/quality.proto", fileDescriptor_quality_e12e2285f710c9e7)
}

var fileDescriptor_quality_e12e2285f710c9e7 = []byte{
	// 517 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x93, 0xcb, 0x6e, 0xd3, 0x40,
	0x14, 0x86, 0xeb, 0x36, 0x8d, 0x93, 0xd3, 0x5c, 0xbd, 0xa9, 0x0b, 0xc2, 0x0a, 0x5d, 0xa0, 0x08,
	0x41, 0x2c, 0xd1, 0x27, 0x80, 0x0a, 0xa9, 0x48, 0x54, 0x02, 0x0b, 0x51, 0x89, 0x8d, 0x35, 0x8e,
	0x27, 0xc9, 0x80, 0x67, 0xc6, 0xb5, 0xc7, 0xae, 0xba, 0xe3, 0xb1, 0x78, 0x84, 0x2e, 0x61, 0xc7,
	0x92, 0xe6, 0x49, 0xd0, 0x9c, 0x19, 0x57, 0xbd, 0x29, 0xab, 0xcc, 0x39, 0xdf, 0x77, 0xe6, 0xf2,
	0x27, 0x81, 0x19, 0xc9, 0xf3, 0xf0, 0xbb, 0x4c, 0xc2, 0x24, 0x39, 0x0f, 0x0b, 0x3a, 0x27, 0x59,
	0x16, 0xe6, 0x85, 0x54, 0x32, 0x3c, 0xaf, 0x48, 0xc6, 0xd4, 0x65, 0xf3, 0x39, 0xc3, 0xee, 0x93,
	0xd7, 0x4b, 0xa6, 0x56, 0x55, 0x32, 0x9b, 0x4b, 0x1e, 0x2e, 0xe5, 0x52, 0x1a, 0x39, 0xa9, 0x16,
	0x58, 0x99, 0x49, 0xbd, 0x32, 0xfa, 0xe1, 0x9f, 0x6d, 0xe8, 0x7d, 0x65, 0x29, 0x95, 0x9f, 0xcd,
	0x2e, 0x9e, 0x07, 0xad, 0xb2, 0x66, 0xa9, 0xef, 0x4c, 0x9c, 0x69, 0x37, 0xc2, 0xb5, 0x37, 0x83,
	0x81, 0x3d, 0x24, 0x66, 0x62, 0x21, 0x63, 0xee, 0x6f, 0x4f, 0x9c, 0xe9, 0xde, 0x9b, 0xce, 0xcc,
	0x4e, 0x45, 0x3d, 0xcb, 0x3f, 0x88, 0x85, 0x3c, 0x7d, 0xe0, 0x5f, 0xf8, 0x3b, 0x1b, 0xfc, 0xb3,
	0x07, 0xfe, 0xca, 0x6f, 0x6d, 0xf0, 0x4f, 0xbc, 0x23, 0x18, 0xdf, 0xbd, 0x4f, 0x19, 0x73, 0x7f,
	0xf7, 0xde, 0xc8, 0xe0, 0xf6, 0x95, 0xca, 0xd3, 0xc7, 0x86, 0x2e, 0xfc, 0xf6, 0xc6, 0xa1, 0xb3,
	0xc7, 0x86, 0x56, 0xbe, 0xbb, 0x71, 0xe8, 0xe4, 0xf0, 0x57, 0x0b, 0xdc, 0x26, 0xce, 0x03, 0xe8,
	0xe4, 0x55, 0x12, 0x2b, 0xc6, 0x29, 0x46, 0xda, 0x8a, 0xdc, 0xbc, 0x4a, 0xbe, 0x30, 0x4e, 0x11,
	0x65, 0xe4, 0x32, 0x9e, 0x0b, 0x85, 0x79, 0xf6, 0x23, 0x57, 0xd7, 0xc7, 0x42, 0x79, 0x2f, 0x61,
	0x4c, 0x92, 0x52, 0x66, 0x95, 0xa2, 0xf1, 0x8d, 0xb3, 0x83, 0xce, 0xb0, 0x01, 0x9f, 0xac, 0xbb,
	0x0f, 0xee, 0x82, 0xd4, 0x68, 0xb4, 0xd0, 0x68, 0x2f, 0x48, 0xad, 0xc1, 0x01, 0x74, 0x32, 0xf6,
	0x83, 0x22, 0xd9, 0x35, 0xfb, 0xeb, 0xda, 0xa2, 0xb9, 0x64, 0x02, 0x51, 0xdb, 0x20, 0x5d, 0x6b,
	0xf4, 0x14, 0xba, 0xe5, 0x8a, 0x14, 0x66, 0xcc, 0x45, 0xd6, 0xc1, 0x86, 0x85, 0x29, 0x11, 0xbc,
	0x42, 0xd8, 0x31, 0x10, 0x1b, 0x1a, 0x4e, 0xa0, 0x27, 0xe8, 0x32, 0xa6, 0x35, 0xc9, 0x90, 0x77,
	0x91, 0x83, 0xa0, 0xcb, 0xf7, 0x35, 0xc9, 0xb4, 0xf1, 0x02, 0x86, 0x73, 0xc9, 0x39, 0x15, 0x2a,
	0x26, 0x69, 0x8a, 0x12, 0xa0, 0xd4, 0xb7, 0xed, 0xb7, 0x69, 0xaa, 0xbd, 0x29, 0x8c, 0x1a, 0xef,
	0xe6, 0x05, 0x7b, 0x28, 0x0e, 0x6c, 0xff, 0xa3, 0x7d, 0xc8, 0x2b, 0xf0, 0x1a, 0xb3, 0xa0, 0xb9,
	0x2c, 0x14, 0xba, 0x3d, 0x74, 0x9b, 0x3d, 0x22, 0x04, 0xd6, 0xbe, 0x1b, 0x6b, 0x41, 0x14, 0xf5,
	0xfb, 0x13, 0x67, 0xea, 0x44, 0xa3, 0xdb, 0xb9, 0x46, 0x44, 0x51, 0xfd, 0x58, 0x3c, 0x1d, 0xa5,
	0x01, 0x4a, 0x18, 0x28, 0xc2, 0x67, 0x00, 0x26, 0x26, 0xa4, 0x43, 0xa4, 0x26, 0xb8, 0x06, 0x17,
	0x34, 0xcf, 0xec, 0x09, 0x23, 0x83, 0xb1, 0x83, 0x78, 0x1f, 0x5c, 0xc6, 0x73, 0xbc, 0xeb, 0xd8,
	0x7c, 0x67, 0x8c, 0xe7, 0xc7, 0x42, 0xbd, 0x7b, 0x7e, 0x75, 0x1d, 0x6c, 0xfd, 0xbd, 0x0e, 0xb6,
	0x7e, 0xae, 0x03, 0xe7, 0x6a, 0x1d, 0x38, 0xbf, 0xd7, 0x81, 0xf3, 0x6f, 0x1d, 0x38, 0xdf, 0x5c,
	0xfb, 0x23, 0x4b, 0xda, 0xf8, 0xc7, 0x3d, 0xfa, 0x1f, 0x00, 0x00, 0xff, 0xff, 0xa7, 0x72, 0x2f,
	0x6e, 0x19, 0x04, 0x00, 0x00,
}
