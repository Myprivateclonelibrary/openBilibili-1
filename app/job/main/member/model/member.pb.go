// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: app/job/main/member/model/member.proto

package model

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import go_common_library_time "go-common/library/time"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type LevelInfo struct {
	Cur                  int32    `protobuf:"varint,1,opt,name=Cur,proto3" json:"current_level"`
	Min                  int32    `protobuf:"varint,2,opt,name=Min,proto3" json:"current_min"`
	NowExp               int32    `protobuf:"varint,3,opt,name=NowExp,proto3" json:"current_exp,omitempty"`
	NextExp              int32    `protobuf:"varint,4,opt,name=NextExp,proto3" json:"next_exp"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LevelInfo) Reset()         { *m = LevelInfo{} }
func (m *LevelInfo) String() string { return proto.CompactTextString(m) }
func (*LevelInfo) ProtoMessage()    {}
func (*LevelInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_member_5694f4417bfa5a12, []int{0}
}
func (m *LevelInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LevelInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LevelInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *LevelInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LevelInfo.Merge(dst, src)
}
func (m *LevelInfo) XXX_Size() int {
	return m.Size()
}
func (m *LevelInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_LevelInfo.DiscardUnknown(m)
}

var xxx_messageInfo_LevelInfo proto.InternalMessageInfo

func (m *LevelInfo) GetCur() int32 {
	if m != nil {
		return m.Cur
	}
	return 0
}

func (m *LevelInfo) GetMin() int32 {
	if m != nil {
		return m.Min
	}
	return 0
}

func (m *LevelInfo) GetNowExp() int32 {
	if m != nil {
		return m.NowExp
	}
	return 0
}

func (m *LevelInfo) GetNextExp() int32 {
	if m != nil {
		return m.NextExp
	}
	return 0
}

type PendantInfo struct {
	Pid                  int      `protobuf:"varint,1,opt,name=Pid,proto3,casttype=int" json:"pid"`
	Name                 string   `protobuf:"bytes,2,opt,name=Name,proto3" json:"name"`
	Image                string   `protobuf:"bytes,3,opt,name=Image,proto3" json:"image"`
	Expire               int      `protobuf:"varint,4,opt,name=Expire,proto3,casttype=int" json:"expire"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PendantInfo) Reset()         { *m = PendantInfo{} }
func (m *PendantInfo) String() string { return proto.CompactTextString(m) }
func (*PendantInfo) ProtoMessage()    {}
func (*PendantInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_member_5694f4417bfa5a12, []int{1}
}
func (m *PendantInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PendantInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PendantInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *PendantInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PendantInfo.Merge(dst, src)
}
func (m *PendantInfo) XXX_Size() int {
	return m.Size()
}
func (m *PendantInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_PendantInfo.DiscardUnknown(m)
}

var xxx_messageInfo_PendantInfo proto.InternalMessageInfo

func (m *PendantInfo) GetPid() int {
	if m != nil {
		return m.Pid
	}
	return 0
}

func (m *PendantInfo) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *PendantInfo) GetImage() string {
	if m != nil {
		return m.Image
	}
	return ""
}

func (m *PendantInfo) GetExpire() int {
	if m != nil {
		return m.Expire
	}
	return 0
}

type NameplateInfo struct {
	Nid                  int      `protobuf:"varint,1,opt,name=Nid,proto3,casttype=int" json:"nid"`
	Name                 string   `protobuf:"bytes,2,opt,name=Name,proto3" json:"name"`
	Image                string   `protobuf:"bytes,3,opt,name=Image,proto3" json:"image"`
	ImageSmall           string   `protobuf:"bytes,4,opt,name=ImageSmall,proto3" json:"image_small"`
	Level                string   `protobuf:"bytes,5,opt,name=Level,proto3" json:"level"`
	Condition            string   `protobuf:"bytes,6,opt,name=Condition,proto3" json:"condition"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NameplateInfo) Reset()         { *m = NameplateInfo{} }
func (m *NameplateInfo) String() string { return proto.CompactTextString(m) }
func (*NameplateInfo) ProtoMessage()    {}
func (*NameplateInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_member_5694f4417bfa5a12, []int{2}
}
func (m *NameplateInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NameplateInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NameplateInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *NameplateInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NameplateInfo.Merge(dst, src)
}
func (m *NameplateInfo) XXX_Size() int {
	return m.Size()
}
func (m *NameplateInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_NameplateInfo.DiscardUnknown(m)
}

var xxx_messageInfo_NameplateInfo proto.InternalMessageInfo

func (m *NameplateInfo) GetNid() int {
	if m != nil {
		return m.Nid
	}
	return 0
}

func (m *NameplateInfo) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *NameplateInfo) GetImage() string {
	if m != nil {
		return m.Image
	}
	return ""
}

func (m *NameplateInfo) GetImageSmall() string {
	if m != nil {
		return m.ImageSmall
	}
	return ""
}

func (m *NameplateInfo) GetLevel() string {
	if m != nil {
		return m.Level
	}
	return ""
}

func (m *NameplateInfo) GetCondition() string {
	if m != nil {
		return m.Condition
	}
	return ""
}

type OfficialInfo struct {
	Type                 int8     `protobuf:"varint,7,opt,name=Type,proto3,casttype=int8" json:"type"`
	Desc                 string   `protobuf:"bytes,8,opt,name=Desc,proto3" json:"desc"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *OfficialInfo) Reset()         { *m = OfficialInfo{} }
func (m *OfficialInfo) String() string { return proto.CompactTextString(m) }
func (*OfficialInfo) ProtoMessage()    {}
func (*OfficialInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_member_5694f4417bfa5a12, []int{3}
}
func (m *OfficialInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OfficialInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OfficialInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *OfficialInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OfficialInfo.Merge(dst, src)
}
func (m *OfficialInfo) XXX_Size() int {
	return m.Size()
}
func (m *OfficialInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_OfficialInfo.DiscardUnknown(m)
}

var xxx_messageInfo_OfficialInfo proto.InternalMessageInfo

func (m *OfficialInfo) GetType() int8 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *OfficialInfo) GetDesc() string {
	if m != nil {
		return m.Desc
	}
	return ""
}

type BaseInfo struct {
	Mid                  int64                       `protobuf:"varint,1,opt,name=Mid,proto3" json:"mid"`
	Name                 string                      `protobuf:"bytes,2,opt,name=Name,proto3" json:"name"`
	Sex                  int64                       `protobuf:"varint,3,opt,name=Sex,proto3" json:"sex"`
	Face                 string                      `protobuf:"bytes,4,opt,name=Face,proto3" json:"face"`
	Sign                 string                      `protobuf:"bytes,5,opt,name=Sign,proto3" json:"sign"`
	Rank                 int64                       `protobuf:"varint,8,opt,name=Rank,proto3" json:"rank"`
	Birthday             go_common_library_time.Time `protobuf:"varint,9,opt,name=Birthday,proto3,casttype=go-common/library/time.Time" json:"birthday"`
	CTime                go_common_library_time.Time `protobuf:"varint,10,opt,name=CTime,proto3,casttype=go-common/library/time.Time" json:"ctime"`
	MTime                go_common_library_time.Time `protobuf:"varint,11,opt,name=MTime,proto3,casttype=go-common/library/time.Time" json:"mtime"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_unrecognized     []byte                      `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *BaseInfo) Reset()         { *m = BaseInfo{} }
func (m *BaseInfo) String() string { return proto.CompactTextString(m) }
func (*BaseInfo) ProtoMessage()    {}
func (*BaseInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_member_5694f4417bfa5a12, []int{4}
}
func (m *BaseInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BaseInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BaseInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *BaseInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BaseInfo.Merge(dst, src)
}
func (m *BaseInfo) XXX_Size() int {
	return m.Size()
}
func (m *BaseInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_BaseInfo.DiscardUnknown(m)
}

var xxx_messageInfo_BaseInfo proto.InternalMessageInfo

func (m *BaseInfo) GetMid() int64 {
	if m != nil {
		return m.Mid
	}
	return 0
}

func (m *BaseInfo) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *BaseInfo) GetSex() int64 {
	if m != nil {
		return m.Sex
	}
	return 0
}

func (m *BaseInfo) GetFace() string {
	if m != nil {
		return m.Face
	}
	return ""
}

func (m *BaseInfo) GetSign() string {
	if m != nil {
		return m.Sign
	}
	return ""
}

func (m *BaseInfo) GetRank() int64 {
	if m != nil {
		return m.Rank
	}
	return 0
}

func (m *BaseInfo) GetBirthday() go_common_library_time.Time {
	if m != nil {
		return m.Birthday
	}
	return 0
}

func (m *BaseInfo) GetCTime() go_common_library_time.Time {
	if m != nil {
		return m.CTime
	}
	return 0
}

func (m *BaseInfo) GetMTime() go_common_library_time.Time {
	if m != nil {
		return m.MTime
	}
	return 0
}

type Detail struct {
	Mid                  int64                       `protobuf:"varint,1,opt,name=Mid,proto3" json:"mid"`
	Birthday             go_common_library_time.Time `protobuf:"varint,2,opt,name=Birthday,proto3,casttype=go-common/library/time.Time" json:"birthday"`
	Place                int64                       `protobuf:"varint,3,opt,name=Place,proto3" json:"place"`
	Marital              int64                       `protobuf:"varint,4,opt,name=Marital,proto3" json:"marital"`
	Dating               int64                       `protobuf:"varint,5,opt,name=Dating,proto3" json:"dating"`
	Tags                 string                      `protobuf:"bytes,6,opt,name=Tags,proto3" json:"tags"`
	CTime                go_common_library_time.Time `protobuf:"varint,7,opt,name=CTime,proto3,casttype=go-common/library/time.Time" json:"ctime"`
	MTime                go_common_library_time.Time `protobuf:"varint,8,opt,name=MTime,proto3,casttype=go-common/library/time.Time" json:"mtime"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_unrecognized     []byte                      `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *Detail) Reset()         { *m = Detail{} }
func (m *Detail) String() string { return proto.CompactTextString(m) }
func (*Detail) ProtoMessage()    {}
func (*Detail) Descriptor() ([]byte, []int) {
	return fileDescriptor_member_5694f4417bfa5a12, []int{5}
}
func (m *Detail) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Detail) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Detail.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Detail) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Detail.Merge(dst, src)
}
func (m *Detail) XXX_Size() int {
	return m.Size()
}
func (m *Detail) XXX_DiscardUnknown() {
	xxx_messageInfo_Detail.DiscardUnknown(m)
}

var xxx_messageInfo_Detail proto.InternalMessageInfo

func (m *Detail) GetMid() int64 {
	if m != nil {
		return m.Mid
	}
	return 0
}

func (m *Detail) GetBirthday() go_common_library_time.Time {
	if m != nil {
		return m.Birthday
	}
	return 0
}

func (m *Detail) GetPlace() int64 {
	if m != nil {
		return m.Place
	}
	return 0
}

func (m *Detail) GetMarital() int64 {
	if m != nil {
		return m.Marital
	}
	return 0
}

func (m *Detail) GetDating() int64 {
	if m != nil {
		return m.Dating
	}
	return 0
}

func (m *Detail) GetTags() string {
	if m != nil {
		return m.Tags
	}
	return ""
}

func (m *Detail) GetCTime() go_common_library_time.Time {
	if m != nil {
		return m.CTime
	}
	return 0
}

func (m *Detail) GetMTime() go_common_library_time.Time {
	if m != nil {
		return m.MTime
	}
	return 0
}

func init() {
	proto.RegisterType((*LevelInfo)(nil), "model.LevelInfo")
	proto.RegisterType((*PendantInfo)(nil), "model.PendantInfo")
	proto.RegisterType((*NameplateInfo)(nil), "model.NameplateInfo")
	proto.RegisterType((*OfficialInfo)(nil), "model.OfficialInfo")
	proto.RegisterType((*BaseInfo)(nil), "model.BaseInfo")
	proto.RegisterType((*Detail)(nil), "model.Detail")
}
func (m *LevelInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LevelInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Cur != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMember(dAtA, i, uint64(m.Cur))
	}
	if m.Min != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintMember(dAtA, i, uint64(m.Min))
	}
	if m.NowExp != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintMember(dAtA, i, uint64(m.NowExp))
	}
	if m.NextExp != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintMember(dAtA, i, uint64(m.NextExp))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *PendantInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PendantInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Pid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMember(dAtA, i, uint64(m.Pid))
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMember(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.Image) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintMember(dAtA, i, uint64(len(m.Image)))
		i += copy(dAtA[i:], m.Image)
	}
	if m.Expire != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintMember(dAtA, i, uint64(m.Expire))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *NameplateInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NameplateInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Nid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMember(dAtA, i, uint64(m.Nid))
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMember(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.Image) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintMember(dAtA, i, uint64(len(m.Image)))
		i += copy(dAtA[i:], m.Image)
	}
	if len(m.ImageSmall) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintMember(dAtA, i, uint64(len(m.ImageSmall)))
		i += copy(dAtA[i:], m.ImageSmall)
	}
	if len(m.Level) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintMember(dAtA, i, uint64(len(m.Level)))
		i += copy(dAtA[i:], m.Level)
	}
	if len(m.Condition) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintMember(dAtA, i, uint64(len(m.Condition)))
		i += copy(dAtA[i:], m.Condition)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *OfficialInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OfficialInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Type != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintMember(dAtA, i, uint64(m.Type))
	}
	if len(m.Desc) > 0 {
		dAtA[i] = 0x42
		i++
		i = encodeVarintMember(dAtA, i, uint64(len(m.Desc)))
		i += copy(dAtA[i:], m.Desc)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *BaseInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BaseInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Mid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMember(dAtA, i, uint64(m.Mid))
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMember(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if m.Sex != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintMember(dAtA, i, uint64(m.Sex))
	}
	if len(m.Face) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintMember(dAtA, i, uint64(len(m.Face)))
		i += copy(dAtA[i:], m.Face)
	}
	if len(m.Sign) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintMember(dAtA, i, uint64(len(m.Sign)))
		i += copy(dAtA[i:], m.Sign)
	}
	if m.Rank != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintMember(dAtA, i, uint64(m.Rank))
	}
	if m.Birthday != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintMember(dAtA, i, uint64(m.Birthday))
	}
	if m.CTime != 0 {
		dAtA[i] = 0x50
		i++
		i = encodeVarintMember(dAtA, i, uint64(m.CTime))
	}
	if m.MTime != 0 {
		dAtA[i] = 0x58
		i++
		i = encodeVarintMember(dAtA, i, uint64(m.MTime))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Detail) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Detail) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Mid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMember(dAtA, i, uint64(m.Mid))
	}
	if m.Birthday != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintMember(dAtA, i, uint64(m.Birthday))
	}
	if m.Place != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintMember(dAtA, i, uint64(m.Place))
	}
	if m.Marital != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintMember(dAtA, i, uint64(m.Marital))
	}
	if m.Dating != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintMember(dAtA, i, uint64(m.Dating))
	}
	if len(m.Tags) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintMember(dAtA, i, uint64(len(m.Tags)))
		i += copy(dAtA[i:], m.Tags)
	}
	if m.CTime != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintMember(dAtA, i, uint64(m.CTime))
	}
	if m.MTime != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintMember(dAtA, i, uint64(m.MTime))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintMember(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *LevelInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Cur != 0 {
		n += 1 + sovMember(uint64(m.Cur))
	}
	if m.Min != 0 {
		n += 1 + sovMember(uint64(m.Min))
	}
	if m.NowExp != 0 {
		n += 1 + sovMember(uint64(m.NowExp))
	}
	if m.NextExp != 0 {
		n += 1 + sovMember(uint64(m.NextExp))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PendantInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pid != 0 {
		n += 1 + sovMember(uint64(m.Pid))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovMember(uint64(l))
	}
	l = len(m.Image)
	if l > 0 {
		n += 1 + l + sovMember(uint64(l))
	}
	if m.Expire != 0 {
		n += 1 + sovMember(uint64(m.Expire))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *NameplateInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Nid != 0 {
		n += 1 + sovMember(uint64(m.Nid))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovMember(uint64(l))
	}
	l = len(m.Image)
	if l > 0 {
		n += 1 + l + sovMember(uint64(l))
	}
	l = len(m.ImageSmall)
	if l > 0 {
		n += 1 + l + sovMember(uint64(l))
	}
	l = len(m.Level)
	if l > 0 {
		n += 1 + l + sovMember(uint64(l))
	}
	l = len(m.Condition)
	if l > 0 {
		n += 1 + l + sovMember(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *OfficialInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovMember(uint64(m.Type))
	}
	l = len(m.Desc)
	if l > 0 {
		n += 1 + l + sovMember(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *BaseInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Mid != 0 {
		n += 1 + sovMember(uint64(m.Mid))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovMember(uint64(l))
	}
	if m.Sex != 0 {
		n += 1 + sovMember(uint64(m.Sex))
	}
	l = len(m.Face)
	if l > 0 {
		n += 1 + l + sovMember(uint64(l))
	}
	l = len(m.Sign)
	if l > 0 {
		n += 1 + l + sovMember(uint64(l))
	}
	if m.Rank != 0 {
		n += 1 + sovMember(uint64(m.Rank))
	}
	if m.Birthday != 0 {
		n += 1 + sovMember(uint64(m.Birthday))
	}
	if m.CTime != 0 {
		n += 1 + sovMember(uint64(m.CTime))
	}
	if m.MTime != 0 {
		n += 1 + sovMember(uint64(m.MTime))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Detail) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Mid != 0 {
		n += 1 + sovMember(uint64(m.Mid))
	}
	if m.Birthday != 0 {
		n += 1 + sovMember(uint64(m.Birthday))
	}
	if m.Place != 0 {
		n += 1 + sovMember(uint64(m.Place))
	}
	if m.Marital != 0 {
		n += 1 + sovMember(uint64(m.Marital))
	}
	if m.Dating != 0 {
		n += 1 + sovMember(uint64(m.Dating))
	}
	l = len(m.Tags)
	if l > 0 {
		n += 1 + l + sovMember(uint64(l))
	}
	if m.CTime != 0 {
		n += 1 + sovMember(uint64(m.CTime))
	}
	if m.MTime != 0 {
		n += 1 + sovMember(uint64(m.MTime))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovMember(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozMember(x uint64) (n int) {
	return sovMember(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *LevelInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMember
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LevelInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LevelInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cur", wireType)
			}
			m.Cur = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMember
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Cur |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Min", wireType)
			}
			m.Min = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMember
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Min |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NowExp", wireType)
			}
			m.NowExp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMember
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NowExp |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextExp", wireType)
			}
			m.NextExp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMember
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NextExp |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMember(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMember
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PendantInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMember
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PendantInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PendantInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pid", wireType)
			}
			m.Pid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMember
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Pid |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMember
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMember
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Image", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMember
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMember
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Image = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Expire", wireType)
			}
			m.Expire = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMember
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Expire |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMember(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMember
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NameplateInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMember
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NameplateInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NameplateInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nid", wireType)
			}
			m.Nid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMember
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Nid |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMember
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMember
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Image", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMember
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMember
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Image = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ImageSmall", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMember
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMember
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ImageSmall = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMember
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMember
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Level = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Condition", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMember
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMember
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Condition = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMember(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMember
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OfficialInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMember
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OfficialInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OfficialInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMember
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (int8(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Desc", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMember
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMember
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Desc = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMember(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMember
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BaseInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMember
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BaseInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BaseInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMember
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMember
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMember
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sex", wireType)
			}
			m.Sex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMember
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sex |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Face", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMember
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMember
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Face = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sign", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMember
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMember
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sign = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rank", wireType)
			}
			m.Rank = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMember
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Rank |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Birthday", wireType)
			}
			m.Birthday = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMember
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Birthday |= (go_common_library_time.Time(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CTime", wireType)
			}
			m.CTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMember
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CTime |= (go_common_library_time.Time(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MTime", wireType)
			}
			m.MTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMember
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MTime |= (go_common_library_time.Time(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMember(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMember
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Detail) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMember
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Detail: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Detail: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMember
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Birthday", wireType)
			}
			m.Birthday = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMember
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Birthday |= (go_common_library_time.Time(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Place", wireType)
			}
			m.Place = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMember
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Place |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Marital", wireType)
			}
			m.Marital = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMember
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Marital |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dating", wireType)
			}
			m.Dating = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMember
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Dating |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tags", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMember
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMember
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tags = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CTime", wireType)
			}
			m.CTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMember
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CTime |= (go_common_library_time.Time(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MTime", wireType)
			}
			m.MTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMember
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MTime |= (go_common_library_time.Time(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMember(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMember
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMember(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMember
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMember
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMember
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthMember
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowMember
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipMember(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthMember = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMember   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("app/job/main/member/model/member.proto", fileDescriptor_member_5694f4417bfa5a12)
}

var fileDescriptor_member_5694f4417bfa5a12 = []byte{
	// 719 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x54, 0xbd, 0x6e, 0xd4, 0x4c,
	0x14, 0x95, 0xe3, 0xfd, 0xf3, 0x6c, 0xf2, 0x7d, 0x60, 0x09, 0xc9, 0x01, 0x14, 0x87, 0x05, 0xa2,
	0xa0, 0x90, 0x58, 0x88, 0x86, 0x8a, 0xc2, 0x49, 0x40, 0x91, 0xc8, 0x12, 0x4d, 0xd2, 0x47, 0xb3,
	0xf6, 0xac, 0x33, 0xc4, 0x33, 0x63, 0xd9, 0xb3, 0xb0, 0x5b, 0xf2, 0x18, 0xbc, 0x04, 0xcf, 0x41,
	0xc9, 0x13, 0x58, 0x28, 0xa5, 0x1b, 0x3a, 0x8a, 0x54, 0xe8, 0x5e, 0x7b, 0xd9, 0xd0, 0x10, 0x44,
	0x3a, 0xfb, 0xfc, 0xcc, 0x9e, 0x39, 0xf7, 0x7a, 0xc9, 0x06, 0xcb, 0xb2, 0xe0, 0x9d, 0x1e, 0x05,
	0x92, 0x09, 0x15, 0x48, 0x2e, 0x47, 0x3c, 0x0f, 0xa4, 0x8e, 0x79, 0xda, 0xbc, 0xec, 0x64, 0xb9,
	0x36, 0xda, 0x6d, 0x23, 0x76, 0x77, 0x3b, 0x11, 0xe6, 0x6c, 0x32, 0xda, 0x89, 0xb4, 0x0c, 0x12,
	0x9d, 0xe8, 0x00, 0xd9, 0xd1, 0x64, 0x8c, 0x6f, 0xf8, 0x82, 0x4f, 0xb5, 0x6b, 0xf0, 0xd9, 0x22,
	0xce, 0x1b, 0xfe, 0x9e, 0xa7, 0x07, 0x6a, 0xac, 0xdd, 0x87, 0xc4, 0xde, 0x9d, 0xe4, 0x9e, 0xb5,
	0x6e, 0x6d, 0xb6, 0xc3, 0xdb, 0x55, 0xe9, 0xaf, 0x44, 0x93, 0x3c, 0xe7, 0xca, 0x9c, 0xa6, 0xa0,
	0xa1, 0xc0, 0xba, 0x0f, 0x88, 0x7d, 0x28, 0x94, 0xb7, 0x84, 0xa2, 0xff, 0xab, 0xd2, 0xef, 0xcf,
	0x45, 0x52, 0x28, 0x0a, 0x9c, 0xfb, 0x8c, 0x74, 0x86, 0xfa, 0xc3, 0xfe, 0x34, 0xf3, 0x6c, 0x54,
	0xad, 0x56, 0xa5, 0x7f, 0x67, 0xae, 0xe2, 0xd3, 0xec, 0xa9, 0x96, 0xc2, 0x70, 0x99, 0x99, 0x19,
	0x6d, 0x84, 0xee, 0x06, 0xe9, 0x0e, 0xf9, 0xd4, 0x80, 0xa7, 0x85, 0x9e, 0xe5, 0xaa, 0xf4, 0x7b,
	0x8a, 0x4f, 0xd1, 0x40, 0xe7, 0xe4, 0xe0, 0x93, 0x45, 0xfa, 0x47, 0x5c, 0xc5, 0x4c, 0x19, 0x8c,
	0xbc, 0x4e, 0xec, 0x23, 0x11, 0x37, 0x91, 0xff, 0xab, 0x4a, 0xdf, 0xce, 0x44, 0x7c, 0x59, 0xfa,
	0xb6, 0x50, 0x86, 0x02, 0xe5, 0xde, 0x27, 0xad, 0x21, 0x93, 0x1c, 0x03, 0x3b, 0x61, 0xaf, 0x2a,
	0xfd, 0x96, 0x62, 0x92, 0x53, 0x44, 0x5d, 0x9f, 0xb4, 0x0f, 0x24, 0x4b, 0x38, 0x26, 0x75, 0x42,
	0xa7, 0x2a, 0xfd, 0xb6, 0x00, 0x80, 0xd6, 0xb8, 0xfb, 0x84, 0x74, 0xf6, 0xa7, 0x99, 0xc8, 0x39,
	0xe6, 0xb2, 0xb1, 0x96, 0x0e, 0x47, 0x64, 0xfe, 0x33, 0x8d, 0x60, 0xf0, 0xdd, 0x22, 0x2b, 0x70,
	0x68, 0x96, 0x32, 0xc3, 0xe7, 0xe9, 0x86, 0xbf, 0xa7, 0x53, 0x57, 0xd2, 0x0d, 0x6f, 0x9e, 0x2e,
	0x20, 0x04, 0x1f, 0x8e, 0x25, 0x4b, 0x53, 0x4c, 0xe8, 0xd4, 0x33, 0x41, 0xd5, 0x69, 0x01, 0x30,
	0xbd, 0x22, 0x81, 0x13, 0x71, 0xde, 0x5e, 0x7b, 0x71, 0x62, 0x3d, 0xdc, 0x1a, 0x77, 0xb7, 0x88,
	0xb3, 0xab, 0x55, 0x2c, 0x8c, 0xd0, 0xca, 0xeb, 0xa0, 0x68, 0xa5, 0x2a, 0x7d, 0x27, 0x9a, 0x83,
	0x74, 0xc1, 0x0f, 0x28, 0x59, 0x7e, 0x3b, 0x1e, 0x8b, 0x48, 0xb0, 0x7a, 0x81, 0x1e, 0x91, 0xd6,
	0xc9, 0x2c, 0xe3, 0x5e, 0x17, 0x2f, 0x7c, 0x0b, 0x6e, 0x63, 0x66, 0x19, 0x14, 0xd5, 0x12, 0xca,
	0xbc, 0xa0, 0xc8, 0xc2, 0x9d, 0xf7, 0x78, 0x11, 0x79, 0xbd, 0xc5, 0x9d, 0x63, 0x5e, 0x44, 0x14,
	0xd1, 0xc1, 0x47, 0x9b, 0xf4, 0x42, 0x56, 0xd4, 0x05, 0xae, 0xc2, 0xb2, 0xd5, 0x05, 0xda, 0x61,
	0x17, 0x0a, 0x94, 0x22, 0x86, 0x25, 0xbb, 0xae, 0xb9, 0x55, 0x62, 0x1f, 0xf3, 0x29, 0xf6, 0xd6,
	0x18, 0x0b, 0x3e, 0xa5, 0x80, 0x81, 0xf1, 0x15, 0x8b, 0x78, 0xd3, 0x16, 0x1a, 0xc7, 0x2c, 0xe2,
	0x14, 0x51, 0x60, 0x8f, 0x45, 0xa2, 0x9a, 0x7e, 0x90, 0x2d, 0x44, 0xa2, 0x28, 0xa2, 0xc0, 0x52,
	0xa6, 0xce, 0x31, 0xba, 0x5d, 0xb3, 0x39, 0x53, 0xe7, 0x14, 0x51, 0xf7, 0x35, 0xe9, 0x85, 0x22,
	0x37, 0x67, 0x31, 0x9b, 0x79, 0x0e, 0x2a, 0xb6, 0x60, 0x8b, 0x47, 0x0d, 0x76, 0x59, 0xfa, 0xf7,
	0x12, 0xbd, 0x1d, 0x69, 0x29, 0xb5, 0x0a, 0x52, 0x31, 0xca, 0x59, 0x3e, 0x0b, 0x8c, 0x90, 0x7c,
	0xe7, 0x44, 0x48, 0x4e, 0x7f, 0x99, 0xdd, 0x97, 0xa4, 0xbd, 0x0b, 0x90, 0x47, 0xf0, 0x94, 0x4d,
	0x98, 0x52, 0x04, 0xc2, 0xeb, 0x8e, 0xa8, 0x6d, 0xe0, 0x3f, 0x44, 0x7f, 0x7f, 0xe1, 0x97, 0x7f,
	0xe5, 0x47, 0xdb, 0xe0, 0xc7, 0x12, 0xe9, 0xec, 0x71, 0xc3, 0x44, 0xfa, 0xa7, 0x09, 0x5c, 0xbd,
	0xee, 0xd2, 0x4d, 0xae, 0xeb, 0x93, 0xf6, 0x51, 0x0a, 0x23, 0xa9, 0xc7, 0x85, 0x4b, 0x99, 0x01,
	0x40, 0x6b, 0xdc, 0x7d, 0x4c, 0xba, 0x87, 0x2c, 0x17, 0x86, 0xa5, 0xcd, 0x57, 0xd8, 0xaf, 0x4a,
	0xbf, 0x2b, 0x6b, 0x88, 0xce, 0x39, 0x77, 0x40, 0x3a, 0x7b, 0xcc, 0x08, 0x95, 0xe0, 0xf4, 0xec,
	0x90, 0xc0, 0xb7, 0x1a, 0x23, 0x42, 0x1b, 0x06, 0x26, 0x78, 0xc2, 0x92, 0xa2, 0x59, 0x6d, 0x9c,
	0xa0, 0x61, 0x49, 0x41, 0x11, 0x5d, 0x14, 0xdf, 0xbd, 0x61, 0xf1, 0xbd, 0x7f, 0x2a, 0x3e, 0x5c,
	0xfe, 0x72, 0xb1, 0x66, 0x7d, 0xbd, 0x58, 0xb3, 0xbe, 0x5d, 0xac, 0x59, 0xa3, 0x0e, 0xfe, 0x49,
	0x3f, 0xff, 0x19, 0x00, 0x00, 0xff, 0xff, 0xfa, 0xbb, 0x22, 0xdd, 0x04, 0x06, 0x00, 0x00,
}
