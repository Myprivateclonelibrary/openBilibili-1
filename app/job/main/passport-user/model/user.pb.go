// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: user.proto

/*
	Package model is a generated protocol buffer package.

	It is generated from these files:
		user.proto

	It has these top-level messages:
		UserBaseProto
		UserEmailProto
		UserTelProto
		UserRegOriginProto
		UserSafeQuestionProto
		UserThirdBindProto
*/
package model

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type UserBaseProto struct {
	Mid    int64  `protobuf:"varint,1,opt,name=Mid,proto3" json:"mid"`
	UserID string `protobuf:"bytes,2,opt,name=UserID,proto3" json:"userid"`
	Pwd    []byte `protobuf:"bytes,3,opt,name=Pwd,proto3" json:"pwd"`
	Salt   string `protobuf:"bytes,4,opt,name=Salt,proto3" json:"salt"`
	Status int32  `protobuf:"varint,5,opt,name=Status,proto3" json:"status"`
}

func (m *UserBaseProto) Reset()                    { *m = UserBaseProto{} }
func (m *UserBaseProto) String() string            { return proto.CompactTextString(m) }
func (*UserBaseProto) ProtoMessage()               {}
func (*UserBaseProto) Descriptor() ([]byte, []int) { return fileDescriptorUser, []int{0} }

func (m *UserBaseProto) GetMid() int64 {
	if m != nil {
		return m.Mid
	}
	return 0
}

func (m *UserBaseProto) GetUserID() string {
	if m != nil {
		return m.UserID
	}
	return ""
}

func (m *UserBaseProto) GetPwd() []byte {
	if m != nil {
		return m.Pwd
	}
	return nil
}

func (m *UserBaseProto) GetSalt() string {
	if m != nil {
		return m.Salt
	}
	return ""
}

func (m *UserBaseProto) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

type UserEmailProto struct {
	Mid           int64  `protobuf:"varint,1,opt,name=Mid,proto3" json:"mid"`
	Email         []byte `protobuf:"bytes,2,opt,name=Email,proto3" json:"email"`
	Verified      int32  `protobuf:"varint,3,opt,name=Verified,proto3" json:"verified"`
	EmailBindTime int64  `protobuf:"varint,4,opt,name=EmailBindTime,proto3" json:"email_bind_time"`
}

func (m *UserEmailProto) Reset()                    { *m = UserEmailProto{} }
func (m *UserEmailProto) String() string            { return proto.CompactTextString(m) }
func (*UserEmailProto) ProtoMessage()               {}
func (*UserEmailProto) Descriptor() ([]byte, []int) { return fileDescriptorUser, []int{1} }

func (m *UserEmailProto) GetMid() int64 {
	if m != nil {
		return m.Mid
	}
	return 0
}

func (m *UserEmailProto) GetEmail() []byte {
	if m != nil {
		return m.Email
	}
	return nil
}

func (m *UserEmailProto) GetVerified() int32 {
	if m != nil {
		return m.Verified
	}
	return 0
}

func (m *UserEmailProto) GetEmailBindTime() int64 {
	if m != nil {
		return m.EmailBindTime
	}
	return 0
}

type UserTelProto struct {
	Mid         int64  `protobuf:"varint,1,opt,name=Mid,proto3" json:"mid"`
	Tel         []byte `protobuf:"bytes,2,opt,name=Tel,proto3" json:"tel"`
	Cid         string `protobuf:"bytes,3,opt,name=Cid,proto3" json:"cid"`
	TelBindTime int64  `protobuf:"varint,4,opt,name=TelBindTime,proto3" json:"tel_bind_time"`
}

func (m *UserTelProto) Reset()                    { *m = UserTelProto{} }
func (m *UserTelProto) String() string            { return proto.CompactTextString(m) }
func (*UserTelProto) ProtoMessage()               {}
func (*UserTelProto) Descriptor() ([]byte, []int) { return fileDescriptorUser, []int{2} }

func (m *UserTelProto) GetMid() int64 {
	if m != nil {
		return m.Mid
	}
	return 0
}

func (m *UserTelProto) GetTel() []byte {
	if m != nil {
		return m.Tel
	}
	return nil
}

func (m *UserTelProto) GetCid() string {
	if m != nil {
		return m.Cid
	}
	return ""
}

func (m *UserTelProto) GetTelBindTime() int64 {
	if m != nil {
		return m.TelBindTime
	}
	return 0
}

type UserRegOriginProto struct {
	Mid      int64  `protobuf:"varint,1,opt,name=Mid,proto3" json:"mid"`
	JoinIP   int64  `protobuf:"varint,2,opt,name=JoinIP,proto3" json:"join_ip"`
	JoinIPV6 []byte `protobuf:"bytes,3,opt,name=JoinIPV6,proto3" json:"join_ip_v6"`
	Port     int32  `protobuf:"varint,4,opt,name=port,proto3" json:"port"`
	JoinTime int64  `protobuf:"varint,5,opt,name=JoinTime,proto3" json:"join_time"`
	Origin   int32  `protobuf:"varint,6,opt,name=Origin,proto3" json:"origin"`
	RegType  int32  `protobuf:"varint,7,opt,name=RegType,proto3" json:"reg_type"`
	AppID    int64  `protobuf:"varint,8,opt,name=AppID,proto3" json:"appid"`
}

func (m *UserRegOriginProto) Reset()                    { *m = UserRegOriginProto{} }
func (m *UserRegOriginProto) String() string            { return proto.CompactTextString(m) }
func (*UserRegOriginProto) ProtoMessage()               {}
func (*UserRegOriginProto) Descriptor() ([]byte, []int) { return fileDescriptorUser, []int{3} }

func (m *UserRegOriginProto) GetMid() int64 {
	if m != nil {
		return m.Mid
	}
	return 0
}

func (m *UserRegOriginProto) GetJoinIP() int64 {
	if m != nil {
		return m.JoinIP
	}
	return 0
}

func (m *UserRegOriginProto) GetJoinIPV6() []byte {
	if m != nil {
		return m.JoinIPV6
	}
	return nil
}

func (m *UserRegOriginProto) GetPort() int32 {
	if m != nil {
		return m.Port
	}
	return 0
}

func (m *UserRegOriginProto) GetJoinTime() int64 {
	if m != nil {
		return m.JoinTime
	}
	return 0
}

func (m *UserRegOriginProto) GetOrigin() int32 {
	if m != nil {
		return m.Origin
	}
	return 0
}

func (m *UserRegOriginProto) GetRegType() int32 {
	if m != nil {
		return m.RegType
	}
	return 0
}

func (m *UserRegOriginProto) GetAppID() int64 {
	if m != nil {
		return m.AppID
	}
	return 0
}

type UserSafeQuestionProto struct {
	Mid          int64  `protobuf:"varint,1,opt,name=Mid,proto3" json:"mid"`
	SafeQuestion int32  `protobuf:"varint,2,opt,name=SafeQuestion,proto3" json:"safe_question"`
	SafeAnswer   []byte `protobuf:"bytes,3,opt,name=SafeAnswer,proto3" json:"safe_answer"`
	SafeBindTime int64  `protobuf:"varint,4,opt,name=SafeBindTime,proto3" json:"safe_bind_time"`
}

func (m *UserSafeQuestionProto) Reset()                    { *m = UserSafeQuestionProto{} }
func (m *UserSafeQuestionProto) String() string            { return proto.CompactTextString(m) }
func (*UserSafeQuestionProto) ProtoMessage()               {}
func (*UserSafeQuestionProto) Descriptor() ([]byte, []int) { return fileDescriptorUser, []int{4} }

func (m *UserSafeQuestionProto) GetMid() int64 {
	if m != nil {
		return m.Mid
	}
	return 0
}

func (m *UserSafeQuestionProto) GetSafeQuestion() int32 {
	if m != nil {
		return m.SafeQuestion
	}
	return 0
}

func (m *UserSafeQuestionProto) GetSafeAnswer() []byte {
	if m != nil {
		return m.SafeAnswer
	}
	return nil
}

func (m *UserSafeQuestionProto) GetSafeBindTime() int64 {
	if m != nil {
		return m.SafeBindTime
	}
	return 0
}

type UserThirdBindProto struct {
	ID       int64  `protobuf:"varint,1,opt,name=ID,proto3" json:"id"`
	Mid      int64  `protobuf:"varint,2,opt,name=Mid,proto3" json:"mid"`
	OpenID   string `protobuf:"bytes,3,opt,name=OpenID,proto3" json:"openid"`
	PlatForm int64  `protobuf:"varint,4,opt,name=PlatForm,proto3" json:"platform"`
	Token    string `protobuf:"bytes,5,opt,name=Token,proto3" json:"token"`
	Expires  int64  `protobuf:"varint,6,opt,name=Expires,proto3" json:"expires"`
}

func (m *UserThirdBindProto) Reset()                    { *m = UserThirdBindProto{} }
func (m *UserThirdBindProto) String() string            { return proto.CompactTextString(m) }
func (*UserThirdBindProto) ProtoMessage()               {}
func (*UserThirdBindProto) Descriptor() ([]byte, []int) { return fileDescriptorUser, []int{5} }

func (m *UserThirdBindProto) GetID() int64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *UserThirdBindProto) GetMid() int64 {
	if m != nil {
		return m.Mid
	}
	return 0
}

func (m *UserThirdBindProto) GetOpenID() string {
	if m != nil {
		return m.OpenID
	}
	return ""
}

func (m *UserThirdBindProto) GetPlatForm() int64 {
	if m != nil {
		return m.PlatForm
	}
	return 0
}

func (m *UserThirdBindProto) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *UserThirdBindProto) GetExpires() int64 {
	if m != nil {
		return m.Expires
	}
	return 0
}

func init() {
	proto.RegisterType((*UserBaseProto)(nil), "passport.job.user.UserBaseProto")
	proto.RegisterType((*UserEmailProto)(nil), "passport.job.user.UserEmailProto")
	proto.RegisterType((*UserTelProto)(nil), "passport.job.user.UserTelProto")
	proto.RegisterType((*UserRegOriginProto)(nil), "passport.job.user.UserRegOriginProto")
	proto.RegisterType((*UserSafeQuestionProto)(nil), "passport.job.user.UserSafeQuestionProto")
	proto.RegisterType((*UserThirdBindProto)(nil), "passport.job.user.UserThirdBindProto")
}
func (m *UserBaseProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserBaseProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Mid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintUser(dAtA, i, uint64(m.Mid))
	}
	if len(m.UserID) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintUser(dAtA, i, uint64(len(m.UserID)))
		i += copy(dAtA[i:], m.UserID)
	}
	if len(m.Pwd) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintUser(dAtA, i, uint64(len(m.Pwd)))
		i += copy(dAtA[i:], m.Pwd)
	}
	if len(m.Salt) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintUser(dAtA, i, uint64(len(m.Salt)))
		i += copy(dAtA[i:], m.Salt)
	}
	if m.Status != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintUser(dAtA, i, uint64(m.Status))
	}
	return i, nil
}

func (m *UserEmailProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserEmailProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Mid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintUser(dAtA, i, uint64(m.Mid))
	}
	if len(m.Email) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintUser(dAtA, i, uint64(len(m.Email)))
		i += copy(dAtA[i:], m.Email)
	}
	if m.Verified != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintUser(dAtA, i, uint64(m.Verified))
	}
	if m.EmailBindTime != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintUser(dAtA, i, uint64(m.EmailBindTime))
	}
	return i, nil
}

func (m *UserTelProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserTelProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Mid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintUser(dAtA, i, uint64(m.Mid))
	}
	if len(m.Tel) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintUser(dAtA, i, uint64(len(m.Tel)))
		i += copy(dAtA[i:], m.Tel)
	}
	if len(m.Cid) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintUser(dAtA, i, uint64(len(m.Cid)))
		i += copy(dAtA[i:], m.Cid)
	}
	if m.TelBindTime != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintUser(dAtA, i, uint64(m.TelBindTime))
	}
	return i, nil
}

func (m *UserRegOriginProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserRegOriginProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Mid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintUser(dAtA, i, uint64(m.Mid))
	}
	if m.JoinIP != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintUser(dAtA, i, uint64(m.JoinIP))
	}
	if len(m.JoinIPV6) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintUser(dAtA, i, uint64(len(m.JoinIPV6)))
		i += copy(dAtA[i:], m.JoinIPV6)
	}
	if m.Port != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintUser(dAtA, i, uint64(m.Port))
	}
	if m.JoinTime != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintUser(dAtA, i, uint64(m.JoinTime))
	}
	if m.Origin != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintUser(dAtA, i, uint64(m.Origin))
	}
	if m.RegType != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintUser(dAtA, i, uint64(m.RegType))
	}
	if m.AppID != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintUser(dAtA, i, uint64(m.AppID))
	}
	return i, nil
}

func (m *UserSafeQuestionProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserSafeQuestionProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Mid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintUser(dAtA, i, uint64(m.Mid))
	}
	if m.SafeQuestion != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintUser(dAtA, i, uint64(m.SafeQuestion))
	}
	if len(m.SafeAnswer) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintUser(dAtA, i, uint64(len(m.SafeAnswer)))
		i += copy(dAtA[i:], m.SafeAnswer)
	}
	if m.SafeBindTime != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintUser(dAtA, i, uint64(m.SafeBindTime))
	}
	return i, nil
}

func (m *UserThirdBindProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserThirdBindProto) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintUser(dAtA, i, uint64(m.ID))
	}
	if m.Mid != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintUser(dAtA, i, uint64(m.Mid))
	}
	if len(m.OpenID) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintUser(dAtA, i, uint64(len(m.OpenID)))
		i += copy(dAtA[i:], m.OpenID)
	}
	if m.PlatForm != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintUser(dAtA, i, uint64(m.PlatForm))
	}
	if len(m.Token) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintUser(dAtA, i, uint64(len(m.Token)))
		i += copy(dAtA[i:], m.Token)
	}
	if m.Expires != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintUser(dAtA, i, uint64(m.Expires))
	}
	return i, nil
}

func encodeVarintUser(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *UserBaseProto) Size() (n int) {
	var l int
	_ = l
	if m.Mid != 0 {
		n += 1 + sovUser(uint64(m.Mid))
	}
	l = len(m.UserID)
	if l > 0 {
		n += 1 + l + sovUser(uint64(l))
	}
	l = len(m.Pwd)
	if l > 0 {
		n += 1 + l + sovUser(uint64(l))
	}
	l = len(m.Salt)
	if l > 0 {
		n += 1 + l + sovUser(uint64(l))
	}
	if m.Status != 0 {
		n += 1 + sovUser(uint64(m.Status))
	}
	return n
}

func (m *UserEmailProto) Size() (n int) {
	var l int
	_ = l
	if m.Mid != 0 {
		n += 1 + sovUser(uint64(m.Mid))
	}
	l = len(m.Email)
	if l > 0 {
		n += 1 + l + sovUser(uint64(l))
	}
	if m.Verified != 0 {
		n += 1 + sovUser(uint64(m.Verified))
	}
	if m.EmailBindTime != 0 {
		n += 1 + sovUser(uint64(m.EmailBindTime))
	}
	return n
}

func (m *UserTelProto) Size() (n int) {
	var l int
	_ = l
	if m.Mid != 0 {
		n += 1 + sovUser(uint64(m.Mid))
	}
	l = len(m.Tel)
	if l > 0 {
		n += 1 + l + sovUser(uint64(l))
	}
	l = len(m.Cid)
	if l > 0 {
		n += 1 + l + sovUser(uint64(l))
	}
	if m.TelBindTime != 0 {
		n += 1 + sovUser(uint64(m.TelBindTime))
	}
	return n
}

func (m *UserRegOriginProto) Size() (n int) {
	var l int
	_ = l
	if m.Mid != 0 {
		n += 1 + sovUser(uint64(m.Mid))
	}
	if m.JoinIP != 0 {
		n += 1 + sovUser(uint64(m.JoinIP))
	}
	l = len(m.JoinIPV6)
	if l > 0 {
		n += 1 + l + sovUser(uint64(l))
	}
	if m.Port != 0 {
		n += 1 + sovUser(uint64(m.Port))
	}
	if m.JoinTime != 0 {
		n += 1 + sovUser(uint64(m.JoinTime))
	}
	if m.Origin != 0 {
		n += 1 + sovUser(uint64(m.Origin))
	}
	if m.RegType != 0 {
		n += 1 + sovUser(uint64(m.RegType))
	}
	if m.AppID != 0 {
		n += 1 + sovUser(uint64(m.AppID))
	}
	return n
}

func (m *UserSafeQuestionProto) Size() (n int) {
	var l int
	_ = l
	if m.Mid != 0 {
		n += 1 + sovUser(uint64(m.Mid))
	}
	if m.SafeQuestion != 0 {
		n += 1 + sovUser(uint64(m.SafeQuestion))
	}
	l = len(m.SafeAnswer)
	if l > 0 {
		n += 1 + l + sovUser(uint64(l))
	}
	if m.SafeBindTime != 0 {
		n += 1 + sovUser(uint64(m.SafeBindTime))
	}
	return n
}

func (m *UserThirdBindProto) Size() (n int) {
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovUser(uint64(m.ID))
	}
	if m.Mid != 0 {
		n += 1 + sovUser(uint64(m.Mid))
	}
	l = len(m.OpenID)
	if l > 0 {
		n += 1 + l + sovUser(uint64(l))
	}
	if m.PlatForm != 0 {
		n += 1 + sovUser(uint64(m.PlatForm))
	}
	l = len(m.Token)
	if l > 0 {
		n += 1 + l + sovUser(uint64(l))
	}
	if m.Expires != 0 {
		n += 1 + sovUser(uint64(m.Expires))
	}
	return n
}

func sovUser(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozUser(x uint64) (n int) {
	return sovUser(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *UserBaseProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserBaseProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserBaseProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pwd", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pwd = append(m.Pwd[:0], dAtA[iNdEx:postIndex]...)
			if m.Pwd == nil {
				m.Pwd = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Salt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Salt = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserEmailProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserEmailProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserEmailProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Email", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Email = append(m.Email[:0], dAtA[iNdEx:postIndex]...)
			if m.Email == nil {
				m.Email = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Verified", wireType)
			}
			m.Verified = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Verified |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EmailBindTime", wireType)
			}
			m.EmailBindTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EmailBindTime |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserTelProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserTelProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserTelProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tel", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tel = append(m.Tel[:0], dAtA[iNdEx:postIndex]...)
			if m.Tel == nil {
				m.Tel = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TelBindTime", wireType)
			}
			m.TelBindTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TelBindTime |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserRegOriginProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserRegOriginProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserRegOriginProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field JoinIP", wireType)
			}
			m.JoinIP = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.JoinIP |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JoinIPV6", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.JoinIPV6 = append(m.JoinIPV6[:0], dAtA[iNdEx:postIndex]...)
			if m.JoinIPV6 == nil {
				m.JoinIPV6 = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Port", wireType)
			}
			m.Port = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Port |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field JoinTime", wireType)
			}
			m.JoinTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.JoinTime |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Origin", wireType)
			}
			m.Origin = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Origin |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RegType", wireType)
			}
			m.RegType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RegType |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppID", wireType)
			}
			m.AppID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AppID |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserSafeQuestionProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserSafeQuestionProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserSafeQuestionProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SafeQuestion", wireType)
			}
			m.SafeQuestion = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SafeQuestion |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SafeAnswer", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SafeAnswer = append(m.SafeAnswer[:0], dAtA[iNdEx:postIndex]...)
			if m.SafeAnswer == nil {
				m.SafeAnswer = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SafeBindTime", wireType)
			}
			m.SafeBindTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SafeBindTime |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserThirdBindProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserThirdBindProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserThirdBindProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OpenID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OpenID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlatForm", wireType)
			}
			m.PlatForm = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PlatForm |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Expires", wireType)
			}
			m.Expires = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Expires |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipUser(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowUser
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowUser
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowUser
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthUser
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowUser
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipUser(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthUser = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowUser   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("user.proto", fileDescriptorUser) }

var fileDescriptorUser = []byte{
	// 717 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x54, 0xcd, 0x6e, 0xd3, 0x4c,
	0x14, 0xfd, 0x9c, 0xd4, 0xf9, 0x99, 0x26, 0xad, 0xea, 0x4f, 0x80, 0x8b, 0x50, 0x26, 0x0a, 0x02,
	0x05, 0x24, 0xd2, 0x45, 0x45, 0x25, 0x96, 0x75, 0x53, 0xa4, 0x20, 0xa1, 0x86, 0x69, 0xe8, 0x82,
	0x4d, 0xe4, 0xd4, 0x37, 0xe9, 0x94, 0xd8, 0x33, 0xd8, 0x93, 0x96, 0xbe, 0x07, 0x0b, 0xde, 0x81,
	0x15, 0x1b, 0x9e, 0x81, 0x25, 0x62, 0x8f, 0x85, 0xca, 0xce, 0x4f, 0x81, 0xe6, 0x8e, 0x9b, 0xa6,
	0x15, 0x52, 0x36, 0x51, 0xe6, 0x9c, 0xfb, 0x73, 0xee, 0xdc, 0xe3, 0x21, 0x64, 0x96, 0x40, 0xdc,
	0x91, 0xb1, 0x50, 0xc2, 0xd9, 0x90, 0x7e, 0x92, 0x48, 0x11, 0xab, 0xce, 0xa9, 0x18, 0x75, 0x34,
	0x71, 0xff, 0xd9, 0x84, 0xab, 0x93, 0xd9, 0xa8, 0x73, 0x2c, 0xc2, 0xad, 0x89, 0x98, 0x88, 0x2d,
	0x8c, 0x1c, 0xcd, 0xc6, 0x78, 0xc2, 0x03, 0xfe, 0x33, 0x15, 0x5a, 0x5f, 0x2c, 0x52, 0x7f, 0x9b,
	0x40, 0xec, 0xf9, 0x09, 0xf4, 0xb1, 0xe6, 0x26, 0x29, 0xbe, 0xe6, 0x81, 0x6b, 0x35, 0xad, 0x76,
	0xd1, 0x2b, 0x67, 0x29, 0x2d, 0x86, 0x3c, 0x60, 0x1a, 0x73, 0x5a, 0xa4, 0xa4, 0x63, 0x7b, 0x5d,
	0xb7, 0xd0, 0xb4, 0xda, 0x55, 0x8f, 0x64, 0x29, 0x2d, 0xe9, 0xae, 0x3c, 0x60, 0x39, 0xa3, 0xd3,
	0xfb, 0xe7, 0x81, 0x5b, 0x6c, 0x5a, 0xed, 0x9a, 0x49, 0x97, 0xe7, 0x01, 0xd3, 0x98, 0xf3, 0x80,
	0xac, 0x1c, 0xfa, 0x53, 0xe5, 0xae, 0x60, 0x72, 0x25, 0x4b, 0xe9, 0x4a, 0xe2, 0x4f, 0x15, 0x43,
	0x54, 0x17, 0x3f, 0x54, 0xbe, 0x9a, 0x25, 0xae, 0xdd, 0xb4, 0xda, 0xb6, 0x29, 0x9e, 0x20, 0xc2,
	0x72, 0xa6, 0xf5, 0xd5, 0x22, 0x6b, 0xba, 0xcf, 0x7e, 0xe8, 0xf3, 0xe9, 0x52, 0xb9, 0x94, 0xd8,
	0x18, 0x88, 0x6a, 0x6b, 0x5e, 0x35, 0x4b, 0xa9, 0x0d, 0x1a, 0x60, 0x06, 0x77, 0xda, 0xa4, 0x72,
	0x04, 0x31, 0x1f, 0x73, 0x30, 0x82, 0x6d, 0xaf, 0x96, 0xa5, 0xb4, 0x72, 0x96, 0x63, 0x6c, 0xce,
	0x3a, 0x2f, 0x48, 0x1d, 0x53, 0x3c, 0x1e, 0x05, 0x03, 0x1e, 0x02, 0xce, 0x50, 0xf4, 0xfe, 0xcf,
	0x52, 0xba, 0x8e, 0x25, 0x87, 0x23, 0x1e, 0x05, 0x43, 0xc5, 0x43, 0x60, 0x37, 0x23, 0x5b, 0x9f,
	0x2c, 0x52, 0xd3, 0x9a, 0x07, 0xb0, 0x5c, 0xf1, 0x26, 0x29, 0x0e, 0xe0, 0x4a, 0x2f, 0x52, 0x0a,
	0xa6, 0x4c, 0x63, 0x9a, 0xda, 0xe3, 0x46, 0x66, 0xd5, 0x50, 0xc7, 0x3a, 0x6b, 0x8f, 0x07, 0xce,
	0x36, 0x59, 0x1d, 0xc0, 0x6d, 0x69, 0x1b, 0x59, 0x4a, 0xeb, 0x0a, 0x16, 0x85, 0x2d, 0x46, 0xb5,
	0xbe, 0x15, 0x88, 0xa3, 0x65, 0x31, 0x98, 0x1c, 0xc4, 0x7c, 0xc2, 0xa3, 0xa5, 0xe2, 0x1e, 0x92,
	0xd2, 0x2b, 0xc1, 0xa3, 0x5e, 0x1f, 0xf5, 0x15, 0xbd, 0xd5, 0x2c, 0xa5, 0xe5, 0x53, 0xc1, 0xa3,
	0x21, 0x97, 0x2c, 0xa7, 0x9c, 0xa7, 0xa4, 0x62, 0xfe, 0x1d, 0xed, 0xe4, 0x1e, 0x58, 0xcb, 0x52,
	0x4a, 0xf2, 0xb0, 0xe1, 0xd9, 0x0e, 0x9b, 0xf3, 0xda, 0x0f, 0xda, 0xbb, 0x28, 0xd8, 0x36, 0x7e,
	0xd0, 0x67, 0x86, 0xbf, 0xce, 0x13, 0x53, 0x09, 0x47, 0xb2, 0xb1, 0x61, 0x3d, 0x4b, 0x69, 0x15,
	0x2b, 0xe1, 0x38, 0x73, 0x5a, 0x5b, 0xc7, 0xcc, 0xe0, 0x96, 0xae, 0xad, 0x23, 0x10, 0x61, 0x39,
	0xe3, 0x3c, 0x26, 0x65, 0x06, 0x93, 0xc1, 0x85, 0x04, 0xb7, 0x7c, 0xbd, 0xea, 0x18, 0x26, 0x43,
	0x75, 0x21, 0x81, 0x5d, 0x91, 0xda, 0x34, 0xbb, 0x52, 0xf6, 0xba, 0x6e, 0x05, 0x7b, 0xa2, 0x69,
	0x7c, 0x29, 0x79, 0xc0, 0x0c, 0xde, 0xfa, 0x69, 0x91, 0x3b, 0xfa, 0xe2, 0x0e, 0xfd, 0x31, 0xbc,
	0x99, 0x41, 0xa2, 0xb8, 0x58, 0x7e, 0x77, 0xcf, 0x49, 0x6d, 0x31, 0x1e, 0x6f, 0xd0, 0x36, 0x3b,
	0x4a, 0xfc, 0x31, 0x0c, 0x3f, 0xe4, 0x04, 0xbb, 0x11, 0xe6, 0x6c, 0x11, 0xa2, 0xcf, 0xbb, 0x51,
	0x72, 0x0e, 0x71, 0x7e, 0x9f, 0xeb, 0x59, 0x4a, 0x57, 0x31, 0xc9, 0x47, 0x98, 0x2d, 0x84, 0x38,
	0x3b, 0xa6, 0xcf, 0x2d, 0x2f, 0x38, 0x59, 0x4a, 0xd7, 0x30, 0xe5, 0xda, 0x0c, 0x37, 0xe2, 0x5a,
	0xbf, 0x2c, 0xe3, 0x86, 0xc1, 0x09, 0x8f, 0x03, 0x8d, 0x9a, 0x89, 0xee, 0x92, 0x42, 0xaf, 0x9b,
	0x0f, 0x54, 0xca, 0x52, 0x5a, 0xe0, 0x01, 0x2b, 0x98, 0x8f, 0x5c, 0x4f, 0x5a, 0xf8, 0xf7, 0x1b,
	0x71, 0x20, 0x21, 0xea, 0x75, 0x73, 0xab, 0x9a, 0x5d, 0x48, 0x88, 0xf4, 0x1b, 0x61, 0x18, 0xfd,
	0xdd, 0xf5, 0xa7, 0xbe, 0x7a, 0x29, 0xe2, 0x30, 0x57, 0x88, 0xcb, 0x90, 0x53, 0x5f, 0x8d, 0x45,
	0x1c, 0xb2, 0x39, 0xab, 0xb7, 0x31, 0x10, 0xef, 0x21, 0x42, 0x07, 0x54, 0xcd, 0x36, 0x94, 0x06,
	0x98, 0xc1, 0x9d, 0x47, 0xa4, 0xbc, 0xff, 0x51, 0xf2, 0x18, 0x12, 0xdc, 0x7d, 0xee, 0x4a, 0x30,
	0x10, 0xbb, 0xe2, 0xbc, 0x7b, 0xdf, 0x2f, 0x1b, 0xd6, 0x8f, 0xcb, 0x86, 0xf5, 0xfb, 0xb2, 0x61,
	0x7d, 0xfe, 0xd3, 0xf8, 0xef, 0x9d, 0x1d, 0x8a, 0x00, 0xa6, 0xa3, 0x12, 0x3e, 0x83, 0xdb, 0x7f,
	0x03, 0x00, 0x00, 0xff, 0xff, 0x7c, 0xd4, 0x71, 0xfc, 0x56, 0x05, 0x00, 0x00,
}
