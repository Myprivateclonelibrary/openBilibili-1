// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: app/service/main/identify-game/api/grpc/v1/api.proto

package v1

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// DelCacheReq request param for rpc DelCache
type DelCacheReq struct {
	Token                string   `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DelCacheReq) Reset()         { *m = DelCacheReq{} }
func (m *DelCacheReq) String() string { return proto.CompactTextString(m) }
func (*DelCacheReq) ProtoMessage()    {}
func (*DelCacheReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_19c55b63049ee51c, []int{0}
}
func (m *DelCacheReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DelCacheReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DelCacheReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *DelCacheReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DelCacheReq.Merge(dst, src)
}
func (m *DelCacheReq) XXX_Size() int {
	return m.Size()
}
func (m *DelCacheReq) XXX_DiscardUnknown() {
	xxx_messageInfo_DelCacheReq.DiscardUnknown(m)
}

var xxx_messageInfo_DelCacheReq proto.InternalMessageInfo

func (m *DelCacheReq) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

// DelCacheReply del cache reply
type DelCacheReply struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DelCacheReply) Reset()         { *m = DelCacheReply{} }
func (m *DelCacheReply) String() string { return proto.CompactTextString(m) }
func (*DelCacheReply) ProtoMessage()    {}
func (*DelCacheReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_19c55b63049ee51c, []int{1}
}
func (m *DelCacheReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DelCacheReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DelCacheReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *DelCacheReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DelCacheReply.Merge(dst, src)
}
func (m *DelCacheReply) XXX_Size() int {
	return m.Size()
}
func (m *DelCacheReply) XXX_DiscardUnknown() {
	xxx_messageInfo_DelCacheReply.DiscardUnknown(m)
}

var xxx_messageInfo_DelCacheReply proto.InternalMessageInfo

type CreateCookieReq struct {
	Token                string   `protobuf:"bytes,1,opt,name=Token,proto3" json:"token" form:"access_key" validate:"required"`
	From                 string   `protobuf:"bytes,2,opt,name=From,proto3" json:"from" form:"from"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CreateCookieReq) Reset()         { *m = CreateCookieReq{} }
func (m *CreateCookieReq) String() string { return proto.CompactTextString(m) }
func (*CreateCookieReq) ProtoMessage()    {}
func (*CreateCookieReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_19c55b63049ee51c, []int{2}
}
func (m *CreateCookieReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateCookieReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateCookieReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *CreateCookieReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateCookieReq.Merge(dst, src)
}
func (m *CreateCookieReq) XXX_Size() int {
	return m.Size()
}
func (m *CreateCookieReq) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateCookieReq.DiscardUnknown(m)
}

var xxx_messageInfo_CreateCookieReq proto.InternalMessageInfo

func (m *CreateCookieReq) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *CreateCookieReq) GetFrom() string {
	if m != nil {
		return m.From
	}
	return ""
}

type CreateCookieReply struct {
	BiliCookies          *CookieInfo `protobuf:"bytes,1,opt,name=BiliCookies" json:"cookie_info"`
	SSO                  []string    `protobuf:"bytes,2,rep,name=SSO" json:"sso"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *CreateCookieReply) Reset()         { *m = CreateCookieReply{} }
func (m *CreateCookieReply) String() string { return proto.CompactTextString(m) }
func (*CreateCookieReply) ProtoMessage()    {}
func (*CreateCookieReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_19c55b63049ee51c, []int{3}
}
func (m *CreateCookieReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateCookieReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateCookieReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *CreateCookieReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateCookieReply.Merge(dst, src)
}
func (m *CreateCookieReply) XXX_Size() int {
	return m.Size()
}
func (m *CreateCookieReply) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateCookieReply.DiscardUnknown(m)
}

var xxx_messageInfo_CreateCookieReply proto.InternalMessageInfo

func (m *CreateCookieReply) GetBiliCookies() *CookieInfo {
	if m != nil {
		return m.BiliCookies
	}
	return nil
}

func (m *CreateCookieReply) GetSSO() []string {
	if m != nil {
		return m.SSO
	}
	return nil
}

type CookieInfo struct {
	Cookies              []*Cookie `protobuf:"bytes,1,rep,name=Cookies" json:"cookies"`
	Domains              []string  `protobuf:"bytes,2,rep,name=Domains" json:"domains"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *CookieInfo) Reset()         { *m = CookieInfo{} }
func (m *CookieInfo) String() string { return proto.CompactTextString(m) }
func (*CookieInfo) ProtoMessage()    {}
func (*CookieInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_19c55b63049ee51c, []int{4}
}
func (m *CookieInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CookieInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CookieInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *CookieInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CookieInfo.Merge(dst, src)
}
func (m *CookieInfo) XXX_Size() int {
	return m.Size()
}
func (m *CookieInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_CookieInfo.DiscardUnknown(m)
}

var xxx_messageInfo_CookieInfo proto.InternalMessageInfo

func (m *CookieInfo) GetCookies() []*Cookie {
	if m != nil {
		return m.Cookies
	}
	return nil
}

func (m *CookieInfo) GetDomains() []string {
	if m != nil {
		return m.Domains
	}
	return nil
}

type Cookie struct {
	Name                 string   `protobuf:"bytes,1,opt,name=Name,proto3" json:"name"`
	Value                string   `protobuf:"bytes,2,opt,name=Value,proto3" json:"value"`
	HttpOnly             int64    `protobuf:"varint,3,opt,name=HttpOnly,proto3" json:"http_only"`
	Expires              int64    `protobuf:"varint,4,opt,name=Expires,proto3" json:"expires"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Cookie) Reset()         { *m = Cookie{} }
func (m *Cookie) String() string { return proto.CompactTextString(m) }
func (*Cookie) ProtoMessage()    {}
func (*Cookie) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_19c55b63049ee51c, []int{5}
}
func (m *Cookie) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Cookie) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Cookie.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Cookie) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Cookie.Merge(dst, src)
}
func (m *Cookie) XXX_Size() int {
	return m.Size()
}
func (m *Cookie) XXX_DiscardUnknown() {
	xxx_messageInfo_Cookie.DiscardUnknown(m)
}

var xxx_messageInfo_Cookie proto.InternalMessageInfo

func (m *Cookie) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Cookie) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func (m *Cookie) GetHttpOnly() int64 {
	if m != nil {
		return m.HttpOnly
	}
	return 0
}

func (m *Cookie) GetExpires() int64 {
	if m != nil {
		return m.Expires
	}
	return 0
}

func init() {
	proto.RegisterType((*DelCacheReq)(nil), "main.service.identify.game.v1.DelCacheReq")
	proto.RegisterType((*DelCacheReply)(nil), "main.service.identify.game.v1.DelCacheReply")
	proto.RegisterType((*CreateCookieReq)(nil), "main.service.identify.game.v1.CreateCookieReq")
	proto.RegisterType((*CreateCookieReply)(nil), "main.service.identify.game.v1.CreateCookieReply")
	proto.RegisterType((*CookieInfo)(nil), "main.service.identify.game.v1.CookieInfo")
	proto.RegisterType((*Cookie)(nil), "main.service.identify.game.v1.Cookie")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// IdentifyGameClient is the client API for IdentifyGame service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type IdentifyGameClient interface {
	// CookieInfo identify info by cookie.
	DelCache(ctx context.Context, in *DelCacheReq, opts ...grpc.CallOption) (*DelCacheReply, error)
	GetCookieByToken(ctx context.Context, in *CreateCookieReq, opts ...grpc.CallOption) (*CreateCookieReply, error)
}

type identifyGameClient struct {
	cc *grpc.ClientConn
}

func NewIdentifyGameClient(cc *grpc.ClientConn) IdentifyGameClient {
	return &identifyGameClient{cc}
}

func (c *identifyGameClient) DelCache(ctx context.Context, in *DelCacheReq, opts ...grpc.CallOption) (*DelCacheReply, error) {
	out := new(DelCacheReply)
	err := c.cc.Invoke(ctx, "/main.service.identify.game.v1.IdentifyGame/DelCache", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identifyGameClient) GetCookieByToken(ctx context.Context, in *CreateCookieReq, opts ...grpc.CallOption) (*CreateCookieReply, error) {
	out := new(CreateCookieReply)
	err := c.cc.Invoke(ctx, "/main.service.identify.game.v1.IdentifyGame/GetCookieByToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IdentifyGameServer is the server API for IdentifyGame service.
type IdentifyGameServer interface {
	// CookieInfo identify info by cookie.
	DelCache(context.Context, *DelCacheReq) (*DelCacheReply, error)
	GetCookieByToken(context.Context, *CreateCookieReq) (*CreateCookieReply, error)
}

func RegisterIdentifyGameServer(s *grpc.Server, srv IdentifyGameServer) {
	s.RegisterService(&_IdentifyGame_serviceDesc, srv)
}

func _IdentifyGame_DelCache_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelCacheReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentifyGameServer).DelCache(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.service.identify.game.v1.IdentifyGame/DelCache",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentifyGameServer).DelCache(ctx, req.(*DelCacheReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentifyGame_GetCookieByToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCookieReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentifyGameServer).GetCookieByToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.service.identify.game.v1.IdentifyGame/GetCookieByToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentifyGameServer).GetCookieByToken(ctx, req.(*CreateCookieReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _IdentifyGame_serviceDesc = grpc.ServiceDesc{
	ServiceName: "main.service.identify.game.v1.IdentifyGame",
	HandlerType: (*IdentifyGameServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DelCache",
			Handler:    _IdentifyGame_DelCache_Handler,
		},
		{
			MethodName: "GetCookieByToken",
			Handler:    _IdentifyGame_GetCookieByToken_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "app/service/main/identify-game/api/grpc/v1/api.proto",
}

func (m *DelCacheReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DelCacheReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Token) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Token)))
		i += copy(dAtA[i:], m.Token)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *DelCacheReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DelCacheReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *CreateCookieReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateCookieReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Token) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Token)))
		i += copy(dAtA[i:], m.Token)
	}
	if len(m.From) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.From)))
		i += copy(dAtA[i:], m.From)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *CreateCookieReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateCookieReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.BiliCookies != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.BiliCookies.Size()))
		n1, err := m.BiliCookies.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if len(m.SSO) > 0 {
		for _, s := range m.SSO {
			dAtA[i] = 0x12
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *CookieInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CookieInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Cookies) > 0 {
		for _, msg := range m.Cookies {
			dAtA[i] = 0xa
			i++
			i = encodeVarintApi(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Domains) > 0 {
		for _, s := range m.Domains {
			dAtA[i] = 0x12
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Cookie) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Cookie) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.Value) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Value)))
		i += copy(dAtA[i:], m.Value)
	}
	if m.HttpOnly != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.HttpOnly))
	}
	if m.Expires != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Expires))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintApi(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *DelCacheReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Token)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DelCacheReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CreateCookieReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Token)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.From)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CreateCookieReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BiliCookies != nil {
		l = m.BiliCookies.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if len(m.SSO) > 0 {
		for _, s := range m.SSO {
			l = len(s)
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CookieInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Cookies) > 0 {
		for _, e := range m.Cookies {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if len(m.Domains) > 0 {
		for _, s := range m.Domains {
			l = len(s)
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Cookie) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.HttpOnly != 0 {
		n += 1 + sovApi(uint64(m.HttpOnly))
	}
	if m.Expires != 0 {
		n += 1 + sovApi(uint64(m.Expires))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovApi(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozApi(x uint64) (n int) {
	return sovApi(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *DelCacheReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DelCacheReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DelCacheReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DelCacheReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DelCacheReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DelCacheReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateCookieReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateCookieReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateCookieReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.From = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateCookieReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateCookieReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateCookieReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BiliCookies", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BiliCookies == nil {
				m.BiliCookies = &CookieInfo{}
			}
			if err := m.BiliCookies.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SSO", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SSO = append(m.SSO, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CookieInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CookieInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CookieInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cookies", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cookies = append(m.Cookies, &Cookie{})
			if err := m.Cookies[len(m.Cookies)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Domains", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Domains = append(m.Domains, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Cookie) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Cookie: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Cookie: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HttpOnly", wireType)
			}
			m.HttpOnly = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HttpOnly |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Expires", wireType)
			}
			m.Expires = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Expires |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipApi(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowApi
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowApi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowApi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthApi
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowApi
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipApi(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthApi = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowApi   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("app/service/main/identify-game/api/grpc/v1/api.proto", fileDescriptor_api_19c55b63049ee51c)
}

var fileDescriptor_api_19c55b63049ee51c = []byte{
	// 555 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x53, 0x41, 0x6f, 0xd3, 0x30,
	0x18, 0x55, 0x96, 0x6e, 0x5d, 0x1d, 0xa6, 0x8e, 0x08, 0x89, 0x52, 0x41, 0x53, 0x05, 0x55, 0xea,
	0x80, 0x25, 0xb4, 0x70, 0xda, 0x31, 0x1d, 0x6c, 0x93, 0x10, 0x93, 0x3c, 0xc4, 0x01, 0x21, 0x55,
	0x6e, 0xea, 0xb4, 0x56, 0x93, 0xd8, 0x4b, 0xdc, 0x88, 0x1c, 0xb9, 0x71, 0xe0, 0x0f, 0xf0, 0x8f,
	0x38, 0xf2, 0x0b, 0x22, 0xd4, 0x63, 0x8e, 0xfb, 0x05, 0xc8, 0x76, 0x4a, 0xb7, 0x0b, 0x1b, 0x37,
	0x7f, 0xcf, 0xef, 0x3d, 0xbf, 0x7c, 0xdf, 0x17, 0xf0, 0x1a, 0x31, 0xe6, 0xa6, 0x38, 0xc9, 0x88,
	0x8f, 0xdd, 0x08, 0x91, 0xd8, 0x25, 0x53, 0x1c, 0x73, 0x12, 0xe4, 0x87, 0x33, 0x14, 0x61, 0x17,
	0x31, 0xe2, 0xce, 0x12, 0xe6, 0xbb, 0xd9, 0x40, 0x9c, 0x1d, 0x96, 0x50, 0x4e, 0xcd, 0x27, 0x82,
	0xe9, 0x54, 0x32, 0x67, 0xad, 0x70, 0x84, 0xc2, 0xc9, 0x06, 0xed, 0xc3, 0x19, 0xe1, 0xf3, 0xe5,
	0xc4, 0xf1, 0x69, 0xe4, 0xce, 0xe8, 0x8c, 0xba, 0x52, 0x35, 0x59, 0x06, 0xb2, 0x92, 0x85, 0x3c,
	0x29, 0x37, 0xfb, 0x29, 0x30, 0x8e, 0x71, 0x38, 0x42, 0xfe, 0x1c, 0x43, 0x7c, 0x69, 0x3e, 0x00,
	0xdb, 0x9c, 0x2e, 0x70, 0xdc, 0xd2, 0xba, 0x5a, 0xbf, 0x01, 0x55, 0x61, 0x37, 0xc1, 0xde, 0x86,
	0xc4, 0xc2, 0xdc, 0xfe, 0xa6, 0x81, 0xe6, 0x28, 0xc1, 0x88, 0xe3, 0x11, 0xa5, 0x0b, 0x22, 0xa5,
	0xa7, 0x60, 0xfb, 0xc3, 0x46, 0xea, 0x0d, 0xcb, 0xc2, 0x52, 0xf2, 0xab, 0xc2, 0xea, 0x05, 0x34,
	0x89, 0x8e, 0x6c, 0xe4, 0xfb, 0x38, 0x4d, 0xc7, 0x0b, 0x9c, 0xdb, 0xdd, 0x0c, 0x85, 0x64, 0x8a,
	0x38, 0x3e, 0xb2, 0x13, 0x7c, 0xb9, 0x24, 0x09, 0x9e, 0xda, 0x50, 0x19, 0x98, 0xcf, 0x41, 0xed,
	0x6d, 0x42, 0xa3, 0xd6, 0x96, 0x34, 0x7a, 0x58, 0x16, 0x56, 0x2d, 0x48, 0x68, 0x74, 0x55, 0x58,
	0x86, 0xf2, 0x11, 0x95, 0x0d, 0x25, 0xc9, 0xfe, 0xae, 0x81, 0xfb, 0x37, 0xa3, 0xb0, 0x30, 0x37,
	0x3f, 0x03, 0xc3, 0x23, 0x21, 0x51, 0x50, 0x2a, 0x23, 0x19, 0xc3, 0x03, 0xe7, 0x9f, 0xad, 0x73,
	0x14, 0xfb, 0x2c, 0x0e, 0xa8, 0xd7, 0x2c, 0x0b, 0xcb, 0xf0, 0x65, 0x3d, 0x26, 0x71, 0x40, 0xe1,
	0x75, 0x3b, 0xf3, 0x11, 0xd0, 0x2f, 0x2e, 0xce, 0x5b, 0x5b, 0x5d, 0xbd, 0xdf, 0xf0, 0xea, 0x65,
	0x61, 0xe9, 0x69, 0x4a, 0xa1, 0xc0, 0xec, 0xaf, 0x1a, 0x00, 0x1b, 0x1f, 0xf3, 0x1d, 0xa8, 0x6f,
	0x32, 0xe8, 0x7d, 0x63, 0xd8, 0xbb, 0x53, 0x06, 0xcf, 0x28, 0x0b, 0xab, 0xae, 0xde, 0x4f, 0xe1,
	0xda, 0xc2, 0xec, 0x81, 0xfa, 0x31, 0x15, 0xfa, 0xb4, 0x7a, 0x5b, 0xd2, 0xa6, 0x0a, 0x82, 0xeb,
	0x3b, 0xfb, 0x87, 0x06, 0x76, 0x94, 0xc4, 0x7c, 0x0c, 0x6a, 0xef, 0x51, 0x84, 0xab, 0x99, 0xec,
	0x8a, 0x56, 0xc6, 0x28, 0xc2, 0x50, 0xa2, 0xa6, 0x05, 0xb6, 0x3f, 0xa2, 0x70, 0x89, 0xab, 0x4e,
	0x37, 0xc4, 0xc8, 0x32, 0x01, 0x40, 0x85, 0x9b, 0x07, 0x60, 0xf7, 0x94, 0x73, 0x76, 0x1e, 0x87,
	0x79, 0x4b, 0xef, 0x6a, 0x7d, 0xdd, 0xdb, 0x2b, 0x0b, 0xab, 0x31, 0xe7, 0x9c, 0x8d, 0x69, 0x1c,
	0xe6, 0xf0, 0xef, 0xb5, 0xc8, 0xf6, 0xe6, 0x0b, 0x23, 0x09, 0x4e, 0x5b, 0x35, 0xc9, 0x94, 0xd9,
	0xb0, 0x82, 0xe0, 0xfa, 0x6e, 0x58, 0x6a, 0xe0, 0xde, 0x59, 0xf5, 0xd1, 0x27, 0x22, 0xc3, 0x14,
	0xec, 0xae, 0x77, 0xcb, 0x7c, 0x76, 0x4b, 0x73, 0xae, 0x6d, 0x6a, 0xfb, 0xc5, 0x9d, 0xb9, 0x62,
	0x1f, 0x38, 0xd8, 0x3f, 0xc1, 0xbc, 0x6a, 0x6e, 0xae, 0xd6, 0xcc, 0xb9, 0x6d, 0x14, 0x37, 0x17,
	0xbc, 0xfd, 0xf2, 0xbf, 0xf8, 0x2c, 0xcc, 0xbd, 0xfd, 0x9f, 0xab, 0x8e, 0xf6, 0x6b, 0xd5, 0xd1,
	0x7e, 0xaf, 0x3a, 0xda, 0xa7, 0xad, 0x6c, 0x30, 0xd9, 0x91, 0x7f, 0xdd, 0xab, 0x3f, 0x01, 0x00,
	0x00, 0xff, 0xff, 0x7c, 0x27, 0x4e, 0x9b, 0xfb, 0x03, 0x00, 0x00,
}
