// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: app/service/main/passport-sns/api/api.proto

/*
	Package api is a generated protocol buffer package.

	It is generated from these files:
		app/service/main/passport-sns/api/api.proto

	It has these top-level messages:
		EmptyReply
		Info
		GetAuthorizeURLReq
		GetAuthorizeURLReply
		BindReq
		UnbindReq
		GetInfoReq
		GetInfoReply
		GetInfoByCodeReq
		GetInfoByCodeReply
		UpdateInfoReq
*/
package api

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "google.golang.org/genproto/googleapis/api/annotations"
import _ "github.com/gogo/protobuf/gogoproto"

import context "golang.org/x/net/context"
import grpc "google.golang.org/grpc"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type EmptyReply struct {
}

func (m *EmptyReply) Reset()                    { *m = EmptyReply{} }
func (m *EmptyReply) String() string            { return proto.CompactTextString(m) }
func (*EmptyReply) ProtoMessage()               {}
func (*EmptyReply) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{0} }

type Info struct {
	Mid      int64  `protobuf:"varint,1,opt,name=mid,proto3" json:"mid"`
	Platform string `protobuf:"bytes,2,opt,name=platform,proto3" json:"platform"`
	UnionId  string `protobuf:"bytes,3,opt,name=union_id,json=unionId,proto3" json:"unionid"`
	Expires  int64  `protobuf:"varint,4,opt,name=expires,proto3" json:"expires"`
}

func (m *Info) Reset()                    { *m = Info{} }
func (m *Info) String() string            { return proto.CompactTextString(m) }
func (*Info) ProtoMessage()               {}
func (*Info) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{1} }

func (m *Info) GetMid() int64 {
	if m != nil {
		return m.Mid
	}
	return 0
}

func (m *Info) GetPlatform() string {
	if m != nil {
		return m.Platform
	}
	return ""
}

func (m *Info) GetUnionId() string {
	if m != nil {
		return m.UnionId
	}
	return ""
}

func (m *Info) GetExpires() int64 {
	if m != nil {
		return m.Expires
	}
	return 0
}

type GetAuthorizeURLReq struct {
	AppId       string `protobuf:"bytes,1,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty" form:"appid" validate:"required"`
	Platform    string `protobuf:"bytes,2,opt,name=platform,proto3" json:"platform,omitempty" form:"platform" validate:"required"`
	RedirectUrl string `protobuf:"bytes,3,opt,name=redirect_url,json=redirectUrl,proto3" json:"redirect_url,omitempty" form:"redirect_url" validate:"required"`
	Display     string `protobuf:"bytes,4,opt,name=display,proto3" json:"display,omitempty" form:"display"`
}

func (m *GetAuthorizeURLReq) Reset()                    { *m = GetAuthorizeURLReq{} }
func (m *GetAuthorizeURLReq) String() string            { return proto.CompactTextString(m) }
func (*GetAuthorizeURLReq) ProtoMessage()               {}
func (*GetAuthorizeURLReq) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{2} }

func (m *GetAuthorizeURLReq) GetAppId() string {
	if m != nil {
		return m.AppId
	}
	return ""
}

func (m *GetAuthorizeURLReq) GetPlatform() string {
	if m != nil {
		return m.Platform
	}
	return ""
}

func (m *GetAuthorizeURLReq) GetRedirectUrl() string {
	if m != nil {
		return m.RedirectUrl
	}
	return ""
}

func (m *GetAuthorizeURLReq) GetDisplay() string {
	if m != nil {
		return m.Display
	}
	return ""
}

type GetAuthorizeURLReply struct {
	Url string `protobuf:"bytes,1,opt,name=url,proto3" json:"url"`
}

func (m *GetAuthorizeURLReply) Reset()                    { *m = GetAuthorizeURLReply{} }
func (m *GetAuthorizeURLReply) String() string            { return proto.CompactTextString(m) }
func (*GetAuthorizeURLReply) ProtoMessage()               {}
func (*GetAuthorizeURLReply) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{3} }

func (m *GetAuthorizeURLReply) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

type BindReq struct {
	Mid         int64  `protobuf:"varint,1,opt,name=mid,proto3" json:"mid,omitempty" form:"mid" validate:"required"`
	Code        string `protobuf:"bytes,2,opt,name=code,proto3" json:"code,omitempty" form:"code" validate:"required"`
	AppId       string `protobuf:"bytes,3,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty" form:"appid" validate:"required"`
	Platform    string `protobuf:"bytes,4,opt,name=platform,proto3" json:"platform,omitempty" form:"platform" validate:"required"`
	RedirectUrl string `protobuf:"bytes,5,opt,name=redirect_url,json=redirectUrl,proto3" json:"redirect_url,omitempty" form:"redirect_url" validate:"required"`
}

func (m *BindReq) Reset()                    { *m = BindReq{} }
func (m *BindReq) String() string            { return proto.CompactTextString(m) }
func (*BindReq) ProtoMessage()               {}
func (*BindReq) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{4} }

func (m *BindReq) GetMid() int64 {
	if m != nil {
		return m.Mid
	}
	return 0
}

func (m *BindReq) GetCode() string {
	if m != nil {
		return m.Code
	}
	return ""
}

func (m *BindReq) GetAppId() string {
	if m != nil {
		return m.AppId
	}
	return ""
}

func (m *BindReq) GetPlatform() string {
	if m != nil {
		return m.Platform
	}
	return ""
}

func (m *BindReq) GetRedirectUrl() string {
	if m != nil {
		return m.RedirectUrl
	}
	return ""
}

type UnbindReq struct {
	Mid      int64  `protobuf:"varint,1,opt,name=mid,proto3" json:"mid,omitempty" form:"mid" validate:"required"`
	AppId    string `protobuf:"bytes,2,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty" form:"appid"`
	Platform string `protobuf:"bytes,3,opt,name=platform,proto3" json:"platform,omitempty" form:"platform" validate:"required"`
}

func (m *UnbindReq) Reset()                    { *m = UnbindReq{} }
func (m *UnbindReq) String() string            { return proto.CompactTextString(m) }
func (*UnbindReq) ProtoMessage()               {}
func (*UnbindReq) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{5} }

func (m *UnbindReq) GetMid() int64 {
	if m != nil {
		return m.Mid
	}
	return 0
}

func (m *UnbindReq) GetAppId() string {
	if m != nil {
		return m.AppId
	}
	return ""
}

func (m *UnbindReq) GetPlatform() string {
	if m != nil {
		return m.Platform
	}
	return ""
}

type GetInfoReq struct {
	Mid int64 `protobuf:"varint,1,opt,name=mid,proto3" json:"mid,omitempty" form:"mid" validate:"required"`
}

func (m *GetInfoReq) Reset()                    { *m = GetInfoReq{} }
func (m *GetInfoReq) String() string            { return proto.CompactTextString(m) }
func (*GetInfoReq) ProtoMessage()               {}
func (*GetInfoReq) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{6} }

func (m *GetInfoReq) GetMid() int64 {
	if m != nil {
		return m.Mid
	}
	return 0
}

type GetInfoReply struct {
	Infos []*Info `protobuf:"bytes,1,rep,name=infos" json:"infos"`
}

func (m *GetInfoReply) Reset()                    { *m = GetInfoReply{} }
func (m *GetInfoReply) String() string            { return proto.CompactTextString(m) }
func (*GetInfoReply) ProtoMessage()               {}
func (*GetInfoReply) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{7} }

func (m *GetInfoReply) GetInfos() []*Info {
	if m != nil {
		return m.Infos
	}
	return nil
}

type GetInfoByCodeReq struct {
	Code        string `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty" form:"code" validate:"required"`
	AppId       string `protobuf:"bytes,2,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty" form:"appid" validate:"required"`
	Platform    string `protobuf:"bytes,3,opt,name=platform,proto3" json:"platform,omitempty" form:"platform" validate:"required"`
	RedirectUrl string `protobuf:"bytes,4,opt,name=redirect_url,json=redirectUrl,proto3" json:"redirect_url,omitempty" form:"redirect_url" validate:"required"`
}

func (m *GetInfoByCodeReq) Reset()                    { *m = GetInfoByCodeReq{} }
func (m *GetInfoByCodeReq) String() string            { return proto.CompactTextString(m) }
func (*GetInfoByCodeReq) ProtoMessage()               {}
func (*GetInfoByCodeReq) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{8} }

func (m *GetInfoByCodeReq) GetCode() string {
	if m != nil {
		return m.Code
	}
	return ""
}

func (m *GetInfoByCodeReq) GetAppId() string {
	if m != nil {
		return m.AppId
	}
	return ""
}

func (m *GetInfoByCodeReq) GetPlatform() string {
	if m != nil {
		return m.Platform
	}
	return ""
}

func (m *GetInfoByCodeReq) GetRedirectUrl() string {
	if m != nil {
		return m.RedirectUrl
	}
	return ""
}

type GetInfoByCodeReply struct {
	Mid     int64  `protobuf:"varint,1,opt,name=mid,proto3" json:"mid"`
	UnionId string `protobuf:"bytes,2,opt,name=union_id,json=unionId,proto3" json:"unionid"`
	OpenId  string `protobuf:"bytes,3,opt,name=open_id,json=openId,proto3" json:"openid"`
	Expires int64  `protobuf:"varint,4,opt,name=expires,proto3" json:"expires"`
	Token   string `protobuf:"bytes,5,opt,name=token,proto3" json:"token"`
}

func (m *GetInfoByCodeReply) Reset()                    { *m = GetInfoByCodeReply{} }
func (m *GetInfoByCodeReply) String() string            { return proto.CompactTextString(m) }
func (*GetInfoByCodeReply) ProtoMessage()               {}
func (*GetInfoByCodeReply) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{9} }

func (m *GetInfoByCodeReply) GetMid() int64 {
	if m != nil {
		return m.Mid
	}
	return 0
}

func (m *GetInfoByCodeReply) GetUnionId() string {
	if m != nil {
		return m.UnionId
	}
	return ""
}

func (m *GetInfoByCodeReply) GetOpenId() string {
	if m != nil {
		return m.OpenId
	}
	return ""
}

func (m *GetInfoByCodeReply) GetExpires() int64 {
	if m != nil {
		return m.Expires
	}
	return 0
}

func (m *GetInfoByCodeReply) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

type UpdateInfoReq struct {
	Platform string `protobuf:"bytes,1,opt,name=platform,proto3" json:"platform,omitempty" form:"platform" validate:"required"`
	AppId    string `protobuf:"bytes,2,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty" form:"appid" validate:"required"`
	Mid      int64  `protobuf:"varint,3,opt,name=mid,proto3" json:"mid,omitempty" form:"mid" validate:"required"`
	OpenId   string `protobuf:"bytes,4,opt,name=open_id,json=openId,proto3" json:"open_id,omitempty" form:"openid" validate:"required"`
}

func (m *UpdateInfoReq) Reset()                    { *m = UpdateInfoReq{} }
func (m *UpdateInfoReq) String() string            { return proto.CompactTextString(m) }
func (*UpdateInfoReq) ProtoMessage()               {}
func (*UpdateInfoReq) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{10} }

func (m *UpdateInfoReq) GetPlatform() string {
	if m != nil {
		return m.Platform
	}
	return ""
}

func (m *UpdateInfoReq) GetAppId() string {
	if m != nil {
		return m.AppId
	}
	return ""
}

func (m *UpdateInfoReq) GetMid() int64 {
	if m != nil {
		return m.Mid
	}
	return 0
}

func (m *UpdateInfoReq) GetOpenId() string {
	if m != nil {
		return m.OpenId
	}
	return ""
}

func init() {
	proto.RegisterType((*EmptyReply)(nil), "passport.service.sns.EmptyReply")
	proto.RegisterType((*Info)(nil), "passport.service.sns.Info")
	proto.RegisterType((*GetAuthorizeURLReq)(nil), "passport.service.sns.GetAuthorizeURLReq")
	proto.RegisterType((*GetAuthorizeURLReply)(nil), "passport.service.sns.GetAuthorizeURLReply")
	proto.RegisterType((*BindReq)(nil), "passport.service.sns.BindReq")
	proto.RegisterType((*UnbindReq)(nil), "passport.service.sns.UnbindReq")
	proto.RegisterType((*GetInfoReq)(nil), "passport.service.sns.GetInfoReq")
	proto.RegisterType((*GetInfoReply)(nil), "passport.service.sns.GetInfoReply")
	proto.RegisterType((*GetInfoByCodeReq)(nil), "passport.service.sns.GetInfoByCodeReq")
	proto.RegisterType((*GetInfoByCodeReply)(nil), "passport.service.sns.GetInfoByCodeReply")
	proto.RegisterType((*UpdateInfoReq)(nil), "passport.service.sns.UpdateInfoReq")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for PassportSNS service

type PassportSNSClient interface {
	// GetAuthorizeURL get authorize url
	GetAuthorizeURL(ctx context.Context, in *GetAuthorizeURLReq, opts ...grpc.CallOption) (*GetAuthorizeURLReply, error)
	// Bind bind sns account
	Bind(ctx context.Context, in *BindReq, opts ...grpc.CallOption) (*EmptyReply, error)
	// Unbind unbind sns account
	Unbind(ctx context.Context, in *UnbindReq, opts ...grpc.CallOption) (*EmptyReply, error)
	// GetInfo get info by mid
	GetInfo(ctx context.Context, in *GetInfoReq, opts ...grpc.CallOption) (*GetInfoReply, error)
	// GetInfoByCode get info by authorize code
	GetInfoByCode(ctx context.Context, in *GetInfoByCodeReq, opts ...grpc.CallOption) (*GetInfoByCodeReply, error)
	// UpdateInfo update info
	UpdateInfo(ctx context.Context, in *UpdateInfoReq, opts ...grpc.CallOption) (*EmptyReply, error)
}

type passportSNSClient struct {
	cc *grpc.ClientConn
}

func NewPassportSNSClient(cc *grpc.ClientConn) PassportSNSClient {
	return &passportSNSClient{cc}
}

func (c *passportSNSClient) GetAuthorizeURL(ctx context.Context, in *GetAuthorizeURLReq, opts ...grpc.CallOption) (*GetAuthorizeURLReply, error) {
	out := new(GetAuthorizeURLReply)
	err := grpc.Invoke(ctx, "/passport.service.sns.PassportSNS/GetAuthorizeURL", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *passportSNSClient) Bind(ctx context.Context, in *BindReq, opts ...grpc.CallOption) (*EmptyReply, error) {
	out := new(EmptyReply)
	err := grpc.Invoke(ctx, "/passport.service.sns.PassportSNS/Bind", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *passportSNSClient) Unbind(ctx context.Context, in *UnbindReq, opts ...grpc.CallOption) (*EmptyReply, error) {
	out := new(EmptyReply)
	err := grpc.Invoke(ctx, "/passport.service.sns.PassportSNS/Unbind", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *passportSNSClient) GetInfo(ctx context.Context, in *GetInfoReq, opts ...grpc.CallOption) (*GetInfoReply, error) {
	out := new(GetInfoReply)
	err := grpc.Invoke(ctx, "/passport.service.sns.PassportSNS/GetInfo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *passportSNSClient) GetInfoByCode(ctx context.Context, in *GetInfoByCodeReq, opts ...grpc.CallOption) (*GetInfoByCodeReply, error) {
	out := new(GetInfoByCodeReply)
	err := grpc.Invoke(ctx, "/passport.service.sns.PassportSNS/GetInfoByCode", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *passportSNSClient) UpdateInfo(ctx context.Context, in *UpdateInfoReq, opts ...grpc.CallOption) (*EmptyReply, error) {
	out := new(EmptyReply)
	err := grpc.Invoke(ctx, "/passport.service.sns.PassportSNS/UpdateInfo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for PassportSNS service

type PassportSNSServer interface {
	// GetAuthorizeURL get authorize url
	GetAuthorizeURL(context.Context, *GetAuthorizeURLReq) (*GetAuthorizeURLReply, error)
	// Bind bind sns account
	Bind(context.Context, *BindReq) (*EmptyReply, error)
	// Unbind unbind sns account
	Unbind(context.Context, *UnbindReq) (*EmptyReply, error)
	// GetInfo get info by mid
	GetInfo(context.Context, *GetInfoReq) (*GetInfoReply, error)
	// GetInfoByCode get info by authorize code
	GetInfoByCode(context.Context, *GetInfoByCodeReq) (*GetInfoByCodeReply, error)
	// UpdateInfo update info
	UpdateInfo(context.Context, *UpdateInfoReq) (*EmptyReply, error)
}

func RegisterPassportSNSServer(s *grpc.Server, srv PassportSNSServer) {
	s.RegisterService(&_PassportSNS_serviceDesc, srv)
}

func _PassportSNS_GetAuthorizeURL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAuthorizeURLReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PassportSNSServer).GetAuthorizeURL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/passport.service.sns.PassportSNS/GetAuthorizeURL",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PassportSNSServer).GetAuthorizeURL(ctx, req.(*GetAuthorizeURLReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PassportSNS_Bind_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BindReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PassportSNSServer).Bind(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/passport.service.sns.PassportSNS/Bind",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PassportSNSServer).Bind(ctx, req.(*BindReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PassportSNS_Unbind_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnbindReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PassportSNSServer).Unbind(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/passport.service.sns.PassportSNS/Unbind",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PassportSNSServer).Unbind(ctx, req.(*UnbindReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PassportSNS_GetInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PassportSNSServer).GetInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/passport.service.sns.PassportSNS/GetInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PassportSNSServer).GetInfo(ctx, req.(*GetInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PassportSNS_GetInfoByCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInfoByCodeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PassportSNSServer).GetInfoByCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/passport.service.sns.PassportSNS/GetInfoByCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PassportSNSServer).GetInfoByCode(ctx, req.(*GetInfoByCodeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PassportSNS_UpdateInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PassportSNSServer).UpdateInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/passport.service.sns.PassportSNS/UpdateInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PassportSNSServer).UpdateInfo(ctx, req.(*UpdateInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _PassportSNS_serviceDesc = grpc.ServiceDesc{
	ServiceName: "passport.service.sns.PassportSNS",
	HandlerType: (*PassportSNSServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAuthorizeURL",
			Handler:    _PassportSNS_GetAuthorizeURL_Handler,
		},
		{
			MethodName: "Bind",
			Handler:    _PassportSNS_Bind_Handler,
		},
		{
			MethodName: "Unbind",
			Handler:    _PassportSNS_Unbind_Handler,
		},
		{
			MethodName: "GetInfo",
			Handler:    _PassportSNS_GetInfo_Handler,
		},
		{
			MethodName: "GetInfoByCode",
			Handler:    _PassportSNS_GetInfoByCode_Handler,
		},
		{
			MethodName: "UpdateInfo",
			Handler:    _PassportSNS_UpdateInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "app/service/main/passport-sns/api/api.proto",
}

func (m *EmptyReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EmptyReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *Info) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Info) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Mid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Mid))
	}
	if len(m.Platform) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Platform)))
		i += copy(dAtA[i:], m.Platform)
	}
	if len(m.UnionId) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.UnionId)))
		i += copy(dAtA[i:], m.UnionId)
	}
	if m.Expires != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Expires))
	}
	return i, nil
}

func (m *GetAuthorizeURLReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetAuthorizeURLReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.AppId) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.AppId)))
		i += copy(dAtA[i:], m.AppId)
	}
	if len(m.Platform) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Platform)))
		i += copy(dAtA[i:], m.Platform)
	}
	if len(m.RedirectUrl) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.RedirectUrl)))
		i += copy(dAtA[i:], m.RedirectUrl)
	}
	if len(m.Display) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Display)))
		i += copy(dAtA[i:], m.Display)
	}
	return i, nil
}

func (m *GetAuthorizeURLReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetAuthorizeURLReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Url) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Url)))
		i += copy(dAtA[i:], m.Url)
	}
	return i, nil
}

func (m *BindReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BindReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Mid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Mid))
	}
	if len(m.Code) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Code)))
		i += copy(dAtA[i:], m.Code)
	}
	if len(m.AppId) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.AppId)))
		i += copy(dAtA[i:], m.AppId)
	}
	if len(m.Platform) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Platform)))
		i += copy(dAtA[i:], m.Platform)
	}
	if len(m.RedirectUrl) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.RedirectUrl)))
		i += copy(dAtA[i:], m.RedirectUrl)
	}
	return i, nil
}

func (m *UnbindReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UnbindReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Mid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Mid))
	}
	if len(m.AppId) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.AppId)))
		i += copy(dAtA[i:], m.AppId)
	}
	if len(m.Platform) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Platform)))
		i += copy(dAtA[i:], m.Platform)
	}
	return i, nil
}

func (m *GetInfoReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetInfoReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Mid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Mid))
	}
	return i, nil
}

func (m *GetInfoReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetInfoReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Infos) > 0 {
		for _, msg := range m.Infos {
			dAtA[i] = 0xa
			i++
			i = encodeVarintApi(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *GetInfoByCodeReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetInfoByCodeReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Code) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Code)))
		i += copy(dAtA[i:], m.Code)
	}
	if len(m.AppId) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.AppId)))
		i += copy(dAtA[i:], m.AppId)
	}
	if len(m.Platform) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Platform)))
		i += copy(dAtA[i:], m.Platform)
	}
	if len(m.RedirectUrl) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.RedirectUrl)))
		i += copy(dAtA[i:], m.RedirectUrl)
	}
	return i, nil
}

func (m *GetInfoByCodeReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetInfoByCodeReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Mid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Mid))
	}
	if len(m.UnionId) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.UnionId)))
		i += copy(dAtA[i:], m.UnionId)
	}
	if len(m.OpenId) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.OpenId)))
		i += copy(dAtA[i:], m.OpenId)
	}
	if m.Expires != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Expires))
	}
	if len(m.Token) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Token)))
		i += copy(dAtA[i:], m.Token)
	}
	return i, nil
}

func (m *UpdateInfoReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateInfoReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Platform) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Platform)))
		i += copy(dAtA[i:], m.Platform)
	}
	if len(m.AppId) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.AppId)))
		i += copy(dAtA[i:], m.AppId)
	}
	if m.Mid != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Mid))
	}
	if len(m.OpenId) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.OpenId)))
		i += copy(dAtA[i:], m.OpenId)
	}
	return i, nil
}

func encodeVarintApi(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *EmptyReply) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *Info) Size() (n int) {
	var l int
	_ = l
	if m.Mid != 0 {
		n += 1 + sovApi(uint64(m.Mid))
	}
	l = len(m.Platform)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.UnionId)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Expires != 0 {
		n += 1 + sovApi(uint64(m.Expires))
	}
	return n
}

func (m *GetAuthorizeURLReq) Size() (n int) {
	var l int
	_ = l
	l = len(m.AppId)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Platform)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.RedirectUrl)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Display)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}

func (m *GetAuthorizeURLReply) Size() (n int) {
	var l int
	_ = l
	l = len(m.Url)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}

func (m *BindReq) Size() (n int) {
	var l int
	_ = l
	if m.Mid != 0 {
		n += 1 + sovApi(uint64(m.Mid))
	}
	l = len(m.Code)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.AppId)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Platform)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.RedirectUrl)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}

func (m *UnbindReq) Size() (n int) {
	var l int
	_ = l
	if m.Mid != 0 {
		n += 1 + sovApi(uint64(m.Mid))
	}
	l = len(m.AppId)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Platform)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}

func (m *GetInfoReq) Size() (n int) {
	var l int
	_ = l
	if m.Mid != 0 {
		n += 1 + sovApi(uint64(m.Mid))
	}
	return n
}

func (m *GetInfoReply) Size() (n int) {
	var l int
	_ = l
	if len(m.Infos) > 0 {
		for _, e := range m.Infos {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	return n
}

func (m *GetInfoByCodeReq) Size() (n int) {
	var l int
	_ = l
	l = len(m.Code)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.AppId)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Platform)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.RedirectUrl)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}

func (m *GetInfoByCodeReply) Size() (n int) {
	var l int
	_ = l
	if m.Mid != 0 {
		n += 1 + sovApi(uint64(m.Mid))
	}
	l = len(m.UnionId)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.OpenId)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Expires != 0 {
		n += 1 + sovApi(uint64(m.Expires))
	}
	l = len(m.Token)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}

func (m *UpdateInfoReq) Size() (n int) {
	var l int
	_ = l
	l = len(m.Platform)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.AppId)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Mid != 0 {
		n += 1 + sovApi(uint64(m.Mid))
	}
	l = len(m.OpenId)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}

func sovApi(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozApi(x uint64) (n int) {
	return sovApi(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *EmptyReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EmptyReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EmptyReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Info) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Info: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Info: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Platform", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Platform = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnionId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UnionId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Expires", wireType)
			}
			m.Expires = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Expires |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetAuthorizeURLReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetAuthorizeURLReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetAuthorizeURLReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AppId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Platform", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Platform = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RedirectUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RedirectUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Display", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Display = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetAuthorizeURLReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetAuthorizeURLReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetAuthorizeURLReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Url", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Url = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BindReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BindReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BindReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Code = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AppId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Platform", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Platform = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RedirectUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RedirectUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UnbindReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UnbindReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UnbindReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AppId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Platform", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Platform = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetInfoReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetInfoReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetInfoReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetInfoReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetInfoReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetInfoReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Infos", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Infos = append(m.Infos, &Info{})
			if err := m.Infos[len(m.Infos)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetInfoByCodeReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetInfoByCodeReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetInfoByCodeReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Code = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AppId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Platform", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Platform = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RedirectUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RedirectUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetInfoByCodeReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetInfoByCodeReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetInfoByCodeReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnionId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UnionId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OpenId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OpenId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Expires", wireType)
			}
			m.Expires = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Expires |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateInfoReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateInfoReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateInfoReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Platform", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Platform = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AppId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OpenId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OpenId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipApi(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowApi
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowApi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowApi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthApi
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowApi
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipApi(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthApi = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowApi   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("app/service/main/passport-sns/api/api.proto", fileDescriptorApi) }

var fileDescriptorApi = []byte{
	// 904 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x56, 0xcd, 0x8f, 0xdb, 0x44,
	0x14, 0x97, 0xe3, 0x6c, 0xd2, 0xbc, 0x4d, 0xa1, 0x8c, 0x7a, 0x08, 0x11, 0xdd, 0x49, 0x67, 0xbf,
	0xa2, 0x7e, 0xc4, 0xa2, 0x20, 0x21, 0xb5, 0x12, 0x12, 0xae, 0x50, 0xb5, 0x02, 0x55, 0xc8, 0xd5,
	0x5e, 0xb8, 0xac, 0xbc, 0xeb, 0xd9, 0x74, 0x84, 0x33, 0x33, 0xf5, 0xc7, 0xaa, 0xe1, 0x06, 0x17,
	0x4e, 0x9c, 0x40, 0x42, 0x20, 0xf1, 0x37, 0xf0, 0x4f, 0x70, 0x40, 0x9c, 0x90, 0xb8, 0x5b, 0x68,
	0xc5, 0x29, 0x47, 0xff, 0x05, 0x68, 0x66, 0xec, 0xac, 0xe9, 0x3a, 0x4b, 0x48, 0x7a, 0x48, 0x3c,
	0x7e, 0xf3, 0xbe, 0xe6, 0xf7, 0xde, 0xfb, 0x8d, 0xe1, 0xae, 0x2f, 0xa5, 0x13, 0xd3, 0xe8, 0x8c,
	0x9d, 0x50, 0x67, 0xe2, 0x33, 0xee, 0x48, 0x3f, 0x8e, 0xa5, 0x88, 0x92, 0xfb, 0x31, 0x8f, 0x1d,
	0x5f, 0x32, 0xf5, 0x1b, 0xc9, 0x48, 0x24, 0x02, 0xdd, 0x2c, 0xf7, 0x46, 0x85, 0xc5, 0x28, 0xe6,
	0x71, 0xff, 0x9d, 0xb1, 0x10, 0xe3, 0x90, 0x1a, 0x5d, 0xce, 0x45, 0xe2, 0x27, 0x4c, 0xf0, 0xd8,
	0xd8, 0xf4, 0xef, 0x8f, 0x59, 0xf2, 0x3c, 0x3d, 0x1e, 0x9d, 0x88, 0x89, 0x33, 0x16, 0x63, 0xe1,
	0x68, 0xf1, 0x71, 0x7a, 0xaa, 0xdf, 0xf4, 0x8b, 0x5e, 0x19, 0x75, 0xd2, 0x05, 0xf8, 0x78, 0x22,
	0x93, 0xa9, 0x47, 0x65, 0x38, 0x25, 0x3f, 0x59, 0xd0, 0x3c, 0xe0, 0xa7, 0x02, 0xbd, 0x0d, 0xf6,
	0x84, 0x05, 0x3d, 0x6b, 0x60, 0x0d, 0x6d, 0xb7, 0x3d, 0xcb, 0xb0, 0x7a, 0xf5, 0xd4, 0x1f, 0x1a,
	0xc2, 0x35, 0x19, 0xfa, 0xc9, 0xa9, 0x88, 0x26, 0xbd, 0xc6, 0xc0, 0x1a, 0x76, 0xdc, 0xee, 0x2c,
	0xc3, 0x73, 0x99, 0x37, 0x5f, 0xa1, 0x3d, 0xb8, 0x96, 0x72, 0x26, 0xf8, 0x11, 0x0b, 0x7a, 0xb6,
	0xd6, 0xdc, 0x9c, 0x65, 0xb8, 0xad, 0x65, 0x2c, 0xf0, 0xcc, 0xe2, 0x20, 0x40, 0xbb, 0xd0, 0xa6,
	0x2f, 0x25, 0x8b, 0x68, 0xdc, 0x6b, 0xea, 0x80, 0x5a, 0xad, 0x10, 0x79, 0xe5, 0x82, 0x7c, 0xdf,
	0x00, 0xf4, 0x84, 0x26, 0x1f, 0xa5, 0xc9, 0x73, 0x11, 0xb1, 0x2f, 0xe9, 0xa1, 0xf7, 0xa9, 0x47,
	0x5f, 0xa0, 0x47, 0xd0, 0xf2, 0xa5, 0x3c, 0x2a, 0xb2, 0xed, 0xb8, 0x3b, 0x79, 0x86, 0x07, 0x2a,
	0xfe, 0x43, 0xe2, 0x4b, 0xc9, 0x02, 0x32, 0x38, 0xf3, 0x43, 0x16, 0xf8, 0x09, 0x7d, 0x48, 0x22,
	0xfa, 0x22, 0x65, 0x11, 0x0d, 0x88, 0xb7, 0xe1, 0x4b, 0x79, 0x10, 0xa0, 0xc7, 0x97, 0x0e, 0xb3,
	0x9f, 0x67, 0x78, 0xdb, 0x98, 0x97, 0x3b, 0xf5, 0x1e, 0x2e, 0xce, 0xf9, 0x14, 0xba, 0x11, 0x0d,
	0x58, 0x44, 0x4f, 0x92, 0xa3, 0x34, 0x0a, 0x8b, 0xb3, 0xde, 0xcd, 0x33, 0xbc, 0x6f, 0x1c, 0x55,
	0x77, 0xeb, 0x9d, 0x6d, 0x96, 0x2a, 0x87, 0x51, 0x88, 0xee, 0x41, 0x3b, 0x60, 0xb1, 0x0c, 0xfd,
	0xa9, 0xc6, 0xa3, 0xe3, 0xa2, 0x3c, 0xc3, 0x6f, 0x18, 0x57, 0xc5, 0x06, 0xf1, 0x4a, 0x15, 0xf2,
	0x2e, 0xdc, 0xbc, 0x84, 0x8a, 0x0c, 0xa7, 0xaa, 0x84, 0x2a, 0x19, 0x03, 0x8a, 0x2e, 0x61, 0x1a,
	0x85, 0x9e, 0xfa, 0x23, 0xbf, 0x37, 0xa0, 0xed, 0x32, 0x1e, 0x28, 0xf8, 0xde, 0xaf, 0x56, 0x9a,
	0xe4, 0x19, 0xde, 0x32, 0x81, 0x26, 0x8b, 0x90, 0xd3, 0x4d, 0xf0, 0x01, 0x34, 0x4f, 0x44, 0x40,
	0x0b, 0xcc, 0xb6, 0xf3, 0x0c, 0x63, 0x63, 0xa6, 0xa4, 0xf5, 0x76, 0xda, 0xa0, 0x52, 0x2d, 0x7b,
	0xbd, 0x6a, 0x35, 0x5f, 0x57, 0xb5, 0x36, 0xd6, 0xab, 0x16, 0xf9, 0xc5, 0x82, 0xce, 0x21, 0x3f,
	0x5e, 0x0b, 0xce, 0xfd, 0x39, 0x2a, 0x06, 0xd0, 0x1b, 0x79, 0x86, 0xbb, 0x55, 0x54, 0xea, 0x10,
	0xb0, 0x57, 0x44, 0x80, 0xb8, 0x00, 0x4f, 0x68, 0xa2, 0xe6, 0x7c, 0xe5, 0x8c, 0xc9, 0x27, 0xd0,
	0x9d, 0xfb, 0x50, 0xdd, 0xf6, 0x08, 0x36, 0x18, 0x3f, 0x15, 0x71, 0xcf, 0x1a, 0xd8, 0xc3, 0xcd,
	0x07, 0xfd, 0x51, 0x1d, 0x75, 0x8d, 0x94, 0xbe, 0xdb, 0x99, 0x65, 0xd8, 0x28, 0x7b, 0xe6, 0x41,
	0x7e, 0x6e, 0xc0, 0x8d, 0xc2, 0x9b, 0x3b, 0x7d, 0x2c, 0x02, 0xaa, 0xf2, 0x2a, 0x5b, 0xcc, 0x5a,
	0xbd, 0xc5, 0x1a, 0xeb, 0xb5, 0x98, 0xfd, 0xba, 0x5a, 0xac, 0xb9, 0x66, 0x8b, 0xfd, 0x6a, 0x69,
	0xe6, 0xab, 0xe2, 0x53, 0x4c, 0xf8, 0x22, 0x92, 0xae, 0x52, 0x6f, 0xe3, 0x0a, 0xea, 0xdd, 0x86,
	0xb6, 0x90, 0xb4, 0xc2, 0xd0, 0x30, 0xcb, 0x70, 0x4b, 0x89, 0x58, 0xe0, 0xe9, 0xe7, 0xd2, 0xfc,
	0x8c, 0x30, 0x6c, 0x24, 0xe2, 0x0b, 0xca, 0x8b, 0x89, 0xd2, 0x65, 0xd6, 0x02, 0xcf, 0x3c, 0xc8,
	0x37, 0x0d, 0xb8, 0x7e, 0x28, 0xd5, 0x49, 0xcb, 0xde, 0xab, 0xa2, 0x6d, 0xad, 0x8a, 0xf6, 0x5a,
	0xf5, 0x2e, 0xba, 0xdf, 0xfe, 0x7f, 0xf3, 0xfa, 0xe1, 0x05, 0x6c, 0xa6, 0xb6, 0xbb, 0x79, 0x86,
	0x6f, 0x1b, 0x4b, 0x03, 0x5e, 0xbd, 0x71, 0x81, 0xe8, 0x83, 0x1f, 0x5b, 0xb0, 0xf9, 0x59, 0x31,
	0x20, 0xcf, 0x9e, 0x3e, 0x43, 0x3f, 0x58, 0xf0, 0xe6, 0x2b, 0x24, 0x8e, 0x86, 0xf5, 0x23, 0x74,
	0xf9, 0x06, 0xec, 0xdf, 0x59, 0x52, 0x53, 0xdd, 0xf0, 0xa3, 0xaf, 0xff, 0xfc, 0xfb, 0xbb, 0xc6,
	0x10, 0xed, 0x39, 0x2f, 0x1d, 0xc6, 0x13, 0x1a, 0x71, 0x3f, 0x7c, 0xe5, 0x13, 0xa4, 0xb4, 0x71,
	0xd2, 0x28, 0x44, 0x1c, 0x9a, 0xea, 0xa6, 0x40, 0xb7, 0xea, 0x63, 0x14, 0xb7, 0x48, 0x7f, 0x50,
	0xbf, 0x5d, 0xf9, 0xb4, 0xd8, 0xd5, 0x81, 0x31, 0xb9, 0xb5, 0x30, 0xb0, 0xa2, 0x50, 0x94, 0x40,
	0xcb, 0x90, 0x29, 0xc2, 0xf5, 0x2e, 0xe7, 0x54, 0xbb, 0x44, 0xcc, 0x7d, 0x1d, 0xf3, 0x36, 0xc1,
	0x0b, 0x63, 0xa6, 0x26, 0xd6, 0x19, 0xb4, 0x8b, 0xf9, 0x42, 0x83, 0x85, 0x60, 0x16, 0x4d, 0xdb,
	0x27, 0xff, 0xa1, 0x51, 0x39, 0x2d, 0x5a, 0x7c, 0x5a, 0xc5, 0x7c, 0xe8, 0x5b, 0x0b, 0xae, 0xff,
	0x6b, 0xb0, 0xd1, 0xde, 0x95, 0xce, 0xe7, 0xec, 0xd8, 0x1f, 0x2e, 0xa5, 0xa7, 0x52, 0xb9, 0xa3,
	0x53, 0xd9, 0x41, 0xe4, 0xca, 0x54, 0x1c, 0x4d, 0x9d, 0x5f, 0x59, 0x00, 0x17, 0x13, 0x8a, 0xb6,
	0x17, 0x94, 0xa0, 0x3a, 0xc3, 0x4b, 0x94, 0xe1, 0x9e, 0xce, 0x60, 0x8f, 0xec, 0x5c, 0x9d, 0x41,
	0xaa, 0xdd, 0xba, 0x6f, 0xfd, 0x76, 0xbe, 0x65, 0xfd, 0x71, 0xbe, 0x65, 0xfd, 0x75, 0xbe, 0x65,
	0x7d, 0x6e, 0xfb, 0x92, 0x1d, 0xb7, 0xf4, 0xb7, 0xea, 0x7b, 0xff, 0x04, 0x00, 0x00, 0xff, 0xff,
	0x83, 0x6b, 0xfa, 0x69, 0x3d, 0x0b, 0x00, 0x00,
}
