// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: proto.proto

package model

/*

	v0.1.0

	Report
*/

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import go_common_library_time "go-common/library/time"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Report struct {
	ID                   int64                       `protobuf:"varint,1,opt,name=ID,proto3" json:"id"`
	Oid                  int64                       `protobuf:"varint,2,opt,name=Oid,proto3" json:"oid"`
	Type                 int32                       `protobuf:"varint,3,opt,name=Type,proto3" json:"type"`
	Tid                  int64                       `protobuf:"varint,4,opt,name=Tid,proto3" json:"tid"`
	Mid                  int64                       `protobuf:"varint,5,opt,name=Mid,proto3" json:"mid"`
	TypeID               int32                       `protobuf:"varint,6,opt,name=TypeID,proto3" json:"type_id"`
	Action               int32                       `protobuf:"varint,7,opt,name=Action,proto3" json:"action"`
	Count                int32                       `protobuf:"varint,8,opt,name=Count,proto3" json:"count"`
	Reason               int32                       `protobuf:"varint,9,opt,name=Reason,proto3" json:"reason"`
	Content              string                      `protobuf:"bytes,10,opt,name=Content,proto3" json:"content"`
	State                int32                       `protobuf:"varint,11,opt,name=State,proto3" json:"state"`
	CTime                go_common_library_time.Time `protobuf:"varint,12,opt,name=CTime,proto3,casttype=go-common/library/time.Time" json:"ctime"`
	MTime                go_common_library_time.Time `protobuf:"varint,13,opt,name=MTime,proto3,casttype=go-common/library/time.Time" json:"-"`
	Score                int32                       `protobuf:"varint,14,opt,name=Score,proto3" json:"score"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_unrecognized     []byte                      `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *Report) Reset()         { *m = Report{} }
func (m *Report) String() string { return proto.CompactTextString(m) }
func (*Report) ProtoMessage()    {}
func (*Report) Descriptor() ([]byte, []int) {
	return fileDescriptor_proto_f168852c82260923, []int{0}
}
func (m *Report) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Report) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Report.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Report) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Report.Merge(dst, src)
}
func (m *Report) XXX_Size() int {
	return m.Size()
}
func (m *Report) XXX_DiscardUnknown() {
	xxx_messageInfo_Report.DiscardUnknown(m)
}

var xxx_messageInfo_Report proto.InternalMessageInfo

type ReportUser struct {
	ID                   int64                       `protobuf:"varint,1,opt,name=ID,proto3" json:"id"`
	RptID                int64                       `protobuf:"varint,2,opt,name=RptID,proto3" json:"rpt"`
	Mid                  int64                       `protobuf:"varint,3,opt,name=Mid,proto3" json:"mid"`
	Attr                 int32                       `protobuf:"varint,4,opt,name=Attr,proto3" json:"Attr"`
	Content              string                      `protobuf:"bytes,5,opt,name=Content,proto3" json:"content"`
	State                int32                       `protobuf:"varint,6,opt,name=State,proto3" json:"state"`
	CTime                go_common_library_time.Time `protobuf:"varint,7,opt,name=CTime,proto3,casttype=go-common/library/time.Time" json:"ctime"`
	MTime                go_common_library_time.Time `protobuf:"varint,8,opt,name=MTime,proto3,casttype=go-common/library/time.Time" json:"-"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_unrecognized     []byte                      `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *ReportUser) Reset()         { *m = ReportUser{} }
func (m *ReportUser) String() string { return proto.CompactTextString(m) }
func (*ReportUser) ProtoMessage()    {}
func (*ReportUser) Descriptor() ([]byte, []int) {
	return fileDescriptor_proto_f168852c82260923, []int{1}
}
func (m *ReportUser) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReportUser) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReportUser.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ReportUser) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReportUser.Merge(dst, src)
}
func (m *ReportUser) XXX_Size() int {
	return m.Size()
}
func (m *ReportUser) XXX_DiscardUnknown() {
	xxx_messageInfo_ReportUser.DiscardUnknown(m)
}

var xxx_messageInfo_ReportUser proto.InternalMessageInfo

type Tag struct {
	ID                   int64                       `protobuf:"varint,1,opt,name=ID,proto3" json:"id"`
	Type                 int32                       `protobuf:"varint,2,opt,name=Type,proto3" json:"type"`
	Name                 string                      `protobuf:"bytes,3,opt,name=Name,proto3" json:"name"`
	Cover                string                      `protobuf:"bytes,4,opt,name=Cover,proto3" json:"cover"`
	Content              string                      `protobuf:"bytes,5,opt,name=Content,proto3" json:"content"`
	Verify               int32                       `protobuf:"varint,6,opt,name=Verify,proto3" json:"-"`
	Attr                 int32                       `protobuf:"varint,7,opt,name=Attr,proto3" json:"-"`
	Attention            int32                       `protobuf:"varint,8,opt,name=Attention,proto3" json:"attention"`
	State                int32                       `protobuf:"varint,9,opt,name=State,proto3" json:"-"`
	CTime                go_common_library_time.Time `protobuf:"varint,10,opt,name=CTime,proto3,casttype=go-common/library/time.Time" json:"ctime"`
	MTime                go_common_library_time.Time `protobuf:"varint,11,opt,name=MTime,proto3,casttype=go-common/library/time.Time" json:"-"`
	HeadCover            string                      `protobuf:"bytes,12,opt,name=head_cover,json=headCover,proto3" json:"head_cover"`
	ShortContent         string                      `protobuf:"bytes,13,opt,name=short_content,json=shortContent,proto3" json:"short_content"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_unrecognized     []byte                      `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *Tag) Reset()         { *m = Tag{} }
func (m *Tag) String() string { return proto.CompactTextString(m) }
func (*Tag) ProtoMessage()    {}
func (*Tag) Descriptor() ([]byte, []int) {
	return fileDescriptor_proto_f168852c82260923, []int{2}
}
func (m *Tag) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Tag) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Tag.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Tag) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Tag.Merge(dst, src)
}
func (m *Tag) XXX_Size() int {
	return m.Size()
}
func (m *Tag) XXX_DiscardUnknown() {
	xxx_messageInfo_Tag.DiscardUnknown(m)
}

var xxx_messageInfo_Tag proto.InternalMessageInfo

type TagSimilar struct {
	TypeID               int64    `protobuf:"varint,1,opt,name=TypeID,proto3" json:"type_id"`
	TypeName             string   `protobuf:"bytes,2,opt,name=TypeName,proto3" json:"type_name"`
	Tag                  *Tag     `protobuf:"bytes,3,opt,name=Tag" json:"tag"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TagSimilar) Reset()         { *m = TagSimilar{} }
func (m *TagSimilar) String() string { return proto.CompactTextString(m) }
func (*TagSimilar) ProtoMessage()    {}
func (*TagSimilar) Descriptor() ([]byte, []int) {
	return fileDescriptor_proto_f168852c82260923, []int{3}
}
func (m *TagSimilar) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TagSimilar) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TagSimilar.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *TagSimilar) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TagSimilar.Merge(dst, src)
}
func (m *TagSimilar) XXX_Size() int {
	return m.Size()
}
func (m *TagSimilar) XXX_DiscardUnknown() {
	xxx_messageInfo_TagSimilar.DiscardUnknown(m)
}

var xxx_messageInfo_TagSimilar proto.InternalMessageInfo

type TagSimilars struct {
	Tag                  *Tag          `protobuf:"bytes,1,opt,name=Tag" json:"tag"`
	Similars             []*TagSimilar `protobuf:"bytes,2,rep,name=Similars" json:"similars"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *TagSimilars) Reset()         { *m = TagSimilars{} }
func (m *TagSimilars) String() string { return proto.CompactTextString(m) }
func (*TagSimilars) ProtoMessage()    {}
func (*TagSimilars) Descriptor() ([]byte, []int) {
	return fileDescriptor_proto_f168852c82260923, []int{4}
}
func (m *TagSimilars) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TagSimilars) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TagSimilars.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *TagSimilars) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TagSimilars.Merge(dst, src)
}
func (m *TagSimilars) XXX_Size() int {
	return m.Size()
}
func (m *TagSimilars) XXX_DiscardUnknown() {
	xxx_messageInfo_TagSimilars.DiscardUnknown(m)
}

var xxx_messageInfo_TagSimilars proto.InternalMessageInfo

type Count struct {
	ID                   int64                       `protobuf:"varint,1,opt,name=ID,proto3" json:"id,omitempty"`
	Tid                  int64                       `protobuf:"varint,2,opt,name=Tid,proto3" json:"tid,omitempty"`
	Bind                 int64                       `protobuf:"varint,3,opt,name=Bind,proto3" json:"bind,omitempty"`
	Sub                  int64                       `protobuf:"varint,4,opt,name=Sub,proto3" json:"sub,omitempty"`
	CTime                go_common_library_time.Time `protobuf:"varint,5,opt,name=CTime,proto3,casttype=go-common/library/time.Time" json:"ctime"`
	MTime                go_common_library_time.Time `protobuf:"varint,6,opt,name=MTime,proto3,casttype=go-common/library/time.Time" json:"-"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_unrecognized     []byte                      `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *Count) Reset()         { *m = Count{} }
func (m *Count) String() string { return proto.CompactTextString(m) }
func (*Count) ProtoMessage()    {}
func (*Count) Descriptor() ([]byte, []int) {
	return fileDescriptor_proto_f168852c82260923, []int{5}
}
func (m *Count) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Count) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Count.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Count) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Count.Merge(dst, src)
}
func (m *Count) XXX_Size() int {
	return m.Size()
}
func (m *Count) XXX_DiscardUnknown() {
	xxx_messageInfo_Count.DiscardUnknown(m)
}

var xxx_messageInfo_Count proto.InternalMessageInfo

type Sub struct {
	ID                   int64                       `protobuf:"varint,1,opt,name=ID,proto3" json:"id"`
	Tid                  int64                       `protobuf:"varint,2,opt,name=Tid,proto3" json:"tid"`
	Mid                  int64                       `protobuf:"varint,3,opt,name=Mid,proto3" json:"mid"`
	State                int64                       `protobuf:"varint,4,opt,name=State,proto3" json:"state"`
	CTime                go_common_library_time.Time `protobuf:"varint,5,opt,name=CTime,proto3,casttype=go-common/library/time.Time" json:"ctime"`
	MTime                go_common_library_time.Time `protobuf:"varint,6,opt,name=MTime,proto3,casttype=go-common/library/time.Time" json:"-"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_unrecognized     []byte                      `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *Sub) Reset()         { *m = Sub{} }
func (m *Sub) String() string { return proto.CompactTextString(m) }
func (*Sub) ProtoMessage()    {}
func (*Sub) Descriptor() ([]byte, []int) {
	return fileDescriptor_proto_f168852c82260923, []int{6}
}
func (m *Sub) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Sub) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Sub.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Sub) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Sub.Merge(dst, src)
}
func (m *Sub) XXX_Size() int {
	return m.Size()
}
func (m *Sub) XXX_DiscardUnknown() {
	xxx_messageInfo_Sub.DiscardUnknown(m)
}

var xxx_messageInfo_Sub proto.InternalMessageInfo

type Resource struct {
	ID                   int64                       `protobuf:"varint,1,opt,name=ID,proto3" json:"id"`
	Oid                  int64                       `protobuf:"varint,2,opt,name=Oid,proto3" json:"oid"`
	Type                 int32                       `protobuf:"varint,3,opt,name=Type,proto3" json:"type"`
	Tid                  int64                       `protobuf:"varint,4,opt,name=Tid,proto3" json:"tid"`
	Mid                  int64                       `protobuf:"varint,5,opt,name=Mid,proto3" json:"mid"`
	Role                 int32                       `protobuf:"varint,6,opt,name=Role,proto3" json:"role"`
	Like                 int32                       `protobuf:"varint,7,opt,name=Like,proto3" json:"like"`
	Hate                 int32                       `protobuf:"varint,8,opt,name=Hate,proto3" json:"hate"`
	State                int32                       `protobuf:"varint,9,opt,name=State,proto3" json:"state"`
	Attr                 int32                       `protobuf:"varint,10,opt,name=Attr,proto3" json:"attr"`
	CTime                go_common_library_time.Time `protobuf:"varint,11,opt,name=CTime,proto3,casttype=go-common/library/time.Time" json:"ctime"`
	MTime                go_common_library_time.Time `protobuf:"varint,12,opt,name=MTime,proto3,casttype=go-common/library/time.Time" json:"mtime"`
	PubDate              go_common_library_time.Time `protobuf:"varint,13,opt,name=PubDate,proto3,casttype=go-common/library/time.Time" json:"-"`
	Tag                  *Tag                        `protobuf:"bytes,14,opt,name=Tag" json:"-"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_unrecognized     []byte                      `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *Resource) Reset()         { *m = Resource{} }
func (m *Resource) String() string { return proto.CompactTextString(m) }
func (*Resource) ProtoMessage()    {}
func (*Resource) Descriptor() ([]byte, []int) {
	return fileDescriptor_proto_f168852c82260923, []int{7}
}
func (m *Resource) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Resource) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Resource.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Resource) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Resource.Merge(dst, src)
}
func (m *Resource) XXX_Size() int {
	return m.Size()
}
func (m *Resource) XXX_DiscardUnknown() {
	xxx_messageInfo_Resource.DiscardUnknown(m)
}

var xxx_messageInfo_Resource proto.InternalMessageInfo

type ResourceAction struct {
	ID                   int64                       `protobuf:"varint,1,opt,name=ID,proto3" json:"id"`
	Oid                  int64                       `protobuf:"varint,2,opt,name=Oid,proto3" json:"oid"`
	Type                 int32                       `protobuf:"varint,3,opt,name=Type,proto3" json:"type"`
	Tid                  int64                       `protobuf:"varint,4,opt,name=Tid,proto3" json:"tid"`
	Mid                  int64                       `protobuf:"varint,5,opt,name=Mid,proto3" json:"mid"`
	Action               int32                       `protobuf:"varint,6,opt,name=Action,proto3" json:"action"`
	CTime                go_common_library_time.Time `protobuf:"varint,7,opt,name=CTime,proto3,casttype=go-common/library/time.Time" json:"ctime"`
	MTime                go_common_library_time.Time `protobuf:"varint,8,opt,name=MTime,proto3,casttype=go-common/library/time.Time" json:"-"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_unrecognized     []byte                      `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *ResourceAction) Reset()         { *m = ResourceAction{} }
func (m *ResourceAction) String() string { return proto.CompactTextString(m) }
func (*ResourceAction) ProtoMessage()    {}
func (*ResourceAction) Descriptor() ([]byte, []int) {
	return fileDescriptor_proto_f168852c82260923, []int{8}
}
func (m *ResourceAction) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResourceAction) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResourceAction.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ResourceAction) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResourceAction.Merge(dst, src)
}
func (m *ResourceAction) XXX_Size() int {
	return m.Size()
}
func (m *ResourceAction) XXX_DiscardUnknown() {
	xxx_messageInfo_ResourceAction.DiscardUnknown(m)
}

var xxx_messageInfo_ResourceAction proto.InternalMessageInfo

type ResourceLimit struct {
	ID                   int64                       `protobuf:"varint,1,opt,name=ID,proto3" json:"id"`
	Oid                  int64                       `protobuf:"varint,2,opt,name=Oid,proto3" json:"oid"`
	Type                 int32                       `protobuf:"varint,3,opt,name=Type,proto3" json:"type"`
	State                int32                       `protobuf:"varint,4,opt,name=State,proto3" json:"state"`
	Attr                 int32                       `protobuf:"varint,5,opt,name=Attr,proto3" json:"attr"`
	CTime                go_common_library_time.Time `protobuf:"varint,6,opt,name=CTime,proto3,casttype=go-common/library/time.Time" json:"ctime"`
	MTime                go_common_library_time.Time `protobuf:"varint,7,opt,name=MTime,proto3,casttype=go-common/library/time.Time" json:"-"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_unrecognized     []byte                      `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *ResourceLimit) Reset()         { *m = ResourceLimit{} }
func (m *ResourceLimit) String() string { return proto.CompactTextString(m) }
func (*ResourceLimit) ProtoMessage()    {}
func (*ResourceLimit) Descriptor() ([]byte, []int) {
	return fileDescriptor_proto_f168852c82260923, []int{9}
}
func (m *ResourceLimit) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResourceLimit) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResourceLimit.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ResourceLimit) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResourceLimit.Merge(dst, src)
}
func (m *ResourceLimit) XXX_Size() int {
	return m.Size()
}
func (m *ResourceLimit) XXX_DiscardUnknown() {
	xxx_messageInfo_ResourceLimit.DiscardUnknown(m)
}

var xxx_messageInfo_ResourceLimit proto.InternalMessageInfo

type ResourceLog struct {
	ID                   int64                       `protobuf:"varint,1,opt,name=ID,proto3" json:"id"`
	Oid                  int64                       `protobuf:"varint,2,opt,name=Oid,proto3" json:"oid"`
	Type                 int32                       `protobuf:"varint,3,opt,name=Type,proto3" json:"type"`
	Tid                  int64                       `protobuf:"varint,4,opt,name=Tid,proto3" json:"tid"`
	Mid                  int64                       `protobuf:"varint,5,opt,name=Mid,proto3" json:"mid"`
	Role                 int32                       `protobuf:"varint,6,opt,name=Role,proto3" json:"role"`
	Action               int32                       `protobuf:"varint,7,opt,name=Action,proto3" json:"action"`
	Remark               string                      `protobuf:"bytes,8,opt,name=Remark,proto3" json:"remark"`
	State                int32                       `protobuf:"varint,9,opt,name=State,proto3" json:"state"`
	CTime                go_common_library_time.Time `protobuf:"varint,10,opt,name=CTime,proto3,casttype=go-common/library/time.Time" json:"ctime"`
	MTime                go_common_library_time.Time `protobuf:"varint,11,opt,name=MTime,proto3,casttype=go-common/library/time.Time" json:"-"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_unrecognized     []byte                      `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *ResourceLog) Reset()         { *m = ResourceLog{} }
func (m *ResourceLog) String() string { return proto.CompactTextString(m) }
func (*ResourceLog) ProtoMessage()    {}
func (*ResourceLog) Descriptor() ([]byte, []int) {
	return fileDescriptor_proto_f168852c82260923, []int{10}
}
func (m *ResourceLog) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResourceLog) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResourceLog.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ResourceLog) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResourceLog.Merge(dst, src)
}
func (m *ResourceLog) XXX_Size() int {
	return m.Size()
}
func (m *ResourceLog) XXX_DiscardUnknown() {
	xxx_messageInfo_ResourceLog.DiscardUnknown(m)
}

var xxx_messageInfo_ResourceLog proto.InternalMessageInfo

type Channel struct {
	ID                   int64                       `protobuf:"varint,1,opt,name=ID,proto3" json:"id"`
	Type                 int64                       `protobuf:"varint,2,opt,name=Type,proto3" json:"type"`
	Operator             string                      `protobuf:"bytes,3,opt,name=Operator,proto3" json:"-"`
	Rank                 int32                       `protobuf:"varint,4,opt,name=Rank,proto3" json:"rank"`
	Attr                 int32                       `protobuf:"varint,5,opt,name=Attr,proto3" json:"attr"`
	State                int32                       `protobuf:"varint,6,opt,name=State,proto3" json:"state"`
	CTime                go_common_library_time.Time `protobuf:"varint,7,opt,name=CTime,proto3,casttype=go-common/library/time.Time" json:"ctime"`
	MTime                go_common_library_time.Time `protobuf:"varint,8,opt,name=MTime,proto3,casttype=go-common/library/time.Time" json:"-"`
	TopRank              int32                       `protobuf:"varint,9,opt,name=TopRank,proto3" json:"top_rank"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_unrecognized     []byte                      `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *Channel) Reset()         { *m = Channel{} }
func (m *Channel) String() string { return proto.CompactTextString(m) }
func (*Channel) ProtoMessage()    {}
func (*Channel) Descriptor() ([]byte, []int) {
	return fileDescriptor_proto_f168852c82260923, []int{11}
}
func (m *Channel) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Channel) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Channel.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Channel) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Channel.Merge(dst, src)
}
func (m *Channel) XXX_Size() int {
	return m.Size()
}
func (m *Channel) XXX_DiscardUnknown() {
	xxx_messageInfo_Channel.DiscardUnknown(m)
}

var xxx_messageInfo_Channel proto.InternalMessageInfo

type ChannelCategory struct {
	ID                   int64                       `protobuf:"varint,1,opt,name=ID,proto3" json:"id"`
	Name                 string                      `protobuf:"bytes,2,opt,name=Name,proto3" json:"name"`
	State                int32                       `protobuf:"varint,3,opt,name=State,proto3" json:"-"`
	CTime                go_common_library_time.Time `protobuf:"varint,4,opt,name=CTime,proto3,casttype=go-common/library/time.Time" json:"ctime"`
	MTime                go_common_library_time.Time `protobuf:"varint,5,opt,name=MTime,proto3,casttype=go-common/library/time.Time" json:"-"`
	Order                int32                       `protobuf:"varint,6,opt,name=Order,proto3" json:"order"`
	Attr                 int32                       `protobuf:"varint,7,opt,name=Attr,proto3" json:"attr"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_unrecognized     []byte                      `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *ChannelCategory) Reset()         { *m = ChannelCategory{} }
func (m *ChannelCategory) String() string { return proto.CompactTextString(m) }
func (*ChannelCategory) ProtoMessage()    {}
func (*ChannelCategory) Descriptor() ([]byte, []int) {
	return fileDescriptor_proto_f168852c82260923, []int{12}
}
func (m *ChannelCategory) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChannelCategory) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChannelCategory.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ChannelCategory) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChannelCategory.Merge(dst, src)
}
func (m *ChannelCategory) XXX_Size() int {
	return m.Size()
}
func (m *ChannelCategory) XXX_DiscardUnknown() {
	xxx_messageInfo_ChannelCategory.DiscardUnknown(m)
}

var xxx_messageInfo_ChannelCategory proto.InternalMessageInfo

type ChannelRule struct {
	Tid                  int64    `protobuf:"varint,1,opt,name=Tid,proto3" json:"tid"`
	InRule               string   `protobuf:"bytes,2,opt,name=in_rule,json=inRule,proto3" json:"in_rule"`
	NotinRule            string   `protobuf:"bytes,3,opt,name=notin_rule,json=notinRule,proto3" json:"notin_rule"`
	InRuleName           string   `protobuf:"bytes,4,opt,name=in_rule_name,json=inRuleName,proto3" json:"-"`
	NotinRuleName        string   `protobuf:"bytes,5,opt,name=notin_rule_name,json=notinRuleName,proto3" json:"-"`
	RuleName             string   `protobuf:"bytes,6,opt,name=rule_name,json=ruleName,proto3" json:"rule_name"`
	Id                   int64    `protobuf:"varint,7,opt,name=id,proto3" json:"id"`
	State                int32    `protobuf:"varint,8,opt,name=state,proto3" json:"state"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ChannelRule) Reset()         { *m = ChannelRule{} }
func (m *ChannelRule) String() string { return proto.CompactTextString(m) }
func (*ChannelRule) ProtoMessage()    {}
func (*ChannelRule) Descriptor() ([]byte, []int) {
	return fileDescriptor_proto_f168852c82260923, []int{13}
}
func (m *ChannelRule) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChannelRule) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChannelRule.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ChannelRule) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChannelRule.Merge(dst, src)
}
func (m *ChannelRule) XXX_Size() int {
	return m.Size()
}
func (m *ChannelRule) XXX_DiscardUnknown() {
	xxx_messageInfo_ChannelRule.DiscardUnknown(m)
}

var xxx_messageInfo_ChannelRule proto.InternalMessageInfo

type ChannelGroup struct {
	Id                   int64                       `protobuf:"varint,1,opt,name=id,proto3" json:"id"`
	Ptid                 int64                       `protobuf:"varint,2,opt,name=ptid,proto3" json:"ptid"`
	Tid                  int64                       `protobuf:"varint,3,opt,name=tid,proto3" json:"tid"`
	Alias                string                      `protobuf:"bytes,4,opt,name=alias,proto3" json:"alias"`
	Rank                 string                      `protobuf:"bytes,5,opt,name=rank,proto3" json:"rank"`
	CTime                go_common_library_time.Time `protobuf:"varint,6,opt,name=CTime,proto3,casttype=go-common/library/time.Time" json:"ctime"`
	MTime                go_common_library_time.Time `protobuf:"varint,7,opt,name=MTime,proto3,casttype=go-common/library/time.Time" json:"-"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_unrecognized     []byte                      `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *ChannelGroup) Reset()         { *m = ChannelGroup{} }
func (m *ChannelGroup) String() string { return proto.CompactTextString(m) }
func (*ChannelGroup) ProtoMessage()    {}
func (*ChannelGroup) Descriptor() ([]byte, []int) {
	return fileDescriptor_proto_f168852c82260923, []int{14}
}
func (m *ChannelGroup) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChannelGroup) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChannelGroup.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ChannelGroup) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChannelGroup.Merge(dst, src)
}
func (m *ChannelGroup) XXX_Size() int {
	return m.Size()
}
func (m *ChannelGroup) XXX_DiscardUnknown() {
	xxx_messageInfo_ChannelGroup.DiscardUnknown(m)
}

var xxx_messageInfo_ChannelGroup proto.InternalMessageInfo

func init() {
	proto.RegisterType((*Report)(nil), "model.Report")
	proto.RegisterType((*ReportUser)(nil), "model.ReportUser")
	proto.RegisterType((*Tag)(nil), "model.Tag")
	proto.RegisterType((*TagSimilar)(nil), "model.TagSimilar")
	proto.RegisterType((*TagSimilars)(nil), "model.TagSimilars")
	proto.RegisterType((*Count)(nil), "model.Count")
	proto.RegisterType((*Sub)(nil), "model.Sub")
	proto.RegisterType((*Resource)(nil), "model.Resource")
	proto.RegisterType((*ResourceAction)(nil), "model.ResourceAction")
	proto.RegisterType((*ResourceLimit)(nil), "model.ResourceLimit")
	proto.RegisterType((*ResourceLog)(nil), "model.ResourceLog")
	proto.RegisterType((*Channel)(nil), "model.Channel")
	proto.RegisterType((*ChannelCategory)(nil), "model.ChannelCategory")
	proto.RegisterType((*ChannelRule)(nil), "model.ChannelRule")
	proto.RegisterType((*ChannelGroup)(nil), "model.ChannelGroup")
}
func (m *Report) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Report) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintProto(dAtA, i, uint64(m.ID))
	}
	if m.Oid != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintProto(dAtA, i, uint64(m.Oid))
	}
	if m.Type != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintProto(dAtA, i, uint64(m.Type))
	}
	if m.Tid != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintProto(dAtA, i, uint64(m.Tid))
	}
	if m.Mid != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintProto(dAtA, i, uint64(m.Mid))
	}
	if m.TypeID != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintProto(dAtA, i, uint64(m.TypeID))
	}
	if m.Action != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintProto(dAtA, i, uint64(m.Action))
	}
	if m.Count != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintProto(dAtA, i, uint64(m.Count))
	}
	if m.Reason != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintProto(dAtA, i, uint64(m.Reason))
	}
	if len(m.Content) > 0 {
		dAtA[i] = 0x52
		i++
		i = encodeVarintProto(dAtA, i, uint64(len(m.Content)))
		i += copy(dAtA[i:], m.Content)
	}
	if m.State != 0 {
		dAtA[i] = 0x58
		i++
		i = encodeVarintProto(dAtA, i, uint64(m.State))
	}
	if m.CTime != 0 {
		dAtA[i] = 0x60
		i++
		i = encodeVarintProto(dAtA, i, uint64(m.CTime))
	}
	if m.MTime != 0 {
		dAtA[i] = 0x68
		i++
		i = encodeVarintProto(dAtA, i, uint64(m.MTime))
	}
	if m.Score != 0 {
		dAtA[i] = 0x70
		i++
		i = encodeVarintProto(dAtA, i, uint64(m.Score))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ReportUser) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReportUser) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintProto(dAtA, i, uint64(m.ID))
	}
	if m.RptID != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintProto(dAtA, i, uint64(m.RptID))
	}
	if m.Mid != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintProto(dAtA, i, uint64(m.Mid))
	}
	if m.Attr != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintProto(dAtA, i, uint64(m.Attr))
	}
	if len(m.Content) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintProto(dAtA, i, uint64(len(m.Content)))
		i += copy(dAtA[i:], m.Content)
	}
	if m.State != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintProto(dAtA, i, uint64(m.State))
	}
	if m.CTime != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintProto(dAtA, i, uint64(m.CTime))
	}
	if m.MTime != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintProto(dAtA, i, uint64(m.MTime))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Tag) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Tag) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintProto(dAtA, i, uint64(m.ID))
	}
	if m.Type != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintProto(dAtA, i, uint64(m.Type))
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintProto(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.Cover) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintProto(dAtA, i, uint64(len(m.Cover)))
		i += copy(dAtA[i:], m.Cover)
	}
	if len(m.Content) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintProto(dAtA, i, uint64(len(m.Content)))
		i += copy(dAtA[i:], m.Content)
	}
	if m.Verify != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintProto(dAtA, i, uint64(m.Verify))
	}
	if m.Attr != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintProto(dAtA, i, uint64(m.Attr))
	}
	if m.Attention != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintProto(dAtA, i, uint64(m.Attention))
	}
	if m.State != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintProto(dAtA, i, uint64(m.State))
	}
	if m.CTime != 0 {
		dAtA[i] = 0x50
		i++
		i = encodeVarintProto(dAtA, i, uint64(m.CTime))
	}
	if m.MTime != 0 {
		dAtA[i] = 0x58
		i++
		i = encodeVarintProto(dAtA, i, uint64(m.MTime))
	}
	if len(m.HeadCover) > 0 {
		dAtA[i] = 0x62
		i++
		i = encodeVarintProto(dAtA, i, uint64(len(m.HeadCover)))
		i += copy(dAtA[i:], m.HeadCover)
	}
	if len(m.ShortContent) > 0 {
		dAtA[i] = 0x6a
		i++
		i = encodeVarintProto(dAtA, i, uint64(len(m.ShortContent)))
		i += copy(dAtA[i:], m.ShortContent)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *TagSimilar) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TagSimilar) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.TypeID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintProto(dAtA, i, uint64(m.TypeID))
	}
	if len(m.TypeName) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintProto(dAtA, i, uint64(len(m.TypeName)))
		i += copy(dAtA[i:], m.TypeName)
	}
	if m.Tag != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintProto(dAtA, i, uint64(m.Tag.Size()))
		n1, err := m.Tag.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *TagSimilars) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TagSimilars) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Tag != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintProto(dAtA, i, uint64(m.Tag.Size()))
		n2, err := m.Tag.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if len(m.Similars) > 0 {
		for _, msg := range m.Similars {
			dAtA[i] = 0x12
			i++
			i = encodeVarintProto(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Count) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Count) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintProto(dAtA, i, uint64(m.ID))
	}
	if m.Tid != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintProto(dAtA, i, uint64(m.Tid))
	}
	if m.Bind != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintProto(dAtA, i, uint64(m.Bind))
	}
	if m.Sub != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintProto(dAtA, i, uint64(m.Sub))
	}
	if m.CTime != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintProto(dAtA, i, uint64(m.CTime))
	}
	if m.MTime != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintProto(dAtA, i, uint64(m.MTime))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Sub) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Sub) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintProto(dAtA, i, uint64(m.ID))
	}
	if m.Tid != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintProto(dAtA, i, uint64(m.Tid))
	}
	if m.Mid != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintProto(dAtA, i, uint64(m.Mid))
	}
	if m.State != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintProto(dAtA, i, uint64(m.State))
	}
	if m.CTime != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintProto(dAtA, i, uint64(m.CTime))
	}
	if m.MTime != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintProto(dAtA, i, uint64(m.MTime))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Resource) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Resource) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintProto(dAtA, i, uint64(m.ID))
	}
	if m.Oid != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintProto(dAtA, i, uint64(m.Oid))
	}
	if m.Type != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintProto(dAtA, i, uint64(m.Type))
	}
	if m.Tid != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintProto(dAtA, i, uint64(m.Tid))
	}
	if m.Mid != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintProto(dAtA, i, uint64(m.Mid))
	}
	if m.Role != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintProto(dAtA, i, uint64(m.Role))
	}
	if m.Like != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintProto(dAtA, i, uint64(m.Like))
	}
	if m.Hate != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintProto(dAtA, i, uint64(m.Hate))
	}
	if m.State != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintProto(dAtA, i, uint64(m.State))
	}
	if m.Attr != 0 {
		dAtA[i] = 0x50
		i++
		i = encodeVarintProto(dAtA, i, uint64(m.Attr))
	}
	if m.CTime != 0 {
		dAtA[i] = 0x58
		i++
		i = encodeVarintProto(dAtA, i, uint64(m.CTime))
	}
	if m.MTime != 0 {
		dAtA[i] = 0x60
		i++
		i = encodeVarintProto(dAtA, i, uint64(m.MTime))
	}
	if m.PubDate != 0 {
		dAtA[i] = 0x68
		i++
		i = encodeVarintProto(dAtA, i, uint64(m.PubDate))
	}
	if m.Tag != nil {
		dAtA[i] = 0x72
		i++
		i = encodeVarintProto(dAtA, i, uint64(m.Tag.Size()))
		n3, err := m.Tag.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ResourceAction) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResourceAction) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintProto(dAtA, i, uint64(m.ID))
	}
	if m.Oid != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintProto(dAtA, i, uint64(m.Oid))
	}
	if m.Type != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintProto(dAtA, i, uint64(m.Type))
	}
	if m.Tid != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintProto(dAtA, i, uint64(m.Tid))
	}
	if m.Mid != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintProto(dAtA, i, uint64(m.Mid))
	}
	if m.Action != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintProto(dAtA, i, uint64(m.Action))
	}
	if m.CTime != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintProto(dAtA, i, uint64(m.CTime))
	}
	if m.MTime != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintProto(dAtA, i, uint64(m.MTime))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ResourceLimit) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResourceLimit) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintProto(dAtA, i, uint64(m.ID))
	}
	if m.Oid != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintProto(dAtA, i, uint64(m.Oid))
	}
	if m.Type != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintProto(dAtA, i, uint64(m.Type))
	}
	if m.State != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintProto(dAtA, i, uint64(m.State))
	}
	if m.Attr != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintProto(dAtA, i, uint64(m.Attr))
	}
	if m.CTime != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintProto(dAtA, i, uint64(m.CTime))
	}
	if m.MTime != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintProto(dAtA, i, uint64(m.MTime))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ResourceLog) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResourceLog) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintProto(dAtA, i, uint64(m.ID))
	}
	if m.Oid != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintProto(dAtA, i, uint64(m.Oid))
	}
	if m.Type != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintProto(dAtA, i, uint64(m.Type))
	}
	if m.Tid != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintProto(dAtA, i, uint64(m.Tid))
	}
	if m.Mid != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintProto(dAtA, i, uint64(m.Mid))
	}
	if m.Role != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintProto(dAtA, i, uint64(m.Role))
	}
	if m.Action != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintProto(dAtA, i, uint64(m.Action))
	}
	if len(m.Remark) > 0 {
		dAtA[i] = 0x42
		i++
		i = encodeVarintProto(dAtA, i, uint64(len(m.Remark)))
		i += copy(dAtA[i:], m.Remark)
	}
	if m.State != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintProto(dAtA, i, uint64(m.State))
	}
	if m.CTime != 0 {
		dAtA[i] = 0x50
		i++
		i = encodeVarintProto(dAtA, i, uint64(m.CTime))
	}
	if m.MTime != 0 {
		dAtA[i] = 0x58
		i++
		i = encodeVarintProto(dAtA, i, uint64(m.MTime))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Channel) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Channel) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintProto(dAtA, i, uint64(m.ID))
	}
	if m.Type != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintProto(dAtA, i, uint64(m.Type))
	}
	if len(m.Operator) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintProto(dAtA, i, uint64(len(m.Operator)))
		i += copy(dAtA[i:], m.Operator)
	}
	if m.Rank != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintProto(dAtA, i, uint64(m.Rank))
	}
	if m.Attr != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintProto(dAtA, i, uint64(m.Attr))
	}
	if m.State != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintProto(dAtA, i, uint64(m.State))
	}
	if m.CTime != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintProto(dAtA, i, uint64(m.CTime))
	}
	if m.MTime != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintProto(dAtA, i, uint64(m.MTime))
	}
	if m.TopRank != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintProto(dAtA, i, uint64(m.TopRank))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ChannelCategory) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChannelCategory) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintProto(dAtA, i, uint64(m.ID))
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintProto(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if m.State != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintProto(dAtA, i, uint64(m.State))
	}
	if m.CTime != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintProto(dAtA, i, uint64(m.CTime))
	}
	if m.MTime != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintProto(dAtA, i, uint64(m.MTime))
	}
	if m.Order != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintProto(dAtA, i, uint64(m.Order))
	}
	if m.Attr != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintProto(dAtA, i, uint64(m.Attr))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ChannelRule) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChannelRule) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Tid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintProto(dAtA, i, uint64(m.Tid))
	}
	if len(m.InRule) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintProto(dAtA, i, uint64(len(m.InRule)))
		i += copy(dAtA[i:], m.InRule)
	}
	if len(m.NotinRule) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintProto(dAtA, i, uint64(len(m.NotinRule)))
		i += copy(dAtA[i:], m.NotinRule)
	}
	if len(m.InRuleName) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintProto(dAtA, i, uint64(len(m.InRuleName)))
		i += copy(dAtA[i:], m.InRuleName)
	}
	if len(m.NotinRuleName) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintProto(dAtA, i, uint64(len(m.NotinRuleName)))
		i += copy(dAtA[i:], m.NotinRuleName)
	}
	if len(m.RuleName) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintProto(dAtA, i, uint64(len(m.RuleName)))
		i += copy(dAtA[i:], m.RuleName)
	}
	if m.Id != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintProto(dAtA, i, uint64(m.Id))
	}
	if m.State != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintProto(dAtA, i, uint64(m.State))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ChannelGroup) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChannelGroup) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintProto(dAtA, i, uint64(m.Id))
	}
	if m.Ptid != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintProto(dAtA, i, uint64(m.Ptid))
	}
	if m.Tid != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintProto(dAtA, i, uint64(m.Tid))
	}
	if len(m.Alias) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintProto(dAtA, i, uint64(len(m.Alias)))
		i += copy(dAtA[i:], m.Alias)
	}
	if len(m.Rank) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintProto(dAtA, i, uint64(len(m.Rank)))
		i += copy(dAtA[i:], m.Rank)
	}
	if m.CTime != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintProto(dAtA, i, uint64(m.CTime))
	}
	if m.MTime != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintProto(dAtA, i, uint64(m.MTime))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintProto(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Report) Size() (n int) {
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovProto(uint64(m.ID))
	}
	if m.Oid != 0 {
		n += 1 + sovProto(uint64(m.Oid))
	}
	if m.Type != 0 {
		n += 1 + sovProto(uint64(m.Type))
	}
	if m.Tid != 0 {
		n += 1 + sovProto(uint64(m.Tid))
	}
	if m.Mid != 0 {
		n += 1 + sovProto(uint64(m.Mid))
	}
	if m.TypeID != 0 {
		n += 1 + sovProto(uint64(m.TypeID))
	}
	if m.Action != 0 {
		n += 1 + sovProto(uint64(m.Action))
	}
	if m.Count != 0 {
		n += 1 + sovProto(uint64(m.Count))
	}
	if m.Reason != 0 {
		n += 1 + sovProto(uint64(m.Reason))
	}
	l = len(m.Content)
	if l > 0 {
		n += 1 + l + sovProto(uint64(l))
	}
	if m.State != 0 {
		n += 1 + sovProto(uint64(m.State))
	}
	if m.CTime != 0 {
		n += 1 + sovProto(uint64(m.CTime))
	}
	if m.MTime != 0 {
		n += 1 + sovProto(uint64(m.MTime))
	}
	if m.Score != 0 {
		n += 1 + sovProto(uint64(m.Score))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ReportUser) Size() (n int) {
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovProto(uint64(m.ID))
	}
	if m.RptID != 0 {
		n += 1 + sovProto(uint64(m.RptID))
	}
	if m.Mid != 0 {
		n += 1 + sovProto(uint64(m.Mid))
	}
	if m.Attr != 0 {
		n += 1 + sovProto(uint64(m.Attr))
	}
	l = len(m.Content)
	if l > 0 {
		n += 1 + l + sovProto(uint64(l))
	}
	if m.State != 0 {
		n += 1 + sovProto(uint64(m.State))
	}
	if m.CTime != 0 {
		n += 1 + sovProto(uint64(m.CTime))
	}
	if m.MTime != 0 {
		n += 1 + sovProto(uint64(m.MTime))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Tag) Size() (n int) {
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovProto(uint64(m.ID))
	}
	if m.Type != 0 {
		n += 1 + sovProto(uint64(m.Type))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovProto(uint64(l))
	}
	l = len(m.Cover)
	if l > 0 {
		n += 1 + l + sovProto(uint64(l))
	}
	l = len(m.Content)
	if l > 0 {
		n += 1 + l + sovProto(uint64(l))
	}
	if m.Verify != 0 {
		n += 1 + sovProto(uint64(m.Verify))
	}
	if m.Attr != 0 {
		n += 1 + sovProto(uint64(m.Attr))
	}
	if m.Attention != 0 {
		n += 1 + sovProto(uint64(m.Attention))
	}
	if m.State != 0 {
		n += 1 + sovProto(uint64(m.State))
	}
	if m.CTime != 0 {
		n += 1 + sovProto(uint64(m.CTime))
	}
	if m.MTime != 0 {
		n += 1 + sovProto(uint64(m.MTime))
	}
	l = len(m.HeadCover)
	if l > 0 {
		n += 1 + l + sovProto(uint64(l))
	}
	l = len(m.ShortContent)
	if l > 0 {
		n += 1 + l + sovProto(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TagSimilar) Size() (n int) {
	var l int
	_ = l
	if m.TypeID != 0 {
		n += 1 + sovProto(uint64(m.TypeID))
	}
	l = len(m.TypeName)
	if l > 0 {
		n += 1 + l + sovProto(uint64(l))
	}
	if m.Tag != nil {
		l = m.Tag.Size()
		n += 1 + l + sovProto(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TagSimilars) Size() (n int) {
	var l int
	_ = l
	if m.Tag != nil {
		l = m.Tag.Size()
		n += 1 + l + sovProto(uint64(l))
	}
	if len(m.Similars) > 0 {
		for _, e := range m.Similars {
			l = e.Size()
			n += 1 + l + sovProto(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Count) Size() (n int) {
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovProto(uint64(m.ID))
	}
	if m.Tid != 0 {
		n += 1 + sovProto(uint64(m.Tid))
	}
	if m.Bind != 0 {
		n += 1 + sovProto(uint64(m.Bind))
	}
	if m.Sub != 0 {
		n += 1 + sovProto(uint64(m.Sub))
	}
	if m.CTime != 0 {
		n += 1 + sovProto(uint64(m.CTime))
	}
	if m.MTime != 0 {
		n += 1 + sovProto(uint64(m.MTime))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Sub) Size() (n int) {
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovProto(uint64(m.ID))
	}
	if m.Tid != 0 {
		n += 1 + sovProto(uint64(m.Tid))
	}
	if m.Mid != 0 {
		n += 1 + sovProto(uint64(m.Mid))
	}
	if m.State != 0 {
		n += 1 + sovProto(uint64(m.State))
	}
	if m.CTime != 0 {
		n += 1 + sovProto(uint64(m.CTime))
	}
	if m.MTime != 0 {
		n += 1 + sovProto(uint64(m.MTime))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Resource) Size() (n int) {
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovProto(uint64(m.ID))
	}
	if m.Oid != 0 {
		n += 1 + sovProto(uint64(m.Oid))
	}
	if m.Type != 0 {
		n += 1 + sovProto(uint64(m.Type))
	}
	if m.Tid != 0 {
		n += 1 + sovProto(uint64(m.Tid))
	}
	if m.Mid != 0 {
		n += 1 + sovProto(uint64(m.Mid))
	}
	if m.Role != 0 {
		n += 1 + sovProto(uint64(m.Role))
	}
	if m.Like != 0 {
		n += 1 + sovProto(uint64(m.Like))
	}
	if m.Hate != 0 {
		n += 1 + sovProto(uint64(m.Hate))
	}
	if m.State != 0 {
		n += 1 + sovProto(uint64(m.State))
	}
	if m.Attr != 0 {
		n += 1 + sovProto(uint64(m.Attr))
	}
	if m.CTime != 0 {
		n += 1 + sovProto(uint64(m.CTime))
	}
	if m.MTime != 0 {
		n += 1 + sovProto(uint64(m.MTime))
	}
	if m.PubDate != 0 {
		n += 1 + sovProto(uint64(m.PubDate))
	}
	if m.Tag != nil {
		l = m.Tag.Size()
		n += 1 + l + sovProto(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ResourceAction) Size() (n int) {
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovProto(uint64(m.ID))
	}
	if m.Oid != 0 {
		n += 1 + sovProto(uint64(m.Oid))
	}
	if m.Type != 0 {
		n += 1 + sovProto(uint64(m.Type))
	}
	if m.Tid != 0 {
		n += 1 + sovProto(uint64(m.Tid))
	}
	if m.Mid != 0 {
		n += 1 + sovProto(uint64(m.Mid))
	}
	if m.Action != 0 {
		n += 1 + sovProto(uint64(m.Action))
	}
	if m.CTime != 0 {
		n += 1 + sovProto(uint64(m.CTime))
	}
	if m.MTime != 0 {
		n += 1 + sovProto(uint64(m.MTime))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ResourceLimit) Size() (n int) {
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovProto(uint64(m.ID))
	}
	if m.Oid != 0 {
		n += 1 + sovProto(uint64(m.Oid))
	}
	if m.Type != 0 {
		n += 1 + sovProto(uint64(m.Type))
	}
	if m.State != 0 {
		n += 1 + sovProto(uint64(m.State))
	}
	if m.Attr != 0 {
		n += 1 + sovProto(uint64(m.Attr))
	}
	if m.CTime != 0 {
		n += 1 + sovProto(uint64(m.CTime))
	}
	if m.MTime != 0 {
		n += 1 + sovProto(uint64(m.MTime))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ResourceLog) Size() (n int) {
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovProto(uint64(m.ID))
	}
	if m.Oid != 0 {
		n += 1 + sovProto(uint64(m.Oid))
	}
	if m.Type != 0 {
		n += 1 + sovProto(uint64(m.Type))
	}
	if m.Tid != 0 {
		n += 1 + sovProto(uint64(m.Tid))
	}
	if m.Mid != 0 {
		n += 1 + sovProto(uint64(m.Mid))
	}
	if m.Role != 0 {
		n += 1 + sovProto(uint64(m.Role))
	}
	if m.Action != 0 {
		n += 1 + sovProto(uint64(m.Action))
	}
	l = len(m.Remark)
	if l > 0 {
		n += 1 + l + sovProto(uint64(l))
	}
	if m.State != 0 {
		n += 1 + sovProto(uint64(m.State))
	}
	if m.CTime != 0 {
		n += 1 + sovProto(uint64(m.CTime))
	}
	if m.MTime != 0 {
		n += 1 + sovProto(uint64(m.MTime))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Channel) Size() (n int) {
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovProto(uint64(m.ID))
	}
	if m.Type != 0 {
		n += 1 + sovProto(uint64(m.Type))
	}
	l = len(m.Operator)
	if l > 0 {
		n += 1 + l + sovProto(uint64(l))
	}
	if m.Rank != 0 {
		n += 1 + sovProto(uint64(m.Rank))
	}
	if m.Attr != 0 {
		n += 1 + sovProto(uint64(m.Attr))
	}
	if m.State != 0 {
		n += 1 + sovProto(uint64(m.State))
	}
	if m.CTime != 0 {
		n += 1 + sovProto(uint64(m.CTime))
	}
	if m.MTime != 0 {
		n += 1 + sovProto(uint64(m.MTime))
	}
	if m.TopRank != 0 {
		n += 1 + sovProto(uint64(m.TopRank))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ChannelCategory) Size() (n int) {
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovProto(uint64(m.ID))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovProto(uint64(l))
	}
	if m.State != 0 {
		n += 1 + sovProto(uint64(m.State))
	}
	if m.CTime != 0 {
		n += 1 + sovProto(uint64(m.CTime))
	}
	if m.MTime != 0 {
		n += 1 + sovProto(uint64(m.MTime))
	}
	if m.Order != 0 {
		n += 1 + sovProto(uint64(m.Order))
	}
	if m.Attr != 0 {
		n += 1 + sovProto(uint64(m.Attr))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ChannelRule) Size() (n int) {
	var l int
	_ = l
	if m.Tid != 0 {
		n += 1 + sovProto(uint64(m.Tid))
	}
	l = len(m.InRule)
	if l > 0 {
		n += 1 + l + sovProto(uint64(l))
	}
	l = len(m.NotinRule)
	if l > 0 {
		n += 1 + l + sovProto(uint64(l))
	}
	l = len(m.InRuleName)
	if l > 0 {
		n += 1 + l + sovProto(uint64(l))
	}
	l = len(m.NotinRuleName)
	if l > 0 {
		n += 1 + l + sovProto(uint64(l))
	}
	l = len(m.RuleName)
	if l > 0 {
		n += 1 + l + sovProto(uint64(l))
	}
	if m.Id != 0 {
		n += 1 + sovProto(uint64(m.Id))
	}
	if m.State != 0 {
		n += 1 + sovProto(uint64(m.State))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ChannelGroup) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovProto(uint64(m.Id))
	}
	if m.Ptid != 0 {
		n += 1 + sovProto(uint64(m.Ptid))
	}
	if m.Tid != 0 {
		n += 1 + sovProto(uint64(m.Tid))
	}
	l = len(m.Alias)
	if l > 0 {
		n += 1 + l + sovProto(uint64(l))
	}
	l = len(m.Rank)
	if l > 0 {
		n += 1 + l + sovProto(uint64(l))
	}
	if m.CTime != 0 {
		n += 1 + sovProto(uint64(m.CTime))
	}
	if m.MTime != 0 {
		n += 1 + sovProto(uint64(m.MTime))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovProto(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozProto(x uint64) (n int) {
	return sovProto(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Report) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProto
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Report: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Report: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Oid", wireType)
			}
			m.Oid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Oid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tid", wireType)
			}
			m.Tid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Tid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeID", wireType)
			}
			m.TypeID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TypeID |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Action", wireType)
			}
			m.Action = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Action |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reason", wireType)
			}
			m.Reason = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Reason |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProto
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Content = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CTime", wireType)
			}
			m.CTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CTime |= (go_common_library_time.Time(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MTime", wireType)
			}
			m.MTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MTime |= (go_common_library_time.Time(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Score", wireType)
			}
			m.Score = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Score |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipProto(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProto
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReportUser) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProto
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReportUser: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReportUser: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RptID", wireType)
			}
			m.RptID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RptID |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attr", wireType)
			}
			m.Attr = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Attr |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProto
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Content = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CTime", wireType)
			}
			m.CTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CTime |= (go_common_library_time.Time(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MTime", wireType)
			}
			m.MTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MTime |= (go_common_library_time.Time(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipProto(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProto
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Tag) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProto
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Tag: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Tag: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProto
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cover", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProto
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cover = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProto
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Content = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Verify", wireType)
			}
			m.Verify = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Verify |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attr", wireType)
			}
			m.Attr = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Attr |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attention", wireType)
			}
			m.Attention = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Attention |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CTime", wireType)
			}
			m.CTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CTime |= (go_common_library_time.Time(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MTime", wireType)
			}
			m.MTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MTime |= (go_common_library_time.Time(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeadCover", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProto
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HeadCover = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShortContent", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProto
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ShortContent = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProto(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProto
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TagSimilar) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProto
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TagSimilar: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TagSimilar: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeID", wireType)
			}
			m.TypeID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TypeID |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProto
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TypeName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tag", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProto
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Tag == nil {
				m.Tag = &Tag{}
			}
			if err := m.Tag.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProto(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProto
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TagSimilars) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProto
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TagSimilars: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TagSimilars: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tag", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProto
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Tag == nil {
				m.Tag = &Tag{}
			}
			if err := m.Tag.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Similars", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProto
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Similars = append(m.Similars, &TagSimilar{})
			if err := m.Similars[len(m.Similars)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProto(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProto
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Count) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProto
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Count: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Count: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tid", wireType)
			}
			m.Tid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Tid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bind", wireType)
			}
			m.Bind = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Bind |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sub", wireType)
			}
			m.Sub = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sub |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CTime", wireType)
			}
			m.CTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CTime |= (go_common_library_time.Time(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MTime", wireType)
			}
			m.MTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MTime |= (go_common_library_time.Time(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipProto(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProto
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Sub) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProto
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Sub: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Sub: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tid", wireType)
			}
			m.Tid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Tid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CTime", wireType)
			}
			m.CTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CTime |= (go_common_library_time.Time(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MTime", wireType)
			}
			m.MTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MTime |= (go_common_library_time.Time(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipProto(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProto
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Resource) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProto
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Resource: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Resource: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Oid", wireType)
			}
			m.Oid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Oid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tid", wireType)
			}
			m.Tid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Tid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Role", wireType)
			}
			m.Role = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Role |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Like", wireType)
			}
			m.Like = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Like |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hate", wireType)
			}
			m.Hate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Hate |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attr", wireType)
			}
			m.Attr = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Attr |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CTime", wireType)
			}
			m.CTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CTime |= (go_common_library_time.Time(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MTime", wireType)
			}
			m.MTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MTime |= (go_common_library_time.Time(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PubDate", wireType)
			}
			m.PubDate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PubDate |= (go_common_library_time.Time(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tag", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProto
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Tag == nil {
				m.Tag = &Tag{}
			}
			if err := m.Tag.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProto(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProto
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResourceAction) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProto
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResourceAction: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResourceAction: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Oid", wireType)
			}
			m.Oid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Oid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tid", wireType)
			}
			m.Tid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Tid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Action", wireType)
			}
			m.Action = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Action |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CTime", wireType)
			}
			m.CTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CTime |= (go_common_library_time.Time(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MTime", wireType)
			}
			m.MTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MTime |= (go_common_library_time.Time(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipProto(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProto
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResourceLimit) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProto
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResourceLimit: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResourceLimit: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Oid", wireType)
			}
			m.Oid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Oid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attr", wireType)
			}
			m.Attr = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Attr |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CTime", wireType)
			}
			m.CTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CTime |= (go_common_library_time.Time(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MTime", wireType)
			}
			m.MTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MTime |= (go_common_library_time.Time(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipProto(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProto
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResourceLog) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProto
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResourceLog: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResourceLog: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Oid", wireType)
			}
			m.Oid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Oid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tid", wireType)
			}
			m.Tid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Tid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Role", wireType)
			}
			m.Role = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Role |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Action", wireType)
			}
			m.Action = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Action |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Remark", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProto
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Remark = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CTime", wireType)
			}
			m.CTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CTime |= (go_common_library_time.Time(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MTime", wireType)
			}
			m.MTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MTime |= (go_common_library_time.Time(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipProto(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProto
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Channel) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProto
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Channel: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Channel: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Operator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProto
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Operator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rank", wireType)
			}
			m.Rank = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Rank |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attr", wireType)
			}
			m.Attr = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Attr |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CTime", wireType)
			}
			m.CTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CTime |= (go_common_library_time.Time(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MTime", wireType)
			}
			m.MTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MTime |= (go_common_library_time.Time(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopRank", wireType)
			}
			m.TopRank = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TopRank |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipProto(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProto
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChannelCategory) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProto
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChannelCategory: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChannelCategory: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProto
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CTime", wireType)
			}
			m.CTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CTime |= (go_common_library_time.Time(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MTime", wireType)
			}
			m.MTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MTime |= (go_common_library_time.Time(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Order", wireType)
			}
			m.Order = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Order |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attr", wireType)
			}
			m.Attr = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Attr |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipProto(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProto
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChannelRule) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProto
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChannelRule: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChannelRule: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tid", wireType)
			}
			m.Tid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Tid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InRule", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProto
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InRule = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NotinRule", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProto
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NotinRule = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InRuleName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProto
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InRuleName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NotinRuleName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProto
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NotinRuleName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RuleName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProto
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RuleName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipProto(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProto
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChannelGroup) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProto
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChannelGroup: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChannelGroup: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ptid", wireType)
			}
			m.Ptid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ptid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tid", wireType)
			}
			m.Tid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Tid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Alias", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProto
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Alias = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rank", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProto
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Rank = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CTime", wireType)
			}
			m.CTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CTime |= (go_common_library_time.Time(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MTime", wireType)
			}
			m.MTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MTime |= (go_common_library_time.Time(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipProto(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProto
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipProto(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowProto
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowProto
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowProto
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthProto
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowProto
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipProto(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthProto = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowProto   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("proto.proto", fileDescriptor_proto_f168852c82260923) }

var fileDescriptor_proto_f168852c82260923 = []byte{
	// 1333 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xd4, 0x58, 0xcb, 0x6f, 0x1b, 0x45,
	0x18, 0xaf, 0xd7, 0xde, 0xb5, 0xf7, 0x73, 0x92, 0xd2, 0x3d, 0x54, 0x5b, 0x9a, 0x66, 0x83, 0xfb,
	0x20, 0x3c, 0x92, 0x48, 0x45, 0xe2, 0x00, 0x52, 0xa5, 0x3a, 0x91, 0x20, 0x52, 0x43, 0xd1, 0xc4,
	0x70, 0x8d, 0xd6, 0xde, 0xa9, 0x33, 0x8a, 0x77, 0xc7, 0x8c, 0xc7, 0x95, 0x72, 0x85, 0x0b, 0x37,
	0x8e, 0x45, 0x70, 0xe0, 0xcf, 0x40, 0xe2, 0xc4, 0xb1, 0xc7, 0xfe, 0x05, 0x2b, 0xda, 0xde, 0xf6,
	0xc4, 0x99, 0x13, 0x9a, 0x6f, 0x66, 0x1f, 0x69, 0x13, 0x27, 0x69, 0x84, 0x52, 0x2e, 0x9b, 0xdd,
	0xdf, 0xf7, 0xf0, 0xcc, 0xef, 0x7b, 0xcc, 0x37, 0x81, 0xf6, 0x58, 0x70, 0xc9, 0xd7, 0xf0, 0xe9,
	0xd9, 0x31, 0x8f, 0xe8, 0xe8, 0xdd, 0xd5, 0x21, 0x93, 0x7b, 0xd3, 0xfe, 0xda, 0x80, 0xc7, 0xeb,
	0x43, 0x3e, 0xe4, 0xeb, 0x28, 0xed, 0x4f, 0x1f, 0xe1, 0x17, 0x7e, 0xe0, 0x9b, 0xb6, 0xea, 0x7c,
	0xdf, 0x00, 0x87, 0xd0, 0x31, 0x17, 0xd2, 0xbb, 0x0a, 0xd6, 0xd6, 0xa6, 0x5f, 0x5b, 0xae, 0xad,
	0xd4, 0xbb, 0x4e, 0x96, 0x06, 0x16, 0x8b, 0x88, 0xb5, 0xb5, 0xe9, 0x5d, 0x83, 0xfa, 0x43, 0x16,
	0xf9, 0x16, 0x0a, 0x9a, 0x59, 0x1a, 0xd4, 0x39, 0x8b, 0x88, 0xc2, 0xbc, 0x45, 0x68, 0xf4, 0x0e,
	0xc6, 0xd4, 0xaf, 0x2f, 0xd7, 0x56, 0xec, 0x6e, 0x2b, 0x4b, 0x83, 0x86, 0x3c, 0x18, 0x53, 0x82,
	0xa8, 0x32, 0xec, 0xb1, 0xc8, 0x6f, 0x94, 0x86, 0x52, 0x19, 0xf6, 0x58, 0xa4, 0x44, 0xdb, 0x2c,
	0xf2, 0xed, 0x52, 0x14, 0x2b, 0xd1, 0x36, 0x8b, 0xbc, 0x9b, 0xe0, 0x28, 0xeb, 0xad, 0x4d, 0xdf,
	0x41, 0xaf, 0xed, 0x2c, 0x0d, 0x9a, 0xca, 0xeb, 0x2e, 0x8b, 0x88, 0x11, 0x79, 0x1d, 0x70, 0xee,
	0x0f, 0x24, 0xe3, 0x89, 0xdf, 0x44, 0x25, 0xc8, 0xd2, 0xc0, 0x09, 0x11, 0x21, 0x46, 0xe2, 0x05,
	0x60, 0x6f, 0xf0, 0x69, 0x22, 0xfd, 0x16, 0xaa, 0xb8, 0x59, 0x1a, 0xd8, 0x03, 0x05, 0x10, 0x8d,
	0x2b, 0x27, 0x84, 0x86, 0x13, 0x9e, 0xf8, 0x6e, 0xe9, 0x44, 0x20, 0x42, 0x8c, 0xc4, 0xbb, 0x0d,
	0xcd, 0x0d, 0x9e, 0x48, 0x9a, 0x48, 0x1f, 0x96, 0x6b, 0x2b, 0xae, 0x5e, 0xce, 0x40, 0x43, 0x24,
	0x97, 0xa9, 0xdf, 0xda, 0x91, 0xa1, 0xa4, 0x7e, 0xbb, 0xfc, 0xad, 0x89, 0x02, 0x88, 0xc6, 0xbd,
	0x7b, 0x60, 0x6f, 0xf4, 0x58, 0x4c, 0xfd, 0x39, 0xdc, 0xf2, 0x0a, 0x2e, 0x46, 0xb2, 0x98, 0xfe,
	0x93, 0x06, 0xd7, 0x87, 0x7c, 0x75, 0xc0, 0xe3, 0x98, 0x27, 0xeb, 0x23, 0xd6, 0x17, 0xa1, 0x38,
	0x58, 0x57, 0x92, 0x35, 0xa5, 0x4f, 0xb4, 0x99, 0xf7, 0x19, 0xd8, 0xdb, 0x68, 0x3f, 0x8f, 0xf6,
	0xb7, 0xb2, 0x34, 0xa8, 0xad, 0x9e, 0x68, 0x8b, 0x26, 0xb8, 0xb8, 0x01, 0x17, 0xd4, 0x5f, 0xa8,
	0x2c, 0x4e, 0x01, 0x44, 0xe3, 0x9d, 0x3f, 0x2d, 0x00, 0x9d, 0x04, 0xdf, 0x4c, 0xa8, 0x38, 0x36,
	0x11, 0x6e, 0x80, 0x4d, 0xc6, 0x72, 0x6b, 0xb3, 0x9a, 0x0a, 0x62, 0x2c, 0x89, 0x46, 0xf3, 0x98,
	0xd6, 0x8f, 0x88, 0xe9, 0x22, 0x34, 0xee, 0x4b, 0x29, 0x30, 0x15, 0x4c, 0x9e, 0xa8, 0x6f, 0x82,
	0xcf, 0x2a, 0xc7, 0xf6, 0x69, 0x38, 0x76, 0x4e, 0xe2, 0xb8, 0x79, 0x4e, 0x8e, 0x5b, 0x67, 0xe6,
	0xb8, 0xf3, 0x63, 0x03, 0xea, 0xbd, 0x70, 0x78, 0x2c, 0x77, 0x79, 0xa5, 0x58, 0x47, 0x56, 0xca,
	0x22, 0x34, 0xbe, 0x0a, 0x63, 0x5d, 0x47, 0xae, 0x96, 0x26, 0x61, 0x4c, 0x09, 0xa2, 0x3a, 0x91,
	0x1f, 0x53, 0x4d, 0x9f, 0x9b, 0x27, 0xf2, 0x63, 0x2a, 0x88, 0xc6, 0x4f, 0x4b, 0xe0, 0x0d, 0x70,
	0xbe, 0xa5, 0x82, 0x3d, 0x3a, 0x30, 0x0c, 0xda, 0xb8, 0x41, 0x62, 0x40, 0xef, 0x9a, 0x09, 0x52,
	0xb3, 0x2a, 0xd4, 0x11, 0xfa, 0x08, 0xdc, 0xfb, 0x52, 0xf9, 0x50, 0x15, 0xa7, 0xcb, 0x69, 0x3e,
	0x4b, 0x03, 0x37, 0xcc, 0x41, 0x52, 0xca, 0xbd, 0xeb, 0x79, 0x9c, 0xdc, 0xaa, 0xa3, 0x57, 0x63,
	0x04, 0xe7, 0x8c, 0x51, 0xfb, 0xec, 0x75, 0xb0, 0x0a, 0xb0, 0x47, 0xc3, 0x68, 0x17, 0xb9, 0xc3,
	0x42, 0x74, 0xbb, 0x0b, 0x59, 0x1a, 0x54, 0x50, 0xe2, 0xaa, 0x77, 0xcd, 0xea, 0xa7, 0x30, 0x3f,
	0xd9, 0xe3, 0x42, 0xee, 0x1a, 0x22, 0xb1, 0xf4, 0xdc, 0xee, 0x95, 0x2c, 0x0d, 0x0e, 0x0b, 0xc8,
	0x1c, 0x7e, 0x1a, 0x9a, 0x3b, 0x3f, 0xd4, 0x00, 0x7a, 0xe1, 0x70, 0x87, 0xc5, 0x6c, 0x14, 0x8a,
	0x4a, 0x3f, 0xd3, 0x59, 0x71, 0x64, 0x3f, 0xfb, 0x00, 0x5a, 0xea, 0x0d, 0x93, 0xc0, 0xc2, 0x9f,
	0x41, 0x7e, 0x51, 0x0d, 0x33, 0xa1, 0x10, 0x7b, 0xb7, 0x31, 0xd1, 0x30, 0x55, 0xda, 0x77, 0x61,
	0x0d, 0xbb, 0xfe, 0x5a, 0x2f, 0x1c, 0x9a, 0x0e, 0x1b, 0x0e, 0x89, 0x92, 0x77, 0xbe, 0x83, 0x76,
	0xb9, 0x88, 0x49, 0x6e, 0x55, 0x9b, 0x6d, 0xe5, 0x7d, 0x0e, 0xad, 0xdc, 0xc4, 0xb7, 0x96, 0xeb,
	0x2b, 0xed, 0xbb, 0x57, 0x4a, 0x5d, 0x23, 0xe9, 0xce, 0x65, 0x69, 0xd0, 0x9a, 0x18, 0x35, 0x52,
	0x18, 0x74, 0x9e, 0x58, 0xa6, 0xe3, 0x7a, 0xcb, 0x95, 0x2a, 0x78, 0x27, 0x4b, 0x83, 0x39, 0x16,
	0x7d, 0xcc, 0x63, 0x26, 0x69, 0x3c, 0x96, 0x07, 0x58, 0x0f, 0x37, 0xf5, 0xd9, 0xa0, 0x3b, 0x09,
	0x52, 0x2a, 0x0f, 0xe9, 0xe0, 0x29, 0x71, 0x07, 0x1a, 0x5d, 0x96, 0xe4, 0x2d, 0xc5, 0xcb, 0xd2,
	0x60, 0xa1, 0xcf, 0x92, 0xaa, 0x1a, 0xca, 0x95, 0xb3, 0x9d, 0x69, 0xdf, 0x1c, 0x34, 0x3a, 0x3e,
	0xd3, 0x7e, 0xd5, 0xd9, 0xce, 0xb4, 0x5f, 0x66, 0x9e, 0x7d, 0xce, 0xcc, 0x73, 0xce, 0xde, 0x1d,
	0xfe, 0xae, 0xe1, 0x0a, 0x67, 0x1d, 0xb1, 0xbd, 0xc3, 0x47, 0xec, 0xab, 0x27, 0xe5, 0x51, 0x5d,
	0xb5, 0x68, 0x88, 0x7a, 0xe3, 0x33, 0x1a, 0xe2, 0x05, 0x6c, 0xf9, 0xa7, 0x06, 0xb4, 0x08, 0x9d,
	0xf0, 0xa9, 0x18, 0xd0, 0xb7, 0x65, 0xb4, 0x58, 0x84, 0x06, 0xe1, 0xa3, 0xfc, 0x00, 0x41, 0x9f,
	0x82, 0x8f, 0x28, 0x41, 0x54, 0x49, 0x1f, 0xb0, 0x7d, 0x6a, 0xfa, 0x1f, 0x4a, 0x47, 0x6c, 0x9f,
	0x12, 0x44, 0x95, 0xf4, 0x4b, 0xc5, 0x75, 0xab, 0x94, 0xee, 0x29, 0xaa, 0x11, 0x2d, 0x43, 0xe1,
	0x1e, 0x73, 0x36, 0xe5, 0x27, 0x20, 0x94, 0xe6, 0x61, 0x79, 0x02, 0x16, 0x81, 0x6a, 0xbf, 0x59,
	0xa0, 0xee, 0xe5, 0x81, 0xaa, 0x4c, 0x17, 0xf1, 0xa9, 0xec, 0xb7, 0x8d, 0x7d, 0xf3, 0xeb, 0x69,
	0x7f, 0x53, 0x6d, 0xe0, 0x2c, 0xf3, 0x45, 0x6e, 0x84, 0xd5, 0x1c, 0x0e, 0x71, 0xbe, 0x38, 0xdc,
	0x5d, 0x4c, 0xf3, 0xc7, 0x8e, 0xf4, 0xbb, 0x05, 0x0b, 0x79, 0x46, 0x98, 0x11, 0xed, 0x2d, 0xc9,
	0x8b, 0x72, 0x9a, 0x74, 0x8e, 0x9d, 0x26, 0x2f, 0x72, 0xb8, 0xf8, 0xd5, 0x82, 0xf9, 0x9c, 0xb9,
	0x07, 0x2c, 0x66, 0xff, 0xc1, 0xac, 0x7e, 0xa8, 0x97, 0xcc, 0x4a, 0x60, 0x7b, 0x76, 0x02, 0x3b,
	0xe7, 0x64, 0xa7, 0x79, 0x76, 0x76, 0x9e, 0xd4, 0xa1, 0x5d, 0xb0, 0xc3, 0x87, 0xff, 0x8f, 0x66,
	0x73, 0x9a, 0x0b, 0x0c, 0xde, 0x4f, 0xe2, 0x50, 0xec, 0x63, 0xce, 0xb8, 0xf9, 0xfd, 0x44, 0x21,
	0xc4, 0x48, 0x4e, 0x6e, 0x3c, 0x17, 0x38, 0x70, 0x75, 0x5e, 0x5a, 0xd0, 0xdc, 0xd8, 0x0b, 0x93,
	0x84, 0x8e, 0x4e, 0x35, 0x18, 0xd7, 0x5f, 0xa3, 0xfe, 0x3d, 0x68, 0x3d, 0x1c, 0x53, 0x11, 0x4a,
	0x2e, 0xcc, 0x70, 0x6c, 0x3a, 0x4a, 0x01, 0x23, 0xcf, 0x61, 0xb2, 0x5f, 0xbd, 0x5b, 0x88, 0x30,
	0xd9, 0x27, 0x88, 0x9e, 0x90, 0xb6, 0x6f, 0xf3, 0x95, 0xc2, 0xbb, 0x03, 0xcd, 0x1e, 0x1f, 0xe3,
	0xde, 0x74, 0x70, 0x71, 0xee, 0x92, 0x7c, 0xbc, 0x8b, 0xfb, 0xcb, 0x85, 0x9d, 0xdf, 0x2c, 0xb8,
	0x6c, 0x58, 0xde, 0x08, 0x25, 0x1d, 0x72, 0x71, 0x30, 0x8b, 0xed, 0xca, 0x8c, 0xf9, 0xea, 0x45,
	0xa3, 0x98, 0xdc, 0xeb, 0xb3, 0x26, 0xf7, 0xc6, 0x39, 0xa9, 0xb0, 0xdf, 0xe8, 0x06, 0xfb, 0x50,
	0x44, 0x54, 0x54, 0xe3, 0xc4, 0x15, 0x40, 0x34, 0x5e, 0x84, 0xb9, 0x79, 0x54, 0x98, 0x3b, 0x7f,
	0x58, 0xd0, 0x36, 0x0c, 0x91, 0xe9, 0xa8, 0x28, 0xe8, 0xda, 0x11, 0x05, 0x7d, 0x0b, 0x9a, 0x2c,
	0xd9, 0x15, 0xd3, 0x51, 0xce, 0x11, 0x8e, 0xeb, 0x06, 0x22, 0x0e, 0x4b, 0xd0, 0xc1, 0x2a, 0x40,
	0xc2, 0x65, 0xae, 0x58, 0x2f, 0x6f, 0x12, 0x25, 0x4a, 0x5c, 0x7c, 0x47, 0xf5, 0xf7, 0x61, 0xce,
	0xa0, 0x38, 0xcc, 0x9b, 0x7b, 0x9c, 0xa1, 0x17, 0xb4, 0x12, 0x06, 0x60, 0x15, 0x2e, 0x97, 0x1e,
	0xb4, 0xae, 0x5d, 0xd5, 0x9d, 0x2f, 0x7c, 0xa2, 0xfa, 0x87, 0xe0, 0x96, 0x8a, 0x4e, 0x79, 0x6d,
	0x28, 0x40, 0xd2, 0x12, 0xb9, 0xee, 0x55, 0xb0, 0x58, 0x64, 0xd2, 0xb8, 0xc8, 0x08, 0x3d, 0x44,
	0x62, 0xc6, 0x57, 0xff, 0x4b, 0x62, 0x4a, 0x00, 0xff, 0x74, 0x7e, 0xb1, 0x60, 0xce, 0x90, 0xf7,
	0x85, 0xe0, 0xd3, 0xb1, 0xf1, 0x54, 0x7b, 0xcd, 0xd3, 0x22, 0x34, 0xc6, 0xb2, 0x68, 0xb0, 0x18,
	0x03, 0xf5, 0x4d, 0xf0, 0xa9, 0x38, 0x97, 0x87, 0xe7, 0x58, 0xe4, 0x5c, 0xea, 0x25, 0x84, 0x23,
	0x16, 0x4e, 0xaa, 0xf7, 0x5b, 0x04, 0x88, 0xfe, 0xa3, 0x3c, 0xab, 0x94, 0x37, 0x5c, 0x54, 0x4a,
	0x5c, 0x3d, 0x2f, 0xf2, 0xec, 0xe9, 0xfa, 0x4f, 0x9f, 0x2f, 0x5d, 0x7a, 0xf6, 0x7c, 0xe9, 0xd2,
	0xd3, 0x17, 0x4b, 0xb5, 0x67, 0x2f, 0x96, 0x6a, 0x7f, 0xbd, 0x58, 0xaa, 0xfd, 0xfc, 0x72, 0xe9,
	0x52, 0xdf, 0xc1, 0xff, 0xaf, 0x7d, 0xf2, 0x6f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xb2, 0xa2, 0xe9,
	0x3f, 0xa4, 0x13, 0x00, 0x00,
}
