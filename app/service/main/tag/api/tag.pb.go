// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: app/service/main/tag/api/tag.proto

package v1

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	go_common_library_time "go-common/library/time"
	io "io"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type Tag struct {
	Id                   int64                       `protobuf:"varint,1,opt,name=id,proto3" json:"id"`
	Type                 int32                       `protobuf:"varint,2,opt,name=type,proto3" json:"type"`
	Name                 string                      `protobuf:"bytes,3,opt,name=name,proto3" json:"name"`
	Cover                string                      `protobuf:"bytes,4,opt,name=cover,proto3" json:"cover"`
	HeadCover            string                      `protobuf:"bytes,5,opt,name=head_cover,json=headCover,proto3" json:"head_cover"`
	Content              string                      `protobuf:"bytes,6,opt,name=content,proto3" json:"content"`
	ShortContent         string                      `protobuf:"bytes,7,opt,name=short_content,json=shortContent,proto3" json:"short_content"`
	Verify               int32                       `protobuf:"varint,8,opt,name=verify,proto3" json:"-"`
	Attr                 int32                       `protobuf:"varint,9,opt,name=attr,proto3" json:"-"`
	Attention            int32                       `protobuf:"varint,10,opt,name=attention,proto3" json:"attention"`
	State                int32                       `protobuf:"varint,11,opt,name=state,proto3" json:"-"`
	Sub                  int64                       `protobuf:"varint,12,opt,name=sub,proto3" json:"sub"`
	Bind                 int64                       `protobuf:"varint,13,opt,name=bind,proto3" json:"bind"`
	Ctime                go_common_library_time.Time `protobuf:"varint,14,opt,name=ctime,proto3,casttype=go-common/library/time.Time" json:"ctime"`
	Mtime                go_common_library_time.Time `protobuf:"varint,15,opt,name=mtime,proto3,casttype=go-common/library/time.Time" json:"-"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_unrecognized     []byte                      `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *Tag) Reset()         { *m = Tag{} }
func (m *Tag) String() string { return proto.CompactTextString(m) }
func (*Tag) ProtoMessage()    {}
func (*Tag) Descriptor() ([]byte, []int) {
	return fileDescriptor_cd9126675eaca27f, []int{0}
}
func (m *Tag) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Tag) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Tag.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Tag) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Tag.Merge(m, src)
}
func (m *Tag) XXX_Size() int {
	return m.Size()
}
func (m *Tag) XXX_DiscardUnknown() {
	xxx_messageInfo_Tag.DiscardUnknown(m)
}

var xxx_messageInfo_Tag proto.InternalMessageInfo

func (m *Tag) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Tag) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *Tag) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Tag) GetCover() string {
	if m != nil {
		return m.Cover
	}
	return ""
}

func (m *Tag) GetHeadCover() string {
	if m != nil {
		return m.HeadCover
	}
	return ""
}

func (m *Tag) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

func (m *Tag) GetShortContent() string {
	if m != nil {
		return m.ShortContent
	}
	return ""
}

func (m *Tag) GetVerify() int32 {
	if m != nil {
		return m.Verify
	}
	return 0
}

func (m *Tag) GetAttr() int32 {
	if m != nil {
		return m.Attr
	}
	return 0
}

func (m *Tag) GetAttention() int32 {
	if m != nil {
		return m.Attention
	}
	return 0
}

func (m *Tag) GetState() int32 {
	if m != nil {
		return m.State
	}
	return 0
}

func (m *Tag) GetSub() int64 {
	if m != nil {
		return m.Sub
	}
	return 0
}

func (m *Tag) GetBind() int64 {
	if m != nil {
		return m.Bind
	}
	return 0
}

func (m *Tag) GetCtime() go_common_library_time.Time {
	if m != nil {
		return m.Ctime
	}
	return 0
}

func (m *Tag) GetMtime() go_common_library_time.Time {
	if m != nil {
		return m.Mtime
	}
	return 0
}

type Resource struct {
	Id                   int64                       `protobuf:"varint,1,opt,name=id,proto3" json:"id"`
	Oid                  int64                       `protobuf:"varint,2,opt,name=oid,proto3" json:"oid"`
	Type                 int32                       `protobuf:"varint,3,opt,name=type,proto3" json:"type"`
	Tid                  int64                       `protobuf:"varint,4,opt,name=tid,proto3" json:"tid"`
	Mid                  int64                       `protobuf:"varint,5,opt,name=mid,proto3" json:"mid"`
	Role                 int32                       `protobuf:"varint,6,opt,name=role,proto3" json:"role"`
	Like                 int32                       `protobuf:"varint,7,opt,name=like,proto3" json:"like"`
	Hate                 int32                       `protobuf:"varint,8,opt,name=hate,proto3" json:"hate"`
	State                int32                       `protobuf:"varint,9,opt,name=state,proto3" json:"state"`
	Attr                 int32                       `protobuf:"varint,10,opt,name=attr,proto3" json:"attr"`
	Ctime                go_common_library_time.Time `protobuf:"varint,11,opt,name=ctime,proto3,casttype=go-common/library/time.Time" json:"ctime"`
	Mtime                go_common_library_time.Time `protobuf:"varint,12,opt,name=mtime,proto3,casttype=go-common/library/time.Time" json:"-"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_unrecognized     []byte                      `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *Resource) Reset()         { *m = Resource{} }
func (m *Resource) String() string { return proto.CompactTextString(m) }
func (*Resource) ProtoMessage()    {}
func (*Resource) Descriptor() ([]byte, []int) {
	return fileDescriptor_cd9126675eaca27f, []int{1}
}
func (m *Resource) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Resource) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Resource.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Resource) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Resource.Merge(m, src)
}
func (m *Resource) XXX_Size() int {
	return m.Size()
}
func (m *Resource) XXX_DiscardUnknown() {
	xxx_messageInfo_Resource.DiscardUnknown(m)
}

var xxx_messageInfo_Resource proto.InternalMessageInfo

func (m *Resource) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Resource) GetOid() int64 {
	if m != nil {
		return m.Oid
	}
	return 0
}

func (m *Resource) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *Resource) GetTid() int64 {
	if m != nil {
		return m.Tid
	}
	return 0
}

func (m *Resource) GetMid() int64 {
	if m != nil {
		return m.Mid
	}
	return 0
}

func (m *Resource) GetRole() int32 {
	if m != nil {
		return m.Role
	}
	return 0
}

func (m *Resource) GetLike() int32 {
	if m != nil {
		return m.Like
	}
	return 0
}

func (m *Resource) GetHate() int32 {
	if m != nil {
		return m.Hate
	}
	return 0
}

func (m *Resource) GetState() int32 {
	if m != nil {
		return m.State
	}
	return 0
}

func (m *Resource) GetAttr() int32 {
	if m != nil {
		return m.Attr
	}
	return 0
}

func (m *Resource) GetCtime() go_common_library_time.Time {
	if m != nil {
		return m.Ctime
	}
	return 0
}

func (m *Resource) GetMtime() go_common_library_time.Time {
	if m != nil {
		return m.Mtime
	}
	return 0
}

func init() {
	proto.RegisterType((*Tag)(nil), "community.service.tag.v1.Tag")
	proto.RegisterType((*Resource)(nil), "community.service.tag.v1.Resource")
}

func init() { proto.RegisterFile("app/service/main/tag/api/tag.proto", fileDescriptor_cd9126675eaca27f) }

var fileDescriptor_cd9126675eaca27f = []byte{
	// 562 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x54, 0xc1, 0x8a, 0xdb, 0x30,
	0x10, 0xc5, 0x71, 0x9c, 0x4d, 0xb4, 0x9b, 0x6d, 0xab, 0x43, 0x51, 0xba, 0xdb, 0x28, 0x84, 0x16,
	0x02, 0x25, 0x31, 0x4b, 0xa1, 0x87, 0x1e, 0x7a, 0xc8, 0xfe, 0x81, 0xd8, 0x53, 0x2f, 0x8b, 0x6c,
	0x6b, 0x1d, 0xd1, 0xc8, 0x0a, 0x8e, 0x12, 0xc8, 0x0f, 0xf5, 0x3f, 0x7a, 0xeb, 0xb1, 0x5f, 0x60,
	0x4a, 0x8e, 0xfe, 0x84, 0x9e, 0xca, 0x8c, 0x9c, 0x4d, 0x0a, 0x2d, 0xa5, 0xf4, 0x32, 0xd6, 0x7b,
	0x6f, 0xde, 0x10, 0x69, 0x1e, 0x21, 0x63, 0xb9, 0x5a, 0xc5, 0x6b, 0x55, 0x6e, 0x75, 0xaa, 0x62,
	0x23, 0x75, 0x11, 0x3b, 0x99, 0xc7, 0x72, 0xa5, 0xe1, 0x3b, 0x5b, 0x95, 0xd6, 0x59, 0xca, 0x52,
	0x6b, 0xcc, 0xa6, 0xd0, 0x6e, 0x37, 0x6b, 0x3a, 0x67, 0x20, 0x6e, 0x6f, 0x5e, 0x4c, 0x73, 0xed,
	0x16, 0x9b, 0x64, 0x96, 0x5a, 0x13, 0xe7, 0x36, 0xb7, 0x31, 0x1a, 0x92, 0xcd, 0x03, 0x22, 0x04,
	0x78, 0xf2, 0x83, 0xc6, 0x5f, 0xda, 0x24, 0xbc, 0x93, 0x39, 0x7d, 0x4e, 0x5a, 0x3a, 0x63, 0xc1,
	0x28, 0x98, 0x84, 0xf3, 0x4e, 0x5d, 0xf1, 0x96, 0xce, 0x44, 0x4b, 0x67, 0xf4, 0x9a, 0xb4, 0xdd,
	0x6e, 0xa5, 0x58, 0x6b, 0x14, 0x4c, 0xa2, 0x79, 0xb7, 0xae, 0x38, 0x62, 0x81, 0x15, 0xd4, 0x42,
	0x1a, 0xc5, 0xc2, 0x51, 0x30, 0xe9, 0x79, 0x15, 0xb0, 0xc0, 0x4a, 0x39, 0x89, 0x52, 0xbb, 0x55,
	0x25, 0x6b, 0xa3, 0xdc, 0xab, 0x2b, 0xee, 0x09, 0xe1, 0x3f, 0x74, 0x4a, 0xc8, 0x42, 0xc9, 0xec,
	0xde, 0x77, 0x45, 0xd8, 0x75, 0x59, 0x57, 0xfc, 0x84, 0x15, 0x3d, 0x38, 0xdf, 0x62, 0xfb, 0x6b,
	0x72, 0x96, 0xda, 0xc2, 0xa9, 0xc2, 0xb1, 0x0e, 0xf6, 0x9e, 0xd7, 0x15, 0x3f, 0x50, 0xe2, 0x70,
	0xa0, 0xef, 0x48, 0x7f, 0xbd, 0xb0, 0xa5, 0xbb, 0x3f, 0x34, 0x9f, 0x61, 0xf3, 0xb3, 0xba, 0xe2,
	0xbf, 0x0a, 0xe2, 0x02, 0xe1, 0x6d, 0xe3, 0x7b, 0x49, 0x3a, 0x5b, 0x55, 0xea, 0x87, 0x1d, 0xeb,
	0xe2, 0x65, 0xa3, 0xba, 0xe2, 0xc1, 0x54, 0x34, 0x24, 0x1d, 0x90, 0xb6, 0x74, 0xae, 0x64, 0xbd,
	0x53, 0x11, 0x29, 0xfa, 0x86, 0xf4, 0xa4, 0x83, 0x19, 0xda, 0x16, 0x8c, 0xa0, 0xde, 0xaf, 0x2b,
	0x7e, 0x24, 0xc5, 0xf1, 0x48, 0xaf, 0x48, 0xb4, 0x76, 0xd2, 0x29, 0x76, 0x7e, 0x3a, 0xc8, 0x73,
	0x74, 0x40, 0xc2, 0xf5, 0x26, 0x61, 0x17, 0xb8, 0x87, 0xb3, 0xba, 0xe2, 0x00, 0x05, 0x14, 0x78,
	0xeb, 0x44, 0x17, 0x19, 0xeb, 0xa3, 0x86, 0x6f, 0x0d, 0x58, 0x60, 0xa5, 0x1f, 0x48, 0x94, 0x3a,
	0x6d, 0x14, 0xbb, 0x44, 0x79, 0x82, 0x6f, 0x0d, 0xc4, 0x8f, 0x8a, 0x5f, 0xe5, 0x76, 0x0a, 0x79,
	0xb1, 0x45, 0xbc, 0xd4, 0x49, 0x29, 0xcb, 0x5d, 0x0c, 0xca, 0xec, 0x4e, 0x1b, 0x25, 0x7c, 0x17,
	0x7d, 0x4f, 0x22, 0x83, 0xfe, 0x27, 0xe8, 0x7f, 0x85, 0xbf, 0xea, 0xaf, 0x5e, 0xb4, 0x8c, 0x3f,
	0x87, 0xa4, 0x2b, 0xd4, 0xda, 0x6e, 0xca, 0x54, 0xfd, 0x31, 0x48, 0x03, 0x12, 0x5a, 0x9d, 0x61,
	0x8e, 0x9a, 0x9b, 0x59, 0x9d, 0x09, 0x28, 0x8f, 0x19, 0x0b, 0x7f, 0x9b, 0xb1, 0x01, 0x09, 0x9d,
	0xce, 0x30, 0x43, 0x8d, 0xd1, 0x81, 0xd1, 0xf9, 0x99, 0x46, 0x67, 0x18, 0x9c, 0x46, 0x32, 0x20,
	0x19, 0x3f, 0xb3, 0xb4, 0x4b, 0x85, 0x41, 0x69, 0x66, 0x02, 0x16, 0x58, 0x41, 0x5d, 0xea, 0x4f,
	0x0a, 0x93, 0xd1, 0xa8, 0x80, 0x05, 0x56, 0x50, 0x17, 0xb0, 0xa0, 0xee, 0x51, 0x05, 0x2c, 0xb0,
	0x42, 0xaa, 0xfd, 0xfe, 0x7c, 0x10, 0x30, 0xd5, 0x48, 0x1c, 0x76, 0x78, 0xdd, 0x04, 0x85, 0x1c,
	0xed, 0x80, 0x9b, 0xac, 0x3c, 0x2e, 0xea, 0xfc, 0x3f, 0x17, 0x75, 0xf1, 0xcf, 0x8b, 0x9a, 0x3f,
	0xfd, 0xba, 0x1f, 0x06, 0xdf, 0xf6, 0xc3, 0xe0, 0xfb, 0x7e, 0x18, 0x7c, 0x6c, 0x6d, 0x6f, 0x92,
	0x0e, 0xfe, 0x0b, 0xbc, 0xfd, 0x19, 0x00, 0x00, 0xff, 0xff, 0xd4, 0x34, 0xc4, 0x35, 0x74, 0x04,
	0x00, 0x00,
}

func (m *Tag) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Tag) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTag(dAtA, i, uint64(m.Id))
	}
	if m.Type != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTag(dAtA, i, uint64(m.Type))
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTag(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.Cover) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintTag(dAtA, i, uint64(len(m.Cover)))
		i += copy(dAtA[i:], m.Cover)
	}
	if len(m.HeadCover) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintTag(dAtA, i, uint64(len(m.HeadCover)))
		i += copy(dAtA[i:], m.HeadCover)
	}
	if len(m.Content) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintTag(dAtA, i, uint64(len(m.Content)))
		i += copy(dAtA[i:], m.Content)
	}
	if len(m.ShortContent) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintTag(dAtA, i, uint64(len(m.ShortContent)))
		i += copy(dAtA[i:], m.ShortContent)
	}
	if m.Verify != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintTag(dAtA, i, uint64(m.Verify))
	}
	if m.Attr != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintTag(dAtA, i, uint64(m.Attr))
	}
	if m.Attention != 0 {
		dAtA[i] = 0x50
		i++
		i = encodeVarintTag(dAtA, i, uint64(m.Attention))
	}
	if m.State != 0 {
		dAtA[i] = 0x58
		i++
		i = encodeVarintTag(dAtA, i, uint64(m.State))
	}
	if m.Sub != 0 {
		dAtA[i] = 0x60
		i++
		i = encodeVarintTag(dAtA, i, uint64(m.Sub))
	}
	if m.Bind != 0 {
		dAtA[i] = 0x68
		i++
		i = encodeVarintTag(dAtA, i, uint64(m.Bind))
	}
	if m.Ctime != 0 {
		dAtA[i] = 0x70
		i++
		i = encodeVarintTag(dAtA, i, uint64(m.Ctime))
	}
	if m.Mtime != 0 {
		dAtA[i] = 0x78
		i++
		i = encodeVarintTag(dAtA, i, uint64(m.Mtime))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Resource) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Resource) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTag(dAtA, i, uint64(m.Id))
	}
	if m.Oid != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTag(dAtA, i, uint64(m.Oid))
	}
	if m.Type != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintTag(dAtA, i, uint64(m.Type))
	}
	if m.Tid != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintTag(dAtA, i, uint64(m.Tid))
	}
	if m.Mid != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintTag(dAtA, i, uint64(m.Mid))
	}
	if m.Role != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintTag(dAtA, i, uint64(m.Role))
	}
	if m.Like != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintTag(dAtA, i, uint64(m.Like))
	}
	if m.Hate != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintTag(dAtA, i, uint64(m.Hate))
	}
	if m.State != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintTag(dAtA, i, uint64(m.State))
	}
	if m.Attr != 0 {
		dAtA[i] = 0x50
		i++
		i = encodeVarintTag(dAtA, i, uint64(m.Attr))
	}
	if m.Ctime != 0 {
		dAtA[i] = 0x58
		i++
		i = encodeVarintTag(dAtA, i, uint64(m.Ctime))
	}
	if m.Mtime != 0 {
		dAtA[i] = 0x60
		i++
		i = encodeVarintTag(dAtA, i, uint64(m.Mtime))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintTag(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Tag) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovTag(uint64(m.Id))
	}
	if m.Type != 0 {
		n += 1 + sovTag(uint64(m.Type))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovTag(uint64(l))
	}
	l = len(m.Cover)
	if l > 0 {
		n += 1 + l + sovTag(uint64(l))
	}
	l = len(m.HeadCover)
	if l > 0 {
		n += 1 + l + sovTag(uint64(l))
	}
	l = len(m.Content)
	if l > 0 {
		n += 1 + l + sovTag(uint64(l))
	}
	l = len(m.ShortContent)
	if l > 0 {
		n += 1 + l + sovTag(uint64(l))
	}
	if m.Verify != 0 {
		n += 1 + sovTag(uint64(m.Verify))
	}
	if m.Attr != 0 {
		n += 1 + sovTag(uint64(m.Attr))
	}
	if m.Attention != 0 {
		n += 1 + sovTag(uint64(m.Attention))
	}
	if m.State != 0 {
		n += 1 + sovTag(uint64(m.State))
	}
	if m.Sub != 0 {
		n += 1 + sovTag(uint64(m.Sub))
	}
	if m.Bind != 0 {
		n += 1 + sovTag(uint64(m.Bind))
	}
	if m.Ctime != 0 {
		n += 1 + sovTag(uint64(m.Ctime))
	}
	if m.Mtime != 0 {
		n += 1 + sovTag(uint64(m.Mtime))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Resource) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovTag(uint64(m.Id))
	}
	if m.Oid != 0 {
		n += 1 + sovTag(uint64(m.Oid))
	}
	if m.Type != 0 {
		n += 1 + sovTag(uint64(m.Type))
	}
	if m.Tid != 0 {
		n += 1 + sovTag(uint64(m.Tid))
	}
	if m.Mid != 0 {
		n += 1 + sovTag(uint64(m.Mid))
	}
	if m.Role != 0 {
		n += 1 + sovTag(uint64(m.Role))
	}
	if m.Like != 0 {
		n += 1 + sovTag(uint64(m.Like))
	}
	if m.Hate != 0 {
		n += 1 + sovTag(uint64(m.Hate))
	}
	if m.State != 0 {
		n += 1 + sovTag(uint64(m.State))
	}
	if m.Attr != 0 {
		n += 1 + sovTag(uint64(m.Attr))
	}
	if m.Ctime != 0 {
		n += 1 + sovTag(uint64(m.Ctime))
	}
	if m.Mtime != 0 {
		n += 1 + sovTag(uint64(m.Mtime))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovTag(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozTag(x uint64) (n int) {
	return sovTag(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Tag) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTag
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Tag: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Tag: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTag
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTag
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTag
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTag
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cover", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTag
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTag
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cover = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeadCover", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTag
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTag
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HeadCover = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTag
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTag
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Content = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShortContent", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTag
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTag
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ShortContent = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Verify", wireType)
			}
			m.Verify = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTag
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Verify |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attr", wireType)
			}
			m.Attr = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTag
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Attr |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attention", wireType)
			}
			m.Attention = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTag
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Attention |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTag
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sub", wireType)
			}
			m.Sub = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTag
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sub |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bind", wireType)
			}
			m.Bind = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTag
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Bind |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ctime", wireType)
			}
			m.Ctime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTag
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ctime |= (go_common_library_time.Time(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mtime", wireType)
			}
			m.Mtime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTag
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mtime |= (go_common_library_time.Time(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTag(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTag
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Resource) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTag
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Resource: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Resource: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTag
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Oid", wireType)
			}
			m.Oid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTag
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Oid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTag
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tid", wireType)
			}
			m.Tid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTag
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Tid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTag
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Role", wireType)
			}
			m.Role = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTag
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Role |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Like", wireType)
			}
			m.Like = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTag
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Like |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hate", wireType)
			}
			m.Hate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTag
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Hate |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTag
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attr", wireType)
			}
			m.Attr = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTag
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Attr |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ctime", wireType)
			}
			m.Ctime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTag
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ctime |= (go_common_library_time.Time(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mtime", wireType)
			}
			m.Mtime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTag
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mtime |= (go_common_library_time.Time(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTag(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTag
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTag(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTag
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTag
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTag
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthTag
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowTag
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipTag(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthTag = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTag   = fmt.Errorf("proto: integer overflow")
)
