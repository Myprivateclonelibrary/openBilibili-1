// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: app/service/main/relation/api/api.proto

package api

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	go_common_library_time "go-common/library/time"
	grpc "google.golang.org/grpc"
	io "io"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type RelationReq struct {
	Mid                  int64    `protobuf:"varint,1,opt,name=mid,proto3" json:"mid,omitempty"`
	Fid                  int64    `protobuf:"varint,2,opt,name=fid,proto3" json:"fid,omitempty"`
	RealIp               string   `protobuf:"bytes,3,opt,name=real_ip,json=realIp,proto3" json:"real_ip,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RelationReq) Reset()         { *m = RelationReq{} }
func (m *RelationReq) String() string { return proto.CompactTextString(m) }
func (*RelationReq) ProtoMessage()    {}
func (*RelationReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_8538d06337a1d811, []int{0}
}
func (m *RelationReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RelationReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RelationReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RelationReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RelationReq.Merge(m, src)
}
func (m *RelationReq) XXX_Size() int {
	return m.Size()
}
func (m *RelationReq) XXX_DiscardUnknown() {
	xxx_messageInfo_RelationReq.DiscardUnknown(m)
}

var xxx_messageInfo_RelationReq proto.InternalMessageInfo

func (m *RelationReq) GetMid() int64 {
	if m != nil {
		return m.Mid
	}
	return 0
}

func (m *RelationReq) GetFid() int64 {
	if m != nil {
		return m.Fid
	}
	return 0
}

func (m *RelationReq) GetRealIp() string {
	if m != nil {
		return m.RealIp
	}
	return ""
}

// +bili:deepcopy-gen=true
// +bili:deepcopy-gen:structs=go-common/app/service/main/relation/model.Following
type FollowingReply struct {
	Mid                  int64                       `protobuf:"varint,1,opt,name=mid,proto3" json:"mid"`
	Attribute            uint32                      `protobuf:"varint,2,opt,name=attribute,proto3" json:"attribute"`
	Source               uint32                      `protobuf:"varint,3,opt,name=source,proto3" json:"-"`
	CTime                go_common_library_time.Time `protobuf:"varint,4,opt,name=ctime,proto3,casttype=go-common/library/time.Time" json:"-"`
	MTime                go_common_library_time.Time `protobuf:"varint,5,opt,name=mtime,proto3,casttype=go-common/library/time.Time" json:"mtime"`
	Tag                  []int64                     `protobuf:"varint,6,rep,packed,name=tag,proto3" json:"tag"`
	Special              int32                       `protobuf:"varint,7,opt,name=special,proto3" json:"special"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_unrecognized     []byte                      `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *FollowingReply) Reset()         { *m = FollowingReply{} }
func (m *FollowingReply) String() string { return proto.CompactTextString(m) }
func (*FollowingReply) ProtoMessage()    {}
func (*FollowingReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_8538d06337a1d811, []int{1}
}
func (m *FollowingReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FollowingReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FollowingReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FollowingReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FollowingReply.Merge(m, src)
}
func (m *FollowingReply) XXX_Size() int {
	return m.Size()
}
func (m *FollowingReply) XXX_DiscardUnknown() {
	xxx_messageInfo_FollowingReply.DiscardUnknown(m)
}

var xxx_messageInfo_FollowingReply proto.InternalMessageInfo

func (m *FollowingReply) GetMid() int64 {
	if m != nil {
		return m.Mid
	}
	return 0
}

func (m *FollowingReply) GetAttribute() uint32 {
	if m != nil {
		return m.Attribute
	}
	return 0
}

func (m *FollowingReply) GetSource() uint32 {
	if m != nil {
		return m.Source
	}
	return 0
}

func (m *FollowingReply) GetCTime() go_common_library_time.Time {
	if m != nil {
		return m.CTime
	}
	return 0
}

func (m *FollowingReply) GetMTime() go_common_library_time.Time {
	if m != nil {
		return m.MTime
	}
	return 0
}

func (m *FollowingReply) GetTag() []int64 {
	if m != nil {
		return m.Tag
	}
	return nil
}

func (m *FollowingReply) GetSpecial() int32 {
	if m != nil {
		return m.Special
	}
	return 0
}

type RelationsReq struct {
	Mid                  int64    `protobuf:"varint,1,opt,name=mid,proto3" json:"mid,omitempty"`
	Fid                  []int64  `protobuf:"varint,2,rep,packed,name=fid,proto3" json:"fid,omitempty"`
	RealIp               string   `protobuf:"bytes,3,opt,name=real_ip,json=realIp,proto3" json:"real_ip,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RelationsReq) Reset()         { *m = RelationsReq{} }
func (m *RelationsReq) String() string { return proto.CompactTextString(m) }
func (*RelationsReq) ProtoMessage()    {}
func (*RelationsReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_8538d06337a1d811, []int{2}
}
func (m *RelationsReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RelationsReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RelationsReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RelationsReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RelationsReq.Merge(m, src)
}
func (m *RelationsReq) XXX_Size() int {
	return m.Size()
}
func (m *RelationsReq) XXX_DiscardUnknown() {
	xxx_messageInfo_RelationsReq.DiscardUnknown(m)
}

var xxx_messageInfo_RelationsReq proto.InternalMessageInfo

func (m *RelationsReq) GetMid() int64 {
	if m != nil {
		return m.Mid
	}
	return 0
}

func (m *RelationsReq) GetFid() []int64 {
	if m != nil {
		return m.Fid
	}
	return nil
}

func (m *RelationsReq) GetRealIp() string {
	if m != nil {
		return m.RealIp
	}
	return ""
}

type FollowingMapReply struct {
	FollowingMap         map[int64]*FollowingReply `protobuf:"bytes,1,rep,name=following_map,json=followingMap,proto3" json:"following_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}                  `json:"-"`
	XXX_unrecognized     []byte                    `json:"-"`
	XXX_sizecache        int32                     `json:"-"`
}

func (m *FollowingMapReply) Reset()         { *m = FollowingMapReply{} }
func (m *FollowingMapReply) String() string { return proto.CompactTextString(m) }
func (*FollowingMapReply) ProtoMessage()    {}
func (*FollowingMapReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_8538d06337a1d811, []int{3}
}
func (m *FollowingMapReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FollowingMapReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FollowingMapReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FollowingMapReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FollowingMapReply.Merge(m, src)
}
func (m *FollowingMapReply) XXX_Size() int {
	return m.Size()
}
func (m *FollowingMapReply) XXX_DiscardUnknown() {
	xxx_messageInfo_FollowingMapReply.DiscardUnknown(m)
}

var xxx_messageInfo_FollowingMapReply proto.InternalMessageInfo

func (m *FollowingMapReply) GetFollowingMap() map[int64]*FollowingReply {
	if m != nil {
		return m.FollowingMap
	}
	return nil
}

type FollowingsReply struct {
	FollowingList        []*FollowingReply `protobuf:"bytes,1,rep,name=following_list,json=followingList,proto3" json:"following_list,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *FollowingsReply) Reset()         { *m = FollowingsReply{} }
func (m *FollowingsReply) String() string { return proto.CompactTextString(m) }
func (*FollowingsReply) ProtoMessage()    {}
func (*FollowingsReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_8538d06337a1d811, []int{4}
}
func (m *FollowingsReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FollowingsReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FollowingsReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FollowingsReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FollowingsReply.Merge(m, src)
}
func (m *FollowingsReply) XXX_Size() int {
	return m.Size()
}
func (m *FollowingsReply) XXX_DiscardUnknown() {
	xxx_messageInfo_FollowingsReply.DiscardUnknown(m)
}

var xxx_messageInfo_FollowingsReply proto.InternalMessageInfo

func (m *FollowingsReply) GetFollowingList() []*FollowingReply {
	if m != nil {
		return m.FollowingList
	}
	return nil
}

type MidReq struct {
	Mid                  int64    `protobuf:"varint,1,opt,name=mid,proto3" json:"mid,omitempty"`
	RealIp               string   `protobuf:"bytes,2,opt,name=real_ip,json=realIp,proto3" json:"real_ip,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MidReq) Reset()         { *m = MidReq{} }
func (m *MidReq) String() string { return proto.CompactTextString(m) }
func (*MidReq) ProtoMessage()    {}
func (*MidReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_8538d06337a1d811, []int{5}
}
func (m *MidReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MidReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MidReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MidReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MidReq.Merge(m, src)
}
func (m *MidReq) XXX_Size() int {
	return m.Size()
}
func (m *MidReq) XXX_DiscardUnknown() {
	xxx_messageInfo_MidReq.DiscardUnknown(m)
}

var xxx_messageInfo_MidReq proto.InternalMessageInfo

func (m *MidReq) GetMid() int64 {
	if m != nil {
		return m.Mid
	}
	return 0
}

func (m *MidReq) GetRealIp() string {
	if m != nil {
		return m.RealIp
	}
	return ""
}

// +bili:deepcopy-gen=true
// +bili:deepcopy-gen:structs=go-common/app/service/main/relation/model.Stat
type StatReply struct {
	Mid                  int64                       `protobuf:"varint,1,opt,name=mid,proto3" json:"mid"`
	Following            int64                       `protobuf:"varint,2,opt,name=following,proto3" json:"following"`
	Whisper              int64                       `protobuf:"varint,3,opt,name=whisper,proto3" json:"whisper"`
	Black                int64                       `protobuf:"varint,4,opt,name=black,proto3" json:"black"`
	Follower             int64                       `protobuf:"varint,5,opt,name=follower,proto3" json:"follower"`
	CTime                go_common_library_time.Time `protobuf:"varint,6,opt,name=ctime,proto3,casttype=go-common/library/time.Time" json:"-"`
	MTime                go_common_library_time.Time `protobuf:"varint,7,opt,name=mtime,proto3,casttype=go-common/library/time.Time" json:"-"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_unrecognized     []byte                      `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *StatReply) Reset()         { *m = StatReply{} }
func (m *StatReply) String() string { return proto.CompactTextString(m) }
func (*StatReply) ProtoMessage()    {}
func (*StatReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_8538d06337a1d811, []int{6}
}
func (m *StatReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StatReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StatReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StatReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StatReply.Merge(m, src)
}
func (m *StatReply) XXX_Size() int {
	return m.Size()
}
func (m *StatReply) XXX_DiscardUnknown() {
	xxx_messageInfo_StatReply.DiscardUnknown(m)
}

var xxx_messageInfo_StatReply proto.InternalMessageInfo

func (m *StatReply) GetMid() int64 {
	if m != nil {
		return m.Mid
	}
	return 0
}

func (m *StatReply) GetFollowing() int64 {
	if m != nil {
		return m.Following
	}
	return 0
}

func (m *StatReply) GetWhisper() int64 {
	if m != nil {
		return m.Whisper
	}
	return 0
}

func (m *StatReply) GetBlack() int64 {
	if m != nil {
		return m.Black
	}
	return 0
}

func (m *StatReply) GetFollower() int64 {
	if m != nil {
		return m.Follower
	}
	return 0
}

func (m *StatReply) GetCTime() go_common_library_time.Time {
	if m != nil {
		return m.CTime
	}
	return 0
}

func (m *StatReply) GetMTime() go_common_library_time.Time {
	if m != nil {
		return m.MTime
	}
	return 0
}

type MidsReq struct {
	Mids                 []int64  `protobuf:"varint,1,rep,packed,name=mids,proto3" json:"mids,omitempty"`
	RealIp               string   `protobuf:"bytes,2,opt,name=real_ip,json=realIp,proto3" json:"real_ip,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MidsReq) Reset()         { *m = MidsReq{} }
func (m *MidsReq) String() string { return proto.CompactTextString(m) }
func (*MidsReq) ProtoMessage()    {}
func (*MidsReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_8538d06337a1d811, []int{7}
}
func (m *MidsReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MidsReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MidsReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MidsReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MidsReq.Merge(m, src)
}
func (m *MidsReq) XXX_Size() int {
	return m.Size()
}
func (m *MidsReq) XXX_DiscardUnknown() {
	xxx_messageInfo_MidsReq.DiscardUnknown(m)
}

var xxx_messageInfo_MidsReq proto.InternalMessageInfo

func (m *MidsReq) GetMids() []int64 {
	if m != nil {
		return m.Mids
	}
	return nil
}

func (m *MidsReq) GetRealIp() string {
	if m != nil {
		return m.RealIp
	}
	return ""
}

type StatsReply struct {
	StatReplyMap         map[int64]*StatReply `protobuf:"bytes,1,rep,name=stat_reply_map,json=statReplyMap,proto3" json:"stat_reply_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *StatsReply) Reset()         { *m = StatsReply{} }
func (m *StatsReply) String() string { return proto.CompactTextString(m) }
func (*StatsReply) ProtoMessage()    {}
func (*StatsReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_8538d06337a1d811, []int{8}
}
func (m *StatsReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StatsReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StatsReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StatsReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StatsReply.Merge(m, src)
}
func (m *StatsReply) XXX_Size() int {
	return m.Size()
}
func (m *StatsReply) XXX_DiscardUnknown() {
	xxx_messageInfo_StatsReply.DiscardUnknown(m)
}

var xxx_messageInfo_StatsReply proto.InternalMessageInfo

func (m *StatsReply) GetStatReplyMap() map[int64]*StatReply {
	if m != nil {
		return m.StatReplyMap
	}
	return nil
}

type FollowingReq struct {
	Mid                  int64             `protobuf:"varint,1,opt,name=mid,proto3" json:"mid,omitempty"`
	Fid                  int64             `protobuf:"varint,2,opt,name=fid,proto3" json:"fid,omitempty"`
	Source               uint8             `protobuf:"varint,3,opt,name=source,proto3,casttype=uint8" json:"source,omitempty"`
	RealIp               string            `protobuf:"bytes,4,opt,name=real_ip,json=realIp,proto3" json:"real_ip,omitempty"`
	Action               int8              `protobuf:"varint,5,opt,name=action,proto3,casttype=int8" json:"action,omitempty"`
	Infoc                map[string]string `protobuf:"bytes,6,rep,name=infoc,proto3" json:"infoc,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *FollowingReq) Reset()         { *m = FollowingReq{} }
func (m *FollowingReq) String() string { return proto.CompactTextString(m) }
func (*FollowingReq) ProtoMessage()    {}
func (*FollowingReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_8538d06337a1d811, []int{9}
}
func (m *FollowingReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FollowingReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FollowingReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FollowingReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FollowingReq.Merge(m, src)
}
func (m *FollowingReq) XXX_Size() int {
	return m.Size()
}
func (m *FollowingReq) XXX_DiscardUnknown() {
	xxx_messageInfo_FollowingReq.DiscardUnknown(m)
}

var xxx_messageInfo_FollowingReq proto.InternalMessageInfo

func (m *FollowingReq) GetMid() int64 {
	if m != nil {
		return m.Mid
	}
	return 0
}

func (m *FollowingReq) GetFid() int64 {
	if m != nil {
		return m.Fid
	}
	return 0
}

func (m *FollowingReq) GetSource() uint8 {
	if m != nil {
		return m.Source
	}
	return 0
}

func (m *FollowingReq) GetRealIp() string {
	if m != nil {
		return m.RealIp
	}
	return ""
}

func (m *FollowingReq) GetAction() int8 {
	if m != nil {
		return m.Action
	}
	return 0
}

func (m *FollowingReq) GetInfoc() map[string]string {
	if m != nil {
		return m.Infoc
	}
	return nil
}

type EmptyReply struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EmptyReply) Reset()         { *m = EmptyReply{} }
func (m *EmptyReply) String() string { return proto.CompactTextString(m) }
func (*EmptyReply) ProtoMessage()    {}
func (*EmptyReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_8538d06337a1d811, []int{10}
}
func (m *EmptyReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EmptyReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EmptyReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EmptyReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EmptyReply.Merge(m, src)
}
func (m *EmptyReply) XXX_Size() int {
	return m.Size()
}
func (m *EmptyReply) XXX_DiscardUnknown() {
	xxx_messageInfo_EmptyReply.DiscardUnknown(m)
}

var xxx_messageInfo_EmptyReply proto.InternalMessageInfo

// ArgTagId tag id
type TagIdReq struct {
	Mid                  int64    `protobuf:"varint,1,opt,name=mid,proto3" json:"mid,omitempty"`
	TagId                int64    `protobuf:"varint,2,opt,name=tag_id,json=tagId,proto3" json:"tag_id,omitempty"`
	RealIp               string   `protobuf:"bytes,3,opt,name=real_ip,json=realIp,proto3" json:"real_ip,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TagIdReq) Reset()         { *m = TagIdReq{} }
func (m *TagIdReq) String() string { return proto.CompactTextString(m) }
func (*TagIdReq) ProtoMessage()    {}
func (*TagIdReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_8538d06337a1d811, []int{11}
}
func (m *TagIdReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TagIdReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TagIdReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TagIdReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TagIdReq.Merge(m, src)
}
func (m *TagIdReq) XXX_Size() int {
	return m.Size()
}
func (m *TagIdReq) XXX_DiscardUnknown() {
	xxx_messageInfo_TagIdReq.DiscardUnknown(m)
}

var xxx_messageInfo_TagIdReq proto.InternalMessageInfo

func (m *TagIdReq) GetMid() int64 {
	if m != nil {
		return m.Mid
	}
	return 0
}

func (m *TagIdReq) GetTagId() int64 {
	if m != nil {
		return m.TagId
	}
	return 0
}

func (m *TagIdReq) GetRealIp() string {
	if m != nil {
		return m.RealIp
	}
	return ""
}

type TagReply struct {
	Mids                 []int64  `protobuf:"varint,1,rep,packed,name=mids,proto3" json:"mids,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TagReply) Reset()         { *m = TagReply{} }
func (m *TagReply) String() string { return proto.CompactTextString(m) }
func (*TagReply) ProtoMessage()    {}
func (*TagReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_8538d06337a1d811, []int{12}
}
func (m *TagReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TagReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TagReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TagReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TagReply.Merge(m, src)
}
func (m *TagReply) XXX_Size() int {
	return m.Size()
}
func (m *TagReply) XXX_DiscardUnknown() {
	xxx_messageInfo_TagReply.DiscardUnknown(m)
}

var xxx_messageInfo_TagReply proto.InternalMessageInfo

func (m *TagReply) GetMids() []int64 {
	if m != nil {
		return m.Mids
	}
	return nil
}

// +bili:deepcopy-gen=true
// +bili:deepcopy-gen:structs=go-common/app/service/main/relation/model.TagCount
type TagCountReply struct {
	Tagid                int64    `protobuf:"varint,1,opt,name=tagid,proto3" json:"tagid"`
	Name                 string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name"`
	Count                int64    `protobuf:"varint,3,opt,name=count,proto3" json:"count"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TagCountReply) Reset()         { *m = TagCountReply{} }
func (m *TagCountReply) String() string { return proto.CompactTextString(m) }
func (*TagCountReply) ProtoMessage()    {}
func (*TagCountReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_8538d06337a1d811, []int{13}
}
func (m *TagCountReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TagCountReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TagCountReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TagCountReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TagCountReply.Merge(m, src)
}
func (m *TagCountReply) XXX_Size() int {
	return m.Size()
}
func (m *TagCountReply) XXX_DiscardUnknown() {
	xxx_messageInfo_TagCountReply.DiscardUnknown(m)
}

var xxx_messageInfo_TagCountReply proto.InternalMessageInfo

func (m *TagCountReply) GetTagid() int64 {
	if m != nil {
		return m.Tagid
	}
	return 0
}

func (m *TagCountReply) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *TagCountReply) GetCount() int64 {
	if m != nil {
		return m.Count
	}
	return 0
}

type TagsCountReply struct {
	TagCountList         []*TagCountReply `protobuf:"bytes,1,rep,name=tag_count_list,json=tagCountList,proto3" json:"tag_count_list,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *TagsCountReply) Reset()         { *m = TagsCountReply{} }
func (m *TagsCountReply) String() string { return proto.CompactTextString(m) }
func (*TagsCountReply) ProtoMessage()    {}
func (*TagsCountReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_8538d06337a1d811, []int{14}
}
func (m *TagsCountReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TagsCountReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TagsCountReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TagsCountReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TagsCountReply.Merge(m, src)
}
func (m *TagsCountReply) XXX_Size() int {
	return m.Size()
}
func (m *TagsCountReply) XXX_DiscardUnknown() {
	xxx_messageInfo_TagsCountReply.DiscardUnknown(m)
}

var xxx_messageInfo_TagsCountReply proto.InternalMessageInfo

func (m *TagsCountReply) GetTagCountList() []*TagCountReply {
	if m != nil {
		return m.TagCountList
	}
	return nil
}

type UserTagReply struct {
	Tags                 map[int64]string `protobuf:"bytes,1,rep,name=tags,proto3" json:"tags,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *UserTagReply) Reset()         { *m = UserTagReply{} }
func (m *UserTagReply) String() string { return proto.CompactTextString(m) }
func (*UserTagReply) ProtoMessage()    {}
func (*UserTagReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_8538d06337a1d811, []int{15}
}
func (m *UserTagReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UserTagReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UserTagReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UserTagReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserTagReply.Merge(m, src)
}
func (m *UserTagReply) XXX_Size() int {
	return m.Size()
}
func (m *UserTagReply) XXX_DiscardUnknown() {
	xxx_messageInfo_UserTagReply.DiscardUnknown(m)
}

var xxx_messageInfo_UserTagReply proto.InternalMessageInfo

func (m *UserTagReply) GetTags() map[int64]string {
	if m != nil {
		return m.Tags
	}
	return nil
}

type TagReq struct {
	Mid                  int64    `protobuf:"varint,1,opt,name=mid,proto3" json:"mid,omitempty"`
	Tag                  string   `protobuf:"bytes,2,opt,name=tag,proto3" json:"tag,omitempty"`
	RealIp               string   `protobuf:"bytes,3,opt,name=real_ip,json=realIp,proto3" json:"real_ip,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TagReq) Reset()         { *m = TagReq{} }
func (m *TagReq) String() string { return proto.CompactTextString(m) }
func (*TagReq) ProtoMessage()    {}
func (*TagReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_8538d06337a1d811, []int{16}
}
func (m *TagReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TagReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TagReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TagReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TagReq.Merge(m, src)
}
func (m *TagReq) XXX_Size() int {
	return m.Size()
}
func (m *TagReq) XXX_DiscardUnknown() {
	xxx_messageInfo_TagReq.DiscardUnknown(m)
}

var xxx_messageInfo_TagReq proto.InternalMessageInfo

func (m *TagReq) GetMid() int64 {
	if m != nil {
		return m.Mid
	}
	return 0
}

func (m *TagReq) GetTag() string {
	if m != nil {
		return m.Tag
	}
	return ""
}

func (m *TagReq) GetRealIp() string {
	if m != nil {
		return m.RealIp
	}
	return ""
}

type TagUpdateReq struct {
	Mid                  int64    `protobuf:"varint,1,opt,name=mid,proto3" json:"mid,omitempty"`
	TagId                int64    `protobuf:"varint,2,opt,name=tag_id,json=tagId,proto3" json:"tag_id,omitempty"`
	New                  string   `protobuf:"bytes,3,opt,name=new,proto3" json:"new,omitempty"`
	RealIp               string   `protobuf:"bytes,4,opt,name=real_ip,json=realIp,proto3" json:"real_ip,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TagUpdateReq) Reset()         { *m = TagUpdateReq{} }
func (m *TagUpdateReq) String() string { return proto.CompactTextString(m) }
func (*TagUpdateReq) ProtoMessage()    {}
func (*TagUpdateReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_8538d06337a1d811, []int{17}
}
func (m *TagUpdateReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TagUpdateReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TagUpdateReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TagUpdateReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TagUpdateReq.Merge(m, src)
}
func (m *TagUpdateReq) XXX_Size() int {
	return m.Size()
}
func (m *TagUpdateReq) XXX_DiscardUnknown() {
	xxx_messageInfo_TagUpdateReq.DiscardUnknown(m)
}

var xxx_messageInfo_TagUpdateReq proto.InternalMessageInfo

func (m *TagUpdateReq) GetMid() int64 {
	if m != nil {
		return m.Mid
	}
	return 0
}

func (m *TagUpdateReq) GetTagId() int64 {
	if m != nil {
		return m.TagId
	}
	return 0
}

func (m *TagUpdateReq) GetNew() string {
	if m != nil {
		return m.New
	}
	return ""
}

func (m *TagUpdateReq) GetRealIp() string {
	if m != nil {
		return m.RealIp
	}
	return ""
}

type TagDelReq struct {
	Mid                  int64    `protobuf:"varint,1,opt,name=mid,proto3" json:"mid,omitempty"`
	TagId                int64    `protobuf:"varint,2,opt,name=tag_id,json=tagId,proto3" json:"tag_id,omitempty"`
	RealIp               string   `protobuf:"bytes,3,opt,name=real_ip,json=realIp,proto3" json:"real_ip,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TagDelReq) Reset()         { *m = TagDelReq{} }
func (m *TagDelReq) String() string { return proto.CompactTextString(m) }
func (*TagDelReq) ProtoMessage()    {}
func (*TagDelReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_8538d06337a1d811, []int{18}
}
func (m *TagDelReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TagDelReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TagDelReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TagDelReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TagDelReq.Merge(m, src)
}
func (m *TagDelReq) XXX_Size() int {
	return m.Size()
}
func (m *TagDelReq) XXX_DiscardUnknown() {
	xxx_messageInfo_TagDelReq.DiscardUnknown(m)
}

var xxx_messageInfo_TagDelReq proto.InternalMessageInfo

func (m *TagDelReq) GetMid() int64 {
	if m != nil {
		return m.Mid
	}
	return 0
}

func (m *TagDelReq) GetTagId() int64 {
	if m != nil {
		return m.TagId
	}
	return 0
}

func (m *TagDelReq) GetRealIp() string {
	if m != nil {
		return m.RealIp
	}
	return ""
}

type TagsMoveUsersReq struct {
	Mid                  int64    `protobuf:"varint,1,opt,name=mid,proto3" json:"mid,omitempty"`
	BeforeId             int64    `protobuf:"varint,2,opt,name=before_id,json=beforeId,proto3" json:"before_id,omitempty"`
	AfterTagIds          string   `protobuf:"bytes,3,opt,name=after_tag_ids,json=afterTagIds,proto3" json:"after_tag_ids,omitempty"`
	Fids                 string   `protobuf:"bytes,4,opt,name=fids,proto3" json:"fids,omitempty"`
	RealIp               string   `protobuf:"bytes,5,opt,name=real_ip,json=realIp,proto3" json:"real_ip,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TagsMoveUsersReq) Reset()         { *m = TagsMoveUsersReq{} }
func (m *TagsMoveUsersReq) String() string { return proto.CompactTextString(m) }
func (*TagsMoveUsersReq) ProtoMessage()    {}
func (*TagsMoveUsersReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_8538d06337a1d811, []int{19}
}
func (m *TagsMoveUsersReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TagsMoveUsersReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TagsMoveUsersReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TagsMoveUsersReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TagsMoveUsersReq.Merge(m, src)
}
func (m *TagsMoveUsersReq) XXX_Size() int {
	return m.Size()
}
func (m *TagsMoveUsersReq) XXX_DiscardUnknown() {
	xxx_messageInfo_TagsMoveUsersReq.DiscardUnknown(m)
}

var xxx_messageInfo_TagsMoveUsersReq proto.InternalMessageInfo

func (m *TagsMoveUsersReq) GetMid() int64 {
	if m != nil {
		return m.Mid
	}
	return 0
}

func (m *TagsMoveUsersReq) GetBeforeId() int64 {
	if m != nil {
		return m.BeforeId
	}
	return 0
}

func (m *TagsMoveUsersReq) GetAfterTagIds() string {
	if m != nil {
		return m.AfterTagIds
	}
	return ""
}

func (m *TagsMoveUsersReq) GetFids() string {
	if m != nil {
		return m.Fids
	}
	return ""
}

func (m *TagsMoveUsersReq) GetRealIp() string {
	if m != nil {
		return m.RealIp
	}
	return ""
}

type PromptReq struct {
	Mid                  int64    `protobuf:"varint,1,opt,name=mid,proto3" json:"mid,omitempty"`
	Fid                  int64    `protobuf:"varint,2,opt,name=fid,proto3" json:"fid,omitempty"`
	Btype                int8     `protobuf:"varint,3,opt,name=btype,proto3,casttype=int8" json:"btype,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PromptReq) Reset()         { *m = PromptReq{} }
func (m *PromptReq) String() string { return proto.CompactTextString(m) }
func (*PromptReq) ProtoMessage()    {}
func (*PromptReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_8538d06337a1d811, []int{20}
}
func (m *PromptReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PromptReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PromptReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PromptReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PromptReq.Merge(m, src)
}
func (m *PromptReq) XXX_Size() int {
	return m.Size()
}
func (m *PromptReq) XXX_DiscardUnknown() {
	xxx_messageInfo_PromptReq.DiscardUnknown(m)
}

var xxx_messageInfo_PromptReq proto.InternalMessageInfo

func (m *PromptReq) GetMid() int64 {
	if m != nil {
		return m.Mid
	}
	return 0
}

func (m *PromptReq) GetFid() int64 {
	if m != nil {
		return m.Fid
	}
	return 0
}

func (m *PromptReq) GetBtype() int8 {
	if m != nil {
		return m.Btype
	}
	return 0
}

type CreateTagReply struct {
	TagId                int64    `protobuf:"varint,1,opt,name=tag_id,json=tagId,proto3" json:"tag_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CreateTagReply) Reset()         { *m = CreateTagReply{} }
func (m *CreateTagReply) String() string { return proto.CompactTextString(m) }
func (*CreateTagReply) ProtoMessage()    {}
func (*CreateTagReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_8538d06337a1d811, []int{21}
}
func (m *CreateTagReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateTagReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateTagReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateTagReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateTagReply.Merge(m, src)
}
func (m *CreateTagReply) XXX_Size() int {
	return m.Size()
}
func (m *CreateTagReply) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateTagReply.DiscardUnknown(m)
}

var xxx_messageInfo_CreateTagReply proto.InternalMessageInfo

func (m *CreateTagReply) GetTagId() int64 {
	if m != nil {
		return m.TagId
	}
	return 0
}

type PromptReply struct {
	Success              bool     `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PromptReply) Reset()         { *m = PromptReply{} }
func (m *PromptReply) String() string { return proto.CompactTextString(m) }
func (*PromptReply) ProtoMessage()    {}
func (*PromptReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_8538d06337a1d811, []int{22}
}
func (m *PromptReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PromptReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PromptReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PromptReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PromptReply.Merge(m, src)
}
func (m *PromptReply) XXX_Size() int {
	return m.Size()
}
func (m *PromptReply) XXX_DiscardUnknown() {
	xxx_messageInfo_PromptReply.DiscardUnknown(m)
}

var xxx_messageInfo_PromptReply proto.InternalMessageInfo

func (m *PromptReply) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

type FollowersUnreadReply struct {
	HasUnread            bool     `protobuf:"varint,1,opt,name=has_unread,json=hasUnread,proto3" json:"has_unread,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FollowersUnreadReply) Reset()         { *m = FollowersUnreadReply{} }
func (m *FollowersUnreadReply) String() string { return proto.CompactTextString(m) }
func (*FollowersUnreadReply) ProtoMessage()    {}
func (*FollowersUnreadReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_8538d06337a1d811, []int{23}
}
func (m *FollowersUnreadReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FollowersUnreadReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FollowersUnreadReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FollowersUnreadReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FollowersUnreadReply.Merge(m, src)
}
func (m *FollowersUnreadReply) XXX_Size() int {
	return m.Size()
}
func (m *FollowersUnreadReply) XXX_DiscardUnknown() {
	xxx_messageInfo_FollowersUnreadReply.DiscardUnknown(m)
}

var xxx_messageInfo_FollowersUnreadReply proto.InternalMessageInfo

func (m *FollowersUnreadReply) GetHasUnread() bool {
	if m != nil {
		return m.HasUnread
	}
	return false
}

type FollowersUnreadCountReply struct {
	UnreadCount          int64    `protobuf:"varint,1,opt,name=unread_count,json=unreadCount,proto3" json:"unread_count,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FollowersUnreadCountReply) Reset()         { *m = FollowersUnreadCountReply{} }
func (m *FollowersUnreadCountReply) String() string { return proto.CompactTextString(m) }
func (*FollowersUnreadCountReply) ProtoMessage()    {}
func (*FollowersUnreadCountReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_8538d06337a1d811, []int{24}
}
func (m *FollowersUnreadCountReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FollowersUnreadCountReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FollowersUnreadCountReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FollowersUnreadCountReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FollowersUnreadCountReply.Merge(m, src)
}
func (m *FollowersUnreadCountReply) XXX_Size() int {
	return m.Size()
}
func (m *FollowersUnreadCountReply) XXX_DiscardUnknown() {
	xxx_messageInfo_FollowersUnreadCountReply.DiscardUnknown(m)
}

var xxx_messageInfo_FollowersUnreadCountReply proto.InternalMessageInfo

func (m *FollowersUnreadCountReply) GetUnreadCount() int64 {
	if m != nil {
		return m.UnreadCount
	}
	return 0
}

type SpecialReply struct {
	Mids                 []int64  `protobuf:"varint,1,rep,packed,name=mids,proto3" json:"mids,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SpecialReply) Reset()         { *m = SpecialReply{} }
func (m *SpecialReply) String() string { return proto.CompactTextString(m) }
func (*SpecialReply) ProtoMessage()    {}
func (*SpecialReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_8538d06337a1d811, []int{25}
}
func (m *SpecialReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SpecialReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SpecialReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SpecialReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SpecialReply.Merge(m, src)
}
func (m *SpecialReply) XXX_Size() int {
	return m.Size()
}
func (m *SpecialReply) XXX_DiscardUnknown() {
	xxx_messageInfo_SpecialReply.DiscardUnknown(m)
}

var xxx_messageInfo_SpecialReply proto.InternalMessageInfo

func (m *SpecialReply) GetMids() []int64 {
	if m != nil {
		return m.Mids
	}
	return nil
}

type AchieveGetReq struct {
	Award                string   `protobuf:"bytes,1,opt,name=award,proto3" json:"award,omitempty"`
	Mid                  int64    `protobuf:"varint,2,opt,name=mid,proto3" json:"mid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AchieveGetReq) Reset()         { *m = AchieveGetReq{} }
func (m *AchieveGetReq) String() string { return proto.CompactTextString(m) }
func (*AchieveGetReq) ProtoMessage()    {}
func (*AchieveGetReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_8538d06337a1d811, []int{26}
}
func (m *AchieveGetReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AchieveGetReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AchieveGetReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AchieveGetReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AchieveGetReq.Merge(m, src)
}
func (m *AchieveGetReq) XXX_Size() int {
	return m.Size()
}
func (m *AchieveGetReq) XXX_DiscardUnknown() {
	xxx_messageInfo_AchieveGetReq.DiscardUnknown(m)
}

var xxx_messageInfo_AchieveGetReq proto.InternalMessageInfo

func (m *AchieveGetReq) GetAward() string {
	if m != nil {
		return m.Award
	}
	return ""
}

func (m *AchieveGetReq) GetMid() int64 {
	if m != nil {
		return m.Mid
	}
	return 0
}

type AchieveGetReply struct {
	AwardToken           string   `protobuf:"bytes,1,opt,name=awardToken,proto3" json:"awardToken,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AchieveGetReply) Reset()         { *m = AchieveGetReply{} }
func (m *AchieveGetReply) String() string { return proto.CompactTextString(m) }
func (*AchieveGetReply) ProtoMessage()    {}
func (*AchieveGetReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_8538d06337a1d811, []int{27}
}
func (m *AchieveGetReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AchieveGetReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AchieveGetReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AchieveGetReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AchieveGetReply.Merge(m, src)
}
func (m *AchieveGetReply) XXX_Size() int {
	return m.Size()
}
func (m *AchieveGetReply) XXX_DiscardUnknown() {
	xxx_messageInfo_AchieveGetReply.DiscardUnknown(m)
}

var xxx_messageInfo_AchieveGetReply proto.InternalMessageInfo

func (m *AchieveGetReply) GetAwardToken() string {
	if m != nil {
		return m.AwardToken
	}
	return ""
}

type AchieveReq struct {
	AwardToken           string   `protobuf:"bytes,1,opt,name=awardToken,proto3" json:"awardToken,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AchieveReq) Reset()         { *m = AchieveReq{} }
func (m *AchieveReq) String() string { return proto.CompactTextString(m) }
func (*AchieveReq) ProtoMessage()    {}
func (*AchieveReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_8538d06337a1d811, []int{28}
}
func (m *AchieveReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AchieveReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AchieveReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AchieveReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AchieveReq.Merge(m, src)
}
func (m *AchieveReq) XXX_Size() int {
	return m.Size()
}
func (m *AchieveReq) XXX_DiscardUnknown() {
	xxx_messageInfo_AchieveReq.DiscardUnknown(m)
}

var xxx_messageInfo_AchieveReq proto.InternalMessageInfo

func (m *AchieveReq) GetAwardToken() string {
	if m != nil {
		return m.AwardToken
	}
	return ""
}

type AchieveReply struct {
	Award                string   `protobuf:"bytes,1,opt,name=award,proto3" json:"award,omitempty"`
	Mid                  int64    `protobuf:"varint,2,opt,name=mid,proto3" json:"mid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AchieveReply) Reset()         { *m = AchieveReply{} }
func (m *AchieveReply) String() string { return proto.CompactTextString(m) }
func (*AchieveReply) ProtoMessage()    {}
func (*AchieveReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_8538d06337a1d811, []int{29}
}
func (m *AchieveReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AchieveReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AchieveReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AchieveReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AchieveReply.Merge(m, src)
}
func (m *AchieveReply) XXX_Size() int {
	return m.Size()
}
func (m *AchieveReply) XXX_DiscardUnknown() {
	xxx_messageInfo_AchieveReply.DiscardUnknown(m)
}

var xxx_messageInfo_AchieveReply proto.InternalMessageInfo

func (m *AchieveReply) GetAward() string {
	if m != nil {
		return m.Award
	}
	return ""
}

func (m *AchieveReply) GetMid() int64 {
	if m != nil {
		return m.Mid
	}
	return 0
}

type FollowerNotifySettingReply struct {
	Mid                  int64    `protobuf:"varint,1,opt,name=mid,proto3" json:"mid,omitempty"`
	Enabled              bool     `protobuf:"varint,2,opt,name=enabled,proto3" json:"enabled,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FollowerNotifySettingReply) Reset()         { *m = FollowerNotifySettingReply{} }
func (m *FollowerNotifySettingReply) String() string { return proto.CompactTextString(m) }
func (*FollowerNotifySettingReply) ProtoMessage()    {}
func (*FollowerNotifySettingReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_8538d06337a1d811, []int{30}
}
func (m *FollowerNotifySettingReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FollowerNotifySettingReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FollowerNotifySettingReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FollowerNotifySettingReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FollowerNotifySettingReply.Merge(m, src)
}
func (m *FollowerNotifySettingReply) XXX_Size() int {
	return m.Size()
}
func (m *FollowerNotifySettingReply) XXX_DiscardUnknown() {
	xxx_messageInfo_FollowerNotifySettingReply.DiscardUnknown(m)
}

var xxx_messageInfo_FollowerNotifySettingReply proto.InternalMessageInfo

func (m *FollowerNotifySettingReply) GetMid() int64 {
	if m != nil {
		return m.Mid
	}
	return 0
}

func (m *FollowerNotifySettingReply) GetEnabled() bool {
	if m != nil {
		return m.Enabled
	}
	return false
}

type SameFollowingReq struct {
	Mid                  int64    `protobuf:"varint,1,opt,name=mid,proto3" json:"mid,omitempty"`
	Mid2                 int64    `protobuf:"varint,2,opt,name=mid2,proto3" json:"mid2,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SameFollowingReq) Reset()         { *m = SameFollowingReq{} }
func (m *SameFollowingReq) String() string { return proto.CompactTextString(m) }
func (*SameFollowingReq) ProtoMessage()    {}
func (*SameFollowingReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_8538d06337a1d811, []int{31}
}
func (m *SameFollowingReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SameFollowingReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SameFollowingReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SameFollowingReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SameFollowingReq.Merge(m, src)
}
func (m *SameFollowingReq) XXX_Size() int {
	return m.Size()
}
func (m *SameFollowingReq) XXX_DiscardUnknown() {
	xxx_messageInfo_SameFollowingReq.DiscardUnknown(m)
}

var xxx_messageInfo_SameFollowingReq proto.InternalMessageInfo

func (m *SameFollowingReq) GetMid() int64 {
	if m != nil {
		return m.Mid
	}
	return 0
}

func (m *SameFollowingReq) GetMid2() int64 {
	if m != nil {
		return m.Mid2
	}
	return 0
}

func init() {
	proto.RegisterType((*RelationReq)(nil), "relation.service.RelationReq")
	proto.RegisterType((*FollowingReply)(nil), "relation.service.FollowingReply")
	proto.RegisterType((*RelationsReq)(nil), "relation.service.RelationsReq")
	proto.RegisterType((*FollowingMapReply)(nil), "relation.service.FollowingMapReply")
	proto.RegisterMapType((map[int64]*FollowingReply)(nil), "relation.service.FollowingMapReply.FollowingMapEntry")
	proto.RegisterType((*FollowingsReply)(nil), "relation.service.FollowingsReply")
	proto.RegisterType((*MidReq)(nil), "relation.service.MidReq")
	proto.RegisterType((*StatReply)(nil), "relation.service.StatReply")
	proto.RegisterType((*MidsReq)(nil), "relation.service.MidsReq")
	proto.RegisterType((*StatsReply)(nil), "relation.service.StatsReply")
	proto.RegisterMapType((map[int64]*StatReply)(nil), "relation.service.StatsReply.StatReplyMapEntry")
	proto.RegisterType((*FollowingReq)(nil), "relation.service.FollowingReq")
	proto.RegisterMapType((map[string]string)(nil), "relation.service.FollowingReq.InfocEntry")
	proto.RegisterType((*EmptyReply)(nil), "relation.service.EmptyReply")
	proto.RegisterType((*TagIdReq)(nil), "relation.service.TagIdReq")
	proto.RegisterType((*TagReply)(nil), "relation.service.TagReply")
	proto.RegisterType((*TagCountReply)(nil), "relation.service.TagCountReply")
	proto.RegisterType((*TagsCountReply)(nil), "relation.service.TagsCountReply")
	proto.RegisterType((*UserTagReply)(nil), "relation.service.UserTagReply")
	proto.RegisterMapType((map[int64]string)(nil), "relation.service.UserTagReply.TagsEntry")
	proto.RegisterType((*TagReq)(nil), "relation.service.TagReq")
	proto.RegisterType((*TagUpdateReq)(nil), "relation.service.TagUpdateReq")
	proto.RegisterType((*TagDelReq)(nil), "relation.service.TagDelReq")
	proto.RegisterType((*TagsMoveUsersReq)(nil), "relation.service.TagsMoveUsersReq")
	proto.RegisterType((*PromptReq)(nil), "relation.service.PromptReq")
	proto.RegisterType((*CreateTagReply)(nil), "relation.service.CreateTagReply")
	proto.RegisterType((*PromptReply)(nil), "relation.service.PromptReply")
	proto.RegisterType((*FollowersUnreadReply)(nil), "relation.service.FollowersUnreadReply")
	proto.RegisterType((*FollowersUnreadCountReply)(nil), "relation.service.FollowersUnreadCountReply")
	proto.RegisterType((*SpecialReply)(nil), "relation.service.SpecialReply")
	proto.RegisterType((*AchieveGetReq)(nil), "relation.service.AchieveGetReq")
	proto.RegisterType((*AchieveGetReply)(nil), "relation.service.AchieveGetReply")
	proto.RegisterType((*AchieveReq)(nil), "relation.service.AchieveReq")
	proto.RegisterType((*AchieveReply)(nil), "relation.service.AchieveReply")
	proto.RegisterType((*FollowerNotifySettingReply)(nil), "relation.service.FollowerNotifySettingReply")
	proto.RegisterType((*SameFollowingReq)(nil), "relation.service.SameFollowingReq")
}

func init() {
	proto.RegisterFile("app/service/main/relation/api/api.proto", fileDescriptor_8538d06337a1d811)
}

var fileDescriptor_8538d06337a1d811 = []byte{
	// 1727 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x59, 0xcd, 0x6e, 0xdb, 0xc6,
	0x13, 0x87, 0x2c, 0x51, 0x1f, 0x23, 0xd9, 0x71, 0x08, 0x07, 0x7f, 0x59, 0x8e, 0x25, 0x85, 0x7f,
	0xb4, 0x71, 0x91, 0x58, 0x42, 0x1c, 0x24, 0x31, 0x8a, 0xa6, 0xad, 0x25, 0x3b, 0xb6, 0x93, 0x38,
	0x71, 0x69, 0x05, 0x01, 0x82, 0x16, 0xc6, 0x4a, 0x5c, 0xc9, 0x84, 0x29, 0x92, 0x21, 0x57, 0x36,
	0xf4, 0x00, 0x3d, 0x14, 0xbd, 0xf5, 0x89, 0x7a, 0x6b, 0x6f, 0x2d, 0xfa, 0x00, 0x42, 0xe1, 0xa3,
	0x1f, 0x21, 0xa7, 0x62, 0x77, 0xf9, 0x25, 0x8b, 0x94, 0xd4, 0x4a, 0x87, 0x88, 0xbb, 0xc3, 0x99,
	0xdf, 0xee, 0xcc, 0xce, 0xcc, 0xfe, 0x18, 0xc3, 0x7d, 0x64, 0x9a, 0x55, 0x1b, 0x5b, 0x17, 0x6a,
	0x0b, 0x57, 0xbb, 0x48, 0xd5, 0xab, 0x16, 0xd6, 0x10, 0x51, 0x0d, 0xbd, 0x8a, 0x4c, 0x95, 0xfe,
	0xab, 0x98, 0x96, 0x41, 0x0c, 0x71, 0xd9, 0x95, 0x57, 0x1c, 0xed, 0xc2, 0x66, 0x47, 0x25, 0x67,
	0xbd, 0x66, 0xa5, 0x65, 0x74, 0xab, 0x1d, 0xa3, 0x63, 0x54, 0x99, 0x62, 0xb3, 0xd7, 0x66, 0x33,
	0x36, 0x61, 0x23, 0x0e, 0x20, 0xbd, 0x84, 0xac, 0xec, 0x40, 0xc8, 0xf8, 0xa3, 0xb8, 0x0c, 0xf1,
	0xae, 0xaa, 0xe4, 0x63, 0xe5, 0xd8, 0x46, 0x5c, 0xa6, 0x43, 0x2a, 0x69, 0xab, 0x4a, 0x7e, 0x81,
	0x4b, 0xda, 0xaa, 0x22, 0xfe, 0x0f, 0x52, 0x16, 0x46, 0xda, 0xa9, 0x6a, 0xe6, 0xe3, 0xe5, 0xd8,
	0x46, 0x46, 0x4e, 0xd2, 0xe9, 0xa1, 0x29, 0xfd, 0xb6, 0x00, 0x4b, 0x2f, 0x0c, 0x4d, 0x33, 0x2e,
	0x55, 0xbd, 0x23, 0x63, 0x53, 0xeb, 0x8b, 0xab, 0x01, 0xbc, 0x5a, 0xea, 0x7a, 0x50, 0xa2, 0x53,
	0x0e, 0xfc, 0x00, 0x32, 0x88, 0x10, 0x4b, 0x6d, 0xf6, 0x08, 0x66, 0xf0, 0x8b, 0xb5, 0xc5, 0xeb,
	0x41, 0xc9, 0x17, 0xca, 0xfe, 0x50, 0x5c, 0x87, 0xa4, 0x6d, 0xf4, 0xac, 0x16, 0x66, 0x4b, 0x2e,
	0xd6, 0x84, 0xeb, 0x41, 0x29, 0xb6, 0x29, 0x3b, 0x42, 0xb1, 0x0e, 0x42, 0x8b, 0xa8, 0x5d, 0x9c,
	0x4f, 0xb0, 0x85, 0x36, 0xaf, 0x06, 0x25, 0xa1, 0xde, 0x50, 0xbb, 0x98, 0xa9, 0x7d, 0x1a, 0x94,
	0xd6, 0x3a, 0xc6, 0x66, 0xcb, 0xe8, 0x76, 0x0d, 0xbd, 0xaa, 0xa9, 0x4d, 0x0b, 0x59, 0xfd, 0x2a,
	0xd5, 0xaf, 0x50, 0x1d, 0x99, 0xdb, 0x8a, 0xfb, 0x20, 0x74, 0x19, 0x88, 0xc0, 0x40, 0x1e, 0x51,
	0x90, 0x23, 0x07, 0x84, 0xbf, 0x99, 0x08, 0xc4, 0xb4, 0xa8, 0xd3, 0x04, 0x75, 0xf2, 0xc9, 0x72,
	0xdc, 0x75, 0x9a, 0xa0, 0x8e, 0x4c, 0x7f, 0xc4, 0xcf, 0x20, 0x65, 0x9b, 0xb8, 0xa5, 0x22, 0x2d,
	0x9f, 0x2a, 0xc7, 0x36, 0x84, 0x5a, 0xf6, 0x7a, 0x50, 0x72, 0x45, 0xb2, 0x3b, 0x90, 0x5e, 0x41,
	0xce, 0x3d, 0x15, 0x7b, 0xc2, 0xb1, 0xc4, 0x27, 0x1e, 0xcb, 0x5f, 0x31, 0xb8, 0xed, 0x1d, 0xcb,
	0x11, 0x32, 0xf9, 0xc9, 0x7c, 0x80, 0xc5, 0xb6, 0x2b, 0x3c, 0xed, 0x22, 0x33, 0x1f, 0x2b, 0xc7,
	0x37, 0xb2, 0x5b, 0x4f, 0x2a, 0x37, 0x33, 0xaa, 0x32, 0x62, 0x3b, 0x24, 0xd9, 0xd3, 0x89, 0xd5,
	0x97, 0x73, 0xed, 0x80, 0xa8, 0x80, 0x86, 0x17, 0x64, 0x2a, 0x74, 0xc7, 0xe7, 0xb8, 0xef, 0xfa,
	0x70, 0x8e, 0xfb, 0xe2, 0x53, 0x10, 0x2e, 0x90, 0xd6, 0xe3, 0xa7, 0x9f, 0xdd, 0x2a, 0x8f, 0x59,
	0x9a, 0xad, 0x2b, 0x73, 0xf5, 0x2f, 0x17, 0xb6, 0x63, 0xd2, 0x07, 0xb8, 0xe5, 0xbd, 0xb4, 0xb9,
	0x47, 0xfb, 0xb0, 0xe4, 0x7b, 0xa4, 0xa9, 0x36, 0x71, 0x5c, 0x9a, 0x8c, 0xeb, 0x47, 0xe2, 0xb5,
	0x6a, 0x13, 0xe9, 0x31, 0x24, 0x8f, 0x54, 0x25, 0x3c, 0xee, 0x81, 0x28, 0x2f, 0x0c, 0x45, 0xf9,
	0x8f, 0x05, 0xc8, 0x9c, 0x10, 0x44, 0xa6, 0xc9, 0x7b, 0x6f, 0x39, 0x5e, 0x56, 0x3c, 0xef, 0x3d,
	0xa1, 0xec, 0x0f, 0x69, 0xbe, 0x5c, 0x9e, 0xa9, 0xb6, 0x89, 0x2d, 0x76, 0xa8, 0x71, 0x9e, 0x2f,
	0x8e, 0x48, 0x76, 0x07, 0x62, 0x09, 0x84, 0xa6, 0x86, 0x5a, 0xe7, 0x4e, 0xfe, 0x67, 0x68, 0xc6,
	0x32, 0x81, 0xcc, 0x1f, 0xe2, 0x06, 0xa4, 0x39, 0x28, 0xb6, 0x9c, 0xf4, 0xce, 0x5d, 0x0f, 0x4a,
	0x9e, 0x4c, 0xf6, 0x46, 0x7e, 0x29, 0x25, 0x67, 0x28, 0xa5, 0xba, 0x5b, 0x4a, 0x29, 0x1f, 0xe4,
	0x68, 0x7a, 0x10, 0x66, 0x2b, 0x3d, 0x85, 0xd4, 0x91, 0xaa, 0xb0, 0xfc, 0x17, 0x21, 0xd1, 0x55,
	0x15, 0x9b, 0x1d, 0x68, 0x5c, 0x66, 0xe3, 0xe8, 0x93, 0xf8, 0x35, 0x06, 0x40, 0x4f, 0xc2, 0x49,
	0x8b, 0x06, 0x2c, 0xd9, 0x04, 0x91, 0x53, 0x8b, 0xce, 0x02, 0x99, 0x5e, 0x19, 0x4d, 0x0b, 0xdf,
	0xaa, 0xe2, 0x1d, 0xa5, 0x9f, 0xe2, 0x76, 0x40, 0x54, 0xf8, 0x1e, 0x6e, 0x8f, 0xa8, 0x84, 0xa4,
	0xf8, 0xa3, 0xe1, 0x14, 0x5f, 0x0b, 0x5f, 0x73, 0x24, 0xbb, 0x7f, 0x5e, 0x80, 0x5c, 0x20, 0x47,
	0xa7, 0xeb, 0xcb, 0xf7, 0x6e, 0xf4, 0xc8, 0xcc, 0xa7, 0x41, 0x49, 0xe8, 0xa9, 0x3a, 0xd9, 0xf6,
	0xfa, 0x64, 0x20, 0x66, 0x89, 0x60, 0xcc, 0xc4, 0x32, 0x24, 0x51, 0x8b, 0xee, 0x8b, 0x65, 0x87,
	0x50, 0x4b, 0x7f, 0x1a, 0x94, 0x12, 0xdc, 0x94, 0xcb, 0xc5, 0x6f, 0x40, 0x50, 0xf5, 0xb6, 0xd1,
	0x62, 0x6d, 0x2d, 0xbb, 0xf5, 0xc5, 0xd8, 0xa2, 0xfa, 0x58, 0x39, 0xa4, 0xba, 0x3c, 0x70, 0xdc,
	0xae, 0xb0, 0x0d, 0xe0, 0x0b, 0x83, 0xa1, 0xca, 0xf0, 0x50, 0xad, 0x04, 0x43, 0x95, 0x09, 0x46,
	0x23, 0x07, 0xb0, 0xd7, 0x35, 0x49, 0x9f, 0x85, 0x49, 0x7a, 0x0d, 0xe9, 0x06, 0xea, 0x1c, 0x46,
	0xd4, 0xe7, 0x1d, 0x48, 0x12, 0xd4, 0x39, 0xf5, 0x22, 0x23, 0x10, 0xaa, 0x1b, 0xdd, 0x1c, 0x8b,
	0x0c, 0x8d, 0x67, 0x4a, 0x48, 0x96, 0x49, 0x06, 0x2c, 0x36, 0x50, 0xa7, 0x6e, 0xf4, 0x74, 0xa7,
	0xb2, 0x4b, 0x40, 0x21, 0xbd, 0xda, 0x66, 0xa5, 0xc6, 0x04, 0x32, 0x7f, 0x88, 0x77, 0x21, 0xa1,
	0xa3, 0xae, 0xe3, 0x46, 0x2d, 0x7d, 0x3d, 0x28, 0xb1, 0xb9, 0xcc, 0x7e, 0xa9, 0x79, 0x8b, 0x82,
	0x39, 0xe5, 0xcc, 0xcc, 0x99, 0x40, 0xe6, 0x0f, 0xe9, 0x3d, 0x2c, 0x35, 0x50, 0xc7, 0x0e, 0xac,
	0xb8, 0x07, 0x4b, 0xd4, 0x25, 0xf6, 0x3a, 0xd8, 0xd7, 0x4a, 0xa3, 0x47, 0x30, 0xb4, 0x55, 0x39,
	0x47, 0x9c, 0x29, 0xeb, 0x6a, 0x3f, 0xc6, 0x20, 0xf7, 0xce, 0xc6, 0x96, 0xe7, 0xee, 0x57, 0x90,
	0x20, 0xa8, 0x63, 0x3b, 0x68, 0x1b, 0xa3, 0x68, 0x41, 0x6d, 0x0a, 0x6d, 0xf3, 0xf3, 0x64, 0x56,
	0x85, 0x67, 0x90, 0xf1, 0x44, 0x21, 0x89, 0x1f, 0x7d, 0x9a, 0x7b, 0x90, 0x64, 0xa0, 0x11, 0x49,
	0x4d, 0x6f, 0x4e, 0x6e, 0xc3, 0x2e, 0xcc, 0xc8, 0x83, 0x6b, 0x42, 0xae, 0x81, 0x3a, 0xef, 0x4c,
	0x05, 0x11, 0xfc, 0xaf, 0x52, 0x61, 0x19, 0xe2, 0x3a, 0xbe, 0x74, 0xd0, 0xe8, 0x30, 0xb2, 0x2a,
	0xa4, 0x23, 0xe6, 0xe3, 0x2e, 0xd6, 0xe6, 0x93, 0x6b, 0xbf, 0xc4, 0x60, 0x99, 0xc6, 0xec, 0xc8,
	0xb8, 0xc0, 0x34, 0xb6, 0x11, 0x57, 0xfb, 0x1a, 0x64, 0x9a, 0xb8, 0x6d, 0x58, 0xd8, 0x47, 0x4e,
	0x73, 0xc1, 0xa1, 0x22, 0x4a, 0xb0, 0x88, 0xda, 0x04, 0x5b, 0xa7, 0x7c, 0x65, 0xdb, 0x59, 0x22,
	0xcb, 0x84, 0xac, 0x2e, 0x6c, 0x9a, 0xc7, 0x6d, 0xfa, 0x8a, 0x3b, 0xc3, 0xc6, 0xc1, 0x4d, 0x09,
	0x43, 0x9b, 0x7a, 0x0b, 0x99, 0x63, 0xcb, 0xe8, 0x9a, 0x64, 0xda, 0x36, 0x53, 0x04, 0xa1, 0x49,
	0xfa, 0x26, 0xef, 0x32, 0xc1, 0x4e, 0xc1, 0xc5, 0xd2, 0x7d, 0x58, 0xaa, 0x5b, 0x18, 0x11, 0xec,
	0x25, 0x9a, 0x1f, 0xa7, 0x58, 0x20, 0x4e, 0xd2, 0x7d, 0xc8, 0xba, 0x2b, 0x53, 0xad, 0x3c, 0xa4,
	0xec, 0x5e, 0xab, 0x85, 0x6d, 0x9b, 0xa9, 0xa5, 0x65, 0x77, 0x2a, 0x3d, 0x81, 0x95, 0x17, 0xce,
	0xf5, 0x64, 0xbf, 0xd3, 0x2d, 0x8c, 0x14, 0x6e, 0xb1, 0x0e, 0x70, 0x86, 0xec, 0xd3, 0x1e, 0x13,
	0x39, 0x46, 0x99, 0x33, 0xe4, 0xe8, 0x48, 0x5f, 0xc3, 0xea, 0x0d, 0xb3, 0x40, 0x51, 0xdd, 0x83,
	0x1c, 0xb7, 0xe3, 0x75, 0xe5, 0xec, 0x2c, 0xdb, 0xf3, 0xf5, 0x24, 0x09, 0x72, 0x27, 0x0e, 0x31,
	0x8b, 0x6c, 0x0f, 0xcf, 0x60, 0x71, 0xa7, 0x75, 0xa6, 0xe2, 0x0b, 0xbc, 0x8f, 0x59, 0x04, 0x57,
	0x40, 0x40, 0x97, 0xc8, 0x52, 0x9c, 0xce, 0xc6, 0x27, 0x6e, 0x5c, 0x17, 0xbc, 0xb8, 0x4a, 0x8f,
	0xe0, 0x56, 0xd0, 0x90, 0xe2, 0x17, 0x01, 0x98, 0x76, 0xc3, 0x38, 0xc7, 0xba, 0x63, 0x1f, 0x90,
	0x48, 0x0f, 0x01, 0x1c, 0x13, 0xba, 0xd0, 0x24, 0xed, 0xa7, 0x90, 0xf3, 0xb4, 0x29, 0xfa, 0xb4,
	0x1b, 0x3b, 0x80, 0x82, 0x1b, 0xb5, 0x37, 0x06, 0x51, 0xdb, 0xfd, 0x13, 0x4c, 0x88, 0xc7, 0xe7,
	0x47, 0x13, 0x24, 0x0f, 0x29, 0xac, 0xa3, 0xa6, 0x86, 0x39, 0x4a, 0x5a, 0x76, 0xa7, 0xd2, 0x36,
	0x2c, 0x9f, 0xa0, 0x2e, 0x9e, 0x70, 0x8f, 0xf1, 0xa8, 0x6e, 0x39, 0x5b, 0x60, 0xe3, 0xad, 0x9f,
	0xf2, 0x90, 0x76, 0xf9, 0xaf, 0xf8, 0x2a, 0x30, 0x5e, 0x1f, 0x6d, 0x52, 0x81, 0xaf, 0x97, 0xc2,
	0x44, 0xa6, 0x27, 0x1e, 0x43, 0xc6, 0x23, 0xd6, 0x62, 0x31, 0x1a, 0x8d, 0x96, 0x66, 0xe1, 0xff,
	0x53, 0x70, 0x61, 0xf1, 0x39, 0x24, 0xe8, 0x15, 0x2e, 0xe6, 0x47, 0x95, 0x39, 0x89, 0x2c, 0x8c,
	0xbb, 0xf4, 0xc5, 0x6f, 0x41, 0x60, 0xac, 0x43, 0x5c, 0x0d, 0xb5, 0x67, 0xfb, 0xb8, 0x3b, 0x8e,
	0xa9, 0x88, 0x87, 0x00, 0x3b, 0x84, 0x60, 0x9d, 0xfb, 0x14, 0xbd, 0x8d, 0x7b, 0x63, 0xbc, 0xf1,
	0xa1, 0x7c, 0xd1, 0x6c, 0x50, 0xaf, 0x21, 0xb7, 0xa3, 0x28, 0x9e, 0x34, 0x2c, 0xd6, 0xc1, 0xc4,
	0x08, 0xf3, 0xd1, 0xbf, 0xf3, 0x29, 0xda, 0x2e, 0xd6, 0xe6, 0x85, 0xb6, 0x0f, 0xe9, 0xf7, 0x9c,
	0x38, 0xcf, 0xe8, 0xe4, 0x4b, 0x80, 0x1d, 0x45, 0x71, 0xb0, 0x66, 0xdc, 0xd4, 0x4b, 0x80, 0x5d,
	0xac, 0xcd, 0x07, 0x6b, 0x0f, 0x92, 0x35, 0x4a, 0xfb, 0x67, 0x74, 0xef, 0x00, 0xd2, 0x3b, 0x8a,
	0xc2, 0x90, 0x66, 0xdc, 0xd0, 0x01, 0xa4, 0x77, 0xb1, 0x36, 0x1f, 0xa4, 0x8c, 0xd7, 0xd4, 0x67,
	0xf3, 0xee, 0x15, 0x64, 0xbd, 0x9c, 0x9a, 0x39, 0xe2, 0xcf, 0x21, 0xde, 0x40, 0x1d, 0xb1, 0x10,
	0x4a, 0xc9, 0x18, 0x57, 0x2d, 0x84, 0xbf, 0xe3, 0xe6, 0x35, 0x48, 0x50, 0x62, 0x30, 0xc6, 0xa1,
	0x72, 0xa8, 0x75, 0x90, 0x26, 0x1e, 0x40, 0xca, 0x21, 0x6c, 0x93, 0xda, 0x64, 0x71, 0x3c, 0xd5,
	0x13, 0xf7, 0x21, 0xe3, 0xdd, 0xe0, 0x61, 0x5b, 0xe2, 0xf4, 0x2d, 0x6c, 0x4b, 0x37, 0x2e, 0xfe,
	0x43, 0xc8, 0x70, 0x82, 0x46, 0x81, 0x8a, 0xa1, 0x40, 0x1e, 0x81, 0x9b, 0x10, 0xe0, 0x3a, 0x24,
	0x77, 0xb1, 0x46, 0x71, 0xd6, 0x42, 0x71, 0x38, 0x49, 0x9b, 0x00, 0x72, 0xcc, 0x38, 0xa3, 0xbd,
	0xa3, 0x28, 0x8c, 0x7e, 0x89, 0x52, 0x78, 0x50, 0x83, 0xfc, 0x6c, 0x02, 0xe2, 0x77, 0xec, 0xf3,
	0xc0, 0xae, 0x1b, 0x66, 0x7f, 0xce, 0x90, 0x9e, 0xc5, 0x1c, 0x20, 0x77, 0x21, 0xc9, 0x99, 0x56,
	0x58, 0xf0, 0x3c, 0xf6, 0x57, 0x58, 0x8f, 0x7e, 0xc9, 0x13, 0x2c, 0x5b, 0xd7, 0x0c, 0x1b, 0x4f,
	0x03, 0x35, 0xb1, 0xd7, 0xed, 0x28, 0x8a, 0x43, 0xae, 0xe6, 0xd2, 0x37, 0xe7, 0x83, 0x55, 0x87,
	0x94, 0x0b, 0x14, 0x5d, 0x89, 0x21, 0x4b, 0x0c, 0xd1, 0xc4, 0x13, 0xf7, 0x7f, 0xa6, 0x3c, 0xda,
	0x39, 0x06, 0xec, 0xf3, 0xa8, 0xfd, 0xde, 0xa0, 0xba, 0x3f, 0x8c, 0x50, 0x60, 0x56, 0xf9, 0x63,
	0x90, 0x1f, 0x4c, 0x44, 0x0e, 0xf4, 0x8e, 0x63, 0x8f, 0x5a, 0xee, 0x63, 0x22, 0x86, 0x7c, 0x58,
	0x0e, 0x91, 0xdc, 0xb0, 0xee, 0x7a, 0x93, 0xcc, 0xee, 0x43, 0xca, 0x11, 0x89, 0x77, 0x23, 0xb5,
	0x23, 0xc2, 0x39, 0xc4, 0x5b, 0xdf, 0xc0, 0x8a, 0x8c, 0x6d, 0x4c, 0xa6, 0x8f, 0xe9, 0xf8, 0x33,
	0x3e, 0x81, 0xd5, 0x30, 0xbc, 0x49, 0xe1, 0x1c, 0x0f, 0xfa, 0x16, 0xee, 0xec, 0xaa, 0x36, 0xa5,
	0xbd, 0xc3, 0xdc, 0xf9, 0x3f, 0x03, 0xbe, 0x81, 0x95, 0x3d, 0x7d, 0x8e, 0x78, 0xa7, 0x70, 0x27,
	0x94, 0xd5, 0x8f, 0x01, 0x7c, 0x18, 0x9d, 0x40, 0x21, 0x1f, 0x06, 0xef, 0x61, 0x69, 0x88, 0xec,
	0x87, 0xb6, 0xad, 0x9b, 0x9f, 0x03, 0x53, 0x5c, 0xd3, 0xb5, 0xdb, 0xbf, 0x5f, 0x15, 0x63, 0x7f,
	0x5e, 0x15, 0x63, 0x7f, 0x5f, 0x15, 0x63, 0x1f, 0xe2, 0xc8, 0x54, 0x9b, 0x49, 0xf6, 0xa7, 0x8b,
	0xc7, 0xff, 0x04, 0x00, 0x00, 0xff, 0xff, 0xb4, 0xba, 0x58, 0x9d, 0x26, 0x19, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// RelationClient is the client API for Relation service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RelationClient interface {
	Relation(ctx context.Context, in *RelationReq, opts ...grpc.CallOption) (*FollowingReply, error)
	Relations(ctx context.Context, in *RelationsReq, opts ...grpc.CallOption) (*FollowingMapReply, error)
	Stat(ctx context.Context, in *MidReq, opts ...grpc.CallOption) (*StatReply, error)
	Stats(ctx context.Context, in *MidsReq, opts ...grpc.CallOption) (*StatsReply, error)
	Attentions(ctx context.Context, in *MidReq, opts ...grpc.CallOption) (*FollowingsReply, error)
	Followings(ctx context.Context, in *MidReq, opts ...grpc.CallOption) (*FollowingsReply, error)
	AddFollowing(ctx context.Context, in *FollowingReq, opts ...grpc.CallOption) (*EmptyReply, error)
	DelFollowing(ctx context.Context, in *FollowingReq, opts ...grpc.CallOption) (*EmptyReply, error)
	Whispers(ctx context.Context, in *MidReq, opts ...grpc.CallOption) (*FollowingsReply, error)
	AddWhisper(ctx context.Context, in *FollowingReq, opts ...grpc.CallOption) (*EmptyReply, error)
	DelWhisper(ctx context.Context, in *FollowingReq, opts ...grpc.CallOption) (*EmptyReply, error)
	Blacks(ctx context.Context, in *MidReq, opts ...grpc.CallOption) (*FollowingsReply, error)
	AddBlack(ctx context.Context, in *FollowingReq, opts ...grpc.CallOption) (*EmptyReply, error)
	DelBlack(ctx context.Context, in *FollowingReq, opts ...grpc.CallOption) (*EmptyReply, error)
	Followers(ctx context.Context, in *MidReq, opts ...grpc.CallOption) (*FollowingsReply, error)
	DelFollower(ctx context.Context, in *FollowingReq, opts ...grpc.CallOption) (*EmptyReply, error)
	Tag(ctx context.Context, in *TagIdReq, opts ...grpc.CallOption) (*TagReply, error)
	Tags(ctx context.Context, in *MidReq, opts ...grpc.CallOption) (*TagsCountReply, error)
	UserTag(ctx context.Context, in *RelationReq, opts ...grpc.CallOption) (*UserTagReply, error)
	CreateTag(ctx context.Context, in *TagReq, opts ...grpc.CallOption) (*CreateTagReply, error)
	UpdateTag(ctx context.Context, in *TagUpdateReq, opts ...grpc.CallOption) (*EmptyReply, error)
	DelTag(ctx context.Context, in *TagDelReq, opts ...grpc.CallOption) (*EmptyReply, error)
	TagsAddUsers(ctx context.Context, in *TagsMoveUsersReq, opts ...grpc.CallOption) (*EmptyReply, error)
	TagsCopyUsers(ctx context.Context, in *TagsMoveUsersReq, opts ...grpc.CallOption) (*EmptyReply, error)
	TagsMoveUsers(ctx context.Context, in *TagsMoveUsersReq, opts ...grpc.CallOption) (*EmptyReply, error)
	Prompt(ctx context.Context, in *PromptReq, opts ...grpc.CallOption) (*PromptReply, error)
	ClosePrompt(ctx context.Context, in *PromptReq, opts ...grpc.CallOption) (*EmptyReply, error)
	AddSpecial(ctx context.Context, in *FollowingReq, opts ...grpc.CallOption) (*EmptyReply, error)
	DelSpecial(ctx context.Context, in *FollowingReq, opts ...grpc.CallOption) (*EmptyReply, error)
	Special(ctx context.Context, in *MidReq, opts ...grpc.CallOption) (*SpecialReply, error)
	FollowersUnread(ctx context.Context, in *MidReq, opts ...grpc.CallOption) (*FollowersUnreadReply, error)
	FollowersUnreadCount(ctx context.Context, in *MidReq, opts ...grpc.CallOption) (*FollowersUnreadCountReply, error)
	AchieveGet(ctx context.Context, in *AchieveGetReq, opts ...grpc.CallOption) (*AchieveGetReply, error)
	Achieve(ctx context.Context, in *AchieveReq, opts ...grpc.CallOption) (*AchieveReply, error)
	ResetFollowersUnread(ctx context.Context, in *MidReq, opts ...grpc.CallOption) (*EmptyReply, error)
	ResetFollowersUnreadCount(ctx context.Context, in *MidReq, opts ...grpc.CallOption) (*EmptyReply, error)
	DisableFollowerNotify(ctx context.Context, in *MidReq, opts ...grpc.CallOption) (*EmptyReply, error)
	EnableFollowerNotify(ctx context.Context, in *MidReq, opts ...grpc.CallOption) (*EmptyReply, error)
	FollowerNotifySetting(ctx context.Context, in *MidReq, opts ...grpc.CallOption) (*FollowerNotifySettingReply, error)
	SameFollowings(ctx context.Context, in *SameFollowingReq, opts ...grpc.CallOption) (*FollowingsReply, error)
}

type relationClient struct {
	cc *grpc.ClientConn
}

func NewRelationClient(cc *grpc.ClientConn) RelationClient {
	return &relationClient{cc}
}

func (c *relationClient) Relation(ctx context.Context, in *RelationReq, opts ...grpc.CallOption) (*FollowingReply, error) {
	out := new(FollowingReply)
	err := c.cc.Invoke(ctx, "/relation.service.Relation/Relation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *relationClient) Relations(ctx context.Context, in *RelationsReq, opts ...grpc.CallOption) (*FollowingMapReply, error) {
	out := new(FollowingMapReply)
	err := c.cc.Invoke(ctx, "/relation.service.Relation/Relations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *relationClient) Stat(ctx context.Context, in *MidReq, opts ...grpc.CallOption) (*StatReply, error) {
	out := new(StatReply)
	err := c.cc.Invoke(ctx, "/relation.service.Relation/Stat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *relationClient) Stats(ctx context.Context, in *MidsReq, opts ...grpc.CallOption) (*StatsReply, error) {
	out := new(StatsReply)
	err := c.cc.Invoke(ctx, "/relation.service.Relation/Stats", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *relationClient) Attentions(ctx context.Context, in *MidReq, opts ...grpc.CallOption) (*FollowingsReply, error) {
	out := new(FollowingsReply)
	err := c.cc.Invoke(ctx, "/relation.service.Relation/Attentions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *relationClient) Followings(ctx context.Context, in *MidReq, opts ...grpc.CallOption) (*FollowingsReply, error) {
	out := new(FollowingsReply)
	err := c.cc.Invoke(ctx, "/relation.service.Relation/Followings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *relationClient) AddFollowing(ctx context.Context, in *FollowingReq, opts ...grpc.CallOption) (*EmptyReply, error) {
	out := new(EmptyReply)
	err := c.cc.Invoke(ctx, "/relation.service.Relation/AddFollowing", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *relationClient) DelFollowing(ctx context.Context, in *FollowingReq, opts ...grpc.CallOption) (*EmptyReply, error) {
	out := new(EmptyReply)
	err := c.cc.Invoke(ctx, "/relation.service.Relation/DelFollowing", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *relationClient) Whispers(ctx context.Context, in *MidReq, opts ...grpc.CallOption) (*FollowingsReply, error) {
	out := new(FollowingsReply)
	err := c.cc.Invoke(ctx, "/relation.service.Relation/Whispers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *relationClient) AddWhisper(ctx context.Context, in *FollowingReq, opts ...grpc.CallOption) (*EmptyReply, error) {
	out := new(EmptyReply)
	err := c.cc.Invoke(ctx, "/relation.service.Relation/AddWhisper", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *relationClient) DelWhisper(ctx context.Context, in *FollowingReq, opts ...grpc.CallOption) (*EmptyReply, error) {
	out := new(EmptyReply)
	err := c.cc.Invoke(ctx, "/relation.service.Relation/DelWhisper", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *relationClient) Blacks(ctx context.Context, in *MidReq, opts ...grpc.CallOption) (*FollowingsReply, error) {
	out := new(FollowingsReply)
	err := c.cc.Invoke(ctx, "/relation.service.Relation/Blacks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *relationClient) AddBlack(ctx context.Context, in *FollowingReq, opts ...grpc.CallOption) (*EmptyReply, error) {
	out := new(EmptyReply)
	err := c.cc.Invoke(ctx, "/relation.service.Relation/AddBlack", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *relationClient) DelBlack(ctx context.Context, in *FollowingReq, opts ...grpc.CallOption) (*EmptyReply, error) {
	out := new(EmptyReply)
	err := c.cc.Invoke(ctx, "/relation.service.Relation/DelBlack", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *relationClient) Followers(ctx context.Context, in *MidReq, opts ...grpc.CallOption) (*FollowingsReply, error) {
	out := new(FollowingsReply)
	err := c.cc.Invoke(ctx, "/relation.service.Relation/Followers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *relationClient) DelFollower(ctx context.Context, in *FollowingReq, opts ...grpc.CallOption) (*EmptyReply, error) {
	out := new(EmptyReply)
	err := c.cc.Invoke(ctx, "/relation.service.Relation/DelFollower", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *relationClient) Tag(ctx context.Context, in *TagIdReq, opts ...grpc.CallOption) (*TagReply, error) {
	out := new(TagReply)
	err := c.cc.Invoke(ctx, "/relation.service.Relation/Tag", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *relationClient) Tags(ctx context.Context, in *MidReq, opts ...grpc.CallOption) (*TagsCountReply, error) {
	out := new(TagsCountReply)
	err := c.cc.Invoke(ctx, "/relation.service.Relation/Tags", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *relationClient) UserTag(ctx context.Context, in *RelationReq, opts ...grpc.CallOption) (*UserTagReply, error) {
	out := new(UserTagReply)
	err := c.cc.Invoke(ctx, "/relation.service.Relation/UserTag", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *relationClient) CreateTag(ctx context.Context, in *TagReq, opts ...grpc.CallOption) (*CreateTagReply, error) {
	out := new(CreateTagReply)
	err := c.cc.Invoke(ctx, "/relation.service.Relation/CreateTag", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *relationClient) UpdateTag(ctx context.Context, in *TagUpdateReq, opts ...grpc.CallOption) (*EmptyReply, error) {
	out := new(EmptyReply)
	err := c.cc.Invoke(ctx, "/relation.service.Relation/UpdateTag", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *relationClient) DelTag(ctx context.Context, in *TagDelReq, opts ...grpc.CallOption) (*EmptyReply, error) {
	out := new(EmptyReply)
	err := c.cc.Invoke(ctx, "/relation.service.Relation/DelTag", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *relationClient) TagsAddUsers(ctx context.Context, in *TagsMoveUsersReq, opts ...grpc.CallOption) (*EmptyReply, error) {
	out := new(EmptyReply)
	err := c.cc.Invoke(ctx, "/relation.service.Relation/TagsAddUsers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *relationClient) TagsCopyUsers(ctx context.Context, in *TagsMoveUsersReq, opts ...grpc.CallOption) (*EmptyReply, error) {
	out := new(EmptyReply)
	err := c.cc.Invoke(ctx, "/relation.service.Relation/TagsCopyUsers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *relationClient) TagsMoveUsers(ctx context.Context, in *TagsMoveUsersReq, opts ...grpc.CallOption) (*EmptyReply, error) {
	out := new(EmptyReply)
	err := c.cc.Invoke(ctx, "/relation.service.Relation/TagsMoveUsers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *relationClient) Prompt(ctx context.Context, in *PromptReq, opts ...grpc.CallOption) (*PromptReply, error) {
	out := new(PromptReply)
	err := c.cc.Invoke(ctx, "/relation.service.Relation/Prompt", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *relationClient) ClosePrompt(ctx context.Context, in *PromptReq, opts ...grpc.CallOption) (*EmptyReply, error) {
	out := new(EmptyReply)
	err := c.cc.Invoke(ctx, "/relation.service.Relation/ClosePrompt", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *relationClient) AddSpecial(ctx context.Context, in *FollowingReq, opts ...grpc.CallOption) (*EmptyReply, error) {
	out := new(EmptyReply)
	err := c.cc.Invoke(ctx, "/relation.service.Relation/AddSpecial", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *relationClient) DelSpecial(ctx context.Context, in *FollowingReq, opts ...grpc.CallOption) (*EmptyReply, error) {
	out := new(EmptyReply)
	err := c.cc.Invoke(ctx, "/relation.service.Relation/DelSpecial", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *relationClient) Special(ctx context.Context, in *MidReq, opts ...grpc.CallOption) (*SpecialReply, error) {
	out := new(SpecialReply)
	err := c.cc.Invoke(ctx, "/relation.service.Relation/Special", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *relationClient) FollowersUnread(ctx context.Context, in *MidReq, opts ...grpc.CallOption) (*FollowersUnreadReply, error) {
	out := new(FollowersUnreadReply)
	err := c.cc.Invoke(ctx, "/relation.service.Relation/FollowersUnread", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *relationClient) FollowersUnreadCount(ctx context.Context, in *MidReq, opts ...grpc.CallOption) (*FollowersUnreadCountReply, error) {
	out := new(FollowersUnreadCountReply)
	err := c.cc.Invoke(ctx, "/relation.service.Relation/FollowersUnreadCount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *relationClient) AchieveGet(ctx context.Context, in *AchieveGetReq, opts ...grpc.CallOption) (*AchieveGetReply, error) {
	out := new(AchieveGetReply)
	err := c.cc.Invoke(ctx, "/relation.service.Relation/AchieveGet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *relationClient) Achieve(ctx context.Context, in *AchieveReq, opts ...grpc.CallOption) (*AchieveReply, error) {
	out := new(AchieveReply)
	err := c.cc.Invoke(ctx, "/relation.service.Relation/Achieve", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *relationClient) ResetFollowersUnread(ctx context.Context, in *MidReq, opts ...grpc.CallOption) (*EmptyReply, error) {
	out := new(EmptyReply)
	err := c.cc.Invoke(ctx, "/relation.service.Relation/ResetFollowersUnread", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *relationClient) ResetFollowersUnreadCount(ctx context.Context, in *MidReq, opts ...grpc.CallOption) (*EmptyReply, error) {
	out := new(EmptyReply)
	err := c.cc.Invoke(ctx, "/relation.service.Relation/ResetFollowersUnreadCount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *relationClient) DisableFollowerNotify(ctx context.Context, in *MidReq, opts ...grpc.CallOption) (*EmptyReply, error) {
	out := new(EmptyReply)
	err := c.cc.Invoke(ctx, "/relation.service.Relation/DisableFollowerNotify", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *relationClient) EnableFollowerNotify(ctx context.Context, in *MidReq, opts ...grpc.CallOption) (*EmptyReply, error) {
	out := new(EmptyReply)
	err := c.cc.Invoke(ctx, "/relation.service.Relation/EnableFollowerNotify", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *relationClient) FollowerNotifySetting(ctx context.Context, in *MidReq, opts ...grpc.CallOption) (*FollowerNotifySettingReply, error) {
	out := new(FollowerNotifySettingReply)
	err := c.cc.Invoke(ctx, "/relation.service.Relation/FollowerNotifySetting", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *relationClient) SameFollowings(ctx context.Context, in *SameFollowingReq, opts ...grpc.CallOption) (*FollowingsReply, error) {
	out := new(FollowingsReply)
	err := c.cc.Invoke(ctx, "/relation.service.Relation/SameFollowings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RelationServer is the server API for Relation service.
type RelationServer interface {
	Relation(context.Context, *RelationReq) (*FollowingReply, error)
	Relations(context.Context, *RelationsReq) (*FollowingMapReply, error)
	Stat(context.Context, *MidReq) (*StatReply, error)
	Stats(context.Context, *MidsReq) (*StatsReply, error)
	Attentions(context.Context, *MidReq) (*FollowingsReply, error)
	Followings(context.Context, *MidReq) (*FollowingsReply, error)
	AddFollowing(context.Context, *FollowingReq) (*EmptyReply, error)
	DelFollowing(context.Context, *FollowingReq) (*EmptyReply, error)
	Whispers(context.Context, *MidReq) (*FollowingsReply, error)
	AddWhisper(context.Context, *FollowingReq) (*EmptyReply, error)
	DelWhisper(context.Context, *FollowingReq) (*EmptyReply, error)
	Blacks(context.Context, *MidReq) (*FollowingsReply, error)
	AddBlack(context.Context, *FollowingReq) (*EmptyReply, error)
	DelBlack(context.Context, *FollowingReq) (*EmptyReply, error)
	Followers(context.Context, *MidReq) (*FollowingsReply, error)
	DelFollower(context.Context, *FollowingReq) (*EmptyReply, error)
	Tag(context.Context, *TagIdReq) (*TagReply, error)
	Tags(context.Context, *MidReq) (*TagsCountReply, error)
	UserTag(context.Context, *RelationReq) (*UserTagReply, error)
	CreateTag(context.Context, *TagReq) (*CreateTagReply, error)
	UpdateTag(context.Context, *TagUpdateReq) (*EmptyReply, error)
	DelTag(context.Context, *TagDelReq) (*EmptyReply, error)
	TagsAddUsers(context.Context, *TagsMoveUsersReq) (*EmptyReply, error)
	TagsCopyUsers(context.Context, *TagsMoveUsersReq) (*EmptyReply, error)
	TagsMoveUsers(context.Context, *TagsMoveUsersReq) (*EmptyReply, error)
	Prompt(context.Context, *PromptReq) (*PromptReply, error)
	ClosePrompt(context.Context, *PromptReq) (*EmptyReply, error)
	AddSpecial(context.Context, *FollowingReq) (*EmptyReply, error)
	DelSpecial(context.Context, *FollowingReq) (*EmptyReply, error)
	Special(context.Context, *MidReq) (*SpecialReply, error)
	FollowersUnread(context.Context, *MidReq) (*FollowersUnreadReply, error)
	FollowersUnreadCount(context.Context, *MidReq) (*FollowersUnreadCountReply, error)
	AchieveGet(context.Context, *AchieveGetReq) (*AchieveGetReply, error)
	Achieve(context.Context, *AchieveReq) (*AchieveReply, error)
	ResetFollowersUnread(context.Context, *MidReq) (*EmptyReply, error)
	ResetFollowersUnreadCount(context.Context, *MidReq) (*EmptyReply, error)
	DisableFollowerNotify(context.Context, *MidReq) (*EmptyReply, error)
	EnableFollowerNotify(context.Context, *MidReq) (*EmptyReply, error)
	FollowerNotifySetting(context.Context, *MidReq) (*FollowerNotifySettingReply, error)
	SameFollowings(context.Context, *SameFollowingReq) (*FollowingsReply, error)
}

func RegisterRelationServer(s *grpc.Server, srv RelationServer) {
	s.RegisterService(&_Relation_serviceDesc, srv)
}

func _Relation_Relation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RelationReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelationServer).Relation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/relation.service.Relation/Relation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelationServer).Relation(ctx, req.(*RelationReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Relation_Relations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RelationsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelationServer).Relations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/relation.service.Relation/Relations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelationServer).Relations(ctx, req.(*RelationsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Relation_Stat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MidReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelationServer).Stat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/relation.service.Relation/Stat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelationServer).Stat(ctx, req.(*MidReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Relation_Stats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MidsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelationServer).Stats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/relation.service.Relation/Stats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelationServer).Stats(ctx, req.(*MidsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Relation_Attentions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MidReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelationServer).Attentions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/relation.service.Relation/Attentions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelationServer).Attentions(ctx, req.(*MidReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Relation_Followings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MidReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelationServer).Followings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/relation.service.Relation/Followings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelationServer).Followings(ctx, req.(*MidReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Relation_AddFollowing_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FollowingReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelationServer).AddFollowing(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/relation.service.Relation/AddFollowing",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelationServer).AddFollowing(ctx, req.(*FollowingReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Relation_DelFollowing_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FollowingReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelationServer).DelFollowing(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/relation.service.Relation/DelFollowing",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelationServer).DelFollowing(ctx, req.(*FollowingReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Relation_Whispers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MidReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelationServer).Whispers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/relation.service.Relation/Whispers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelationServer).Whispers(ctx, req.(*MidReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Relation_AddWhisper_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FollowingReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelationServer).AddWhisper(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/relation.service.Relation/AddWhisper",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelationServer).AddWhisper(ctx, req.(*FollowingReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Relation_DelWhisper_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FollowingReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelationServer).DelWhisper(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/relation.service.Relation/DelWhisper",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelationServer).DelWhisper(ctx, req.(*FollowingReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Relation_Blacks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MidReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelationServer).Blacks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/relation.service.Relation/Blacks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelationServer).Blacks(ctx, req.(*MidReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Relation_AddBlack_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FollowingReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelationServer).AddBlack(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/relation.service.Relation/AddBlack",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelationServer).AddBlack(ctx, req.(*FollowingReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Relation_DelBlack_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FollowingReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelationServer).DelBlack(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/relation.service.Relation/DelBlack",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelationServer).DelBlack(ctx, req.(*FollowingReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Relation_Followers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MidReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelationServer).Followers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/relation.service.Relation/Followers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelationServer).Followers(ctx, req.(*MidReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Relation_DelFollower_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FollowingReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelationServer).DelFollower(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/relation.service.Relation/DelFollower",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelationServer).DelFollower(ctx, req.(*FollowingReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Relation_Tag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TagIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelationServer).Tag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/relation.service.Relation/Tag",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelationServer).Tag(ctx, req.(*TagIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Relation_Tags_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MidReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelationServer).Tags(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/relation.service.Relation/Tags",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelationServer).Tags(ctx, req.(*MidReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Relation_UserTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RelationReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelationServer).UserTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/relation.service.Relation/UserTag",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelationServer).UserTag(ctx, req.(*RelationReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Relation_CreateTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TagReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelationServer).CreateTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/relation.service.Relation/CreateTag",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelationServer).CreateTag(ctx, req.(*TagReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Relation_UpdateTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TagUpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelationServer).UpdateTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/relation.service.Relation/UpdateTag",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelationServer).UpdateTag(ctx, req.(*TagUpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Relation_DelTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TagDelReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelationServer).DelTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/relation.service.Relation/DelTag",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelationServer).DelTag(ctx, req.(*TagDelReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Relation_TagsAddUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TagsMoveUsersReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelationServer).TagsAddUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/relation.service.Relation/TagsAddUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelationServer).TagsAddUsers(ctx, req.(*TagsMoveUsersReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Relation_TagsCopyUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TagsMoveUsersReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelationServer).TagsCopyUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/relation.service.Relation/TagsCopyUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelationServer).TagsCopyUsers(ctx, req.(*TagsMoveUsersReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Relation_TagsMoveUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TagsMoveUsersReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelationServer).TagsMoveUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/relation.service.Relation/TagsMoveUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelationServer).TagsMoveUsers(ctx, req.(*TagsMoveUsersReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Relation_Prompt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PromptReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelationServer).Prompt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/relation.service.Relation/Prompt",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelationServer).Prompt(ctx, req.(*PromptReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Relation_ClosePrompt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PromptReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelationServer).ClosePrompt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/relation.service.Relation/ClosePrompt",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelationServer).ClosePrompt(ctx, req.(*PromptReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Relation_AddSpecial_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FollowingReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelationServer).AddSpecial(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/relation.service.Relation/AddSpecial",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelationServer).AddSpecial(ctx, req.(*FollowingReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Relation_DelSpecial_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FollowingReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelationServer).DelSpecial(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/relation.service.Relation/DelSpecial",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelationServer).DelSpecial(ctx, req.(*FollowingReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Relation_Special_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MidReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelationServer).Special(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/relation.service.Relation/Special",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelationServer).Special(ctx, req.(*MidReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Relation_FollowersUnread_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MidReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelationServer).FollowersUnread(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/relation.service.Relation/FollowersUnread",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelationServer).FollowersUnread(ctx, req.(*MidReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Relation_FollowersUnreadCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MidReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelationServer).FollowersUnreadCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/relation.service.Relation/FollowersUnreadCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelationServer).FollowersUnreadCount(ctx, req.(*MidReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Relation_AchieveGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AchieveGetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelationServer).AchieveGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/relation.service.Relation/AchieveGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelationServer).AchieveGet(ctx, req.(*AchieveGetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Relation_Achieve_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AchieveReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelationServer).Achieve(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/relation.service.Relation/Achieve",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelationServer).Achieve(ctx, req.(*AchieveReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Relation_ResetFollowersUnread_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MidReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelationServer).ResetFollowersUnread(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/relation.service.Relation/ResetFollowersUnread",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelationServer).ResetFollowersUnread(ctx, req.(*MidReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Relation_ResetFollowersUnreadCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MidReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelationServer).ResetFollowersUnreadCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/relation.service.Relation/ResetFollowersUnreadCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelationServer).ResetFollowersUnreadCount(ctx, req.(*MidReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Relation_DisableFollowerNotify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MidReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelationServer).DisableFollowerNotify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/relation.service.Relation/DisableFollowerNotify",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelationServer).DisableFollowerNotify(ctx, req.(*MidReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Relation_EnableFollowerNotify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MidReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelationServer).EnableFollowerNotify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/relation.service.Relation/EnableFollowerNotify",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelationServer).EnableFollowerNotify(ctx, req.(*MidReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Relation_FollowerNotifySetting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MidReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelationServer).FollowerNotifySetting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/relation.service.Relation/FollowerNotifySetting",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelationServer).FollowerNotifySetting(ctx, req.(*MidReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Relation_SameFollowings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SameFollowingReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelationServer).SameFollowings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/relation.service.Relation/SameFollowings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelationServer).SameFollowings(ctx, req.(*SameFollowingReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _Relation_serviceDesc = grpc.ServiceDesc{
	ServiceName: "relation.service.Relation",
	HandlerType: (*RelationServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Relation",
			Handler:    _Relation_Relation_Handler,
		},
		{
			MethodName: "Relations",
			Handler:    _Relation_Relations_Handler,
		},
		{
			MethodName: "Stat",
			Handler:    _Relation_Stat_Handler,
		},
		{
			MethodName: "Stats",
			Handler:    _Relation_Stats_Handler,
		},
		{
			MethodName: "Attentions",
			Handler:    _Relation_Attentions_Handler,
		},
		{
			MethodName: "Followings",
			Handler:    _Relation_Followings_Handler,
		},
		{
			MethodName: "AddFollowing",
			Handler:    _Relation_AddFollowing_Handler,
		},
		{
			MethodName: "DelFollowing",
			Handler:    _Relation_DelFollowing_Handler,
		},
		{
			MethodName: "Whispers",
			Handler:    _Relation_Whispers_Handler,
		},
		{
			MethodName: "AddWhisper",
			Handler:    _Relation_AddWhisper_Handler,
		},
		{
			MethodName: "DelWhisper",
			Handler:    _Relation_DelWhisper_Handler,
		},
		{
			MethodName: "Blacks",
			Handler:    _Relation_Blacks_Handler,
		},
		{
			MethodName: "AddBlack",
			Handler:    _Relation_AddBlack_Handler,
		},
		{
			MethodName: "DelBlack",
			Handler:    _Relation_DelBlack_Handler,
		},
		{
			MethodName: "Followers",
			Handler:    _Relation_Followers_Handler,
		},
		{
			MethodName: "DelFollower",
			Handler:    _Relation_DelFollower_Handler,
		},
		{
			MethodName: "Tag",
			Handler:    _Relation_Tag_Handler,
		},
		{
			MethodName: "Tags",
			Handler:    _Relation_Tags_Handler,
		},
		{
			MethodName: "UserTag",
			Handler:    _Relation_UserTag_Handler,
		},
		{
			MethodName: "CreateTag",
			Handler:    _Relation_CreateTag_Handler,
		},
		{
			MethodName: "UpdateTag",
			Handler:    _Relation_UpdateTag_Handler,
		},
		{
			MethodName: "DelTag",
			Handler:    _Relation_DelTag_Handler,
		},
		{
			MethodName: "TagsAddUsers",
			Handler:    _Relation_TagsAddUsers_Handler,
		},
		{
			MethodName: "TagsCopyUsers",
			Handler:    _Relation_TagsCopyUsers_Handler,
		},
		{
			MethodName: "TagsMoveUsers",
			Handler:    _Relation_TagsMoveUsers_Handler,
		},
		{
			MethodName: "Prompt",
			Handler:    _Relation_Prompt_Handler,
		},
		{
			MethodName: "ClosePrompt",
			Handler:    _Relation_ClosePrompt_Handler,
		},
		{
			MethodName: "AddSpecial",
			Handler:    _Relation_AddSpecial_Handler,
		},
		{
			MethodName: "DelSpecial",
			Handler:    _Relation_DelSpecial_Handler,
		},
		{
			MethodName: "Special",
			Handler:    _Relation_Special_Handler,
		},
		{
			MethodName: "FollowersUnread",
			Handler:    _Relation_FollowersUnread_Handler,
		},
		{
			MethodName: "FollowersUnreadCount",
			Handler:    _Relation_FollowersUnreadCount_Handler,
		},
		{
			MethodName: "AchieveGet",
			Handler:    _Relation_AchieveGet_Handler,
		},
		{
			MethodName: "Achieve",
			Handler:    _Relation_Achieve_Handler,
		},
		{
			MethodName: "ResetFollowersUnread",
			Handler:    _Relation_ResetFollowersUnread_Handler,
		},
		{
			MethodName: "ResetFollowersUnreadCount",
			Handler:    _Relation_ResetFollowersUnreadCount_Handler,
		},
		{
			MethodName: "DisableFollowerNotify",
			Handler:    _Relation_DisableFollowerNotify_Handler,
		},
		{
			MethodName: "EnableFollowerNotify",
			Handler:    _Relation_EnableFollowerNotify_Handler,
		},
		{
			MethodName: "FollowerNotifySetting",
			Handler:    _Relation_FollowerNotifySetting_Handler,
		},
		{
			MethodName: "SameFollowings",
			Handler:    _Relation_SameFollowings_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "app/service/main/relation/api/api.proto",
}

func (m *RelationReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RelationReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Mid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Mid))
	}
	if m.Fid != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Fid))
	}
	if len(m.RealIp) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.RealIp)))
		i += copy(dAtA[i:], m.RealIp)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *FollowingReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FollowingReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Mid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Mid))
	}
	if m.Attribute != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Attribute))
	}
	if m.Source != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Source))
	}
	if m.CTime != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.CTime))
	}
	if m.MTime != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.MTime))
	}
	if len(m.Tag) > 0 {
		dAtA2 := make([]byte, len(m.Tag)*10)
		var j1 int
		for _, num1 := range m.Tag {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		dAtA[i] = 0x32
		i++
		i = encodeVarintApi(dAtA, i, uint64(j1))
		i += copy(dAtA[i:], dAtA2[:j1])
	}
	if m.Special != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Special))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *RelationsReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RelationsReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Mid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Mid))
	}
	if len(m.Fid) > 0 {
		dAtA4 := make([]byte, len(m.Fid)*10)
		var j3 int
		for _, num1 := range m.Fid {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA4[j3] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j3++
			}
			dAtA4[j3] = uint8(num)
			j3++
		}
		dAtA[i] = 0x12
		i++
		i = encodeVarintApi(dAtA, i, uint64(j3))
		i += copy(dAtA[i:], dAtA4[:j3])
	}
	if len(m.RealIp) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.RealIp)))
		i += copy(dAtA[i:], m.RealIp)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *FollowingMapReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FollowingMapReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.FollowingMap) > 0 {
		for k, _ := range m.FollowingMap {
			dAtA[i] = 0xa
			i++
			v := m.FollowingMap[k]
			msgSize := 0
			if v != nil {
				msgSize = v.Size()
				msgSize += 1 + sovApi(uint64(msgSize))
			}
			mapSize := 1 + sovApi(uint64(k)) + msgSize
			i = encodeVarintApi(dAtA, i, uint64(mapSize))
			dAtA[i] = 0x8
			i++
			i = encodeVarintApi(dAtA, i, uint64(k))
			if v != nil {
				dAtA[i] = 0x12
				i++
				i = encodeVarintApi(dAtA, i, uint64(v.Size()))
				n5, err := v.MarshalTo(dAtA[i:])
				if err != nil {
					return 0, err
				}
				i += n5
			}
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *FollowingsReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FollowingsReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.FollowingList) > 0 {
		for _, msg := range m.FollowingList {
			dAtA[i] = 0xa
			i++
			i = encodeVarintApi(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *MidReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MidReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Mid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Mid))
	}
	if len(m.RealIp) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.RealIp)))
		i += copy(dAtA[i:], m.RealIp)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *StatReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StatReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Mid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Mid))
	}
	if m.Following != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Following))
	}
	if m.Whisper != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Whisper))
	}
	if m.Black != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Black))
	}
	if m.Follower != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Follower))
	}
	if m.CTime != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.CTime))
	}
	if m.MTime != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.MTime))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *MidsReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MidsReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Mids) > 0 {
		dAtA7 := make([]byte, len(m.Mids)*10)
		var j6 int
		for _, num1 := range m.Mids {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA7[j6] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j6++
			}
			dAtA7[j6] = uint8(num)
			j6++
		}
		dAtA[i] = 0xa
		i++
		i = encodeVarintApi(dAtA, i, uint64(j6))
		i += copy(dAtA[i:], dAtA7[:j6])
	}
	if len(m.RealIp) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.RealIp)))
		i += copy(dAtA[i:], m.RealIp)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *StatsReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StatsReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.StatReplyMap) > 0 {
		for k, _ := range m.StatReplyMap {
			dAtA[i] = 0xa
			i++
			v := m.StatReplyMap[k]
			msgSize := 0
			if v != nil {
				msgSize = v.Size()
				msgSize += 1 + sovApi(uint64(msgSize))
			}
			mapSize := 1 + sovApi(uint64(k)) + msgSize
			i = encodeVarintApi(dAtA, i, uint64(mapSize))
			dAtA[i] = 0x8
			i++
			i = encodeVarintApi(dAtA, i, uint64(k))
			if v != nil {
				dAtA[i] = 0x12
				i++
				i = encodeVarintApi(dAtA, i, uint64(v.Size()))
				n8, err := v.MarshalTo(dAtA[i:])
				if err != nil {
					return 0, err
				}
				i += n8
			}
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *FollowingReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FollowingReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Mid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Mid))
	}
	if m.Fid != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Fid))
	}
	if m.Source != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Source))
	}
	if len(m.RealIp) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.RealIp)))
		i += copy(dAtA[i:], m.RealIp)
	}
	if m.Action != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Action))
	}
	if len(m.Infoc) > 0 {
		for k, _ := range m.Infoc {
			dAtA[i] = 0x32
			i++
			v := m.Infoc[k]
			mapSize := 1 + len(k) + sovApi(uint64(len(k))) + 1 + len(v) + sovApi(uint64(len(v)))
			i = encodeVarintApi(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintApi(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			dAtA[i] = 0x12
			i++
			i = encodeVarintApi(dAtA, i, uint64(len(v)))
			i += copy(dAtA[i:], v)
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *EmptyReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EmptyReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *TagIdReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TagIdReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Mid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Mid))
	}
	if m.TagId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.TagId))
	}
	if len(m.RealIp) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.RealIp)))
		i += copy(dAtA[i:], m.RealIp)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *TagReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TagReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Mids) > 0 {
		dAtA10 := make([]byte, len(m.Mids)*10)
		var j9 int
		for _, num1 := range m.Mids {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA10[j9] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j9++
			}
			dAtA10[j9] = uint8(num)
			j9++
		}
		dAtA[i] = 0xa
		i++
		i = encodeVarintApi(dAtA, i, uint64(j9))
		i += copy(dAtA[i:], dAtA10[:j9])
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *TagCountReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TagCountReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Tagid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Tagid))
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if m.Count != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Count))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *TagsCountReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TagsCountReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.TagCountList) > 0 {
		for _, msg := range m.TagCountList {
			dAtA[i] = 0xa
			i++
			i = encodeVarintApi(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *UserTagReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserTagReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Tags) > 0 {
		for k, _ := range m.Tags {
			dAtA[i] = 0xa
			i++
			v := m.Tags[k]
			mapSize := 1 + sovApi(uint64(k)) + 1 + len(v) + sovApi(uint64(len(v)))
			i = encodeVarintApi(dAtA, i, uint64(mapSize))
			dAtA[i] = 0x8
			i++
			i = encodeVarintApi(dAtA, i, uint64(k))
			dAtA[i] = 0x12
			i++
			i = encodeVarintApi(dAtA, i, uint64(len(v)))
			i += copy(dAtA[i:], v)
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *TagReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TagReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Mid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Mid))
	}
	if len(m.Tag) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Tag)))
		i += copy(dAtA[i:], m.Tag)
	}
	if len(m.RealIp) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.RealIp)))
		i += copy(dAtA[i:], m.RealIp)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *TagUpdateReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TagUpdateReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Mid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Mid))
	}
	if m.TagId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.TagId))
	}
	if len(m.New) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.New)))
		i += copy(dAtA[i:], m.New)
	}
	if len(m.RealIp) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.RealIp)))
		i += copy(dAtA[i:], m.RealIp)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *TagDelReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TagDelReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Mid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Mid))
	}
	if m.TagId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.TagId))
	}
	if len(m.RealIp) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.RealIp)))
		i += copy(dAtA[i:], m.RealIp)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *TagsMoveUsersReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TagsMoveUsersReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Mid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Mid))
	}
	if m.BeforeId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.BeforeId))
	}
	if len(m.AfterTagIds) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.AfterTagIds)))
		i += copy(dAtA[i:], m.AfterTagIds)
	}
	if len(m.Fids) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Fids)))
		i += copy(dAtA[i:], m.Fids)
	}
	if len(m.RealIp) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.RealIp)))
		i += copy(dAtA[i:], m.RealIp)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *PromptReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PromptReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Mid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Mid))
	}
	if m.Fid != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Fid))
	}
	if m.Btype != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Btype))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *CreateTagReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateTagReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.TagId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.TagId))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *PromptReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PromptReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Success {
		dAtA[i] = 0x8
		i++
		if m.Success {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *FollowersUnreadReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FollowersUnreadReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.HasUnread {
		dAtA[i] = 0x8
		i++
		if m.HasUnread {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *FollowersUnreadCountReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FollowersUnreadCountReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UnreadCount != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.UnreadCount))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *SpecialReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SpecialReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Mids) > 0 {
		dAtA12 := make([]byte, len(m.Mids)*10)
		var j11 int
		for _, num1 := range m.Mids {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA12[j11] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j11++
			}
			dAtA12[j11] = uint8(num)
			j11++
		}
		dAtA[i] = 0xa
		i++
		i = encodeVarintApi(dAtA, i, uint64(j11))
		i += copy(dAtA[i:], dAtA12[:j11])
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *AchieveGetReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AchieveGetReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Award) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Award)))
		i += copy(dAtA[i:], m.Award)
	}
	if m.Mid != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Mid))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *AchieveGetReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AchieveGetReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.AwardToken) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.AwardToken)))
		i += copy(dAtA[i:], m.AwardToken)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *AchieveReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AchieveReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.AwardToken) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.AwardToken)))
		i += copy(dAtA[i:], m.AwardToken)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *AchieveReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AchieveReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Award) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Award)))
		i += copy(dAtA[i:], m.Award)
	}
	if m.Mid != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Mid))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *FollowerNotifySettingReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FollowerNotifySettingReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Mid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Mid))
	}
	if m.Enabled {
		dAtA[i] = 0x10
		i++
		if m.Enabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *SameFollowingReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SameFollowingReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Mid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Mid))
	}
	if m.Mid2 != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Mid2))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintApi(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *RelationReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Mid != 0 {
		n += 1 + sovApi(uint64(m.Mid))
	}
	if m.Fid != 0 {
		n += 1 + sovApi(uint64(m.Fid))
	}
	l = len(m.RealIp)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *FollowingReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Mid != 0 {
		n += 1 + sovApi(uint64(m.Mid))
	}
	if m.Attribute != 0 {
		n += 1 + sovApi(uint64(m.Attribute))
	}
	if m.Source != 0 {
		n += 1 + sovApi(uint64(m.Source))
	}
	if m.CTime != 0 {
		n += 1 + sovApi(uint64(m.CTime))
	}
	if m.MTime != 0 {
		n += 1 + sovApi(uint64(m.MTime))
	}
	if len(m.Tag) > 0 {
		l = 0
		for _, e := range m.Tag {
			l += sovApi(uint64(e))
		}
		n += 1 + sovApi(uint64(l)) + l
	}
	if m.Special != 0 {
		n += 1 + sovApi(uint64(m.Special))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RelationsReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Mid != 0 {
		n += 1 + sovApi(uint64(m.Mid))
	}
	if len(m.Fid) > 0 {
		l = 0
		for _, e := range m.Fid {
			l += sovApi(uint64(e))
		}
		n += 1 + sovApi(uint64(l)) + l
	}
	l = len(m.RealIp)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *FollowingMapReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.FollowingMap) > 0 {
		for k, v := range m.FollowingMap {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovApi(uint64(l))
			}
			mapEntrySize := 1 + sovApi(uint64(k)) + l
			n += mapEntrySize + 1 + sovApi(uint64(mapEntrySize))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *FollowingsReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.FollowingList) > 0 {
		for _, e := range m.FollowingList {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MidReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Mid != 0 {
		n += 1 + sovApi(uint64(m.Mid))
	}
	l = len(m.RealIp)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *StatReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Mid != 0 {
		n += 1 + sovApi(uint64(m.Mid))
	}
	if m.Following != 0 {
		n += 1 + sovApi(uint64(m.Following))
	}
	if m.Whisper != 0 {
		n += 1 + sovApi(uint64(m.Whisper))
	}
	if m.Black != 0 {
		n += 1 + sovApi(uint64(m.Black))
	}
	if m.Follower != 0 {
		n += 1 + sovApi(uint64(m.Follower))
	}
	if m.CTime != 0 {
		n += 1 + sovApi(uint64(m.CTime))
	}
	if m.MTime != 0 {
		n += 1 + sovApi(uint64(m.MTime))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MidsReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Mids) > 0 {
		l = 0
		for _, e := range m.Mids {
			l += sovApi(uint64(e))
		}
		n += 1 + sovApi(uint64(l)) + l
	}
	l = len(m.RealIp)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *StatsReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.StatReplyMap) > 0 {
		for k, v := range m.StatReplyMap {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovApi(uint64(l))
			}
			mapEntrySize := 1 + sovApi(uint64(k)) + l
			n += mapEntrySize + 1 + sovApi(uint64(mapEntrySize))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *FollowingReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Mid != 0 {
		n += 1 + sovApi(uint64(m.Mid))
	}
	if m.Fid != 0 {
		n += 1 + sovApi(uint64(m.Fid))
	}
	if m.Source != 0 {
		n += 1 + sovApi(uint64(m.Source))
	}
	l = len(m.RealIp)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Action != 0 {
		n += 1 + sovApi(uint64(m.Action))
	}
	if len(m.Infoc) > 0 {
		for k, v := range m.Infoc {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovApi(uint64(len(k))) + 1 + len(v) + sovApi(uint64(len(v)))
			n += mapEntrySize + 1 + sovApi(uint64(mapEntrySize))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *EmptyReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TagIdReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Mid != 0 {
		n += 1 + sovApi(uint64(m.Mid))
	}
	if m.TagId != 0 {
		n += 1 + sovApi(uint64(m.TagId))
	}
	l = len(m.RealIp)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TagReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Mids) > 0 {
		l = 0
		for _, e := range m.Mids {
			l += sovApi(uint64(e))
		}
		n += 1 + sovApi(uint64(l)) + l
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TagCountReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Tagid != 0 {
		n += 1 + sovApi(uint64(m.Tagid))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Count != 0 {
		n += 1 + sovApi(uint64(m.Count))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TagsCountReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.TagCountList) > 0 {
		for _, e := range m.TagCountList {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UserTagReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Tags) > 0 {
		for k, v := range m.Tags {
			_ = k
			_ = v
			mapEntrySize := 1 + sovApi(uint64(k)) + 1 + len(v) + sovApi(uint64(len(v)))
			n += mapEntrySize + 1 + sovApi(uint64(mapEntrySize))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TagReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Mid != 0 {
		n += 1 + sovApi(uint64(m.Mid))
	}
	l = len(m.Tag)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.RealIp)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TagUpdateReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Mid != 0 {
		n += 1 + sovApi(uint64(m.Mid))
	}
	if m.TagId != 0 {
		n += 1 + sovApi(uint64(m.TagId))
	}
	l = len(m.New)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.RealIp)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TagDelReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Mid != 0 {
		n += 1 + sovApi(uint64(m.Mid))
	}
	if m.TagId != 0 {
		n += 1 + sovApi(uint64(m.TagId))
	}
	l = len(m.RealIp)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TagsMoveUsersReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Mid != 0 {
		n += 1 + sovApi(uint64(m.Mid))
	}
	if m.BeforeId != 0 {
		n += 1 + sovApi(uint64(m.BeforeId))
	}
	l = len(m.AfterTagIds)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Fids)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.RealIp)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PromptReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Mid != 0 {
		n += 1 + sovApi(uint64(m.Mid))
	}
	if m.Fid != 0 {
		n += 1 + sovApi(uint64(m.Fid))
	}
	if m.Btype != 0 {
		n += 1 + sovApi(uint64(m.Btype))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CreateTagReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TagId != 0 {
		n += 1 + sovApi(uint64(m.TagId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PromptReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Success {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *FollowersUnreadReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.HasUnread {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *FollowersUnreadCountReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UnreadCount != 0 {
		n += 1 + sovApi(uint64(m.UnreadCount))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SpecialReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Mids) > 0 {
		l = 0
		for _, e := range m.Mids {
			l += sovApi(uint64(e))
		}
		n += 1 + sovApi(uint64(l)) + l
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AchieveGetReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Award)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Mid != 0 {
		n += 1 + sovApi(uint64(m.Mid))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AchieveGetReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AwardToken)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AchieveReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AwardToken)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AchieveReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Award)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Mid != 0 {
		n += 1 + sovApi(uint64(m.Mid))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *FollowerNotifySettingReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Mid != 0 {
		n += 1 + sovApi(uint64(m.Mid))
	}
	if m.Enabled {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SameFollowingReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Mid != 0 {
		n += 1 + sovApi(uint64(m.Mid))
	}
	if m.Mid2 != 0 {
		n += 1 + sovApi(uint64(m.Mid2))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovApi(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozApi(x uint64) (n int) {
	return sovApi(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *RelationReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RelationReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RelationReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fid", wireType)
			}
			m.Fid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Fid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RealIp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RealIp = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FollowingReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FollowingReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FollowingReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attribute", wireType)
			}
			m.Attribute = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Attribute |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Source", wireType)
			}
			m.Source = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Source |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CTime", wireType)
			}
			m.CTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CTime |= (go_common_library_time.Time(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MTime", wireType)
			}
			m.MTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MTime |= (go_common_library_time.Time(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Tag = append(m.Tag, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthApi
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Tag) == 0 {
					m.Tag = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Tag = append(m.Tag, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Tag", wireType)
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Special", wireType)
			}
			m.Special = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Special |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RelationsReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RelationsReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RelationsReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Fid = append(m.Fid, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthApi
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Fid) == 0 {
					m.Fid = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Fid = append(m.Fid, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Fid", wireType)
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RealIp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RealIp = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FollowingMapReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FollowingMapReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FollowingMapReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FollowingMap", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FollowingMap == nil {
				m.FollowingMap = make(map[int64]*FollowingReply)
			}
			var mapkey int64
			var mapvalue *FollowingReply
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= (int64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= (int(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthApi
					}
					postmsgIndex := iNdEx + mapmsglen
					if mapmsglen < 0 {
						return ErrInvalidLengthApi
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &FollowingReply{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipApi(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthApi
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.FollowingMap[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FollowingsReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FollowingsReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FollowingsReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FollowingList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FollowingList = append(m.FollowingList, &FollowingReply{})
			if err := m.FollowingList[len(m.FollowingList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MidReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MidReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MidReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RealIp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RealIp = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StatReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StatReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StatReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Following", wireType)
			}
			m.Following = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Following |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Whisper", wireType)
			}
			m.Whisper = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Whisper |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Black", wireType)
			}
			m.Black = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Black |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Follower", wireType)
			}
			m.Follower = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Follower |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CTime", wireType)
			}
			m.CTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CTime |= (go_common_library_time.Time(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MTime", wireType)
			}
			m.MTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MTime |= (go_common_library_time.Time(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MidsReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MidsReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MidsReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Mids = append(m.Mids, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthApi
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Mids) == 0 {
					m.Mids = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Mids = append(m.Mids, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Mids", wireType)
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RealIp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RealIp = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StatsReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StatsReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StatsReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StatReplyMap", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.StatReplyMap == nil {
				m.StatReplyMap = make(map[int64]*StatReply)
			}
			var mapkey int64
			var mapvalue *StatReply
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= (int64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= (int(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthApi
					}
					postmsgIndex := iNdEx + mapmsglen
					if mapmsglen < 0 {
						return ErrInvalidLengthApi
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &StatReply{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipApi(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthApi
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.StatReplyMap[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FollowingReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FollowingReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FollowingReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fid", wireType)
			}
			m.Fid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Fid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Source", wireType)
			}
			m.Source = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Source |= (uint8(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RealIp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RealIp = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Action", wireType)
			}
			m.Action = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Action |= (int8(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Infoc", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Infoc == nil {
				m.Infoc = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthApi
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthApi
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipApi(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthApi
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Infoc[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EmptyReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EmptyReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EmptyReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TagIdReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TagIdReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TagIdReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TagId", wireType)
			}
			m.TagId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TagId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RealIp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RealIp = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TagReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TagReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TagReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Mids = append(m.Mids, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthApi
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Mids) == 0 {
					m.Mids = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Mids = append(m.Mids, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Mids", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TagCountReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TagCountReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TagCountReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tagid", wireType)
			}
			m.Tagid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Tagid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TagsCountReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TagsCountReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TagsCountReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TagCountList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TagCountList = append(m.TagCountList, &TagCountReply{})
			if err := m.TagCountList[len(m.TagCountList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserTagReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserTagReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserTagReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tags", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Tags == nil {
				m.Tags = make(map[int64]string)
			}
			var mapkey int64
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= (int64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthApi
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipApi(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthApi
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Tags[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TagReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TagReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TagReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tag", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tag = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RealIp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RealIp = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TagUpdateReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TagUpdateReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TagUpdateReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TagId", wireType)
			}
			m.TagId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TagId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field New", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.New = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RealIp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RealIp = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TagDelReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TagDelReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TagDelReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TagId", wireType)
			}
			m.TagId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TagId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RealIp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RealIp = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TagsMoveUsersReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TagsMoveUsersReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TagsMoveUsersReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BeforeId", wireType)
			}
			m.BeforeId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BeforeId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AfterTagIds", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AfterTagIds = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fids", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Fids = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RealIp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RealIp = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PromptReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PromptReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PromptReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fid", wireType)
			}
			m.Fid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Fid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Btype", wireType)
			}
			m.Btype = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Btype |= (int8(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateTagReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateTagReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateTagReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TagId", wireType)
			}
			m.TagId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TagId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PromptReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PromptReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PromptReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Success", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Success = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FollowersUnreadReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FollowersUnreadReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FollowersUnreadReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HasUnread", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.HasUnread = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FollowersUnreadCountReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FollowersUnreadCountReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FollowersUnreadCountReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnreadCount", wireType)
			}
			m.UnreadCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UnreadCount |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SpecialReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SpecialReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SpecialReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Mids = append(m.Mids, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthApi
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Mids) == 0 {
					m.Mids = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Mids = append(m.Mids, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Mids", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AchieveGetReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AchieveGetReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AchieveGetReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Award", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Award = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AchieveGetReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AchieveGetReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AchieveGetReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AwardToken", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AwardToken = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AchieveReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AchieveReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AchieveReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AwardToken", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AwardToken = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AchieveReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AchieveReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AchieveReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Award", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Award = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FollowerNotifySettingReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FollowerNotifySettingReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FollowerNotifySettingReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Enabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Enabled = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SameFollowingReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SameFollowingReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SameFollowingReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid2", wireType)
			}
			m.Mid2 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid2 |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipApi(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowApi
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowApi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowApi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthApi
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowApi
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipApi(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthApi = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowApi   = fmt.Errorf("proto: integer overflow")
)
