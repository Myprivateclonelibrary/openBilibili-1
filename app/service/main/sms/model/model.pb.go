// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: app/service/main/sms/model/model.proto

/*
	Package model is a generated protocol buffer package.

	It is generated from these files:
		app/service/main/sms/model/model.proto

	It has these top-level messages:
		ModelTemplate
		ModelSend
		ModelUserActionLog
		ModelTask
*/
package model

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import go_common_library_time "go-common/library/time"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type ModelTemplate struct {
	ID        int64                       `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty" json:"id"`
	Code      string                      `protobuf:"bytes,2,opt,name=code,proto3" json:"code,omitempty" json:"code"`
	Template  string                      `protobuf:"bytes,3,opt,name=template,proto3" json:"template,omitempty" json:"template"`
	Stype     int32                       `protobuf:"varint,4,opt,name=stype,proto3" json:"stype,omitempty" json:"stype"`
	Status    int32                       `protobuf:"varint,5,opt,name=status,proto3" json:"status,omitempty" json:"status"`
	Approver  string                      `protobuf:"bytes,6,opt,name=approver,proto3" json:"approver,omitempty" json:"approver"`
	Submitter string                      `protobuf:"bytes,7,opt,name=submitter,proto3" json:"submitter,omitempty" json:"submitter"`
	Param     []string                    `protobuf:"bytes,8,rep,name=param" json:"param,omitempty" json:"param" gorm:"-"`
	Ctime     go_common_library_time.Time `protobuf:"varint,9,opt,name=ctime,proto3,casttype=go-common/library/time.Time" json:"ctime,omitempty" json:"ctime" gorm:"column:ctime"`
	Mtime     go_common_library_time.Time `protobuf:"varint,10,opt,name=mtime,proto3,casttype=go-common/library/time.Time" json:"mtime,omitempty" json:"mtime" gorm:"column:mtime"`
}

func (m *ModelTemplate) Reset()                    { *m = ModelTemplate{} }
func (m *ModelTemplate) String() string            { return proto.CompactTextString(m) }
func (*ModelTemplate) ProtoMessage()               {}
func (*ModelTemplate) Descriptor() ([]byte, []int) { return fileDescriptorModel, []int{0} }

func (m *ModelTemplate) GetID() int64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *ModelTemplate) GetCode() string {
	if m != nil {
		return m.Code
	}
	return ""
}

func (m *ModelTemplate) GetTemplate() string {
	if m != nil {
		return m.Template
	}
	return ""
}

func (m *ModelTemplate) GetStype() int32 {
	if m != nil {
		return m.Stype
	}
	return 0
}

func (m *ModelTemplate) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *ModelTemplate) GetApprover() string {
	if m != nil {
		return m.Approver
	}
	return ""
}

func (m *ModelTemplate) GetSubmitter() string {
	if m != nil {
		return m.Submitter
	}
	return ""
}

func (m *ModelTemplate) GetParam() []string {
	if m != nil {
		return m.Param
	}
	return nil
}

func (m *ModelTemplate) GetCtime() go_common_library_time.Time {
	if m != nil {
		return m.Ctime
	}
	return 0
}

func (m *ModelTemplate) GetMtime() go_common_library_time.Time {
	if m != nil {
		return m.Mtime
	}
	return 0
}

type ModelSend struct {
	ID      int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Mid     string `protobuf:"bytes,2,opt,name=mid,proto3" json:"mid,omitempty"`
	Mobile  string `protobuf:"bytes,3,opt,name=mobile,proto3" json:"mobile,omitempty"`
	Country string `protobuf:"bytes,4,opt,name=country,proto3" json:"country,omitempty"`
	Code    string `protobuf:"bytes,5,opt,name=code,proto3" json:"code,omitempty"`
	Content string `protobuf:"bytes,6,opt,name=content,proto3" json:"content,omitempty"`
	Status  int32  `protobuf:"varint,7,opt,name=status,proto3" json:"status,omitempty"`
	Type    int32  `protobuf:"varint,8,opt,name=type,proto3" json:"type,omitempty"`
	Pid     int32  `protobuf:"varint,9,opt,name=pid,proto3" json:"pid,omitempty"`
}

func (m *ModelSend) Reset()                    { *m = ModelSend{} }
func (m *ModelSend) String() string            { return proto.CompactTextString(m) }
func (*ModelSend) ProtoMessage()               {}
func (*ModelSend) Descriptor() ([]byte, []int) { return fileDescriptorModel, []int{1} }

func (m *ModelSend) GetID() int64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *ModelSend) GetMid() string {
	if m != nil {
		return m.Mid
	}
	return ""
}

func (m *ModelSend) GetMobile() string {
	if m != nil {
		return m.Mobile
	}
	return ""
}

func (m *ModelSend) GetCountry() string {
	if m != nil {
		return m.Country
	}
	return ""
}

func (m *ModelSend) GetCode() string {
	if m != nil {
		return m.Code
	}
	return ""
}

func (m *ModelSend) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

func (m *ModelSend) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *ModelSend) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *ModelSend) GetPid() int32 {
	if m != nil {
		return m.Pid
	}
	return 0
}

type ModelUserActionLog struct {
	MsgID    string `protobuf:"bytes,1,opt,name=msgid,proto3" json:"msgid,omitempty"`
	Mobile   string `protobuf:"bytes,2,opt,name=mobile,proto3" json:"mobile,omitempty"`
	Content  string `protobuf:"bytes,3,opt,name=content,proto3" json:"content,omitempty"`
	Status   string `protobuf:"bytes,4,opt,name=status,proto3" json:"status,omitempty"`
	Desc     string `protobuf:"bytes,5,opt,name=desc,proto3" json:"desc,omitempty"`
	Provider int32  `protobuf:"varint,6,opt,name=provider,proto3" json:"provider,omitempty"`
	Type     int32  `protobuf:"varint,7,opt,name=type,proto3" json:"type,omitempty"`
	Action   int32  `protobuf:"varint,8,opt,name=action,proto3" json:"action,omitempty"`
	Ts       int64  `protobuf:"varint,9,opt,name=ts,proto3" json:"ts,omitempty"`
}

func (m *ModelUserActionLog) Reset()                    { *m = ModelUserActionLog{} }
func (m *ModelUserActionLog) String() string            { return proto.CompactTextString(m) }
func (*ModelUserActionLog) ProtoMessage()               {}
func (*ModelUserActionLog) Descriptor() ([]byte, []int) { return fileDescriptorModel, []int{2} }

func (m *ModelUserActionLog) GetMsgID() string {
	if m != nil {
		return m.MsgID
	}
	return ""
}

func (m *ModelUserActionLog) GetMobile() string {
	if m != nil {
		return m.Mobile
	}
	return ""
}

func (m *ModelUserActionLog) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

func (m *ModelUserActionLog) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *ModelUserActionLog) GetDesc() string {
	if m != nil {
		return m.Desc
	}
	return ""
}

func (m *ModelUserActionLog) GetProvider() int32 {
	if m != nil {
		return m.Provider
	}
	return 0
}

func (m *ModelUserActionLog) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *ModelUserActionLog) GetAction() int32 {
	if m != nil {
		return m.Action
	}
	return 0
}

func (m *ModelUserActionLog) GetTs() int64 {
	if m != nil {
		return m.Ts
	}
	return 0
}

type ModelTask struct {
	ID              int64                       `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Type            int32                       `protobuf:"varint,2,opt,name=type,proto3" json:"type,omitempty"`
	BusinessID      int32                       `protobuf:"varint,3,opt,name=business_id,json=businessId,proto3" json:"business_id,omitempty"`
	TemplateCode    string                      `protobuf:"bytes,4,opt,name=template_code,json=templateCode,proto3" json:"template_code,omitempty"`
	TemplateContent string                      `protobuf:"bytes,5,opt,name=template_content,json=templateContent,proto3" json:"template_content,omitempty" gorm:"-"`
	Desc            string                      `protobuf:"bytes,6,opt,name=desc,proto3" json:"desc,omitempty"`
	FileName        string                      `protobuf:"bytes,7,opt,name=file_name,json=fileName,proto3" json:"file_name,omitempty"`
	FilePath        string                      `protobuf:"bytes,8,opt,name=file_path,json=filePath,proto3" json:"file_path,omitempty"`
	SendTime        go_common_library_time.Time `protobuf:"varint,9,opt,name=send_time,json=sendTime,proto3,casttype=go-common/library/time.Time" json:"send_time,omitempty"`
	Status          int32                       `protobuf:"varint,10,opt,name=status,proto3" json:"status,omitempty"`
	Ctime           go_common_library_time.Time `protobuf:"varint,11,opt,name=ctime,proto3,casttype=go-common/library/time.Time" json:"ctime,omitempty" gorm:"column:ctime"`
	Mtime           go_common_library_time.Time `protobuf:"varint,12,opt,name=mtime,proto3,casttype=go-common/library/time.Time" json:"mtime,omitempty" gorm:"column:mtime"`
}

func (m *ModelTask) Reset()                    { *m = ModelTask{} }
func (m *ModelTask) String() string            { return proto.CompactTextString(m) }
func (*ModelTask) ProtoMessage()               {}
func (*ModelTask) Descriptor() ([]byte, []int) { return fileDescriptorModel, []int{3} }

func (m *ModelTask) GetID() int64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *ModelTask) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *ModelTask) GetBusinessID() int32 {
	if m != nil {
		return m.BusinessID
	}
	return 0
}

func (m *ModelTask) GetTemplateCode() string {
	if m != nil {
		return m.TemplateCode
	}
	return ""
}

func (m *ModelTask) GetTemplateContent() string {
	if m != nil {
		return m.TemplateContent
	}
	return ""
}

func (m *ModelTask) GetDesc() string {
	if m != nil {
		return m.Desc
	}
	return ""
}

func (m *ModelTask) GetFileName() string {
	if m != nil {
		return m.FileName
	}
	return ""
}

func (m *ModelTask) GetFilePath() string {
	if m != nil {
		return m.FilePath
	}
	return ""
}

func (m *ModelTask) GetSendTime() go_common_library_time.Time {
	if m != nil {
		return m.SendTime
	}
	return 0
}

func (m *ModelTask) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *ModelTask) GetCtime() go_common_library_time.Time {
	if m != nil {
		return m.Ctime
	}
	return 0
}

func (m *ModelTask) GetMtime() go_common_library_time.Time {
	if m != nil {
		return m.Mtime
	}
	return 0
}

func init() {
	proto.RegisterType((*ModelTemplate)(nil), "sms.service.model.ModelTemplate")
	proto.RegisterType((*ModelSend)(nil), "sms.service.model.ModelSend")
	proto.RegisterType((*ModelUserActionLog)(nil), "sms.service.model.ModelUserActionLog")
	proto.RegisterType((*ModelTask)(nil), "sms.service.model.ModelTask")
}
func (m *ModelTemplate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ModelTemplate) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintModel(dAtA, i, uint64(m.ID))
	}
	if len(m.Code) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintModel(dAtA, i, uint64(len(m.Code)))
		i += copy(dAtA[i:], m.Code)
	}
	if len(m.Template) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintModel(dAtA, i, uint64(len(m.Template)))
		i += copy(dAtA[i:], m.Template)
	}
	if m.Stype != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintModel(dAtA, i, uint64(m.Stype))
	}
	if m.Status != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintModel(dAtA, i, uint64(m.Status))
	}
	if len(m.Approver) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintModel(dAtA, i, uint64(len(m.Approver)))
		i += copy(dAtA[i:], m.Approver)
	}
	if len(m.Submitter) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintModel(dAtA, i, uint64(len(m.Submitter)))
		i += copy(dAtA[i:], m.Submitter)
	}
	if len(m.Param) > 0 {
		for _, s := range m.Param {
			dAtA[i] = 0x42
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if m.Ctime != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintModel(dAtA, i, uint64(m.Ctime))
	}
	if m.Mtime != 0 {
		dAtA[i] = 0x50
		i++
		i = encodeVarintModel(dAtA, i, uint64(m.Mtime))
	}
	return i, nil
}

func (m *ModelSend) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ModelSend) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintModel(dAtA, i, uint64(m.ID))
	}
	if len(m.Mid) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintModel(dAtA, i, uint64(len(m.Mid)))
		i += copy(dAtA[i:], m.Mid)
	}
	if len(m.Mobile) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintModel(dAtA, i, uint64(len(m.Mobile)))
		i += copy(dAtA[i:], m.Mobile)
	}
	if len(m.Country) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintModel(dAtA, i, uint64(len(m.Country)))
		i += copy(dAtA[i:], m.Country)
	}
	if len(m.Code) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintModel(dAtA, i, uint64(len(m.Code)))
		i += copy(dAtA[i:], m.Code)
	}
	if len(m.Content) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintModel(dAtA, i, uint64(len(m.Content)))
		i += copy(dAtA[i:], m.Content)
	}
	if m.Status != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintModel(dAtA, i, uint64(m.Status))
	}
	if m.Type != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintModel(dAtA, i, uint64(m.Type))
	}
	if m.Pid != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintModel(dAtA, i, uint64(m.Pid))
	}
	return i, nil
}

func (m *ModelUserActionLog) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ModelUserActionLog) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.MsgID) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintModel(dAtA, i, uint64(len(m.MsgID)))
		i += copy(dAtA[i:], m.MsgID)
	}
	if len(m.Mobile) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintModel(dAtA, i, uint64(len(m.Mobile)))
		i += copy(dAtA[i:], m.Mobile)
	}
	if len(m.Content) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintModel(dAtA, i, uint64(len(m.Content)))
		i += copy(dAtA[i:], m.Content)
	}
	if len(m.Status) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintModel(dAtA, i, uint64(len(m.Status)))
		i += copy(dAtA[i:], m.Status)
	}
	if len(m.Desc) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintModel(dAtA, i, uint64(len(m.Desc)))
		i += copy(dAtA[i:], m.Desc)
	}
	if m.Provider != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintModel(dAtA, i, uint64(m.Provider))
	}
	if m.Type != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintModel(dAtA, i, uint64(m.Type))
	}
	if m.Action != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintModel(dAtA, i, uint64(m.Action))
	}
	if m.Ts != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintModel(dAtA, i, uint64(m.Ts))
	}
	return i, nil
}

func (m *ModelTask) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ModelTask) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintModel(dAtA, i, uint64(m.ID))
	}
	if m.Type != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintModel(dAtA, i, uint64(m.Type))
	}
	if m.BusinessID != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintModel(dAtA, i, uint64(m.BusinessID))
	}
	if len(m.TemplateCode) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintModel(dAtA, i, uint64(len(m.TemplateCode)))
		i += copy(dAtA[i:], m.TemplateCode)
	}
	if len(m.TemplateContent) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintModel(dAtA, i, uint64(len(m.TemplateContent)))
		i += copy(dAtA[i:], m.TemplateContent)
	}
	if len(m.Desc) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintModel(dAtA, i, uint64(len(m.Desc)))
		i += copy(dAtA[i:], m.Desc)
	}
	if len(m.FileName) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintModel(dAtA, i, uint64(len(m.FileName)))
		i += copy(dAtA[i:], m.FileName)
	}
	if len(m.FilePath) > 0 {
		dAtA[i] = 0x42
		i++
		i = encodeVarintModel(dAtA, i, uint64(len(m.FilePath)))
		i += copy(dAtA[i:], m.FilePath)
	}
	if m.SendTime != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintModel(dAtA, i, uint64(m.SendTime))
	}
	if m.Status != 0 {
		dAtA[i] = 0x50
		i++
		i = encodeVarintModel(dAtA, i, uint64(m.Status))
	}
	if m.Ctime != 0 {
		dAtA[i] = 0x58
		i++
		i = encodeVarintModel(dAtA, i, uint64(m.Ctime))
	}
	if m.Mtime != 0 {
		dAtA[i] = 0x60
		i++
		i = encodeVarintModel(dAtA, i, uint64(m.Mtime))
	}
	return i, nil
}

func encodeVarintModel(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *ModelTemplate) Size() (n int) {
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovModel(uint64(m.ID))
	}
	l = len(m.Code)
	if l > 0 {
		n += 1 + l + sovModel(uint64(l))
	}
	l = len(m.Template)
	if l > 0 {
		n += 1 + l + sovModel(uint64(l))
	}
	if m.Stype != 0 {
		n += 1 + sovModel(uint64(m.Stype))
	}
	if m.Status != 0 {
		n += 1 + sovModel(uint64(m.Status))
	}
	l = len(m.Approver)
	if l > 0 {
		n += 1 + l + sovModel(uint64(l))
	}
	l = len(m.Submitter)
	if l > 0 {
		n += 1 + l + sovModel(uint64(l))
	}
	if len(m.Param) > 0 {
		for _, s := range m.Param {
			l = len(s)
			n += 1 + l + sovModel(uint64(l))
		}
	}
	if m.Ctime != 0 {
		n += 1 + sovModel(uint64(m.Ctime))
	}
	if m.Mtime != 0 {
		n += 1 + sovModel(uint64(m.Mtime))
	}
	return n
}

func (m *ModelSend) Size() (n int) {
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovModel(uint64(m.ID))
	}
	l = len(m.Mid)
	if l > 0 {
		n += 1 + l + sovModel(uint64(l))
	}
	l = len(m.Mobile)
	if l > 0 {
		n += 1 + l + sovModel(uint64(l))
	}
	l = len(m.Country)
	if l > 0 {
		n += 1 + l + sovModel(uint64(l))
	}
	l = len(m.Code)
	if l > 0 {
		n += 1 + l + sovModel(uint64(l))
	}
	l = len(m.Content)
	if l > 0 {
		n += 1 + l + sovModel(uint64(l))
	}
	if m.Status != 0 {
		n += 1 + sovModel(uint64(m.Status))
	}
	if m.Type != 0 {
		n += 1 + sovModel(uint64(m.Type))
	}
	if m.Pid != 0 {
		n += 1 + sovModel(uint64(m.Pid))
	}
	return n
}

func (m *ModelUserActionLog) Size() (n int) {
	var l int
	_ = l
	l = len(m.MsgID)
	if l > 0 {
		n += 1 + l + sovModel(uint64(l))
	}
	l = len(m.Mobile)
	if l > 0 {
		n += 1 + l + sovModel(uint64(l))
	}
	l = len(m.Content)
	if l > 0 {
		n += 1 + l + sovModel(uint64(l))
	}
	l = len(m.Status)
	if l > 0 {
		n += 1 + l + sovModel(uint64(l))
	}
	l = len(m.Desc)
	if l > 0 {
		n += 1 + l + sovModel(uint64(l))
	}
	if m.Provider != 0 {
		n += 1 + sovModel(uint64(m.Provider))
	}
	if m.Type != 0 {
		n += 1 + sovModel(uint64(m.Type))
	}
	if m.Action != 0 {
		n += 1 + sovModel(uint64(m.Action))
	}
	if m.Ts != 0 {
		n += 1 + sovModel(uint64(m.Ts))
	}
	return n
}

func (m *ModelTask) Size() (n int) {
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovModel(uint64(m.ID))
	}
	if m.Type != 0 {
		n += 1 + sovModel(uint64(m.Type))
	}
	if m.BusinessID != 0 {
		n += 1 + sovModel(uint64(m.BusinessID))
	}
	l = len(m.TemplateCode)
	if l > 0 {
		n += 1 + l + sovModel(uint64(l))
	}
	l = len(m.TemplateContent)
	if l > 0 {
		n += 1 + l + sovModel(uint64(l))
	}
	l = len(m.Desc)
	if l > 0 {
		n += 1 + l + sovModel(uint64(l))
	}
	l = len(m.FileName)
	if l > 0 {
		n += 1 + l + sovModel(uint64(l))
	}
	l = len(m.FilePath)
	if l > 0 {
		n += 1 + l + sovModel(uint64(l))
	}
	if m.SendTime != 0 {
		n += 1 + sovModel(uint64(m.SendTime))
	}
	if m.Status != 0 {
		n += 1 + sovModel(uint64(m.Status))
	}
	if m.Ctime != 0 {
		n += 1 + sovModel(uint64(m.Ctime))
	}
	if m.Mtime != 0 {
		n += 1 + sovModel(uint64(m.Mtime))
	}
	return n
}

func sovModel(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozModel(x uint64) (n int) {
	return sovModel(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ModelTemplate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModel
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ModelTemplate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ModelTemplate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Code = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Template", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Template = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stype", wireType)
			}
			m.Stype = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Stype |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Approver", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Approver = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Submitter", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Submitter = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Param", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Param = append(m.Param, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ctime", wireType)
			}
			m.Ctime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ctime |= (go_common_library_time.Time(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mtime", wireType)
			}
			m.Mtime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mtime |= (go_common_library_time.Time(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipModel(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthModel
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ModelSend) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModel
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ModelSend: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ModelSend: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Mid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mobile", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Mobile = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Country", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Country = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Code = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Content = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pid", wireType)
			}
			m.Pid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Pid |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipModel(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthModel
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ModelUserActionLog) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModel
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ModelUserActionLog: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ModelUserActionLog: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MsgID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mobile", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Mobile = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Content = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Desc", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Desc = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Provider", wireType)
			}
			m.Provider = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Provider |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Action", wireType)
			}
			m.Action = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Action |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ts", wireType)
			}
			m.Ts = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ts |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipModel(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthModel
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ModelTask) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModel
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ModelTask: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ModelTask: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BusinessID", wireType)
			}
			m.BusinessID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BusinessID |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TemplateCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TemplateCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TemplateContent", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TemplateContent = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Desc", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Desc = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FileName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FileName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FilePath", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FilePath = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SendTime", wireType)
			}
			m.SendTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SendTime |= (go_common_library_time.Time(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ctime", wireType)
			}
			m.Ctime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ctime |= (go_common_library_time.Time(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mtime", wireType)
			}
			m.Mtime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mtime |= (go_common_library_time.Time(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipModel(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthModel
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipModel(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowModel
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowModel
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowModel
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthModel
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowModel
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipModel(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthModel = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowModel   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("app/service/main/sms/model/model.proto", fileDescriptorModel) }

var fileDescriptorModel = []byte{
	// 785 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x55, 0xcb, 0x6e, 0xf3, 0x44,
	0x14, 0x96, 0x9d, 0x38, 0x8d, 0xa7, 0xe9, 0xdf, 0x74, 0x02, 0x95, 0x69, 0xa5, 0x4e, 0xe4, 0x4a,
	0x55, 0x58, 0x34, 0x96, 0x40, 0x02, 0xa9, 0x62, 0x83, 0xdb, 0x4d, 0xa4, 0x16, 0xa1, 0xa1, 0x2c,
	0x60, 0x13, 0x39, 0xf6, 0xd4, 0x1d, 0xc8, 0x78, 0x2c, 0xcf, 0xa4, 0x52, 0x5f, 0x80, 0x77, 0xe1,
	0x4d, 0x58, 0x22, 0xb1, 0xb7, 0x50, 0xb6, 0xec, 0xbc, 0x64, 0x85, 0xe6, 0xe2, 0xd4, 0x14, 0x2a,
	0x2e, 0x9b, 0xea, 0x5c, 0xbe, 0xf9, 0x72, 0x2e, 0xdf, 0xa9, 0xc1, 0x45, 0x52, 0x96, 0x91, 0x20,
	0xd5, 0x13, 0x4d, 0x49, 0xc4, 0x12, 0x5a, 0x44, 0x82, 0x89, 0x88, 0xf1, 0x8c, 0xac, 0xcd, 0xdf,
	0x79, 0x59, 0x71, 0xc9, 0xe1, 0x91, 0x60, 0x62, 0x6e, 0x71, 0x73, 0x9d, 0x38, 0xb9, 0xcc, 0xa9,
	0x7c, 0xdc, 0xac, 0xe6, 0x29, 0x67, 0x51, 0xce, 0x73, 0x1e, 0x69, 0xe4, 0x6a, 0xf3, 0xa0, 0x3d,
	0xed, 0x68, 0xcb, 0x30, 0x84, 0x3f, 0xf6, 0xc1, 0xc1, 0x9d, 0x7a, 0x78, 0x4f, 0x58, 0xb9, 0x4e,
	0x24, 0x81, 0xe7, 0xc0, 0xa5, 0x59, 0xe0, 0x4c, 0x9d, 0x59, 0x2f, 0x9e, 0x6c, 0x6b, 0xe4, 0x2e,
	0x6e, 0x9a, 0x1a, 0xf9, 0xdf, 0x09, 0x5e, 0x5c, 0x85, 0x34, 0x0b, 0xb1, 0x4b, 0x33, 0x78, 0x0e,
	0xfa, 0x29, 0xcf, 0x48, 0xe0, 0x4e, 0x9d, 0x99, 0x1f, 0x1f, 0x36, 0x35, 0xda, 0x37, 0x00, 0x15,
	0x0d, 0xb1, 0x4e, 0xc2, 0x08, 0x0c, 0xa5, 0x65, 0x0d, 0x7a, 0x1a, 0x38, 0x69, 0x6a, 0x74, 0x68,
	0x80, 0x6d, 0x26, 0xc4, 0x3b, 0x10, 0xbc, 0x00, 0x9e, 0x90, 0xcf, 0x25, 0x09, 0xfa, 0x53, 0x67,
	0xe6, 0xc5, 0xe3, 0xa6, 0x46, 0x23, 0x83, 0xd6, 0xe1, 0x10, 0x9b, 0x34, 0xfc, 0x10, 0x0c, 0x84,
	0x4c, 0xe4, 0x46, 0x04, 0x9e, 0x06, 0x1e, 0x35, 0x35, 0x3a, 0x68, 0x81, 0x2a, 0x1e, 0x62, 0x0b,
	0x50, 0x35, 0x24, 0x65, 0x59, 0xf1, 0x27, 0x52, 0x05, 0x83, 0xd7, 0x35, 0xb4, 0x99, 0x10, 0xef,
	0x40, 0xf0, 0x23, 0xe0, 0x8b, 0xcd, 0x8a, 0x51, 0x29, 0x49, 0x15, 0xec, 0xe9, 0x17, 0xef, 0x35,
	0x35, 0x1a, 0x5b, 0xfa, 0x36, 0x15, 0xe2, 0x17, 0x18, 0x8c, 0x80, 0x57, 0x26, 0x55, 0xc2, 0x82,
	0xe1, 0xb4, 0x37, 0xf3, 0xe3, 0x0f, 0x9a, 0x1a, 0xbd, 0x6f, 0xf0, 0x3a, 0x1c, 0x4e, 0x73, 0x5e,
	0xb1, 0xab, 0xf0, 0x32, 0xc4, 0x06, 0x07, 0xbf, 0x01, 0x5e, 0x2a, 0x29, 0x23, 0x81, 0xaf, 0xc7,
	0x7c, 0xdd, 0xd4, 0x68, 0x6a, 0xe7, 0xa7, 0xc2, 0xed, 0x83, 0x94, 0xaf, 0x37, 0xac, 0xb8, 0x32,
	0xb1, 0xdf, 0x6b, 0x74, 0x9a, 0xf3, 0xcb, 0x94, 0x33, 0xc6, 0x8b, 0x68, 0x4d, 0x57, 0x55, 0x52,
	0x3d, 0x47, 0x2a, 0x35, 0xbf, 0xa7, 0x8c, 0x60, 0xc3, 0xa8, 0xa8, 0x99, 0xa6, 0x06, 0xaf, 0xa9,
	0xd9, 0xdf, 0x50, 0xb3, 0x7f, 0x47, 0x6d, 0x60, 0xbf, 0x38, 0xc0, 0xd7, 0x5a, 0xf9, 0x8a, 0x14,
	0x19, 0x3c, 0xee, 0xe8, 0x64, 0x60, 0x74, 0xa2, 0xa5, 0x31, 0x06, 0x3d, 0x46, 0x33, 0xa3, 0x0c,
	0xac, 0x4c, 0x78, 0x0c, 0x06, 0x8c, 0xaf, 0xe8, 0xda, 0xaa, 0x00, 0x5b, 0x0f, 0x06, 0x60, 0x2f,
	0xe5, 0x9b, 0x42, 0x56, 0xcf, 0x7a, 0xe1, 0x3e, 0x6e, 0x5d, 0x08, 0xad, 0xbc, 0x3c, 0x1d, 0x36,
	0x6a, 0xd2, 0xe8, 0x42, 0x92, 0x42, 0x9a, 0x45, 0xe2, 0xd6, 0x55, 0xfc, 0x56, 0x0e, 0x6a, 0x5f,
	0xde, 0x6e, 0xf7, 0x10, 0xf4, 0xb5, 0x9a, 0x86, 0x3a, 0xaa, 0x6d, 0x55, 0x5d, 0x49, 0x33, 0x3d,
	0x77, 0x0f, 0x2b, 0x33, 0xfc, 0xcd, 0x01, 0x50, 0x77, 0xf5, 0xb5, 0x20, 0xd5, 0xe7, 0xa9, 0xa4,
	0xbc, 0xb8, 0xe5, 0x39, 0x44, 0xc0, 0x63, 0x22, 0xb7, 0x1d, 0xfa, 0xb1, 0xbf, 0xad, 0x91, 0x77,
	0x27, 0xf2, 0xc5, 0x0d, 0x36, 0xf1, 0x4e, 0x57, 0xee, 0x5f, 0xbb, 0x32, 0x75, 0xf6, 0xde, 0xaa,
	0xd3, 0xb4, 0xdb, 0xa9, 0x33, 0x23, 0x22, 0x6d, 0xbb, 0x55, 0x36, 0x3c, 0x01, 0x43, 0x25, 0x48,
	0x9a, 0x59, 0xdd, 0x7a, 0x78, 0xe7, 0xef, 0xfa, 0xda, 0xeb, 0xf4, 0x75, 0x0c, 0x06, 0x89, 0xae,
	0xdd, 0x76, 0x6b, 0x3d, 0xf8, 0x0e, 0xb8, 0x52, 0x18, 0x99, 0x61, 0x57, 0x8a, 0xf0, 0x87, 0xbe,
	0xdd, 0xe1, 0x7d, 0x22, 0xbe, 0x7f, 0x73, 0x87, 0xed, 0x2f, 0xb8, 0x9d, 0x5f, 0x88, 0xc0, 0xfe,
	0x6a, 0x23, 0x68, 0x41, 0x84, 0x58, 0xd2, 0x4c, 0xf7, 0xe6, 0xc5, 0xef, 0xb6, 0x35, 0x02, 0xb1,
	0x0d, 0x2f, 0x6e, 0x30, 0x68, 0x21, 0x0b, 0xf5, 0x3f, 0xe2, 0xa0, 0xbd, 0xec, 0xa5, 0xde, 0xa6,
	0xe9, 0x7a, 0xd4, 0x06, 0xaf, 0xd5, 0x56, 0x3f, 0x05, 0xe3, 0x0e, 0xc8, 0x8c, 0x4d, 0xcf, 0x21,
	0x1e, 0x35, 0x35, 0x1a, 0xee, 0x0e, 0xe7, 0xf0, 0xe5, 0x95, 0x19, 0x66, 0x3b, 0xb4, 0x41, 0x67,
	0x68, 0xa7, 0xc0, 0x7f, 0xa0, 0x6b, 0xb2, 0x2c, 0x12, 0x66, 0xa6, 0xe3, 0xe3, 0xa1, 0x0a, 0x7c,
	0x91, 0x30, 0xb2, 0x4b, 0x96, 0x89, 0x7c, 0xd4, 0x43, 0xb2, 0xc9, 0x2f, 0x13, 0xf9, 0x08, 0x3f,
	0x03, 0xbe, 0x20, 0x45, 0xb6, 0xec, 0x1c, 0x25, 0xfa, 0xa7, 0xab, 0x18, 0xaa, 0x17, 0xca, 0xea,
	0x2c, 0x16, 0xfc, 0x49, 0x80, 0xb7, 0xed, 0x99, 0xef, 0x6b, 0xc6, 0x4f, 0x9a, 0x1a, 0x4d, 0xfe,
	0xff, 0x65, 0xdf, 0xb6, 0x97, 0x3d, 0x7a, 0x83, 0xed, 0xbf, 0x1c, 0x73, 0x3c, 0xf9, 0x69, 0x7b,
	0xe6, 0xfc, 0xbc, 0x3d, 0x73, 0x7e, 0xdd, 0x9e, 0x39, 0xdf, 0x7a, 0xfa, 0xe3, 0xb1, 0x1a, 0xe8,
	0x8f, 0xc2, 0xc7, 0x7f, 0x04, 0x00, 0x00, 0xff, 0xff, 0xde, 0x73, 0xee, 0xc3, 0x80, 0x06, 0x00,
	0x00,
}
