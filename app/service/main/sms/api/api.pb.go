// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: app/service/main/sms/api/api.proto

/*
	Package v1 is a generated protocol buffer package.

	It is generated from these files:
		app/service/main/sms/api/api.proto

	It has these top-level messages:
		AddTemplateReply
		AddTemplateReq
		TemplateListReply
		TemplateListReq
		UpdateTemplateReply
		UpdateTemplateReq
		SendReply
		SendReq
		SendBatchReply
		SendBatchReq
		AddTaskReq
		AddTaskReply
		UpdateTaskReq
		UpdateTaskReply
		DeleteTaskReq
		DeleteTaskReply
		TaskInfoReq
		TaskInfoReply
		TaskListReq
		TaskListReply
*/
package v1

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import sms_service_model "go-common/app/service/main/sms/model"
import _ "github.com/gogo/protobuf/gogoproto"

import context "golang.org/x/net/context"
import grpc "google.golang.org/grpc"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type AddTemplateReply struct {
}

func (m *AddTemplateReply) Reset()                    { *m = AddTemplateReply{} }
func (m *AddTemplateReply) String() string            { return proto.CompactTextString(m) }
func (*AddTemplateReply) ProtoMessage()               {}
func (*AddTemplateReply) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{0} }

type AddTemplateReq struct {
	Stype     int32  `protobuf:"varint,1,opt,name=stype,proto3" json:"stype,omitempty" form:"type" validate:"required,min=1"`
	Tcode     string `protobuf:"bytes,2,opt,name=tcode,proto3" json:"tcode,omitempty" form:"code" validate:"required"`
	Template  string `protobuf:"bytes,3,opt,name=template,proto3" json:"template,omitempty" form:"content" validate:"required"`
	Submitter string `protobuf:"bytes,5,opt,name=submitter,proto3" json:"submitter,omitempty" form:"submitter"`
}

func (m *AddTemplateReq) Reset()                    { *m = AddTemplateReq{} }
func (m *AddTemplateReq) String() string            { return proto.CompactTextString(m) }
func (*AddTemplateReq) ProtoMessage()               {}
func (*AddTemplateReq) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{1} }

func (m *AddTemplateReq) GetStype() int32 {
	if m != nil {
		return m.Stype
	}
	return 0
}

func (m *AddTemplateReq) GetTcode() string {
	if m != nil {
		return m.Tcode
	}
	return ""
}

func (m *AddTemplateReq) GetTemplate() string {
	if m != nil {
		return m.Template
	}
	return ""
}

func (m *AddTemplateReq) GetSubmitter() string {
	if m != nil {
		return m.Submitter
	}
	return ""
}

type TemplateListReply struct {
	List  []*sms_service_model.ModelTemplate `protobuf:"bytes,1,rep,name=list" json:"list,omitempty"`
	Total int32                              `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
}

func (m *TemplateListReply) Reset()                    { *m = TemplateListReply{} }
func (m *TemplateListReply) String() string            { return proto.CompactTextString(m) }
func (*TemplateListReply) ProtoMessage()               {}
func (*TemplateListReply) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{2} }

func (m *TemplateListReply) GetList() []*sms_service_model.ModelTemplate {
	if m != nil {
		return m.List
	}
	return nil
}

func (m *TemplateListReply) GetTotal() int32 {
	if m != nil {
		return m.Total
	}
	return 0
}

type TemplateListReq struct {
	Pn int32  `protobuf:"varint,1,opt,name=pn,proto3" json:"pn,omitempty" form:"pn" default:"1"`
	Ps int32  `protobuf:"varint,2,opt,name=ps,proto3" json:"ps,omitempty" form:"ps" default:"10"`
	St string `protobuf:"bytes,3,opt,name=st,proto3" json:"st,omitempty" form:"st"`
	Sw string `protobuf:"bytes,4,opt,name=sw,proto3" json:"sw,omitempty" form:"sw"`
}

func (m *TemplateListReq) Reset()                    { *m = TemplateListReq{} }
func (m *TemplateListReq) String() string            { return proto.CompactTextString(m) }
func (*TemplateListReq) ProtoMessage()               {}
func (*TemplateListReq) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{3} }

func (m *TemplateListReq) GetPn() int32 {
	if m != nil {
		return m.Pn
	}
	return 0
}

func (m *TemplateListReq) GetPs() int32 {
	if m != nil {
		return m.Ps
	}
	return 0
}

func (m *TemplateListReq) GetSt() string {
	if m != nil {
		return m.St
	}
	return ""
}

func (m *TemplateListReq) GetSw() string {
	if m != nil {
		return m.Sw
	}
	return ""
}

type UpdateTemplateReply struct {
}

func (m *UpdateTemplateReply) Reset()                    { *m = UpdateTemplateReply{} }
func (m *UpdateTemplateReply) String() string            { return proto.CompactTextString(m) }
func (*UpdateTemplateReply) ProtoMessage()               {}
func (*UpdateTemplateReply) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{4} }

type UpdateTemplateReq struct {
	ID        int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty" form:"id" validate:"required,min=1"`
	Stype     int32  `protobuf:"varint,2,opt,name=stype,proto3" json:"stype,omitempty" form:"type" validate:"required,min=1"`
	Status    int32  `protobuf:"varint,3,opt,name=status,proto3" json:"status,omitempty" form:"status"`
	Tcode     string `protobuf:"bytes,4,opt,name=tcode,proto3" json:"tcode,omitempty" form:"code" validate:"required"`
	Template  string `protobuf:"bytes,5,opt,name=template,proto3" json:"template,omitempty" form:"content" validate:"required"`
	Submitter string `protobuf:"bytes,6,opt,name=submitter,proto3" json:"submitter,omitempty" form:"submitter"`
}

func (m *UpdateTemplateReq) Reset()                    { *m = UpdateTemplateReq{} }
func (m *UpdateTemplateReq) String() string            { return proto.CompactTextString(m) }
func (*UpdateTemplateReq) ProtoMessage()               {}
func (*UpdateTemplateReq) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{5} }

func (m *UpdateTemplateReq) GetID() int64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *UpdateTemplateReq) GetStype() int32 {
	if m != nil {
		return m.Stype
	}
	return 0
}

func (m *UpdateTemplateReq) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *UpdateTemplateReq) GetTcode() string {
	if m != nil {
		return m.Tcode
	}
	return ""
}

func (m *UpdateTemplateReq) GetTemplate() string {
	if m != nil {
		return m.Template
	}
	return ""
}

func (m *UpdateTemplateReq) GetSubmitter() string {
	if m != nil {
		return m.Submitter
	}
	return ""
}

type SendReply struct {
}

func (m *SendReply) Reset()                    { *m = SendReply{} }
func (m *SendReply) String() string            { return proto.CompactTextString(m) }
func (*SendReply) ProtoMessage()               {}
func (*SendReply) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{6} }

type SendReq struct {
	Mid     int64  `protobuf:"varint,1,opt,name=mid,proto3" json:"mid,omitempty" form:"mid"`
	Mobile  string `protobuf:"bytes,2,opt,name=mobile,proto3" json:"mobile,omitempty" form:"mobile"`
	Country string `protobuf:"bytes,3,opt,name=country,proto3" json:"country,omitempty" form:"country"`
	Tcode   string `protobuf:"bytes,4,opt,name=tcode,proto3" json:"tcode,omitempty" form:"tcode"`
	Tparam  string `protobuf:"bytes,5,opt,name=tparam,proto3" json:"tparam,omitempty" form:"tparam"`
}

func (m *SendReq) Reset()                    { *m = SendReq{} }
func (m *SendReq) String() string            { return proto.CompactTextString(m) }
func (*SendReq) ProtoMessage()               {}
func (*SendReq) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{7} }

func (m *SendReq) GetMid() int64 {
	if m != nil {
		return m.Mid
	}
	return 0
}

func (m *SendReq) GetMobile() string {
	if m != nil {
		return m.Mobile
	}
	return ""
}

func (m *SendReq) GetCountry() string {
	if m != nil {
		return m.Country
	}
	return ""
}

func (m *SendReq) GetTcode() string {
	if m != nil {
		return m.Tcode
	}
	return ""
}

func (m *SendReq) GetTparam() string {
	if m != nil {
		return m.Tparam
	}
	return ""
}

type SendBatchReply struct {
}

func (m *SendBatchReply) Reset()                    { *m = SendBatchReply{} }
func (m *SendBatchReply) String() string            { return proto.CompactTextString(m) }
func (*SendBatchReply) ProtoMessage()               {}
func (*SendBatchReply) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{8} }

type SendBatchReq struct {
	Mids    []int64  `protobuf:"varint,1,rep,packed,name=mids" json:"mids,omitempty" form:"mids,split"`
	Mobiles []string `protobuf:"bytes,2,rep,name=mobiles" json:"mobiles,omitempty" form:"mobiles,split"`
	Tcode   string   `protobuf:"bytes,3,opt,name=tcode,proto3" json:"tcode,omitempty" form:"tcode"`
	Tparam  string   `protobuf:"bytes,4,opt,name=tparam,proto3" json:"tparam,omitempty" form:"tparam"`
}

func (m *SendBatchReq) Reset()                    { *m = SendBatchReq{} }
func (m *SendBatchReq) String() string            { return proto.CompactTextString(m) }
func (*SendBatchReq) ProtoMessage()               {}
func (*SendBatchReq) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{9} }

func (m *SendBatchReq) GetMids() []int64 {
	if m != nil {
		return m.Mids
	}
	return nil
}

func (m *SendBatchReq) GetMobiles() []string {
	if m != nil {
		return m.Mobiles
	}
	return nil
}

func (m *SendBatchReq) GetTcode() string {
	if m != nil {
		return m.Tcode
	}
	return ""
}

func (m *SendBatchReq) GetTparam() string {
	if m != nil {
		return m.Tparam
	}
	return ""
}

type AddTaskReq struct {
	Type         int32  `protobuf:"varint,1,opt,name=type,proto3" json:"type,omitempty" form:"type" validate:"required,min=1"`
	BusinessID   int32  `protobuf:"varint,2,opt,name=business_id,json=businessId,proto3" json:"business_id,omitempty" form:"business_id"`
	TemplateCode string `protobuf:"bytes,3,opt,name=template_code,json=templateCode,proto3" json:"template_code,omitempty" form:"template_code" validate:"required"`
	Desc         string `protobuf:"bytes,4,opt,name=desc,proto3" json:"desc,omitempty" form:"desc"`
	FileName     string `protobuf:"bytes,5,opt,name=file_name,json=fileName,proto3" json:"file_name,omitempty" form:"file_name" validate:"required"`
	FilePath     string `protobuf:"bytes,6,opt,name=file_path,json=filePath,proto3" json:"file_path,omitempty" form:"file_path" validate:"required"`
	SendTime     int64  `protobuf:"varint,7,opt,name=send_time,json=sendTime,proto3" json:"send_time,omitempty" form:"send_time" validate:"required,min=1"`
}

func (m *AddTaskReq) Reset()                    { *m = AddTaskReq{} }
func (m *AddTaskReq) String() string            { return proto.CompactTextString(m) }
func (*AddTaskReq) ProtoMessage()               {}
func (*AddTaskReq) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{10} }

func (m *AddTaskReq) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *AddTaskReq) GetBusinessID() int32 {
	if m != nil {
		return m.BusinessID
	}
	return 0
}

func (m *AddTaskReq) GetTemplateCode() string {
	if m != nil {
		return m.TemplateCode
	}
	return ""
}

func (m *AddTaskReq) GetDesc() string {
	if m != nil {
		return m.Desc
	}
	return ""
}

func (m *AddTaskReq) GetFileName() string {
	if m != nil {
		return m.FileName
	}
	return ""
}

func (m *AddTaskReq) GetFilePath() string {
	if m != nil {
		return m.FilePath
	}
	return ""
}

func (m *AddTaskReq) GetSendTime() int64 {
	if m != nil {
		return m.SendTime
	}
	return 0
}

type AddTaskReply struct {
}

func (m *AddTaskReply) Reset()                    { *m = AddTaskReply{} }
func (m *AddTaskReply) String() string            { return proto.CompactTextString(m) }
func (*AddTaskReply) ProtoMessage()               {}
func (*AddTaskReply) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{11} }

type UpdateTaskReq struct {
	ID           int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty" form:"id"`
	Type         int32  `protobuf:"varint,2,opt,name=type,proto3" json:"type,omitempty" form:"type" validate:"required,min=1"`
	BusinessID   int32  `protobuf:"varint,3,opt,name=business_id,json=businessId,proto3" json:"business_id,omitempty" form:"business_id"`
	TemplateCode string `protobuf:"bytes,4,opt,name=template_code,json=templateCode,proto3" json:"template_code,omitempty" form:"template_code" validate:"required"`
	Desc         string `protobuf:"bytes,5,opt,name=desc,proto3" json:"desc,omitempty" form:"desc"`
	FileName     string `protobuf:"bytes,6,opt,name=file_name,json=fileName,proto3" json:"file_name,omitempty" form:"file_name" validate:"required"`
	FilePath     string `protobuf:"bytes,7,opt,name=file_path,json=filePath,proto3" json:"file_path,omitempty" form:"file_path" validate:"required"`
	SendTime     int64  `protobuf:"varint,8,opt,name=send_time,json=sendTime,proto3" json:"send_time,omitempty" form:"send_time" validate:"required,min=1"`
}

func (m *UpdateTaskReq) Reset()                    { *m = UpdateTaskReq{} }
func (m *UpdateTaskReq) String() string            { return proto.CompactTextString(m) }
func (*UpdateTaskReq) ProtoMessage()               {}
func (*UpdateTaskReq) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{12} }

func (m *UpdateTaskReq) GetID() int64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *UpdateTaskReq) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *UpdateTaskReq) GetBusinessID() int32 {
	if m != nil {
		return m.BusinessID
	}
	return 0
}

func (m *UpdateTaskReq) GetTemplateCode() string {
	if m != nil {
		return m.TemplateCode
	}
	return ""
}

func (m *UpdateTaskReq) GetDesc() string {
	if m != nil {
		return m.Desc
	}
	return ""
}

func (m *UpdateTaskReq) GetFileName() string {
	if m != nil {
		return m.FileName
	}
	return ""
}

func (m *UpdateTaskReq) GetFilePath() string {
	if m != nil {
		return m.FilePath
	}
	return ""
}

func (m *UpdateTaskReq) GetSendTime() int64 {
	if m != nil {
		return m.SendTime
	}
	return 0
}

type UpdateTaskReply struct {
}

func (m *UpdateTaskReply) Reset()                    { *m = UpdateTaskReply{} }
func (m *UpdateTaskReply) String() string            { return proto.CompactTextString(m) }
func (*UpdateTaskReply) ProtoMessage()               {}
func (*UpdateTaskReply) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{13} }

type DeleteTaskReq struct {
	ID int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty" form:"id"`
}

func (m *DeleteTaskReq) Reset()                    { *m = DeleteTaskReq{} }
func (m *DeleteTaskReq) String() string            { return proto.CompactTextString(m) }
func (*DeleteTaskReq) ProtoMessage()               {}
func (*DeleteTaskReq) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{14} }

func (m *DeleteTaskReq) GetID() int64 {
	if m != nil {
		return m.ID
	}
	return 0
}

type DeleteTaskReply struct {
}

func (m *DeleteTaskReply) Reset()                    { *m = DeleteTaskReply{} }
func (m *DeleteTaskReply) String() string            { return proto.CompactTextString(m) }
func (*DeleteTaskReply) ProtoMessage()               {}
func (*DeleteTaskReply) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{15} }

type TaskInfoReq struct {
	ID int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty" form:"id"`
}

func (m *TaskInfoReq) Reset()                    { *m = TaskInfoReq{} }
func (m *TaskInfoReq) String() string            { return proto.CompactTextString(m) }
func (*TaskInfoReq) ProtoMessage()               {}
func (*TaskInfoReq) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{16} }

func (m *TaskInfoReq) GetID() int64 {
	if m != nil {
		return m.ID
	}
	return 0
}

type TaskInfoReply struct {
	Info *sms_service_model.ModelTask `protobuf:"bytes,1,opt,name=info" json:"info,omitempty"`
}

func (m *TaskInfoReply) Reset()                    { *m = TaskInfoReply{} }
func (m *TaskInfoReply) String() string            { return proto.CompactTextString(m) }
func (*TaskInfoReply) ProtoMessage()               {}
func (*TaskInfoReply) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{17} }

func (m *TaskInfoReply) GetInfo() *sms_service_model.ModelTask {
	if m != nil {
		return m.Info
	}
	return nil
}

type TaskListReq struct {
	Pn int32 `protobuf:"varint,1,opt,name=pn,proto3" json:"pn,omitempty" form:"pn" default:"1"`
	Ps int32 `protobuf:"varint,2,opt,name=ps,proto3" json:"ps,omitempty" form:"ps" default:"20"`
}

func (m *TaskListReq) Reset()                    { *m = TaskListReq{} }
func (m *TaskListReq) String() string            { return proto.CompactTextString(m) }
func (*TaskListReq) ProtoMessage()               {}
func (*TaskListReq) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{18} }

func (m *TaskListReq) GetPn() int32 {
	if m != nil {
		return m.Pn
	}
	return 0
}

func (m *TaskListReq) GetPs() int32 {
	if m != nil {
		return m.Ps
	}
	return 0
}

type TaskListReply struct {
	List  []*sms_service_model.ModelTask `protobuf:"bytes,1,rep,name=list" json:"list,omitempty"`
	Total int32                          `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
}

func (m *TaskListReply) Reset()                    { *m = TaskListReply{} }
func (m *TaskListReply) String() string            { return proto.CompactTextString(m) }
func (*TaskListReply) ProtoMessage()               {}
func (*TaskListReply) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{19} }

func (m *TaskListReply) GetList() []*sms_service_model.ModelTask {
	if m != nil {
		return m.List
	}
	return nil
}

func (m *TaskListReply) GetTotal() int32 {
	if m != nil {
		return m.Total
	}
	return 0
}

func init() {
	proto.RegisterType((*AddTemplateReply)(nil), "sms.service.v1.AddTemplateReply")
	proto.RegisterType((*AddTemplateReq)(nil), "sms.service.v1.AddTemplateReq")
	proto.RegisterType((*TemplateListReply)(nil), "sms.service.v1.TemplateListReply")
	proto.RegisterType((*TemplateListReq)(nil), "sms.service.v1.TemplateListReq")
	proto.RegisterType((*UpdateTemplateReply)(nil), "sms.service.v1.UpdateTemplateReply")
	proto.RegisterType((*UpdateTemplateReq)(nil), "sms.service.v1.UpdateTemplateReq")
	proto.RegisterType((*SendReply)(nil), "sms.service.v1.SendReply")
	proto.RegisterType((*SendReq)(nil), "sms.service.v1.SendReq")
	proto.RegisterType((*SendBatchReply)(nil), "sms.service.v1.SendBatchReply")
	proto.RegisterType((*SendBatchReq)(nil), "sms.service.v1.SendBatchReq")
	proto.RegisterType((*AddTaskReq)(nil), "sms.service.v1.AddTaskReq")
	proto.RegisterType((*AddTaskReply)(nil), "sms.service.v1.AddTaskReply")
	proto.RegisterType((*UpdateTaskReq)(nil), "sms.service.v1.UpdateTaskReq")
	proto.RegisterType((*UpdateTaskReply)(nil), "sms.service.v1.UpdateTaskReply")
	proto.RegisterType((*DeleteTaskReq)(nil), "sms.service.v1.DeleteTaskReq")
	proto.RegisterType((*DeleteTaskReply)(nil), "sms.service.v1.DeleteTaskReply")
	proto.RegisterType((*TaskInfoReq)(nil), "sms.service.v1.TaskInfoReq")
	proto.RegisterType((*TaskInfoReply)(nil), "sms.service.v1.TaskInfoReply")
	proto.RegisterType((*TaskListReq)(nil), "sms.service.v1.TaskListReq")
	proto.RegisterType((*TaskListReply)(nil), "sms.service.v1.TaskListReply")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Sms service

type SmsClient interface {
	// Send send sms
	Send(ctx context.Context, in *SendReq, opts ...grpc.CallOption) (*SendReply, error)
	// SendBatch send sms batch
	SendBatch(ctx context.Context, in *SendBatchReq, opts ...grpc.CallOption) (*SendBatchReply, error)
}

type smsClient struct {
	cc *grpc.ClientConn
}

func NewSmsClient(cc *grpc.ClientConn) SmsClient {
	return &smsClient{cc}
}

func (c *smsClient) Send(ctx context.Context, in *SendReq, opts ...grpc.CallOption) (*SendReply, error) {
	out := new(SendReply)
	err := grpc.Invoke(ctx, "/sms.service.v1.Sms/Send", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *smsClient) SendBatch(ctx context.Context, in *SendBatchReq, opts ...grpc.CallOption) (*SendBatchReply, error) {
	out := new(SendBatchReply)
	err := grpc.Invoke(ctx, "/sms.service.v1.Sms/SendBatch", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Sms service

type SmsServer interface {
	// Send send sms
	Send(context.Context, *SendReq) (*SendReply, error)
	// SendBatch send sms batch
	SendBatch(context.Context, *SendBatchReq) (*SendBatchReply, error)
}

func RegisterSmsServer(s *grpc.Server, srv SmsServer) {
	s.RegisterService(&_Sms_serviceDesc, srv)
}

func _Sms_Send_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SmsServer).Send(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sms.service.v1.Sms/Send",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SmsServer).Send(ctx, req.(*SendReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sms_SendBatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendBatchReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SmsServer).SendBatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sms.service.v1.Sms/SendBatch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SmsServer).SendBatch(ctx, req.(*SendBatchReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _Sms_serviceDesc = grpc.ServiceDesc{
	ServiceName: "sms.service.v1.Sms",
	HandlerType: (*SmsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Send",
			Handler:    _Sms_Send_Handler,
		},
		{
			MethodName: "SendBatch",
			Handler:    _Sms_SendBatch_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "app/service/main/sms/api/api.proto",
}

func (m *AddTemplateReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddTemplateReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *AddTemplateReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddTemplateReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Stype != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Stype))
	}
	if len(m.Tcode) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Tcode)))
		i += copy(dAtA[i:], m.Tcode)
	}
	if len(m.Template) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Template)))
		i += copy(dAtA[i:], m.Template)
	}
	if len(m.Submitter) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Submitter)))
		i += copy(dAtA[i:], m.Submitter)
	}
	return i, nil
}

func (m *TemplateListReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TemplateListReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, msg := range m.List {
			dAtA[i] = 0xa
			i++
			i = encodeVarintApi(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Total != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Total))
	}
	return i, nil
}

func (m *TemplateListReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TemplateListReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Pn != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Pn))
	}
	if m.Ps != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Ps))
	}
	if len(m.St) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.St)))
		i += copy(dAtA[i:], m.St)
	}
	if len(m.Sw) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Sw)))
		i += copy(dAtA[i:], m.Sw)
	}
	return i, nil
}

func (m *UpdateTemplateReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateTemplateReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *UpdateTemplateReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateTemplateReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.ID))
	}
	if m.Stype != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Stype))
	}
	if m.Status != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Status))
	}
	if len(m.Tcode) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Tcode)))
		i += copy(dAtA[i:], m.Tcode)
	}
	if len(m.Template) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Template)))
		i += copy(dAtA[i:], m.Template)
	}
	if len(m.Submitter) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Submitter)))
		i += copy(dAtA[i:], m.Submitter)
	}
	return i, nil
}

func (m *SendReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SendReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *SendReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SendReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Mid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Mid))
	}
	if len(m.Mobile) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Mobile)))
		i += copy(dAtA[i:], m.Mobile)
	}
	if len(m.Country) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Country)))
		i += copy(dAtA[i:], m.Country)
	}
	if len(m.Tcode) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Tcode)))
		i += copy(dAtA[i:], m.Tcode)
	}
	if len(m.Tparam) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Tparam)))
		i += copy(dAtA[i:], m.Tparam)
	}
	return i, nil
}

func (m *SendBatchReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SendBatchReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *SendBatchReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SendBatchReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Mids) > 0 {
		dAtA2 := make([]byte, len(m.Mids)*10)
		var j1 int
		for _, num1 := range m.Mids {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		dAtA[i] = 0xa
		i++
		i = encodeVarintApi(dAtA, i, uint64(j1))
		i += copy(dAtA[i:], dAtA2[:j1])
	}
	if len(m.Mobiles) > 0 {
		for _, s := range m.Mobiles {
			dAtA[i] = 0x12
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.Tcode) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Tcode)))
		i += copy(dAtA[i:], m.Tcode)
	}
	if len(m.Tparam) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Tparam)))
		i += copy(dAtA[i:], m.Tparam)
	}
	return i, nil
}

func (m *AddTaskReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddTaskReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Type != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Type))
	}
	if m.BusinessID != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.BusinessID))
	}
	if len(m.TemplateCode) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.TemplateCode)))
		i += copy(dAtA[i:], m.TemplateCode)
	}
	if len(m.Desc) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Desc)))
		i += copy(dAtA[i:], m.Desc)
	}
	if len(m.FileName) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.FileName)))
		i += copy(dAtA[i:], m.FileName)
	}
	if len(m.FilePath) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.FilePath)))
		i += copy(dAtA[i:], m.FilePath)
	}
	if m.SendTime != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.SendTime))
	}
	return i, nil
}

func (m *AddTaskReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddTaskReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *UpdateTaskReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateTaskReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.ID))
	}
	if m.Type != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Type))
	}
	if m.BusinessID != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.BusinessID))
	}
	if len(m.TemplateCode) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.TemplateCode)))
		i += copy(dAtA[i:], m.TemplateCode)
	}
	if len(m.Desc) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Desc)))
		i += copy(dAtA[i:], m.Desc)
	}
	if len(m.FileName) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.FileName)))
		i += copy(dAtA[i:], m.FileName)
	}
	if len(m.FilePath) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.FilePath)))
		i += copy(dAtA[i:], m.FilePath)
	}
	if m.SendTime != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.SendTime))
	}
	return i, nil
}

func (m *UpdateTaskReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateTaskReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *DeleteTaskReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteTaskReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.ID))
	}
	return i, nil
}

func (m *DeleteTaskReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteTaskReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *TaskInfoReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TaskInfoReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.ID))
	}
	return i, nil
}

func (m *TaskInfoReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TaskInfoReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Info != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Info.Size()))
		n3, err := m.Info.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	return i, nil
}

func (m *TaskListReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TaskListReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Pn != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Pn))
	}
	if m.Ps != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Ps))
	}
	return i, nil
}

func (m *TaskListReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TaskListReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, msg := range m.List {
			dAtA[i] = 0xa
			i++
			i = encodeVarintApi(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Total != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Total))
	}
	return i, nil
}

func encodeVarintApi(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *AddTemplateReply) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *AddTemplateReq) Size() (n int) {
	var l int
	_ = l
	if m.Stype != 0 {
		n += 1 + sovApi(uint64(m.Stype))
	}
	l = len(m.Tcode)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Template)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Submitter)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}

func (m *TemplateListReply) Size() (n int) {
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.Total != 0 {
		n += 1 + sovApi(uint64(m.Total))
	}
	return n
}

func (m *TemplateListReq) Size() (n int) {
	var l int
	_ = l
	if m.Pn != 0 {
		n += 1 + sovApi(uint64(m.Pn))
	}
	if m.Ps != 0 {
		n += 1 + sovApi(uint64(m.Ps))
	}
	l = len(m.St)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Sw)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}

func (m *UpdateTemplateReply) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *UpdateTemplateReq) Size() (n int) {
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovApi(uint64(m.ID))
	}
	if m.Stype != 0 {
		n += 1 + sovApi(uint64(m.Stype))
	}
	if m.Status != 0 {
		n += 1 + sovApi(uint64(m.Status))
	}
	l = len(m.Tcode)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Template)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Submitter)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}

func (m *SendReply) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *SendReq) Size() (n int) {
	var l int
	_ = l
	if m.Mid != 0 {
		n += 1 + sovApi(uint64(m.Mid))
	}
	l = len(m.Mobile)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Country)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Tcode)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Tparam)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}

func (m *SendBatchReply) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *SendBatchReq) Size() (n int) {
	var l int
	_ = l
	if len(m.Mids) > 0 {
		l = 0
		for _, e := range m.Mids {
			l += sovApi(uint64(e))
		}
		n += 1 + sovApi(uint64(l)) + l
	}
	if len(m.Mobiles) > 0 {
		for _, s := range m.Mobiles {
			l = len(s)
			n += 1 + l + sovApi(uint64(l))
		}
	}
	l = len(m.Tcode)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Tparam)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}

func (m *AddTaskReq) Size() (n int) {
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovApi(uint64(m.Type))
	}
	if m.BusinessID != 0 {
		n += 1 + sovApi(uint64(m.BusinessID))
	}
	l = len(m.TemplateCode)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Desc)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.FileName)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.FilePath)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.SendTime != 0 {
		n += 1 + sovApi(uint64(m.SendTime))
	}
	return n
}

func (m *AddTaskReply) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *UpdateTaskReq) Size() (n int) {
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovApi(uint64(m.ID))
	}
	if m.Type != 0 {
		n += 1 + sovApi(uint64(m.Type))
	}
	if m.BusinessID != 0 {
		n += 1 + sovApi(uint64(m.BusinessID))
	}
	l = len(m.TemplateCode)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Desc)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.FileName)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.FilePath)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.SendTime != 0 {
		n += 1 + sovApi(uint64(m.SendTime))
	}
	return n
}

func (m *UpdateTaskReply) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *DeleteTaskReq) Size() (n int) {
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovApi(uint64(m.ID))
	}
	return n
}

func (m *DeleteTaskReply) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *TaskInfoReq) Size() (n int) {
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovApi(uint64(m.ID))
	}
	return n
}

func (m *TaskInfoReply) Size() (n int) {
	var l int
	_ = l
	if m.Info != nil {
		l = m.Info.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}

func (m *TaskListReq) Size() (n int) {
	var l int
	_ = l
	if m.Pn != 0 {
		n += 1 + sovApi(uint64(m.Pn))
	}
	if m.Ps != 0 {
		n += 1 + sovApi(uint64(m.Ps))
	}
	return n
}

func (m *TaskListReply) Size() (n int) {
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.Total != 0 {
		n += 1 + sovApi(uint64(m.Total))
	}
	return n
}

func sovApi(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozApi(x uint64) (n int) {
	return sovApi(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *AddTemplateReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddTemplateReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddTemplateReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddTemplateReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddTemplateReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddTemplateReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stype", wireType)
			}
			m.Stype = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Stype |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tcode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tcode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Template", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Template = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Submitter", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Submitter = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TemplateListReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TemplateListReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TemplateListReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &sms_service_model.ModelTemplate{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Total", wireType)
			}
			m.Total = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Total |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TemplateListReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TemplateListReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TemplateListReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pn", wireType)
			}
			m.Pn = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Pn |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ps", wireType)
			}
			m.Ps = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ps |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field St", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.St = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sw", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sw = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateTemplateReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateTemplateReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateTemplateReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateTemplateReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateTemplateReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateTemplateReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stype", wireType)
			}
			m.Stype = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Stype |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tcode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tcode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Template", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Template = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Submitter", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Submitter = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SendReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SendReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SendReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SendReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SendReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SendReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mobile", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Mobile = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Country", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Country = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tcode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tcode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tparam", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tparam = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SendBatchReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SendBatchReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SendBatchReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SendBatchReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SendBatchReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SendBatchReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Mids = append(m.Mids, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthApi
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Mids = append(m.Mids, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Mids", wireType)
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mobiles", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Mobiles = append(m.Mobiles, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tcode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tcode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tparam", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tparam = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddTaskReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddTaskReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddTaskReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BusinessID", wireType)
			}
			m.BusinessID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BusinessID |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TemplateCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TemplateCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Desc", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Desc = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FileName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FileName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FilePath", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FilePath = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SendTime", wireType)
			}
			m.SendTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SendTime |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddTaskReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddTaskReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddTaskReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateTaskReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateTaskReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateTaskReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BusinessID", wireType)
			}
			m.BusinessID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BusinessID |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TemplateCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TemplateCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Desc", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Desc = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FileName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FileName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FilePath", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FilePath = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SendTime", wireType)
			}
			m.SendTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SendTime |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateTaskReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateTaskReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateTaskReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteTaskReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteTaskReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteTaskReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteTaskReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteTaskReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteTaskReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TaskInfoReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TaskInfoReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TaskInfoReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TaskInfoReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TaskInfoReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TaskInfoReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Info", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Info == nil {
				m.Info = &sms_service_model.ModelTask{}
			}
			if err := m.Info.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TaskListReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TaskListReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TaskListReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pn", wireType)
			}
			m.Pn = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Pn |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ps", wireType)
			}
			m.Ps = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ps |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TaskListReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TaskListReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TaskListReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &sms_service_model.ModelTask{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Total", wireType)
			}
			m.Total = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Total |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipApi(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowApi
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowApi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowApi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthApi
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowApi
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipApi(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthApi = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowApi   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("app/service/main/sms/api/api.proto", fileDescriptorApi) }

var fileDescriptorApi = []byte{
	// 1069 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x56, 0x4d, 0x6f, 0xdb, 0x46,
	0x13, 0x06, 0x29, 0xca, 0x8e, 0x46, 0x96, 0x62, 0x6f, 0xec, 0xf7, 0x55, 0x8c, 0xd4, 0x14, 0xd6,
	0xa9, 0x21, 0x1b, 0x8e, 0x64, 0xab, 0xb9, 0xd4, 0x40, 0x50, 0x84, 0x4d, 0x0e, 0x46, 0x3f, 0xd0,
	0x32, 0x29, 0x0a, 0xf4, 0x62, 0x50, 0xe2, 0xca, 0x5e, 0x94, 0x5f, 0xd6, 0xae, 0x6c, 0xf8, 0xde,
	0x63, 0xfb, 0x37, 0xfa, 0x3b, 0x7a, 0xec, 0xb1, 0xb7, 0xde, 0x88, 0xc2, 0x40, 0x7f, 0x40, 0xf9,
	0x0b, 0x8a, 0xfd, 0x20, 0x45, 0xa5, 0xb2, 0xe3, 0x26, 0xea, 0x45, 0xd0, 0xce, 0x3c, 0xf3, 0x70,
	0x67, 0xf6, 0x99, 0xdd, 0x81, 0x3d, 0x2f, 0x49, 0x7a, 0x8c, 0x8c, 0x2f, 0xe8, 0x90, 0xf4, 0x42,
	0x8f, 0x46, 0x3d, 0x16, 0xb2, 0x9e, 0x97, 0xd0, 0xde, 0xe9, 0x38, 0x19, 0xf6, 0x2e, 0x0e, 0xc5,
	0xff, 0x6e, 0x32, 0x8e, 0x79, 0x8c, 0x9a, 0x2c, 0x64, 0x5d, 0x8d, 0xed, 0x5e, 0x1c, 0x6e, 0xee,
	0xcc, 0x8d, 0x0d, 0x63, 0x9f, 0x04, 0xea, 0x57, 0xc5, 0x6d, 0x3e, 0x39, 0xa5, 0xfc, 0x6c, 0x32,
	0xe8, 0x0e, 0xe3, 0xb0, 0x77, 0x1a, 0x9f, 0xc6, 0x3d, 0x69, 0x1e, 0x4c, 0x46, 0x72, 0x25, 0x17,
	0xf2, 0x9f, 0x82, 0x63, 0x04, 0xab, 0xcf, 0x7d, 0xff, 0x35, 0x09, 0x93, 0xc0, 0xe3, 0xc4, 0x25,
	0x49, 0x70, 0x85, 0x7f, 0x30, 0xa1, 0x39, 0x63, 0x3c, 0x47, 0x9f, 0x40, 0x95, 0xf1, 0xab, 0x84,
	0xb4, 0x8c, 0xb6, 0xd1, 0xa9, 0x3a, 0xbb, 0x59, 0x6a, 0x7f, 0x38, 0x8a, 0xc7, 0xe1, 0x11, 0x16,
	0x56, 0xdc, 0xbe, 0xf0, 0x02, 0xea, 0x7b, 0x9c, 0x1c, 0xe1, 0x31, 0x39, 0x9f, 0xd0, 0x31, 0xf1,
	0xf7, 0x43, 0x1a, 0x3d, 0x3b, 0xc4, 0xae, 0x8a, 0x43, 0x1f, 0x43, 0x95, 0x0f, 0x63, 0x9f, 0xb4,
	0xcc, 0xb6, 0xd1, 0xa9, 0x39, 0xdb, 0x59, 0x6a, 0xdb, 0x8a, 0x40, 0x58, 0xe7, 0x11, 0x60, 0x57,
	0x45, 0x20, 0x07, 0xee, 0x71, 0xbd, 0x95, 0x56, 0x45, 0x46, 0xef, 0x64, 0xa9, 0x8d, 0xf3, 0xe8,
	0x88, 0x93, 0x88, 0xcf, 0x27, 0x28, 0xe2, 0x50, 0x1f, 0x6a, 0x6c, 0x32, 0x08, 0x29, 0xe7, 0x64,
	0xdc, 0xaa, 0x4a, 0x92, 0xf5, 0x2c, 0xb5, 0x57, 0x15, 0x49, 0xe1, 0xc2, 0xee, 0x14, 0x86, 0x4f,
	0x60, 0x2d, 0x2f, 0xc1, 0xe7, 0x94, 0x71, 0x59, 0x1b, 0xf4, 0x14, 0xac, 0x80, 0x32, 0xde, 0x32,
	0xda, 0x95, 0x4e, 0xbd, 0xdf, 0xee, 0x96, 0x4f, 0x49, 0x1d, 0xc3, 0x17, 0xe2, 0xb7, 0xa8, 0x9d,
	0x44, 0xa3, 0x75, 0xa8, 0xf2, 0x98, 0x7b, 0x81, 0xcc, 0xbe, 0xea, 0xaa, 0x05, 0xfe, 0xd9, 0x80,
	0xfb, 0xb3, 0x5f, 0x38, 0x47, 0xbb, 0x60, 0x26, 0x91, 0xae, 0xf2, 0xc3, 0x2c, 0xb5, 0x37, 0xd4,
	0x0e, 0x93, 0x08, 0xb7, 0x7d, 0x32, 0xf2, 0x26, 0x01, 0x3f, 0xc2, 0x87, 0xd8, 0x35, 0x93, 0x08,
	0xed, 0x81, 0x99, 0x30, 0xc5, 0xe8, 0x6c, 0x66, 0xa9, 0xfd, 0x3f, 0x0d, 0x65, 0x65, 0xe8, 0x81,
	0xc0, 0x32, 0xf4, 0x01, 0x98, 0x8c, 0xeb, 0xea, 0x35, 0xb2, 0xd4, 0xae, 0xe9, 0xc4, 0x39, 0x76,
	0x4d, 0xc6, 0xa5, 0xfb, 0xb2, 0x65, 0xfd, 0xc3, 0x7d, 0x29, 0xdc, 0x97, 0x78, 0x03, 0x1e, 0x7c,
	0x93, 0x88, 0xe2, 0xce, 0xea, 0xe4, 0x2f, 0x13, 0xd6, 0xde, 0xb4, 0x9f, 0xa3, 0x67, 0x60, 0x52,
	0x5f, 0x66, 0x50, 0x71, 0x9e, 0x5c, 0xa7, 0xb6, 0x79, 0xfc, 0x22, 0x4b, 0xed, 0x6d, 0xc5, 0x48,
	0xfd, 0xdb, 0xb4, 0x62, 0x52, 0x7f, 0xaa, 0x34, 0xf3, 0x1d, 0x95, 0xb6, 0x0b, 0x4b, 0x8c, 0x7b,
	0x7c, 0xc2, 0x64, 0xba, 0x55, 0x67, 0x2d, 0x4b, 0xed, 0x46, 0x9e, 0xae, 0xb0, 0x63, 0x57, 0x03,
	0xa6, 0xa2, 0xb4, 0xde, 0x4b, 0x94, 0xd5, 0x45, 0x88, 0x72, 0xe9, 0x6e, 0xa2, 0xac, 0x43, 0xed,
	0x15, 0x89, 0x7c, 0x75, 0x00, 0xbf, 0x1b, 0xb0, 0xac, 0x56, 0xe7, 0xa8, 0x0d, 0x95, 0xb0, 0xa8,
	0x7b, 0x33, 0x4b, 0x6d, 0x50, 0x34, 0x21, 0xf5, 0xb1, 0x2b, 0x5c, 0xa2, 0x30, 0x61, 0x3c, 0xa0,
	0x41, 0xde, 0x83, 0xa5, 0xc2, 0x28, 0x3b, 0x76, 0x35, 0x00, 0xed, 0xc3, 0xf2, 0x30, 0x9e, 0x44,
	0x7c, 0x7c, 0xa5, 0x35, 0x83, 0xb2, 0xd4, 0x6e, 0xe6, 0xc9, 0x49, 0x07, 0x76, 0x73, 0x08, 0xda,
	0x99, 0x2d, 0xe3, 0x6a, 0x96, 0xda, 0x2b, 0xfa, 0xc8, 0x64, 0x1d, 0xf3, 0x9a, 0xed, 0xc2, 0x12,
	0x4f, 0xbc, 0xb1, 0x17, 0xea, 0x8a, 0x95, 0x36, 0xa0, 0xec, 0xd8, 0xd5, 0x00, 0xbc, 0x0a, 0x4d,
	0x91, 0x98, 0xe3, 0xf1, 0xe1, 0x99, 0xca, 0xf5, 0x17, 0x03, 0x56, 0x4a, 0x26, 0xd1, 0x29, 0x56,
	0x48, 0x7d, 0x26, 0x3b, 0xb1, 0xe2, 0x6c, 0x64, 0xa9, 0xbd, 0x56, 0x64, 0xcc, 0xf6, 0x59, 0x12,
	0x50, 0x8e, 0x5d, 0x09, 0x41, 0x7d, 0x58, 0x56, 0x89, 0x89, 0x76, 0xa9, 0x74, 0x6a, 0x4e, 0x2b,
	0x4b, 0xed, 0xf5, 0x72, 0xea, 0x45, 0x40, 0x0e, 0x9c, 0x26, 0x55, 0xb9, 0x6b, 0x52, 0xd6, 0xdb,
	0x92, 0xfa, 0xb3, 0x02, 0x20, 0xee, 0x55, 0x8f, 0x7d, 0xaf, 0x1a, 0xc5, 0x7a, 0xb7, 0x2b, 0x55,
	0x86, 0xa1, 0x97, 0x50, 0x1f, 0x4c, 0x18, 0x8d, 0x08, 0x63, 0x27, 0xd4, 0xd7, 0xed, 0xf2, 0xf8,
	0x3a, 0xb5, 0xc1, 0xd1, 0x66, 0xd9, 0x78, 0x48, 0x71, 0x96, 0xa0, 0xd8, 0x85, 0x7c, 0x75, 0xec,
	0xa3, 0xaf, 0xa1, 0x91, 0x0b, 0xf2, 0xa4, 0x94, 0xef, 0x7e, 0x96, 0xda, 0x1d, 0xbd, 0x9d, 0xb2,
	0x7b, 0xbe, 0xa6, 0x57, 0x72, 0xcc, 0xa7, 0xa2, 0x24, 0xdb, 0x60, 0xf9, 0x84, 0x0d, 0x75, 0x41,
	0xee, 0x67, 0xa9, 0x5d, 0x57, 0x4c, 0xc2, 0x8a, 0x5d, 0xe9, 0x44, 0x2f, 0xa1, 0x36, 0xa2, 0x01,
	0x39, 0x89, 0xbc, 0x30, 0xef, 0xa0, 0x4e, 0x96, 0xda, 0x8f, 0x15, 0xb2, 0x70, 0xdd, 0xd0, 0x43,
	0xc2, 0xff, 0xa5, 0x17, 0x92, 0x82, 0x26, 0xf1, 0xf8, 0x99, 0xee, 0xa1, 0x37, 0x69, 0x84, 0xeb,
	0x16, 0x9a, 0xaf, 0x3c, 0x7e, 0x86, 0x3e, 0x83, 0x1a, 0x23, 0x91, 0x7f, 0xc2, 0x69, 0x48, 0x5a,
	0xcb, 0xb2, 0x87, 0xba, 0x59, 0x6a, 0xef, 0xe9, 0x56, 0xcc, 0x5d, 0xb7, 0x9d, 0xca, 0x3d, 0x81,
	0x7a, 0x2d, 0x40, 0x4d, 0x58, 0x29, 0x8e, 0x59, 0x48, 0xf7, 0x27, 0x0b, 0x1a, 0xfa, 0x9e, 0xd4,
	0x47, 0xbf, 0x5d, 0xba, 0x23, 0x1f, 0x14, 0x77, 0x64, 0xad, 0xb8, 0x23, 0xe5, 0x4d, 0x98, 0xeb,
	0xc3, 0x5c, 0x88, 0x3e, 0x2a, 0x8b, 0xd2, 0x87, 0xb5, 0x30, 0x7d, 0x54, 0xef, 0xac, 0x8f, 0xa5,
	0xc5, 0xe8, 0x63, 0x79, 0x31, 0xfa, 0xb8, 0xf7, 0x9e, 0xfa, 0x58, 0x83, 0xfb, 0x65, 0x39, 0x08,
	0x89, 0x3c, 0x85, 0xc6, 0x0b, 0x12, 0x90, 0x7f, 0xa7, 0x10, 0x41, 0x54, 0x8e, 0x12, 0x44, 0x7d,
	0xa8, 0x8b, 0xc5, 0x71, 0x34, 0x8a, 0xef, 0x4c, 0xf3, 0x1c, 0x1a, 0xd3, 0x18, 0x31, 0xe4, 0x1c,
	0x80, 0x45, 0xa3, 0x51, 0x2c, 0xe3, 0xea, 0xfd, 0x47, 0x37, 0x0e, 0x39, 0xe2, 0xab, 0x12, 0x89,
	0x7d, 0xf5, 0xd9, 0xff, 0x68, 0x8a, 0xe9, 0xab, 0x29, 0x06, 0x7f, 0xab, 0x36, 0x3a, 0x9d, 0xc6,
	0x0e, 0x66, 0xa6, 0xb1, 0xb7, 0x6c, 0xf4, 0xe6, 0x49, 0xac, 0xff, 0xa3, 0x01, 0x95, 0x57, 0x21,
	0x43, 0x47, 0x60, 0x89, 0x37, 0x06, 0xfd, 0xbf, 0x3b, 0x3b, 0x7d, 0x77, 0xf5, 0x2b, 0xbb, 0xf9,
	0x70, 0xbe, 0x43, 0xec, 0xe5, 0x58, 0xbd, 0xcc, 0xf2, 0x7d, 0x42, 0x8f, 0xe6, 0xe1, 0xf2, 0xa7,
	0x6b, 0x73, 0xeb, 0x16, 0x6f, 0x12, 0x5c, 0x39, 0xab, 0xbf, 0x5e, 0x6f, 0x19, 0xbf, 0x5d, 0x6f,
	0x19, 0x7f, 0x5c, 0x6f, 0x19, 0xdf, 0x99, 0x17, 0x87, 0x83, 0x25, 0x39, 0xad, 0x7f, 0xf4, 0x77,
	0x00, 0x00, 0x00, 0xff, 0xff, 0x70, 0xf7, 0x35, 0xb6, 0x42, 0x0c, 0x00, 0x00,
}
