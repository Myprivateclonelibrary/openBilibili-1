// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: app/service/main/up/api/v1/api.proto

/*
	Package v1 is a generated protocol buffer package.

	It is generated from these files:
		app/service/main/up/api/v1/api.proto
		app/service/main/up/api/v1/archive.proto
		app/service/main/up/api/v1/reply.proto
		app/service/main/up/api/v1/request.proto
		app/service/main/up/api/v1/sign_up.proto
		app/service/main/up/api/v1/up.proto

	It has these top-level messages:
		AidPubTime
		NoReply
		UpArcsReply
		UpsArcsReply
		UpCountReply
		UpsCountReply
		UpAidPubTimeReply
		UpsAidPubTimeReply
		UpActivityListReply
		UpGroupsReply
		UpSpecialReply
		UpsSpecialReply
		UpGroupMidsReply
		UpAttrReply
		UpBaseStatReply
		UpSwitchReply
		HighAllyUpsReply
		NoArgReq
		UpArcsReq
		UpsArcsReq
		UpCountReq
		UpsCountReq
		UpCacheReq
		UpListByLastIDReq
		UpSpecialReq
		UpsSpecialReq
		UpGroupMidsReq
		UpAttrReq
		UpStatReq
		UpSwitchReq
		HighAllyUpsReq
		SignUp
		UpActivity
		UpGroup
		UpSpecial
*/
package v1

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "google.golang.org/genproto/googleapis/api/annotations"
import _ "github.com/gogo/protobuf/gogoproto"

import context "golang.org/x/net/context"
import grpc "google.golang.org/grpc"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Up service

type UpClient interface {
	// UpArcs 单个up主的稿件列表接口-带分页
	UpArcs(ctx context.Context, in *UpArcsReq, opts ...grpc.CallOption) (*UpArcsReply, error)
	// UpsArcs 多个up主的稿件列表接口-带分页
	UpsArcs(ctx context.Context, in *UpsArcsReq, opts ...grpc.CallOption) (*UpsArcsReply, error)
	// UpCount 单个up主的稿件计数接口
	UpCount(ctx context.Context, in *UpCountReq, opts ...grpc.CallOption) (*UpCountReply, error)
	// UpsCount 多个up主的稿件计数接口
	UpsCount(ctx context.Context, in *UpsCountReq, opts ...grpc.CallOption) (*UpsCountReply, error)
	// UpsAidPubTime archives 多个up主的按分布时间排序的aid接口
	UpsAidPubTime(ctx context.Context, in *UpsArcsReq, opts ...grpc.CallOption) (*UpsAidPubTimeReply, error)
	// AddUpPassedCacheByStaff staff变更 新增或者变更up主稿件信息列表和计数接口
	AddUpPassedCacheByStaff(ctx context.Context, in *UpCacheReq, opts ...grpc.CallOption) (*NoReply, error)
	// AddUpPassedCache archive变更 新增或者变更up主稿件信息列表和计数接口
	AddUpPassedCache(ctx context.Context, in *UpCacheReq, opts ...grpc.CallOption) (*NoReply, error)
	// DelUpPassedCacheByStaff staff解除 删除的up主稿件信息列表和计数接口
	DelUpPassedCacheByStaff(ctx context.Context, in *UpCacheReq, opts ...grpc.CallOption) (*NoReply, error)
	// DelUpPassedCache archive失效 删除的up主稿件信息列表和计数接口
	DelUpPassedCache(ctx context.Context, in *UpCacheReq, opts ...grpc.CallOption) (*NoReply, error)
	// UpInfoActivitys 获取up主活跃度列表信息的接口
	UpInfoActivitys(ctx context.Context, in *UpListByLastIDReq, opts ...grpc.CallOption) (*UpActivityListReply, error)
	// UpSpecial 获取up主的特殊属性信息的接口
	UpSpecial(ctx context.Context, in *UpSpecialReq, opts ...grpc.CallOption) (*UpSpecialReply, error)
	// UpsSpecial 获取多个up主的特殊属性信息的接口
	UpsSpecial(ctx context.Context, in *UpsSpecialReq, opts ...grpc.CallOption) (*UpsSpecialReply, error)
	// UpGroups 获取所有特殊用户组信息的接口
	UpGroups(ctx context.Context, in *NoArgReq, opts ...grpc.CallOption) (*UpGroupsReply, error)
	// UpGroupMids 获取某个分组下的所有用户的接口
	UpGroupMids(ctx context.Context, in *UpGroupMidsReq, opts ...grpc.CallOption) (*UpGroupMidsReply, error)
	// UpAttr 获取up主身份属性的接口
	UpAttr(ctx context.Context, in *UpAttrReq, opts ...grpc.CallOption) (*UpAttrReply, error)
	// UpBaseStats 获取up主基础计数的接口
	UpBaseStats(ctx context.Context, in *UpStatReq, opts ...grpc.CallOption) (*UpBaseStatReply, error)
	// SetUpSwitch 设置up主关注弹窗开关的接口
	SetUpSwitch(ctx context.Context, in *UpSwitchReq, opts ...grpc.CallOption) (*NoReply, error)
	// UpSwitch 获取up主关注弹窗开关的接口
	UpSwitch(ctx context.Context, in *UpSwitchReq, opts ...grpc.CallOption) (*UpSwitchReply, error)
	// GetHighAllyUps 获取高能联盟up主列表
	GetHighAllyUps(ctx context.Context, in *HighAllyUpsReq, opts ...grpc.CallOption) (*HighAllyUpsReply, error)
}

type upClient struct {
	cc *grpc.ClientConn
}

func NewUpClient(cc *grpc.ClientConn) UpClient {
	return &upClient{cc}
}

func (c *upClient) UpArcs(ctx context.Context, in *UpArcsReq, opts ...grpc.CallOption) (*UpArcsReply, error) {
	out := new(UpArcsReply)
	err := grpc.Invoke(ctx, "/archive.service.up.v1.Up/UpArcs", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *upClient) UpsArcs(ctx context.Context, in *UpsArcsReq, opts ...grpc.CallOption) (*UpsArcsReply, error) {
	out := new(UpsArcsReply)
	err := grpc.Invoke(ctx, "/archive.service.up.v1.Up/UpsArcs", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *upClient) UpCount(ctx context.Context, in *UpCountReq, opts ...grpc.CallOption) (*UpCountReply, error) {
	out := new(UpCountReply)
	err := grpc.Invoke(ctx, "/archive.service.up.v1.Up/UpCount", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *upClient) UpsCount(ctx context.Context, in *UpsCountReq, opts ...grpc.CallOption) (*UpsCountReply, error) {
	out := new(UpsCountReply)
	err := grpc.Invoke(ctx, "/archive.service.up.v1.Up/UpsCount", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *upClient) UpsAidPubTime(ctx context.Context, in *UpsArcsReq, opts ...grpc.CallOption) (*UpsAidPubTimeReply, error) {
	out := new(UpsAidPubTimeReply)
	err := grpc.Invoke(ctx, "/archive.service.up.v1.Up/UpsAidPubTime", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *upClient) AddUpPassedCacheByStaff(ctx context.Context, in *UpCacheReq, opts ...grpc.CallOption) (*NoReply, error) {
	out := new(NoReply)
	err := grpc.Invoke(ctx, "/archive.service.up.v1.Up/AddUpPassedCacheByStaff", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *upClient) AddUpPassedCache(ctx context.Context, in *UpCacheReq, opts ...grpc.CallOption) (*NoReply, error) {
	out := new(NoReply)
	err := grpc.Invoke(ctx, "/archive.service.up.v1.Up/AddUpPassedCache", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *upClient) DelUpPassedCacheByStaff(ctx context.Context, in *UpCacheReq, opts ...grpc.CallOption) (*NoReply, error) {
	out := new(NoReply)
	err := grpc.Invoke(ctx, "/archive.service.up.v1.Up/DelUpPassedCacheByStaff", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *upClient) DelUpPassedCache(ctx context.Context, in *UpCacheReq, opts ...grpc.CallOption) (*NoReply, error) {
	out := new(NoReply)
	err := grpc.Invoke(ctx, "/archive.service.up.v1.Up/DelUpPassedCache", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *upClient) UpInfoActivitys(ctx context.Context, in *UpListByLastIDReq, opts ...grpc.CallOption) (*UpActivityListReply, error) {
	out := new(UpActivityListReply)
	err := grpc.Invoke(ctx, "/archive.service.up.v1.Up/UpInfoActivitys", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *upClient) UpSpecial(ctx context.Context, in *UpSpecialReq, opts ...grpc.CallOption) (*UpSpecialReply, error) {
	out := new(UpSpecialReply)
	err := grpc.Invoke(ctx, "/archive.service.up.v1.Up/UpSpecial", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *upClient) UpsSpecial(ctx context.Context, in *UpsSpecialReq, opts ...grpc.CallOption) (*UpsSpecialReply, error) {
	out := new(UpsSpecialReply)
	err := grpc.Invoke(ctx, "/archive.service.up.v1.Up/UpsSpecial", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *upClient) UpGroups(ctx context.Context, in *NoArgReq, opts ...grpc.CallOption) (*UpGroupsReply, error) {
	out := new(UpGroupsReply)
	err := grpc.Invoke(ctx, "/archive.service.up.v1.Up/UpGroups", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *upClient) UpGroupMids(ctx context.Context, in *UpGroupMidsReq, opts ...grpc.CallOption) (*UpGroupMidsReply, error) {
	out := new(UpGroupMidsReply)
	err := grpc.Invoke(ctx, "/archive.service.up.v1.Up/UpGroupMids", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *upClient) UpAttr(ctx context.Context, in *UpAttrReq, opts ...grpc.CallOption) (*UpAttrReply, error) {
	out := new(UpAttrReply)
	err := grpc.Invoke(ctx, "/archive.service.up.v1.Up/UpAttr", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *upClient) UpBaseStats(ctx context.Context, in *UpStatReq, opts ...grpc.CallOption) (*UpBaseStatReply, error) {
	out := new(UpBaseStatReply)
	err := grpc.Invoke(ctx, "/archive.service.up.v1.Up/UpBaseStats", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *upClient) SetUpSwitch(ctx context.Context, in *UpSwitchReq, opts ...grpc.CallOption) (*NoReply, error) {
	out := new(NoReply)
	err := grpc.Invoke(ctx, "/archive.service.up.v1.Up/SetUpSwitch", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *upClient) UpSwitch(ctx context.Context, in *UpSwitchReq, opts ...grpc.CallOption) (*UpSwitchReply, error) {
	out := new(UpSwitchReply)
	err := grpc.Invoke(ctx, "/archive.service.up.v1.Up/UpSwitch", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *upClient) GetHighAllyUps(ctx context.Context, in *HighAllyUpsReq, opts ...grpc.CallOption) (*HighAllyUpsReply, error) {
	out := new(HighAllyUpsReply)
	err := grpc.Invoke(ctx, "/archive.service.up.v1.Up/GetHighAllyUps", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Up service

type UpServer interface {
	// UpArcs 单个up主的稿件列表接口-带分页
	UpArcs(context.Context, *UpArcsReq) (*UpArcsReply, error)
	// UpsArcs 多个up主的稿件列表接口-带分页
	UpsArcs(context.Context, *UpsArcsReq) (*UpsArcsReply, error)
	// UpCount 单个up主的稿件计数接口
	UpCount(context.Context, *UpCountReq) (*UpCountReply, error)
	// UpsCount 多个up主的稿件计数接口
	UpsCount(context.Context, *UpsCountReq) (*UpsCountReply, error)
	// UpsAidPubTime archives 多个up主的按分布时间排序的aid接口
	UpsAidPubTime(context.Context, *UpsArcsReq) (*UpsAidPubTimeReply, error)
	// AddUpPassedCacheByStaff staff变更 新增或者变更up主稿件信息列表和计数接口
	AddUpPassedCacheByStaff(context.Context, *UpCacheReq) (*NoReply, error)
	// AddUpPassedCache archive变更 新增或者变更up主稿件信息列表和计数接口
	AddUpPassedCache(context.Context, *UpCacheReq) (*NoReply, error)
	// DelUpPassedCacheByStaff staff解除 删除的up主稿件信息列表和计数接口
	DelUpPassedCacheByStaff(context.Context, *UpCacheReq) (*NoReply, error)
	// DelUpPassedCache archive失效 删除的up主稿件信息列表和计数接口
	DelUpPassedCache(context.Context, *UpCacheReq) (*NoReply, error)
	// UpInfoActivitys 获取up主活跃度列表信息的接口
	UpInfoActivitys(context.Context, *UpListByLastIDReq) (*UpActivityListReply, error)
	// UpSpecial 获取up主的特殊属性信息的接口
	UpSpecial(context.Context, *UpSpecialReq) (*UpSpecialReply, error)
	// UpsSpecial 获取多个up主的特殊属性信息的接口
	UpsSpecial(context.Context, *UpsSpecialReq) (*UpsSpecialReply, error)
	// UpGroups 获取所有特殊用户组信息的接口
	UpGroups(context.Context, *NoArgReq) (*UpGroupsReply, error)
	// UpGroupMids 获取某个分组下的所有用户的接口
	UpGroupMids(context.Context, *UpGroupMidsReq) (*UpGroupMidsReply, error)
	// UpAttr 获取up主身份属性的接口
	UpAttr(context.Context, *UpAttrReq) (*UpAttrReply, error)
	// UpBaseStats 获取up主基础计数的接口
	UpBaseStats(context.Context, *UpStatReq) (*UpBaseStatReply, error)
	// SetUpSwitch 设置up主关注弹窗开关的接口
	SetUpSwitch(context.Context, *UpSwitchReq) (*NoReply, error)
	// UpSwitch 获取up主关注弹窗开关的接口
	UpSwitch(context.Context, *UpSwitchReq) (*UpSwitchReply, error)
	// GetHighAllyUps 获取高能联盟up主列表
	GetHighAllyUps(context.Context, *HighAllyUpsReq) (*HighAllyUpsReply, error)
}

func RegisterUpServer(s *grpc.Server, srv UpServer) {
	s.RegisterService(&_Up_serviceDesc, srv)
}

func _Up_UpArcs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpArcsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UpServer).UpArcs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/archive.service.up.v1.Up/UpArcs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UpServer).UpArcs(ctx, req.(*UpArcsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Up_UpsArcs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpsArcsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UpServer).UpsArcs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/archive.service.up.v1.Up/UpsArcs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UpServer).UpsArcs(ctx, req.(*UpsArcsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Up_UpCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpCountReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UpServer).UpCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/archive.service.up.v1.Up/UpCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UpServer).UpCount(ctx, req.(*UpCountReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Up_UpsCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpsCountReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UpServer).UpsCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/archive.service.up.v1.Up/UpsCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UpServer).UpsCount(ctx, req.(*UpsCountReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Up_UpsAidPubTime_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpsArcsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UpServer).UpsAidPubTime(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/archive.service.up.v1.Up/UpsAidPubTime",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UpServer).UpsAidPubTime(ctx, req.(*UpsArcsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Up_AddUpPassedCacheByStaff_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpCacheReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UpServer).AddUpPassedCacheByStaff(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/archive.service.up.v1.Up/AddUpPassedCacheByStaff",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UpServer).AddUpPassedCacheByStaff(ctx, req.(*UpCacheReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Up_AddUpPassedCache_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpCacheReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UpServer).AddUpPassedCache(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/archive.service.up.v1.Up/AddUpPassedCache",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UpServer).AddUpPassedCache(ctx, req.(*UpCacheReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Up_DelUpPassedCacheByStaff_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpCacheReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UpServer).DelUpPassedCacheByStaff(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/archive.service.up.v1.Up/DelUpPassedCacheByStaff",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UpServer).DelUpPassedCacheByStaff(ctx, req.(*UpCacheReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Up_DelUpPassedCache_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpCacheReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UpServer).DelUpPassedCache(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/archive.service.up.v1.Up/DelUpPassedCache",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UpServer).DelUpPassedCache(ctx, req.(*UpCacheReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Up_UpInfoActivitys_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpListByLastIDReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UpServer).UpInfoActivitys(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/archive.service.up.v1.Up/UpInfoActivitys",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UpServer).UpInfoActivitys(ctx, req.(*UpListByLastIDReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Up_UpSpecial_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpSpecialReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UpServer).UpSpecial(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/archive.service.up.v1.Up/UpSpecial",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UpServer).UpSpecial(ctx, req.(*UpSpecialReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Up_UpsSpecial_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpsSpecialReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UpServer).UpsSpecial(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/archive.service.up.v1.Up/UpsSpecial",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UpServer).UpsSpecial(ctx, req.(*UpsSpecialReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Up_UpGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NoArgReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UpServer).UpGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/archive.service.up.v1.Up/UpGroups",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UpServer).UpGroups(ctx, req.(*NoArgReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Up_UpGroupMids_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpGroupMidsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UpServer).UpGroupMids(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/archive.service.up.v1.Up/UpGroupMids",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UpServer).UpGroupMids(ctx, req.(*UpGroupMidsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Up_UpAttr_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpAttrReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UpServer).UpAttr(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/archive.service.up.v1.Up/UpAttr",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UpServer).UpAttr(ctx, req.(*UpAttrReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Up_UpBaseStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpStatReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UpServer).UpBaseStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/archive.service.up.v1.Up/UpBaseStats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UpServer).UpBaseStats(ctx, req.(*UpStatReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Up_SetUpSwitch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpSwitchReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UpServer).SetUpSwitch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/archive.service.up.v1.Up/SetUpSwitch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UpServer).SetUpSwitch(ctx, req.(*UpSwitchReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Up_UpSwitch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpSwitchReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UpServer).UpSwitch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/archive.service.up.v1.Up/UpSwitch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UpServer).UpSwitch(ctx, req.(*UpSwitchReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Up_GetHighAllyUps_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HighAllyUpsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UpServer).GetHighAllyUps(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/archive.service.up.v1.Up/GetHighAllyUps",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UpServer).GetHighAllyUps(ctx, req.(*HighAllyUpsReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _Up_serviceDesc = grpc.ServiceDesc{
	ServiceName: "archive.service.up.v1.Up",
	HandlerType: (*UpServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpArcs",
			Handler:    _Up_UpArcs_Handler,
		},
		{
			MethodName: "UpsArcs",
			Handler:    _Up_UpsArcs_Handler,
		},
		{
			MethodName: "UpCount",
			Handler:    _Up_UpCount_Handler,
		},
		{
			MethodName: "UpsCount",
			Handler:    _Up_UpsCount_Handler,
		},
		{
			MethodName: "UpsAidPubTime",
			Handler:    _Up_UpsAidPubTime_Handler,
		},
		{
			MethodName: "AddUpPassedCacheByStaff",
			Handler:    _Up_AddUpPassedCacheByStaff_Handler,
		},
		{
			MethodName: "AddUpPassedCache",
			Handler:    _Up_AddUpPassedCache_Handler,
		},
		{
			MethodName: "DelUpPassedCacheByStaff",
			Handler:    _Up_DelUpPassedCacheByStaff_Handler,
		},
		{
			MethodName: "DelUpPassedCache",
			Handler:    _Up_DelUpPassedCache_Handler,
		},
		{
			MethodName: "UpInfoActivitys",
			Handler:    _Up_UpInfoActivitys_Handler,
		},
		{
			MethodName: "UpSpecial",
			Handler:    _Up_UpSpecial_Handler,
		},
		{
			MethodName: "UpsSpecial",
			Handler:    _Up_UpsSpecial_Handler,
		},
		{
			MethodName: "UpGroups",
			Handler:    _Up_UpGroups_Handler,
		},
		{
			MethodName: "UpGroupMids",
			Handler:    _Up_UpGroupMids_Handler,
		},
		{
			MethodName: "UpAttr",
			Handler:    _Up_UpAttr_Handler,
		},
		{
			MethodName: "UpBaseStats",
			Handler:    _Up_UpBaseStats_Handler,
		},
		{
			MethodName: "SetUpSwitch",
			Handler:    _Up_SetUpSwitch_Handler,
		},
		{
			MethodName: "UpSwitch",
			Handler:    _Up_UpSwitch_Handler,
		},
		{
			MethodName: "GetHighAllyUps",
			Handler:    _Up_GetHighAllyUps_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "app/service/main/up/api/v1/api.proto",
}

func init() { proto.RegisterFile("app/service/main/up/api/v1/api.proto", fileDescriptorApi) }

var fileDescriptorApi = []byte{
	// 613 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x95, 0xdf, 0x6a, 0x14, 0x3d,
	0x18, 0x87, 0xd9, 0x1e, 0xf4, 0xfb, 0x4c, 0xb1, 0x96, 0x80, 0x14, 0x16, 0x59, 0xed, 0xfe, 0xa9,
	0x6d, 0xc5, 0x19, 0x56, 0xaf, 0x60, 0xb7, 0x85, 0x5a, 0xa8, 0xa5, 0xba, 0x0d, 0x42, 0x69, 0xc1,
	0xec, 0x6c, 0x76, 0x36, 0x30, 0x3b, 0x79, 0x9b, 0x64, 0x46, 0x47, 0x44, 0xc4, 0x5b, 0xf0, 0xa6,
	0x3c, 0x12, 0xc1, 0x1b, 0x90, 0xc5, 0x0b, 0x91, 0x64, 0x66, 0x4b, 0x2d, 0x4e, 0x66, 0x85, 0x7a,
	0xd4, 0xce, 0xe4, 0xc9, 0xf3, 0x4b, 0xde, 0x77, 0x92, 0x45, 0x6d, 0x0a, 0xe0, 0x2b, 0x26, 0x53,
	0x1e, 0x30, 0x7f, 0x4a, 0x79, 0xec, 0x27, 0xe0, 0x53, 0xe0, 0x7e, 0xda, 0x35, 0x7f, 0x3c, 0x90,
	0x42, 0x0b, 0x7c, 0x97, 0xca, 0x60, 0xc2, 0x53, 0xe6, 0x15, 0xa4, 0x97, 0x80, 0x97, 0x76, 0xeb,
	0x5b, 0x8e, 0xc9, 0x92, 0x5d, 0x24, 0x4c, 0xe9, 0x5c, 0x50, 0xdf, 0x74, 0x92, 0x10, 0x65, 0x05,
	0x77, 0x2f, 0x14, 0x22, 0x8c, 0x98, 0x1d, 0xa2, 0x71, 0x2c, 0x34, 0xd5, 0x5c, 0xc4, 0xaa, 0x18,
	0x7d, 0x1c, 0x72, 0x3d, 0x49, 0x86, 0x5e, 0x20, 0xa6, 0x7e, 0x28, 0x42, 0xe1, 0xdb, 0xd7, 0xc3,
	0x64, 0x6c, 0x9f, 0xec, 0x83, 0xfd, 0x2f, 0xc7, 0x9f, 0x7c, 0x5d, 0x45, 0x4b, 0x04, 0xf0, 0x3b,
	0xb4, 0x4c, 0xa0, 0x27, 0x03, 0x85, 0x1f, 0x78, 0x7f, 0xdc, 0x87, 0x97, 0x0f, 0xbf, 0x64, 0x17,
	0xf5, 0x66, 0x05, 0x01, 0x51, 0xd6, 0xdc, 0xf9, 0xf4, 0xfd, 0xe7, 0xe7, 0xa5, 0x36, 0x6e, 0xfa,
	0x6f, 0x7d, 0x1e, 0x6b, 0x26, 0x63, 0x1a, 0xf9, 0x09, 0x30, 0xe9, 0x17, 0x73, 0xcd, 0xde, 0x80,
	0x2a, 0xc5, 0x46, 0xf8, 0x03, 0xfa, 0x8f, 0x80, 0xb2, 0xe1, 0x1b, 0xa5, 0x6a, 0x35, 0x4f, 0x6f,
	0x55, 0x21, 0x26, 0xfe, 0x91, 0x8d, 0xef, 0xe0, 0x96, 0x23, 0x5e, 0xcd, 0xf3, 0xdf, 0x9b, 0xfc,
	0x5d, 0x91, 0xc4, 0xda, 0x91, 0x6f, 0xc7, 0xdd, 0xf9, 0x05, 0x62, 0xf2, 0xb7, 0x6d, 0x7e, 0x0b,
	0x6f, 0xb8, 0xb6, 0x1f, 0xd8, 0xc8, 0x8f, 0x35, 0xf4, 0x3f, 0x01, 0x95, 0xe7, 0x97, 0x97, 0x56,
	0x5d, 0x2e, 0xa0, 0x5d, 0xc9, 0x2c, 0xda, 0x00, 0x55, 0x2c, 0xe1, 0x1c, 0xdd, 0x36, 0xd5, 0xe3,
	0xa3, 0xe3, 0x64, 0x78, 0xc2, 0xa7, 0x6c, 0x91, 0x36, 0x6c, 0x3b, 0x90, 0x4b, 0x91, 0x5d, 0x0a,
	0x3e, 0x43, 0xeb, 0xbd, 0xd1, 0x88, 0xc0, 0xb1, 0x2d, 0xf7, 0x2e, 0x0d, 0x26, 0xac, 0x9f, 0x0d,
	0x34, 0x1d, 0x8f, 0x5d, 0xf5, 0x36, 0x98, 0x09, 0x6a, 0x94, 0x20, 0x47, 0x22, 0xb7, 0x13, 0xb4,
	0x76, 0xdd, 0x7e, 0x13, 0xda, 0x33, 0xb4, 0xbe, 0xc7, 0xa2, 0x7f, 0xb8, 0xe8, 0xeb, 0xf6, 0x9b,
	0xd0, 0x86, 0xe8, 0x0e, 0x81, 0x83, 0x78, 0x2c, 0x7a, 0x81, 0xe6, 0x29, 0xd7, 0x99, 0xc2, 0x5b,
	0xa5, 0xd6, 0x43, 0xae, 0x74, 0x3f, 0x3b, 0xa4, 0x4a, 0x1f, 0xec, 0x19, 0xf9, 0x4e, 0xf9, 0xb1,
	0x2e, 0x6c, 0x66, 0x46, 0x1e, 0xf4, 0x0a, 0xdd, 0x22, 0x30, 0x00, 0x16, 0x70, 0x1a, 0xe1, 0xf2,
	0x13, 0x51, 0x10, 0xc6, 0xde, 0xa9, 0x86, 0x8c, 0xf8, 0x14, 0x21, 0x02, 0x6a, 0x6e, 0x76, 0x7c,
	0xea, 0x57, 0xd4, 0x9b, 0x0b, 0x50, 0xc6, 0xfd, 0xc2, 0x1c, 0xb4, 0x7d, 0x29, 0x12, 0x50, 0xf8,
	0x7e, 0x69, 0x25, 0x7b, 0x32, 0x74, 0x9f, 0xb2, 0xdc, 0x90, 0x2b, 0xcf, 0xd1, 0x4a, 0xf1, 0xe2,
	0x39, 0x1f, 0x29, 0xdc, 0x71, 0x4f, 0x32, 0x8c, 0x71, 0x3f, 0x5c, 0x04, 0x33, 0xfa, 0x23, 0x7b,
	0x2b, 0x6b, 0x2d, 0x5d, 0xb7, 0xb2, 0xd6, 0xb2, 0xe2, 0x56, 0xb6, 0x44, 0xde, 0xb6, 0x15, 0x02,
	0x7d, 0xaa, 0xd8, 0x40, 0x53, 0xed, 0xba, 0xea, 0xcd, 0xb8, 0xbb, 0xb4, 0x73, 0xcb, 0xbc, 0xb4,
	0x2b, 0x03, 0xa6, 0x09, 0x0c, 0xde, 0x70, 0x1d, 0x4c, 0x1c, 0xd7, 0x58, 0x0e, 0x2c, 0xf2, 0x2d,
	0x9f, 0x98, 0x6e, 0xfd, 0x85, 0xaf, 0x5d, 0xc9, 0x18, 0xeb, 0x6b, 0xb4, 0xba, 0xcf, 0xf4, 0x33,
	0x1e, 0x4e, 0x7a, 0x51, 0x94, 0x11, 0x28, 0xef, 0xd9, 0x15, 0xc6, 0xd5, 0xb3, 0xdf, 0x30, 0x88,
	0xb2, 0xfe, 0xda, 0x97, 0x59, 0xa3, 0xf6, 0x6d, 0xd6, 0xa8, 0xfd, 0x98, 0x35, 0x6a, 0xa7, 0x4b,
	0x69, 0x77, 0xb8, 0x6c, 0x7f, 0x69, 0x9f, 0xfe, 0x0a, 0x00, 0x00, 0xff, 0xff, 0xc9, 0x84, 0x1b,
	0x65, 0x47, 0x08, 0x00, 0x00,
}
