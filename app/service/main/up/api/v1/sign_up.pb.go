// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: app/service/main/up/api/v1/sign_up.proto

package v1

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import go_common_library_time "go-common/library/time"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// SignUp 签约up
type SignUp struct {
	// Mid 签约up主ID
	Mid int64 `protobuf:"varint,1,opt,name=Mid,proto3" json:"mid"`
	// State 签约状态
	State int32 `protobuf:"varint,2,opt,name=State,proto3" json:"state"`
	// BeginDate 经纪签约开始时间
	BeginDate go_common_library_time.Time `protobuf:"varint,3,opt,name=BeginDate,proto3,casttype=go-common/library/time.Time" json:"begin_date"`
	// EndDate 经纪签约结束时间
	EndDate go_common_library_time.Time `protobuf:"varint,4,opt,name=EndDate,proto3,casttype=go-common/library/time.Time" json:"end_date"`
}

func (m *SignUp) Reset()                    { *m = SignUp{} }
func (m *SignUp) String() string            { return proto.CompactTextString(m) }
func (*SignUp) ProtoMessage()               {}
func (*SignUp) Descriptor() ([]byte, []int) { return fileDescriptorSignUp, []int{0} }

func (m *SignUp) GetMid() int64 {
	if m != nil {
		return m.Mid
	}
	return 0
}

func (m *SignUp) GetState() int32 {
	if m != nil {
		return m.State
	}
	return 0
}

func (m *SignUp) GetBeginDate() go_common_library_time.Time {
	if m != nil {
		return m.BeginDate
	}
	return 0
}

func (m *SignUp) GetEndDate() go_common_library_time.Time {
	if m != nil {
		return m.EndDate
	}
	return 0
}

func init() {
	proto.RegisterType((*SignUp)(nil), "archive.service.up.v1.SignUp")
}
func (m *SignUp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SignUp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Mid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSignUp(dAtA, i, uint64(m.Mid))
	}
	if m.State != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintSignUp(dAtA, i, uint64(m.State))
	}
	if m.BeginDate != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintSignUp(dAtA, i, uint64(m.BeginDate))
	}
	if m.EndDate != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintSignUp(dAtA, i, uint64(m.EndDate))
	}
	return i, nil
}

func encodeVarintSignUp(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *SignUp) Size() (n int) {
	var l int
	_ = l
	if m.Mid != 0 {
		n += 1 + sovSignUp(uint64(m.Mid))
	}
	if m.State != 0 {
		n += 1 + sovSignUp(uint64(m.State))
	}
	if m.BeginDate != 0 {
		n += 1 + sovSignUp(uint64(m.BeginDate))
	}
	if m.EndDate != 0 {
		n += 1 + sovSignUp(uint64(m.EndDate))
	}
	return n
}

func sovSignUp(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozSignUp(x uint64) (n int) {
	return sovSignUp(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *SignUp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSignUp
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SignUp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SignUp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSignUp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSignUp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BeginDate", wireType)
			}
			m.BeginDate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSignUp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BeginDate |= (go_common_library_time.Time(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndDate", wireType)
			}
			m.EndDate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSignUp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EndDate |= (go_common_library_time.Time(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSignUp(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSignUp
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSignUp(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSignUp
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSignUp
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSignUp
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthSignUp
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowSignUp
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipSignUp(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthSignUp = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSignUp   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("app/service/main/up/api/v1/sign_up.proto", fileDescriptorSignUp) }

var fileDescriptorSignUp = []byte{
	// 280 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x8f, 0xbf, 0x4a, 0xf4, 0x40,
	0x14, 0xc5, 0x99, 0xcd, 0xb7, 0xbb, 0xdf, 0x4e, 0x25, 0x01, 0x61, 0x55, 0xc8, 0x2c, 0x56, 0x01,
	0xc9, 0x0c, 0xc1, 0x37, 0x08, 0x6e, 0x25, 0x36, 0x59, 0x6d, 0x6c, 0x96, 0x49, 0x32, 0xce, 0x5e,
	0x70, 0xfe, 0x90, 0x4c, 0x02, 0xbe, 0xa1, 0xa5, 0xa5, 0x55, 0x90, 0x94, 0x79, 0x04, 0x2b, 0xc9,
	0xac, 0x62, 0x6b, 0x77, 0xcf, 0x8f, 0x73, 0x7e, 0x70, 0x71, 0xcc, 0xad, 0x65, 0x8d, 0xa8, 0x3b,
	0x28, 0x05, 0x53, 0x1c, 0x34, 0x6b, 0x2d, 0xe3, 0x16, 0x58, 0x97, 0xb2, 0x06, 0xa4, 0xde, 0xb7,
	0x96, 0xda, 0xda, 0x38, 0x13, 0x9e, 0xf2, 0xba, 0x3c, 0x40, 0x27, 0xe8, 0x77, 0x9b, 0xb6, 0x96,
	0x76, 0xe9, 0x79, 0x22, 0xc1, 0x1d, 0xda, 0x82, 0x96, 0x46, 0x31, 0x69, 0xa4, 0x61, 0xbe, 0x5d,
	0xb4, 0x4f, 0x3e, 0xf9, 0xe0, 0xaf, 0xa3, 0xe5, 0xf2, 0x1d, 0xe1, 0xc5, 0x0e, 0xa4, 0x7e, 0xb0,
	0xe1, 0x19, 0x0e, 0xee, 0xa0, 0x5a, 0xa3, 0x0d, 0x8a, 0x83, 0x6c, 0x39, 0xf6, 0x24, 0x50, 0x50,
	0xe5, 0x13, 0x0b, 0x09, 0x9e, 0xef, 0x1c, 0x77, 0x62, 0x3d, 0xdb, 0xa0, 0x78, 0x9e, 0xad, 0xc6,
	0x9e, 0xcc, 0x9b, 0x09, 0xe4, 0x47, 0x1e, 0xde, 0xe2, 0x55, 0x26, 0x24, 0xe8, 0x9b, 0xa9, 0x14,
	0x78, 0x43, 0x32, 0xf6, 0x04, 0x17, 0x13, 0xdc, 0x57, 0xdc, 0x89, 0xcf, 0x9e, 0x5c, 0x48, 0x93,
	0x94, 0x46, 0x29, 0xa3, 0xd9, 0x33, 0x14, 0x35, 0xaf, 0x5f, 0x98, 0x03, 0x25, 0xe8, 0x3d, 0x28,
	0x91, 0xff, 0xee, 0xc3, 0x2d, 0x5e, 0x6e, 0x75, 0xe5, 0x55, 0xff, 0xbc, 0xea, 0x6a, 0xec, 0xc9,
	0x7f, 0xa1, 0xab, 0x3f, 0x89, 0x7e, 0xb6, 0xd9, 0xc9, 0xeb, 0x10, 0xa1, 0xb7, 0x21, 0x42, 0x1f,
	0x43, 0x84, 0x1e, 0x67, 0x5d, 0x5a, 0x2c, 0xfc, 0xcf, 0xd7, 0x5f, 0x01, 0x00, 0x00, 0xff, 0xff,
	0xae, 0xdc, 0x75, 0xf6, 0x65, 0x01, 0x00, 0x00,
}
