// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: app/service/main/up/api/v1/reply.proto

package v1

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import archive_service_v1 "go-common/app/service/main/archive/api"
import _ "github.com/gogo/protobuf/gogoproto"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// NoReply 没有返回值
type NoReply struct {
}

func (m *NoReply) Reset()                    { *m = NoReply{} }
func (m *NoReply) String() string            { return proto.CompactTextString(m) }
func (*NoReply) ProtoMessage()               {}
func (*NoReply) Descriptor() ([]byte, []int) { return fileDescriptorReply, []int{0} }

// UpArcsReply 单个up主的稿件信息列表返回值
type UpArcsReply struct {
	// archives 稿件信息列表
	Archives []*archive_service_v1.Arc `protobuf:"bytes,1,rep,name=archives" json:"archives,omitempty"`
}

func (m *UpArcsReply) Reset()                    { *m = UpArcsReply{} }
func (m *UpArcsReply) String() string            { return proto.CompactTextString(m) }
func (*UpArcsReply) ProtoMessage()               {}
func (*UpArcsReply) Descriptor() ([]byte, []int) { return fileDescriptorReply, []int{1} }

func (m *UpArcsReply) GetArchives() []*archive_service_v1.Arc {
	if m != nil {
		return m.Archives
	}
	return nil
}

// UpsArcsReply 多个up主的稿件信息列表返回值
type UpsArcsReply struct {
	// archives 稿件信息列表
	Archives map[int64]*UpArcsReply `protobuf:"bytes,1,rep,name=archives" json:"archives,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *UpsArcsReply) Reset()                    { *m = UpsArcsReply{} }
func (m *UpsArcsReply) String() string            { return proto.CompactTextString(m) }
func (*UpsArcsReply) ProtoMessage()               {}
func (*UpsArcsReply) Descriptor() ([]byte, []int) { return fileDescriptorReply, []int{2} }

func (m *UpsArcsReply) GetArchives() map[int64]*UpArcsReply {
	if m != nil {
		return m.Archives
	}
	return nil
}

// UpCountReply 单个up主的稿件计数返回值
type UpCountReply struct {
	// count 稿件数量
	Count int64 `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
}

func (m *UpCountReply) Reset()                    { *m = UpCountReply{} }
func (m *UpCountReply) String() string            { return proto.CompactTextString(m) }
func (*UpCountReply) ProtoMessage()               {}
func (*UpCountReply) Descriptor() ([]byte, []int) { return fileDescriptorReply, []int{3} }

func (m *UpCountReply) GetCount() int64 {
	if m != nil {
		return m.Count
	}
	return 0
}

// UpsCountReply 多个up主的稿件计数返回值
type UpsCountReply struct {
	// count 稿件数量
	Count map[int64]int64 `protobuf:"bytes,1,rep,name=count" json:"count,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (m *UpsCountReply) Reset()                    { *m = UpsCountReply{} }
func (m *UpsCountReply) String() string            { return proto.CompactTextString(m) }
func (*UpsCountReply) ProtoMessage()               {}
func (*UpsCountReply) Descriptor() ([]byte, []int) { return fileDescriptorReply, []int{4} }

func (m *UpsCountReply) GetCount() map[int64]int64 {
	if m != nil {
		return m.Count
	}
	return nil
}

// UpAidPubTimeReply 按发布时间的单个up的稿件aid的返回值
type UpAidPubTimeReply struct {
	// archives 稿件信息列表
	Archives []*AidPubTime `protobuf:"bytes,1,rep,name=archives" json:"archives,omitempty"`
}

func (m *UpAidPubTimeReply) Reset()                    { *m = UpAidPubTimeReply{} }
func (m *UpAidPubTimeReply) String() string            { return proto.CompactTextString(m) }
func (*UpAidPubTimeReply) ProtoMessage()               {}
func (*UpAidPubTimeReply) Descriptor() ([]byte, []int) { return fileDescriptorReply, []int{5} }

func (m *UpAidPubTimeReply) GetArchives() []*AidPubTime {
	if m != nil {
		return m.Archives
	}
	return nil
}

// UpsAidPubTimeReply 按发布时间的多个up的稿件aid的返回值
type UpsAidPubTimeReply struct {
	// archives 稿件信息列表
	Archives map[int64]*UpAidPubTimeReply `protobuf:"bytes,1,rep,name=archives" json:"archives,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *UpsAidPubTimeReply) Reset()                    { *m = UpsAidPubTimeReply{} }
func (m *UpsAidPubTimeReply) String() string            { return proto.CompactTextString(m) }
func (*UpsAidPubTimeReply) ProtoMessage()               {}
func (*UpsAidPubTimeReply) Descriptor() ([]byte, []int) { return fileDescriptorReply, []int{6} }

func (m *UpsAidPubTimeReply) GetArchives() map[int64]*UpAidPubTimeReply {
	if m != nil {
		return m.Archives
	}
	return nil
}

// UpActivityListReply  up主活跃度列表信息
type UpActivityListReply struct {
	// up_activity 活跃度up主信息列表
	UpActivitys []*UpActivity `protobuf:"bytes,1,rep,name=up_activitys,json=upActivitys" json:"up_activitys,omitempty"`
	// last_id 数据最后返回的id
	LastID int64 `protobuf:"varint,2,opt,name=last_id,json=lastId,proto3" json:"last_id,omitempty"`
}

func (m *UpActivityListReply) Reset()                    { *m = UpActivityListReply{} }
func (m *UpActivityListReply) String() string            { return proto.CompactTextString(m) }
func (*UpActivityListReply) ProtoMessage()               {}
func (*UpActivityListReply) Descriptor() ([]byte, []int) { return fileDescriptorReply, []int{7} }

func (m *UpActivityListReply) GetUpActivitys() []*UpActivity {
	if m != nil {
		return m.UpActivitys
	}
	return nil
}

func (m *UpActivityListReply) GetLastID() int64 {
	if m != nil {
		return m.LastID
	}
	return 0
}

// UpGroupsReply up主特殊用户组列表
type UpGroupsReply struct {
	// up_groups up主的特殊用户组信息
	UpGroups map[int64]*UpGroup `protobuf:"bytes,1,rep,name=up_groups,json=upGroups" json:"up_groups,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *UpGroupsReply) Reset()                    { *m = UpGroupsReply{} }
func (m *UpGroupsReply) String() string            { return proto.CompactTextString(m) }
func (*UpGroupsReply) ProtoMessage()               {}
func (*UpGroupsReply) Descriptor() ([]byte, []int) { return fileDescriptorReply, []int{8} }

func (m *UpGroupsReply) GetUpGroups() map[int64]*UpGroup {
	if m != nil {
		return m.UpGroups
	}
	return nil
}

// UpSpecialReply up主特殊属性信息
type UpSpecialReply struct {
	// up_special up主的特殊属性
	UpSpecial *UpSpecial `protobuf:"bytes,1,opt,name=up_special,json=upSpecial" json:"up_special,omitempty"`
}

func (m *UpSpecialReply) Reset()                    { *m = UpSpecialReply{} }
func (m *UpSpecialReply) String() string            { return proto.CompactTextString(m) }
func (*UpSpecialReply) ProtoMessage()               {}
func (*UpSpecialReply) Descriptor() ([]byte, []int) { return fileDescriptorReply, []int{9} }

func (m *UpSpecialReply) GetUpSpecial() *UpSpecial {
	if m != nil {
		return m.UpSpecial
	}
	return nil
}

// UpsSpecialReply 多个up主特殊属性信息
type UpsSpecialReply struct {
	// up_specials 多个up主的特殊属性
	UpSpecials map[int64]*UpSpecial `protobuf:"bytes,1,rep,name=up_specials,json=upSpecials" json:"up_specials,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *UpsSpecialReply) Reset()                    { *m = UpsSpecialReply{} }
func (m *UpsSpecialReply) String() string            { return proto.CompactTextString(m) }
func (*UpsSpecialReply) ProtoMessage()               {}
func (*UpsSpecialReply) Descriptor() ([]byte, []int) { return fileDescriptorReply, []int{10} }

func (m *UpsSpecialReply) GetUpSpecials() map[int64]*UpSpecial {
	if m != nil {
		return m.UpSpecials
	}
	return nil
}

// UpGroupMidsReply 获取某个分组下的所有用户的返回值
type UpGroupMidsReply struct {
	// mids 分组下用户ID
	Mids  []int64 `protobuf:"varint,1,rep,packed,name=mids" json:"mids"`
	Total int     `protobuf:"varint,2,opt,name=total,proto3,casttype=int" json:"total"`
}

func (m *UpGroupMidsReply) Reset()                    { *m = UpGroupMidsReply{} }
func (m *UpGroupMidsReply) String() string            { return proto.CompactTextString(m) }
func (*UpGroupMidsReply) ProtoMessage()               {}
func (*UpGroupMidsReply) Descriptor() ([]byte, []int) { return fileDescriptorReply, []int{11} }

func (m *UpGroupMidsReply) GetMids() []int64 {
	if m != nil {
		return m.Mids
	}
	return nil
}

func (m *UpGroupMidsReply) GetTotal() int {
	if m != nil {
		return m.Total
	}
	return 0
}

// UpAttrReply 获取up主身份的返回值
type UpAttrReply struct {
	// is_author 是否有身份 0:无身份 1:有身份
	IsAuthor uint8 `protobuf:"varint,1,opt,name=is_author,json=isAuthor,proto3,casttype=uint8" json:"is_author"`
}

func (m *UpAttrReply) Reset()                    { *m = UpAttrReply{} }
func (m *UpAttrReply) String() string            { return proto.CompactTextString(m) }
func (*UpAttrReply) ProtoMessage()               {}
func (*UpAttrReply) Descriptor() ([]byte, []int) { return fileDescriptorReply, []int{12} }

func (m *UpAttrReply) GetIsAuthor() uint8 {
	if m != nil {
		return m.IsAuthor
	}
	return 0
}

// UpBaseStatReply 获取up主基础计数的返回值
type UpBaseStatReply struct {
	// view 播放数
	View int64 `protobuf:"varint,1,opt,name=view,proto3" json:"view"`
	// reply 评论数
	Reply int64 `protobuf:"varint,2,opt,name=reply,proto3" json:"reply"`
	// dm 弹幕数
	Dm int64 `protobuf:"varint,3,opt,name=dm,proto3" json:"dm"`
	// fans 粉丝数
	Fans int64 `protobuf:"varint,4,opt,name=fans,proto3" json:"fans"`
	// fav 收藏数
	Fav int64 `protobuf:"varint,5,opt,name=fav,proto3" json:"fav"`
	// like 点赞数
	Like int64 `protobuf:"varint,6,opt,name=like,proto3" json:"like"`
}

func (m *UpBaseStatReply) Reset()                    { *m = UpBaseStatReply{} }
func (m *UpBaseStatReply) String() string            { return proto.CompactTextString(m) }
func (*UpBaseStatReply) ProtoMessage()               {}
func (*UpBaseStatReply) Descriptor() ([]byte, []int) { return fileDescriptorReply, []int{13} }

func (m *UpBaseStatReply) GetView() int64 {
	if m != nil {
		return m.View
	}
	return 0
}

func (m *UpBaseStatReply) GetReply() int64 {
	if m != nil {
		return m.Reply
	}
	return 0
}

func (m *UpBaseStatReply) GetDm() int64 {
	if m != nil {
		return m.Dm
	}
	return 0
}

func (m *UpBaseStatReply) GetFans() int64 {
	if m != nil {
		return m.Fans
	}
	return 0
}

func (m *UpBaseStatReply) GetFav() int64 {
	if m != nil {
		return m.Fav
	}
	return 0
}

func (m *UpBaseStatReply) GetLike() int64 {
	if m != nil {
		return m.Like
	}
	return 0
}

// UpSwitchReq 获取up主关注弹窗开关的返回值
type UpSwitchReply struct {
	// state 开关状态 0-关闭 1-打开
	State uint8 `protobuf:"varint,1,opt,name=state,proto3,casttype=uint8" json:"state"`
}

func (m *UpSwitchReply) Reset()                    { *m = UpSwitchReply{} }
func (m *UpSwitchReply) String() string            { return proto.CompactTextString(m) }
func (*UpSwitchReply) ProtoMessage()               {}
func (*UpSwitchReply) Descriptor() ([]byte, []int) { return fileDescriptorReply, []int{14} }

func (m *UpSwitchReply) GetState() uint8 {
	if m != nil {
		return m.State
	}
	return 0
}

// HighAllyUpsReply 高能联盟up主map返回值
type HighAllyUpsReply struct {
	Lists map[int64]*SignUp `protobuf:"bytes,1,rep,name=lists" json:"lists,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *HighAllyUpsReply) Reset()                    { *m = HighAllyUpsReply{} }
func (m *HighAllyUpsReply) String() string            { return proto.CompactTextString(m) }
func (*HighAllyUpsReply) ProtoMessage()               {}
func (*HighAllyUpsReply) Descriptor() ([]byte, []int) { return fileDescriptorReply, []int{15} }

func (m *HighAllyUpsReply) GetLists() map[int64]*SignUp {
	if m != nil {
		return m.Lists
	}
	return nil
}

func init() {
	proto.RegisterType((*NoReply)(nil), "archive.service.up.v1.NoReply")
	proto.RegisterType((*UpArcsReply)(nil), "archive.service.up.v1.UpArcsReply")
	proto.RegisterType((*UpsArcsReply)(nil), "archive.service.up.v1.UpsArcsReply")
	proto.RegisterType((*UpCountReply)(nil), "archive.service.up.v1.UpCountReply")
	proto.RegisterType((*UpsCountReply)(nil), "archive.service.up.v1.UpsCountReply")
	proto.RegisterType((*UpAidPubTimeReply)(nil), "archive.service.up.v1.UpAidPubTimeReply")
	proto.RegisterType((*UpsAidPubTimeReply)(nil), "archive.service.up.v1.UpsAidPubTimeReply")
	proto.RegisterType((*UpActivityListReply)(nil), "archive.service.up.v1.UpActivityListReply")
	proto.RegisterType((*UpGroupsReply)(nil), "archive.service.up.v1.UpGroupsReply")
	proto.RegisterType((*UpSpecialReply)(nil), "archive.service.up.v1.UpSpecialReply")
	proto.RegisterType((*UpsSpecialReply)(nil), "archive.service.up.v1.UpsSpecialReply")
	proto.RegisterType((*UpGroupMidsReply)(nil), "archive.service.up.v1.UpGroupMidsReply")
	proto.RegisterType((*UpAttrReply)(nil), "archive.service.up.v1.UpAttrReply")
	proto.RegisterType((*UpBaseStatReply)(nil), "archive.service.up.v1.UpBaseStatReply")
	proto.RegisterType((*UpSwitchReply)(nil), "archive.service.up.v1.UpSwitchReply")
	proto.RegisterType((*HighAllyUpsReply)(nil), "archive.service.up.v1.HighAllyUpsReply")
}
func (m *NoReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NoReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *UpArcsReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpArcsReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Archives) > 0 {
		for _, msg := range m.Archives {
			dAtA[i] = 0xa
			i++
			i = encodeVarintReply(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *UpsArcsReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpsArcsReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Archives) > 0 {
		for k, _ := range m.Archives {
			dAtA[i] = 0xa
			i++
			v := m.Archives[k]
			msgSize := 0
			if v != nil {
				msgSize = v.Size()
				msgSize += 1 + sovReply(uint64(msgSize))
			}
			mapSize := 1 + sovReply(uint64(k)) + msgSize
			i = encodeVarintReply(dAtA, i, uint64(mapSize))
			dAtA[i] = 0x8
			i++
			i = encodeVarintReply(dAtA, i, uint64(k))
			if v != nil {
				dAtA[i] = 0x12
				i++
				i = encodeVarintReply(dAtA, i, uint64(v.Size()))
				n1, err := v.MarshalTo(dAtA[i:])
				if err != nil {
					return 0, err
				}
				i += n1
			}
		}
	}
	return i, nil
}

func (m *UpCountReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpCountReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Count != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintReply(dAtA, i, uint64(m.Count))
	}
	return i, nil
}

func (m *UpsCountReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpsCountReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Count) > 0 {
		for k, _ := range m.Count {
			dAtA[i] = 0xa
			i++
			v := m.Count[k]
			mapSize := 1 + sovReply(uint64(k)) + 1 + sovReply(uint64(v))
			i = encodeVarintReply(dAtA, i, uint64(mapSize))
			dAtA[i] = 0x8
			i++
			i = encodeVarintReply(dAtA, i, uint64(k))
			dAtA[i] = 0x10
			i++
			i = encodeVarintReply(dAtA, i, uint64(v))
		}
	}
	return i, nil
}

func (m *UpAidPubTimeReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpAidPubTimeReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Archives) > 0 {
		for _, msg := range m.Archives {
			dAtA[i] = 0xa
			i++
			i = encodeVarintReply(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *UpsAidPubTimeReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpsAidPubTimeReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Archives) > 0 {
		for k, _ := range m.Archives {
			dAtA[i] = 0xa
			i++
			v := m.Archives[k]
			msgSize := 0
			if v != nil {
				msgSize = v.Size()
				msgSize += 1 + sovReply(uint64(msgSize))
			}
			mapSize := 1 + sovReply(uint64(k)) + msgSize
			i = encodeVarintReply(dAtA, i, uint64(mapSize))
			dAtA[i] = 0x8
			i++
			i = encodeVarintReply(dAtA, i, uint64(k))
			if v != nil {
				dAtA[i] = 0x12
				i++
				i = encodeVarintReply(dAtA, i, uint64(v.Size()))
				n2, err := v.MarshalTo(dAtA[i:])
				if err != nil {
					return 0, err
				}
				i += n2
			}
		}
	}
	return i, nil
}

func (m *UpActivityListReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpActivityListReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.UpActivitys) > 0 {
		for _, msg := range m.UpActivitys {
			dAtA[i] = 0xa
			i++
			i = encodeVarintReply(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.LastID != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintReply(dAtA, i, uint64(m.LastID))
	}
	return i, nil
}

func (m *UpGroupsReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpGroupsReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.UpGroups) > 0 {
		for k, _ := range m.UpGroups {
			dAtA[i] = 0xa
			i++
			v := m.UpGroups[k]
			msgSize := 0
			if v != nil {
				msgSize = v.Size()
				msgSize += 1 + sovReply(uint64(msgSize))
			}
			mapSize := 1 + sovReply(uint64(k)) + msgSize
			i = encodeVarintReply(dAtA, i, uint64(mapSize))
			dAtA[i] = 0x8
			i++
			i = encodeVarintReply(dAtA, i, uint64(k))
			if v != nil {
				dAtA[i] = 0x12
				i++
				i = encodeVarintReply(dAtA, i, uint64(v.Size()))
				n3, err := v.MarshalTo(dAtA[i:])
				if err != nil {
					return 0, err
				}
				i += n3
			}
		}
	}
	return i, nil
}

func (m *UpSpecialReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpSpecialReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UpSpecial != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintReply(dAtA, i, uint64(m.UpSpecial.Size()))
		n4, err := m.UpSpecial.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	return i, nil
}

func (m *UpsSpecialReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpsSpecialReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.UpSpecials) > 0 {
		for k, _ := range m.UpSpecials {
			dAtA[i] = 0xa
			i++
			v := m.UpSpecials[k]
			msgSize := 0
			if v != nil {
				msgSize = v.Size()
				msgSize += 1 + sovReply(uint64(msgSize))
			}
			mapSize := 1 + sovReply(uint64(k)) + msgSize
			i = encodeVarintReply(dAtA, i, uint64(mapSize))
			dAtA[i] = 0x8
			i++
			i = encodeVarintReply(dAtA, i, uint64(k))
			if v != nil {
				dAtA[i] = 0x12
				i++
				i = encodeVarintReply(dAtA, i, uint64(v.Size()))
				n5, err := v.MarshalTo(dAtA[i:])
				if err != nil {
					return 0, err
				}
				i += n5
			}
		}
	}
	return i, nil
}

func (m *UpGroupMidsReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpGroupMidsReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Mids) > 0 {
		dAtA7 := make([]byte, len(m.Mids)*10)
		var j6 int
		for _, num1 := range m.Mids {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA7[j6] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j6++
			}
			dAtA7[j6] = uint8(num)
			j6++
		}
		dAtA[i] = 0xa
		i++
		i = encodeVarintReply(dAtA, i, uint64(j6))
		i += copy(dAtA[i:], dAtA7[:j6])
	}
	if m.Total != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintReply(dAtA, i, uint64(m.Total))
	}
	return i, nil
}

func (m *UpAttrReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpAttrReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.IsAuthor != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintReply(dAtA, i, uint64(m.IsAuthor))
	}
	return i, nil
}

func (m *UpBaseStatReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpBaseStatReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.View != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintReply(dAtA, i, uint64(m.View))
	}
	if m.Reply != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintReply(dAtA, i, uint64(m.Reply))
	}
	if m.Dm != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintReply(dAtA, i, uint64(m.Dm))
	}
	if m.Fans != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintReply(dAtA, i, uint64(m.Fans))
	}
	if m.Fav != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintReply(dAtA, i, uint64(m.Fav))
	}
	if m.Like != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintReply(dAtA, i, uint64(m.Like))
	}
	return i, nil
}

func (m *UpSwitchReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpSwitchReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.State != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintReply(dAtA, i, uint64(m.State))
	}
	return i, nil
}

func (m *HighAllyUpsReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HighAllyUpsReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Lists) > 0 {
		for k, _ := range m.Lists {
			dAtA[i] = 0xa
			i++
			v := m.Lists[k]
			msgSize := 0
			if v != nil {
				msgSize = v.Size()
				msgSize += 1 + sovReply(uint64(msgSize))
			}
			mapSize := 1 + sovReply(uint64(k)) + msgSize
			i = encodeVarintReply(dAtA, i, uint64(mapSize))
			dAtA[i] = 0x8
			i++
			i = encodeVarintReply(dAtA, i, uint64(k))
			if v != nil {
				dAtA[i] = 0x12
				i++
				i = encodeVarintReply(dAtA, i, uint64(v.Size()))
				n8, err := v.MarshalTo(dAtA[i:])
				if err != nil {
					return 0, err
				}
				i += n8
			}
		}
	}
	return i, nil
}

func encodeVarintReply(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *NoReply) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *UpArcsReply) Size() (n int) {
	var l int
	_ = l
	if len(m.Archives) > 0 {
		for _, e := range m.Archives {
			l = e.Size()
			n += 1 + l + sovReply(uint64(l))
		}
	}
	return n
}

func (m *UpsArcsReply) Size() (n int) {
	var l int
	_ = l
	if len(m.Archives) > 0 {
		for k, v := range m.Archives {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovReply(uint64(l))
			}
			mapEntrySize := 1 + sovReply(uint64(k)) + l
			n += mapEntrySize + 1 + sovReply(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *UpCountReply) Size() (n int) {
	var l int
	_ = l
	if m.Count != 0 {
		n += 1 + sovReply(uint64(m.Count))
	}
	return n
}

func (m *UpsCountReply) Size() (n int) {
	var l int
	_ = l
	if len(m.Count) > 0 {
		for k, v := range m.Count {
			_ = k
			_ = v
			mapEntrySize := 1 + sovReply(uint64(k)) + 1 + sovReply(uint64(v))
			n += mapEntrySize + 1 + sovReply(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *UpAidPubTimeReply) Size() (n int) {
	var l int
	_ = l
	if len(m.Archives) > 0 {
		for _, e := range m.Archives {
			l = e.Size()
			n += 1 + l + sovReply(uint64(l))
		}
	}
	return n
}

func (m *UpsAidPubTimeReply) Size() (n int) {
	var l int
	_ = l
	if len(m.Archives) > 0 {
		for k, v := range m.Archives {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovReply(uint64(l))
			}
			mapEntrySize := 1 + sovReply(uint64(k)) + l
			n += mapEntrySize + 1 + sovReply(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *UpActivityListReply) Size() (n int) {
	var l int
	_ = l
	if len(m.UpActivitys) > 0 {
		for _, e := range m.UpActivitys {
			l = e.Size()
			n += 1 + l + sovReply(uint64(l))
		}
	}
	if m.LastID != 0 {
		n += 1 + sovReply(uint64(m.LastID))
	}
	return n
}

func (m *UpGroupsReply) Size() (n int) {
	var l int
	_ = l
	if len(m.UpGroups) > 0 {
		for k, v := range m.UpGroups {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovReply(uint64(l))
			}
			mapEntrySize := 1 + sovReply(uint64(k)) + l
			n += mapEntrySize + 1 + sovReply(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *UpSpecialReply) Size() (n int) {
	var l int
	_ = l
	if m.UpSpecial != nil {
		l = m.UpSpecial.Size()
		n += 1 + l + sovReply(uint64(l))
	}
	return n
}

func (m *UpsSpecialReply) Size() (n int) {
	var l int
	_ = l
	if len(m.UpSpecials) > 0 {
		for k, v := range m.UpSpecials {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovReply(uint64(l))
			}
			mapEntrySize := 1 + sovReply(uint64(k)) + l
			n += mapEntrySize + 1 + sovReply(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *UpGroupMidsReply) Size() (n int) {
	var l int
	_ = l
	if len(m.Mids) > 0 {
		l = 0
		for _, e := range m.Mids {
			l += sovReply(uint64(e))
		}
		n += 1 + sovReply(uint64(l)) + l
	}
	if m.Total != 0 {
		n += 1 + sovReply(uint64(m.Total))
	}
	return n
}

func (m *UpAttrReply) Size() (n int) {
	var l int
	_ = l
	if m.IsAuthor != 0 {
		n += 1 + sovReply(uint64(m.IsAuthor))
	}
	return n
}

func (m *UpBaseStatReply) Size() (n int) {
	var l int
	_ = l
	if m.View != 0 {
		n += 1 + sovReply(uint64(m.View))
	}
	if m.Reply != 0 {
		n += 1 + sovReply(uint64(m.Reply))
	}
	if m.Dm != 0 {
		n += 1 + sovReply(uint64(m.Dm))
	}
	if m.Fans != 0 {
		n += 1 + sovReply(uint64(m.Fans))
	}
	if m.Fav != 0 {
		n += 1 + sovReply(uint64(m.Fav))
	}
	if m.Like != 0 {
		n += 1 + sovReply(uint64(m.Like))
	}
	return n
}

func (m *UpSwitchReply) Size() (n int) {
	var l int
	_ = l
	if m.State != 0 {
		n += 1 + sovReply(uint64(m.State))
	}
	return n
}

func (m *HighAllyUpsReply) Size() (n int) {
	var l int
	_ = l
	if len(m.Lists) > 0 {
		for k, v := range m.Lists {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovReply(uint64(l))
			}
			mapEntrySize := 1 + sovReply(uint64(k)) + l
			n += mapEntrySize + 1 + sovReply(uint64(mapEntrySize))
		}
	}
	return n
}

func sovReply(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozReply(x uint64) (n int) {
	return sovReply(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *NoReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowReply
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NoReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NoReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipReply(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthReply
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpArcsReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowReply
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpArcsReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpArcsReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Archives", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReply
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthReply
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Archives = append(m.Archives, &archive_service_v1.Arc{})
			if err := m.Archives[len(m.Archives)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipReply(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthReply
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpsArcsReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowReply
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpsArcsReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpsArcsReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Archives", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReply
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthReply
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Archives == nil {
				m.Archives = make(map[int64]*UpArcsReply)
			}
			var mapkey int64
			var mapvalue *UpArcsReply
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowReply
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowReply
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= (int64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowReply
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= (int(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthReply
					}
					postmsgIndex := iNdEx + mapmsglen
					if mapmsglen < 0 {
						return ErrInvalidLengthReply
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &UpArcsReply{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipReply(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthReply
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Archives[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipReply(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthReply
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpCountReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowReply
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpCountReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpCountReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReply
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipReply(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthReply
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpsCountReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowReply
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpsCountReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpsCountReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReply
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthReply
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Count == nil {
				m.Count = make(map[int64]int64)
			}
			var mapkey int64
			var mapvalue int64
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowReply
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowReply
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= (int64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowReply
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvalue |= (int64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipReply(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthReply
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Count[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipReply(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthReply
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpAidPubTimeReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowReply
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpAidPubTimeReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpAidPubTimeReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Archives", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReply
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthReply
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Archives = append(m.Archives, &AidPubTime{})
			if err := m.Archives[len(m.Archives)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipReply(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthReply
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpsAidPubTimeReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowReply
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpsAidPubTimeReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpsAidPubTimeReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Archives", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReply
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthReply
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Archives == nil {
				m.Archives = make(map[int64]*UpAidPubTimeReply)
			}
			var mapkey int64
			var mapvalue *UpAidPubTimeReply
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowReply
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowReply
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= (int64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowReply
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= (int(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthReply
					}
					postmsgIndex := iNdEx + mapmsglen
					if mapmsglen < 0 {
						return ErrInvalidLengthReply
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &UpAidPubTimeReply{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipReply(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthReply
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Archives[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipReply(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthReply
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpActivityListReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowReply
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpActivityListReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpActivityListReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpActivitys", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReply
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthReply
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UpActivitys = append(m.UpActivitys, &UpActivity{})
			if err := m.UpActivitys[len(m.UpActivitys)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastID", wireType)
			}
			m.LastID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReply
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastID |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipReply(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthReply
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpGroupsReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowReply
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpGroupsReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpGroupsReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpGroups", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReply
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthReply
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UpGroups == nil {
				m.UpGroups = make(map[int64]*UpGroup)
			}
			var mapkey int64
			var mapvalue *UpGroup
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowReply
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowReply
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= (int64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowReply
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= (int(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthReply
					}
					postmsgIndex := iNdEx + mapmsglen
					if mapmsglen < 0 {
						return ErrInvalidLengthReply
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &UpGroup{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipReply(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthReply
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.UpGroups[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipReply(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthReply
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpSpecialReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowReply
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpSpecialReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpSpecialReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpSpecial", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReply
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthReply
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UpSpecial == nil {
				m.UpSpecial = &UpSpecial{}
			}
			if err := m.UpSpecial.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipReply(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthReply
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpsSpecialReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowReply
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpsSpecialReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpsSpecialReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpSpecials", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReply
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthReply
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UpSpecials == nil {
				m.UpSpecials = make(map[int64]*UpSpecial)
			}
			var mapkey int64
			var mapvalue *UpSpecial
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowReply
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowReply
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= (int64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowReply
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= (int(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthReply
					}
					postmsgIndex := iNdEx + mapmsglen
					if mapmsglen < 0 {
						return ErrInvalidLengthReply
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &UpSpecial{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipReply(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthReply
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.UpSpecials[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipReply(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthReply
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpGroupMidsReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowReply
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpGroupMidsReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpGroupMidsReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowReply
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Mids = append(m.Mids, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowReply
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthReply
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowReply
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Mids = append(m.Mids, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Mids", wireType)
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Total", wireType)
			}
			m.Total = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReply
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Total |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipReply(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthReply
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpAttrReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowReply
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpAttrReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpAttrReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsAuthor", wireType)
			}
			m.IsAuthor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReply
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IsAuthor |= (uint8(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipReply(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthReply
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpBaseStatReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowReply
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpBaseStatReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpBaseStatReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field View", wireType)
			}
			m.View = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReply
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.View |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reply", wireType)
			}
			m.Reply = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReply
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Reply |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dm", wireType)
			}
			m.Dm = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReply
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Dm |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fans", wireType)
			}
			m.Fans = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReply
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Fans |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fav", wireType)
			}
			m.Fav = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReply
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Fav |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Like", wireType)
			}
			m.Like = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReply
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Like |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipReply(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthReply
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpSwitchReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowReply
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpSwitchReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpSwitchReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReply
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= (uint8(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipReply(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthReply
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HighAllyUpsReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowReply
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HighAllyUpsReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HighAllyUpsReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lists", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReply
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthReply
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Lists == nil {
				m.Lists = make(map[int64]*SignUp)
			}
			var mapkey int64
			var mapvalue *SignUp
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowReply
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowReply
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= (int64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowReply
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= (int(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthReply
					}
					postmsgIndex := iNdEx + mapmsglen
					if mapmsglen < 0 {
						return ErrInvalidLengthReply
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &SignUp{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipReply(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthReply
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Lists[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipReply(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthReply
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipReply(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowReply
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowReply
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowReply
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthReply
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowReply
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipReply(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthReply = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowReply   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("app/service/main/up/api/v1/reply.proto", fileDescriptorReply) }

var fileDescriptorReply = []byte{
	// 881 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x55, 0x4f, 0x8f, 0xdb, 0x44,
	0x14, 0x97, 0x93, 0x3a, 0xbb, 0x79, 0x69, 0x69, 0x30, 0xa5, 0x84, 0x08, 0xd6, 0x8b, 0x8b, 0xaa,
	0x5c, 0xb0, 0x95, 0x5d, 0x54, 0x16, 0x24, 0x40, 0x09, 0xad, 0x68, 0xa5, 0x96, 0x3f, 0x0e, 0x56,
	0x11, 0x1c, 0xa2, 0x59, 0xc7, 0x9b, 0x8c, 0xea, 0xc4, 0x23, 0xcf, 0x8c, 0xab, 0xdc, 0xf8, 0x08,
	0x7c, 0x19, 0x8e, 0xc0, 0x15, 0x89, 0x4b, 0x3f, 0x41, 0x84, 0xf6, 0x98, 0x8f, 0xd0, 0x13, 0x9a,
	0x3f, 0x89, 0xed, 0xdd, 0xf5, 0xa6, 0x97, 0xc9, 0xbc, 0x37, 0xef, 0xf7, 0x7b, 0xef, 0xfd, 0xde,
	0x8c, 0x03, 0xf7, 0x11, 0x21, 0x1e, 0x8d, 0xd2, 0x0c, 0x87, 0x91, 0x37, 0x47, 0x78, 0xe1, 0x71,
	0xe2, 0x21, 0x82, 0xbd, 0xac, 0xef, 0xa5, 0x11, 0x89, 0x97, 0x2e, 0x49, 0x13, 0x96, 0x58, 0xef,
	0xa2, 0x34, 0x9c, 0xe1, 0x2c, 0x72, 0x75, 0xac, 0xcb, 0x89, 0x9b, 0xf5, 0xbb, 0x97, 0xe1, 0x3a,
	0x4e, 0x72, 0x20, 0x82, 0x15, 0xbc, 0xdb, 0xbb, 0x26, 0xcd, 0x86, 0x59, 0x45, 0xde, 0xbb, 0x26,
	0x92, 0x93, 0x37, 0xa0, 0xa3, 0x78, 0xba, 0x18, 0x6f, 0x23, 0x3f, 0x99, 0x62, 0x36, 0xe3, 0xa7,
	0x6e, 0x98, 0xcc, 0xbd, 0x69, 0x32, 0x4d, 0x3c, 0xe9, 0x3e, 0xe5, 0x67, 0xd2, 0x92, 0x86, 0xdc,
	0xa9, 0x70, 0xa7, 0x09, 0x7b, 0xdf, 0x25, 0xbe, 0xe8, 0xdb, 0x19, 0x42, 0x2b, 0x20, 0x83, 0x34,
	0xa4, 0xd2, 0xb4, 0x8e, 0x61, 0x5f, 0x17, 0x4a, 0x3b, 0xc6, 0x61, 0xbd, 0xd7, 0x3a, 0x7a, 0xcf,
	0xbd, 0xa8, 0x49, 0xd6, 0x77, 0x07, 0x69, 0xe8, 0x6f, 0x03, 0x9d, 0xbf, 0x0c, 0xb8, 0x19, 0x10,
	0x9a, 0xb3, 0x3c, 0xbb, 0xc4, 0xd2, 0x77, 0xaf, 0x54, 0xd6, 0x2d, 0xc2, 0x04, 0xab, 0xc4, 0x3c,
	0x5a, 0xb0, 0x74, 0x99, 0xf3, 0x77, 0xc7, 0x70, 0xab, 0x74, 0x64, 0xb5, 0xa1, 0xfe, 0x22, 0x5a,
	0x76, 0x8c, 0x43, 0xa3, 0x57, 0xf7, 0xc5, 0xd6, 0x3a, 0x01, 0x33, 0x43, 0x31, 0x8f, 0x3a, 0xb5,
	0x43, 0xa3, 0xd7, 0x3a, 0x72, 0x2a, 0xd3, 0x6d, 0xb3, 0xf9, 0x0a, 0xf0, 0x45, 0xed, 0xc4, 0x70,
	0x3e, 0x16, 0xf5, 0x7f, 0x93, 0xf0, 0x05, 0x53, 0xf5, 0xdf, 0x01, 0x33, 0x14, 0x96, 0xce, 0xa0,
	0x0c, 0xe7, 0x77, 0x03, 0x6e, 0x05, 0x84, 0x16, 0xe2, 0x1e, 0xe5, 0x71, 0xa2, 0x49, 0xaf, 0xba,
	0xc9, 0x1c, 0xe4, 0xca, 0xad, 0x6a, 0x51, 0xa1, 0xbb, 0x27, 0x00, 0xb9, 0xf3, 0x8a, 0xe6, 0xee,
	0x14, 0x9b, 0xab, 0x17, 0x0b, 0xf7, 0xe1, 0xed, 0x80, 0x0c, 0xf0, 0xe4, 0x07, 0x7e, 0xfa, 0x13,
	0x9e, 0x47, 0xaa, 0xaa, 0x2f, 0x2f, 0xa9, 0xff, 0x51, 0x45, 0x61, 0x05, 0x64, 0x3e, 0xcd, 0x57,
	0x06, 0x58, 0x62, 0x2c, 0x17, 0x58, 0x47, 0x97, 0x58, 0x3f, 0xbb, 0x66, 0xa6, 0x65, 0x70, 0xe5,
	0x64, 0xa3, 0xdd, 0x93, 0xfd, 0xaa, 0x3c, 0xd9, 0x5e, 0xf5, 0x64, 0xcb, 0x39, 0x8b, 0x32, 0xfd,
	0x66, 0xc0, 0x3b, 0x01, 0x19, 0x84, 0x0c, 0x67, 0x98, 0x2d, 0x9f, 0x62, 0xaa, 0xe7, 0xf7, 0x10,
	0x6e, 0x72, 0x32, 0x46, 0xda, 0xbf, 0x4b, 0xad, 0x9c, 0xc1, 0x6f, 0xf1, 0xed, 0x9e, 0x5a, 0xf7,
	0x60, 0x2f, 0x46, 0x94, 0x8d, 0xf1, 0x44, 0x0d, 0x68, 0x08, 0xe7, 0x2b, 0xbb, 0xf1, 0x14, 0x51,
	0xf6, 0xe4, 0xa1, 0xdf, 0x10, 0x47, 0x4f, 0x26, 0xce, 0x9f, 0xf2, 0xf2, 0x7c, 0x9b, 0x26, 0x9c,
	0xe8, 0x47, 0xf2, 0x3d, 0x34, 0x39, 0x19, 0x4f, 0xa5, 0x47, 0x67, 0x3e, 0xaa, 0xcc, 0x5c, 0x00,
	0x6e, 0x2d, 0x2d, 0x26, 0xd7, 0x66, 0xf7, 0xd7, 0x3c, 0x43, 0x95, 0x98, 0x9f, 0x96, 0xc5, 0x3c,
	0xb8, 0x3e, 0x5f, 0x51, 0xc2, 0x1f, 0xe1, 0xad, 0x80, 0x8c, 0x48, 0x14, 0x62, 0x14, 0xab, 0xfa,
	0xbf, 0x06, 0xe0, 0x64, 0x4c, 0x95, 0x4b, 0x26, 0x69, 0x1d, 0x1d, 0x56, 0x12, 0x6e, 0xa0, 0x4d,
	0xbe, 0xd9, 0x3a, 0xff, 0x1a, 0x70, 0x3b, 0x20, 0xb4, 0x44, 0xfa, 0x1c, 0x5a, 0x39, 0xe9, 0x46,
	0x96, 0x07, 0xd5, 0x17, 0xad, 0x08, 0xce, 0xb3, 0x68, 0x69, 0x60, 0x9b, 0x4b, 0x7c, 0x43, 0x6e,
	0x5f, 0x38, 0xbe, 0x42, 0x9e, 0x07, 0x65, 0x79, 0x76, 0x77, 0x53, 0x10, 0xe8, 0x67, 0x68, 0x6b,
	0xd9, 0x9e, 0xe1, 0x89, 0x1e, 0xf1, 0x07, 0x70, 0x63, 0x8e, 0x27, 0xaa, 0x8d, 0xfa, 0x70, 0x7f,
	0xbd, 0xb2, 0xa5, 0xed, 0xcb, 0xd5, 0xba, 0x0f, 0x26, 0x4b, 0x18, 0x8a, 0x65, 0x36, 0x73, 0xd8,
	0x5e, 0xaf, 0x6c, 0xe5, 0x78, 0xbd, 0xb2, 0xeb, 0x78, 0xc1, 0x7c, 0x65, 0xe9, 0x4f, 0x34, 0x63,
	0xe9, 0xe6, 0x13, 0xdd, 0xc4, 0x74, 0x8c, 0x38, 0x9b, 0x25, 0xa9, 0x2c, 0xde, 0x1c, 0xde, 0x5d,
	0xaf, 0xec, 0xdc, 0xf9, 0x7a, 0x65, 0x9b, 0x1c, 0x2f, 0xd8, 0x89, 0xbf, 0x8f, 0xe9, 0x40, 0xba,
	0x9c, 0xbf, 0xa5, 0xd6, 0x43, 0x44, 0xa3, 0x11, 0x43, 0x6c, 0x5b, 0x5d, 0x86, 0xa3, 0x97, 0x4a,
	0x00, 0x55, 0x9d, 0xb0, 0x7d, 0xb9, 0x5a, 0x36, 0x98, 0xf2, 0x9f, 0x51, 0xdf, 0xe9, 0xa6, 0xa8,
	0x2e, 0x55, 0x0f, 0x4b, 0xfe, 0x58, 0x77, 0xa1, 0x36, 0x99, 0x77, 0xea, 0xf2, 0xb4, 0xb1, 0x5e,
	0xd9, 0xb5, 0xc9, 0xdc, 0xaf, 0x4d, 0xe6, 0x82, 0xf6, 0x0c, 0x2d, 0x68, 0xe7, 0x46, 0x4e, 0x2b,
	0x6c, 0x5f, 0xae, 0xd6, 0xfb, 0x50, 0x3f, 0x43, 0x59, 0xc7, 0x94, 0x87, 0x7b, 0xeb, 0x95, 0x2d,
	0x4c, 0x5f, 0x2c, 0x02, 0x18, 0xe3, 0x17, 0x51, 0xa7, 0x91, 0x03, 0x85, 0xed, 0xcb, 0xd5, 0xf9,
	0x5c, 0xdc, 0xee, 0xd1, 0x4b, 0xcc, 0xc2, 0x99, 0x2a, 0xbf, 0x07, 0x26, 0x65, 0x88, 0x45, 0x5a,
	0x03, 0x4b, 0x14, 0x28, 0x1d, 0x79, 0xff, 0xca, 0x76, 0xfe, 0x30, 0xa0, 0xfd, 0x18, 0x4f, 0x67,
	0x83, 0x38, 0x5e, 0x06, 0x9b, 0xe7, 0xf7, 0x18, 0xcc, 0x18, 0x53, 0xb6, 0xeb, 0xe9, 0x5d, 0xc4,
	0xb9, 0xe2, 0xeb, 0xa1, 0xef, 0x97, 0x22, 0xe8, 0x3e, 0x07, 0xc8, 0x9d, 0x57, 0xdc, 0xaa, 0xe3,
	0xf2, 0xad, 0xfa, 0xb0, 0x22, 0xd3, 0x08, 0x4f, 0x17, 0x41, 0xf1, 0xcd, 0x0d, 0xdb, 0xff, 0x9c,
	0x1f, 0x18, 0xaf, 0xce, 0x0f, 0x8c, 0xff, 0xce, 0x0f, 0x8c, 0x5f, 0x6a, 0x59, 0xff, 0xb4, 0x21,
	0xff, 0xbf, 0x8f, 0xff, 0x0f, 0x00, 0x00, 0xff, 0xff, 0x15, 0x97, 0x9f, 0xa1, 0xd0, 0x08, 0x00,
	0x00,
}
