// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: app/service/main/up/api/v1/request.proto

package v1

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import go_common_library_time "go-common/library/time"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// NoArgReq 没有请求参数
type NoArgReq struct {
}

func (m *NoArgReq) Reset()                    { *m = NoArgReq{} }
func (m *NoArgReq) String() string            { return proto.CompactTextString(m) }
func (*NoArgReq) ProtoMessage()               {}
func (*NoArgReq) Descriptor() ([]byte, []int) { return fileDescriptorRequest, []int{0} }

// UpArcsReq 单个up主的稿件列表信息请求参数
type UpArcsReq struct {
	// mid 用户id 必传
	Mid int64 `protobuf:"varint,1,opt,name=mid,proto3" json:"mid,omitempty" form:"mid" validate:"min=1,required"`
	// pn 第几页 非必传
	Pn int32 `protobuf:"varint,2,opt,name=pn,proto3" json:"pn,omitempty" form:"pn" default:"1"`
	// ps 分页大小 非必传
	Ps int32 `protobuf:"varint,3,opt,name=ps,proto3" json:"ps,omitempty" form:"ps" default:"20"`
}

func (m *UpArcsReq) Reset()                    { *m = UpArcsReq{} }
func (m *UpArcsReq) String() string            { return proto.CompactTextString(m) }
func (*UpArcsReq) ProtoMessage()               {}
func (*UpArcsReq) Descriptor() ([]byte, []int) { return fileDescriptorRequest, []int{1} }

func (m *UpArcsReq) GetMid() int64 {
	if m != nil {
		return m.Mid
	}
	return 0
}

func (m *UpArcsReq) GetPn() int32 {
	if m != nil {
		return m.Pn
	}
	return 0
}

func (m *UpArcsReq) GetPs() int32 {
	if m != nil {
		return m.Ps
	}
	return 0
}

// UpsArcsReq 多个up主的稿件列表信息请求参数
type UpsArcsReq struct {
	// mids 多个用户id 必传 最大100个
	Mids []int64 `protobuf:"varint,1,rep,packed,name=mids" json:"mids,omitempty" form:"mids,split" validate:"min=1,max=100,required"`
	// pn 第几页 非必传
	Pn int32 `protobuf:"varint,2,opt,name=pn,proto3" json:"pn,omitempty" form:"pn" default:"1"`
	// ps 分页大小 非必传
	Ps int32 `protobuf:"varint,3,opt,name=ps,proto3" json:"ps,omitempty" form:"ps" default:"20"`
}

func (m *UpsArcsReq) Reset()                    { *m = UpsArcsReq{} }
func (m *UpsArcsReq) String() string            { return proto.CompactTextString(m) }
func (*UpsArcsReq) ProtoMessage()               {}
func (*UpsArcsReq) Descriptor() ([]byte, []int) { return fileDescriptorRequest, []int{2} }

func (m *UpsArcsReq) GetMids() []int64 {
	if m != nil {
		return m.Mids
	}
	return nil
}

func (m *UpsArcsReq) GetPn() int32 {
	if m != nil {
		return m.Pn
	}
	return 0
}

func (m *UpsArcsReq) GetPs() int32 {
	if m != nil {
		return m.Ps
	}
	return 0
}

// UpCountReq 单个up主的稿件计数的请求参数
type UpCountReq struct {
	// mid 用户id 必传
	Mid int64 `protobuf:"varint,1,opt,name=mid,proto3" json:"mid,omitempty" form:"mid" validate:"min=1,required"`
}

func (m *UpCountReq) Reset()                    { *m = UpCountReq{} }
func (m *UpCountReq) String() string            { return proto.CompactTextString(m) }
func (*UpCountReq) ProtoMessage()               {}
func (*UpCountReq) Descriptor() ([]byte, []int) { return fileDescriptorRequest, []int{3} }

func (m *UpCountReq) GetMid() int64 {
	if m != nil {
		return m.Mid
	}
	return 0
}

// UpsCountReq 多个up主的稿件计数的请求参数
type UpsCountReq struct {
	// mids 多个用户id 必传 最大100个
	Mids []int64 `protobuf:"varint,1,rep,packed,name=mids" json:"mids,omitempty" form:"mids,split" validate:"min=1,max=100,required"`
}

func (m *UpsCountReq) Reset()                    { *m = UpsCountReq{} }
func (m *UpsCountReq) String() string            { return proto.CompactTextString(m) }
func (*UpsCountReq) ProtoMessage()               {}
func (*UpsCountReq) Descriptor() ([]byte, []int) { return fileDescriptorRequest, []int{4} }

func (m *UpsCountReq) GetMids() []int64 {
	if m != nil {
		return m.Mids
	}
	return nil
}

// UpCacheReq up主的cache更新的请求参数
type UpCacheReq struct {
	// mid 用户id 必传
	Mid int64 `protobuf:"varint,1,opt,name=mid,proto3" json:"mid,omitempty" form:"mid" validate:"required"`
	// aid 稿件id 必传
	Aid int64 `protobuf:"varint,2,opt,name=aid,proto3" json:"aid,omitempty" form:"aid" validate:"required"`
}

func (m *UpCacheReq) Reset()                    { *m = UpCacheReq{} }
func (m *UpCacheReq) String() string            { return proto.CompactTextString(m) }
func (*UpCacheReq) ProtoMessage()               {}
func (*UpCacheReq) Descriptor() ([]byte, []int) { return fileDescriptorRequest, []int{5} }

func (m *UpCacheReq) GetMid() int64 {
	if m != nil {
		return m.Mid
	}
	return 0
}

func (m *UpCacheReq) GetAid() int64 {
	if m != nil {
		return m.Aid
	}
	return 0
}

// UpListByLastIDReq 获取up主活跃度信息通过最后id获取
type UpListByLastIDReq struct {
	// LastID 获取的数据最后id
	LastID int64 `protobuf:"varint,1,opt,name=last_id,json=lastId,proto3" json:"last_id,omitempty" form:"last_id" validate:"min=0"`
	// 获取数量 最大1000个
	Ps int `protobuf:"varint,2,opt,name=ps,proto3,casttype=int" json:"ps,omitempty" form:"ps" validate:"min=1,max=1000" default:"100"`
}

func (m *UpListByLastIDReq) Reset()                    { *m = UpListByLastIDReq{} }
func (m *UpListByLastIDReq) String() string            { return proto.CompactTextString(m) }
func (*UpListByLastIDReq) ProtoMessage()               {}
func (*UpListByLastIDReq) Descriptor() ([]byte, []int) { return fileDescriptorRequest, []int{6} }

func (m *UpListByLastIDReq) GetLastID() int64 {
	if m != nil {
		return m.LastID
	}
	return 0
}

func (m *UpListByLastIDReq) GetPs() int {
	if m != nil {
		return m.Ps
	}
	return 0
}

// UpSpecialReq up主特殊用户属性请求参数
type UpSpecialReq struct {
	// mid 用户id 必传
	Mid int64 `protobuf:"varint,1,opt,name=mid,proto3" json:"mid,omitempty" form:"mid" validate:"min=1,required"`
}

func (m *UpSpecialReq) Reset()                    { *m = UpSpecialReq{} }
func (m *UpSpecialReq) String() string            { return proto.CompactTextString(m) }
func (*UpSpecialReq) ProtoMessage()               {}
func (*UpSpecialReq) Descriptor() ([]byte, []int) { return fileDescriptorRequest, []int{7} }

func (m *UpSpecialReq) GetMid() int64 {
	if m != nil {
		return m.Mid
	}
	return 0
}

// UpsSpecialReq 多个up主特殊用户属性请求参数
type UpsSpecialReq struct {
	// mids 多个用户id 必传 最大100个
	Mids []int64 `protobuf:"varint,1,rep,packed,name=mids" json:"mids,omitempty" form:"mids,split" validate:"min=1,max=100,required"`
}

func (m *UpsSpecialReq) Reset()                    { *m = UpsSpecialReq{} }
func (m *UpsSpecialReq) String() string            { return proto.CompactTextString(m) }
func (*UpsSpecialReq) ProtoMessage()               {}
func (*UpsSpecialReq) Descriptor() ([]byte, []int) { return fileDescriptorRequest, []int{8} }

func (m *UpsSpecialReq) GetMids() []int64 {
	if m != nil {
		return m.Mids
	}
	return nil
}

// UpGroupMidsReq 获取某个分组下的所有用户的请求参数
type UpGroupMidsReq struct {
	// GroupID 分组ID
	GroupID int64 `protobuf:"varint,1,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty" form:"group_id" validate:"min=1,required"`
	// pn 第几页 非必传
	Pn int `protobuf:"varint,2,opt,name=pn,proto3,casttype=int" json:"pn,omitempty" form:"pn"  validate:"min=1,max=100" default:"1"`
	// ps 分页大小 非必传
	Ps int `protobuf:"varint,3,opt,name=ps,proto3,casttype=int" json:"ps,omitempty" form:"ps" validate:"min=1,max=10000" default:"1000"`
}

func (m *UpGroupMidsReq) Reset()                    { *m = UpGroupMidsReq{} }
func (m *UpGroupMidsReq) String() string            { return proto.CompactTextString(m) }
func (*UpGroupMidsReq) ProtoMessage()               {}
func (*UpGroupMidsReq) Descriptor() ([]byte, []int) { return fileDescriptorRequest, []int{9} }

func (m *UpGroupMidsReq) GetGroupID() int64 {
	if m != nil {
		return m.GroupID
	}
	return 0
}

func (m *UpGroupMidsReq) GetPn() int {
	if m != nil {
		return m.Pn
	}
	return 0
}

func (m *UpGroupMidsReq) GetPs() int {
	if m != nil {
		return m.Ps
	}
	return 0
}

// UpAttrReq 获取up主身份属性的请求参数
type UpAttrReq struct {
	// mid 用户id 必传
	Mid int64 `protobuf:"varint,1,opt,name=mid,proto3" json:"mid,omitempty" form:"mid" validate:"min=1,required"`
	// from 0 - 稿件作者（至少有一个通过稿件）; 1 - 移动投稿作者(至少有一个稿件);
	// 2 - live(直播up主); 3 - live(直播白名单)
	From uint8 `protobuf:"varint,2,opt,name=from,proto3,casttype=uint8" json:"from,omitempty" form:"from" validate:"min=0,max=1"`
}

func (m *UpAttrReq) Reset()                    { *m = UpAttrReq{} }
func (m *UpAttrReq) String() string            { return proto.CompactTextString(m) }
func (*UpAttrReq) ProtoMessage()               {}
func (*UpAttrReq) Descriptor() ([]byte, []int) { return fileDescriptorRequest, []int{10} }

func (m *UpAttrReq) GetMid() int64 {
	if m != nil {
		return m.Mid
	}
	return 0
}

func (m *UpAttrReq) GetFrom() uint8 {
	if m != nil {
		return m.From
	}
	return 0
}

// UpStatReq 获取up计数的请求参数
type UpStatReq struct {
	// mid 用户id 必传
	Mid int64 `protobuf:"varint,1,opt,name=mid,proto3" json:"mid,omitempty" form:"mid" validate:"min=1,required"`
	// date 获取计数时间范围
	Date go_common_library_time.Time `protobuf:"varint,2,opt,name=date,proto3,casttype=go-common/library/time.Time" json:"date,omitempty" form:"date"`
}

func (m *UpStatReq) Reset()                    { *m = UpStatReq{} }
func (m *UpStatReq) String() string            { return proto.CompactTextString(m) }
func (*UpStatReq) ProtoMessage()               {}
func (*UpStatReq) Descriptor() ([]byte, []int) { return fileDescriptorRequest, []int{11} }

func (m *UpStatReq) GetMid() int64 {
	if m != nil {
		return m.Mid
	}
	return 0
}

func (m *UpStatReq) GetDate() go_common_library_time.Time {
	if m != nil {
		return m.Date
	}
	return 0
}

// UpSwitchReq 获取up主关注弹窗开关的请求参数
type UpSwitchReq struct {
	// mid 用户id 必传
	Mid int64 `protobuf:"varint,1,opt,name=mid,proto3" json:"mid,omitempty" form:"mid" validate:"min=1,required"`
	// from 业务来源 0-播放器关注开关 1-up主荣誉周报是否退订
	From uint8 `protobuf:"varint,2,opt,name=from,proto3,casttype=uint8" json:"from,omitempty" form:"from"`
	// state 开关状态 0-关闭 1-打开
	State uint8 `protobuf:"varint,3,opt,name=state,proto3,casttype=uint8" json:"state,omitempty" form:"state" validate:"min=0,max=1"`
}

func (m *UpSwitchReq) Reset()                    { *m = UpSwitchReq{} }
func (m *UpSwitchReq) String() string            { return proto.CompactTextString(m) }
func (*UpSwitchReq) ProtoMessage()               {}
func (*UpSwitchReq) Descriptor() ([]byte, []int) { return fileDescriptorRequest, []int{12} }

func (m *UpSwitchReq) GetMid() int64 {
	if m != nil {
		return m.Mid
	}
	return 0
}

func (m *UpSwitchReq) GetFrom() uint8 {
	if m != nil {
		return m.From
	}
	return 0
}

func (m *UpSwitchReq) GetState() uint8 {
	if m != nil {
		return m.State
	}
	return 0
}

// HighAllyUpReq 高能联盟up主请求参数
type HighAllyUpsReq struct {
	// mids 用户id数组 必传
	Mids []int64 `protobuf:"varint,1,rep,packed,name=mids" json:"mids,omitempty" form:"mids" validate:"required"`
}

func (m *HighAllyUpsReq) Reset()                    { *m = HighAllyUpsReq{} }
func (m *HighAllyUpsReq) String() string            { return proto.CompactTextString(m) }
func (*HighAllyUpsReq) ProtoMessage()               {}
func (*HighAllyUpsReq) Descriptor() ([]byte, []int) { return fileDescriptorRequest, []int{13} }

func (m *HighAllyUpsReq) GetMids() []int64 {
	if m != nil {
		return m.Mids
	}
	return nil
}

func init() {
	proto.RegisterType((*NoArgReq)(nil), "archive.service.up.v1.NoArgReq")
	proto.RegisterType((*UpArcsReq)(nil), "archive.service.up.v1.UpArcsReq")
	proto.RegisterType((*UpsArcsReq)(nil), "archive.service.up.v1.UpsArcsReq")
	proto.RegisterType((*UpCountReq)(nil), "archive.service.up.v1.UpCountReq")
	proto.RegisterType((*UpsCountReq)(nil), "archive.service.up.v1.UpsCountReq")
	proto.RegisterType((*UpCacheReq)(nil), "archive.service.up.v1.UpCacheReq")
	proto.RegisterType((*UpListByLastIDReq)(nil), "archive.service.up.v1.UpListByLastIDReq")
	proto.RegisterType((*UpSpecialReq)(nil), "archive.service.up.v1.UpSpecialReq")
	proto.RegisterType((*UpsSpecialReq)(nil), "archive.service.up.v1.UpsSpecialReq")
	proto.RegisterType((*UpGroupMidsReq)(nil), "archive.service.up.v1.UpGroupMidsReq")
	proto.RegisterType((*UpAttrReq)(nil), "archive.service.up.v1.UpAttrReq")
	proto.RegisterType((*UpStatReq)(nil), "archive.service.up.v1.UpStatReq")
	proto.RegisterType((*UpSwitchReq)(nil), "archive.service.up.v1.UpSwitchReq")
	proto.RegisterType((*HighAllyUpsReq)(nil), "archive.service.up.v1.HighAllyUpsReq")
}
func (m *NoArgReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NoArgReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *UpArcsReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpArcsReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Mid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintRequest(dAtA, i, uint64(m.Mid))
	}
	if m.Pn != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintRequest(dAtA, i, uint64(m.Pn))
	}
	if m.Ps != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintRequest(dAtA, i, uint64(m.Ps))
	}
	return i, nil
}

func (m *UpsArcsReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpsArcsReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Mids) > 0 {
		dAtA2 := make([]byte, len(m.Mids)*10)
		var j1 int
		for _, num1 := range m.Mids {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		dAtA[i] = 0xa
		i++
		i = encodeVarintRequest(dAtA, i, uint64(j1))
		i += copy(dAtA[i:], dAtA2[:j1])
	}
	if m.Pn != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintRequest(dAtA, i, uint64(m.Pn))
	}
	if m.Ps != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintRequest(dAtA, i, uint64(m.Ps))
	}
	return i, nil
}

func (m *UpCountReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpCountReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Mid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintRequest(dAtA, i, uint64(m.Mid))
	}
	return i, nil
}

func (m *UpsCountReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpsCountReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Mids) > 0 {
		dAtA4 := make([]byte, len(m.Mids)*10)
		var j3 int
		for _, num1 := range m.Mids {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA4[j3] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j3++
			}
			dAtA4[j3] = uint8(num)
			j3++
		}
		dAtA[i] = 0xa
		i++
		i = encodeVarintRequest(dAtA, i, uint64(j3))
		i += copy(dAtA[i:], dAtA4[:j3])
	}
	return i, nil
}

func (m *UpCacheReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpCacheReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Mid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintRequest(dAtA, i, uint64(m.Mid))
	}
	if m.Aid != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintRequest(dAtA, i, uint64(m.Aid))
	}
	return i, nil
}

func (m *UpListByLastIDReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpListByLastIDReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.LastID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintRequest(dAtA, i, uint64(m.LastID))
	}
	if m.Ps != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintRequest(dAtA, i, uint64(m.Ps))
	}
	return i, nil
}

func (m *UpSpecialReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpSpecialReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Mid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintRequest(dAtA, i, uint64(m.Mid))
	}
	return i, nil
}

func (m *UpsSpecialReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpsSpecialReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Mids) > 0 {
		dAtA6 := make([]byte, len(m.Mids)*10)
		var j5 int
		for _, num1 := range m.Mids {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA6[j5] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j5++
			}
			dAtA6[j5] = uint8(num)
			j5++
		}
		dAtA[i] = 0xa
		i++
		i = encodeVarintRequest(dAtA, i, uint64(j5))
		i += copy(dAtA[i:], dAtA6[:j5])
	}
	return i, nil
}

func (m *UpGroupMidsReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpGroupMidsReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.GroupID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintRequest(dAtA, i, uint64(m.GroupID))
	}
	if m.Pn != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintRequest(dAtA, i, uint64(m.Pn))
	}
	if m.Ps != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintRequest(dAtA, i, uint64(m.Ps))
	}
	return i, nil
}

func (m *UpAttrReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpAttrReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Mid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintRequest(dAtA, i, uint64(m.Mid))
	}
	if m.From != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintRequest(dAtA, i, uint64(m.From))
	}
	return i, nil
}

func (m *UpStatReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpStatReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Mid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintRequest(dAtA, i, uint64(m.Mid))
	}
	if m.Date != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintRequest(dAtA, i, uint64(m.Date))
	}
	return i, nil
}

func (m *UpSwitchReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpSwitchReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Mid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintRequest(dAtA, i, uint64(m.Mid))
	}
	if m.From != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintRequest(dAtA, i, uint64(m.From))
	}
	if m.State != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintRequest(dAtA, i, uint64(m.State))
	}
	return i, nil
}

func (m *HighAllyUpsReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HighAllyUpsReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Mids) > 0 {
		dAtA8 := make([]byte, len(m.Mids)*10)
		var j7 int
		for _, num1 := range m.Mids {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA8[j7] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j7++
			}
			dAtA8[j7] = uint8(num)
			j7++
		}
		dAtA[i] = 0xa
		i++
		i = encodeVarintRequest(dAtA, i, uint64(j7))
		i += copy(dAtA[i:], dAtA8[:j7])
	}
	return i, nil
}

func encodeVarintRequest(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *NoArgReq) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *UpArcsReq) Size() (n int) {
	var l int
	_ = l
	if m.Mid != 0 {
		n += 1 + sovRequest(uint64(m.Mid))
	}
	if m.Pn != 0 {
		n += 1 + sovRequest(uint64(m.Pn))
	}
	if m.Ps != 0 {
		n += 1 + sovRequest(uint64(m.Ps))
	}
	return n
}

func (m *UpsArcsReq) Size() (n int) {
	var l int
	_ = l
	if len(m.Mids) > 0 {
		l = 0
		for _, e := range m.Mids {
			l += sovRequest(uint64(e))
		}
		n += 1 + sovRequest(uint64(l)) + l
	}
	if m.Pn != 0 {
		n += 1 + sovRequest(uint64(m.Pn))
	}
	if m.Ps != 0 {
		n += 1 + sovRequest(uint64(m.Ps))
	}
	return n
}

func (m *UpCountReq) Size() (n int) {
	var l int
	_ = l
	if m.Mid != 0 {
		n += 1 + sovRequest(uint64(m.Mid))
	}
	return n
}

func (m *UpsCountReq) Size() (n int) {
	var l int
	_ = l
	if len(m.Mids) > 0 {
		l = 0
		for _, e := range m.Mids {
			l += sovRequest(uint64(e))
		}
		n += 1 + sovRequest(uint64(l)) + l
	}
	return n
}

func (m *UpCacheReq) Size() (n int) {
	var l int
	_ = l
	if m.Mid != 0 {
		n += 1 + sovRequest(uint64(m.Mid))
	}
	if m.Aid != 0 {
		n += 1 + sovRequest(uint64(m.Aid))
	}
	return n
}

func (m *UpListByLastIDReq) Size() (n int) {
	var l int
	_ = l
	if m.LastID != 0 {
		n += 1 + sovRequest(uint64(m.LastID))
	}
	if m.Ps != 0 {
		n += 1 + sovRequest(uint64(m.Ps))
	}
	return n
}

func (m *UpSpecialReq) Size() (n int) {
	var l int
	_ = l
	if m.Mid != 0 {
		n += 1 + sovRequest(uint64(m.Mid))
	}
	return n
}

func (m *UpsSpecialReq) Size() (n int) {
	var l int
	_ = l
	if len(m.Mids) > 0 {
		l = 0
		for _, e := range m.Mids {
			l += sovRequest(uint64(e))
		}
		n += 1 + sovRequest(uint64(l)) + l
	}
	return n
}

func (m *UpGroupMidsReq) Size() (n int) {
	var l int
	_ = l
	if m.GroupID != 0 {
		n += 1 + sovRequest(uint64(m.GroupID))
	}
	if m.Pn != 0 {
		n += 1 + sovRequest(uint64(m.Pn))
	}
	if m.Ps != 0 {
		n += 1 + sovRequest(uint64(m.Ps))
	}
	return n
}

func (m *UpAttrReq) Size() (n int) {
	var l int
	_ = l
	if m.Mid != 0 {
		n += 1 + sovRequest(uint64(m.Mid))
	}
	if m.From != 0 {
		n += 1 + sovRequest(uint64(m.From))
	}
	return n
}

func (m *UpStatReq) Size() (n int) {
	var l int
	_ = l
	if m.Mid != 0 {
		n += 1 + sovRequest(uint64(m.Mid))
	}
	if m.Date != 0 {
		n += 1 + sovRequest(uint64(m.Date))
	}
	return n
}

func (m *UpSwitchReq) Size() (n int) {
	var l int
	_ = l
	if m.Mid != 0 {
		n += 1 + sovRequest(uint64(m.Mid))
	}
	if m.From != 0 {
		n += 1 + sovRequest(uint64(m.From))
	}
	if m.State != 0 {
		n += 1 + sovRequest(uint64(m.State))
	}
	return n
}

func (m *HighAllyUpsReq) Size() (n int) {
	var l int
	_ = l
	if len(m.Mids) > 0 {
		l = 0
		for _, e := range m.Mids {
			l += sovRequest(uint64(e))
		}
		n += 1 + sovRequest(uint64(l)) + l
	}
	return n
}

func sovRequest(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozRequest(x uint64) (n int) {
	return sovRequest(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *NoArgReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRequest
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NoArgReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NoArgReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipRequest(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRequest
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpArcsReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRequest
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpArcsReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpArcsReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pn", wireType)
			}
			m.Pn = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Pn |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ps", wireType)
			}
			m.Ps = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ps |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRequest(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRequest
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpsArcsReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRequest
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpsArcsReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpsArcsReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowRequest
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Mids = append(m.Mids, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowRequest
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthRequest
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowRequest
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Mids = append(m.Mids, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Mids", wireType)
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pn", wireType)
			}
			m.Pn = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Pn |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ps", wireType)
			}
			m.Ps = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ps |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRequest(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRequest
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpCountReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRequest
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpCountReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpCountReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRequest(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRequest
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpsCountReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRequest
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpsCountReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpsCountReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowRequest
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Mids = append(m.Mids, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowRequest
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthRequest
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowRequest
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Mids = append(m.Mids, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Mids", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRequest(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRequest
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpCacheReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRequest
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpCacheReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpCacheReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Aid", wireType)
			}
			m.Aid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Aid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRequest(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRequest
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpListByLastIDReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRequest
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpListByLastIDReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpListByLastIDReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastID", wireType)
			}
			m.LastID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastID |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ps", wireType)
			}
			m.Ps = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ps |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRequest(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRequest
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpSpecialReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRequest
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpSpecialReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpSpecialReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRequest(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRequest
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpsSpecialReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRequest
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpsSpecialReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpsSpecialReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowRequest
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Mids = append(m.Mids, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowRequest
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthRequest
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowRequest
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Mids = append(m.Mids, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Mids", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRequest(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRequest
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpGroupMidsReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRequest
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpGroupMidsReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpGroupMidsReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupID", wireType)
			}
			m.GroupID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GroupID |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pn", wireType)
			}
			m.Pn = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Pn |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ps", wireType)
			}
			m.Ps = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ps |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRequest(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRequest
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpAttrReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRequest
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpAttrReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpAttrReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			m.From = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.From |= (uint8(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRequest(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRequest
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpStatReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRequest
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpStatReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpStatReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Date", wireType)
			}
			m.Date = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Date |= (go_common_library_time.Time(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRequest(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRequest
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpSwitchReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRequest
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpSwitchReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpSwitchReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			m.From = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.From |= (uint8(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= (uint8(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRequest(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRequest
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HighAllyUpsReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRequest
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HighAllyUpsReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HighAllyUpsReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowRequest
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Mids = append(m.Mids, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowRequest
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthRequest
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowRequest
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Mids = append(m.Mids, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Mids", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRequest(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRequest
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipRequest(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowRequest
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRequest
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRequest
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthRequest
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowRequest
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipRequest(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthRequest = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowRequest   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("app/service/main/up/api/v1/request.proto", fileDescriptorRequest) }

var fileDescriptorRequest = []byte{
	// 736 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x95, 0xcd, 0x6e, 0xd3, 0x4a,
	0x14, 0xc7, 0xe5, 0xa4, 0x5f, 0x77, 0x7a, 0x6f, 0x75, 0xaf, 0xa5, 0x5e, 0x85, 0x22, 0x65, 0xa2,
	0x29, 0x8b, 0x14, 0xb5, 0xb1, 0x43, 0x2b, 0xb5, 0x8a, 0x28, 0x52, 0x53, 0x54, 0x9a, 0x52, 0xba,
	0x48, 0xf0, 0xa6, 0x42, 0x42, 0x13, 0xdb, 0x49, 0x46, 0xf2, 0xc7, 0xd4, 0x33, 0x0e, 0xed, 0x92,
	0x35, 0x3c, 0x03, 0x7b, 0x76, 0xbc, 0x01, 0x5b, 0x96, 0x3c, 0xc1, 0x08, 0xe5, 0x11, 0xbc, 0x64,
	0x85, 0x66, 0x9c, 0x36, 0x4e, 0xfa, 0xc1, 0x22, 0x65, 0x97, 0xf1, 0xfc, 0xcf, 0xf1, 0xef, 0x9c,
	0xbf, 0xcf, 0x09, 0x28, 0x63, 0x4a, 0x0d, 0xe6, 0x46, 0x7d, 0x62, 0xbb, 0x86, 0x8f, 0x49, 0x60,
	0xc4, 0xd4, 0xc0, 0x94, 0x18, 0xfd, 0xaa, 0x11, 0xb9, 0x67, 0xb1, 0xcb, 0x78, 0x85, 0x46, 0x21,
	0x0f, 0xf5, 0x65, 0x1c, 0xd9, 0x3d, 0xd2, 0x77, 0x2b, 0x43, 0x75, 0x25, 0xa6, 0x95, 0x7e, 0x75,
	0x65, 0xa3, 0x4b, 0x78, 0x2f, 0x6e, 0x57, 0xec, 0xd0, 0x37, 0xba, 0x61, 0x37, 0x34, 0x94, 0xba,
	0x1d, 0x77, 0xd4, 0x49, 0x1d, 0xd4, 0xaf, 0x34, 0x0b, 0x02, 0x60, 0xe1, 0x24, 0xdc, 0x8b, 0xba,
	0x4d, 0xf7, 0x0c, 0x7d, 0xd2, 0xc0, 0x5f, 0x16, 0xdd, 0x8b, 0x6c, 0xd6, 0x74, 0xcf, 0xf4, 0x1a,
	0xc8, 0xfb, 0xc4, 0x29, 0x68, 0x25, 0xad, 0x9c, 0xaf, 0x97, 0x13, 0x01, 0x1f, 0x75, 0xc2, 0xc8,
	0xaf, 0x21, 0x9f, 0x38, 0xa8, 0xd4, 0xc7, 0x1e, 0x71, 0x30, 0x77, 0xe5, 0x31, 0xd8, 0xad, 0xae,
	0x4b, 0x34, 0x12, 0xb9, 0x0e, 0x6a, 0xca, 0x20, 0x7d, 0x0d, 0xe4, 0x68, 0x50, 0xc8, 0x95, 0xb4,
	0xf2, 0x6c, 0xfd, 0x41, 0x22, 0xe0, 0x72, 0x1a, 0x4a, 0x03, 0x54, 0x72, 0xdc, 0x0e, 0x8e, 0x3d,
	0x5e, 0x43, 0x55, 0xd4, 0xcc, 0xd1, 0x40, 0x7f, 0x0c, 0x72, 0x94, 0x15, 0xf2, 0x4a, 0xba, 0x92,
	0x08, 0xf8, 0xff, 0x50, 0xca, 0x32, 0xd2, 0x27, 0xa6, 0xd4, 0x32, 0xf4, 0x45, 0x03, 0xc0, 0xa2,
	0xec, 0x92, 0xf0, 0x25, 0x98, 0xf1, 0x89, 0xc3, 0x0a, 0x5a, 0x29, 0x5f, 0xce, 0xd7, 0xb7, 0x13,
	0x01, 0x37, 0xaf, 0x10, 0xd9, 0x3a, 0xa3, 0x1e, 0xe1, 0xd7, 0x49, 0x7d, 0x7c, 0xbe, 0x5b, 0x35,
	0xcd, 0x0c, 0xb1, 0x4a, 0xf2, 0xa7, 0x90, 0x0f, 0x25, 0xf1, 0x7e, 0x18, 0x07, 0x7c, 0xca, 0x9e,
	0xa2, 0x53, 0xb0, 0x68, 0x51, 0x76, 0x95, 0xea, 0x3e, 0x8b, 0x47, 0xe7, 0x8a, 0x12, 0xdb, 0x3d,
	0x57, 0xa6, 0xde, 0xca, 0x52, 0xa2, 0x44, 0xc0, 0xe2, 0x8d, 0x94, 0x13, 0x9e, 0x6f, 0x81, 0x3c,
	0x26, 0x8e, 0xea, 0xe0, 0x58, 0x14, 0xbe, 0x35, 0x4a, 0xde, 0x7c, 0xd6, 0xc0, 0x7f, 0x16, 0x3d,
	0x26, 0x8c, 0xd7, 0x2f, 0x8e, 0x31, 0xe3, 0x8d, 0xe7, 0x92, 0xe0, 0x00, 0xcc, 0x7b, 0x98, 0xf1,
	0xb7, 0x57, 0x14, 0x1b, 0x03, 0x01, 0xe7, 0xd2, 0xfb, 0x44, 0x40, 0x98, 0x66, 0x1e, 0x4a, 0x26,
	0xcb, 0x34, 0x51, 0x73, 0x4e, 0x5e, 0x35, 0x1c, 0xfd, 0x58, 0x39, 0x95, 0x9a, 0xfa, 0x34, 0x11,
	0xb0, 0x3a, 0x72, 0xea, 0x96, 0xd6, 0x98, 0x59, 0xbb, 0x4d, 0x13, 0xfd, 0x14, 0x30, 0x4f, 0x02,
	0xae, 0xbc, 0x3c, 0x02, 0x7f, 0x5b, 0xb4, 0x45, 0x5d, 0x9b, 0x60, 0x6f, 0x5a, 0x37, 0xdf, 0x80,
	0x7f, 0x2c, 0xca, 0x32, 0xc9, 0xee, 0xd5, 0xcf, 0xf7, 0x39, 0xb0, 0x64, 0xd1, 0x17, 0x51, 0x18,
	0xd3, 0x57, 0xc4, 0x51, 0xc3, 0xd2, 0x02, 0x0b, 0x5d, 0x79, 0x1e, 0xf5, 0x74, 0x67, 0x20, 0xe0,
	0xbc, 0xd2, 0xa8, 0xa6, 0xae, 0xa5, 0xaf, 0xbb, 0x14, 0xdd, 0x55, 0xc1, 0xbc, 0x12, 0x35, 0x1c,
	0xfd, 0x28, 0x33, 0x34, 0xb5, 0x44, 0x40, 0x63, 0x34, 0x34, 0xb7, 0xb1, 0x8e, 0x8d, 0xd3, 0xa8,
	0xbb, 0x81, 0x7e, 0x92, 0x99, 0xaa, 0x67, 0xa3, 0xf2, 0xef, 0xf2, 0x6a, 0xc2, 0xac, 0x71, 0xb7,
	0x3e, 0xa6, 0xdb, 0x8c, 0xf3, 0x68, 0xda, 0x6d, 0xb6, 0x0f, 0x66, 0x3a, 0x51, 0xe8, 0x0f, 0xeb,
	0x34, 0x12, 0x01, 0x51, 0x1a, 0x2c, 0x9f, 0x5e, 0xfb, 0xfa, 0x52, 0x3a, 0x89, 0x32, 0x1b, 0x93,
	0x80, 0xef, 0x34, 0x55, 0x30, 0xfa, 0xa0, 0x70, 0x5a, 0x1c, 0x4f, 0xbb, 0x08, 0xf4, 0x3a, 0x98,
	0x91, 0xb7, 0xc3, 0x49, 0xab, 0x24, 0x02, 0x2e, 0xa6, 0xc1, 0xf2, 0xa9, 0x7c, 0xef, 0xc3, 0x6e,
	0xb8, 0x61, 0x87, 0xbe, 0x1f, 0x06, 0x86, 0x47, 0xda, 0x11, 0x8e, 0x2e, 0x0c, 0x4e, 0x7c, 0xb7,
	0xf2, 0x9a, 0xf8, 0x6e, 0x53, 0xc5, 0xa2, 0xaf, 0x9a, 0xdc, 0x26, 0xad, 0x77, 0x84, 0xdb, 0xbd,
	0x69, 0x79, 0xd6, 0xc7, 0xda, 0x53, 0x18, 0xf1, 0xa8, 0xba, 0x27, 0xfa, 0xa0, 0x1f, 0x80, 0x59,
	0xc6, 0x25, 0x7e, 0xea, 0xb4, 0x99, 0x08, 0xb8, 0x9a, 0xca, 0xd5, 0xe3, 0xdf, 0xb7, 0x33, 0x0d,
	0x47, 0x0d, 0xb0, 0x74, 0x48, 0xba, 0xbd, 0x3d, 0xcf, 0xbb, 0xb0, 0xa8, 0xfa, 0xc2, 0xb7, 0xc7,
	0x26, 0x68, 0x75, 0xb4, 0x27, 0xd4, 0x48, 0xdc, 0xb8, 0x82, 0x54, 0x40, 0xfd, 0xdf, 0x6f, 0x83,
	0xa2, 0xf6, 0x7d, 0x50, 0xd4, 0x7e, 0x0c, 0x8a, 0xda, 0x69, 0xae, 0x5f, 0x6d, 0xcf, 0xa9, 0x3f,
	0xc7, 0xcd, 0x5f, 0x01, 0x00, 0x00, 0xff, 0xff, 0xe8, 0x62, 0x5f, 0xbd, 0x8e, 0x07, 0x00, 0x00,
}
