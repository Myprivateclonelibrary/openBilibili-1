// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: app/service/main/vipinfo/api/grpc/v1/api.proto

/*
	Package v1 is a generated protocol buffer package.

	use {app_id}.{version} as package name

	It is generated from these files:
		app/service/main/vipinfo/api/grpc/v1/api.proto

	It has these top-level messages:
		InfoReply
		InfoReq
		InfosReply
		InfosReq
		ModelInfo
*/
package v1

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import context "golang.org/x/net/context"
import grpc "google.golang.org/grpc"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type InfoReply struct {
	Res *ModelInfo `protobuf:"bytes,1,opt,name=res" json:"res,omitempty"`
}

func (m *InfoReply) Reset()                    { *m = InfoReply{} }
func (m *InfoReply) String() string            { return proto.CompactTextString(m) }
func (*InfoReply) ProtoMessage()               {}
func (*InfoReply) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{0} }

func (m *InfoReply) GetRes() *ModelInfo {
	if m != nil {
		return m.Res
	}
	return nil
}

type InfoReq struct {
	Mid int64 `protobuf:"varint,2,opt,name=mid,proto3" json:"mid,omitempty"`
}

func (m *InfoReq) Reset()                    { *m = InfoReq{} }
func (m *InfoReq) String() string            { return proto.CompactTextString(m) }
func (*InfoReq) ProtoMessage()               {}
func (*InfoReq) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{1} }

func (m *InfoReq) GetMid() int64 {
	if m != nil {
		return m.Mid
	}
	return 0
}

type InfosReply struct {
	Res map[int64]*ModelInfo `protobuf:"bytes,1,rep,name=res" json:"res,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *InfosReply) Reset()                    { *m = InfosReply{} }
func (m *InfosReply) String() string            { return proto.CompactTextString(m) }
func (*InfosReply) ProtoMessage()               {}
func (*InfosReply) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{2} }

func (m *InfosReply) GetRes() map[int64]*ModelInfo {
	if m != nil {
		return m.Res
	}
	return nil
}

type InfosReq struct {
	Mids []int64 `protobuf:"varint,2,rep,packed,name=mids" json:"mids,omitempty"`
}

func (m *InfosReq) Reset()                    { *m = InfosReq{} }
func (m *InfosReq) String() string            { return proto.CompactTextString(m) }
func (*InfosReq) ProtoMessage()               {}
func (*InfosReq) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{3} }

func (m *InfosReq) GetMids() []int64 {
	if m != nil {
		return m.Mids
	}
	return nil
}

type ModelInfo struct {
	Type       int32 `protobuf:"varint,1,opt,name=type,proto3" json:"type"`
	Status     int32 `protobuf:"varint,2,opt,name=status,proto3" json:"status"`
	DueDate    int64 `protobuf:"varint,3,opt,name=due_date,json=dueDate,proto3" json:"due_date"`
	VipPayType int32 `protobuf:"varint,4,opt,name=vip_pay_type,json=vipPayType,proto3" json:"vip_pay_type"`
}

func (m *ModelInfo) Reset()                    { *m = ModelInfo{} }
func (m *ModelInfo) String() string            { return proto.CompactTextString(m) }
func (*ModelInfo) ProtoMessage()               {}
func (*ModelInfo) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{4} }

func (m *ModelInfo) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *ModelInfo) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *ModelInfo) GetDueDate() int64 {
	if m != nil {
		return m.DueDate
	}
	return 0
}

func (m *ModelInfo) GetVipPayType() int32 {
	if m != nil {
		return m.VipPayType
	}
	return 0
}

func init() {
	proto.RegisterType((*InfoReply)(nil), "vipinfo.service.v1.InfoReply")
	proto.RegisterType((*InfoReq)(nil), "vipinfo.service.v1.InfoReq")
	proto.RegisterType((*InfosReply)(nil), "vipinfo.service.v1.InfosReply")
	proto.RegisterType((*InfosReq)(nil), "vipinfo.service.v1.InfosReq")
	proto.RegisterType((*ModelInfo)(nil), "vipinfo.service.v1.ModelInfo")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for VipInfo service

type VipInfoClient interface {
	// Info get vipinfo by mid.
	Info(ctx context.Context, in *InfoReq, opts ...grpc.CallOption) (*InfoReply, error)
	// Infos get vipinfos by mids
	Infos(ctx context.Context, in *InfosReq, opts ...grpc.CallOption) (*InfosReply, error)
}

type vipInfoClient struct {
	cc *grpc.ClientConn
}

func NewVipInfoClient(cc *grpc.ClientConn) VipInfoClient {
	return &vipInfoClient{cc}
}

func (c *vipInfoClient) Info(ctx context.Context, in *InfoReq, opts ...grpc.CallOption) (*InfoReply, error) {
	out := new(InfoReply)
	err := grpc.Invoke(ctx, "/vipinfo.service.v1.VipInfo/Info", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vipInfoClient) Infos(ctx context.Context, in *InfosReq, opts ...grpc.CallOption) (*InfosReply, error) {
	out := new(InfosReply)
	err := grpc.Invoke(ctx, "/vipinfo.service.v1.VipInfo/Infos", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for VipInfo service

type VipInfoServer interface {
	// Info get vipinfo by mid.
	Info(context.Context, *InfoReq) (*InfoReply, error)
	// Infos get vipinfos by mids
	Infos(context.Context, *InfosReq) (*InfosReply, error)
}

func RegisterVipInfoServer(s *grpc.Server, srv VipInfoServer) {
	s.RegisterService(&_VipInfo_serviceDesc, srv)
}

func _VipInfo_Info_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VipInfoServer).Info(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vipinfo.service.v1.VipInfo/Info",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VipInfoServer).Info(ctx, req.(*InfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _VipInfo_Infos_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InfosReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VipInfoServer).Infos(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vipinfo.service.v1.VipInfo/Infos",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VipInfoServer).Infos(ctx, req.(*InfosReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _VipInfo_serviceDesc = grpc.ServiceDesc{
	ServiceName: "vipinfo.service.v1.VipInfo",
	HandlerType: (*VipInfoServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Info",
			Handler:    _VipInfo_Info_Handler,
		},
		{
			MethodName: "Infos",
			Handler:    _VipInfo_Infos_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "app/service/main/vipinfo/api/grpc/v1/api.proto",
}

func (m *InfoReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InfoReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Res != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Res.Size()))
		n1, err := m.Res.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	return i, nil
}

func (m *InfoReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InfoReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Mid != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Mid))
	}
	return i, nil
}

func (m *InfosReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InfosReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Res) > 0 {
		for k, _ := range m.Res {
			dAtA[i] = 0xa
			i++
			v := m.Res[k]
			msgSize := 0
			if v != nil {
				msgSize = v.Size()
				msgSize += 1 + sovApi(uint64(msgSize))
			}
			mapSize := 1 + sovApi(uint64(k)) + msgSize
			i = encodeVarintApi(dAtA, i, uint64(mapSize))
			dAtA[i] = 0x8
			i++
			i = encodeVarintApi(dAtA, i, uint64(k))
			if v != nil {
				dAtA[i] = 0x12
				i++
				i = encodeVarintApi(dAtA, i, uint64(v.Size()))
				n2, err := v.MarshalTo(dAtA[i:])
				if err != nil {
					return 0, err
				}
				i += n2
			}
		}
	}
	return i, nil
}

func (m *InfosReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InfosReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Mids) > 0 {
		dAtA4 := make([]byte, len(m.Mids)*10)
		var j3 int
		for _, num1 := range m.Mids {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA4[j3] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j3++
			}
			dAtA4[j3] = uint8(num)
			j3++
		}
		dAtA[i] = 0x12
		i++
		i = encodeVarintApi(dAtA, i, uint64(j3))
		i += copy(dAtA[i:], dAtA4[:j3])
	}
	return i, nil
}

func (m *ModelInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ModelInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Type != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Type))
	}
	if m.Status != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Status))
	}
	if m.DueDate != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.DueDate))
	}
	if m.VipPayType != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.VipPayType))
	}
	return i, nil
}

func encodeVarintApi(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *InfoReply) Size() (n int) {
	var l int
	_ = l
	if m.Res != nil {
		l = m.Res.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}

func (m *InfoReq) Size() (n int) {
	var l int
	_ = l
	if m.Mid != 0 {
		n += 1 + sovApi(uint64(m.Mid))
	}
	return n
}

func (m *InfosReply) Size() (n int) {
	var l int
	_ = l
	if len(m.Res) > 0 {
		for k, v := range m.Res {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovApi(uint64(l))
			}
			mapEntrySize := 1 + sovApi(uint64(k)) + l
			n += mapEntrySize + 1 + sovApi(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *InfosReq) Size() (n int) {
	var l int
	_ = l
	if len(m.Mids) > 0 {
		l = 0
		for _, e := range m.Mids {
			l += sovApi(uint64(e))
		}
		n += 1 + sovApi(uint64(l)) + l
	}
	return n
}

func (m *ModelInfo) Size() (n int) {
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovApi(uint64(m.Type))
	}
	if m.Status != 0 {
		n += 1 + sovApi(uint64(m.Status))
	}
	if m.DueDate != 0 {
		n += 1 + sovApi(uint64(m.DueDate))
	}
	if m.VipPayType != 0 {
		n += 1 + sovApi(uint64(m.VipPayType))
	}
	return n
}

func sovApi(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozApi(x uint64) (n int) {
	return sovApi(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *InfoReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InfoReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InfoReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Res", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Res == nil {
				m.Res = &ModelInfo{}
			}
			if err := m.Res.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InfoReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InfoReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InfoReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InfosReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InfosReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InfosReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Res", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Res == nil {
				m.Res = make(map[int64]*ModelInfo)
			}
			var mapkey int64
			var mapvalue *ModelInfo
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= (int64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= (int(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthApi
					}
					postmsgIndex := iNdEx + mapmsglen
					if mapmsglen < 0 {
						return ErrInvalidLengthApi
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &ModelInfo{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipApi(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthApi
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Res[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InfosReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InfosReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InfosReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Mids = append(m.Mids, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthApi
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Mids = append(m.Mids, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Mids", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ModelInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ModelInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ModelInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DueDate", wireType)
			}
			m.DueDate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DueDate |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VipPayType", wireType)
			}
			m.VipPayType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VipPayType |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipApi(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowApi
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowApi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowApi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthApi
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowApi
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipApi(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthApi = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowApi   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("app/service/main/vipinfo/api/grpc/v1/api.proto", fileDescriptorApi) }

var fileDescriptorApi = []byte{
	// 433 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x52, 0x3d, 0x6e, 0x13, 0x41,
	0x14, 0xd6, 0x78, 0xed, 0xd8, 0x79, 0x49, 0x61, 0x4d, 0x65, 0x39, 0xc9, 0xda, 0xda, 0x26, 0x6e,
	0x98, 0x91, 0x9d, 0x06, 0x10, 0xd5, 0x8a, 0x14, 0x14, 0x48, 0x68, 0x04, 0x14, 0x34, 0xd6, 0xd8,
	0x3b, 0x36, 0x23, 0x6c, 0xcf, 0x78, 0x77, 0x76, 0xa4, 0xbd, 0x07, 0x35, 0x07, 0xe0, 0x24, 0x94,
	0x9c, 0xc0, 0x42, 0x2e, 0x7d, 0x0a, 0x34, 0xcf, 0x9b, 0x20, 0x04, 0x49, 0x9a, 0x9d, 0xef, 0xfd,
	0x7d, 0xdf, 0xa7, 0xf7, 0x16, 0x98, 0xb4, 0x96, 0x17, 0x2a, 0xf7, 0x7a, 0xae, 0xf8, 0x5a, 0xea,
	0x0d, 0xf7, 0xda, 0xea, 0xcd, 0xc2, 0x70, 0x69, 0x35, 0x5f, 0xe6, 0x76, 0xce, 0xfd, 0x38, 0x60,
	0x66, 0x73, 0xe3, 0x0c, 0xa5, 0x75, 0x99, 0xd5, 0x33, 0xcc, 0x8f, 0xfb, 0xcf, 0x96, 0xda, 0x7d,
	0x2e, 0x67, 0x6c, 0x6e, 0xd6, 0x7c, 0x69, 0x96, 0x86, 0x63, 0xeb, 0xac, 0x5c, 0x60, 0x84, 0x01,
	0xa2, 0x23, 0x45, 0xf2, 0x0a, 0x4e, 0xdf, 0x6c, 0x16, 0x46, 0x28, 0xbb, 0xaa, 0x28, 0x87, 0x28,
	0x57, 0x45, 0x8f, 0x0c, 0xc9, 0xe8, 0x6c, 0x72, 0xc5, 0xfe, 0x65, 0x67, 0x6f, 0x4d, 0xa6, 0x56,
	0x38, 0x10, 0x3a, 0x93, 0x0b, 0x68, 0x1f, 0xa7, 0xb7, 0xb4, 0x0b, 0xd1, 0x5a, 0x67, 0xbd, 0xc6,
	0x90, 0x8c, 0x22, 0x11, 0x60, 0xf2, 0x8d, 0x00, 0x84, 0x6a, 0x71, 0x24, 0x7f, 0x71, 0x47, 0x1e,
	0x8d, 0xce, 0x26, 0xd7, 0xff, 0x23, 0xff, 0xd3, 0xcc, 0x84, 0x2a, 0x6e, 0x37, 0x2e, 0xaf, 0x50,
	0xa6, 0xff, 0x01, 0x3a, 0x77, 0x89, 0xa0, 0xf3, 0x45, 0x55, 0xe8, 0x31, 0x12, 0x01, 0xd2, 0x1b,
	0x68, 0x79, 0xb9, 0x2a, 0x15, 0x6a, 0x3f, 0xe9, 0xfb, 0xd8, 0xfb, 0xb2, 0xf1, 0x9c, 0x24, 0x31,
	0x74, 0x6a, 0xc9, 0x2d, 0xa5, 0xd0, 0x5c, 0xeb, 0xac, 0xe8, 0x35, 0x86, 0xd1, 0x28, 0x12, 0x88,
	0x93, 0xef, 0x04, 0x4e, 0xef, 0x07, 0xe9, 0x25, 0x34, 0x5d, 0x65, 0x15, 0x2a, 0xb7, 0xd2, 0xce,
	0x61, 0x37, 0xc0, 0x58, 0xe0, 0x97, 0x26, 0x70, 0x52, 0x38, 0xe9, 0xca, 0x02, 0x5d, 0xb4, 0x52,
	0x38, 0xec, 0x06, 0x75, 0x46, 0xd4, 0x2f, 0xbd, 0x86, 0x4e, 0x56, 0xaa, 0x69, 0x26, 0x9d, 0xea,
	0x45, 0xc1, 0x7f, 0x7a, 0x7e, 0xd8, 0x0d, 0xee, 0x73, 0xa2, 0x9d, 0x95, 0xea, 0xb5, 0x74, 0x8a,
	0x4e, 0xe0, 0xdc, 0x6b, 0x3b, 0xb5, 0xb2, 0x9a, 0xa2, 0x64, 0x13, 0x29, 0xbb, 0x87, 0xdd, 0xe0,
	0xaf, 0xbc, 0x00, 0xaf, 0xed, 0x3b, 0x59, 0xbd, 0xaf, 0xac, 0x9a, 0x7c, 0x25, 0xd0, 0xfe, 0xa8,
	0x2d, 0x5a, 0x4d, 0xa1, 0x89, 0xef, 0xc5, 0x43, 0x5b, 0x16, 0x6a, 0xdb, 0xbf, 0x7a, 0xb8, 0x18,
	0xce, 0x75, 0x0b, 0x2d, 0x5c, 0x0e, 0xbd, 0x7c, 0xe4, 0x54, 0xdb, 0x7e, 0xfc, 0xf8, 0x21, 0xd3,
	0xee, 0x8f, 0x7d, 0x4c, 0x7e, 0xee, 0x63, 0xf2, 0x6b, 0x1f, 0x93, 0x4f, 0x0d, 0x3f, 0x9e, 0x9d,
	0xe0, 0x8f, 0x77, 0xf3, 0x3b, 0x00, 0x00, 0xff, 0xff, 0x0a, 0x5b, 0x7f, 0x11, 0xed, 0x02, 0x00,
	0x00,
}
