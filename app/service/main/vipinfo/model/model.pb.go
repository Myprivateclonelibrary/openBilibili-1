// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: app/service/main/vipinfo/model/model.proto

/*
	Package model is a generated protocol buffer package.

	It is generated from these files:
		app/service/main/vipinfo/model/model.proto

	It has these top-level messages:
		VipUserInfo
*/
package model

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import go_common_library_time "go-common/library/time"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type VipUserInfo struct {
	ID                   int64                       `protobuf:"varint,1,opt,name=ID,proto3" json:"id"`
	Mid                  int64                       `protobuf:"varint,2,opt,name=Mid,proto3" json:"mid"`
	VipType              int32                       `protobuf:"varint,3,opt,name=VipType,proto3" json:"vip_type"`
	VipPayType           int32                       `protobuf:"varint,4,opt,name=VipPayType,proto3" json:"vip_pay_type"`
	PayChannelID         int32                       `protobuf:"varint,5,opt,name=PayChannelID,proto3" json:"pay_channel_id"`
	VipStatus            int32                       `protobuf:"varint,6,opt,name=VipStatus,proto3" json:"vip_status"`
	VipStartTime         go_common_library_time.Time `protobuf:"varint,7,opt,name=VipStartTime,proto3,casttype=go-common/library/time.Time" json:"vip_start_time"`
	VipRecentTime        go_common_library_time.Time `protobuf:"varint,8,opt,name=VipRecentTime,proto3,casttype=go-common/library/time.Time" json:"vip_recent_time"`
	VipOverdueTime       go_common_library_time.Time `protobuf:"varint,9,opt,name=VipOverdueTime,proto3,casttype=go-common/library/time.Time" json:"vip_overdue_time"`
	AnnualVipOverdueTime go_common_library_time.Time `protobuf:"varint,10,opt,name=AnnualVipOverdueTime,proto3,casttype=go-common/library/time.Time" json:"annual_vip_overdue_time"`
	Ctime                go_common_library_time.Time `protobuf:"varint,11,opt,name=Ctime,proto3,casttype=go-common/library/time.Time" json:"ctime"`
	Mtime                go_common_library_time.Time `protobuf:"varint,12,opt,name=Mtime,proto3,casttype=go-common/library/time.Time" json:"mtime"`
	IosOverdueTime       go_common_library_time.Time `protobuf:"varint,13,opt,name=IosOverdueTime,proto3,casttype=go-common/library/time.Time" json:"ios_overdue_time"`
	Ver                  int64                       `protobuf:"varint,14,opt,name=Ver,proto3" json:"ver"`
}

func (m *VipUserInfo) Reset()                    { *m = VipUserInfo{} }
func (m *VipUserInfo) String() string            { return proto.CompactTextString(m) }
func (*VipUserInfo) ProtoMessage()               {}
func (*VipUserInfo) Descriptor() ([]byte, []int) { return fileDescriptorModel, []int{0} }

func init() {
	proto.RegisterType((*VipUserInfo)(nil), "account.service.vipinfo.VipUserInfo")
}
func (m *VipUserInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VipUserInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintModel(dAtA, i, uint64(m.ID))
	}
	if m.Mid != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintModel(dAtA, i, uint64(m.Mid))
	}
	if m.VipType != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintModel(dAtA, i, uint64(m.VipType))
	}
	if m.VipPayType != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintModel(dAtA, i, uint64(m.VipPayType))
	}
	if m.PayChannelID != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintModel(dAtA, i, uint64(m.PayChannelID))
	}
	if m.VipStatus != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintModel(dAtA, i, uint64(m.VipStatus))
	}
	if m.VipStartTime != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintModel(dAtA, i, uint64(m.VipStartTime))
	}
	if m.VipRecentTime != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintModel(dAtA, i, uint64(m.VipRecentTime))
	}
	if m.VipOverdueTime != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintModel(dAtA, i, uint64(m.VipOverdueTime))
	}
	if m.AnnualVipOverdueTime != 0 {
		dAtA[i] = 0x50
		i++
		i = encodeVarintModel(dAtA, i, uint64(m.AnnualVipOverdueTime))
	}
	if m.Ctime != 0 {
		dAtA[i] = 0x58
		i++
		i = encodeVarintModel(dAtA, i, uint64(m.Ctime))
	}
	if m.Mtime != 0 {
		dAtA[i] = 0x60
		i++
		i = encodeVarintModel(dAtA, i, uint64(m.Mtime))
	}
	if m.IosOverdueTime != 0 {
		dAtA[i] = 0x68
		i++
		i = encodeVarintModel(dAtA, i, uint64(m.IosOverdueTime))
	}
	if m.Ver != 0 {
		dAtA[i] = 0x70
		i++
		i = encodeVarintModel(dAtA, i, uint64(m.Ver))
	}
	return i, nil
}

func encodeVarintModel(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *VipUserInfo) Size() (n int) {
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovModel(uint64(m.ID))
	}
	if m.Mid != 0 {
		n += 1 + sovModel(uint64(m.Mid))
	}
	if m.VipType != 0 {
		n += 1 + sovModel(uint64(m.VipType))
	}
	if m.VipPayType != 0 {
		n += 1 + sovModel(uint64(m.VipPayType))
	}
	if m.PayChannelID != 0 {
		n += 1 + sovModel(uint64(m.PayChannelID))
	}
	if m.VipStatus != 0 {
		n += 1 + sovModel(uint64(m.VipStatus))
	}
	if m.VipStartTime != 0 {
		n += 1 + sovModel(uint64(m.VipStartTime))
	}
	if m.VipRecentTime != 0 {
		n += 1 + sovModel(uint64(m.VipRecentTime))
	}
	if m.VipOverdueTime != 0 {
		n += 1 + sovModel(uint64(m.VipOverdueTime))
	}
	if m.AnnualVipOverdueTime != 0 {
		n += 1 + sovModel(uint64(m.AnnualVipOverdueTime))
	}
	if m.Ctime != 0 {
		n += 1 + sovModel(uint64(m.Ctime))
	}
	if m.Mtime != 0 {
		n += 1 + sovModel(uint64(m.Mtime))
	}
	if m.IosOverdueTime != 0 {
		n += 1 + sovModel(uint64(m.IosOverdueTime))
	}
	if m.Ver != 0 {
		n += 1 + sovModel(uint64(m.Ver))
	}
	return n
}

func sovModel(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozModel(x uint64) (n int) {
	return sovModel(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *VipUserInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModel
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VipUserInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VipUserInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VipType", wireType)
			}
			m.VipType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VipType |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VipPayType", wireType)
			}
			m.VipPayType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VipPayType |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PayChannelID", wireType)
			}
			m.PayChannelID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PayChannelID |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VipStatus", wireType)
			}
			m.VipStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VipStatus |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VipStartTime", wireType)
			}
			m.VipStartTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VipStartTime |= (go_common_library_time.Time(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VipRecentTime", wireType)
			}
			m.VipRecentTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VipRecentTime |= (go_common_library_time.Time(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VipOverdueTime", wireType)
			}
			m.VipOverdueTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VipOverdueTime |= (go_common_library_time.Time(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AnnualVipOverdueTime", wireType)
			}
			m.AnnualVipOverdueTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AnnualVipOverdueTime |= (go_common_library_time.Time(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ctime", wireType)
			}
			m.Ctime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ctime |= (go_common_library_time.Time(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mtime", wireType)
			}
			m.Mtime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mtime |= (go_common_library_time.Time(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IosOverdueTime", wireType)
			}
			m.IosOverdueTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IosOverdueTime |= (go_common_library_time.Time(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ver", wireType)
			}
			m.Ver = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ver |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipModel(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthModel
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipModel(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowModel
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowModel
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowModel
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthModel
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowModel
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipModel(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthModel = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowModel   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("app/service/main/vipinfo/model/model.proto", fileDescriptorModel) }

var fileDescriptorModel = []byte{
	// 518 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x93, 0x41, 0x6b, 0xdb, 0x30,
	0x1c, 0xc5, 0xeb, 0x64, 0x49, 0x5b, 0x35, 0xcd, 0x8a, 0x18, 0xab, 0xb7, 0x42, 0x54, 0x76, 0x18,
	0x61, 0xac, 0xf1, 0xb6, 0xc2, 0x0e, 0x3b, 0x0c, 0x96, 0xe6, 0x92, 0x43, 0x59, 0xf1, 0x5a, 0x33,
	0xb6, 0x43, 0x50, 0x6c, 0x25, 0x15, 0xc4, 0x92, 0x90, 0xed, 0x80, 0xbf, 0x61, 0x8f, 0xfd, 0x04,
	0x62, 0xcd, 0x51, 0x1f, 0x60, 0x87, 0x9d, 0x86, 0xfe, 0xce, 0x48, 0x53, 0x76, 0x48, 0x2f, 0xc6,
	0xd2, 0x7b, 0xef, 0xf7, 0xd0, 0x1f, 0xfe, 0xe8, 0x0d, 0x55, 0x2a, 0xc8, 0x98, 0x9e, 0xf3, 0x98,
	0x05, 0x29, 0xe5, 0x22, 0x98, 0x73, 0xc5, 0xc5, 0x44, 0x06, 0xa9, 0x4c, 0xd8, 0xac, 0xfa, 0xf6,
	0x94, 0x96, 0xb9, 0xc4, 0x87, 0x34, 0x8e, 0x65, 0x21, 0xf2, 0xde, 0xd2, 0xdf, 0x5b, 0x5a, 0x5f,
	0x9e, 0x4c, 0x79, 0x7e, 0x5d, 0x8c, 0x7b, 0xb1, 0x4c, 0x83, 0xa9, 0x9c, 0xca, 0x00, 0xfc, 0xe3,
	0x62, 0x02, 0x27, 0x38, 0xc0, 0x5f, 0xc5, 0x79, 0xf5, 0xbb, 0x89, 0xf6, 0x22, 0xae, 0xae, 0x32,
	0xa6, 0x87, 0x62, 0x22, 0xf1, 0x73, 0x54, 0x1b, 0x0e, 0x7c, 0xef, 0xd8, 0xeb, 0xd6, 0xfb, 0x4d,
	0x6b, 0x48, 0x8d, 0x27, 0x61, 0x6d, 0x38, 0xc0, 0x2f, 0x50, 0xfd, 0x9c, 0x27, 0x7e, 0x0d, 0x84,
	0x6d, 0x6b, 0x48, 0x3d, 0xe5, 0x49, 0xe8, 0xee, 0xf0, 0x6b, 0xb4, 0x1d, 0x71, 0x75, 0x59, 0x2a,
	0xe6, 0xd7, 0x8f, 0xbd, 0x6e, 0xa3, 0xdf, 0xb2, 0x86, 0xec, 0xcc, 0xb9, 0x1a, 0xe5, 0xa5, 0x62,
	0xe1, 0x3f, 0x11, 0xbf, 0x43, 0x28, 0xe2, 0xea, 0x82, 0x96, 0x60, 0x7d, 0x02, 0xd6, 0x03, 0x6b,
	0x48, 0xcb, 0x59, 0x15, 0x2d, 0x2b, 0xfb, 0x3d, 0x0f, 0xfe, 0x88, 0x5a, 0x17, 0xb4, 0x3c, 0xbb,
	0xa6, 0x42, 0xb0, 0xd9, 0x70, 0xe0, 0x37, 0x20, 0x83, 0xad, 0x21, 0x6d, 0xe7, 0x8f, 0x2b, 0x61,
	0xc4, 0x93, 0x70, 0xcd, 0x87, 0xdf, 0xa2, 0xdd, 0x88, 0xab, 0x6f, 0x39, 0xcd, 0x8b, 0xcc, 0x6f,
	0x42, 0xa8, 0x6d, 0x0d, 0x41, 0xae, 0x28, 0x83, 0xdb, 0x70, 0x65, 0xc0, 0x57, 0xa8, 0x55, 0x1d,
	0x74, 0x7e, 0xc9, 0x53, 0xe6, 0x6f, 0xc3, 0x1b, 0xdf, 0xbb, 0x96, 0x65, 0x40, 0xe7, 0xa3, 0x9c,
	0xa7, 0xec, 0x8f, 0x21, 0x47, 0x53, 0x79, 0x12, 0xcb, 0x34, 0x95, 0x22, 0x98, 0xf1, 0xb1, 0xa6,
	0xba, 0x0c, 0x9c, 0xd2, 0x73, 0xc1, 0x70, 0x0d, 0x83, 0xbf, 0xa3, 0xfd, 0x88, 0xab, 0x90, 0xc5,
	0x4c, 0x54, 0xdc, 0x1d, 0xe0, 0x7e, 0xb0, 0x86, 0x3c, 0x75, 0x5c, 0x0d, 0xca, 0x46, 0xe0, 0x75,
	0x10, 0xfe, 0x89, 0xda, 0x11, 0x57, 0x5f, 0xe7, 0x4c, 0x27, 0x05, 0x03, 0xf4, 0x2e, 0xa0, 0x4f,
	0xad, 0x21, 0x07, 0x0e, 0x2d, 0x2b, 0x69, 0x23, 0xf6, 0x03, 0x14, 0x16, 0xe8, 0xd9, 0x17, 0x21,
	0x0a, 0x3a, 0x7b, 0x50, 0x81, 0xa0, 0xe2, 0x93, 0x35, 0xe4, 0x90, 0x82, 0x3e, 0x7a, 0x6c, 0xd3,
	0x7f, 0xb9, 0xf8, 0x33, 0x6a, 0x9c, 0x39, 0x8f, 0xbf, 0x07, 0x05, 0x5d, 0x6b, 0x48, 0x23, 0xde,
	0x04, 0x57, 0xc5, 0x5c, 0xfe, 0x1c, 0xf2, 0xad, 0x55, 0x3e, 0xdd, 0x28, 0x0f, 0x31, 0x37, 0xcc,
	0xa1, 0xcc, 0xee, 0xbf, 0x74, 0x7f, 0x35, 0x4c, 0x2e, 0xb3, 0xc7, 0x0d, 0x73, 0x1d, 0xe5, 0xb6,
	0x26, 0x62, 0xda, 0x6f, 0xaf, 0xb6, 0x66, 0xce, 0x74, 0xe8, 0xee, 0xfa, 0x47, 0x37, 0x77, 0x9d,
	0xad, 0xdb, 0xbb, 0xce, 0xd6, 0xcd, 0xa2, 0xe3, 0xdd, 0x2e, 0x3a, 0xde, 0xaf, 0x45, 0xc7, 0xfb,
	0xd1, 0x80, 0x1d, 0x1f, 0x37, 0x61, 0x39, 0x4f, 0xff, 0x06, 0x00, 0x00, 0xff, 0xff, 0x66, 0x63,
	0x27, 0x4e, 0x12, 0x04, 0x00, 0x00,
}
