// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: model.proto

/*
	Package model is a generated protocol buffer package.

	It is generated from these files:
		model.proto

	It has these top-level messages:
		BaseInfo
		LevelInfo
		OfficialInfo
		Moral
*/
package model

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import go_common_time "go-common/library/time"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type BaseInfo struct {
	Mid      int64               `protobuf:"varint,1,opt,name=mid,proto3" json:"mid"`
	Name     string              `protobuf:"bytes,2,opt,name=name,proto3" json:"name"`
	Sex      int64               `protobuf:"varint,3,opt,name=sex,proto3" json:"sex"`
	Face     string              `protobuf:"bytes,4,opt,name=face,proto3" json:"face"`
	Sign     string              `protobuf:"bytes,5,opt,name=sign,proto3" json:"sign"`
	Rank     int64               `protobuf:"varint,6,opt,name=rank,proto3" json:"rank"`
	Birthday go_common_time.Time `protobuf:"varint,7,opt,name=birthday,proto3,casttype=go-common/library/time.Time" json:"birthday"`
}

func (m *BaseInfo) Reset()                    { *m = BaseInfo{} }
func (m *BaseInfo) String() string            { return proto.CompactTextString(m) }
func (*BaseInfo) ProtoMessage()               {}
func (*BaseInfo) Descriptor() ([]byte, []int) { return fileDescriptorModel, []int{0} }

func (m *BaseInfo) GetMid() int64 {
	if m != nil {
		return m.Mid
	}
	return 0
}

func (m *BaseInfo) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *BaseInfo) GetSex() int64 {
	if m != nil {
		return m.Sex
	}
	return 0
}

func (m *BaseInfo) GetFace() string {
	if m != nil {
		return m.Face
	}
	return ""
}

func (m *BaseInfo) GetSign() string {
	if m != nil {
		return m.Sign
	}
	return ""
}

func (m *BaseInfo) GetRank() int64 {
	if m != nil {
		return m.Rank
	}
	return 0
}

func (m *BaseInfo) GetBirthday() go_common_time.Time {
	if m != nil {
		return m.Birthday
	}
	return 0
}

type LevelInfo struct {
	Cur     int32 `protobuf:"varint,1,opt,name=cur,proto3" json:"current_level"`
	Min     int32 `protobuf:"varint,2,opt,name=min,proto3" json:"current_min"`
	NowExp  int32 `protobuf:"varint,3,opt,name=now_exp,json=nowExp,proto3" json:"current_exp"`
	NextExp int32 `protobuf:"varint,4,opt,name=next_exp,json=nextExp,proto3" json:"next_exp"`
}

func (m *LevelInfo) Reset()                    { *m = LevelInfo{} }
func (m *LevelInfo) String() string            { return proto.CompactTextString(m) }
func (*LevelInfo) ProtoMessage()               {}
func (*LevelInfo) Descriptor() ([]byte, []int) { return fileDescriptorModel, []int{1} }

func (m *LevelInfo) GetCur() int32 {
	if m != nil {
		return m.Cur
	}
	return 0
}

func (m *LevelInfo) GetMin() int32 {
	if m != nil {
		return m.Min
	}
	return 0
}

func (m *LevelInfo) GetNowExp() int32 {
	if m != nil {
		return m.NowExp
	}
	return 0
}

func (m *LevelInfo) GetNextExp() int32 {
	if m != nil {
		return m.NextExp
	}
	return 0
}

type OfficialInfo struct {
	Role  int8   `protobuf:"varint,1,opt,name=role,proto3,casttype=int8" json:"role"`
	Title string `protobuf:"bytes,2,opt,name=title,proto3" json:"title"`
	Desc  string `protobuf:"bytes,3,opt,name=desc,proto3" json:"desc"`
}

func (m *OfficialInfo) Reset()                    { *m = OfficialInfo{} }
func (m *OfficialInfo) String() string            { return proto.CompactTextString(m) }
func (*OfficialInfo) ProtoMessage()               {}
func (*OfficialInfo) Descriptor() ([]byte, []int) { return fileDescriptorModel, []int{2} }

func (m *OfficialInfo) GetRole() int8 {
	if m != nil {
		return m.Role
	}
	return 0
}

func (m *OfficialInfo) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *OfficialInfo) GetDesc() string {
	if m != nil {
		return m.Desc
	}
	return ""
}

type Moral struct {
	Mid             int64               `protobuf:"varint,1,opt,name=mid,proto3" json:"mid"`
	Moral           int64               `protobuf:"varint,2,opt,name=moral,proto3" json:"moral"`
	Added           int64               `protobuf:"varint,3,opt,name=added,proto3" json:"added"`
	Deducted        int64               `protobuf:"varint,4,opt,name=deducted,proto3" json:"deducted"`
	LastRecoverDate go_common_time.Time `protobuf:"varint,5,opt,name=last_recover_date,json=lastRecoverDate,proto3,casttype=go-common/library/time.Time" json:"last_recover_date"`
}

func (m *Moral) Reset()                    { *m = Moral{} }
func (m *Moral) String() string            { return proto.CompactTextString(m) }
func (*Moral) ProtoMessage()               {}
func (*Moral) Descriptor() ([]byte, []int) { return fileDescriptorModel, []int{3} }

func (m *Moral) GetMid() int64 {
	if m != nil {
		return m.Mid
	}
	return 0
}

func (m *Moral) GetMoral() int64 {
	if m != nil {
		return m.Moral
	}
	return 0
}

func (m *Moral) GetAdded() int64 {
	if m != nil {
		return m.Added
	}
	return 0
}

func (m *Moral) GetDeducted() int64 {
	if m != nil {
		return m.Deducted
	}
	return 0
}

func (m *Moral) GetLastRecoverDate() go_common_time.Time {
	if m != nil {
		return m.LastRecoverDate
	}
	return 0
}

func init() {
	proto.RegisterType((*BaseInfo)(nil), "account.service.member.BaseInfo")
	proto.RegisterType((*LevelInfo)(nil), "account.service.member.LevelInfo")
	proto.RegisterType((*OfficialInfo)(nil), "account.service.member.OfficialInfo")
	proto.RegisterType((*Moral)(nil), "account.service.member.Moral")
}
func (m *BaseInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BaseInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Mid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintModel(dAtA, i, uint64(m.Mid))
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintModel(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if m.Sex != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintModel(dAtA, i, uint64(m.Sex))
	}
	if len(m.Face) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintModel(dAtA, i, uint64(len(m.Face)))
		i += copy(dAtA[i:], m.Face)
	}
	if len(m.Sign) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintModel(dAtA, i, uint64(len(m.Sign)))
		i += copy(dAtA[i:], m.Sign)
	}
	if m.Rank != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintModel(dAtA, i, uint64(m.Rank))
	}
	if m.Birthday != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintModel(dAtA, i, uint64(m.Birthday))
	}
	return i, nil
}

func (m *LevelInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LevelInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Cur != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintModel(dAtA, i, uint64(m.Cur))
	}
	if m.Min != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintModel(dAtA, i, uint64(m.Min))
	}
	if m.NowExp != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintModel(dAtA, i, uint64(m.NowExp))
	}
	if m.NextExp != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintModel(dAtA, i, uint64(m.NextExp))
	}
	return i, nil
}

func (m *OfficialInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OfficialInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Role != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintModel(dAtA, i, uint64(m.Role))
	}
	if len(m.Title) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintModel(dAtA, i, uint64(len(m.Title)))
		i += copy(dAtA[i:], m.Title)
	}
	if len(m.Desc) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintModel(dAtA, i, uint64(len(m.Desc)))
		i += copy(dAtA[i:], m.Desc)
	}
	return i, nil
}

func (m *Moral) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Moral) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Mid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintModel(dAtA, i, uint64(m.Mid))
	}
	if m.Moral != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintModel(dAtA, i, uint64(m.Moral))
	}
	if m.Added != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintModel(dAtA, i, uint64(m.Added))
	}
	if m.Deducted != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintModel(dAtA, i, uint64(m.Deducted))
	}
	if m.LastRecoverDate != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintModel(dAtA, i, uint64(m.LastRecoverDate))
	}
	return i, nil
}

func encodeVarintModel(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *BaseInfo) Size() (n int) {
	var l int
	_ = l
	if m.Mid != 0 {
		n += 1 + sovModel(uint64(m.Mid))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovModel(uint64(l))
	}
	if m.Sex != 0 {
		n += 1 + sovModel(uint64(m.Sex))
	}
	l = len(m.Face)
	if l > 0 {
		n += 1 + l + sovModel(uint64(l))
	}
	l = len(m.Sign)
	if l > 0 {
		n += 1 + l + sovModel(uint64(l))
	}
	if m.Rank != 0 {
		n += 1 + sovModel(uint64(m.Rank))
	}
	if m.Birthday != 0 {
		n += 1 + sovModel(uint64(m.Birthday))
	}
	return n
}

func (m *LevelInfo) Size() (n int) {
	var l int
	_ = l
	if m.Cur != 0 {
		n += 1 + sovModel(uint64(m.Cur))
	}
	if m.Min != 0 {
		n += 1 + sovModel(uint64(m.Min))
	}
	if m.NowExp != 0 {
		n += 1 + sovModel(uint64(m.NowExp))
	}
	if m.NextExp != 0 {
		n += 1 + sovModel(uint64(m.NextExp))
	}
	return n
}

func (m *OfficialInfo) Size() (n int) {
	var l int
	_ = l
	if m.Role != 0 {
		n += 1 + sovModel(uint64(m.Role))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovModel(uint64(l))
	}
	l = len(m.Desc)
	if l > 0 {
		n += 1 + l + sovModel(uint64(l))
	}
	return n
}

func (m *Moral) Size() (n int) {
	var l int
	_ = l
	if m.Mid != 0 {
		n += 1 + sovModel(uint64(m.Mid))
	}
	if m.Moral != 0 {
		n += 1 + sovModel(uint64(m.Moral))
	}
	if m.Added != 0 {
		n += 1 + sovModel(uint64(m.Added))
	}
	if m.Deducted != 0 {
		n += 1 + sovModel(uint64(m.Deducted))
	}
	if m.LastRecoverDate != 0 {
		n += 1 + sovModel(uint64(m.LastRecoverDate))
	}
	return n
}

func sovModel(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozModel(x uint64) (n int) {
	return sovModel(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *BaseInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModel
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BaseInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BaseInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sex", wireType)
			}
			m.Sex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sex |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Face", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Face = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sign", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sign = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rank", wireType)
			}
			m.Rank = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Rank |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Birthday", wireType)
			}
			m.Birthday = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Birthday |= (go_common_time.Time(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipModel(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthModel
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LevelInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModel
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LevelInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LevelInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cur", wireType)
			}
			m.Cur = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Cur |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Min", wireType)
			}
			m.Min = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Min |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NowExp", wireType)
			}
			m.NowExp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NowExp |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextExp", wireType)
			}
			m.NextExp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NextExp |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipModel(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthModel
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OfficialInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModel
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OfficialInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OfficialInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Role", wireType)
			}
			m.Role = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Role |= (int8(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Desc", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModel
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Desc = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipModel(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthModel
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Moral) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModel
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Moral: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Moral: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Moral", wireType)
			}
			m.Moral = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Moral |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Added", wireType)
			}
			m.Added = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Added |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Deducted", wireType)
			}
			m.Deducted = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Deducted |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastRecoverDate", wireType)
			}
			m.LastRecoverDate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModel
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastRecoverDate |= (go_common_time.Time(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipModel(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthModel
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipModel(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowModel
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowModel
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowModel
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthModel
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowModel
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipModel(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthModel = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowModel   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("model.proto", fileDescriptorModel) }

var fileDescriptorModel = []byte{
	// 535 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x53, 0xcb, 0x8e, 0xd3, 0x30,
	0x14, 0x25, 0xa4, 0x99, 0xb6, 0x9e, 0x41, 0xc3, 0x04, 0x09, 0x02, 0x42, 0xcd, 0xd0, 0x41, 0xa2,
	0x0b, 0xa6, 0x5d, 0xb0, 0x61, 0x87, 0x14, 0x31, 0x0b, 0x24, 0x10, 0x92, 0xc5, 0x02, 0xb1, 0xa9,
	0x5c, 0xfb, 0xb6, 0x63, 0x11, 0xdb, 0x95, 0xe3, 0x74, 0xc2, 0x9f, 0xf0, 0x05, 0x7c, 0x0b, 0x4b,
	0xbe, 0x20, 0x42, 0x65, 0x83, 0xf2, 0x07, 0xcc, 0x0a, 0xf9, 0xa6, 0x0f, 0x09, 0x04, 0x9b, 0x63,
	0x9f, 0x73, 0xcf, 0x4d, 0xec, 0x93, 0x1b, 0x72, 0xa8, 0x8c, 0x80, 0x7c, 0xbc, 0xb4, 0xc6, 0x99,
	0xf8, 0x2e, 0xe3, 0xdc, 0x94, 0xda, 0x8d, 0x0b, 0xb0, 0x2b, 0xc9, 0x61, 0xac, 0x40, 0xcd, 0xc0,
	0x3e, 0x38, 0x5f, 0x48, 0x77, 0x59, 0xce, 0xc6, 0xdc, 0xa8, 0xc9, 0xc2, 0x2c, 0xcc, 0x04, 0xed,
	0xb3, 0x72, 0x8e, 0x0c, 0x09, 0xee, 0xda, 0xc7, 0x0c, 0x7f, 0x05, 0xa4, 0x97, 0xb1, 0x02, 0x5e,
	0xe9, 0xb9, 0x89, 0xef, 0x93, 0x50, 0x49, 0x91, 0x04, 0xa7, 0xc1, 0x28, 0xcc, 0xba, 0x4d, 0x9d,
	0x7a, 0x4a, 0x3d, 0xc4, 0x0f, 0x49, 0x47, 0x33, 0x05, 0xc9, 0xcd, 0xd3, 0x60, 0xd4, 0xcf, 0x7a,
	0x4d, 0x9d, 0x22, 0xa7, 0x88, 0xbe, 0xb1, 0x80, 0x2a, 0x09, 0xf7, 0x8d, 0x05, 0x54, 0xd4, 0x83,
	0x6f, 0x9c, 0x33, 0x0e, 0x49, 0x67, 0xdf, 0xe8, 0x39, 0x45, 0xf4, 0xd5, 0x42, 0x2e, 0x74, 0x12,
	0xed, 0xab, 0x9e, 0x53, 0x44, 0x5f, 0xb5, 0x4c, 0x7f, 0x4c, 0x0e, 0xf0, 0xb9, 0x58, 0xf5, 0x9c,
	0x22, 0xc6, 0x2f, 0x48, 0x6f, 0x26, 0xad, 0xbb, 0x14, 0xec, 0x53, 0xd2, 0x45, 0xc7, 0x59, 0x53,
	0xa7, 0x3b, 0xed, 0xba, 0x4e, 0xef, 0x2c, 0xcc, 0x39, 0x37, 0x4a, 0x19, 0x3d, 0x71, 0x52, 0xc1,
	0xf8, 0x9d, 0x54, 0x40, 0x77, 0x86, 0xe1, 0x97, 0x80, 0xf4, 0x5f, 0xc3, 0x0a, 0x72, 0xbc, 0xfc,
	0x19, 0x09, 0x79, 0x69, 0xf1, 0xf2, 0x51, 0x76, 0xd2, 0xd4, 0xe9, 0x2d, 0x5e, 0x5a, 0x0b, 0xda,
	0x4d, 0x73, 0xef, 0xa1, 0xbe, 0x1a, 0x3f, 0xf2, 0x09, 0x69, 0x4c, 0x21, 0xca, 0x8e, 0x9b, 0x3a,
	0x3d, 0xdc, 0x9a, 0x94, 0xd4, 0x3e, 0x29, 0x1d, 0x8f, 0x48, 0x57, 0x9b, 0xab, 0x29, 0x54, 0x4b,
	0xcc, 0xe3, 0x0f, 0x1b, 0x54, 0x4b, 0x7a, 0xa0, 0xcd, 0xd5, 0x45, 0xb5, 0x8c, 0x9f, 0x90, 0x9e,
	0x86, 0x0a, 0x35, 0x8c, 0x27, 0xca, 0x8e, 0xfc, 0x05, 0xb6, 0x1a, 0xed, 0xfa, 0xdd, 0x45, 0xb5,
	0x1c, 0x16, 0xe4, 0xe8, 0xed, 0x7c, 0x2e, 0xb9, 0x64, 0xed, 0x51, 0x1f, 0x93, 0x8e, 0x35, 0x39,
	0x6c, 0xce, 0x7a, 0x1b, 0x73, 0x31, 0x39, 0x5c, 0xd7, 0x69, 0x47, 0x6a, 0xf7, 0x9c, 0x22, 0x8b,
	0x53, 0x12, 0x39, 0xe9, 0xf2, 0xed, 0x37, 0xeb, 0x37, 0x75, 0xda, 0x0a, 0xb4, 0x5d, 0x7c, 0xbc,
	0x02, 0x0a, 0x8e, 0xc7, 0xdc, 0x84, 0xef, 0x39, 0x45, 0x1c, 0xfe, 0x0c, 0x48, 0xf4, 0xc6, 0x58,
	0x96, 0xff, 0x6f, 0x2c, 0x52, 0x12, 0x29, 0xef, 0xc1, 0x77, 0x84, 0xed, 0x3b, 0x50, 0xa0, 0xed,
	0xe2, 0x0d, 0x4c, 0x08, 0x10, 0x9b, 0xd9, 0x40, 0x03, 0x0a, 0xb4, 0x5d, 0xe2, 0x11, 0xe9, 0x09,
	0x10, 0x25, 0x77, 0x20, 0x30, 0x84, 0xb0, 0x0d, 0x61, 0xab, 0xd1, 0xdd, 0x2e, 0x7e, 0x4f, 0x4e,
	0x72, 0x56, 0xb8, 0xa9, 0x05, 0x6e, 0x56, 0x60, 0xa7, 0x82, 0x39, 0xc0, 0xc1, 0x09, 0xb3, 0xa7,
	0x4d, 0x9d, 0xfe, 0x5d, 0xfc, 0xd7, 0x04, 0x1c, 0x7b, 0x27, 0x6d, 0x8d, 0x2f, 0x99, 0x83, 0xec,
	0xde, 0xd7, 0xf5, 0x20, 0xf8, 0xb6, 0x1e, 0x04, 0xdf, 0xd7, 0x83, 0xe0, 0xf3, 0x8f, 0xc1, 0x8d,
	0x0f, 0x11, 0xfe, 0x6a, 0xb3, 0x03, 0xfc, 0x49, 0x9e, 0xfd, 0x0e, 0x00, 0x00, 0xff, 0xff, 0x99,
	0x11, 0x83, 0x9b, 0x7a, 0x03, 0x00, 0x00,
}
