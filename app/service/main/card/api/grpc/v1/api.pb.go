// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: app/service/main/card/api/grpc/v1/api.proto

/*
	Package v1 is a generated protocol buffer package.

	use {app_id}.{version} as package name

	It is generated from these files:
		app/service/main/card/api/grpc/v1/api.proto

	It has these top-level messages:
		AllGroupReply
		AllGroupReq
		CardHotsReply
		CardHotsReq
		CardReply
		CardReq
		CardsByGidReply
		CardsByGidReq
		DemountEquipReply
		DemountEquipReq
		EquipReply
		EquipReq
		ModelAllGroupResp
		ModelArgEquip
		ModelCard
		ModelGroupInfo
		ModelUserCard
		UserCardReply
		UserCardReq
		UserCardsReply
		UserCardsReq
*/
package v1

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import context "golang.org/x/net/context"
import grpc "google.golang.org/grpc"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type AllGroupReply struct {
	Res *ModelAllGroupResp `protobuf:"bytes,1,opt,name=res" json:"res,omitempty"`
}

func (m *AllGroupReply) Reset()                    { *m = AllGroupReply{} }
func (m *AllGroupReply) String() string            { return proto.CompactTextString(m) }
func (*AllGroupReply) ProtoMessage()               {}
func (*AllGroupReply) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{0} }

func (m *AllGroupReply) GetRes() *ModelAllGroupResp {
	if m != nil {
		return m.Res
	}
	return nil
}

type AllGroupReq struct {
	Mid int64 `protobuf:"varint,2,opt,name=mid,proto3" json:"mid,omitempty"`
}

func (m *AllGroupReq) Reset()                    { *m = AllGroupReq{} }
func (m *AllGroupReq) String() string            { return proto.CompactTextString(m) }
func (*AllGroupReq) ProtoMessage()               {}
func (*AllGroupReq) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{1} }

func (m *AllGroupReq) GetMid() int64 {
	if m != nil {
		return m.Mid
	}
	return 0
}

type CardHotsReply struct {
	Data_0 []*ModelCard `protobuf:"bytes,1,rep,name=data_0,json=data0" json:"data_0,omitempty"`
}

func (m *CardHotsReply) Reset()                    { *m = CardHotsReply{} }
func (m *CardHotsReply) String() string            { return proto.CompactTextString(m) }
func (*CardHotsReply) ProtoMessage()               {}
func (*CardHotsReply) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{2} }

func (m *CardHotsReply) GetData_0() []*ModelCard {
	if m != nil {
		return m.Data_0
	}
	return nil
}

type CardHotsReq struct {
}

func (m *CardHotsReq) Reset()                    { *m = CardHotsReq{} }
func (m *CardHotsReq) String() string            { return proto.CompactTextString(m) }
func (*CardHotsReq) ProtoMessage()               {}
func (*CardHotsReq) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{3} }

type CardReply struct {
	Data_0 *ModelCard `protobuf:"bytes,1,opt,name=data_0,json=data0" json:"data_0,omitempty"`
}

func (m *CardReply) Reset()                    { *m = CardReply{} }
func (m *CardReply) String() string            { return proto.CompactTextString(m) }
func (*CardReply) ProtoMessage()               {}
func (*CardReply) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{4} }

func (m *CardReply) GetData_0() *ModelCard {
	if m != nil {
		return m.Data_0
	}
	return nil
}

type CardReq struct {
	Id int64 `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *CardReq) Reset()                    { *m = CardReq{} }
func (m *CardReq) String() string            { return proto.CompactTextString(m) }
func (*CardReq) ProtoMessage()               {}
func (*CardReq) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{5} }

func (m *CardReq) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type CardsByGidReply struct {
	Data_0 []*ModelCard `protobuf:"bytes,1,rep,name=data_0,json=data0" json:"data_0,omitempty"`
}

func (m *CardsByGidReply) Reset()                    { *m = CardsByGidReply{} }
func (m *CardsByGidReply) String() string            { return proto.CompactTextString(m) }
func (*CardsByGidReply) ProtoMessage()               {}
func (*CardsByGidReply) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{6} }

func (m *CardsByGidReply) GetData_0() []*ModelCard {
	if m != nil {
		return m.Data_0
	}
	return nil
}

type CardsByGidReq struct {
	Gid int64 `protobuf:"varint,2,opt,name=gid,proto3" json:"gid,omitempty"`
}

func (m *CardsByGidReq) Reset()                    { *m = CardsByGidReq{} }
func (m *CardsByGidReq) String() string            { return proto.CompactTextString(m) }
func (*CardsByGidReq) ProtoMessage()               {}
func (*CardsByGidReq) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{7} }

func (m *CardsByGidReq) GetGid() int64 {
	if m != nil {
		return m.Gid
	}
	return 0
}

type DemountEquipReply struct {
}

func (m *DemountEquipReply) Reset()                    { *m = DemountEquipReply{} }
func (m *DemountEquipReply) String() string            { return proto.CompactTextString(m) }
func (*DemountEquipReply) ProtoMessage()               {}
func (*DemountEquipReply) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{8} }

type DemountEquipReq struct {
	Mid int64 `protobuf:"varint,2,opt,name=mid,proto3" json:"mid,omitempty"`
}

func (m *DemountEquipReq) Reset()                    { *m = DemountEquipReq{} }
func (m *DemountEquipReq) String() string            { return proto.CompactTextString(m) }
func (*DemountEquipReq) ProtoMessage()               {}
func (*DemountEquipReq) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{9} }

func (m *DemountEquipReq) GetMid() int64 {
	if m != nil {
		return m.Mid
	}
	return 0
}

type EquipReply struct {
}

func (m *EquipReply) Reset()                    { *m = EquipReply{} }
func (m *EquipReply) String() string            { return proto.CompactTextString(m) }
func (*EquipReply) ProtoMessage()               {}
func (*EquipReply) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{10} }

type EquipReq struct {
	Arg *ModelArgEquip `protobuf:"bytes,2,opt,name=arg" json:"arg,omitempty"`
}

func (m *EquipReq) Reset()                    { *m = EquipReq{} }
func (m *EquipReq) String() string            { return proto.CompactTextString(m) }
func (*EquipReq) ProtoMessage()               {}
func (*EquipReq) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{11} }

func (m *EquipReq) GetArg() *ModelArgEquip {
	if m != nil {
		return m.Arg
	}
	return nil
}

type ModelAllGroupResp struct {
	List     []*ModelGroupInfo `protobuf:"bytes,1,rep,name=list" json:"list,omitempty"`
	UserCard *ModelUserCard    `protobuf:"bytes,2,opt,name=user_card,json=userCard" json:"user_card,omitempty"`
}

func (m *ModelAllGroupResp) Reset()                    { *m = ModelAllGroupResp{} }
func (m *ModelAllGroupResp) String() string            { return proto.CompactTextString(m) }
func (*ModelAllGroupResp) ProtoMessage()               {}
func (*ModelAllGroupResp) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{12} }

func (m *ModelAllGroupResp) GetList() []*ModelGroupInfo {
	if m != nil {
		return m.List
	}
	return nil
}

func (m *ModelAllGroupResp) GetUserCard() *ModelUserCard {
	if m != nil {
		return m.UserCard
	}
	return nil
}

type ModelArgEquip struct {
	Mid    int64 `protobuf:"varint,1,opt,name=mid,proto3" json:"mid,omitempty"`
	CardId int64 `protobuf:"varint,2,opt,name=card_id,json=cardId,proto3" json:"card_id,omitempty"`
}

func (m *ModelArgEquip) Reset()                    { *m = ModelArgEquip{} }
func (m *ModelArgEquip) String() string            { return proto.CompactTextString(m) }
func (*ModelArgEquip) ProtoMessage()               {}
func (*ModelArgEquip) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{13} }

func (m *ModelArgEquip) GetMid() int64 {
	if m != nil {
		return m.Mid
	}
	return 0
}

func (m *ModelArgEquip) GetCardId() int64 {
	if m != nil {
		return m.CardId
	}
	return 0
}

type ModelCard struct {
	Id           int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name         string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	State        int32  `protobuf:"varint,3,opt,name=state,proto3" json:"state,omitempty"`
	Deleted      int32  `protobuf:"varint,4,opt,name=deleted,proto3" json:"deleted,omitempty"`
	IsHot        int32  `protobuf:"varint,5,opt,name=is_hot,json=isHot,proto3" json:"is_hot,omitempty"`
	CardUrl      string `protobuf:"bytes,6,opt,name=card_url,json=cardUrl,proto3" json:"card_url,omitempty"`
	BigCardUrl   string `protobuf:"bytes,7,opt,name=big_card_url,json=bigCardUrl,proto3" json:"big_card_url,omitempty"`
	CardType     int32  `protobuf:"varint,8,opt,name=card_type,json=cardType,proto3" json:"card_type,omitempty"`
	CardTypeName string `protobuf:"bytes,9,opt,name=card_type_name,json=cardTypeName,proto3" json:"card_type_name,omitempty"`
}

func (m *ModelCard) Reset()                    { *m = ModelCard{} }
func (m *ModelCard) String() string            { return proto.CompactTextString(m) }
func (*ModelCard) ProtoMessage()               {}
func (*ModelCard) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{14} }

func (m *ModelCard) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *ModelCard) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ModelCard) GetState() int32 {
	if m != nil {
		return m.State
	}
	return 0
}

func (m *ModelCard) GetDeleted() int32 {
	if m != nil {
		return m.Deleted
	}
	return 0
}

func (m *ModelCard) GetIsHot() int32 {
	if m != nil {
		return m.IsHot
	}
	return 0
}

func (m *ModelCard) GetCardUrl() string {
	if m != nil {
		return m.CardUrl
	}
	return ""
}

func (m *ModelCard) GetBigCardUrl() string {
	if m != nil {
		return m.BigCardUrl
	}
	return ""
}

func (m *ModelCard) GetCardType() int32 {
	if m != nil {
		return m.CardType
	}
	return 0
}

func (m *ModelCard) GetCardTypeName() string {
	if m != nil {
		return m.CardTypeName
	}
	return ""
}

type ModelGroupInfo struct {
	GroupId   int64        `protobuf:"varint,1,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	GroupName string       `protobuf:"bytes,2,opt,name=group_name,json=groupName,proto3" json:"group_name,omitempty"`
	Cards     []*ModelCard `protobuf:"bytes,3,rep,name=cards" json:"cards,omitempty"`
}

func (m *ModelGroupInfo) Reset()                    { *m = ModelGroupInfo{} }
func (m *ModelGroupInfo) String() string            { return proto.CompactTextString(m) }
func (*ModelGroupInfo) ProtoMessage()               {}
func (*ModelGroupInfo) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{15} }

func (m *ModelGroupInfo) GetGroupId() int64 {
	if m != nil {
		return m.GroupId
	}
	return 0
}

func (m *ModelGroupInfo) GetGroupName() string {
	if m != nil {
		return m.GroupName
	}
	return ""
}

func (m *ModelGroupInfo) GetCards() []*ModelCard {
	if m != nil {
		return m.Cards
	}
	return nil
}

type ModelUserCard struct {
	Mid          int64  `protobuf:"varint,1,opt,name=mid,proto3" json:"mid,omitempty"`
	Id           int64  `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	CardUrl      string `protobuf:"bytes,3,opt,name=card_url,json=cardUrl,proto3" json:"card_url,omitempty"`
	CardType     int32  `protobuf:"varint,4,opt,name=card_type,json=cardType,proto3" json:"card_type,omitempty"`
	Name         string `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`
	ExpireTime   int64  `protobuf:"varint,6,opt,name=expire_time,json=expireTime,proto3" json:"expire_time,omitempty"`
	CardTypeName string `protobuf:"bytes,7,opt,name=card_type_name,json=cardTypeName,proto3" json:"card_type_name,omitempty"`
	BigCardUrl   string `protobuf:"bytes,8,opt,name=big_card_url,json=bigCardUrl,proto3" json:"big_card_url,omitempty"`
}

func (m *ModelUserCard) Reset()                    { *m = ModelUserCard{} }
func (m *ModelUserCard) String() string            { return proto.CompactTextString(m) }
func (*ModelUserCard) ProtoMessage()               {}
func (*ModelUserCard) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{16} }

func (m *ModelUserCard) GetMid() int64 {
	if m != nil {
		return m.Mid
	}
	return 0
}

func (m *ModelUserCard) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *ModelUserCard) GetCardUrl() string {
	if m != nil {
		return m.CardUrl
	}
	return ""
}

func (m *ModelUserCard) GetCardType() int32 {
	if m != nil {
		return m.CardType
	}
	return 0
}

func (m *ModelUserCard) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ModelUserCard) GetExpireTime() int64 {
	if m != nil {
		return m.ExpireTime
	}
	return 0
}

func (m *ModelUserCard) GetCardTypeName() string {
	if m != nil {
		return m.CardTypeName
	}
	return ""
}

func (m *ModelUserCard) GetBigCardUrl() string {
	if m != nil {
		return m.BigCardUrl
	}
	return ""
}

type UserCardReply struct {
	Res *ModelUserCard `protobuf:"bytes,1,opt,name=res" json:"res,omitempty"`
}

func (m *UserCardReply) Reset()                    { *m = UserCardReply{} }
func (m *UserCardReply) String() string            { return proto.CompactTextString(m) }
func (*UserCardReply) ProtoMessage()               {}
func (*UserCardReply) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{17} }

func (m *UserCardReply) GetRes() *ModelUserCard {
	if m != nil {
		return m.Res
	}
	return nil
}

type UserCardReq struct {
	Mid int64 `protobuf:"varint,2,opt,name=mid,proto3" json:"mid,omitempty"`
}

func (m *UserCardReq) Reset()                    { *m = UserCardReq{} }
func (m *UserCardReq) String() string            { return proto.CompactTextString(m) }
func (*UserCardReq) ProtoMessage()               {}
func (*UserCardReq) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{18} }

func (m *UserCardReq) GetMid() int64 {
	if m != nil {
		return m.Mid
	}
	return 0
}

type UserCardsReply struct {
	Res map[int64]*ModelUserCard `protobuf:"bytes,1,rep,name=res" json:"res,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *UserCardsReply) Reset()                    { *m = UserCardsReply{} }
func (m *UserCardsReply) String() string            { return proto.CompactTextString(m) }
func (*UserCardsReply) ProtoMessage()               {}
func (*UserCardsReply) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{19} }

func (m *UserCardsReply) GetRes() map[int64]*ModelUserCard {
	if m != nil {
		return m.Res
	}
	return nil
}

type UserCardsReq struct {
	Mids []int64 `protobuf:"varint,2,rep,packed,name=mids" json:"mids,omitempty"`
}

func (m *UserCardsReq) Reset()                    { *m = UserCardsReq{} }
func (m *UserCardsReq) String() string            { return proto.CompactTextString(m) }
func (*UserCardsReq) ProtoMessage()               {}
func (*UserCardsReq) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{20} }

func (m *UserCardsReq) GetMids() []int64 {
	if m != nil {
		return m.Mids
	}
	return nil
}

func init() {
	proto.RegisterType((*AllGroupReply)(nil), "card.service.v1.AllGroupReply")
	proto.RegisterType((*AllGroupReq)(nil), "card.service.v1.AllGroupReq")
	proto.RegisterType((*CardHotsReply)(nil), "card.service.v1.CardHotsReply")
	proto.RegisterType((*CardHotsReq)(nil), "card.service.v1.CardHotsReq")
	proto.RegisterType((*CardReply)(nil), "card.service.v1.CardReply")
	proto.RegisterType((*CardReq)(nil), "card.service.v1.CardReq")
	proto.RegisterType((*CardsByGidReply)(nil), "card.service.v1.CardsByGidReply")
	proto.RegisterType((*CardsByGidReq)(nil), "card.service.v1.CardsByGidReq")
	proto.RegisterType((*DemountEquipReply)(nil), "card.service.v1.DemountEquipReply")
	proto.RegisterType((*DemountEquipReq)(nil), "card.service.v1.DemountEquipReq")
	proto.RegisterType((*EquipReply)(nil), "card.service.v1.EquipReply")
	proto.RegisterType((*EquipReq)(nil), "card.service.v1.EquipReq")
	proto.RegisterType((*ModelAllGroupResp)(nil), "card.service.v1.ModelAllGroupResp")
	proto.RegisterType((*ModelArgEquip)(nil), "card.service.v1.ModelArgEquip")
	proto.RegisterType((*ModelCard)(nil), "card.service.v1.ModelCard")
	proto.RegisterType((*ModelGroupInfo)(nil), "card.service.v1.ModelGroupInfo")
	proto.RegisterType((*ModelUserCard)(nil), "card.service.v1.ModelUserCard")
	proto.RegisterType((*UserCardReply)(nil), "card.service.v1.UserCardReply")
	proto.RegisterType((*UserCardReq)(nil), "card.service.v1.UserCardReq")
	proto.RegisterType((*UserCardsReply)(nil), "card.service.v1.UserCardsReply")
	proto.RegisterType((*UserCardsReq)(nil), "card.service.v1.UserCardsReq")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Card service

type CardClient interface {
	// Card get card info.
	Card(ctx context.Context, in *CardReq, opts ...grpc.CallOption) (*CardReply, error)
	// CardHots get card hots.
	CardHots(ctx context.Context, in *CardHotsReq, opts ...grpc.CallOption) (*CardHotsReply, error)
	// CardsByGid get card by gid.
	CardsByGid(ctx context.Context, in *CardsByGidReq, opts ...grpc.CallOption) (*CardsByGidReply, error)
	// UserCard get user card info.
	UserCard(ctx context.Context, in *UserCardReq, opts ...grpc.CallOption) (*UserCardReply, error)
	// UserCards get user card infos.
	UserCards(ctx context.Context, in *UserCardsReq, opts ...grpc.CallOption) (*UserCardsReply, error)
	// Equip user equip card.
	Equip(ctx context.Context, in *EquipReq, opts ...grpc.CallOption) (*EquipReply, error)
	// DemountEquip delete equip.
	DemountEquip(ctx context.Context, in *DemountEquipReq, opts ...grpc.CallOption) (*DemountEquipReply, error)
	// AllGroup all group.
	AllGroup(ctx context.Context, in *AllGroupReq, opts ...grpc.CallOption) (*AllGroupReply, error)
}

type cardClient struct {
	cc *grpc.ClientConn
}

func NewCardClient(cc *grpc.ClientConn) CardClient {
	return &cardClient{cc}
}

func (c *cardClient) Card(ctx context.Context, in *CardReq, opts ...grpc.CallOption) (*CardReply, error) {
	out := new(CardReply)
	err := grpc.Invoke(ctx, "/card.service.v1.Card/Card", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cardClient) CardHots(ctx context.Context, in *CardHotsReq, opts ...grpc.CallOption) (*CardHotsReply, error) {
	out := new(CardHotsReply)
	err := grpc.Invoke(ctx, "/card.service.v1.Card/CardHots", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cardClient) CardsByGid(ctx context.Context, in *CardsByGidReq, opts ...grpc.CallOption) (*CardsByGidReply, error) {
	out := new(CardsByGidReply)
	err := grpc.Invoke(ctx, "/card.service.v1.Card/CardsByGid", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cardClient) UserCard(ctx context.Context, in *UserCardReq, opts ...grpc.CallOption) (*UserCardReply, error) {
	out := new(UserCardReply)
	err := grpc.Invoke(ctx, "/card.service.v1.Card/UserCard", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cardClient) UserCards(ctx context.Context, in *UserCardsReq, opts ...grpc.CallOption) (*UserCardsReply, error) {
	out := new(UserCardsReply)
	err := grpc.Invoke(ctx, "/card.service.v1.Card/UserCards", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cardClient) Equip(ctx context.Context, in *EquipReq, opts ...grpc.CallOption) (*EquipReply, error) {
	out := new(EquipReply)
	err := grpc.Invoke(ctx, "/card.service.v1.Card/Equip", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cardClient) DemountEquip(ctx context.Context, in *DemountEquipReq, opts ...grpc.CallOption) (*DemountEquipReply, error) {
	out := new(DemountEquipReply)
	err := grpc.Invoke(ctx, "/card.service.v1.Card/DemountEquip", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cardClient) AllGroup(ctx context.Context, in *AllGroupReq, opts ...grpc.CallOption) (*AllGroupReply, error) {
	out := new(AllGroupReply)
	err := grpc.Invoke(ctx, "/card.service.v1.Card/AllGroup", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Card service

type CardServer interface {
	// Card get card info.
	Card(context.Context, *CardReq) (*CardReply, error)
	// CardHots get card hots.
	CardHots(context.Context, *CardHotsReq) (*CardHotsReply, error)
	// CardsByGid get card by gid.
	CardsByGid(context.Context, *CardsByGidReq) (*CardsByGidReply, error)
	// UserCard get user card info.
	UserCard(context.Context, *UserCardReq) (*UserCardReply, error)
	// UserCards get user card infos.
	UserCards(context.Context, *UserCardsReq) (*UserCardsReply, error)
	// Equip user equip card.
	Equip(context.Context, *EquipReq) (*EquipReply, error)
	// DemountEquip delete equip.
	DemountEquip(context.Context, *DemountEquipReq) (*DemountEquipReply, error)
	// AllGroup all group.
	AllGroup(context.Context, *AllGroupReq) (*AllGroupReply, error)
}

func RegisterCardServer(s *grpc.Server, srv CardServer) {
	s.RegisterService(&_Card_serviceDesc, srv)
}

func _Card_Card_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CardReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CardServer).Card(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/card.service.v1.Card/Card",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CardServer).Card(ctx, req.(*CardReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Card_CardHots_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CardHotsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CardServer).CardHots(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/card.service.v1.Card/CardHots",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CardServer).CardHots(ctx, req.(*CardHotsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Card_CardsByGid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CardsByGidReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CardServer).CardsByGid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/card.service.v1.Card/CardsByGid",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CardServer).CardsByGid(ctx, req.(*CardsByGidReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Card_UserCard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserCardReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CardServer).UserCard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/card.service.v1.Card/UserCard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CardServer).UserCard(ctx, req.(*UserCardReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Card_UserCards_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserCardsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CardServer).UserCards(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/card.service.v1.Card/UserCards",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CardServer).UserCards(ctx, req.(*UserCardsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Card_Equip_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EquipReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CardServer).Equip(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/card.service.v1.Card/Equip",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CardServer).Equip(ctx, req.(*EquipReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Card_DemountEquip_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DemountEquipReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CardServer).DemountEquip(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/card.service.v1.Card/DemountEquip",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CardServer).DemountEquip(ctx, req.(*DemountEquipReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Card_AllGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AllGroupReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CardServer).AllGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/card.service.v1.Card/AllGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CardServer).AllGroup(ctx, req.(*AllGroupReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _Card_serviceDesc = grpc.ServiceDesc{
	ServiceName: "card.service.v1.Card",
	HandlerType: (*CardServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Card",
			Handler:    _Card_Card_Handler,
		},
		{
			MethodName: "CardHots",
			Handler:    _Card_CardHots_Handler,
		},
		{
			MethodName: "CardsByGid",
			Handler:    _Card_CardsByGid_Handler,
		},
		{
			MethodName: "UserCard",
			Handler:    _Card_UserCard_Handler,
		},
		{
			MethodName: "UserCards",
			Handler:    _Card_UserCards_Handler,
		},
		{
			MethodName: "Equip",
			Handler:    _Card_Equip_Handler,
		},
		{
			MethodName: "DemountEquip",
			Handler:    _Card_DemountEquip_Handler,
		},
		{
			MethodName: "AllGroup",
			Handler:    _Card_AllGroup_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "app/service/main/card/api/grpc/v1/api.proto",
}

func (m *AllGroupReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AllGroupReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Res != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Res.Size()))
		n1, err := m.Res.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	return i, nil
}

func (m *AllGroupReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AllGroupReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Mid != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Mid))
	}
	return i, nil
}

func (m *CardHotsReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CardHotsReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Data_0) > 0 {
		for _, msg := range m.Data_0 {
			dAtA[i] = 0xa
			i++
			i = encodeVarintApi(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *CardHotsReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CardHotsReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *CardReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CardReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Data_0 != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Data_0.Size()))
		n2, err := m.Data_0.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	return i, nil
}

func (m *CardReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CardReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Id))
	}
	return i, nil
}

func (m *CardsByGidReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CardsByGidReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Data_0) > 0 {
		for _, msg := range m.Data_0 {
			dAtA[i] = 0xa
			i++
			i = encodeVarintApi(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *CardsByGidReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CardsByGidReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Gid != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Gid))
	}
	return i, nil
}

func (m *DemountEquipReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DemountEquipReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *DemountEquipReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DemountEquipReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Mid != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Mid))
	}
	return i, nil
}

func (m *EquipReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EquipReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *EquipReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EquipReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Arg != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Arg.Size()))
		n3, err := m.Arg.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	return i, nil
}

func (m *ModelAllGroupResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ModelAllGroupResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, msg := range m.List {
			dAtA[i] = 0xa
			i++
			i = encodeVarintApi(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.UserCard != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.UserCard.Size()))
		n4, err := m.UserCard.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	return i, nil
}

func (m *ModelArgEquip) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ModelArgEquip) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Mid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Mid))
	}
	if m.CardId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.CardId))
	}
	return i, nil
}

func (m *ModelCard) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ModelCard) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Id))
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if m.State != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.State))
	}
	if m.Deleted != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Deleted))
	}
	if m.IsHot != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.IsHot))
	}
	if len(m.CardUrl) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.CardUrl)))
		i += copy(dAtA[i:], m.CardUrl)
	}
	if len(m.BigCardUrl) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.BigCardUrl)))
		i += copy(dAtA[i:], m.BigCardUrl)
	}
	if m.CardType != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.CardType))
	}
	if len(m.CardTypeName) > 0 {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.CardTypeName)))
		i += copy(dAtA[i:], m.CardTypeName)
	}
	return i, nil
}

func (m *ModelGroupInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ModelGroupInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.GroupId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.GroupId))
	}
	if len(m.GroupName) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.GroupName)))
		i += copy(dAtA[i:], m.GroupName)
	}
	if len(m.Cards) > 0 {
		for _, msg := range m.Cards {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintApi(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *ModelUserCard) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ModelUserCard) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Mid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Mid))
	}
	if m.Id != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Id))
	}
	if len(m.CardUrl) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.CardUrl)))
		i += copy(dAtA[i:], m.CardUrl)
	}
	if m.CardType != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.CardType))
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if m.ExpireTime != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.ExpireTime))
	}
	if len(m.CardTypeName) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.CardTypeName)))
		i += copy(dAtA[i:], m.CardTypeName)
	}
	if len(m.BigCardUrl) > 0 {
		dAtA[i] = 0x42
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.BigCardUrl)))
		i += copy(dAtA[i:], m.BigCardUrl)
	}
	return i, nil
}

func (m *UserCardReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserCardReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Res != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Res.Size()))
		n5, err := m.Res.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	return i, nil
}

func (m *UserCardReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserCardReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Mid != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Mid))
	}
	return i, nil
}

func (m *UserCardsReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserCardsReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Res) > 0 {
		for k, _ := range m.Res {
			dAtA[i] = 0xa
			i++
			v := m.Res[k]
			msgSize := 0
			if v != nil {
				msgSize = v.Size()
				msgSize += 1 + sovApi(uint64(msgSize))
			}
			mapSize := 1 + sovApi(uint64(k)) + msgSize
			i = encodeVarintApi(dAtA, i, uint64(mapSize))
			dAtA[i] = 0x8
			i++
			i = encodeVarintApi(dAtA, i, uint64(k))
			if v != nil {
				dAtA[i] = 0x12
				i++
				i = encodeVarintApi(dAtA, i, uint64(v.Size()))
				n6, err := v.MarshalTo(dAtA[i:])
				if err != nil {
					return 0, err
				}
				i += n6
			}
		}
	}
	return i, nil
}

func (m *UserCardsReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserCardsReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Mids) > 0 {
		dAtA8 := make([]byte, len(m.Mids)*10)
		var j7 int
		for _, num1 := range m.Mids {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA8[j7] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j7++
			}
			dAtA8[j7] = uint8(num)
			j7++
		}
		dAtA[i] = 0x12
		i++
		i = encodeVarintApi(dAtA, i, uint64(j7))
		i += copy(dAtA[i:], dAtA8[:j7])
	}
	return i, nil
}

func encodeVarintApi(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *AllGroupReply) Size() (n int) {
	var l int
	_ = l
	if m.Res != nil {
		l = m.Res.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}

func (m *AllGroupReq) Size() (n int) {
	var l int
	_ = l
	if m.Mid != 0 {
		n += 1 + sovApi(uint64(m.Mid))
	}
	return n
}

func (m *CardHotsReply) Size() (n int) {
	var l int
	_ = l
	if len(m.Data_0) > 0 {
		for _, e := range m.Data_0 {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	return n
}

func (m *CardHotsReq) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *CardReply) Size() (n int) {
	var l int
	_ = l
	if m.Data_0 != nil {
		l = m.Data_0.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}

func (m *CardReq) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovApi(uint64(m.Id))
	}
	return n
}

func (m *CardsByGidReply) Size() (n int) {
	var l int
	_ = l
	if len(m.Data_0) > 0 {
		for _, e := range m.Data_0 {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	return n
}

func (m *CardsByGidReq) Size() (n int) {
	var l int
	_ = l
	if m.Gid != 0 {
		n += 1 + sovApi(uint64(m.Gid))
	}
	return n
}

func (m *DemountEquipReply) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *DemountEquipReq) Size() (n int) {
	var l int
	_ = l
	if m.Mid != 0 {
		n += 1 + sovApi(uint64(m.Mid))
	}
	return n
}

func (m *EquipReply) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *EquipReq) Size() (n int) {
	var l int
	_ = l
	if m.Arg != nil {
		l = m.Arg.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}

func (m *ModelAllGroupResp) Size() (n int) {
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.UserCard != nil {
		l = m.UserCard.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}

func (m *ModelArgEquip) Size() (n int) {
	var l int
	_ = l
	if m.Mid != 0 {
		n += 1 + sovApi(uint64(m.Mid))
	}
	if m.CardId != 0 {
		n += 1 + sovApi(uint64(m.CardId))
	}
	return n
}

func (m *ModelCard) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovApi(uint64(m.Id))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.State != 0 {
		n += 1 + sovApi(uint64(m.State))
	}
	if m.Deleted != 0 {
		n += 1 + sovApi(uint64(m.Deleted))
	}
	if m.IsHot != 0 {
		n += 1 + sovApi(uint64(m.IsHot))
	}
	l = len(m.CardUrl)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.BigCardUrl)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.CardType != 0 {
		n += 1 + sovApi(uint64(m.CardType))
	}
	l = len(m.CardTypeName)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}

func (m *ModelGroupInfo) Size() (n int) {
	var l int
	_ = l
	if m.GroupId != 0 {
		n += 1 + sovApi(uint64(m.GroupId))
	}
	l = len(m.GroupName)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if len(m.Cards) > 0 {
		for _, e := range m.Cards {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	return n
}

func (m *ModelUserCard) Size() (n int) {
	var l int
	_ = l
	if m.Mid != 0 {
		n += 1 + sovApi(uint64(m.Mid))
	}
	if m.Id != 0 {
		n += 1 + sovApi(uint64(m.Id))
	}
	l = len(m.CardUrl)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.CardType != 0 {
		n += 1 + sovApi(uint64(m.CardType))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.ExpireTime != 0 {
		n += 1 + sovApi(uint64(m.ExpireTime))
	}
	l = len(m.CardTypeName)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.BigCardUrl)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}

func (m *UserCardReply) Size() (n int) {
	var l int
	_ = l
	if m.Res != nil {
		l = m.Res.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}

func (m *UserCardReq) Size() (n int) {
	var l int
	_ = l
	if m.Mid != 0 {
		n += 1 + sovApi(uint64(m.Mid))
	}
	return n
}

func (m *UserCardsReply) Size() (n int) {
	var l int
	_ = l
	if len(m.Res) > 0 {
		for k, v := range m.Res {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovApi(uint64(l))
			}
			mapEntrySize := 1 + sovApi(uint64(k)) + l
			n += mapEntrySize + 1 + sovApi(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *UserCardsReq) Size() (n int) {
	var l int
	_ = l
	if len(m.Mids) > 0 {
		l = 0
		for _, e := range m.Mids {
			l += sovApi(uint64(e))
		}
		n += 1 + sovApi(uint64(l)) + l
	}
	return n
}

func sovApi(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozApi(x uint64) (n int) {
	return sovApi(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *AllGroupReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AllGroupReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AllGroupReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Res", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Res == nil {
				m.Res = &ModelAllGroupResp{}
			}
			if err := m.Res.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AllGroupReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AllGroupReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AllGroupReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CardHotsReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CardHotsReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CardHotsReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data_0", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data_0 = append(m.Data_0, &ModelCard{})
			if err := m.Data_0[len(m.Data_0)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CardHotsReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CardHotsReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CardHotsReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CardReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CardReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CardReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data_0", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data_0 == nil {
				m.Data_0 = &ModelCard{}
			}
			if err := m.Data_0.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CardReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CardReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CardReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CardsByGidReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CardsByGidReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CardsByGidReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data_0", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data_0 = append(m.Data_0, &ModelCard{})
			if err := m.Data_0[len(m.Data_0)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CardsByGidReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CardsByGidReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CardsByGidReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gid", wireType)
			}
			m.Gid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Gid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DemountEquipReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DemountEquipReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DemountEquipReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DemountEquipReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DemountEquipReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DemountEquipReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EquipReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EquipReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EquipReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EquipReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EquipReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EquipReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Arg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Arg == nil {
				m.Arg = &ModelArgEquip{}
			}
			if err := m.Arg.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ModelAllGroupResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ModelAllGroupResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ModelAllGroupResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &ModelGroupInfo{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserCard", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UserCard == nil {
				m.UserCard = &ModelUserCard{}
			}
			if err := m.UserCard.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ModelArgEquip) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ModelArgEquip: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ModelArgEquip: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CardId", wireType)
			}
			m.CardId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CardId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ModelCard) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ModelCard: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ModelCard: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Deleted", wireType)
			}
			m.Deleted = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Deleted |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsHot", wireType)
			}
			m.IsHot = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IsHot |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CardUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CardUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BigCardUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BigCardUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CardType", wireType)
			}
			m.CardType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CardType |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CardTypeName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CardTypeName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ModelGroupInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ModelGroupInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ModelGroupInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupId", wireType)
			}
			m.GroupId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GroupId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GroupName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cards", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cards = append(m.Cards, &ModelCard{})
			if err := m.Cards[len(m.Cards)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ModelUserCard) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ModelUserCard: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ModelUserCard: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CardUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CardUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CardType", wireType)
			}
			m.CardType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CardType |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpireTime", wireType)
			}
			m.ExpireTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExpireTime |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CardTypeName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CardTypeName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BigCardUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BigCardUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserCardReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserCardReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserCardReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Res", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Res == nil {
				m.Res = &ModelUserCard{}
			}
			if err := m.Res.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserCardReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserCardReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserCardReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserCardsReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserCardsReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserCardsReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Res", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Res == nil {
				m.Res = make(map[int64]*ModelUserCard)
			}
			var mapkey int64
			var mapvalue *ModelUserCard
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= (int64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= (int(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthApi
					}
					postmsgIndex := iNdEx + mapmsglen
					if mapmsglen < 0 {
						return ErrInvalidLengthApi
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &ModelUserCard{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipApi(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthApi
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Res[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserCardsReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserCardsReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserCardsReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Mids = append(m.Mids, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthApi
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Mids = append(m.Mids, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Mids", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipApi(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowApi
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowApi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowApi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthApi
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowApi
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipApi(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthApi = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowApi   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("app/service/main/card/api/grpc/v1/api.proto", fileDescriptorApi) }

var fileDescriptorApi = []byte{
	// 854 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x56, 0xcb, 0x8e, 0xe3, 0x44,
	0x14, 0x55, 0xc5, 0x71, 0x12, 0xdf, 0x3c, 0x7a, 0xa6, 0x00, 0xe1, 0xf6, 0xcc, 0x24, 0xa1, 0x60,
	0x11, 0x09, 0x29, 0xaf, 0x61, 0x81, 0x9a, 0x11, 0x68, 0xfa, 0xa1, 0xee, 0x16, 0xa2, 0x17, 0x56,
	0x37, 0x0b, 0x36, 0x96, 0xbb, 0x5d, 0x98, 0x52, 0xdb, 0xb1, 0x63, 0x3b, 0x11, 0x91, 0xd8, 0xf2,
	0x27, 0x7c, 0x0c, 0x4b, 0x56, 0xac, 0x51, 0x2f, 0xf8, 0x04, 0xd6, 0xa8, 0xca, 0x8f, 0xc4, 0xb1,
	0x93, 0xb4, 0x66, 0x95, 0xaa, 0xba, 0xa7, 0x4e, 0xdd, 0x3a, 0xe7, 0xe6, 0x96, 0xe1, 0x4b, 0xd3,
	0xf7, 0x47, 0x21, 0x0d, 0x96, 0xec, 0x81, 0x8e, 0x5c, 0x93, 0xcd, 0x46, 0x0f, 0x66, 0x60, 0x8d,
	0x4c, 0x9f, 0x8d, 0xec, 0xc0, 0x7f, 0x18, 0x2d, 0x27, 0x7c, 0x3c, 0xf4, 0x03, 0x2f, 0xf2, 0xf0,
	0x11, 0x8f, 0x0d, 0x13, 0xf4, 0x70, 0x39, 0x21, 0x17, 0xd0, 0x7e, 0xef, 0x38, 0x97, 0x81, 0xb7,
	0xf0, 0x75, 0xea, 0x3b, 0x2b, 0xfc, 0x15, 0x48, 0x01, 0x0d, 0x55, 0xd4, 0x47, 0x83, 0xe6, 0x94,
	0x0c, 0xb7, 0xf0, 0xc3, 0x1f, 0x3c, 0x8b, 0x3a, 0xeb, 0x1d, 0xa1, 0xaf, 0x73, 0x38, 0xe9, 0x41,
	0x73, 0xbd, 0x38, 0xc7, 0x2f, 0x40, 0x72, 0x99, 0xa5, 0x56, 0xfa, 0x68, 0x20, 0xe9, 0x7c, 0x48,
	0x4e, 0xa1, 0x7d, 0x66, 0x06, 0xd6, 0x95, 0x17, 0x85, 0xf1, 0x39, 0x13, 0xa8, 0x59, 0x66, 0x64,
	0x1a, 0x63, 0x15, 0xf5, 0xa5, 0x41, 0x73, 0xaa, 0x95, 0x1f, 0xc5, 0x37, 0xe9, 0x32, 0x47, 0x8e,
	0x49, 0x1b, 0x9a, 0x6b, 0x8e, 0x39, 0xf9, 0x16, 0x14, 0x11, 0x2d, 0xd0, 0xa1, 0xe7, 0xd1, 0x1d,
	0x43, 0x3d, 0xde, 0x3f, 0xc7, 0x1d, 0xa8, 0x64, 0xe9, 0x56, 0x98, 0x45, 0xce, 0xe1, 0x88, 0x87,
	0xc2, 0xd3, 0xd5, 0x25, 0xb3, 0x3e, 0x38, 0xdf, 0xcf, 0xe2, 0x3b, 0xa7, 0x2c, 0x42, 0x16, 0x7b,
	0x2d, 0x8b, 0xcd, 0x2c, 0xf2, 0x11, 0xbc, 0x3c, 0xa7, 0xae, 0xb7, 0x98, 0x45, 0x17, 0xf3, 0x05,
	0x8b, 0x2d, 0x20, 0x9f, 0xc3, 0x51, 0x7e, 0xb1, 0x4c, 0xd0, 0x16, 0xc0, 0xc6, 0x96, 0x77, 0xd0,
	0xc8, 0xb0, 0x63, 0x90, 0xcc, 0xc0, 0x16, 0xd8, 0xe6, 0xb4, 0xbb, 0xc3, 0xc1, 0xc0, 0x8e, 0xf1,
	0x1c, 0x4a, 0x7e, 0x47, 0xf0, 0xb2, 0x60, 0x2c, 0x7e, 0x0b, 0x55, 0x87, 0x85, 0x51, 0x72, 0xdf,
	0x5e, 0x39, 0x91, 0x80, 0x5f, 0xcf, 0x7e, 0xf6, 0x74, 0x01, 0xc6, 0xdf, 0x80, 0xb2, 0x08, 0x69,
	0x60, 0x70, 0xf0, 0xfe, 0x14, 0xee, 0x42, 0x1a, 0x08, 0xb5, 0x1a, 0x8b, 0x64, 0x44, 0x4e, 0xa0,
	0x9d, 0xcb, 0x2e, 0xbd, 0x36, 0xca, 0xae, 0x8d, 0x3f, 0x85, 0x3a, 0x67, 0x33, 0x32, 0x31, 0x6a,
	0x7c, 0x7a, 0x6d, 0x91, 0xff, 0x10, 0x28, 0x99, 0x03, 0x89, 0xa1, 0x28, 0x35, 0x14, 0x63, 0xa8,
	0xce, 0x4c, 0x97, 0x8a, 0x3d, 0x8a, 0x2e, 0xc6, 0xf8, 0x63, 0x90, 0xc3, 0xc8, 0x8c, 0xa8, 0x2a,
	0xf5, 0xd1, 0x40, 0xd6, 0xe3, 0x09, 0x56, 0xa1, 0x6e, 0x51, 0x87, 0x46, 0xd4, 0x52, 0xab, 0x62,
	0x3d, 0x9d, 0xe2, 0x4f, 0xa0, 0xc6, 0x42, 0xe3, 0x17, 0x2f, 0x52, 0xe5, 0x78, 0x03, 0x0b, 0xaf,
	0xbc, 0x08, 0x1f, 0x43, 0x43, 0x64, 0xb4, 0x08, 0x1c, 0xb5, 0x26, 0xe8, 0x45, 0x86, 0x77, 0x81,
	0x83, 0xfb, 0xd0, 0xba, 0x67, 0xb6, 0x91, 0x85, 0xeb, 0x22, 0x0c, 0xf7, 0xcc, 0x3e, 0x4b, 0x10,
	0xaf, 0x40, 0x11, 0xd1, 0x68, 0xe5, 0x53, 0xb5, 0x21, 0x68, 0x05, 0xdb, 0xed, 0xca, 0xa7, 0xf8,
	0x0b, 0xe8, 0x64, 0x41, 0x43, 0xa4, 0xaf, 0x08, 0x82, 0x56, 0x8a, 0xb8, 0x31, 0x5d, 0x4a, 0x7e,
	0x83, 0x4e, 0xde, 0x09, 0x9e, 0x91, 0xcd, 0x27, 0x46, 0x26, 0x41, 0x5d, 0xcc, 0xaf, 0x2d, 0xfc,
	0x06, 0x20, 0x0e, 0x6d, 0xa8, 0xa1, 0x88, 0x15, 0xce, 0x85, 0xc7, 0x20, 0x73, 0xee, 0x50, 0x95,
	0x0e, 0xd7, 0xb8, 0x00, 0x92, 0x7f, 0x51, 0xe2, 0x59, 0x6a, 0x67, 0x89, 0x67, 0x5b, 0xff, 0xae,
	0x9c, 0x62, 0x52, 0x5e, 0xb1, 0x9c, 0x1e, 0xd5, 0x2d, 0x3d, 0x52, 0x13, 0xe5, 0x0d, 0x13, 0x7b,
	0xd0, 0xa4, 0xbf, 0xfa, 0x2c, 0xa0, 0x46, 0xc4, 0x5c, 0x2a, 0x0c, 0x90, 0x74, 0x88, 0x97, 0x6e,
	0x99, 0x5b, 0x26, 0x62, 0xbd, 0x28, 0x62, 0xc1, 0xa9, 0xc6, 0xb6, 0x53, 0xe4, 0x3d, 0xb4, 0xb3,
	0x8a, 0x15, 0x0d, 0x61, 0xbc, 0xd9, 0x28, 0x0f, 0xd5, 0x78, 0xda, 0x24, 0xd7, 0x14, 0x65, 0xff,
	0xe9, 0x3f, 0x10, 0x74, 0x52, 0x44, 0xd2, 0x26, 0x4f, 0xd2, 0x53, 0xb8, 0x1f, 0x83, 0xc2, 0x29,
	0x79, 0xf4, 0x50, 0xa7, 0xe1, 0xc5, 0x2c, 0x0a, 0x56, 0xe2, 0x3c, 0xed, 0x47, 0x68, 0xa4, 0x0b,
	0xfc, 0xb0, 0x47, 0xba, 0x4a, 0x5d, 0x79, 0xa4, 0xbc, 0xd1, 0xcb, 0x4b, 0xd3, 0x59, 0xd0, 0x67,
	0xfe, 0x4b, 0x63, 0xf0, 0x49, 0xe5, 0x6b, 0x44, 0x08, 0xb4, 0x36, 0xce, 0x9d, 0x73, 0x5f, 0x5c,
	0x66, 0x85, 0x6a, 0xa5, 0x2f, 0x0d, 0x24, 0x5d, 0x8c, 0xa7, 0x7f, 0x57, 0xa1, 0x2a, 0xca, 0xe1,
	0x5d, 0xf2, 0xab, 0x16, 0xf8, 0x13, 0x1d, 0x34, 0x6d, 0x47, 0x84, 0x5f, 0xff, 0x0a, 0x1a, 0x69,
	0xcb, 0xc7, 0xaf, 0x4b, 0x71, 0xc9, 0x6b, 0xa0, 0x75, 0xf7, 0x44, 0x39, 0xd3, 0x0d, 0xc0, 0xba,
	0x19, 0xe3, 0x72, 0x74, 0xd6, 0xa9, 0xb5, 0xfe, 0xde, 0x78, 0x92, 0x59, 0x56, 0xf2, 0xaf, 0x77,
	0xfa, 0x52, 0x9e, 0x59, 0xbe, 0x90, 0xbe, 0x07, 0x25, 0x93, 0x13, 0xbf, 0xd9, 0x67, 0xf1, 0x5c,
	0xeb, 0x1d, 0xa8, 0x00, 0xfc, 0x1d, 0xc8, 0x71, 0xeb, 0x3c, 0x2e, 0x20, 0xd3, 0x07, 0x42, 0x7b,
	0xb5, 0x2b, 0xc4, 0x09, 0x6e, 0xa1, 0xb5, 0xf9, 0xf8, 0xe0, 0xa2, 0x12, 0x5b, 0x6f, 0x93, 0x46,
	0x0e, 0x20, 0x12, 0xb5, 0xd2, 0xb7, 0xa5, 0x44, 0xad, 0x8d, 0x4f, 0x87, 0x12, 0xb5, 0x72, 0xdf,
	0x27, 0xa7, 0x2f, 0xfe, 0x7c, 0xea, 0xa2, 0xbf, 0x9e, 0xba, 0xe8, 0x9f, 0xa7, 0x2e, 0xfa, 0xa9,
	0xb2, 0x9c, 0xdc, 0xd7, 0xc4, 0xa7, 0xcd, 0xdb, 0xff, 0x03, 0x00, 0x00, 0xff, 0xff, 0xc8, 0x9f,
	0xc9, 0x5f, 0x09, 0x09, 0x00, 0x00,
}
