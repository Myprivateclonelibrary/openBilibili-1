// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: app/service/main/tv/api/api.proto

package api

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import go_common_library_time "go-common/library/time"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type UserInfoReq struct {
	Mid                  int64    `protobuf:"varint,1,opt,name=mid,proto3" json:"mid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UserInfoReq) Reset()         { *m = UserInfoReq{} }
func (m *UserInfoReq) String() string { return proto.CompactTextString(m) }
func (*UserInfoReq) ProtoMessage()    {}
func (*UserInfoReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_2cb1ead6fc72f168, []int{0}
}
func (m *UserInfoReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UserInfoReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UserInfoReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *UserInfoReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserInfoReq.Merge(dst, src)
}
func (m *UserInfoReq) XXX_Size() int {
	return m.Size()
}
func (m *UserInfoReq) XXX_DiscardUnknown() {
	xxx_messageInfo_UserInfoReq.DiscardUnknown(m)
}

var xxx_messageInfo_UserInfoReq proto.InternalMessageInfo

// +bili:deepcopy-gen=true
// +bili:deepcopy-gen:structs=go-common/app/service/main/tv/internal/model.UserInfo
type UserInfoReply struct {
	Mid                  int64                       `protobuf:"varint,1,opt,name=mid,proto3" json:"mid"`
	VipType              int8                        `protobuf:"varint,2,opt,name=vip_type,json=vipType,proto3,casttype=int8" json:"vip_type"`
	PayType              int8                        `protobuf:"varint,3,opt,name=pay_type,json=payType,proto3,casttype=int8" json:"pay_type"`
	PayChannelId         string                      `protobuf:"bytes,4,opt,name=pay_channel_id,json=payChannelId,proto3" json:"pay_channel_id"`
	Status               int8                        `protobuf:"varint,5,opt,name=status,proto3,casttype=int8" json:"status"`
	OverdueTime          go_common_library_time.Time `protobuf:"varint,6,opt,name=overdue_time,json=overdueTime,proto3,casttype=go-common/library/time.Time" json:"overdue_time"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_unrecognized     []byte                      `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *UserInfoReply) Reset()         { *m = UserInfoReply{} }
func (m *UserInfoReply) String() string { return proto.CompactTextString(m) }
func (*UserInfoReply) ProtoMessage()    {}
func (*UserInfoReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_2cb1ead6fc72f168, []int{1}
}
func (m *UserInfoReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UserInfoReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UserInfoReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *UserInfoReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserInfoReply.Merge(dst, src)
}
func (m *UserInfoReply) XXX_Size() int {
	return m.Size()
}
func (m *UserInfoReply) XXX_DiscardUnknown() {
	xxx_messageInfo_UserInfoReply.DiscardUnknown(m)
}

var xxx_messageInfo_UserInfoReply proto.InternalMessageInfo

type ChangeHistoryReq struct {
	Id                   int32    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ChangeHistoryReq) Reset()         { *m = ChangeHistoryReq{} }
func (m *ChangeHistoryReq) String() string { return proto.CompactTextString(m) }
func (*ChangeHistoryReq) ProtoMessage()    {}
func (*ChangeHistoryReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_2cb1ead6fc72f168, []int{2}
}
func (m *ChangeHistoryReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChangeHistoryReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChangeHistoryReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ChangeHistoryReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChangeHistoryReq.Merge(dst, src)
}
func (m *ChangeHistoryReq) XXX_Size() int {
	return m.Size()
}
func (m *ChangeHistoryReq) XXX_DiscardUnknown() {
	xxx_messageInfo_ChangeHistoryReq.DiscardUnknown(m)
}

var xxx_messageInfo_ChangeHistoryReq proto.InternalMessageInfo

// +bili:deepcopy-gen=true
// +bili:deepcopy-gen:structs=go-common/app/service/main/tv/internal/model.UserChangeHistory
type ChangeHistoryReply struct {
	Id                   int32                       `protobuf:"varint,1,opt,name=id,proto3" json:"id"`
	Mid                  int64                       `protobuf:"varint,2,opt,name=mid,proto3" json:"mid"`
	ChangeType           int8                        `protobuf:"varint,3,opt,name=change_type,json=changeType,proto3,casttype=int8" json:"change_type"`
	ChangeTime           go_common_library_time.Time `protobuf:"varint,4,opt,name=change_time,json=changeTime,proto3,casttype=go-common/library/time.Time" json:"change_time"`
	OrderNo              string                      `protobuf:"bytes,5,opt,name=order_no,json=orderNo,proto3" json:"order_no"`
	Days                 int32                       `protobuf:"varint,6,opt,name=days,proto3" json:"days"`
	OperatorId           string                      `protobuf:"bytes,7,opt,name=operator_id,json=operatorId,proto3" json:"operator_id"`
	Ctime                go_common_library_time.Time `protobuf:"varint,8,opt,name=ctime,proto3,casttype=go-common/library/time.Time" json:"ctime"`
	Mtime                go_common_library_time.Time `protobuf:"varint,9,opt,name=mtime,proto3,casttype=go-common/library/time.Time" json:"mtime"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_unrecognized     []byte                      `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *ChangeHistoryReply) Reset()         { *m = ChangeHistoryReply{} }
func (m *ChangeHistoryReply) String() string { return proto.CompactTextString(m) }
func (*ChangeHistoryReply) ProtoMessage()    {}
func (*ChangeHistoryReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_2cb1ead6fc72f168, []int{3}
}
func (m *ChangeHistoryReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChangeHistoryReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChangeHistoryReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ChangeHistoryReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChangeHistoryReply.Merge(dst, src)
}
func (m *ChangeHistoryReply) XXX_Size() int {
	return m.Size()
}
func (m *ChangeHistoryReply) XXX_DiscardUnknown() {
	xxx_messageInfo_ChangeHistoryReply.DiscardUnknown(m)
}

var xxx_messageInfo_ChangeHistoryReply proto.InternalMessageInfo

type ChangeHistorysReq struct {
	Mid                  int64    `protobuf:"varint,1,opt,name=mid,proto3" json:"mid,omitempty"`
	From                 int32    `protobuf:"varint,2,opt,name=from,proto3" json:"from,omitempty"`
	To                   int32    `protobuf:"varint,3,opt,name=to,proto3" json:"to,omitempty"`
	Pn                   int32    `protobuf:"varint,4,opt,name=pn,proto3" json:"pn,omitempty"`
	Ps                   int32    `protobuf:"varint,5,opt,name=ps,proto3" json:"ps,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ChangeHistorysReq) Reset()         { *m = ChangeHistorysReq{} }
func (m *ChangeHistorysReq) String() string { return proto.CompactTextString(m) }
func (*ChangeHistorysReq) ProtoMessage()    {}
func (*ChangeHistorysReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_2cb1ead6fc72f168, []int{4}
}
func (m *ChangeHistorysReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChangeHistorysReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChangeHistorysReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ChangeHistorysReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChangeHistorysReq.Merge(dst, src)
}
func (m *ChangeHistorysReq) XXX_Size() int {
	return m.Size()
}
func (m *ChangeHistorysReq) XXX_DiscardUnknown() {
	xxx_messageInfo_ChangeHistorysReq.DiscardUnknown(m)
}

var xxx_messageInfo_ChangeHistorysReq proto.InternalMessageInfo

type ChangeHistorysReply struct {
	Total                int32                 `protobuf:"varint,1,opt,name=total,proto3" json:"total"`
	Historys             []*ChangeHistoryReply `protobuf:"bytes,2,rep,name=historys" json:"historys"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *ChangeHistorysReply) Reset()         { *m = ChangeHistorysReply{} }
func (m *ChangeHistorysReply) String() string { return proto.CompactTextString(m) }
func (*ChangeHistorysReply) ProtoMessage()    {}
func (*ChangeHistorysReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_2cb1ead6fc72f168, []int{5}
}
func (m *ChangeHistorysReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChangeHistorysReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChangeHistorysReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ChangeHistorysReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChangeHistorysReply.Merge(dst, src)
}
func (m *ChangeHistorysReply) XXX_Size() int {
	return m.Size()
}
func (m *ChangeHistorysReply) XXX_DiscardUnknown() {
	xxx_messageInfo_ChangeHistorysReply.DiscardUnknown(m)
}

var xxx_messageInfo_ChangeHistorysReply proto.InternalMessageInfo

type PanelInfoReq struct {
	Mid                  int64    `protobuf:"varint,1,opt,name=mid,proto3" json:"mid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PanelInfoReq) Reset()         { *m = PanelInfoReq{} }
func (m *PanelInfoReq) String() string { return proto.CompactTextString(m) }
func (*PanelInfoReq) ProtoMessage()    {}
func (*PanelInfoReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_2cb1ead6fc72f168, []int{6}
}
func (m *PanelInfoReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PanelInfoReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PanelInfoReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *PanelInfoReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PanelInfoReq.Merge(dst, src)
}
func (m *PanelInfoReq) XXX_Size() int {
	return m.Size()
}
func (m *PanelInfoReq) XXX_DiscardUnknown() {
	xxx_messageInfo_PanelInfoReq.DiscardUnknown(m)
}

var xxx_messageInfo_PanelInfoReq proto.InternalMessageInfo

// +bili:deepcopy-gen=true
// +bili:deepcopy-gen:structs=go-common/app/service/main/tv/internal/model.PanelPriceConfig
type PanelPriceConfig struct {
	Id                   int32    `protobuf:"varint,1,opt,name=id,proto3" json:"id"`
	Pid                  int32    `protobuf:"varint,2,opt,name=pid,proto3" json:"pid"`
	Platform             int8     `protobuf:"varint,3,opt,name=platform,proto3,casttype=int8" json:"platform"`
	ProductName          string   `protobuf:"bytes,4,opt,name=product_name,json=productName,proto3" json:"product_name"`
	ProductId            string   `protobuf:"bytes,5,opt,name=product_id,json=productId,proto3" json:"product_id"`
	SuitType             int8     `protobuf:"varint,6,opt,name=suit_type,json=suitType,proto3,casttype=int8" json:"suit_type"`
	Month                int32    `protobuf:"varint,7,opt,name=month,proto3" json:"month"`
	SubType              int8     `protobuf:"varint,8,opt,name=sub_type,json=subType,proto3,casttype=int8" json:"sub_type"`
	Price                int32    `protobuf:"varint,9,opt,name=price,proto3" json:"price"`
	Selected             int8     `protobuf:"varint,10,opt,name=selected,proto3,casttype=int8" json:"selected"`
	Remark               string   `protobuf:"bytes,11,opt,name=remark,proto3" json:"remark"`
	Status               int8     `protobuf:"varint,12,opt,name=status,proto3,casttype=int8" json:"status"`
	Superscript          string   `protobuf:"bytes,13,opt,name=superscript,proto3" json:"superscript"`
	OriginPrice          int32    `protobuf:"varint,14,opt,name=origin_price,json=originPrice,proto3" json:"origin_price"`
	MaxNum               int32    `protobuf:"varint,15,opt,name=max_num,json=maxNum,proto3" json:"max_num"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PanelPriceConfig) Reset()         { *m = PanelPriceConfig{} }
func (m *PanelPriceConfig) String() string { return proto.CompactTextString(m) }
func (*PanelPriceConfig) ProtoMessage()    {}
func (*PanelPriceConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_2cb1ead6fc72f168, []int{7}
}
func (m *PanelPriceConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PanelPriceConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PanelPriceConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *PanelPriceConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PanelPriceConfig.Merge(dst, src)
}
func (m *PanelPriceConfig) XXX_Size() int {
	return m.Size()
}
func (m *PanelPriceConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_PanelPriceConfig.DiscardUnknown(m)
}

var xxx_messageInfo_PanelPriceConfig proto.InternalMessageInfo

type PanelPriceConfigs struct {
	PriceConfigs         []*PanelPriceConfig `protobuf:"bytes,1,rep,name=price_configs,json=priceConfigs" json:"price_configs"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *PanelPriceConfigs) Reset()         { *m = PanelPriceConfigs{} }
func (m *PanelPriceConfigs) String() string { return proto.CompactTextString(m) }
func (*PanelPriceConfigs) ProtoMessage()    {}
func (*PanelPriceConfigs) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_2cb1ead6fc72f168, []int{8}
}
func (m *PanelPriceConfigs) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PanelPriceConfigs) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PanelPriceConfigs.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *PanelPriceConfigs) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PanelPriceConfigs.Merge(dst, src)
}
func (m *PanelPriceConfigs) XXX_Size() int {
	return m.Size()
}
func (m *PanelPriceConfigs) XXX_DiscardUnknown() {
	xxx_messageInfo_PanelPriceConfigs.DiscardUnknown(m)
}

var xxx_messageInfo_PanelPriceConfigs proto.InternalMessageInfo

type PanelInfoReply struct {
	PriceConfigs         map[string]*PanelPriceConfigs `protobuf:"bytes,1,rep,name=price_configs,json=priceConfigs" json:"price_configs" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value"`
	XXX_NoUnkeyedLiteral struct{}                      `json:"-"`
	XXX_unrecognized     []byte                        `json:"-"`
	XXX_sizecache        int32                         `json:"-"`
}

func (m *PanelInfoReply) Reset()         { *m = PanelInfoReply{} }
func (m *PanelInfoReply) String() string { return proto.CompactTextString(m) }
func (*PanelInfoReply) ProtoMessage()    {}
func (*PanelInfoReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_2cb1ead6fc72f168, []int{9}
}
func (m *PanelInfoReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PanelInfoReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PanelInfoReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *PanelInfoReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PanelInfoReply.Merge(dst, src)
}
func (m *PanelInfoReply) XXX_Size() int {
	return m.Size()
}
func (m *PanelInfoReply) XXX_DiscardUnknown() {
	xxx_messageInfo_PanelInfoReply.DiscardUnknown(m)
}

var xxx_messageInfo_PanelInfoReply proto.InternalMessageInfo

type GuestPanelInfoReq struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GuestPanelInfoReq) Reset()         { *m = GuestPanelInfoReq{} }
func (m *GuestPanelInfoReq) String() string { return proto.CompactTextString(m) }
func (*GuestPanelInfoReq) ProtoMessage()    {}
func (*GuestPanelInfoReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_2cb1ead6fc72f168, []int{10}
}
func (m *GuestPanelInfoReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GuestPanelInfoReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GuestPanelInfoReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *GuestPanelInfoReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GuestPanelInfoReq.Merge(dst, src)
}
func (m *GuestPanelInfoReq) XXX_Size() int {
	return m.Size()
}
func (m *GuestPanelInfoReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GuestPanelInfoReq.DiscardUnknown(m)
}

var xxx_messageInfo_GuestPanelInfoReq proto.InternalMessageInfo

type GuestPanelInfoReply struct {
	PriceConfigs         map[string]*PanelPriceConfigs `protobuf:"bytes,1,rep,name=price_configs,json=priceConfigs" json:"price_configs,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value"`
	XXX_NoUnkeyedLiteral struct{}                      `json:"-"`
	XXX_unrecognized     []byte                        `json:"-"`
	XXX_sizecache        int32                         `json:"-"`
}

func (m *GuestPanelInfoReply) Reset()         { *m = GuestPanelInfoReply{} }
func (m *GuestPanelInfoReply) String() string { return proto.CompactTextString(m) }
func (*GuestPanelInfoReply) ProtoMessage()    {}
func (*GuestPanelInfoReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_2cb1ead6fc72f168, []int{11}
}
func (m *GuestPanelInfoReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GuestPanelInfoReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GuestPanelInfoReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *GuestPanelInfoReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GuestPanelInfoReply.Merge(dst, src)
}
func (m *GuestPanelInfoReply) XXX_Size() int {
	return m.Size()
}
func (m *GuestPanelInfoReply) XXX_DiscardUnknown() {
	xxx_messageInfo_GuestPanelInfoReply.DiscardUnknown(m)
}

var xxx_messageInfo_GuestPanelInfoReply proto.InternalMessageInfo

type PayOrderReq struct {
	OrderNo              string   `protobuf:"bytes,1,opt,name=order_no,json=orderNo,proto3" json:"order_no,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PayOrderReq) Reset()         { *m = PayOrderReq{} }
func (m *PayOrderReq) String() string { return proto.CompactTextString(m) }
func (*PayOrderReq) ProtoMessage()    {}
func (*PayOrderReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_2cb1ead6fc72f168, []int{12}
}
func (m *PayOrderReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PayOrderReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PayOrderReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *PayOrderReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PayOrderReq.Merge(dst, src)
}
func (m *PayOrderReq) XXX_Size() int {
	return m.Size()
}
func (m *PayOrderReq) XXX_DiscardUnknown() {
	xxx_messageInfo_PayOrderReq.DiscardUnknown(m)
}

var xxx_messageInfo_PayOrderReq proto.InternalMessageInfo

// +bili:deepcopy-gen=true
// +bili:deepcopy-gen:structs=go-common/app/service/main/tv/internal/model.PayOrder
type PayOrderReply struct {
	Id                   int32                       `protobuf:"varint,1,opt,name=id,proto3" json:"id"`
	OrderNo              string                      `protobuf:"bytes,2,opt,name=order_no,json=orderNo,proto3" json:"order_no"`
	Platform             int8                        `protobuf:"varint,3,opt,name=platform,proto3,casttype=int8" json:"platform"`
	OrderType            int8                        `protobuf:"varint,4,opt,name=order_type,json=orderType,proto3,casttype=int8" json:"order_type"`
	Mid                  int64                       `protobuf:"varint,5,opt,name=mid,proto3" json:"mid"`
	BuyMonths            int8                        `protobuf:"varint,6,opt,name=buy_months,json=buyMonths,proto3,casttype=int8" json:"buy_months"`
	ProductId            string                      `protobuf:"bytes,7,opt,name=product_id,json=productId,proto3" json:"product_id"`
	Money                int32                       `protobuf:"varint,8,opt,name=money,proto3" json:"money"`
	Quantity             int32                       `protobuf:"varint,9,opt,name=quantity,proto3" json:"quantity"`
	Status               int8                        `protobuf:"varint,10,opt,name=status,proto3,casttype=int8" json:"status"`
	ThirdTradeNo         string                      `protobuf:"bytes,11,opt,name=third_trade_no,json=thirdTradeNo,proto3" json:"third_trade_no"`
	PaymentMoney         int32                       `protobuf:"varint,12,opt,name=payment_money,json=paymentMoney,proto3" json:"payment_money"`
	PaymentType          string                      `protobuf:"bytes,13,opt,name=payment_type,json=paymentType,proto3" json:"payment_type"`
	PaymentTime          go_common_library_time.Time `protobuf:"varint,14,opt,name=payment_time,json=paymentTime,proto3,casttype=go-common/library/time.Time" json:"payment_time"`
	Ctime                go_common_library_time.Time `protobuf:"varint,15,opt,name=ctime,proto3,casttype=go-common/library/time.Time" json:"ctime"`
	Mtime                go_common_library_time.Time `protobuf:"varint,16,opt,name=mtime,proto3,casttype=go-common/library/time.Time" json:"mtime"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_unrecognized     []byte                      `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *PayOrderReply) Reset()         { *m = PayOrderReply{} }
func (m *PayOrderReply) String() string { return proto.CompactTextString(m) }
func (*PayOrderReply) ProtoMessage()    {}
func (*PayOrderReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_2cb1ead6fc72f168, []int{13}
}
func (m *PayOrderReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PayOrderReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PayOrderReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *PayOrderReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PayOrderReply.Merge(dst, src)
}
func (m *PayOrderReply) XXX_Size() int {
	return m.Size()
}
func (m *PayOrderReply) XXX_DiscardUnknown() {
	xxx_messageInfo_PayOrderReply.DiscardUnknown(m)
}

var xxx_messageInfo_PayOrderReply proto.InternalMessageInfo

type CreateQrReq struct {
	Mid                  int64    `protobuf:"varint,1,opt,name=mid,proto3" json:"mid,omitempty"`
	Pid                  int32    `protobuf:"varint,2,opt,name=pid,proto3" json:"pid,omitempty"`
	BuyNum               int32    `protobuf:"varint,4,opt,name=buy_num,json=buyNum,proto3" json:"buy_num,omitempty"`
	Guid                 string   `protobuf:"bytes,5,opt,name=guid,proto3" json:"guid,omitempty"`
	AppChannel           string   `protobuf:"bytes,6,opt,name=app_channel,json=appChannel,proto3" json:"app_channel,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CreateQrReq) Reset()         { *m = CreateQrReq{} }
func (m *CreateQrReq) String() string { return proto.CompactTextString(m) }
func (*CreateQrReq) ProtoMessage()    {}
func (*CreateQrReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_2cb1ead6fc72f168, []int{14}
}
func (m *CreateQrReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateQrReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateQrReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *CreateQrReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateQrReq.Merge(dst, src)
}
func (m *CreateQrReq) XXX_Size() int {
	return m.Size()
}
func (m *CreateQrReq) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateQrReq.DiscardUnknown(m)
}

var xxx_messageInfo_CreateQrReq proto.InternalMessageInfo

// +bili:deepcopy-gen=true
// +bili:deepcopy-gen:structs=go-common/app/service/main/tv/internal/model.QR
type CreateQrReply struct {
	ExpireAt             go_common_library_time.Time `protobuf:"varint,1,opt,name=expire_at,json=expireAt,proto3,casttype=go-common/library/time.Time" json:"expire_at"`
	Url                  string                      `protobuf:"bytes,2,opt,name=url,proto3" json:"url"`
	Token                string                      `protobuf:"bytes,3,opt,name=token,proto3" json:"token"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_unrecognized     []byte                      `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *CreateQrReply) Reset()         { *m = CreateQrReply{} }
func (m *CreateQrReply) String() string { return proto.CompactTextString(m) }
func (*CreateQrReply) ProtoMessage()    {}
func (*CreateQrReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_2cb1ead6fc72f168, []int{15}
}
func (m *CreateQrReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateQrReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateQrReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *CreateQrReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateQrReply.Merge(dst, src)
}
func (m *CreateQrReply) XXX_Size() int {
	return m.Size()
}
func (m *CreateQrReply) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateQrReply.DiscardUnknown(m)
}

var xxx_messageInfo_CreateQrReply proto.InternalMessageInfo

type CreateGuestQrReq struct {
	Pid                  int32    `protobuf:"varint,1,opt,name=pid,proto3" json:"pid,omitempty"`
	BuyNum               int32    `protobuf:"varint,2,opt,name=buy_num,json=buyNum,proto3" json:"buy_num,omitempty"`
	Guid                 string   `protobuf:"bytes,3,opt,name=guid,proto3" json:"guid,omitempty"`
	AppChannel           string   `protobuf:"bytes,4,opt,name=app_channel,json=appChannel,proto3" json:"app_channel,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CreateGuestQrReq) Reset()         { *m = CreateGuestQrReq{} }
func (m *CreateGuestQrReq) String() string { return proto.CompactTextString(m) }
func (*CreateGuestQrReq) ProtoMessage()    {}
func (*CreateGuestQrReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_2cb1ead6fc72f168, []int{16}
}
func (m *CreateGuestQrReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateGuestQrReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateGuestQrReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *CreateGuestQrReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateGuestQrReq.Merge(dst, src)
}
func (m *CreateGuestQrReq) XXX_Size() int {
	return m.Size()
}
func (m *CreateGuestQrReq) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateGuestQrReq.DiscardUnknown(m)
}

var xxx_messageInfo_CreateGuestQrReq proto.InternalMessageInfo

// +bili:deepcopy-gen=true
// +bili:deepcopy-gen:structs=go-common/app/service/main/tv/internal/model.QR
type CreateGuestQrReply struct {
	ExpireAt             go_common_library_time.Time `protobuf:"varint,1,opt,name=expire_at,json=expireAt,proto3,casttype=go-common/library/time.Time" json:"expire_at"`
	Url                  string                      `protobuf:"bytes,2,opt,name=url,proto3" json:"url"`
	Token                string                      `protobuf:"bytes,3,opt,name=token,proto3" json:"token"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_unrecognized     []byte                      `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *CreateGuestQrReply) Reset()         { *m = CreateGuestQrReply{} }
func (m *CreateGuestQrReply) String() string { return proto.CompactTextString(m) }
func (*CreateGuestQrReply) ProtoMessage()    {}
func (*CreateGuestQrReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_2cb1ead6fc72f168, []int{17}
}
func (m *CreateGuestQrReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateGuestQrReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateGuestQrReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *CreateGuestQrReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateGuestQrReply.Merge(dst, src)
}
func (m *CreateGuestQrReply) XXX_Size() int {
	return m.Size()
}
func (m *CreateGuestQrReply) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateGuestQrReply.DiscardUnknown(m)
}

var xxx_messageInfo_CreateGuestQrReply proto.InternalMessageInfo

// +bili:deepcopy-gen=true
// +bili:deepcopy-gen:structs=go-common/app/service/main/tv/internal/model.YstPayCallbackReq
type PayCallbackReq struct {
	SeqNo                string   `protobuf:"bytes,1,opt,name=seq_no,json=seqNo,proto3" json:"seq_no,omitempty"`
	TraceNo              string   `protobuf:"bytes,2,opt,name=trace_no,json=traceNo,proto3" json:"trace_no,omitempty"`
	TradeState           string   `protobuf:"bytes,3,opt,name=trade_state,json=tradeState,proto3" json:"trade_state,omitempty"`
	ContractId           string   `protobuf:"bytes,4,opt,name=contract_id,json=contractId,proto3" json:"contract_id,omitempty"`
	Sign                 string   `protobuf:"bytes,5,opt,name=sign,proto3" json:"sign,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PayCallbackReq) Reset()         { *m = PayCallbackReq{} }
func (m *PayCallbackReq) String() string { return proto.CompactTextString(m) }
func (*PayCallbackReq) ProtoMessage()    {}
func (*PayCallbackReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_2cb1ead6fc72f168, []int{18}
}
func (m *PayCallbackReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PayCallbackReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PayCallbackReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *PayCallbackReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PayCallbackReq.Merge(dst, src)
}
func (m *PayCallbackReq) XXX_Size() int {
	return m.Size()
}
func (m *PayCallbackReq) XXX_DiscardUnknown() {
	xxx_messageInfo_PayCallbackReq.DiscardUnknown(m)
}

var xxx_messageInfo_PayCallbackReq proto.InternalMessageInfo

// +bili:deepcopy-gen=true
// +bili:deepcopy-gen:structs=go-common/app/service/main/tv/internal/model.YstPayCallbackReply
type PayCallbackReply struct {
	TraceNo              string   `protobuf:"bytes,1,opt,name=trace_no,json=traceNo,proto3" json:"traceno"`
	Result               string   `protobuf:"bytes,2,opt,name=result,proto3" json:"result"`
	Msg                  string   `protobuf:"bytes,3,opt,name=msg,proto3" json:"msg"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PayCallbackReply) Reset()         { *m = PayCallbackReply{} }
func (m *PayCallbackReply) String() string { return proto.CompactTextString(m) }
func (*PayCallbackReply) ProtoMessage()    {}
func (*PayCallbackReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_2cb1ead6fc72f168, []int{19}
}
func (m *PayCallbackReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PayCallbackReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PayCallbackReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *PayCallbackReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PayCallbackReply.Merge(dst, src)
}
func (m *PayCallbackReply) XXX_Size() int {
	return m.Size()
}
func (m *PayCallbackReply) XXX_DiscardUnknown() {
	xxx_messageInfo_PayCallbackReply.DiscardUnknown(m)
}

var xxx_messageInfo_PayCallbackReply proto.InternalMessageInfo

type CreateOrderReq struct {
	Token                string   `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	Platform             int8     `protobuf:"varint,2,opt,name=platform,proto3,casttype=int8" json:"platform,omitempty"`
	PaymentType          string   `protobuf:"bytes,3,opt,name=payment_type,json=paymentType,proto3" json:"payment_type,omitempty"`
	ClientIp             string   `protobuf:"bytes,4,opt,name=client_ip,json=clientIp,proto3" json:"client_ip,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CreateOrderReq) Reset()         { *m = CreateOrderReq{} }
func (m *CreateOrderReq) String() string { return proto.CompactTextString(m) }
func (*CreateOrderReq) ProtoMessage()    {}
func (*CreateOrderReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_2cb1ead6fc72f168, []int{20}
}
func (m *CreateOrderReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateOrderReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateOrderReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *CreateOrderReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateOrderReq.Merge(dst, src)
}
func (m *CreateOrderReq) XXX_Size() int {
	return m.Size()
}
func (m *CreateOrderReq) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateOrderReq.DiscardUnknown(m)
}

var xxx_messageInfo_CreateOrderReq proto.InternalMessageInfo

// +bili:deepcopy-gen=true
// +bili:deepcopy-gen:structs=go-common/app/service/main/tv/internal/model.PayInfo
type CreateOrderReply struct {
	OrderNo              string   `protobuf:"bytes,1,opt,name=order_no,json=orderNo,proto3" json:"order_no"`
	PaymentType          string   `protobuf:"bytes,2,opt,name=payment_type,json=paymentType,proto3" json:"payment_type"`
	CodeUrl              string   `protobuf:"bytes,3,opt,name=code_url,json=codeUrl,proto3" json:"code_url"`
	PaymentMoney         int32    `protobuf:"varint,4,opt,name=payment_money,json=paymentMoney,proto3" json:"payment_money"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CreateOrderReply) Reset()         { *m = CreateOrderReply{} }
func (m *CreateOrderReply) String() string { return proto.CompactTextString(m) }
func (*CreateOrderReply) ProtoMessage()    {}
func (*CreateOrderReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_2cb1ead6fc72f168, []int{21}
}
func (m *CreateOrderReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateOrderReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateOrderReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *CreateOrderReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateOrderReply.Merge(dst, src)
}
func (m *CreateOrderReply) XXX_Size() int {
	return m.Size()
}
func (m *CreateOrderReply) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateOrderReply.DiscardUnknown(m)
}

var xxx_messageInfo_CreateOrderReply proto.InternalMessageInfo

type CreateGuestOrderReq struct {
	Mid                  int64    `protobuf:"varint,1,opt,name=mid,proto3" json:"mid,omitempty"`
	Token                string   `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty"`
	Platform             int8     `protobuf:"varint,3,opt,name=platform,proto3,casttype=int8" json:"platform,omitempty"`
	PaymentType          string   `protobuf:"bytes,4,opt,name=payment_type,json=paymentType,proto3" json:"payment_type,omitempty"`
	ClientIp             string   `protobuf:"bytes,5,opt,name=client_ip,json=clientIp,proto3" json:"client_ip,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CreateGuestOrderReq) Reset()         { *m = CreateGuestOrderReq{} }
func (m *CreateGuestOrderReq) String() string { return proto.CompactTextString(m) }
func (*CreateGuestOrderReq) ProtoMessage()    {}
func (*CreateGuestOrderReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_2cb1ead6fc72f168, []int{22}
}
func (m *CreateGuestOrderReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateGuestOrderReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateGuestOrderReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *CreateGuestOrderReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateGuestOrderReq.Merge(dst, src)
}
func (m *CreateGuestOrderReq) XXX_Size() int {
	return m.Size()
}
func (m *CreateGuestOrderReq) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateGuestOrderReq.DiscardUnknown(m)
}

var xxx_messageInfo_CreateGuestOrderReq proto.InternalMessageInfo

type CreateGuestOrderReply struct {
	OrderNo              string   `protobuf:"bytes,1,opt,name=order_no,json=orderNo,proto3" json:"order_no"`
	PaymentType          string   `protobuf:"bytes,2,opt,name=payment_type,json=paymentType,proto3" json:"payment_type"`
	CodeUrl              string   `protobuf:"bytes,3,opt,name=code_url,json=codeUrl,proto3" json:"code_url"`
	PaymentMoney         int32    `protobuf:"varint,4,opt,name=payment_money,json=paymentMoney,proto3" json:"payment_money"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CreateGuestOrderReply) Reset()         { *m = CreateGuestOrderReply{} }
func (m *CreateGuestOrderReply) String() string { return proto.CompactTextString(m) }
func (*CreateGuestOrderReply) ProtoMessage()    {}
func (*CreateGuestOrderReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_2cb1ead6fc72f168, []int{23}
}
func (m *CreateGuestOrderReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateGuestOrderReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateGuestOrderReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *CreateGuestOrderReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateGuestOrderReply.Merge(dst, src)
}
func (m *CreateGuestOrderReply) XXX_Size() int {
	return m.Size()
}
func (m *CreateGuestOrderReply) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateGuestOrderReply.DiscardUnknown(m)
}

var xxx_messageInfo_CreateGuestOrderReply proto.InternalMessageInfo

type RenewVipReq struct {
	Mid                  int64    `protobuf:"varint,1,opt,name=mid,proto3" json:"mid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RenewVipReq) Reset()         { *m = RenewVipReq{} }
func (m *RenewVipReq) String() string { return proto.CompactTextString(m) }
func (*RenewVipReq) ProtoMessage()    {}
func (*RenewVipReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_2cb1ead6fc72f168, []int{24}
}
func (m *RenewVipReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RenewVipReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RenewVipReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *RenewVipReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RenewVipReq.Merge(dst, src)
}
func (m *RenewVipReq) XXX_Size() int {
	return m.Size()
}
func (m *RenewVipReq) XXX_DiscardUnknown() {
	xxx_messageInfo_RenewVipReq.DiscardUnknown(m)
}

var xxx_messageInfo_RenewVipReq proto.InternalMessageInfo

type RenewVipReply struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RenewVipReply) Reset()         { *m = RenewVipReply{} }
func (m *RenewVipReply) String() string { return proto.CompactTextString(m) }
func (*RenewVipReply) ProtoMessage()    {}
func (*RenewVipReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_2cb1ead6fc72f168, []int{25}
}
func (m *RenewVipReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RenewVipReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RenewVipReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *RenewVipReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RenewVipReply.Merge(dst, src)
}
func (m *RenewVipReply) XXX_Size() int {
	return m.Size()
}
func (m *RenewVipReply) XXX_DiscardUnknown() {
	xxx_messageInfo_RenewVipReply.DiscardUnknown(m)
}

var xxx_messageInfo_RenewVipReply proto.InternalMessageInfo

// +bili:deepcopy-gen=true
// +bili:deepcopy-gen:structs=go-common/app/service/main/tv/internal/model.WxContractCallbackReq
type WxContractCallbackReq struct {
	ContractId              string   `protobuf:"bytes,1,opt,name=contract_id,json=contractId,proto3" json:"contract_id,omitempty"`
	ContractCode            string   `protobuf:"bytes,2,opt,name=contract_code,json=contractCode,proto3" json:"contract_code,omitempty"`
	ChangeType              string   `protobuf:"bytes,3,opt,name=change_type,json=changeType,proto3" json:"change_type,omitempty"`
	ContractTerminationMode string   `protobuf:"bytes,4,opt,name=contract_termination_mode,json=contractTerminationMode,proto3" json:"contract_termination_mode,omitempty"`
	Sign                    string   `protobuf:"bytes,5,opt,name=sign,proto3" json:"sign,omitempty"`
	XXX_NoUnkeyedLiteral    struct{} `json:"-"`
	XXX_unrecognized        []byte   `json:"-"`
	XXX_sizecache           int32    `json:"-"`
}

func (m *WxContractCallbackReq) Reset()         { *m = WxContractCallbackReq{} }
func (m *WxContractCallbackReq) String() string { return proto.CompactTextString(m) }
func (*WxContractCallbackReq) ProtoMessage()    {}
func (*WxContractCallbackReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_2cb1ead6fc72f168, []int{26}
}
func (m *WxContractCallbackReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WxContractCallbackReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WxContractCallbackReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *WxContractCallbackReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WxContractCallbackReq.Merge(dst, src)
}
func (m *WxContractCallbackReq) XXX_Size() int {
	return m.Size()
}
func (m *WxContractCallbackReq) XXX_DiscardUnknown() {
	xxx_messageInfo_WxContractCallbackReq.DiscardUnknown(m)
}

var xxx_messageInfo_WxContractCallbackReq proto.InternalMessageInfo

// +bili:deepcopy-gen=true
// +bili:deepcopy-gen:structs=go-common/app/service/main/tv/internal/model.WxContractCallbackReply
type WxContractCallbackReply struct {
	ContractId           string   `protobuf:"bytes,1,opt,name=contract_id,json=contractId,proto3" json:"contract_id"`
	Result               string   `protobuf:"bytes,2,opt,name=result,proto3" json:"result"`
	Msg                  string   `protobuf:"bytes,3,opt,name=msg,proto3" json:"msg"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *WxContractCallbackReply) Reset()         { *m = WxContractCallbackReply{} }
func (m *WxContractCallbackReply) String() string { return proto.CompactTextString(m) }
func (*WxContractCallbackReply) ProtoMessage()    {}
func (*WxContractCallbackReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_2cb1ead6fc72f168, []int{27}
}
func (m *WxContractCallbackReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WxContractCallbackReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WxContractCallbackReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *WxContractCallbackReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WxContractCallbackReply.Merge(dst, src)
}
func (m *WxContractCallbackReply) XXX_Size() int {
	return m.Size()
}
func (m *WxContractCallbackReply) XXX_DiscardUnknown() {
	xxx_messageInfo_WxContractCallbackReply.DiscardUnknown(m)
}

var xxx_messageInfo_WxContractCallbackReply proto.InternalMessageInfo

type TokenInfoReq struct {
	Token                []string `protobuf:"bytes,1,rep,name=token" json:"token,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TokenInfoReq) Reset()         { *m = TokenInfoReq{} }
func (m *TokenInfoReq) String() string { return proto.CompactTextString(m) }
func (*TokenInfoReq) ProtoMessage()    {}
func (*TokenInfoReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_2cb1ead6fc72f168, []int{28}
}
func (m *TokenInfoReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TokenInfoReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TokenInfoReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *TokenInfoReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TokenInfoReq.Merge(dst, src)
}
func (m *TokenInfoReq) XXX_Size() int {
	return m.Size()
}
func (m *TokenInfoReq) XXX_DiscardUnknown() {
	xxx_messageInfo_TokenInfoReq.DiscardUnknown(m)
}

var xxx_messageInfo_TokenInfoReq proto.InternalMessageInfo

// +bili:deepcopy-gen=true
// +bili:deepcopy-gen:structs=go-common/app/service/main/tv/internal/model.TokenInfo
type TokenInfo struct {
	OrderNo              string   `protobuf:"bytes,1,opt,name=order_no,json=orderNo,proto3" json:"order_no"`
	Status               int8     `protobuf:"varint,2,opt,name=status,proto3,casttype=int8" json:"status"`
	Mid                  int64    `protobuf:"varint,3,opt,name=mid,proto3" json:"mid"`
	Token                string   `protobuf:"bytes,4,opt,name=token,proto3" json:"token"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TokenInfo) Reset()         { *m = TokenInfo{} }
func (m *TokenInfo) String() string { return proto.CompactTextString(m) }
func (*TokenInfo) ProtoMessage()    {}
func (*TokenInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_2cb1ead6fc72f168, []int{29}
}
func (m *TokenInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TokenInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TokenInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *TokenInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TokenInfo.Merge(dst, src)
}
func (m *TokenInfo) XXX_Size() int {
	return m.Size()
}
func (m *TokenInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_TokenInfo.DiscardUnknown(m)
}

var xxx_messageInfo_TokenInfo proto.InternalMessageInfo

type TokenInfoReply struct {
	Tokens               []*TokenInfo `protobuf:"bytes,1,rep,name=tokens" json:"tokens"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *TokenInfoReply) Reset()         { *m = TokenInfoReply{} }
func (m *TokenInfoReply) String() string { return proto.CompactTextString(m) }
func (*TokenInfoReply) ProtoMessage()    {}
func (*TokenInfoReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_2cb1ead6fc72f168, []int{30}
}
func (m *TokenInfoReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TokenInfoReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TokenInfoReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *TokenInfoReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TokenInfoReply.Merge(dst, src)
}
func (m *TokenInfoReply) XXX_Size() int {
	return m.Size()
}
func (m *TokenInfoReply) XXX_DiscardUnknown() {
	xxx_messageInfo_TokenInfoReply.DiscardUnknown(m)
}

var xxx_messageInfo_TokenInfoReply proto.InternalMessageInfo

type YstUserInfoReq struct {
	Mid                  int64    `protobuf:"varint,1,opt,name=mid,proto3" json:"mid,omitempty"`
	Sign                 string   `protobuf:"bytes,2,opt,name=sign,proto3" json:"sign,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *YstUserInfoReq) Reset()         { *m = YstUserInfoReq{} }
func (m *YstUserInfoReq) String() string { return proto.CompactTextString(m) }
func (*YstUserInfoReq) ProtoMessage()    {}
func (*YstUserInfoReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_2cb1ead6fc72f168, []int{31}
}
func (m *YstUserInfoReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *YstUserInfoReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_YstUserInfoReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *YstUserInfoReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_YstUserInfoReq.Merge(dst, src)
}
func (m *YstUserInfoReq) XXX_Size() int {
	return m.Size()
}
func (m *YstUserInfoReq) XXX_DiscardUnknown() {
	xxx_messageInfo_YstUserInfoReq.DiscardUnknown(m)
}

var xxx_messageInfo_YstUserInfoReq proto.InternalMessageInfo

type YstUserInfoReply struct {
	Mid                  int64                       `protobuf:"varint,1,opt,name=mid,proto3" json:"mid"`
	VipType              int8                        `protobuf:"varint,2,opt,name=vip_type,json=vipType,proto3,casttype=int8" json:"vip_type"`
	PayType              int8                        `protobuf:"varint,3,opt,name=pay_type,json=payType,proto3,casttype=int8" json:"pay_type"`
	PayChannelId         string                      `protobuf:"bytes,4,opt,name=pay_channel_id,json=payChannelId,proto3" json:"pay_channel_id"`
	Status               int8                        `protobuf:"varint,5,opt,name=status,proto3,casttype=int8" json:"status"`
	OverdueTime          go_common_library_time.Time `protobuf:"varint,6,opt,name=overdue_time,json=overdueTime,proto3,casttype=go-common/library/time.Time" json:"overdue_time"`
	Result               string                      `protobuf:"bytes,7,opt,name=result,proto3" json:"result"`
	Msg                  string                      `protobuf:"bytes,8,opt,name=msg,proto3" json:"msg"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_unrecognized     []byte                      `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *YstUserInfoReply) Reset()         { *m = YstUserInfoReply{} }
func (m *YstUserInfoReply) String() string { return proto.CompactTextString(m) }
func (*YstUserInfoReply) ProtoMessage()    {}
func (*YstUserInfoReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_2cb1ead6fc72f168, []int{32}
}
func (m *YstUserInfoReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *YstUserInfoReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_YstUserInfoReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *YstUserInfoReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_YstUserInfoReply.Merge(dst, src)
}
func (m *YstUserInfoReply) XXX_Size() int {
	return m.Size()
}
func (m *YstUserInfoReply) XXX_DiscardUnknown() {
	xxx_messageInfo_YstUserInfoReply.DiscardUnknown(m)
}

var xxx_messageInfo_YstUserInfoReply proto.InternalMessageInfo

func init() {
	proto.RegisterType((*UserInfoReq)(nil), "tv.service.v1.UserInfoReq")
	proto.RegisterType((*UserInfoReply)(nil), "tv.service.v1.UserInfoReply")
	proto.RegisterType((*ChangeHistoryReq)(nil), "tv.service.v1.ChangeHistoryReq")
	proto.RegisterType((*ChangeHistoryReply)(nil), "tv.service.v1.ChangeHistoryReply")
	proto.RegisterType((*ChangeHistorysReq)(nil), "tv.service.v1.ChangeHistorysReq")
	proto.RegisterType((*ChangeHistorysReply)(nil), "tv.service.v1.ChangeHistorysReply")
	proto.RegisterType((*PanelInfoReq)(nil), "tv.service.v1.PanelInfoReq")
	proto.RegisterType((*PanelPriceConfig)(nil), "tv.service.v1.PanelPriceConfig")
	proto.RegisterType((*PanelPriceConfigs)(nil), "tv.service.v1.PanelPriceConfigs")
	proto.RegisterType((*PanelInfoReply)(nil), "tv.service.v1.PanelInfoReply")
	proto.RegisterMapType((map[string]*PanelPriceConfigs)(nil), "tv.service.v1.PanelInfoReply.PriceConfigsEntry")
	proto.RegisterType((*GuestPanelInfoReq)(nil), "tv.service.v1.GuestPanelInfoReq")
	proto.RegisterType((*GuestPanelInfoReply)(nil), "tv.service.v1.GuestPanelInfoReply")
	proto.RegisterMapType((map[string]*PanelPriceConfigs)(nil), "tv.service.v1.GuestPanelInfoReply.PriceConfigsEntry")
	proto.RegisterType((*PayOrderReq)(nil), "tv.service.v1.PayOrderReq")
	proto.RegisterType((*PayOrderReply)(nil), "tv.service.v1.PayOrderReply")
	proto.RegisterType((*CreateQrReq)(nil), "tv.service.v1.CreateQrReq")
	proto.RegisterType((*CreateQrReply)(nil), "tv.service.v1.CreateQrReply")
	proto.RegisterType((*CreateGuestQrReq)(nil), "tv.service.v1.CreateGuestQrReq")
	proto.RegisterType((*CreateGuestQrReply)(nil), "tv.service.v1.CreateGuestQrReply")
	proto.RegisterType((*PayCallbackReq)(nil), "tv.service.v1.PayCallbackReq")
	proto.RegisterType((*PayCallbackReply)(nil), "tv.service.v1.PayCallbackReply")
	proto.RegisterType((*CreateOrderReq)(nil), "tv.service.v1.CreateOrderReq")
	proto.RegisterType((*CreateOrderReply)(nil), "tv.service.v1.CreateOrderReply")
	proto.RegisterType((*CreateGuestOrderReq)(nil), "tv.service.v1.CreateGuestOrderReq")
	proto.RegisterType((*CreateGuestOrderReply)(nil), "tv.service.v1.CreateGuestOrderReply")
	proto.RegisterType((*RenewVipReq)(nil), "tv.service.v1.RenewVipReq")
	proto.RegisterType((*RenewVipReply)(nil), "tv.service.v1.RenewVipReply")
	proto.RegisterType((*WxContractCallbackReq)(nil), "tv.service.v1.WxContractCallbackReq")
	proto.RegisterType((*WxContractCallbackReply)(nil), "tv.service.v1.WxContractCallbackReply")
	proto.RegisterType((*TokenInfoReq)(nil), "tv.service.v1.TokenInfoReq")
	proto.RegisterType((*TokenInfo)(nil), "tv.service.v1.TokenInfo")
	proto.RegisterType((*TokenInfoReply)(nil), "tv.service.v1.TokenInfoReply")
	proto.RegisterType((*YstUserInfoReq)(nil), "tv.service.v1.YstUserInfoReq")
	proto.RegisterType((*YstUserInfoReply)(nil), "tv.service.v1.YstUserInfoReply")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// TVServiceClient is the client API for TVService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TVServiceClient interface {
	// 查询会员信息
	UserInfo(ctx context.Context, in *UserInfoReq, opts ...grpc.CallOption) (*UserInfoReply, error)
	ChangeHistory(ctx context.Context, in *ChangeHistoryReq, opts ...grpc.CallOption) (*ChangeHistoryReply, error)
	ChangeHistorys(ctx context.Context, in *ChangeHistorysReq, opts ...grpc.CallOption) (*ChangeHistorysReply, error)
	PanelInfo(ctx context.Context, in *PanelInfoReq, opts ...grpc.CallOption) (*PanelInfoReply, error)
	GuestPanelInfo(ctx context.Context, in *GuestPanelInfoReq, opts ...grpc.CallOption) (*GuestPanelInfoReply, error)
	PayOrder(ctx context.Context, in *PayOrderReq, opts ...grpc.CallOption) (*PayOrderReply, error)
	CreateQr(ctx context.Context, in *CreateQrReq, opts ...grpc.CallOption) (*CreateQrReply, error)
	CreateGuestQr(ctx context.Context, in *CreateGuestQrReq, opts ...grpc.CallOption) (*CreateGuestQrReply, error)
	TokenInfo(ctx context.Context, in *TokenInfoReq, opts ...grpc.CallOption) (*TokenInfoReply, error)
	CreateOrder(ctx context.Context, in *CreateOrderReq, opts ...grpc.CallOption) (*CreateOrderReply, error)
	CreateGuestOrder(ctx context.Context, in *CreateGuestOrderReq, opts ...grpc.CallOption) (*CreateGuestOrderReply, error)
	RenewVip(ctx context.Context, in *RenewVipReq, opts ...grpc.CallOption) (*RenewVipReply, error)
	YstUserInfo(ctx context.Context, in *YstUserInfoReq, opts ...grpc.CallOption) (*YstUserInfoReply, error)
	PayCallback(ctx context.Context, in *PayCallbackReq, opts ...grpc.CallOption) (*PayCallbackReply, error)
	WxContractCallback(ctx context.Context, in *WxContractCallbackReq, opts ...grpc.CallOption) (*WxContractCallbackReply, error)
}

type tVServiceClient struct {
	cc *grpc.ClientConn
}

func NewTVServiceClient(cc *grpc.ClientConn) TVServiceClient {
	return &tVServiceClient{cc}
}

func (c *tVServiceClient) UserInfo(ctx context.Context, in *UserInfoReq, opts ...grpc.CallOption) (*UserInfoReply, error) {
	out := new(UserInfoReply)
	err := c.cc.Invoke(ctx, "/tv.service.v1.TVService/UserInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tVServiceClient) ChangeHistory(ctx context.Context, in *ChangeHistoryReq, opts ...grpc.CallOption) (*ChangeHistoryReply, error) {
	out := new(ChangeHistoryReply)
	err := c.cc.Invoke(ctx, "/tv.service.v1.TVService/ChangeHistory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tVServiceClient) ChangeHistorys(ctx context.Context, in *ChangeHistorysReq, opts ...grpc.CallOption) (*ChangeHistorysReply, error) {
	out := new(ChangeHistorysReply)
	err := c.cc.Invoke(ctx, "/tv.service.v1.TVService/ChangeHistorys", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tVServiceClient) PanelInfo(ctx context.Context, in *PanelInfoReq, opts ...grpc.CallOption) (*PanelInfoReply, error) {
	out := new(PanelInfoReply)
	err := c.cc.Invoke(ctx, "/tv.service.v1.TVService/PanelInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tVServiceClient) GuestPanelInfo(ctx context.Context, in *GuestPanelInfoReq, opts ...grpc.CallOption) (*GuestPanelInfoReply, error) {
	out := new(GuestPanelInfoReply)
	err := c.cc.Invoke(ctx, "/tv.service.v1.TVService/GuestPanelInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tVServiceClient) PayOrder(ctx context.Context, in *PayOrderReq, opts ...grpc.CallOption) (*PayOrderReply, error) {
	out := new(PayOrderReply)
	err := c.cc.Invoke(ctx, "/tv.service.v1.TVService/PayOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tVServiceClient) CreateQr(ctx context.Context, in *CreateQrReq, opts ...grpc.CallOption) (*CreateQrReply, error) {
	out := new(CreateQrReply)
	err := c.cc.Invoke(ctx, "/tv.service.v1.TVService/CreateQr", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tVServiceClient) CreateGuestQr(ctx context.Context, in *CreateGuestQrReq, opts ...grpc.CallOption) (*CreateGuestQrReply, error) {
	out := new(CreateGuestQrReply)
	err := c.cc.Invoke(ctx, "/tv.service.v1.TVService/CreateGuestQr", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tVServiceClient) TokenInfo(ctx context.Context, in *TokenInfoReq, opts ...grpc.CallOption) (*TokenInfoReply, error) {
	out := new(TokenInfoReply)
	err := c.cc.Invoke(ctx, "/tv.service.v1.TVService/TokenInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tVServiceClient) CreateOrder(ctx context.Context, in *CreateOrderReq, opts ...grpc.CallOption) (*CreateOrderReply, error) {
	out := new(CreateOrderReply)
	err := c.cc.Invoke(ctx, "/tv.service.v1.TVService/CreateOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tVServiceClient) CreateGuestOrder(ctx context.Context, in *CreateGuestOrderReq, opts ...grpc.CallOption) (*CreateGuestOrderReply, error) {
	out := new(CreateGuestOrderReply)
	err := c.cc.Invoke(ctx, "/tv.service.v1.TVService/CreateGuestOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tVServiceClient) RenewVip(ctx context.Context, in *RenewVipReq, opts ...grpc.CallOption) (*RenewVipReply, error) {
	out := new(RenewVipReply)
	err := c.cc.Invoke(ctx, "/tv.service.v1.TVService/RenewVip", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tVServiceClient) YstUserInfo(ctx context.Context, in *YstUserInfoReq, opts ...grpc.CallOption) (*YstUserInfoReply, error) {
	out := new(YstUserInfoReply)
	err := c.cc.Invoke(ctx, "/tv.service.v1.TVService/YstUserInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tVServiceClient) PayCallback(ctx context.Context, in *PayCallbackReq, opts ...grpc.CallOption) (*PayCallbackReply, error) {
	out := new(PayCallbackReply)
	err := c.cc.Invoke(ctx, "/tv.service.v1.TVService/PayCallback", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tVServiceClient) WxContractCallback(ctx context.Context, in *WxContractCallbackReq, opts ...grpc.CallOption) (*WxContractCallbackReply, error) {
	out := new(WxContractCallbackReply)
	err := c.cc.Invoke(ctx, "/tv.service.v1.TVService/WxContractCallback", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TVServiceServer is the server API for TVService service.
type TVServiceServer interface {
	// 查询会员信息
	UserInfo(context.Context, *UserInfoReq) (*UserInfoReply, error)
	ChangeHistory(context.Context, *ChangeHistoryReq) (*ChangeHistoryReply, error)
	ChangeHistorys(context.Context, *ChangeHistorysReq) (*ChangeHistorysReply, error)
	PanelInfo(context.Context, *PanelInfoReq) (*PanelInfoReply, error)
	GuestPanelInfo(context.Context, *GuestPanelInfoReq) (*GuestPanelInfoReply, error)
	PayOrder(context.Context, *PayOrderReq) (*PayOrderReply, error)
	CreateQr(context.Context, *CreateQrReq) (*CreateQrReply, error)
	CreateGuestQr(context.Context, *CreateGuestQrReq) (*CreateGuestQrReply, error)
	TokenInfo(context.Context, *TokenInfoReq) (*TokenInfoReply, error)
	CreateOrder(context.Context, *CreateOrderReq) (*CreateOrderReply, error)
	CreateGuestOrder(context.Context, *CreateGuestOrderReq) (*CreateGuestOrderReply, error)
	RenewVip(context.Context, *RenewVipReq) (*RenewVipReply, error)
	YstUserInfo(context.Context, *YstUserInfoReq) (*YstUserInfoReply, error)
	PayCallback(context.Context, *PayCallbackReq) (*PayCallbackReply, error)
	WxContractCallback(context.Context, *WxContractCallbackReq) (*WxContractCallbackReply, error)
}

func RegisterTVServiceServer(s *grpc.Server, srv TVServiceServer) {
	s.RegisterService(&_TVService_serviceDesc, srv)
}

func _TVService_UserInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TVServiceServer).UserInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tv.service.v1.TVService/UserInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TVServiceServer).UserInfo(ctx, req.(*UserInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TVService_ChangeHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeHistoryReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TVServiceServer).ChangeHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tv.service.v1.TVService/ChangeHistory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TVServiceServer).ChangeHistory(ctx, req.(*ChangeHistoryReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TVService_ChangeHistorys_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeHistorysReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TVServiceServer).ChangeHistorys(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tv.service.v1.TVService/ChangeHistorys",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TVServiceServer).ChangeHistorys(ctx, req.(*ChangeHistorysReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TVService_PanelInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PanelInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TVServiceServer).PanelInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tv.service.v1.TVService/PanelInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TVServiceServer).PanelInfo(ctx, req.(*PanelInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TVService_GuestPanelInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GuestPanelInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TVServiceServer).GuestPanelInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tv.service.v1.TVService/GuestPanelInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TVServiceServer).GuestPanelInfo(ctx, req.(*GuestPanelInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TVService_PayOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PayOrderReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TVServiceServer).PayOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tv.service.v1.TVService/PayOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TVServiceServer).PayOrder(ctx, req.(*PayOrderReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TVService_CreateQr_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateQrReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TVServiceServer).CreateQr(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tv.service.v1.TVService/CreateQr",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TVServiceServer).CreateQr(ctx, req.(*CreateQrReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TVService_CreateGuestQr_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateGuestQrReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TVServiceServer).CreateGuestQr(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tv.service.v1.TVService/CreateGuestQr",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TVServiceServer).CreateGuestQr(ctx, req.(*CreateGuestQrReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TVService_TokenInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TokenInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TVServiceServer).TokenInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tv.service.v1.TVService/TokenInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TVServiceServer).TokenInfo(ctx, req.(*TokenInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TVService_CreateOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOrderReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TVServiceServer).CreateOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tv.service.v1.TVService/CreateOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TVServiceServer).CreateOrder(ctx, req.(*CreateOrderReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TVService_CreateGuestOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateGuestOrderReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TVServiceServer).CreateGuestOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tv.service.v1.TVService/CreateGuestOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TVServiceServer).CreateGuestOrder(ctx, req.(*CreateGuestOrderReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TVService_RenewVip_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RenewVipReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TVServiceServer).RenewVip(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tv.service.v1.TVService/RenewVip",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TVServiceServer).RenewVip(ctx, req.(*RenewVipReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TVService_YstUserInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(YstUserInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TVServiceServer).YstUserInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tv.service.v1.TVService/YstUserInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TVServiceServer).YstUserInfo(ctx, req.(*YstUserInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TVService_PayCallback_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PayCallbackReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TVServiceServer).PayCallback(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tv.service.v1.TVService/PayCallback",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TVServiceServer).PayCallback(ctx, req.(*PayCallbackReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TVService_WxContractCallback_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WxContractCallbackReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TVServiceServer).WxContractCallback(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tv.service.v1.TVService/WxContractCallback",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TVServiceServer).WxContractCallback(ctx, req.(*WxContractCallbackReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _TVService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "tv.service.v1.TVService",
	HandlerType: (*TVServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UserInfo",
			Handler:    _TVService_UserInfo_Handler,
		},
		{
			MethodName: "ChangeHistory",
			Handler:    _TVService_ChangeHistory_Handler,
		},
		{
			MethodName: "ChangeHistorys",
			Handler:    _TVService_ChangeHistorys_Handler,
		},
		{
			MethodName: "PanelInfo",
			Handler:    _TVService_PanelInfo_Handler,
		},
		{
			MethodName: "GuestPanelInfo",
			Handler:    _TVService_GuestPanelInfo_Handler,
		},
		{
			MethodName: "PayOrder",
			Handler:    _TVService_PayOrder_Handler,
		},
		{
			MethodName: "CreateQr",
			Handler:    _TVService_CreateQr_Handler,
		},
		{
			MethodName: "CreateGuestQr",
			Handler:    _TVService_CreateGuestQr_Handler,
		},
		{
			MethodName: "TokenInfo",
			Handler:    _TVService_TokenInfo_Handler,
		},
		{
			MethodName: "CreateOrder",
			Handler:    _TVService_CreateOrder_Handler,
		},
		{
			MethodName: "CreateGuestOrder",
			Handler:    _TVService_CreateGuestOrder_Handler,
		},
		{
			MethodName: "RenewVip",
			Handler:    _TVService_RenewVip_Handler,
		},
		{
			MethodName: "YstUserInfo",
			Handler:    _TVService_YstUserInfo_Handler,
		},
		{
			MethodName: "PayCallback",
			Handler:    _TVService_PayCallback_Handler,
		},
		{
			MethodName: "WxContractCallback",
			Handler:    _TVService_WxContractCallback_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "app/service/main/tv/api/api.proto",
}

func (m *UserInfoReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserInfoReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Mid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Mid))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *UserInfoReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserInfoReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Mid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Mid))
	}
	if m.VipType != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.VipType))
	}
	if m.PayType != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.PayType))
	}
	if len(m.PayChannelId) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.PayChannelId)))
		i += copy(dAtA[i:], m.PayChannelId)
	}
	if m.Status != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Status))
	}
	if m.OverdueTime != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.OverdueTime))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ChangeHistoryReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChangeHistoryReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Id))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ChangeHistoryReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChangeHistoryReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Id))
	}
	if m.Mid != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Mid))
	}
	if m.ChangeType != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.ChangeType))
	}
	if m.ChangeTime != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.ChangeTime))
	}
	if len(m.OrderNo) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.OrderNo)))
		i += copy(dAtA[i:], m.OrderNo)
	}
	if m.Days != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Days))
	}
	if len(m.OperatorId) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.OperatorId)))
		i += copy(dAtA[i:], m.OperatorId)
	}
	if m.Ctime != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Ctime))
	}
	if m.Mtime != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Mtime))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ChangeHistorysReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChangeHistorysReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Mid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Mid))
	}
	if m.From != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.From))
	}
	if m.To != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.To))
	}
	if m.Pn != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Pn))
	}
	if m.Ps != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Ps))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ChangeHistorysReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChangeHistorysReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Total != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Total))
	}
	if len(m.Historys) > 0 {
		for _, msg := range m.Historys {
			dAtA[i] = 0x12
			i++
			i = encodeVarintApi(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *PanelInfoReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PanelInfoReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Mid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Mid))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *PanelPriceConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PanelPriceConfig) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Id))
	}
	if m.Pid != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Pid))
	}
	if m.Platform != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Platform))
	}
	if len(m.ProductName) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.ProductName)))
		i += copy(dAtA[i:], m.ProductName)
	}
	if len(m.ProductId) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.ProductId)))
		i += copy(dAtA[i:], m.ProductId)
	}
	if m.SuitType != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.SuitType))
	}
	if m.Month != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Month))
	}
	if m.SubType != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.SubType))
	}
	if m.Price != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Price))
	}
	if m.Selected != 0 {
		dAtA[i] = 0x50
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Selected))
	}
	if len(m.Remark) > 0 {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Remark)))
		i += copy(dAtA[i:], m.Remark)
	}
	if m.Status != 0 {
		dAtA[i] = 0x60
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Status))
	}
	if len(m.Superscript) > 0 {
		dAtA[i] = 0x6a
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Superscript)))
		i += copy(dAtA[i:], m.Superscript)
	}
	if m.OriginPrice != 0 {
		dAtA[i] = 0x70
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.OriginPrice))
	}
	if m.MaxNum != 0 {
		dAtA[i] = 0x78
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.MaxNum))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *PanelPriceConfigs) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PanelPriceConfigs) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.PriceConfigs) > 0 {
		for _, msg := range m.PriceConfigs {
			dAtA[i] = 0xa
			i++
			i = encodeVarintApi(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *PanelInfoReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PanelInfoReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.PriceConfigs) > 0 {
		for k, _ := range m.PriceConfigs {
			dAtA[i] = 0xa
			i++
			v := m.PriceConfigs[k]
			msgSize := 0
			if v != nil {
				msgSize = v.Size()
				msgSize += 1 + sovApi(uint64(msgSize))
			}
			mapSize := 1 + len(k) + sovApi(uint64(len(k))) + msgSize
			i = encodeVarintApi(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintApi(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			if v != nil {
				dAtA[i] = 0x12
				i++
				i = encodeVarintApi(dAtA, i, uint64(v.Size()))
				n1, err := v.MarshalTo(dAtA[i:])
				if err != nil {
					return 0, err
				}
				i += n1
			}
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GuestPanelInfoReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GuestPanelInfoReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GuestPanelInfoReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GuestPanelInfoReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.PriceConfigs) > 0 {
		for k, _ := range m.PriceConfigs {
			dAtA[i] = 0xa
			i++
			v := m.PriceConfigs[k]
			msgSize := 0
			if v != nil {
				msgSize = v.Size()
				msgSize += 1 + sovApi(uint64(msgSize))
			}
			mapSize := 1 + len(k) + sovApi(uint64(len(k))) + msgSize
			i = encodeVarintApi(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintApi(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			if v != nil {
				dAtA[i] = 0x12
				i++
				i = encodeVarintApi(dAtA, i, uint64(v.Size()))
				n2, err := v.MarshalTo(dAtA[i:])
				if err != nil {
					return 0, err
				}
				i += n2
			}
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *PayOrderReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PayOrderReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.OrderNo) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.OrderNo)))
		i += copy(dAtA[i:], m.OrderNo)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *PayOrderReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PayOrderReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Id))
	}
	if len(m.OrderNo) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.OrderNo)))
		i += copy(dAtA[i:], m.OrderNo)
	}
	if m.Platform != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Platform))
	}
	if m.OrderType != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.OrderType))
	}
	if m.Mid != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Mid))
	}
	if m.BuyMonths != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.BuyMonths))
	}
	if len(m.ProductId) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.ProductId)))
		i += copy(dAtA[i:], m.ProductId)
	}
	if m.Money != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Money))
	}
	if m.Quantity != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Quantity))
	}
	if m.Status != 0 {
		dAtA[i] = 0x50
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Status))
	}
	if len(m.ThirdTradeNo) > 0 {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.ThirdTradeNo)))
		i += copy(dAtA[i:], m.ThirdTradeNo)
	}
	if m.PaymentMoney != 0 {
		dAtA[i] = 0x60
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.PaymentMoney))
	}
	if len(m.PaymentType) > 0 {
		dAtA[i] = 0x6a
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.PaymentType)))
		i += copy(dAtA[i:], m.PaymentType)
	}
	if m.PaymentTime != 0 {
		dAtA[i] = 0x70
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.PaymentTime))
	}
	if m.Ctime != 0 {
		dAtA[i] = 0x78
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Ctime))
	}
	if m.Mtime != 0 {
		dAtA[i] = 0x80
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Mtime))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *CreateQrReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateQrReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Mid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Mid))
	}
	if m.Pid != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Pid))
	}
	if m.BuyNum != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.BuyNum))
	}
	if len(m.Guid) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Guid)))
		i += copy(dAtA[i:], m.Guid)
	}
	if len(m.AppChannel) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.AppChannel)))
		i += copy(dAtA[i:], m.AppChannel)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *CreateQrReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateQrReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ExpireAt != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.ExpireAt))
	}
	if len(m.Url) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Url)))
		i += copy(dAtA[i:], m.Url)
	}
	if len(m.Token) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Token)))
		i += copy(dAtA[i:], m.Token)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *CreateGuestQrReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateGuestQrReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Pid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Pid))
	}
	if m.BuyNum != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.BuyNum))
	}
	if len(m.Guid) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Guid)))
		i += copy(dAtA[i:], m.Guid)
	}
	if len(m.AppChannel) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.AppChannel)))
		i += copy(dAtA[i:], m.AppChannel)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *CreateGuestQrReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateGuestQrReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ExpireAt != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.ExpireAt))
	}
	if len(m.Url) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Url)))
		i += copy(dAtA[i:], m.Url)
	}
	if len(m.Token) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Token)))
		i += copy(dAtA[i:], m.Token)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *PayCallbackReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PayCallbackReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.SeqNo) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.SeqNo)))
		i += copy(dAtA[i:], m.SeqNo)
	}
	if len(m.TraceNo) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.TraceNo)))
		i += copy(dAtA[i:], m.TraceNo)
	}
	if len(m.TradeState) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.TradeState)))
		i += copy(dAtA[i:], m.TradeState)
	}
	if len(m.ContractId) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.ContractId)))
		i += copy(dAtA[i:], m.ContractId)
	}
	if len(m.Sign) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Sign)))
		i += copy(dAtA[i:], m.Sign)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *PayCallbackReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PayCallbackReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.TraceNo) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.TraceNo)))
		i += copy(dAtA[i:], m.TraceNo)
	}
	if len(m.Result) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Result)))
		i += copy(dAtA[i:], m.Result)
	}
	if len(m.Msg) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Msg)))
		i += copy(dAtA[i:], m.Msg)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *CreateOrderReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateOrderReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Token) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Token)))
		i += copy(dAtA[i:], m.Token)
	}
	if m.Platform != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Platform))
	}
	if len(m.PaymentType) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.PaymentType)))
		i += copy(dAtA[i:], m.PaymentType)
	}
	if len(m.ClientIp) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.ClientIp)))
		i += copy(dAtA[i:], m.ClientIp)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *CreateOrderReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateOrderReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.OrderNo) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.OrderNo)))
		i += copy(dAtA[i:], m.OrderNo)
	}
	if len(m.PaymentType) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.PaymentType)))
		i += copy(dAtA[i:], m.PaymentType)
	}
	if len(m.CodeUrl) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.CodeUrl)))
		i += copy(dAtA[i:], m.CodeUrl)
	}
	if m.PaymentMoney != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.PaymentMoney))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *CreateGuestOrderReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateGuestOrderReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Mid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Mid))
	}
	if len(m.Token) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Token)))
		i += copy(dAtA[i:], m.Token)
	}
	if m.Platform != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Platform))
	}
	if len(m.PaymentType) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.PaymentType)))
		i += copy(dAtA[i:], m.PaymentType)
	}
	if len(m.ClientIp) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.ClientIp)))
		i += copy(dAtA[i:], m.ClientIp)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *CreateGuestOrderReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateGuestOrderReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.OrderNo) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.OrderNo)))
		i += copy(dAtA[i:], m.OrderNo)
	}
	if len(m.PaymentType) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.PaymentType)))
		i += copy(dAtA[i:], m.PaymentType)
	}
	if len(m.CodeUrl) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.CodeUrl)))
		i += copy(dAtA[i:], m.CodeUrl)
	}
	if m.PaymentMoney != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.PaymentMoney))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *RenewVipReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RenewVipReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Mid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Mid))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *RenewVipReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RenewVipReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *WxContractCallbackReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WxContractCallbackReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ContractId) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.ContractId)))
		i += copy(dAtA[i:], m.ContractId)
	}
	if len(m.ContractCode) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.ContractCode)))
		i += copy(dAtA[i:], m.ContractCode)
	}
	if len(m.ChangeType) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.ChangeType)))
		i += copy(dAtA[i:], m.ChangeType)
	}
	if len(m.ContractTerminationMode) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.ContractTerminationMode)))
		i += copy(dAtA[i:], m.ContractTerminationMode)
	}
	if len(m.Sign) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Sign)))
		i += copy(dAtA[i:], m.Sign)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *WxContractCallbackReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WxContractCallbackReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ContractId) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.ContractId)))
		i += copy(dAtA[i:], m.ContractId)
	}
	if len(m.Result) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Result)))
		i += copy(dAtA[i:], m.Result)
	}
	if len(m.Msg) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Msg)))
		i += copy(dAtA[i:], m.Msg)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *TokenInfoReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TokenInfoReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Token) > 0 {
		for _, s := range m.Token {
			dAtA[i] = 0xa
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *TokenInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TokenInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.OrderNo) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.OrderNo)))
		i += copy(dAtA[i:], m.OrderNo)
	}
	if m.Status != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Status))
	}
	if m.Mid != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Mid))
	}
	if len(m.Token) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Token)))
		i += copy(dAtA[i:], m.Token)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *TokenInfoReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TokenInfoReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Tokens) > 0 {
		for _, msg := range m.Tokens {
			dAtA[i] = 0xa
			i++
			i = encodeVarintApi(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *YstUserInfoReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *YstUserInfoReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Mid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Mid))
	}
	if len(m.Sign) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Sign)))
		i += copy(dAtA[i:], m.Sign)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *YstUserInfoReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *YstUserInfoReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Mid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Mid))
	}
	if m.VipType != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.VipType))
	}
	if m.PayType != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.PayType))
	}
	if len(m.PayChannelId) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.PayChannelId)))
		i += copy(dAtA[i:], m.PayChannelId)
	}
	if m.Status != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Status))
	}
	if m.OverdueTime != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.OverdueTime))
	}
	if len(m.Result) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Result)))
		i += copy(dAtA[i:], m.Result)
	}
	if len(m.Msg) > 0 {
		dAtA[i] = 0x42
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Msg)))
		i += copy(dAtA[i:], m.Msg)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintApi(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *UserInfoReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Mid != 0 {
		n += 1 + sovApi(uint64(m.Mid))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UserInfoReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Mid != 0 {
		n += 1 + sovApi(uint64(m.Mid))
	}
	if m.VipType != 0 {
		n += 1 + sovApi(uint64(m.VipType))
	}
	if m.PayType != 0 {
		n += 1 + sovApi(uint64(m.PayType))
	}
	l = len(m.PayChannelId)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Status != 0 {
		n += 1 + sovApi(uint64(m.Status))
	}
	if m.OverdueTime != 0 {
		n += 1 + sovApi(uint64(m.OverdueTime))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ChangeHistoryReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovApi(uint64(m.Id))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ChangeHistoryReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovApi(uint64(m.Id))
	}
	if m.Mid != 0 {
		n += 1 + sovApi(uint64(m.Mid))
	}
	if m.ChangeType != 0 {
		n += 1 + sovApi(uint64(m.ChangeType))
	}
	if m.ChangeTime != 0 {
		n += 1 + sovApi(uint64(m.ChangeTime))
	}
	l = len(m.OrderNo)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Days != 0 {
		n += 1 + sovApi(uint64(m.Days))
	}
	l = len(m.OperatorId)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Ctime != 0 {
		n += 1 + sovApi(uint64(m.Ctime))
	}
	if m.Mtime != 0 {
		n += 1 + sovApi(uint64(m.Mtime))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ChangeHistorysReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Mid != 0 {
		n += 1 + sovApi(uint64(m.Mid))
	}
	if m.From != 0 {
		n += 1 + sovApi(uint64(m.From))
	}
	if m.To != 0 {
		n += 1 + sovApi(uint64(m.To))
	}
	if m.Pn != 0 {
		n += 1 + sovApi(uint64(m.Pn))
	}
	if m.Ps != 0 {
		n += 1 + sovApi(uint64(m.Ps))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ChangeHistorysReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Total != 0 {
		n += 1 + sovApi(uint64(m.Total))
	}
	if len(m.Historys) > 0 {
		for _, e := range m.Historys {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PanelInfoReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Mid != 0 {
		n += 1 + sovApi(uint64(m.Mid))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PanelPriceConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovApi(uint64(m.Id))
	}
	if m.Pid != 0 {
		n += 1 + sovApi(uint64(m.Pid))
	}
	if m.Platform != 0 {
		n += 1 + sovApi(uint64(m.Platform))
	}
	l = len(m.ProductName)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.ProductId)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.SuitType != 0 {
		n += 1 + sovApi(uint64(m.SuitType))
	}
	if m.Month != 0 {
		n += 1 + sovApi(uint64(m.Month))
	}
	if m.SubType != 0 {
		n += 1 + sovApi(uint64(m.SubType))
	}
	if m.Price != 0 {
		n += 1 + sovApi(uint64(m.Price))
	}
	if m.Selected != 0 {
		n += 1 + sovApi(uint64(m.Selected))
	}
	l = len(m.Remark)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Status != 0 {
		n += 1 + sovApi(uint64(m.Status))
	}
	l = len(m.Superscript)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.OriginPrice != 0 {
		n += 1 + sovApi(uint64(m.OriginPrice))
	}
	if m.MaxNum != 0 {
		n += 1 + sovApi(uint64(m.MaxNum))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PanelPriceConfigs) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.PriceConfigs) > 0 {
		for _, e := range m.PriceConfigs {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PanelInfoReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.PriceConfigs) > 0 {
		for k, v := range m.PriceConfigs {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovApi(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovApi(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovApi(uint64(mapEntrySize))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GuestPanelInfoReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GuestPanelInfoReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.PriceConfigs) > 0 {
		for k, v := range m.PriceConfigs {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovApi(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovApi(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovApi(uint64(mapEntrySize))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PayOrderReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.OrderNo)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PayOrderReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovApi(uint64(m.Id))
	}
	l = len(m.OrderNo)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Platform != 0 {
		n += 1 + sovApi(uint64(m.Platform))
	}
	if m.OrderType != 0 {
		n += 1 + sovApi(uint64(m.OrderType))
	}
	if m.Mid != 0 {
		n += 1 + sovApi(uint64(m.Mid))
	}
	if m.BuyMonths != 0 {
		n += 1 + sovApi(uint64(m.BuyMonths))
	}
	l = len(m.ProductId)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Money != 0 {
		n += 1 + sovApi(uint64(m.Money))
	}
	if m.Quantity != 0 {
		n += 1 + sovApi(uint64(m.Quantity))
	}
	if m.Status != 0 {
		n += 1 + sovApi(uint64(m.Status))
	}
	l = len(m.ThirdTradeNo)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.PaymentMoney != 0 {
		n += 1 + sovApi(uint64(m.PaymentMoney))
	}
	l = len(m.PaymentType)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.PaymentTime != 0 {
		n += 1 + sovApi(uint64(m.PaymentTime))
	}
	if m.Ctime != 0 {
		n += 1 + sovApi(uint64(m.Ctime))
	}
	if m.Mtime != 0 {
		n += 2 + sovApi(uint64(m.Mtime))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CreateQrReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Mid != 0 {
		n += 1 + sovApi(uint64(m.Mid))
	}
	if m.Pid != 0 {
		n += 1 + sovApi(uint64(m.Pid))
	}
	if m.BuyNum != 0 {
		n += 1 + sovApi(uint64(m.BuyNum))
	}
	l = len(m.Guid)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.AppChannel)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CreateQrReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ExpireAt != 0 {
		n += 1 + sovApi(uint64(m.ExpireAt))
	}
	l = len(m.Url)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Token)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CreateGuestQrReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pid != 0 {
		n += 1 + sovApi(uint64(m.Pid))
	}
	if m.BuyNum != 0 {
		n += 1 + sovApi(uint64(m.BuyNum))
	}
	l = len(m.Guid)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.AppChannel)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CreateGuestQrReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ExpireAt != 0 {
		n += 1 + sovApi(uint64(m.ExpireAt))
	}
	l = len(m.Url)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Token)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PayCallbackReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SeqNo)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.TraceNo)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.TradeState)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.ContractId)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Sign)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PayCallbackReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TraceNo)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Result)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Msg)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CreateOrderReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Token)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Platform != 0 {
		n += 1 + sovApi(uint64(m.Platform))
	}
	l = len(m.PaymentType)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.ClientIp)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CreateOrderReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.OrderNo)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.PaymentType)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.CodeUrl)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.PaymentMoney != 0 {
		n += 1 + sovApi(uint64(m.PaymentMoney))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CreateGuestOrderReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Mid != 0 {
		n += 1 + sovApi(uint64(m.Mid))
	}
	l = len(m.Token)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Platform != 0 {
		n += 1 + sovApi(uint64(m.Platform))
	}
	l = len(m.PaymentType)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.ClientIp)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CreateGuestOrderReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.OrderNo)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.PaymentType)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.CodeUrl)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.PaymentMoney != 0 {
		n += 1 + sovApi(uint64(m.PaymentMoney))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RenewVipReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Mid != 0 {
		n += 1 + sovApi(uint64(m.Mid))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RenewVipReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *WxContractCallbackReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ContractId)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.ContractCode)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.ChangeType)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.ContractTerminationMode)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Sign)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *WxContractCallbackReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ContractId)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Result)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Msg)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TokenInfoReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Token) > 0 {
		for _, s := range m.Token {
			l = len(s)
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TokenInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.OrderNo)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Status != 0 {
		n += 1 + sovApi(uint64(m.Status))
	}
	if m.Mid != 0 {
		n += 1 + sovApi(uint64(m.Mid))
	}
	l = len(m.Token)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TokenInfoReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Tokens) > 0 {
		for _, e := range m.Tokens {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *YstUserInfoReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Mid != 0 {
		n += 1 + sovApi(uint64(m.Mid))
	}
	l = len(m.Sign)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *YstUserInfoReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Mid != 0 {
		n += 1 + sovApi(uint64(m.Mid))
	}
	if m.VipType != 0 {
		n += 1 + sovApi(uint64(m.VipType))
	}
	if m.PayType != 0 {
		n += 1 + sovApi(uint64(m.PayType))
	}
	l = len(m.PayChannelId)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Status != 0 {
		n += 1 + sovApi(uint64(m.Status))
	}
	if m.OverdueTime != 0 {
		n += 1 + sovApi(uint64(m.OverdueTime))
	}
	l = len(m.Result)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Msg)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovApi(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozApi(x uint64) (n int) {
	return sovApi(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *UserInfoReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserInfoReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserInfoReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserInfoReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserInfoReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserInfoReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VipType", wireType)
			}
			m.VipType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VipType |= (int8(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PayType", wireType)
			}
			m.PayType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PayType |= (int8(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PayChannelId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PayChannelId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= (int8(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OverdueTime", wireType)
			}
			m.OverdueTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OverdueTime |= (go_common_library_time.Time(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChangeHistoryReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChangeHistoryReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChangeHistoryReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChangeHistoryReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChangeHistoryReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChangeHistoryReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChangeType", wireType)
			}
			m.ChangeType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChangeType |= (int8(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChangeTime", wireType)
			}
			m.ChangeTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChangeTime |= (go_common_library_time.Time(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderNo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrderNo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Days", wireType)
			}
			m.Days = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Days |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperatorId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OperatorId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ctime", wireType)
			}
			m.Ctime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ctime |= (go_common_library_time.Time(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mtime", wireType)
			}
			m.Mtime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mtime |= (go_common_library_time.Time(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChangeHistorysReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChangeHistorysReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChangeHistorysReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			m.From = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.From |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field To", wireType)
			}
			m.To = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.To |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pn", wireType)
			}
			m.Pn = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Pn |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ps", wireType)
			}
			m.Ps = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ps |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChangeHistorysReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChangeHistorysReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChangeHistorysReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Total", wireType)
			}
			m.Total = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Total |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Historys", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Historys = append(m.Historys, &ChangeHistoryReply{})
			if err := m.Historys[len(m.Historys)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PanelInfoReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PanelInfoReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PanelInfoReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PanelPriceConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PanelPriceConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PanelPriceConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pid", wireType)
			}
			m.Pid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Pid |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Platform", wireType)
			}
			m.Platform = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Platform |= (int8(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProductName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProductName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProductId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProductId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SuitType", wireType)
			}
			m.SuitType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SuitType |= (int8(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Month", wireType)
			}
			m.Month = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Month |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubType", wireType)
			}
			m.SubType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SubType |= (int8(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Price", wireType)
			}
			m.Price = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Price |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Selected", wireType)
			}
			m.Selected = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Selected |= (int8(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Remark", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Remark = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= (int8(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Superscript", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Superscript = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OriginPrice", wireType)
			}
			m.OriginPrice = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OriginPrice |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxNum", wireType)
			}
			m.MaxNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxNum |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PanelPriceConfigs) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PanelPriceConfigs: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PanelPriceConfigs: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PriceConfigs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PriceConfigs = append(m.PriceConfigs, &PanelPriceConfig{})
			if err := m.PriceConfigs[len(m.PriceConfigs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PanelInfoReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PanelInfoReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PanelInfoReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PriceConfigs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PriceConfigs == nil {
				m.PriceConfigs = make(map[string]*PanelPriceConfigs)
			}
			var mapkey string
			var mapvalue *PanelPriceConfigs
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthApi
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= (int(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthApi
					}
					postmsgIndex := iNdEx + mapmsglen
					if mapmsglen < 0 {
						return ErrInvalidLengthApi
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &PanelPriceConfigs{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipApi(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthApi
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.PriceConfigs[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GuestPanelInfoReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GuestPanelInfoReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GuestPanelInfoReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GuestPanelInfoReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GuestPanelInfoReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GuestPanelInfoReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PriceConfigs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PriceConfigs == nil {
				m.PriceConfigs = make(map[string]*PanelPriceConfigs)
			}
			var mapkey string
			var mapvalue *PanelPriceConfigs
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthApi
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= (int(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthApi
					}
					postmsgIndex := iNdEx + mapmsglen
					if mapmsglen < 0 {
						return ErrInvalidLengthApi
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &PanelPriceConfigs{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipApi(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthApi
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.PriceConfigs[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PayOrderReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PayOrderReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PayOrderReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderNo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrderNo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PayOrderReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PayOrderReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PayOrderReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderNo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrderNo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Platform", wireType)
			}
			m.Platform = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Platform |= (int8(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderType", wireType)
			}
			m.OrderType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OrderType |= (int8(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BuyMonths", wireType)
			}
			m.BuyMonths = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BuyMonths |= (int8(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProductId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProductId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Money", wireType)
			}
			m.Money = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Money |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Quantity", wireType)
			}
			m.Quantity = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Quantity |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= (int8(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ThirdTradeNo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ThirdTradeNo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PaymentMoney", wireType)
			}
			m.PaymentMoney = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PaymentMoney |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PaymentType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PaymentType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PaymentTime", wireType)
			}
			m.PaymentTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PaymentTime |= (go_common_library_time.Time(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ctime", wireType)
			}
			m.Ctime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ctime |= (go_common_library_time.Time(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mtime", wireType)
			}
			m.Mtime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mtime |= (go_common_library_time.Time(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateQrReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateQrReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateQrReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pid", wireType)
			}
			m.Pid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Pid |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BuyNum", wireType)
			}
			m.BuyNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BuyNum |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Guid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Guid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppChannel", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AppChannel = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateQrReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateQrReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateQrReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpireAt", wireType)
			}
			m.ExpireAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExpireAt |= (go_common_library_time.Time(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Url", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Url = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateGuestQrReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateGuestQrReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateGuestQrReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pid", wireType)
			}
			m.Pid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Pid |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BuyNum", wireType)
			}
			m.BuyNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BuyNum |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Guid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Guid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppChannel", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AppChannel = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateGuestQrReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateGuestQrReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateGuestQrReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpireAt", wireType)
			}
			m.ExpireAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExpireAt |= (go_common_library_time.Time(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Url", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Url = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PayCallbackReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PayCallbackReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PayCallbackReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SeqNo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SeqNo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TraceNo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TraceNo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TradeState", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TradeState = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContractId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sign", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sign = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PayCallbackReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PayCallbackReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PayCallbackReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TraceNo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TraceNo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Result = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateOrderReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateOrderReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateOrderReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Platform", wireType)
			}
			m.Platform = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Platform |= (int8(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PaymentType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PaymentType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientIp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClientIp = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateOrderReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateOrderReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateOrderReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderNo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrderNo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PaymentType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PaymentType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CodeUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CodeUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PaymentMoney", wireType)
			}
			m.PaymentMoney = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PaymentMoney |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateGuestOrderReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateGuestOrderReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateGuestOrderReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Platform", wireType)
			}
			m.Platform = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Platform |= (int8(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PaymentType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PaymentType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientIp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClientIp = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateGuestOrderReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateGuestOrderReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateGuestOrderReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderNo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrderNo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PaymentType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PaymentType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CodeUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CodeUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PaymentMoney", wireType)
			}
			m.PaymentMoney = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PaymentMoney |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RenewVipReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RenewVipReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RenewVipReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RenewVipReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RenewVipReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RenewVipReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WxContractCallbackReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WxContractCallbackReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WxContractCallbackReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContractId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContractCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChangeType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChangeType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractTerminationMode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContractTerminationMode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sign", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sign = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WxContractCallbackReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WxContractCallbackReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WxContractCallbackReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContractId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Result = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TokenInfoReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TokenInfoReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TokenInfoReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token = append(m.Token, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TokenInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TokenInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TokenInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderNo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrderNo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= (int8(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TokenInfoReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TokenInfoReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TokenInfoReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tokens", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tokens = append(m.Tokens, &TokenInfo{})
			if err := m.Tokens[len(m.Tokens)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *YstUserInfoReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: YstUserInfoReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: YstUserInfoReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sign", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sign = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *YstUserInfoReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: YstUserInfoReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: YstUserInfoReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VipType", wireType)
			}
			m.VipType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VipType |= (int8(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PayType", wireType)
			}
			m.PayType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PayType |= (int8(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PayChannelId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PayChannelId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= (int8(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OverdueTime", wireType)
			}
			m.OverdueTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OverdueTime |= (go_common_library_time.Time(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Result = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipApi(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowApi
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowApi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowApi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthApi
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowApi
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipApi(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthApi = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowApi   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("app/service/main/tv/api/api.proto", fileDescriptor_api_2cb1ead6fc72f168)
}

var fileDescriptor_api_2cb1ead6fc72f168 = []byte{
	// 2146 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x59, 0xcd, 0x6f, 0x1c, 0x49,
	0x15, 0xa7, 0x67, 0x3c, 0x5f, 0x6f, 0x3e, 0xe2, 0xf4, 0xae, 0x37, 0x13, 0x67, 0x37, 0xed, 0x34,
	0xd1, 0xc6, 0x42, 0xc4, 0x93, 0xcd, 0xb2, 0x91, 0xb5, 0x42, 0x48, 0xd8, 0x41, 0xc1, 0x42, 0xf6,
	0x86, 0x8a, 0x37, 0xab, 0x45, 0x48, 0xa3, 0x9e, 0x99, 0xf2, 0xb8, 0xe5, 0xe9, 0xee, 0x72, 0x7f,
	0x98, 0xf4, 0x89, 0x03, 0x17, 0x84, 0x38, 0x71, 0x40, 0x48, 0x70, 0xe3, 0xca, 0xdf, 0xc0, 0x11,
	0xad, 0x84, 0x84, 0x40, 0x48, 0x9c, 0xd0, 0x08, 0x72, 0x9c, 0x3f, 0x61, 0x4f, 0xe8, 0x55, 0x55,
	0x77, 0xd7, 0x74, 0xb7, 0x3d, 0x66, 0x57, 0x42, 0x08, 0x71, 0xf0, 0x74, 0xd7, 0xab, 0xf7, 0x5e,
	0x57, 0xbd, 0x8f, 0xdf, 0x7b, 0x55, 0x86, 0x7b, 0x16, 0x63, 0x83, 0x80, 0xfa, 0x17, 0xf6, 0x98,
	0x0e, 0x1c, 0xcb, 0x76, 0x07, 0xe1, 0xc5, 0xc0, 0x62, 0x36, 0xfe, 0xed, 0x30, 0xdf, 0x0b, 0x3d,
	0xbd, 0x1b, 0x5e, 0xec, 0x48, 0x8e, 0x9d, 0x8b, 0xf7, 0x36, 0x1f, 0x4e, 0xed, 0xf0, 0x34, 0x1a,
	0xed, 0x8c, 0x3d, 0x67, 0x30, 0xf5, 0xa6, 0xde, 0x80, 0x73, 0x8d, 0xa2, 0x13, 0x3e, 0xe2, 0x03,
	0xfe, 0x26, 0xa4, 0x4d, 0x03, 0xda, 0x1f, 0x07, 0xd4, 0x3f, 0x70, 0x4f, 0x3c, 0x42, 0xcf, 0xf5,
	0x75, 0xa8, 0x3a, 0xf6, 0xa4, 0xaf, 0x6d, 0x69, 0xdb, 0x55, 0x82, 0xaf, 0xe6, 0x1f, 0x2a, 0xd0,
	0xcd, 0x38, 0xd8, 0x2c, 0xd6, 0x6f, 0x2b, 0x3c, 0x7b, 0x8d, 0xc5, 0xdc, 0xc0, 0x21, 0x67, 0xd6,
	0x07, 0xd0, 0xbc, 0xb0, 0xd9, 0x30, 0x8c, 0x19, 0xed, 0x57, 0xb6, 0xb4, 0xed, 0xda, 0xde, 0x9b,
	0x8b, 0xb9, 0x91, 0xd2, 0x3e, 0x9f, 0x1b, 0x6b, 0xb6, 0x1b, 0xee, 0x92, 0xc6, 0x85, 0xcd, 0x8e,
	0x63, 0x46, 0x51, 0x80, 0x59, 0xb1, 0x10, 0xa8, 0x66, 0x02, 0x09, 0x2d, 0x13, 0x60, 0x56, 0xcc,
	0x05, 0x76, 0xa1, 0x87, 0x93, 0xe3, 0x53, 0xcb, 0x75, 0xe9, 0x6c, 0x68, 0x4f, 0xfa, 0x6b, 0x5b,
	0xda, 0x76, 0x6b, 0x4f, 0x5f, 0xcc, 0x8d, 0xdc, 0x0c, 0xe9, 0x30, 0x2b, 0xde, 0x17, 0xc3, 0x83,
	0x89, 0xfe, 0x35, 0xa8, 0x07, 0xa1, 0x15, 0x46, 0x41, 0xbf, 0xc6, 0x3f, 0x84, 0x12, 0x92, 0x92,
	0x7e, 0x46, 0x8e, 0x75, 0x02, 0x1d, 0xef, 0x82, 0xfa, 0x93, 0x88, 0x0e, 0x43, 0xdb, 0xa1, 0xfd,
	0x3a, 0xdf, 0xeb, 0x60, 0x31, 0x37, 0x96, 0xe8, 0x9f, 0xcf, 0x8d, 0x3b, 0x53, 0xef, 0xe1, 0xd8,
	0x73, 0x1c, 0xcf, 0x1d, 0xcc, 0xec, 0x91, 0x6f, 0xf9, 0xf1, 0x00, 0x67, 0x76, 0x8e, 0x6d, 0x87,
	0x92, 0xb6, 0x64, 0xc6, 0x81, 0x69, 0xc2, 0x3a, 0x2e, 0x66, 0x4a, 0xbf, 0x6b, 0x07, 0xa1, 0xe7,
	0xc7, 0x68, 0xee, 0x1e, 0x54, 0xa4, 0x25, 0x6b, 0xa4, 0x62, 0x4f, 0xcc, 0x3f, 0x56, 0x41, 0xcf,
	0x31, 0xa1, 0xc5, 0xdf, 0xca, 0xd8, 0xf6, 0xea, 0x8b, 0xb9, 0x51, 0xb1, 0x27, 0xc8, 0x9e, 0x78,
	0xa2, 0x52, 0xe2, 0x89, 0x5d, 0x68, 0x8f, 0xb9, 0x22, 0xd5, 0xb6, 0xb7, 0x16, 0x73, 0x43, 0x25,
	0xa7, 0xfb, 0x06, 0x41, 0xe4, 0x16, 0xfe, 0x28, 0x93, 0xc4, 0xad, 0xaf, 0x71, 0xc9, 0x1d, 0x55,
	0xf2, 0x1a, 0x3b, 0x4f, 0x14, 0xda, 0x0e, 0xd5, 0x1f, 0x40, 0xd3, 0xf3, 0x27, 0xd4, 0x1f, 0xba,
	0x1e, 0x37, 0x7d, 0x6b, 0xaf, 0x83, 0x3e, 0x4e, 0x68, 0xa4, 0xc1, 0xdf, 0x8e, 0x3c, 0xfd, 0x6d,
	0x58, 0x9b, 0x58, 0x71, 0xc0, 0xad, 0x5d, 0xdb, 0x6b, 0x2e, 0xe6, 0x06, 0x1f, 0x13, 0xfe, 0xab,
	0x3f, 0x82, 0xb6, 0xc7, 0xa8, 0x6f, 0x85, 0x9e, 0x8f, 0x6e, 0x6f, 0x70, 0x4d, 0x37, 0x70, 0x5d,
	0x0a, 0x99, 0x40, 0x32, 0x38, 0x98, 0xe8, 0xdf, 0x82, 0xda, 0x98, 0xef, 0xa1, 0xc9, 0x15, 0x6e,
	0x2f, 0xe6, 0x86, 0x20, 0xac, 0x5a, 0xbd, 0xe0, 0x42, 0x79, 0x87, 0xcb, 0xb7, 0x32, 0x79, 0xe7,
	0x5a, 0xf2, 0x9c, 0xcb, 0xb4, 0xe1, 0xe6, 0x92, 0x33, 0x83, 0xd2, 0x0c, 0xd3, 0x75, 0x58, 0x3b,
	0xf1, 0x3d, 0x47, 0x24, 0x0c, 0xe1, 0xef, 0x18, 0x18, 0xa1, 0x27, 0xbc, 0x46, 0x2a, 0xa1, 0x87,
	0x63, 0xe6, 0x0a, 0x5f, 0x90, 0x0a, 0x73, 0xf9, 0x58, 0x06, 0x32, 0xa9, 0xb0, 0xc0, 0xfc, 0x89,
	0x06, 0x6f, 0xe4, 0xbf, 0x85, 0x91, 0x63, 0x40, 0x2d, 0xf4, 0x42, 0x6b, 0x26, 0x83, 0xa7, 0x85,
	0x5b, 0xe0, 0x04, 0x22, 0x1e, 0xfa, 0xf7, 0xa0, 0x79, 0x2a, 0x25, 0xfa, 0x95, 0xad, 0xea, 0x76,
	0xfb, 0xf1, 0xbd, 0x9d, 0x25, 0x40, 0xd9, 0x29, 0xc6, 0xa3, 0xf0, 0x5f, 0x22, 0x46, 0xd2, 0x37,
	0x73, 0x0b, 0x3a, 0xcf, 0x2d, 0xcc, 0xb6, 0x4b, 0xd1, 0xe4, 0x17, 0x35, 0x58, 0xe7, 0x2c, 0xcf,
	0x7d, 0x7b, 0x4c, 0xf7, 0x3d, 0xf7, 0xc4, 0x9e, 0x5e, 0x15, 0xde, 0x4c, 0x86, 0x77, 0x4d, 0x84,
	0x37, 0xc3, 0xf0, 0x66, 0xf6, 0x44, 0x7f, 0x04, 0x4d, 0x36, 0xb3, 0xc2, 0x13, 0xcf, 0x77, 0x96,
	0x70, 0x43, 0xd2, 0xd2, 0xc0, 0x4e, 0x29, 0xfa, 0xfb, 0xd0, 0x61, 0xbe, 0x37, 0x89, 0xc6, 0xe1,
	0xd0, 0xb5, 0x64, 0x5c, 0xb7, 0xf6, 0xd6, 0x31, 0xa5, 0x55, 0x3a, 0x69, 0xcb, 0xd1, 0x91, 0xe5,
	0x50, 0xfd, 0x21, 0x40, 0x32, 0x69, 0x4f, 0x64, 0xf0, 0xf6, 0x16, 0x73, 0x43, 0xa1, 0x92, 0x96,
	0x7c, 0x3f, 0x98, 0xe8, 0x8f, 0xa1, 0x15, 0x44, 0x76, 0x28, 0x52, 0x4e, 0x44, 0xf1, 0xc6, 0x62,
	0x6e, 0x64, 0xc4, 0x6c, 0x5d, 0x48, 0xe2, 0xe9, 0x66, 0x40, 0xcd, 0xf1, 0xdc, 0xf0, 0x94, 0x07,
	0xb4, 0xf4, 0x10, 0x27, 0x10, 0xf1, 0x40, 0x88, 0x0c, 0xa2, 0x91, 0xd0, 0xd9, 0xcc, 0xb6, 0x9a,
	0xd0, 0x32, 0x88, 0x0c, 0xa2, 0x51, 0xa2, 0x91, 0xa1, 0x75, 0x65, 0xd8, 0x72, 0x8d, 0x9c, 0x40,
	0xc4, 0x03, 0x8d, 0x17, 0xd0, 0x19, 0x1d, 0x87, 0x74, 0xd2, 0x07, 0x45, 0xa3, 0xa4, 0x29, 0x8b,
	0x94, 0x14, 0xdd, 0x84, 0xba, 0x4f, 0x1d, 0xcb, 0x3f, 0xeb, 0xb7, 0xb9, 0x0d, 0x00, 0xb1, 0x53,
	0x50, 0x88, 0x7c, 0x2a, 0xf8, 0xda, 0x59, 0x89, 0xaf, 0xef, 0x41, 0x3b, 0x88, 0x18, 0xf5, 0x83,
	0xb1, 0x6f, 0xb3, 0xb0, 0xdf, 0xcd, 0x72, 0x59, 0x21, 0x13, 0x75, 0x80, 0xfe, 0xf3, 0x7c, 0x7b,
	0x6a, 0xbb, 0x43, 0xb1, 0xb9, 0x1e, 0xff, 0x08, 0xf7, 0x9f, 0x4a, 0x27, 0x6d, 0x31, 0xe2, 0xf1,
	0xa5, 0xdf, 0x87, 0x86, 0x63, 0xbd, 0x1a, 0xba, 0x91, 0xd3, 0xbf, 0xc1, 0xf9, 0xdb, 0x8b, 0xb9,
	0x91, 0x90, 0x48, 0xdd, 0xb1, 0x5e, 0x1d, 0x45, 0x8e, 0x39, 0x83, 0x9b, 0xf9, 0x98, 0x0c, 0xf4,
	0x4f, 0xa0, 0xcb, 0x15, 0x0e, 0xc7, 0x82, 0xd0, 0xd7, 0x78, 0x76, 0x18, 0xb9, 0xec, 0xc8, 0x0b,
	0xee, 0xdd, 0x5c, 0xcc, 0x8d, 0x65, 0x49, 0xd2, 0x61, 0x8a, 0x62, 0xf3, 0xef, 0x1a, 0xf4, 0x94,
	0x2c, 0xc1, 0x2c, 0x9d, 0x96, 0x7f, 0x6b, 0x50, 0xf6, 0xad, 0x54, 0x6a, 0x47, 0x5d, 0xee, 0x77,
	0xdc, 0xd0, 0x8f, 0x57, 0x7e, 0x7b, 0xd3, 0x82, 0x9b, 0x05, 0x29, 0xcc, 0xd2, 0x33, 0x1a, 0xf3,
	0xfc, 0x6b, 0x11, 0x7c, 0xd5, 0x9f, 0x40, 0xed, 0xc2, 0x9a, 0x45, 0xa2, 0x86, 0xb7, 0x1f, 0x6f,
	0xad, 0xd8, 0x73, 0x40, 0x04, 0xfb, 0x87, 0x95, 0x5d, 0xcd, 0x7c, 0x03, 0x6e, 0x3e, 0x8b, 0x68,
	0x10, 0xaa, 0x40, 0x60, 0xfe, 0x55, 0x83, 0x37, 0xf2, 0x54, 0xdc, 0xf8, 0xa7, 0xe5, 0x1b, 0xff,
	0x46, 0xee, 0x83, 0x25, 0xa2, 0xc5, 0xdd, 0xff, 0xe7, 0xb7, 0xba, 0x0d, 0xed, 0xe7, 0x56, 0xfc,
	0x11, 0x56, 0x2f, 0x44, 0xbb, 0xdb, 0x4a, 0x9d, 0x13, 0x5f, 0x48, 0x2a, 0x9b, 0xf9, 0xbb, 0x3a,
	0x74, 0x33, 0xd6, 0xab, 0x4a, 0xba, 0x5a, 0x2c, 0x2b, 0x57, 0x15, 0xcb, 0x7f, 0x1f, 0x01, 0x3f,
	0x00, 0x10, 0x6a, 0x38, 0x94, 0x88, 0xba, 0xfe, 0x16, 0x82, 0x59, 0x46, 0x4d, 0xa5, 0x5a, 0x9c,
	0xc6, 0xe1, 0x44, 0x36, 0x19, 0xb5, 0x92, 0x26, 0xe3, 0x03, 0x80, 0x51, 0x14, 0x0f, 0x39, 0x4e,
	0x25, 0x65, 0x9b, 0x6b, 0xcc, 0xa8, 0x99, 0xc6, 0x51, 0x14, 0x1f, 0x72, 0x52, 0x0e, 0x55, 0x1b,
	0xab, 0x50, 0x55, 0x20, 0x24, 0x8d, 0x25, 0xfa, 0x25, 0x08, 0x49, 0x63, 0x22, 0x1e, 0xfa, 0x36,
	0x34, 0xcf, 0x23, 0xcb, 0x0d, 0xed, 0x30, 0x96, 0x98, 0xc7, 0x6d, 0x96, 0xd0, 0x48, 0xfa, 0xa6,
	0x60, 0x14, 0xac, 0xc4, 0xa8, 0x5d, 0xe8, 0x85, 0xa7, 0xb6, 0x3f, 0x19, 0x86, 0xbe, 0x35, 0xa1,
	0xe8, 0x8f, 0x76, 0xd6, 0x69, 0x2e, 0xcf, 0x90, 0x0e, 0x1f, 0x1f, 0xe3, 0xf0, 0xc8, 0xd3, 0x9f,
	0x40, 0x97, 0x59, 0xb1, 0x43, 0xdd, 0x70, 0x28, 0x16, 0x2e, 0x00, 0x51, 0x64, 0xa7, 0x3a, 0xc1,
	0x3b, 0x54, 0x1c, 0x1e, 0xf2, 0x7d, 0x60, 0x89, 0x92, 0xd3, 0xdc, 0x45, 0x5d, 0xa5, 0x44, 0x29,
	0x74, 0xd2, 0x96, 0x23, 0xee, 0x1e, 0xa2, 0x08, 0x61, 0xaf, 0x22, 0x70, 0x71, 0xb0, 0x24, 0x74,
	0x9d, 0x56, 0x35, 0xd1, 0x29, 0x1b, 0x1f, 0xd1, 0x38, 0xdd, 0xf8, 0x92, 0x8d, 0xd3, 0xfa, 0x17,
	0x6b, 0x9c, 0x7e, 0x0c, 0xed, 0x7d, 0x9f, 0x5a, 0x21, 0xfd, 0xbe, 0x5f, 0xde, 0x32, 0xad, 0x2b,
	0x9d, 0x81, 0x68, 0x08, 0x6e, 0x41, 0x03, 0x83, 0x0e, 0x91, 0x5e, 0x74, 0x49, 0xf5, 0x51, 0x14,
	0x1f, 0x45, 0x0e, 0x76, 0x57, 0xd3, 0x28, 0x29, 0xde, 0x84, 0xbf, 0xeb, 0x06, 0xb4, 0x2d, 0xc6,
	0x92, 0xa3, 0x02, 0x0f, 0xdc, 0x16, 0x01, 0x8b, 0x31, 0x79, 0x5a, 0x30, 0x7f, 0xa9, 0x41, 0x37,
	0x5b, 0x01, 0xe6, 0xeb, 0x01, 0xb4, 0xe8, 0x2b, 0x66, 0xfb, 0x74, 0x68, 0x85, 0x32, 0x6d, 0xbf,
	0x8e, 0xa5, 0x3d, 0x25, 0xae, 0xda, 0x5a, 0x53, 0x70, 0x7e, 0x3b, 0xc4, 0x84, 0x8a, 0xfc, 0x99,
	0xcc, 0x6e, 0x9e, 0x50, 0x91, 0x3f, 0x23, 0xf8, 0x23, 0xda, 0xb5, 0x33, 0xea, 0xf2, 0x8c, 0x6e,
	0x25, 0xed, 0xda, 0x19, 0x75, 0x89, 0x78, 0x98, 0x3e, 0xac, 0x8b, 0x75, 0x71, 0x48, 0x4c, 0xcd,
	0xc3, 0xd2, 0x53, 0x44, 0xde, 0x18, 0x95, 0x52, 0x63, 0x54, 0x2f, 0x37, 0xc6, 0x5a, 0xc1, 0x18,
	0xbf, 0xd6, 0x40, 0xcf, 0x7d, 0xf4, 0xbf, 0xc8, 0x22, 0xbf, 0xe2, 0xe5, 0x34, 0xde, 0xb7, 0x66,
	0xb3, 0x91, 0x35, 0x3e, 0x43, 0x83, 0x6c, 0x40, 0x3d, 0xa0, 0xe7, 0x19, 0x0c, 0xd7, 0x02, 0x7a,
	0x7e, 0xe4, 0x21, 0x3e, 0x87, 0xbe, 0x35, 0xa6, 0x29, 0xb4, 0x92, 0x06, 0x1f, 0x1f, 0x79, 0x68,
	0x03, 0x91, 0xcb, 0x98, 0xfb, 0x54, 0x9a, 0x07, 0x38, 0xe9, 0x05, 0x52, 0x90, 0x61, 0xec, 0xb9,
	0xc8, 0x1e, 0xa6, 0x67, 0x4e, 0x02, 0x09, 0xe9, 0x80, 0x37, 0xf1, 0x81, 0x3d, 0x75, 0x93, 0x30,
	0xc3, 0x77, 0x33, 0xc6, 0x5e, 0x57, 0x59, 0x19, 0x5a, 0xed, 0x5d, 0x65, 0x11, 0x7c, 0x75, 0xa2,
	0x25, 0xe1, 0x34, 0x84, 0xf7, 0x64, 0x45, 0xbc, 0xe3, 0x0a, 0xa2, 0x59, 0x28, 0xad, 0x22, 0x3b,
	0x2e, 0xa4, 0x10, 0xf9, 0xe4, 0xc8, 0x1c, 0x4c, 0xa5, 0x65, 0x04, 0x32, 0x07, 0x53, 0x82, 0x3f,
	0xe6, 0xcf, 0x35, 0xe8, 0x09, 0x9f, 0xa5, 0xe5, 0xe9, 0xcd, 0xc4, 0x92, 0xd2, 0x28, 0x7c, 0xa0,
	0xdf, 0x57, 0xca, 0x88, 0x68, 0xb4, 0x9b, 0x25, 0xa5, 0xe3, 0x5e, 0x0e, 0x99, 0x84, 0x81, 0x96,
	0x70, 0xe8, 0x0e, 0xb4, 0xc6, 0x33, 0x1b, 0x39, 0x6c, 0x26, 0xed, 0xd3, 0x14, 0x84, 0x03, 0x66,
	0xfe, 0x45, 0x4b, 0xe2, 0x56, 0x29, 0x81, 0x0f, 0xf2, 0xf5, 0xf2, 0xb2, 0x52, 0x97, 0xc7, 0xc5,
	0xca, 0x75, 0x70, 0xf1, 0x01, 0x34, 0xc7, 0xde, 0x84, 0x0e, 0x31, 0xb0, 0xaa, 0x99, 0xf6, 0x84,
	0x46, 0x1a, 0xf8, 0xf6, 0xb1, 0x3f, 0x2b, 0xa2, 0xf5, 0xda, 0xb5, 0xd0, 0xda, 0xfc, 0x2d, 0x1e,
	0xb9, 0xb2, 0xb4, 0x48, 0xed, 0x5c, 0x44, 0xab, 0xd4, 0xf2, 0x95, 0xcb, 0x2c, 0x5f, 0xbd, 0xb6,
	0xe5, 0xd7, 0x56, 0x58, 0xbe, 0x96, 0xb3, 0xfc, 0xdf, 0x34, 0xd8, 0x28, 0xae, 0xf2, 0x7f, 0xc0,
	0xfc, 0x06, 0xb4, 0x09, 0x75, 0xe9, 0x8f, 0x5e, 0xda, 0xac, 0xfc, 0xa8, 0x79, 0x03, 0xba, 0x19,
	0x03, 0x9b, 0xc5, 0xe6, 0x9f, 0x34, 0xd8, 0xf8, 0xe4, 0xd5, 0xbe, 0xcc, 0x59, 0x15, 0x30, 0x72,
	0xd9, 0xad, 0x15, 0xb2, 0xfb, 0xab, 0xd0, 0x4d, 0x19, 0x70, 0xe1, 0xd2, 0x93, 0x9d, 0x84, 0xb8,
	0xef, 0x4d, 0x04, 0x46, 0xe4, 0xae, 0x5c, 0x5a, 0x4b, 0x37, 0x2b, 0x1f, 0xc2, 0xed, 0x54, 0x4b,
	0x48, 0x7d, 0xc7, 0x76, 0xad, 0xd0, 0xf6, 0xdc, 0xa1, 0x83, 0x1a, 0x85, 0x63, 0x6f, 0x25, 0x0c,
	0xc7, 0xd9, 0xfc, 0x21, 0x2a, 0x2f, 0xc3, 0x97, 0x9f, 0x69, 0x70, 0xab, 0x6c, 0x43, 0xe8, 0xdd,
	0x47, 0x25, 0x5b, 0x12, 0x27, 0x2c, 0x85, 0xbc, 0xb4, 0xc7, 0x2f, 0x89, 0x38, 0xf7, 0xa1, 0x73,
	0x8c, 0x71, 0x9d, 0x9c, 0xfd, 0x15, 0xb8, 0xa9, 0xa6, 0x41, 0x6f, 0xfe, 0x46, 0x83, 0x56, 0xca,
	0x76, 0xfd, 0x10, 0xcc, 0xfa, 0xb6, 0xca, 0xca, 0xbe, 0x4d, 0xf6, 0xab, 0xd5, 0x92, 0x7e, 0x35,
	0x2d, 0x26, 0x6b, 0x97, 0x14, 0x93, 0x23, 0xe8, 0x29, 0x9b, 0x40, 0x3b, 0x7e, 0x13, 0xea, 0x7c,
	0x2a, 0x39, 0x9a, 0xf4, 0x73, 0x07, 0x84, 0x94, 0x5d, 0xd8, 0x4b, 0xf0, 0x12, 0xf9, 0x34, 0x9f,
	0x40, 0xef, 0xd3, 0x20, 0xbc, 0xf2, 0x82, 0x35, 0xf5, 0x6c, 0x45, 0xf1, 0xec, 0x4f, 0xab, 0xb0,
	0xbe, 0x24, 0xf8, 0xff, 0x7b, 0xd7, 0x2f, 0x7a, 0xef, 0xaa, 0xc4, 0x75, 0x63, 0x55, 0x5c, 0x37,
	0x8b, 0x71, 0xfd, 0xf8, 0xf7, 0x2d, 0x68, 0x1d, 0xbf, 0x7c, 0x21, 0x3c, 0xae, 0x3f, 0x85, 0x66,
	0xe2, 0x14, 0x7d, 0x33, 0x17, 0x0a, 0x8a, 0x9b, 0x37, 0xdf, 0xbe, 0x74, 0x0e, 0x3d, 0xf9, 0x02,
	0xba, 0x4b, 0xb7, 0x6a, 0xba, 0x71, 0xf5, 0x9d, 0xdb, 0xf9, 0xe6, 0xea, 0x4b, 0x39, 0xfd, 0x25,
	0xf4, 0x96, 0x6f, 0x00, 0xf5, 0xad, 0xab, 0x84, 0x02, 0x54, 0x6b, 0xae, 0xe0, 0x40, 0xbd, 0xcf,
	0xa0, 0x95, 0x1e, 0xbd, 0xf5, 0x3b, 0x97, 0x5f, 0x49, 0x9c, 0x6f, 0xbe, 0x73, 0xe5, 0x7d, 0x05,
	0x2e, 0x70, 0xf9, 0x20, 0x5f, 0x58, 0x60, 0xe1, 0xe2, 0xa0, 0xb0, 0xc0, 0xb2, 0x4b, 0x84, 0xa7,
	0xd0, 0x4c, 0xce, 0xd6, 0x05, 0x9f, 0x28, 0xe7, 0xf3, 0x82, 0x4f, 0x96, 0x0f, 0xe4, 0x4f, 0xa1,
	0x99, 0x74, 0xfc, 0x05, 0x2d, 0xca, 0x61, 0xa4, 0xa0, 0x65, 0xf9, 0x98, 0xf0, 0x22, 0x39, 0x37,
	0xc8, 0x56, 0xb9, 0xe8, 0xd9, 0x5c, 0xf7, 0x5e, 0xf4, 0x6c, 0xb1, 0xd3, 0x7e, 0xa6, 0x62, 0xe6,
	0x9d, 0xcb, 0x00, 0xa8, 0xcc, 0x03, 0x39, 0x30, 0x3b, 0x4c, 0xce, 0x55, 0xc2, 0x58, 0xef, 0x94,
	0x7e, 0x3a, 0xb5, 0x97, 0x71, 0xd5, 0x34, 0xaa, 0xfb, 0xe1, 0xd2, 0x61, 0x44, 0xe8, 0x34, 0x2f,
	0xdf, 0x4e, 0xaa, 0xf8, 0xfe, 0x4a, 0x1e, 0xe9, 0x90, 0xa4, 0x7e, 0x17, 0x1c, 0xa2, 0x54, 0xfe,
	0x82, 0x43, 0x96, 0x8a, 0x3e, 0x6e, 0x59, 0x01, 0xd2, 0xc2, 0x96, 0x97, 0xd1, 0xb9, 0xb0, 0xe5,
	0x02, 0x06, 0x1f, 0xf2, 0x2b, 0x9f, 0xa4, 0xd4, 0xea, 0xc5, 0x88, 0x57, 0x0f, 0x22, 0x9b, 0xc6,
	0x55, 0xd3, 0xa8, 0x6e, 0x04, 0x7a, 0xb1, 0x80, 0xeb, 0x79, 0xfb, 0x94, 0x36, 0x2d, 0x9b, 0xef,
	0x5e, 0x83, 0x8b, 0xcd, 0xe2, 0xbd, 0x8d, 0xcf, 0xfe, 0x79, 0xf7, 0x2b, 0x9f, 0xbd, 0xbe, 0xab,
	0xfd, 0xf9, 0xf5, 0x5d, 0xed, 0x1f, 0xaf, 0xef, 0x6a, 0x3f, 0xa8, 0x5a, 0xcc, 0x1e, 0xd5, 0xf9,
	0xff, 0xff, 0xde, 0xff, 0x57, 0x00, 0x00, 0x00, 0xff, 0xff, 0xf7, 0xb7, 0x85, 0xfa, 0x62, 0x1c,
	0x00, 0x00,
}
