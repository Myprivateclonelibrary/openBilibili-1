// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: bvc.proto

package archive

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// !!!Note: only response message defined, since we put pb into http response body
type VideoFileInfo struct {
	Filesize   int64  `protobuf:"varint,1,opt,name=filesize,proto3,casttype=int64" json:"filesize"`
	Timelength int64  `protobuf:"varint,2,opt,name=timelength,proto3,casttype=int64" json:"timelength"`
	Ahead      string `protobuf:"bytes,3,opt,name=ahead,proto3" json:"ahead"`
	Vhead      string `protobuf:"bytes,4,opt,name=vhead,proto3" json:"vhead"`
}

func (m *VideoFileInfo) Reset()                    { *m = VideoFileInfo{} }
func (m *VideoFileInfo) String() string            { return proto.CompactTextString(m) }
func (*VideoFileInfo) ProtoMessage()               {}
func (*VideoFileInfo) Descriptor() ([]byte, []int) { return fileDescriptorBvc, []int{0} }

type VideoFormatFileInfo struct {
	Infos []*VideoFileInfo `protobuf:"bytes,1,rep,name=infos" json:"infos"`
}

func (m *VideoFormatFileInfo) Reset()                    { *m = VideoFormatFileInfo{} }
func (m *VideoFormatFileInfo) String() string            { return proto.CompactTextString(m) }
func (*VideoFormatFileInfo) ProtoMessage()               {}
func (*VideoFormatFileInfo) Descriptor() ([]byte, []int) { return fileDescriptorBvc, []int{1} }

type DashItem struct {
	Id        int64  `protobuf:"varint,1,opt,name=id,proto3,casttype=int64" json:"id"`
	BaseUrl   string `protobuf:"bytes,2,opt,name=baseUrl,proto3" json:"base_url"`
	Bandwidth int64  `protobuf:"varint,3,opt,name=bandwidth,proto3,casttype=int64" json:"bandwidth"`
	Codecid   int64  `protobuf:"varint,4,opt,name=codecid,proto3,casttype=int64" json:"codecid"`
}

func (m *DashItem) Reset()                    { *m = DashItem{} }
func (m *DashItem) String() string            { return proto.CompactTextString(m) }
func (*DashItem) ProtoMessage()               {}
func (*DashItem) Descriptor() ([]byte, []int) { return fileDescriptorBvc, []int{2} }

type ResponseDash struct {
	Video []*DashItem `protobuf:"bytes,1,rep,name=video" json:"video"`
	Audio []*DashItem `protobuf:"bytes,2,rep,name=audio" json:"audio"`
}

func (m *ResponseDash) Reset()                    { *m = ResponseDash{} }
func (m *ResponseDash) String() string            { return proto.CompactTextString(m) }
func (*ResponseDash) ProtoMessage()               {}
func (*ResponseDash) Descriptor() ([]byte, []int) { return fileDescriptorBvc, []int{3} }

type BvcVideoItem struct {
	ExpireTime         int64                           `protobuf:"varint,1,opt,name=expire_time,json=expireTime,proto3,casttype=int64" json:"expire_time"`
	Cid                int64                           `protobuf:"varint,2,opt,name=cid,proto3,casttype=int64" json:"cid"`
	SupportQuality     []int                           `protobuf:"varint,3,rep,packed,name=support_quality,json=supportQuality,casttype=int" json:"support_quality"`
	SupportFormats     []string                        `protobuf:"bytes,4,rep,name=support_formats,json=supportFormats" json:"support_formats"`
	SupportDescription []string                        `protobuf:"bytes,5,rep,name=support_description,json=supportDescription" json:"support_description"`
	Quality            int                             `protobuf:"varint,6,opt,name=quality,proto3,casttype=int" json:"quality"`
	Url                string                          `protobuf:"bytes,7,opt,name=url,proto3" json:"url"`
	FileInfo           map[uint32]*VideoFormatFileInfo `protobuf:"bytes,8,rep,name=file_info,json=fileInfo" json:"file_info" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value"`
	VideoCodecid       uint32                          `protobuf:"varint,9,opt,name=video_codecid,json=videoCodecid,proto3" json:"video_codecid"`
	VideoProject       bool                            `protobuf:"varint,10,opt,name=video_project,json=videoProject,proto3" json:"video_project"`
	Fnver              int                             `protobuf:"varint,11,opt,name=fnver,proto3,casttype=int" json:"fnver"`
	Fnval              int                             `protobuf:"varint,12,opt,name=fnval,proto3,casttype=int" json:"fnval"`
	Dash               *ResponseDash                   `protobuf:"bytes,13,opt,name=dash" json:"dash"`
}

func (m *BvcVideoItem) Reset()                    { *m = BvcVideoItem{} }
func (m *BvcVideoItem) String() string            { return proto.CompactTextString(m) }
func (*BvcVideoItem) ProtoMessage()               {}
func (*BvcVideoItem) Descriptor() ([]byte, []int) { return fileDescriptorBvc, []int{4} }

type BvcResponseMsg struct {
	Code int64                    `protobuf:"varint,1,opt,name=code,proto3,casttype=int64" json:"code"`
	Data map[uint32]*BvcVideoItem `protobuf:"bytes,2,rep,name=data" json:"data" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *BvcResponseMsg) Reset()                    { *m = BvcResponseMsg{} }
func (m *BvcResponseMsg) String() string            { return proto.CompactTextString(m) }
func (*BvcResponseMsg) ProtoMessage()               {}
func (*BvcResponseMsg) Descriptor() ([]byte, []int) { return fileDescriptorBvc, []int{5} }

func init() {
	proto.RegisterType((*VideoFileInfo)(nil), "archive.VideoFileInfo")
	proto.RegisterType((*VideoFormatFileInfo)(nil), "archive.VideoFormatFileInfo")
	proto.RegisterType((*DashItem)(nil), "archive.DashItem")
	proto.RegisterType((*ResponseDash)(nil), "archive.ResponseDash")
	proto.RegisterType((*BvcVideoItem)(nil), "archive.BvcVideoItem")
	proto.RegisterType((*BvcResponseMsg)(nil), "archive.BvcResponseMsg")
}
func (m *VideoFileInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VideoFileInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Filesize != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintBvc(dAtA, i, uint64(m.Filesize))
	}
	if m.Timelength != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintBvc(dAtA, i, uint64(m.Timelength))
	}
	if len(m.Ahead) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintBvc(dAtA, i, uint64(len(m.Ahead)))
		i += copy(dAtA[i:], m.Ahead)
	}
	if len(m.Vhead) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintBvc(dAtA, i, uint64(len(m.Vhead)))
		i += copy(dAtA[i:], m.Vhead)
	}
	return i, nil
}

func (m *VideoFormatFileInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VideoFormatFileInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Infos) > 0 {
		for _, msg := range m.Infos {
			dAtA[i] = 0xa
			i++
			i = encodeVarintBvc(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *DashItem) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DashItem) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintBvc(dAtA, i, uint64(m.Id))
	}
	if len(m.BaseUrl) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintBvc(dAtA, i, uint64(len(m.BaseUrl)))
		i += copy(dAtA[i:], m.BaseUrl)
	}
	if m.Bandwidth != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintBvc(dAtA, i, uint64(m.Bandwidth))
	}
	if m.Codecid != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintBvc(dAtA, i, uint64(m.Codecid))
	}
	return i, nil
}

func (m *ResponseDash) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResponseDash) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Video) > 0 {
		for _, msg := range m.Video {
			dAtA[i] = 0xa
			i++
			i = encodeVarintBvc(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Audio) > 0 {
		for _, msg := range m.Audio {
			dAtA[i] = 0x12
			i++
			i = encodeVarintBvc(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *BvcVideoItem) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BvcVideoItem) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ExpireTime != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintBvc(dAtA, i, uint64(m.ExpireTime))
	}
	if m.Cid != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintBvc(dAtA, i, uint64(m.Cid))
	}
	if len(m.SupportQuality) > 0 {
		dAtA2 := make([]byte, len(m.SupportQuality)*10)
		var j1 int
		for _, num := range m.SupportQuality {
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		dAtA[i] = 0x1a
		i++
		i = encodeVarintBvc(dAtA, i, uint64(j1))
		i += copy(dAtA[i:], dAtA2[:j1])
	}
	if len(m.SupportFormats) > 0 {
		for _, s := range m.SupportFormats {
			dAtA[i] = 0x22
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.SupportDescription) > 0 {
		for _, s := range m.SupportDescription {
			dAtA[i] = 0x2a
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if m.Quality != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintBvc(dAtA, i, uint64(m.Quality))
	}
	if len(m.Url) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintBvc(dAtA, i, uint64(len(m.Url)))
		i += copy(dAtA[i:], m.Url)
	}
	if len(m.FileInfo) > 0 {
		for k, _ := range m.FileInfo {
			dAtA[i] = 0x42
			i++
			v := m.FileInfo[k]
			msgSize := 0
			if v != nil {
				msgSize = v.Size()
				msgSize += 1 + sovBvc(uint64(msgSize))
			}
			mapSize := 1 + sovBvc(uint64(k)) + msgSize
			i = encodeVarintBvc(dAtA, i, uint64(mapSize))
			dAtA[i] = 0x8
			i++
			i = encodeVarintBvc(dAtA, i, uint64(k))
			if v != nil {
				dAtA[i] = 0x12
				i++
				i = encodeVarintBvc(dAtA, i, uint64(v.Size()))
				n3, err := v.MarshalTo(dAtA[i:])
				if err != nil {
					return 0, err
				}
				i += n3
			}
		}
	}
	if m.VideoCodecid != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintBvc(dAtA, i, uint64(m.VideoCodecid))
	}
	if m.VideoProject {
		dAtA[i] = 0x50
		i++
		if m.VideoProject {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Fnver != 0 {
		dAtA[i] = 0x58
		i++
		i = encodeVarintBvc(dAtA, i, uint64(m.Fnver))
	}
	if m.Fnval != 0 {
		dAtA[i] = 0x60
		i++
		i = encodeVarintBvc(dAtA, i, uint64(m.Fnval))
	}
	if m.Dash != nil {
		dAtA[i] = 0x6a
		i++
		i = encodeVarintBvc(dAtA, i, uint64(m.Dash.Size()))
		n4, err := m.Dash.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	return i, nil
}

func (m *BvcResponseMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BvcResponseMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintBvc(dAtA, i, uint64(m.Code))
	}
	if len(m.Data) > 0 {
		for k, _ := range m.Data {
			dAtA[i] = 0x12
			i++
			v := m.Data[k]
			msgSize := 0
			if v != nil {
				msgSize = v.Size()
				msgSize += 1 + sovBvc(uint64(msgSize))
			}
			mapSize := 1 + sovBvc(uint64(k)) + msgSize
			i = encodeVarintBvc(dAtA, i, uint64(mapSize))
			dAtA[i] = 0x8
			i++
			i = encodeVarintBvc(dAtA, i, uint64(k))
			if v != nil {
				dAtA[i] = 0x12
				i++
				i = encodeVarintBvc(dAtA, i, uint64(v.Size()))
				n5, err := v.MarshalTo(dAtA[i:])
				if err != nil {
					return 0, err
				}
				i += n5
			}
		}
	}
	return i, nil
}

func encodeFixed64Bvc(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Bvc(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintBvc(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *VideoFileInfo) Size() (n int) {
	var l int
	_ = l
	if m.Filesize != 0 {
		n += 1 + sovBvc(uint64(m.Filesize))
	}
	if m.Timelength != 0 {
		n += 1 + sovBvc(uint64(m.Timelength))
	}
	l = len(m.Ahead)
	if l > 0 {
		n += 1 + l + sovBvc(uint64(l))
	}
	l = len(m.Vhead)
	if l > 0 {
		n += 1 + l + sovBvc(uint64(l))
	}
	return n
}

func (m *VideoFormatFileInfo) Size() (n int) {
	var l int
	_ = l
	if len(m.Infos) > 0 {
		for _, e := range m.Infos {
			l = e.Size()
			n += 1 + l + sovBvc(uint64(l))
		}
	}
	return n
}

func (m *DashItem) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovBvc(uint64(m.Id))
	}
	l = len(m.BaseUrl)
	if l > 0 {
		n += 1 + l + sovBvc(uint64(l))
	}
	if m.Bandwidth != 0 {
		n += 1 + sovBvc(uint64(m.Bandwidth))
	}
	if m.Codecid != 0 {
		n += 1 + sovBvc(uint64(m.Codecid))
	}
	return n
}

func (m *ResponseDash) Size() (n int) {
	var l int
	_ = l
	if len(m.Video) > 0 {
		for _, e := range m.Video {
			l = e.Size()
			n += 1 + l + sovBvc(uint64(l))
		}
	}
	if len(m.Audio) > 0 {
		for _, e := range m.Audio {
			l = e.Size()
			n += 1 + l + sovBvc(uint64(l))
		}
	}
	return n
}

func (m *BvcVideoItem) Size() (n int) {
	var l int
	_ = l
	if m.ExpireTime != 0 {
		n += 1 + sovBvc(uint64(m.ExpireTime))
	}
	if m.Cid != 0 {
		n += 1 + sovBvc(uint64(m.Cid))
	}
	if len(m.SupportQuality) > 0 {
		l = 0
		for _, e := range m.SupportQuality {
			l += sovBvc(uint64(e))
		}
		n += 1 + sovBvc(uint64(l)) + l
	}
	if len(m.SupportFormats) > 0 {
		for _, s := range m.SupportFormats {
			l = len(s)
			n += 1 + l + sovBvc(uint64(l))
		}
	}
	if len(m.SupportDescription) > 0 {
		for _, s := range m.SupportDescription {
			l = len(s)
			n += 1 + l + sovBvc(uint64(l))
		}
	}
	if m.Quality != 0 {
		n += 1 + sovBvc(uint64(m.Quality))
	}
	l = len(m.Url)
	if l > 0 {
		n += 1 + l + sovBvc(uint64(l))
	}
	if len(m.FileInfo) > 0 {
		for k, v := range m.FileInfo {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovBvc(uint64(l))
			}
			mapEntrySize := 1 + sovBvc(uint64(k)) + l
			n += mapEntrySize + 1 + sovBvc(uint64(mapEntrySize))
		}
	}
	if m.VideoCodecid != 0 {
		n += 1 + sovBvc(uint64(m.VideoCodecid))
	}
	if m.VideoProject {
		n += 2
	}
	if m.Fnver != 0 {
		n += 1 + sovBvc(uint64(m.Fnver))
	}
	if m.Fnval != 0 {
		n += 1 + sovBvc(uint64(m.Fnval))
	}
	if m.Dash != nil {
		l = m.Dash.Size()
		n += 1 + l + sovBvc(uint64(l))
	}
	return n
}

func (m *BvcResponseMsg) Size() (n int) {
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovBvc(uint64(m.Code))
	}
	if len(m.Data) > 0 {
		for k, v := range m.Data {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovBvc(uint64(l))
			}
			mapEntrySize := 1 + sovBvc(uint64(k)) + l
			n += mapEntrySize + 1 + sovBvc(uint64(mapEntrySize))
		}
	}
	return n
}

func sovBvc(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozBvc(x uint64) (n int) {
	return sovBvc(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *VideoFileInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VideoFileInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VideoFileInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Filesize", wireType)
			}
			m.Filesize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Filesize |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timelength", wireType)
			}
			m.Timelength = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timelength |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ahead", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ahead = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vhead", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Vhead = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VideoFormatFileInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VideoFormatFileInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VideoFormatFileInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Infos", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBvc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Infos = append(m.Infos, &VideoFileInfo{})
			if err := m.Infos[len(m.Infos)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DashItem) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DashItem: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DashItem: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaseUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BaseUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bandwidth", wireType)
			}
			m.Bandwidth = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Bandwidth |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Codecid", wireType)
			}
			m.Codecid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Codecid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResponseDash) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResponseDash: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResponseDash: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Video", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBvc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Video = append(m.Video, &DashItem{})
			if err := m.Video[len(m.Video)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Audio", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBvc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Audio = append(m.Audio, &DashItem{})
			if err := m.Audio[len(m.Audio)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BvcVideoItem) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BvcVideoItem: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BvcVideoItem: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpireTime", wireType)
			}
			m.ExpireTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExpireTime |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cid", wireType)
			}
			m.Cid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Cid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType == 0 {
				var v int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowBvc
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.SupportQuality = append(m.SupportQuality, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowBvc
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthBvc
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowBvc
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.SupportQuality = append(m.SupportQuality, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field SupportQuality", wireType)
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SupportFormats", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SupportFormats = append(m.SupportFormats, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SupportDescription", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SupportDescription = append(m.SupportDescription, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Quality", wireType)
			}
			m.Quality = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Quality |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Url", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Url = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FileInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBvc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FileInfo == nil {
				m.FileInfo = make(map[uint32]*VideoFormatFileInfo)
			}
			var mapkey uint32
			var mapvalue *VideoFormatFileInfo
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowBvc
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowBvc
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= (uint32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowBvc
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= (int(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthBvc
					}
					postmsgIndex := iNdEx + mapmsglen
					if mapmsglen < 0 {
						return ErrInvalidLengthBvc
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &VideoFormatFileInfo{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipBvc(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthBvc
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.FileInfo[mapkey] = mapvalue
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VideoCodecid", wireType)
			}
			m.VideoCodecid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VideoCodecid |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VideoProject", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.VideoProject = bool(v != 0)
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fnver", wireType)
			}
			m.Fnver = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Fnver |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fnval", wireType)
			}
			m.Fnval = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Fnval |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dash", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBvc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Dash == nil {
				m.Dash = &ResponseDash{}
			}
			if err := m.Dash.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BvcResponseMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BvcResponseMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BvcResponseMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBvc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = make(map[uint32]*BvcVideoItem)
			}
			var mapkey uint32
			var mapvalue *BvcVideoItem
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowBvc
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowBvc
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= (uint32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowBvc
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= (int(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthBvc
					}
					postmsgIndex := iNdEx + mapmsglen
					if mapmsglen < 0 {
						return ErrInvalidLengthBvc
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &BvcVideoItem{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipBvc(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthBvc
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Data[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipBvc(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowBvc
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBvc
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBvc
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthBvc
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowBvc
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipBvc(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthBvc = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowBvc   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("bvc.proto", fileDescriptorBvc) }

var fileDescriptorBvc = []byte{
	// 835 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x55, 0xdd, 0x8e, 0xdb, 0x44,
	0x14, 0x5e, 0xc7, 0xc9, 0x26, 0x3e, 0x89, 0xfb, 0x33, 0xcb, 0x16, 0xb3, 0x42, 0x71, 0x08, 0xa2,
	0x8a, 0x04, 0xa4, 0x22, 0xad, 0x5a, 0x40, 0x48, 0x48, 0xee, 0x82, 0xe8, 0x05, 0x05, 0x2c, 0x40,
	0xe2, 0x2a, 0x9a, 0xd8, 0x93, 0x64, 0xc0, 0xb1, 0x83, 0x3d, 0x36, 0x2c, 0x4f, 0xc2, 0x03, 0xf0,
	0x12, 0x5c, 0x70, 0xbf, 0x97, 0x7d, 0x02, 0x8b, 0x2e, 0x77, 0x7e, 0x84, 0x5e, 0xa1, 0x39, 0xe3,
	0xbf, 0xac, 0x56, 0xbd, 0xf1, 0xf8, 0x7c, 0xe7, 0x9c, 0x89, 0xbf, 0xef, 0x7c, 0x33, 0x01, 0x63,
	0x95, 0x79, 0xf3, 0x7d, 0x1c, 0x89, 0x88, 0xf4, 0x69, 0xec, 0x6d, 0x79, 0xc6, 0xce, 0x3e, 0xdc,
	0x70, 0xb1, 0x4d, 0x57, 0x73, 0x2f, 0xda, 0x3d, 0xd8, 0x44, 0x9b, 0xe8, 0x01, 0xe6, 0x57, 0xe9,
	0x1a, 0x23, 0x0c, 0xf0, 0x4d, 0xf5, 0x4d, 0xff, 0xd1, 0xc0, 0xfc, 0x91, 0xfb, 0x2c, 0xfa, 0x92,
	0x07, 0xec, 0x59, 0xb8, 0x8e, 0xc8, 0x47, 0x30, 0x58, 0xf3, 0x80, 0x25, 0xfc, 0x0f, 0x66, 0x69,
	0x13, 0x6d, 0xd6, 0x75, 0x4e, 0x8b, 0xdc, 0xae, 0xb1, 0x57, 0xb9, 0xdd, 0xe3, 0xa1, 0x78, 0xfc,
	0xc8, 0xad, 0x21, 0xf2, 0x04, 0x40, 0xf0, 0x1d, 0x0b, 0x58, 0xb8, 0x11, 0x5b, 0xab, 0x83, 0x4d,
	0x6f, 0x16, 0xb9, 0xdd, 0x42, 0x9b, 0xb6, 0x16, 0x48, 0x6c, 0xe8, 0xd1, 0x2d, 0xa3, 0xbe, 0xa5,
	0x4f, 0xb4, 0x99, 0xe1, 0x18, 0x45, 0x6e, 0x2b, 0xc0, 0x55, 0x8b, 0x2c, 0xc8, 0xb0, 0xa0, 0xdb,
	0x14, 0x64, 0xaa, 0x00, 0x97, 0xe9, 0x73, 0x38, 0x51, 0x9f, 0x1f, 0xc5, 0x3b, 0x2a, 0x6a, 0x12,
	0x4f, 0xa0, 0xc7, 0xc3, 0x75, 0x94, 0x58, 0xda, 0x44, 0x9f, 0x0d, 0x17, 0xf7, 0xe6, 0xa5, 0x3c,
	0xf3, 0x03, 0xae, 0x6a, 0x3f, 0x2c, 0x74, 0xd5, 0x32, 0xfd, 0x5b, 0x83, 0xc1, 0x39, 0x4d, 0xb6,
	0xcf, 0x04, 0xdb, 0x11, 0x1b, 0x3a, 0xdc, 0x47, 0x11, 0x4c, 0xe7, 0x76, 0x91, 0xdb, 0x1d, 0xee,
	0x37, 0x3c, 0x3a, 0xdc, 0x27, 0xf7, 0xa1, 0xbf, 0xa2, 0x09, 0xfb, 0x21, 0x0e, 0x90, 0xb5, 0xe1,
	0x8c, 0xa4, 0x54, 0x12, 0x5a, 0xa6, 0x71, 0xe0, 0x56, 0x49, 0xf2, 0x08, 0x8c, 0x15, 0x0d, 0xfd,
	0xdf, 0xb8, 0x2f, 0xb6, 0xc8, 0xd5, 0x74, 0xee, 0x15, 0xb9, 0xdd, 0x80, 0xcd, 0xb6, 0x0d, 0x46,
	0xe6, 0xd0, 0xf7, 0x22, 0x9f, 0x79, 0x5c, 0xd1, 0x37, 0x9d, 0x37, 0x8a, 0xdc, 0xae, 0xa0, 0xa6,
	0xa3, 0x42, 0xa6, 0x19, 0x8c, 0x5c, 0x96, 0xec, 0xa3, 0x30, 0x61, 0x92, 0x02, 0x59, 0x40, 0x2f,
	0x93, 0x74, 0x4b, 0x11, 0xee, 0xd6, 0x22, 0x54, 0x04, 0x4b, 0x3d, 0x65, 0x8d, 0xab, 0x16, 0xd9,
	0x43, 0x53, 0x9f, 0x47, 0x56, 0xe7, 0xb5, 0x3d, 0x58, 0xe3, 0xaa, 0x65, 0xfa, 0xd7, 0x31, 0x8c,
	0x9c, 0xcc, 0x43, 0x69, 0x51, 0xb7, 0x4f, 0x60, 0xc8, 0x7e, 0xdf, 0xf3, 0x98, 0x2d, 0xe5, 0xac,
	0x4b, 0x17, 0x59, 0x45, 0x6e, 0xb7, 0xe1, 0x96, 0x23, 0x14, 0xfa, 0x3d, 0xdf, 0x31, 0x32, 0x05,
	0x5d, 0xf2, 0xed, 0x20, 0xdf, 0x3b, 0x45, 0x6e, 0xeb, 0x07, 0x5c, 0x65, 0x44, 0x9e, 0xc2, 0xed,
	0x24, 0xdd, 0xef, 0xa3, 0x58, 0x2c, 0x7f, 0x4d, 0x69, 0xc0, 0xc5, 0x85, 0xa5, 0x4f, 0xf4, 0x99,
	0xe9, 0x9c, 0x15, 0xb9, 0x7d, 0x3d, 0xf5, 0x2a, 0xb7, 0x75, 0x1e, 0x0a, 0xf7, 0x56, 0x89, 0x7f,
	0xa7, 0x60, 0xf2, 0x59, 0xb3, 0xc9, 0x1a, 0xbd, 0x93, 0x58, 0xdd, 0x89, 0x3e, 0x33, 0x9c, 0x93,
	0xf6, 0x26, 0x65, 0xaa, 0xee, 0x56, 0x36, 0x4b, 0xc8, 0x57, 0x70, 0x52, 0x95, 0xf8, 0x2c, 0xf1,
	0x62, 0xbe, 0x17, 0x3c, 0x0a, 0xad, 0x1e, 0xee, 0x20, 0xad, 0x7f, 0x53, 0xda, 0x25, 0x25, 0x78,
	0xde, 0x60, 0xe4, 0x03, 0xe8, 0x57, 0x24, 0x8e, 0x91, 0x34, 0x91, 0x43, 0xbe, 0xf6, 0xf1, 0x55,
	0x4c, 0xde, 0x02, 0x3d, 0x8d, 0x03, 0xab, 0x8f, 0x66, 0xeb, 0x4b, 0x79, 0xa4, 0xcf, 0xe4, 0x83,
	0x7c, 0x03, 0x86, 0x3c, 0x90, 0x4b, 0xe9, 0x63, 0x6b, 0x80, 0xd3, 0x7b, 0xb7, 0x9e, 0x5e, 0x7b,
	0x3c, 0xf3, 0xca, 0xfe, 0x5f, 0x84, 0x22, 0xbe, 0x70, 0x4c, 0x69, 0xc4, 0xba, 0x53, 0x9d, 0x6a,
	0x3c, 0x43, 0x8f, 0xc1, 0x44, 0x4f, 0x2c, 0x2b, 0x13, 0x1a, 0xf8, 0x7d, 0x77, 0x8b, 0xdc, 0x3e,
	0x4c, 0xb8, 0x23, 0x0c, 0x9f, 0xaa, 0xa8, 0xe9, 0xdb, 0xc7, 0xd1, 0xcf, 0xcc, 0x13, 0x16, 0x4c,
	0xb4, 0xd9, 0xa0, 0xdd, 0x57, 0x26, 0xca, 0xbe, 0x6f, 0x55, 0x44, 0xee, 0x43, 0x6f, 0x1d, 0x66,
	0x2c, 0xb6, 0x86, 0xf5, 0xf0, 0x15, 0x50, 0xa9, 0xa0, 0xa2, 0xb2, 0x8e, 0x06, 0xd6, 0xe8, 0xa0,
	0x8e, 0x06, 0xed, 0x3a, 0x1a, 0x90, 0x87, 0xd0, 0xf5, 0x69, 0xb2, 0xb5, 0xcc, 0x89, 0x36, 0x1b,
	0x2e, 0x4e, 0x6b, 0x2d, 0xda, 0x67, 0xc4, 0x19, 0x14, 0xb9, 0x8d, 0x65, 0x2e, 0x3e, 0xcf, 0x7e,
	0x02, 0xf3, 0x40, 0x1e, 0x72, 0x07, 0xf4, 0x5f, 0xd8, 0x85, 0xba, 0x04, 0x5c, 0xf9, 0x8a, 0xc7,
	0x8a, 0x06, 0x29, 0x43, 0x93, 0x0e, 0x17, 0x6f, 0x5f, 0xbb, 0x5b, 0x0e, 0x2e, 0x22, 0x57, 0x95,
	0x7e, 0xda, 0xf9, 0x58, 0x9b, 0x5e, 0x6a, 0x70, 0xcb, 0xc9, 0xbc, 0xea, 0xe7, 0xbf, 0x4e, 0x36,
	0xe4, 0x3d, 0xe8, 0x4a, 0x0d, 0xcb, 0x2b, 0x46, 0x2a, 0x84, 0x71, 0xe3, 0x77, 0x0c, 0xc9, 0xe7,
	0x92, 0x89, 0xa0, 0xe5, 0x99, 0x7c, 0xa7, 0x3d, 0xd5, 0xd6, 0x6e, 0xf3, 0x73, 0x2a, 0xa8, 0x9a,
	0x69, 0xc9, 0x4a, 0x50, 0x17, 0x9f, 0x67, 0xcf, 0xc1, 0xa8, 0x93, 0x37, 0x30, 0x7a, 0xff, 0x90,
	0xd1, 0xe9, 0x8d, 0xb6, 0x69, 0x51, 0x71, 0xac, 0xcb, 0x97, 0xe3, 0xa3, 0x17, 0x2f, 0xc7, 0x47,
	0x97, 0x57, 0x63, 0xed, 0xc5, 0xd5, 0x58, 0xfb, 0xf7, 0x6a, 0xac, 0xfd, 0xf9, 0xdf, 0xf8, 0x68,
	0x75, 0x8c, 0x7f, 0x2b, 0x0f, 0xff, 0x0f, 0x00, 0x00, 0xff, 0xff, 0x63, 0x97, 0xda, 0x57, 0x9b,
	0x06, 0x00, 0x00,
}
