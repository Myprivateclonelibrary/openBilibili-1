// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: app/service/bbq/user/api/api.proto

package api

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"
import empty "github.com/golang/protobuf/ptypes/empty"

import go_common_library_time "go-common/library/time"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// //////////////////////////////Relation Service/////////////////////////////////
type ListRelationUserInfoReq struct {
	Mid                  int64    `protobuf:"varint,1,opt,name=mid,proto3" json:"mid,omitempty" form:"mid"`
	UpMid                int64    `protobuf:"varint,2,opt,name=up_mid,json=upMid,proto3" json:"up_mid,omitempty" form:"up_mid" validate:"required"`
	CursorPrev           string   `protobuf:"bytes,3,opt,name=cursor_prev,json=cursorPrev,proto3" json:"cursor_prev,omitempty" form:"cursor_prev"`
	CursorNext           string   `protobuf:"bytes,4,opt,name=cursor_next,json=cursorNext,proto3" json:"cursor_next,omitempty" form:"cursor_next"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListRelationUserInfoReq) Reset()         { *m = ListRelationUserInfoReq{} }
func (m *ListRelationUserInfoReq) String() string { return proto.CompactTextString(m) }
func (*ListRelationUserInfoReq) ProtoMessage()    {}
func (*ListRelationUserInfoReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_4357304ab078ce01, []int{0}
}
func (m *ListRelationUserInfoReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListRelationUserInfoReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListRelationUserInfoReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ListRelationUserInfoReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListRelationUserInfoReq.Merge(dst, src)
}
func (m *ListRelationUserInfoReq) XXX_Size() int {
	return m.Size()
}
func (m *ListRelationUserInfoReq) XXX_DiscardUnknown() {
	xxx_messageInfo_ListRelationUserInfoReq.DiscardUnknown(m)
}

var xxx_messageInfo_ListRelationUserInfoReq proto.InternalMessageInfo

type ListUserInfoReply struct {
	HasMore              bool        `protobuf:"varint,1,opt,name=has_more,json=hasMore,proto3" json:"has_more"`
	List                 []*UserInfo `protobuf:"bytes,2,rep,name=list" json:"list,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *ListUserInfoReply) Reset()         { *m = ListUserInfoReply{} }
func (m *ListUserInfoReply) String() string { return proto.CompactTextString(m) }
func (*ListUserInfoReply) ProtoMessage()    {}
func (*ListUserInfoReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_4357304ab078ce01, []int{1}
}
func (m *ListUserInfoReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListUserInfoReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListUserInfoReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ListUserInfoReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListUserInfoReply.Merge(dst, src)
}
func (m *ListUserInfoReply) XXX_Size() int {
	return m.Size()
}
func (m *ListUserInfoReply) XXX_DiscardUnknown() {
	xxx_messageInfo_ListUserInfoReply.DiscardUnknown(m)
}

var xxx_messageInfo_ListUserInfoReply proto.InternalMessageInfo

type ListRelationReq struct {
	Mid                  int64    `protobuf:"varint,1,opt,name=mid,proto3" json:"mid,omitempty" form:"mid" validate:"required"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListRelationReq) Reset()         { *m = ListRelationReq{} }
func (m *ListRelationReq) String() string { return proto.CompactTextString(m) }
func (*ListRelationReq) ProtoMessage()    {}
func (*ListRelationReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_4357304ab078ce01, []int{2}
}
func (m *ListRelationReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListRelationReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListRelationReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ListRelationReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListRelationReq.Merge(dst, src)
}
func (m *ListRelationReq) XXX_Size() int {
	return m.Size()
}
func (m *ListRelationReq) XXX_DiscardUnknown() {
	xxx_messageInfo_ListRelationReq.DiscardUnknown(m)
}

var xxx_messageInfo_ListRelationReq proto.InternalMessageInfo

type ListRelationReply struct {
	List                 []int64  `protobuf:"varint,1,rep,packed,name=list" json:"list,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListRelationReply) Reset()         { *m = ListRelationReply{} }
func (m *ListRelationReply) String() string { return proto.CompactTextString(m) }
func (*ListRelationReply) ProtoMessage()    {}
func (*ListRelationReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_4357304ab078ce01, []int{3}
}
func (m *ListRelationReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListRelationReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListRelationReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ListRelationReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListRelationReply.Merge(dst, src)
}
func (m *ListRelationReply) XXX_Size() int {
	return m.Size()
}
func (m *ListRelationReply) XXX_DiscardUnknown() {
	xxx_messageInfo_ListRelationReply.DiscardUnknown(m)
}

var xxx_messageInfo_ListRelationReply proto.InternalMessageInfo

type ModifyRelationReq struct {
	Mid                  int64    `protobuf:"varint,1,opt,name=mid,proto3" json:"mid,omitempty" form:"mid" validate:"required"`
	UpMid                int64    `protobuf:"varint,2,opt,name=up_mid,json=upMid,proto3" json:"up_mid,omitempty" form:"up_mid" validate:"required"`
	Action               int32    `protobuf:"varint,3,opt,name=action,proto3" json:"action,omitempty" form:"action" validate:"required"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ModifyRelationReq) Reset()         { *m = ModifyRelationReq{} }
func (m *ModifyRelationReq) String() string { return proto.CompactTextString(m) }
func (*ModifyRelationReq) ProtoMessage()    {}
func (*ModifyRelationReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_4357304ab078ce01, []int{4}
}
func (m *ModifyRelationReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ModifyRelationReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ModifyRelationReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ModifyRelationReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ModifyRelationReq.Merge(dst, src)
}
func (m *ModifyRelationReq) XXX_Size() int {
	return m.Size()
}
func (m *ModifyRelationReq) XXX_DiscardUnknown() {
	xxx_messageInfo_ModifyRelationReq.DiscardUnknown(m)
}

var xxx_messageInfo_ModifyRelationReq proto.InternalMessageInfo

type ModifyRelationReply struct {
	FollowState          int8     `protobuf:"varint,1,opt,name=follow_state,json=followState,proto3,casttype=int8" json:"follow_state"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ModifyRelationReply) Reset()         { *m = ModifyRelationReply{} }
func (m *ModifyRelationReply) String() string { return proto.CompactTextString(m) }
func (*ModifyRelationReply) ProtoMessage()    {}
func (*ModifyRelationReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_4357304ab078ce01, []int{5}
}
func (m *ModifyRelationReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ModifyRelationReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ModifyRelationReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ModifyRelationReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ModifyRelationReply.Merge(dst, src)
}
func (m *ModifyRelationReply) XXX_Size() int {
	return m.Size()
}
func (m *ModifyRelationReply) XXX_DiscardUnknown() {
	xxx_messageInfo_ModifyRelationReply.DiscardUnknown(m)
}

var xxx_messageInfo_ModifyRelationReply proto.InternalMessageInfo

// //////////////////////////////User Service/////////////////////////////////
type ListUserInfoReq struct {
	Mid   int64   `protobuf:"varint,1,opt,name=mid,proto3" json:"mid,omitempty" form:"mid"`
	UpMid []int64 `protobuf:"varint,2,rep,packed,name=up_mid,json=upMid" json:"up_mid,omitempty" form:"up_mid,omitempty" validate:"required"`
	// 是否需要用户信息数组，如区域、性别的字符串化
	NeedDesc bool `protobuf:"varint,3,opt,name=need_desc,json=needDesc,proto3" json:"need_desc,omitempty" form:"need_desc"`
	// 用户统计信息UserStat
	NeedStat bool `protobuf:"varint,4,opt,name=need_stat,json=needStat,proto3" json:"need_stat,omitempty" form:"need_stat"`
	// 用户关注信息是否需要
	NeedFollowState      bool     `protobuf:"varint,5,opt,name=need_follow_state,json=needFollowState,proto3" json:"need_follow_state,omitempty" form:"need_follow_state"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListUserInfoReq) Reset()         { *m = ListUserInfoReq{} }
func (m *ListUserInfoReq) String() string { return proto.CompactTextString(m) }
func (*ListUserInfoReq) ProtoMessage()    {}
func (*ListUserInfoReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_4357304ab078ce01, []int{6}
}
func (m *ListUserInfoReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListUserInfoReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListUserInfoReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ListUserInfoReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListUserInfoReq.Merge(dst, src)
}
func (m *ListUserInfoReq) XXX_Size() int {
	return m.Size()
}
func (m *ListUserInfoReq) XXX_DiscardUnknown() {
	xxx_messageInfo_ListUserInfoReq.DiscardUnknown(m)
}

var xxx_messageInfo_ListUserInfoReq proto.InternalMessageInfo

// 获取UserInfo的配置，默认是只有UserBase的
type ListUserInfoConf struct {
	// 是否需要用户信息数组，如区域、性别的字符串化
	NeedDesc bool `protobuf:"varint,1,opt,name=need_desc,json=needDesc,proto3" json:"need_desc,omitempty" form:"need_desc"`
	// 用户统计信息UserStat
	NeedStat bool `protobuf:"varint,2,opt,name=need_stat,json=needStat,proto3" json:"need_stat,omitempty" form:"need_stat"`
	// 用户关注信息是否需要
	NeedFollowState      bool     `protobuf:"varint,3,opt,name=need_follow_state,json=needFollowState,proto3" json:"need_follow_state,omitempty" form:"need_follow_state"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListUserInfoConf) Reset()         { *m = ListUserInfoConf{} }
func (m *ListUserInfoConf) String() string { return proto.CompactTextString(m) }
func (*ListUserInfoConf) ProtoMessage()    {}
func (*ListUserInfoConf) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_4357304ab078ce01, []int{7}
}
func (m *ListUserInfoConf) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListUserInfoConf) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListUserInfoConf.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ListUserInfoConf) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListUserInfoConf.Merge(dst, src)
}
func (m *ListUserInfoConf) XXX_Size() int {
	return m.Size()
}
func (m *ListUserInfoConf) XXX_DiscardUnknown() {
	xxx_messageInfo_ListUserInfoConf.DiscardUnknown(m)
}

var xxx_messageInfo_ListUserInfoConf proto.InternalMessageInfo

type PhoneCheckReq struct {
	Mid                  int64    `protobuf:"varint,1,opt,name=mid,proto3" json:"mid,omitempty" form:"mid"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PhoneCheckReq) Reset()         { *m = PhoneCheckReq{} }
func (m *PhoneCheckReq) String() string { return proto.CompactTextString(m) }
func (*PhoneCheckReq) ProtoMessage()    {}
func (*PhoneCheckReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_4357304ab078ce01, []int{8}
}
func (m *PhoneCheckReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PhoneCheckReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PhoneCheckReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *PhoneCheckReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PhoneCheckReq.Merge(dst, src)
}
func (m *PhoneCheckReq) XXX_Size() int {
	return m.Size()
}
func (m *PhoneCheckReq) XXX_DiscardUnknown() {
	xxx_messageInfo_PhoneCheckReq.DiscardUnknown(m)
}

var xxx_messageInfo_PhoneCheckReq proto.InternalMessageInfo

type PhoneCheckReply struct {
	TelStatus            int32    `protobuf:"varint,2,opt,name=tel_status,json=telStatus,proto3" json:"tel_status,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PhoneCheckReply) Reset()         { *m = PhoneCheckReply{} }
func (m *PhoneCheckReply) String() string { return proto.CompactTextString(m) }
func (*PhoneCheckReply) ProtoMessage()    {}
func (*PhoneCheckReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_4357304ab078ce01, []int{9}
}
func (m *PhoneCheckReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PhoneCheckReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PhoneCheckReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *PhoneCheckReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PhoneCheckReply.Merge(dst, src)
}
func (m *PhoneCheckReply) XXX_Size() int {
	return m.Size()
}
func (m *PhoneCheckReply) XXX_DiscardUnknown() {
	xxx_messageInfo_PhoneCheckReply.DiscardUnknown(m)
}

var xxx_messageInfo_PhoneCheckReply proto.InternalMessageInfo

// //////////////////////////////Like Service/////////////////////////////////
type LikeReq struct {
	Mid                  int64    `protobuf:"varint,1,opt,name=mid,proto3" json:"mid,omitempty" form:"mid" validate:"required"`
	UpMid                int64    `protobuf:"varint,2,opt,name=up_mid,json=upMid,proto3" json:"up_mid,omitempty" form:"up_mid" validate:"required"`
	Opid                 int64    `protobuf:"varint,3,opt,name=opid,proto3" json:"opid,omitempty" form:"opid" validate:"required"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LikeReq) Reset()         { *m = LikeReq{} }
func (m *LikeReq) String() string { return proto.CompactTextString(m) }
func (*LikeReq) ProtoMessage()    {}
func (*LikeReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_4357304ab078ce01, []int{10}
}
func (m *LikeReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LikeReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LikeReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *LikeReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LikeReq.Merge(dst, src)
}
func (m *LikeReq) XXX_Size() int {
	return m.Size()
}
func (m *LikeReq) XXX_DiscardUnknown() {
	xxx_messageInfo_LikeReq.DiscardUnknown(m)
}

var xxx_messageInfo_LikeReq proto.InternalMessageInfo

type LikeReply struct {
	AffectedNum          int64    `protobuf:"varint,1,opt,name=affected_num,json=affectedNum,proto3" json:"affected_num,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LikeReply) Reset()         { *m = LikeReply{} }
func (m *LikeReply) String() string { return proto.CompactTextString(m) }
func (*LikeReply) ProtoMessage()    {}
func (*LikeReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_4357304ab078ce01, []int{11}
}
func (m *LikeReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LikeReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LikeReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *LikeReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LikeReply.Merge(dst, src)
}
func (m *LikeReply) XXX_Size() int {
	return m.Size()
}
func (m *LikeReply) XXX_DiscardUnknown() {
	xxx_messageInfo_LikeReply.DiscardUnknown(m)
}

var xxx_messageInfo_LikeReply proto.InternalMessageInfo

type ListUserLikeReq struct {
	//    int64   mid         = 1 [(gogoproto.moretags)='form:"mid"'];
	UpMid                int64    `protobuf:"varint,2,opt,name=up_mid,json=upMid,proto3" json:"up_mid,omitempty" form:"up_mid" validate:"required"`
	CursorPrev           string   `protobuf:"bytes,3,opt,name=cursor_prev,json=cursorPrev,proto3" json:"cursor_prev,omitempty" form:"cursor_prev"`
	CursorNext           string   `protobuf:"bytes,4,opt,name=cursor_next,json=cursorNext,proto3" json:"cursor_next,omitempty" form:"cursor_next"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListUserLikeReq) Reset()         { *m = ListUserLikeReq{} }
func (m *ListUserLikeReq) String() string { return proto.CompactTextString(m) }
func (*ListUserLikeReq) ProtoMessage()    {}
func (*ListUserLikeReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_4357304ab078ce01, []int{12}
}
func (m *ListUserLikeReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListUserLikeReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListUserLikeReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ListUserLikeReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListUserLikeReq.Merge(dst, src)
}
func (m *ListUserLikeReq) XXX_Size() int {
	return m.Size()
}
func (m *ListUserLikeReq) XXX_DiscardUnknown() {
	xxx_messageInfo_ListUserLikeReq.DiscardUnknown(m)
}

var xxx_messageInfo_ListUserLikeReq proto.InternalMessageInfo

type LikeSv struct {
	Svid                 int64    `protobuf:"varint,1,opt,name=svid,proto3" json:"svid"`
	CursorValue          string   `protobuf:"bytes,2,opt,name=cursor_value,json=cursorValue,proto3" json:"cursor_value"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LikeSv) Reset()         { *m = LikeSv{} }
func (m *LikeSv) String() string { return proto.CompactTextString(m) }
func (*LikeSv) ProtoMessage()    {}
func (*LikeSv) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_4357304ab078ce01, []int{13}
}
func (m *LikeSv) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LikeSv) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LikeSv.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *LikeSv) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LikeSv.Merge(dst, src)
}
func (m *LikeSv) XXX_Size() int {
	return m.Size()
}
func (m *LikeSv) XXX_DiscardUnknown() {
	xxx_messageInfo_LikeSv.DiscardUnknown(m)
}

var xxx_messageInfo_LikeSv proto.InternalMessageInfo

type ListUserLikeReply struct {
	HasMore              bool      `protobuf:"varint,1,opt,name=has_more,json=hasMore,proto3" json:"has_more"`
	List                 []*LikeSv `protobuf:"bytes,2,rep,name=list" json:"list,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *ListUserLikeReply) Reset()         { *m = ListUserLikeReply{} }
func (m *ListUserLikeReply) String() string { return proto.CompactTextString(m) }
func (*ListUserLikeReply) ProtoMessage()    {}
func (*ListUserLikeReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_4357304ab078ce01, []int{14}
}
func (m *ListUserLikeReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListUserLikeReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListUserLikeReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ListUserLikeReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListUserLikeReply.Merge(dst, src)
}
func (m *ListUserLikeReply) XXX_Size() int {
	return m.Size()
}
func (m *ListUserLikeReply) XXX_DiscardUnknown() {
	xxx_messageInfo_ListUserLikeReply.DiscardUnknown(m)
}

var xxx_messageInfo_ListUserLikeReply proto.InternalMessageInfo

type IsLikeReq struct {
	Mid                  int64    `protobuf:"varint,1,opt,name=mid,proto3" json:"mid,omitempty" form:"mid"`
	Svids                []int64  `protobuf:"varint,2,rep,packed,name=svids" json:"svids,omitempty" form:"svids"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *IsLikeReq) Reset()         { *m = IsLikeReq{} }
func (m *IsLikeReq) String() string { return proto.CompactTextString(m) }
func (*IsLikeReq) ProtoMessage()    {}
func (*IsLikeReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_4357304ab078ce01, []int{15}
}
func (m *IsLikeReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IsLikeReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IsLikeReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *IsLikeReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IsLikeReq.Merge(dst, src)
}
func (m *IsLikeReq) XXX_Size() int {
	return m.Size()
}
func (m *IsLikeReq) XXX_DiscardUnknown() {
	xxx_messageInfo_IsLikeReq.DiscardUnknown(m)
}

var xxx_messageInfo_IsLikeReq proto.InternalMessageInfo

type IsLikeReply struct {
	List                 []int64  `protobuf:"varint,1,rep,packed,name=list" json:"has_more,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *IsLikeReply) Reset()         { *m = IsLikeReply{} }
func (m *IsLikeReply) String() string { return proto.CompactTextString(m) }
func (*IsLikeReply) ProtoMessage()    {}
func (*IsLikeReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_4357304ab078ce01, []int{16}
}
func (m *IsLikeReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IsLikeReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IsLikeReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *IsLikeReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IsLikeReply.Merge(dst, src)
}
func (m *IsLikeReply) XXX_Size() int {
	return m.Size()
}
func (m *IsLikeReply) XXX_DiscardUnknown() {
	xxx_messageInfo_IsLikeReply.DiscardUnknown(m)
}

var xxx_messageInfo_IsLikeReply proto.InternalMessageInfo

// //////////////////////////////UserInfo/////////////////////////////////
type UserBase struct {
	Mid                  int64                       `protobuf:"varint,1,opt,name=mid,proto3" json:"mid" form:"mid"`
	Uname                string                      `protobuf:"bytes,2,opt,name=uname,proto3" json:"uname" form:"uname"`
	Face                 string                      `protobuf:"bytes,3,opt,name=face,proto3" json:"face" form:"face"`
	Birthday             string                      `protobuf:"bytes,4,opt,name=birthday,proto3" json:"birthday" form:"birthday"`
	Exp                  int64                       `protobuf:"varint,5,opt,name=exp,proto3" json:"exp,omitempty" form:"exp"`
	Level                int64                       `protobuf:"varint,6,opt,name=level,proto3" json:"level,omitempty" form:"level"`
	Ctime                go_common_library_time.Time `protobuf:"varint,7,opt,name=ctime,proto3,casttype=go-common/library/time.Time" json:"ctime,omitempty"`
	Mtime                go_common_library_time.Time `protobuf:"varint,8,opt,name=mtime,proto3,casttype=go-common/library/time.Time" json:"mtime,omitempty"`
	Sex                  int8                        `protobuf:"varint,9,opt,name=sex,proto3,casttype=int8" json:"sex" form:"sex"`
	Region               int64                       `protobuf:"varint,10,opt,name=region,proto3" json:"region" form:"region"`
	Signature            string                      `protobuf:"bytes,11,opt,name=signature,proto3" json:"signature" form:"signature"`
	UserType             int8                        `protobuf:"varint,12,opt,name=user_type,json=userType,proto3,casttype=int8" json:"user_type"`
	CompleteDegree       int8                        `protobuf:"varint,13,opt,name=complete_degree,json=completeDegree,proto3,casttype=int8" json:"complete_degree"`
	NewTag               int8                        `protobuf:"varint,14,opt,name=new_tag,json=newTag,proto3,casttype=int8" json:"new_tag" form:"new_tag"`
	RegionName           string                      `protobuf:"bytes,21,opt,name=region_name,json=regionName,proto3" json:"region_name"`
	UserDesc             []string                    `protobuf:"bytes,22,rep,name=user_desc,json=userDesc" json:"user_desc,omitempty"`
	FaceUptime           string                      `protobuf:"bytes,23,opt,name=face_uptime,json=faceUptime,proto3" json:"face_uptime" form:"uptime"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_unrecognized     []byte                      `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *UserBase) Reset()         { *m = UserBase{} }
func (m *UserBase) String() string { return proto.CompactTextString(m) }
func (*UserBase) ProtoMessage()    {}
func (*UserBase) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_4357304ab078ce01, []int{17}
}
func (m *UserBase) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UserBase) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UserBase.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *UserBase) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserBase.Merge(dst, src)
}
func (m *UserBase) XXX_Size() int {
	return m.Size()
}
func (m *UserBase) XXX_DiscardUnknown() {
	xxx_messageInfo_UserBase.DiscardUnknown(m)
}

var xxx_messageInfo_UserBase proto.InternalMessageInfo

type UserStat struct {
	Sv                   int64    `protobuf:"varint,1,opt,name=sv,proto3" json:"sv"`
	Like                 int64    `protobuf:"varint,2,opt,name=like,proto3" json:"like"`
	Liked                int64    `protobuf:"varint,3,opt,name=liked,proto3" json:"liked"`
	Follow               int64    `protobuf:"varint,4,opt,name=follow,proto3" json:"follow"`
	Fan                  int64    `protobuf:"varint,5,opt,name=fan,proto3" json:"fan"`
	Black                int64    `protobuf:"varint,6,opt,name=black,proto3" json:"black"`
	View                 int64    `protobuf:"varint,7,opt,name=view,proto3" json:"view"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UserStat) Reset()         { *m = UserStat{} }
func (m *UserStat) String() string { return proto.CompactTextString(m) }
func (*UserStat) ProtoMessage()    {}
func (*UserStat) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_4357304ab078ce01, []int{18}
}
func (m *UserStat) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UserStat) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UserStat.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *UserStat) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserStat.Merge(dst, src)
}
func (m *UserStat) XXX_Size() int {
	return m.Size()
}
func (m *UserStat) XXX_DiscardUnknown() {
	xxx_messageInfo_UserStat.DiscardUnknown(m)
}

var xxx_messageInfo_UserStat proto.InternalMessageInfo

type UserInfo struct {
	UserBase             *UserBase `protobuf:"bytes,1,opt,name=user_base,json=userBase" json:"user_base,omitempty"`
	UserStat             *UserStat `protobuf:"bytes,2,opt,name=user_stat,json=userStat" json:"user_stat,omitempty"`
	FollowState          int8      `protobuf:"varint,3,opt,name=follow_state,json=followState,proto3,casttype=int8" json:"follow_state"`
	CursorValue          string    `protobuf:"bytes,4,opt,name=cursor_value,json=cursorValue,proto3" json:"cursor_value"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *UserInfo) Reset()         { *m = UserInfo{} }
func (m *UserInfo) String() string { return proto.CompactTextString(m) }
func (*UserInfo) ProtoMessage()    {}
func (*UserInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_4357304ab078ce01, []int{19}
}
func (m *UserInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UserInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UserInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *UserInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserInfo.Merge(dst, src)
}
func (m *UserInfo) XXX_Size() int {
	return m.Size()
}
func (m *UserInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_UserInfo.DiscardUnknown(m)
}

var xxx_messageInfo_UserInfo proto.InternalMessageInfo

type LocationItem struct {
	Id                   int32           `protobuf:"varint,1,opt,name=id,proto3" json:"id"`
	Pid                  int32           `protobuf:"varint,2,opt,name=pid,proto3" json:"pid"`
	Name                 string          `protobuf:"bytes,3,opt,name=name,proto3" json:"name"`
	Child                []*LocationItem `protobuf:"bytes,4,rep,name=child" json:"child,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *LocationItem) Reset()         { *m = LocationItem{} }
func (m *LocationItem) String() string { return proto.CompactTextString(m) }
func (*LocationItem) ProtoMessage()    {}
func (*LocationItem) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_4357304ab078ce01, []int{20}
}
func (m *LocationItem) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LocationItem) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LocationItem.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *LocationItem) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LocationItem.Merge(dst, src)
}
func (m *LocationItem) XXX_Size() int {
	return m.Size()
}
func (m *LocationItem) XXX_DiscardUnknown() {
	xxx_messageInfo_LocationItem.DiscardUnknown(m)
}

var xxx_messageInfo_LocationItem proto.InternalMessageInfo

type UserVideoView struct {
	Mid                  int64    `protobuf:"varint,1,opt,name=mid,proto3" json:"mid,omitempty" form:"mid"`
	Views                int64    `protobuf:"varint,2,opt,name=views,proto3" json:"views,omitempty" form:"views"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UserVideoView) Reset()         { *m = UserVideoView{} }
func (m *UserVideoView) String() string { return proto.CompactTextString(m) }
func (*UserVideoView) ProtoMessage()    {}
func (*UserVideoView) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_4357304ab078ce01, []int{21}
}
func (m *UserVideoView) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UserVideoView) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UserVideoView.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *UserVideoView) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserVideoView.Merge(dst, src)
}
func (m *UserVideoView) XXX_Size() int {
	return m.Size()
}
func (m *UserVideoView) XXX_DiscardUnknown() {
	xxx_messageInfo_UserVideoView.DiscardUnknown(m)
}

var xxx_messageInfo_UserVideoView proto.InternalMessageInfo

func init() {
	proto.RegisterType((*ListRelationUserInfoReq)(nil), "bbq.service.user.v1.ListRelationUserInfoReq")
	proto.RegisterType((*ListUserInfoReply)(nil), "bbq.service.user.v1.ListUserInfoReply")
	proto.RegisterType((*ListRelationReq)(nil), "bbq.service.user.v1.ListRelationReq")
	proto.RegisterType((*ListRelationReply)(nil), "bbq.service.user.v1.ListRelationReply")
	proto.RegisterType((*ModifyRelationReq)(nil), "bbq.service.user.v1.ModifyRelationReq")
	proto.RegisterType((*ModifyRelationReply)(nil), "bbq.service.user.v1.ModifyRelationReply")
	proto.RegisterType((*ListUserInfoReq)(nil), "bbq.service.user.v1.ListUserInfoReq")
	proto.RegisterType((*ListUserInfoConf)(nil), "bbq.service.user.v1.ListUserInfoConf")
	proto.RegisterType((*PhoneCheckReq)(nil), "bbq.service.user.v1.PhoneCheckReq")
	proto.RegisterType((*PhoneCheckReply)(nil), "bbq.service.user.v1.PhoneCheckReply")
	proto.RegisterType((*LikeReq)(nil), "bbq.service.user.v1.LikeReq")
	proto.RegisterType((*LikeReply)(nil), "bbq.service.user.v1.LikeReply")
	proto.RegisterType((*ListUserLikeReq)(nil), "bbq.service.user.v1.ListUserLikeReq")
	proto.RegisterType((*LikeSv)(nil), "bbq.service.user.v1.LikeSv")
	proto.RegisterType((*ListUserLikeReply)(nil), "bbq.service.user.v1.ListUserLikeReply")
	proto.RegisterType((*IsLikeReq)(nil), "bbq.service.user.v1.IsLikeReq")
	proto.RegisterType((*IsLikeReply)(nil), "bbq.service.user.v1.IsLikeReply")
	proto.RegisterType((*UserBase)(nil), "bbq.service.user.v1.UserBase")
	proto.RegisterType((*UserStat)(nil), "bbq.service.user.v1.UserStat")
	proto.RegisterType((*UserInfo)(nil), "bbq.service.user.v1.UserInfo")
	proto.RegisterType((*LocationItem)(nil), "bbq.service.user.v1.LocationItem")
	proto.RegisterType((*UserVideoView)(nil), "bbq.service.user.v1.UserVideoView")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// UserClient is the client API for User service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type UserClient interface {
	Login(ctx context.Context, in *UserBase, opts ...grpc.CallOption) (*UserBase, error)
	PhoneCheck(ctx context.Context, in *PhoneCheckReq, opts ...grpc.CallOption) (*PhoneCheckReply, error)
	UserEdit(ctx context.Context, in *UserBase, opts ...grpc.CallOption) (*empty.Empty, error)
	ListUserInfo(ctx context.Context, in *ListUserInfoReq, opts ...grpc.CallOption) (*ListUserInfoReply, error)
	// ///////////like/////////////
	AddLike(ctx context.Context, in *LikeReq, opts ...grpc.CallOption) (*LikeReply, error)
	CancelLike(ctx context.Context, in *LikeReq, opts ...grpc.CallOption) (*LikeReply, error)
	ListUserLike(ctx context.Context, in *ListUserLikeReq, opts ...grpc.CallOption) (*ListUserLikeReply, error)
	IsLike(ctx context.Context, in *IsLikeReq, opts ...grpc.CallOption) (*IsLikeReply, error)
	// //////////Relation///////////
	ModifyRelation(ctx context.Context, in *ModifyRelationReq, opts ...grpc.CallOption) (*ModifyRelationReply, error)
	// 返回UserInfo的列表，分页
	ListFollowUserInfo(ctx context.Context, in *ListRelationUserInfoReq, opts ...grpc.CallOption) (*ListUserInfoReply, error)
	ListFanUserInfo(ctx context.Context, in *ListRelationUserInfoReq, opts ...grpc.CallOption) (*ListUserInfoReply, error)
	ListBlackUserInfo(ctx context.Context, in *ListRelationUserInfoReq, opts ...grpc.CallOption) (*ListUserInfoReply, error)
	// 仅仅返回全部mid列表，不包含UserInfo
	ListFollow(ctx context.Context, in *ListRelationReq, opts ...grpc.CallOption) (*ListRelationReply, error)
	ListBlack(ctx context.Context, in *ListRelationReq, opts ...grpc.CallOption) (*ListRelationReply, error)
}

type userClient struct {
	cc *grpc.ClientConn
}

func NewUserClient(cc *grpc.ClientConn) UserClient {
	return &userClient{cc}
}

func (c *userClient) Login(ctx context.Context, in *UserBase, opts ...grpc.CallOption) (*UserBase, error) {
	out := new(UserBase)
	err := c.cc.Invoke(ctx, "/bbq.service.user.v1.User/Login", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) PhoneCheck(ctx context.Context, in *PhoneCheckReq, opts ...grpc.CallOption) (*PhoneCheckReply, error) {
	out := new(PhoneCheckReply)
	err := c.cc.Invoke(ctx, "/bbq.service.user.v1.User/PhoneCheck", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) UserEdit(ctx context.Context, in *UserBase, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/bbq.service.user.v1.User/UserEdit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) ListUserInfo(ctx context.Context, in *ListUserInfoReq, opts ...grpc.CallOption) (*ListUserInfoReply, error) {
	out := new(ListUserInfoReply)
	err := c.cc.Invoke(ctx, "/bbq.service.user.v1.User/ListUserInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) AddLike(ctx context.Context, in *LikeReq, opts ...grpc.CallOption) (*LikeReply, error) {
	out := new(LikeReply)
	err := c.cc.Invoke(ctx, "/bbq.service.user.v1.User/AddLike", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) CancelLike(ctx context.Context, in *LikeReq, opts ...grpc.CallOption) (*LikeReply, error) {
	out := new(LikeReply)
	err := c.cc.Invoke(ctx, "/bbq.service.user.v1.User/CancelLike", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) ListUserLike(ctx context.Context, in *ListUserLikeReq, opts ...grpc.CallOption) (*ListUserLikeReply, error) {
	out := new(ListUserLikeReply)
	err := c.cc.Invoke(ctx, "/bbq.service.user.v1.User/ListUserLike", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) IsLike(ctx context.Context, in *IsLikeReq, opts ...grpc.CallOption) (*IsLikeReply, error) {
	out := new(IsLikeReply)
	err := c.cc.Invoke(ctx, "/bbq.service.user.v1.User/IsLike", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) ModifyRelation(ctx context.Context, in *ModifyRelationReq, opts ...grpc.CallOption) (*ModifyRelationReply, error) {
	out := new(ModifyRelationReply)
	err := c.cc.Invoke(ctx, "/bbq.service.user.v1.User/ModifyRelation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) ListFollowUserInfo(ctx context.Context, in *ListRelationUserInfoReq, opts ...grpc.CallOption) (*ListUserInfoReply, error) {
	out := new(ListUserInfoReply)
	err := c.cc.Invoke(ctx, "/bbq.service.user.v1.User/ListFollowUserInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) ListFanUserInfo(ctx context.Context, in *ListRelationUserInfoReq, opts ...grpc.CallOption) (*ListUserInfoReply, error) {
	out := new(ListUserInfoReply)
	err := c.cc.Invoke(ctx, "/bbq.service.user.v1.User/ListFanUserInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) ListBlackUserInfo(ctx context.Context, in *ListRelationUserInfoReq, opts ...grpc.CallOption) (*ListUserInfoReply, error) {
	out := new(ListUserInfoReply)
	err := c.cc.Invoke(ctx, "/bbq.service.user.v1.User/ListBlackUserInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) ListFollow(ctx context.Context, in *ListRelationReq, opts ...grpc.CallOption) (*ListRelationReply, error) {
	out := new(ListRelationReply)
	err := c.cc.Invoke(ctx, "/bbq.service.user.v1.User/ListFollow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) ListBlack(ctx context.Context, in *ListRelationReq, opts ...grpc.CallOption) (*ListRelationReply, error) {
	out := new(ListRelationReply)
	err := c.cc.Invoke(ctx, "/bbq.service.user.v1.User/ListBlack", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserServer is the server API for User service.
type UserServer interface {
	Login(context.Context, *UserBase) (*UserBase, error)
	PhoneCheck(context.Context, *PhoneCheckReq) (*PhoneCheckReply, error)
	UserEdit(context.Context, *UserBase) (*empty.Empty, error)
	ListUserInfo(context.Context, *ListUserInfoReq) (*ListUserInfoReply, error)
	// ///////////like/////////////
	AddLike(context.Context, *LikeReq) (*LikeReply, error)
	CancelLike(context.Context, *LikeReq) (*LikeReply, error)
	ListUserLike(context.Context, *ListUserLikeReq) (*ListUserLikeReply, error)
	IsLike(context.Context, *IsLikeReq) (*IsLikeReply, error)
	// //////////Relation///////////
	ModifyRelation(context.Context, *ModifyRelationReq) (*ModifyRelationReply, error)
	// 返回UserInfo的列表，分页
	ListFollowUserInfo(context.Context, *ListRelationUserInfoReq) (*ListUserInfoReply, error)
	ListFanUserInfo(context.Context, *ListRelationUserInfoReq) (*ListUserInfoReply, error)
	ListBlackUserInfo(context.Context, *ListRelationUserInfoReq) (*ListUserInfoReply, error)
	// 仅仅返回全部mid列表，不包含UserInfo
	ListFollow(context.Context, *ListRelationReq) (*ListRelationReply, error)
	ListBlack(context.Context, *ListRelationReq) (*ListRelationReply, error)
}

func RegisterUserServer(s *grpc.Server, srv UserServer) {
	s.RegisterService(&_User_serviceDesc, srv)
}

func _User_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserBase)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bbq.service.user.v1.User/Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).Login(ctx, req.(*UserBase))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_PhoneCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PhoneCheckReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).PhoneCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bbq.service.user.v1.User/PhoneCheck",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).PhoneCheck(ctx, req.(*PhoneCheckReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_UserEdit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserBase)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).UserEdit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bbq.service.user.v1.User/UserEdit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).UserEdit(ctx, req.(*UserBase))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_ListUserInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUserInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).ListUserInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bbq.service.user.v1.User/ListUserInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).ListUserInfo(ctx, req.(*ListUserInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_AddLike_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LikeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).AddLike(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bbq.service.user.v1.User/AddLike",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).AddLike(ctx, req.(*LikeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_CancelLike_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LikeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).CancelLike(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bbq.service.user.v1.User/CancelLike",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).CancelLike(ctx, req.(*LikeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_ListUserLike_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUserLikeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).ListUserLike(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bbq.service.user.v1.User/ListUserLike",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).ListUserLike(ctx, req.(*ListUserLikeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_IsLike_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IsLikeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).IsLike(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bbq.service.user.v1.User/IsLike",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).IsLike(ctx, req.(*IsLikeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_ModifyRelation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ModifyRelationReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).ModifyRelation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bbq.service.user.v1.User/ModifyRelation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).ModifyRelation(ctx, req.(*ModifyRelationReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_ListFollowUserInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRelationUserInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).ListFollowUserInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bbq.service.user.v1.User/ListFollowUserInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).ListFollowUserInfo(ctx, req.(*ListRelationUserInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_ListFanUserInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRelationUserInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).ListFanUserInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bbq.service.user.v1.User/ListFanUserInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).ListFanUserInfo(ctx, req.(*ListRelationUserInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_ListBlackUserInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRelationUserInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).ListBlackUserInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bbq.service.user.v1.User/ListBlackUserInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).ListBlackUserInfo(ctx, req.(*ListRelationUserInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_ListFollow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRelationReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).ListFollow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bbq.service.user.v1.User/ListFollow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).ListFollow(ctx, req.(*ListRelationReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_ListBlack_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRelationReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).ListBlack(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bbq.service.user.v1.User/ListBlack",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).ListBlack(ctx, req.(*ListRelationReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _User_serviceDesc = grpc.ServiceDesc{
	ServiceName: "bbq.service.user.v1.User",
	HandlerType: (*UserServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Login",
			Handler:    _User_Login_Handler,
		},
		{
			MethodName: "PhoneCheck",
			Handler:    _User_PhoneCheck_Handler,
		},
		{
			MethodName: "UserEdit",
			Handler:    _User_UserEdit_Handler,
		},
		{
			MethodName: "ListUserInfo",
			Handler:    _User_ListUserInfo_Handler,
		},
		{
			MethodName: "AddLike",
			Handler:    _User_AddLike_Handler,
		},
		{
			MethodName: "CancelLike",
			Handler:    _User_CancelLike_Handler,
		},
		{
			MethodName: "ListUserLike",
			Handler:    _User_ListUserLike_Handler,
		},
		{
			MethodName: "IsLike",
			Handler:    _User_IsLike_Handler,
		},
		{
			MethodName: "ModifyRelation",
			Handler:    _User_ModifyRelation_Handler,
		},
		{
			MethodName: "ListFollowUserInfo",
			Handler:    _User_ListFollowUserInfo_Handler,
		},
		{
			MethodName: "ListFanUserInfo",
			Handler:    _User_ListFanUserInfo_Handler,
		},
		{
			MethodName: "ListBlackUserInfo",
			Handler:    _User_ListBlackUserInfo_Handler,
		},
		{
			MethodName: "ListFollow",
			Handler:    _User_ListFollow_Handler,
		},
		{
			MethodName: "ListBlack",
			Handler:    _User_ListBlack_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "app/service/bbq/user/api/api.proto",
}

func (m *ListRelationUserInfoReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListRelationUserInfoReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Mid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Mid))
	}
	if m.UpMid != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.UpMid))
	}
	if len(m.CursorPrev) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.CursorPrev)))
		i += copy(dAtA[i:], m.CursorPrev)
	}
	if len(m.CursorNext) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.CursorNext)))
		i += copy(dAtA[i:], m.CursorNext)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ListUserInfoReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListUserInfoReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.HasMore {
		dAtA[i] = 0x8
		i++
		if m.HasMore {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.List) > 0 {
		for _, msg := range m.List {
			dAtA[i] = 0x12
			i++
			i = encodeVarintApi(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ListRelationReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListRelationReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Mid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Mid))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ListRelationReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListRelationReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.List) > 0 {
		dAtA2 := make([]byte, len(m.List)*10)
		var j1 int
		for _, num1 := range m.List {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		dAtA[i] = 0xa
		i++
		i = encodeVarintApi(dAtA, i, uint64(j1))
		i += copy(dAtA[i:], dAtA2[:j1])
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ModifyRelationReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ModifyRelationReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Mid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Mid))
	}
	if m.UpMid != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.UpMid))
	}
	if m.Action != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Action))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ModifyRelationReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ModifyRelationReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.FollowState != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.FollowState))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ListUserInfoReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListUserInfoReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Mid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Mid))
	}
	if len(m.UpMid) > 0 {
		dAtA4 := make([]byte, len(m.UpMid)*10)
		var j3 int
		for _, num1 := range m.UpMid {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA4[j3] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j3++
			}
			dAtA4[j3] = uint8(num)
			j3++
		}
		dAtA[i] = 0x12
		i++
		i = encodeVarintApi(dAtA, i, uint64(j3))
		i += copy(dAtA[i:], dAtA4[:j3])
	}
	if m.NeedDesc {
		dAtA[i] = 0x18
		i++
		if m.NeedDesc {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.NeedStat {
		dAtA[i] = 0x20
		i++
		if m.NeedStat {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.NeedFollowState {
		dAtA[i] = 0x28
		i++
		if m.NeedFollowState {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ListUserInfoConf) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListUserInfoConf) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.NeedDesc {
		dAtA[i] = 0x8
		i++
		if m.NeedDesc {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.NeedStat {
		dAtA[i] = 0x10
		i++
		if m.NeedStat {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.NeedFollowState {
		dAtA[i] = 0x18
		i++
		if m.NeedFollowState {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *PhoneCheckReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PhoneCheckReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Mid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Mid))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *PhoneCheckReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PhoneCheckReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.TelStatus != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.TelStatus))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *LikeReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LikeReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Mid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Mid))
	}
	if m.UpMid != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.UpMid))
	}
	if m.Opid != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Opid))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *LikeReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LikeReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.AffectedNum != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.AffectedNum))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ListUserLikeReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListUserLikeReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UpMid != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.UpMid))
	}
	if len(m.CursorPrev) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.CursorPrev)))
		i += copy(dAtA[i:], m.CursorPrev)
	}
	if len(m.CursorNext) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.CursorNext)))
		i += copy(dAtA[i:], m.CursorNext)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *LikeSv) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LikeSv) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Svid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Svid))
	}
	if len(m.CursorValue) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.CursorValue)))
		i += copy(dAtA[i:], m.CursorValue)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ListUserLikeReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListUserLikeReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.HasMore {
		dAtA[i] = 0x8
		i++
		if m.HasMore {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.List) > 0 {
		for _, msg := range m.List {
			dAtA[i] = 0x12
			i++
			i = encodeVarintApi(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *IsLikeReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IsLikeReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Mid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Mid))
	}
	if len(m.Svids) > 0 {
		dAtA6 := make([]byte, len(m.Svids)*10)
		var j5 int
		for _, num1 := range m.Svids {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA6[j5] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j5++
			}
			dAtA6[j5] = uint8(num)
			j5++
		}
		dAtA[i] = 0x12
		i++
		i = encodeVarintApi(dAtA, i, uint64(j5))
		i += copy(dAtA[i:], dAtA6[:j5])
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *IsLikeReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IsLikeReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.List) > 0 {
		dAtA8 := make([]byte, len(m.List)*10)
		var j7 int
		for _, num1 := range m.List {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA8[j7] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j7++
			}
			dAtA8[j7] = uint8(num)
			j7++
		}
		dAtA[i] = 0xa
		i++
		i = encodeVarintApi(dAtA, i, uint64(j7))
		i += copy(dAtA[i:], dAtA8[:j7])
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *UserBase) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserBase) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Mid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Mid))
	}
	if len(m.Uname) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Uname)))
		i += copy(dAtA[i:], m.Uname)
	}
	if len(m.Face) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Face)))
		i += copy(dAtA[i:], m.Face)
	}
	if len(m.Birthday) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Birthday)))
		i += copy(dAtA[i:], m.Birthday)
	}
	if m.Exp != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Exp))
	}
	if m.Level != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Level))
	}
	if m.Ctime != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Ctime))
	}
	if m.Mtime != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Mtime))
	}
	if m.Sex != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Sex))
	}
	if m.Region != 0 {
		dAtA[i] = 0x50
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Region))
	}
	if len(m.Signature) > 0 {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Signature)))
		i += copy(dAtA[i:], m.Signature)
	}
	if m.UserType != 0 {
		dAtA[i] = 0x60
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.UserType))
	}
	if m.CompleteDegree != 0 {
		dAtA[i] = 0x68
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.CompleteDegree))
	}
	if m.NewTag != 0 {
		dAtA[i] = 0x70
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.NewTag))
	}
	if len(m.RegionName) > 0 {
		dAtA[i] = 0xaa
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.RegionName)))
		i += copy(dAtA[i:], m.RegionName)
	}
	if len(m.UserDesc) > 0 {
		for _, s := range m.UserDesc {
			dAtA[i] = 0xb2
			i++
			dAtA[i] = 0x1
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.FaceUptime) > 0 {
		dAtA[i] = 0xba
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.FaceUptime)))
		i += copy(dAtA[i:], m.FaceUptime)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *UserStat) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserStat) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Sv != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Sv))
	}
	if m.Like != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Like))
	}
	if m.Liked != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Liked))
	}
	if m.Follow != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Follow))
	}
	if m.Fan != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Fan))
	}
	if m.Black != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Black))
	}
	if m.View != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.View))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *UserInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserBase != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.UserBase.Size()))
		n9, err := m.UserBase.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n9
	}
	if m.UserStat != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.UserStat.Size()))
		n10, err := m.UserStat.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n10
	}
	if m.FollowState != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.FollowState))
	}
	if len(m.CursorValue) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.CursorValue)))
		i += copy(dAtA[i:], m.CursorValue)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *LocationItem) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LocationItem) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Id))
	}
	if m.Pid != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Pid))
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.Child) > 0 {
		for _, msg := range m.Child {
			dAtA[i] = 0x22
			i++
			i = encodeVarintApi(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *UserVideoView) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserVideoView) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Mid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Mid))
	}
	if m.Views != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Views))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintApi(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *ListRelationUserInfoReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Mid != 0 {
		n += 1 + sovApi(uint64(m.Mid))
	}
	if m.UpMid != 0 {
		n += 1 + sovApi(uint64(m.UpMid))
	}
	l = len(m.CursorPrev)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.CursorNext)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ListUserInfoReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.HasMore {
		n += 2
	}
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ListRelationReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Mid != 0 {
		n += 1 + sovApi(uint64(m.Mid))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ListRelationReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.List) > 0 {
		l = 0
		for _, e := range m.List {
			l += sovApi(uint64(e))
		}
		n += 1 + sovApi(uint64(l)) + l
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ModifyRelationReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Mid != 0 {
		n += 1 + sovApi(uint64(m.Mid))
	}
	if m.UpMid != 0 {
		n += 1 + sovApi(uint64(m.UpMid))
	}
	if m.Action != 0 {
		n += 1 + sovApi(uint64(m.Action))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ModifyRelationReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.FollowState != 0 {
		n += 1 + sovApi(uint64(m.FollowState))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ListUserInfoReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Mid != 0 {
		n += 1 + sovApi(uint64(m.Mid))
	}
	if len(m.UpMid) > 0 {
		l = 0
		for _, e := range m.UpMid {
			l += sovApi(uint64(e))
		}
		n += 1 + sovApi(uint64(l)) + l
	}
	if m.NeedDesc {
		n += 2
	}
	if m.NeedStat {
		n += 2
	}
	if m.NeedFollowState {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ListUserInfoConf) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NeedDesc {
		n += 2
	}
	if m.NeedStat {
		n += 2
	}
	if m.NeedFollowState {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PhoneCheckReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Mid != 0 {
		n += 1 + sovApi(uint64(m.Mid))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PhoneCheckReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TelStatus != 0 {
		n += 1 + sovApi(uint64(m.TelStatus))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *LikeReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Mid != 0 {
		n += 1 + sovApi(uint64(m.Mid))
	}
	if m.UpMid != 0 {
		n += 1 + sovApi(uint64(m.UpMid))
	}
	if m.Opid != 0 {
		n += 1 + sovApi(uint64(m.Opid))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *LikeReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AffectedNum != 0 {
		n += 1 + sovApi(uint64(m.AffectedNum))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ListUserLikeReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UpMid != 0 {
		n += 1 + sovApi(uint64(m.UpMid))
	}
	l = len(m.CursorPrev)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.CursorNext)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *LikeSv) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Svid != 0 {
		n += 1 + sovApi(uint64(m.Svid))
	}
	l = len(m.CursorValue)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ListUserLikeReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.HasMore {
		n += 2
	}
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *IsLikeReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Mid != 0 {
		n += 1 + sovApi(uint64(m.Mid))
	}
	if len(m.Svids) > 0 {
		l = 0
		for _, e := range m.Svids {
			l += sovApi(uint64(e))
		}
		n += 1 + sovApi(uint64(l)) + l
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *IsLikeReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.List) > 0 {
		l = 0
		for _, e := range m.List {
			l += sovApi(uint64(e))
		}
		n += 1 + sovApi(uint64(l)) + l
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UserBase) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Mid != 0 {
		n += 1 + sovApi(uint64(m.Mid))
	}
	l = len(m.Uname)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Face)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Birthday)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Exp != 0 {
		n += 1 + sovApi(uint64(m.Exp))
	}
	if m.Level != 0 {
		n += 1 + sovApi(uint64(m.Level))
	}
	if m.Ctime != 0 {
		n += 1 + sovApi(uint64(m.Ctime))
	}
	if m.Mtime != 0 {
		n += 1 + sovApi(uint64(m.Mtime))
	}
	if m.Sex != 0 {
		n += 1 + sovApi(uint64(m.Sex))
	}
	if m.Region != 0 {
		n += 1 + sovApi(uint64(m.Region))
	}
	l = len(m.Signature)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.UserType != 0 {
		n += 1 + sovApi(uint64(m.UserType))
	}
	if m.CompleteDegree != 0 {
		n += 1 + sovApi(uint64(m.CompleteDegree))
	}
	if m.NewTag != 0 {
		n += 1 + sovApi(uint64(m.NewTag))
	}
	l = len(m.RegionName)
	if l > 0 {
		n += 2 + l + sovApi(uint64(l))
	}
	if len(m.UserDesc) > 0 {
		for _, s := range m.UserDesc {
			l = len(s)
			n += 2 + l + sovApi(uint64(l))
		}
	}
	l = len(m.FaceUptime)
	if l > 0 {
		n += 2 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UserStat) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Sv != 0 {
		n += 1 + sovApi(uint64(m.Sv))
	}
	if m.Like != 0 {
		n += 1 + sovApi(uint64(m.Like))
	}
	if m.Liked != 0 {
		n += 1 + sovApi(uint64(m.Liked))
	}
	if m.Follow != 0 {
		n += 1 + sovApi(uint64(m.Follow))
	}
	if m.Fan != 0 {
		n += 1 + sovApi(uint64(m.Fan))
	}
	if m.Black != 0 {
		n += 1 + sovApi(uint64(m.Black))
	}
	if m.View != 0 {
		n += 1 + sovApi(uint64(m.View))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UserInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UserBase != nil {
		l = m.UserBase.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.UserStat != nil {
		l = m.UserStat.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.FollowState != 0 {
		n += 1 + sovApi(uint64(m.FollowState))
	}
	l = len(m.CursorValue)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *LocationItem) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovApi(uint64(m.Id))
	}
	if m.Pid != 0 {
		n += 1 + sovApi(uint64(m.Pid))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if len(m.Child) > 0 {
		for _, e := range m.Child {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UserVideoView) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Mid != 0 {
		n += 1 + sovApi(uint64(m.Mid))
	}
	if m.Views != 0 {
		n += 1 + sovApi(uint64(m.Views))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovApi(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozApi(x uint64) (n int) {
	return sovApi(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ListRelationUserInfoReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListRelationUserInfoReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListRelationUserInfoReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpMid", wireType)
			}
			m.UpMid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpMid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CursorPrev", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CursorPrev = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CursorNext", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CursorNext = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListUserInfoReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListUserInfoReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListUserInfoReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HasMore", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.HasMore = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &UserInfo{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListRelationReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListRelationReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListRelationReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListRelationReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListRelationReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListRelationReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.List = append(m.List, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthApi
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.List) == 0 {
					m.List = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.List = append(m.List, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ModifyRelationReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ModifyRelationReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ModifyRelationReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpMid", wireType)
			}
			m.UpMid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpMid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Action", wireType)
			}
			m.Action = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Action |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ModifyRelationReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ModifyRelationReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ModifyRelationReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FollowState", wireType)
			}
			m.FollowState = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FollowState |= (int8(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListUserInfoReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListUserInfoReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListUserInfoReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.UpMid = append(m.UpMid, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthApi
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.UpMid) == 0 {
					m.UpMid = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.UpMid = append(m.UpMid, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field UpMid", wireType)
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NeedDesc", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.NeedDesc = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NeedStat", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.NeedStat = bool(v != 0)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NeedFollowState", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.NeedFollowState = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListUserInfoConf) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListUserInfoConf: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListUserInfoConf: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NeedDesc", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.NeedDesc = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NeedStat", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.NeedStat = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NeedFollowState", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.NeedFollowState = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PhoneCheckReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PhoneCheckReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PhoneCheckReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PhoneCheckReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PhoneCheckReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PhoneCheckReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TelStatus", wireType)
			}
			m.TelStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TelStatus |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LikeReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LikeReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LikeReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpMid", wireType)
			}
			m.UpMid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpMid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Opid", wireType)
			}
			m.Opid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Opid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LikeReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LikeReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LikeReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AffectedNum", wireType)
			}
			m.AffectedNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AffectedNum |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListUserLikeReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListUserLikeReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListUserLikeReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpMid", wireType)
			}
			m.UpMid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpMid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CursorPrev", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CursorPrev = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CursorNext", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CursorNext = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LikeSv) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LikeSv: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LikeSv: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Svid", wireType)
			}
			m.Svid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Svid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CursorValue", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CursorValue = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListUserLikeReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListUserLikeReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListUserLikeReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HasMore", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.HasMore = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &LikeSv{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IsLikeReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IsLikeReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IsLikeReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Svids = append(m.Svids, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthApi
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Svids) == 0 {
					m.Svids = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Svids = append(m.Svids, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Svids", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IsLikeReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IsLikeReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IsLikeReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.List = append(m.List, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthApi
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.List) == 0 {
					m.List = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.List = append(m.List, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserBase) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserBase: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserBase: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uname", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Uname = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Face", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Face = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Birthday", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Birthday = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Exp", wireType)
			}
			m.Exp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Exp |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			m.Level = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Level |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ctime", wireType)
			}
			m.Ctime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ctime |= (go_common_library_time.Time(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mtime", wireType)
			}
			m.Mtime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mtime |= (go_common_library_time.Time(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sex", wireType)
			}
			m.Sex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sex |= (int8(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Region", wireType)
			}
			m.Region = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Region |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signature = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserType", wireType)
			}
			m.UserType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserType |= (int8(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompleteDegree", wireType)
			}
			m.CompleteDegree = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CompleteDegree |= (int8(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewTag", wireType)
			}
			m.NewTag = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NewTag |= (int8(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RegionName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RegionName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 22:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserDesc", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserDesc = append(m.UserDesc, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 23:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FaceUptime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FaceUptime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserStat) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserStat: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserStat: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sv", wireType)
			}
			m.Sv = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sv |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Like", wireType)
			}
			m.Like = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Like |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Liked", wireType)
			}
			m.Liked = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Liked |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Follow", wireType)
			}
			m.Follow = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Follow |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fan", wireType)
			}
			m.Fan = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Fan |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Black", wireType)
			}
			m.Black = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Black |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field View", wireType)
			}
			m.View = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.View |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserBase", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UserBase == nil {
				m.UserBase = &UserBase{}
			}
			if err := m.UserBase.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserStat", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UserStat == nil {
				m.UserStat = &UserStat{}
			}
			if err := m.UserStat.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FollowState", wireType)
			}
			m.FollowState = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FollowState |= (int8(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CursorValue", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CursorValue = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LocationItem) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LocationItem: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LocationItem: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pid", wireType)
			}
			m.Pid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Pid |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Child", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Child = append(m.Child, &LocationItem{})
			if err := m.Child[len(m.Child)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserVideoView) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserVideoView: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserVideoView: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Views", wireType)
			}
			m.Views = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Views |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipApi(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowApi
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowApi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowApi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthApi
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowApi
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipApi(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthApi = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowApi   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("app/service/bbq/user/api/api.proto", fileDescriptor_api_4357304ab078ce01)
}

var fileDescriptor_api_4357304ab078ce01 = []byte{
	// 1737 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xd4, 0x58, 0x4b, 0x73, 0x1b, 0xc7,
	0x11, 0x0e, 0x9e, 0x04, 0x1a, 0x14, 0x29, 0x8d, 0x22, 0x0a, 0xa6, 0x24, 0x2e, 0x34, 0x71, 0x68,
	0x56, 0x6c, 0x03, 0x96, 0xe4, 0x94, 0x13, 0x2b, 0x8f, 0x12, 0xf4, 0x70, 0x94, 0xa2, 0x54, 0xae,
	0xd1, 0xa3, 0xca, 0x4e, 0xaa, 0x50, 0x0b, 0xec, 0x00, 0x9c, 0x68, 0x5f, 0xda, 0x5d, 0x80, 0xe4,
	0x31, 0x95, 0x7f, 0x90, 0x1f, 0x91, 0x4b, 0x2a, 0xd7, 0xdc, 0x93, 0x43, 0xca, 0xc7, 0xfc, 0x82,
	0x8d, 0xa3, 0x23, 0x72, 0xc3, 0xd1, 0xa7, 0x54, 0xf7, 0x2c, 0xb0, 0x0b, 0x12, 0x84, 0x20, 0x3f,
	0x2a, 0x95, 0x03, 0x77, 0x39, 0xfd, 0x9a, 0xee, 0xaf, 0x7b, 0xa6, 0x7b, 0x01, 0xdc, 0xf4, 0xfd,
	0x56, 0x28, 0x83, 0x91, 0xea, 0xc9, 0x56, 0xb7, 0xfb, 0xb2, 0x35, 0x0c, 0x65, 0xd0, 0x32, 0x7d,
	0x85, 0x7f, 0x4d, 0x3f, 0xf0, 0x22, 0x8f, 0x5d, 0xec, 0x76, 0x5f, 0x36, 0x13, 0x99, 0x26, 0xf2,
	0x9b, 0xa3, 0x1b, 0xdb, 0xef, 0x0f, 0x54, 0x74, 0x30, 0xec, 0x36, 0x7b, 0x9e, 0xd3, 0x1a, 0x78,
	0x03, 0xaf, 0x45, 0xb2, 0xdd, 0x61, 0x9f, 0x56, 0xb4, 0xa0, 0xff, 0xb4, 0x8d, 0xed, 0x2b, 0x03,
	0xcf, 0x1b, 0xd8, 0x32, 0x95, 0x92, 0x8e, 0x1f, 0x1d, 0x6b, 0x26, 0xff, 0x4f, 0x0e, 0x2e, 0xef,
	0xab, 0x30, 0x12, 0xd2, 0x36, 0x23, 0xe5, 0xb9, 0xcf, 0x42, 0x19, 0x3c, 0x74, 0xfb, 0x9e, 0x90,
	0x2f, 0x59, 0x03, 0x0a, 0x8e, 0xb2, 0xea, 0xb9, 0x46, 0x6e, 0xaf, 0xd0, 0xde, 0x98, 0xc4, 0x06,
	0xf4, 0xbd, 0xc0, 0xf9, 0x98, 0x3b, 0xca, 0xe2, 0x02, 0x59, 0xec, 0x67, 0x50, 0x1e, 0xfa, 0x1d,
	0x14, 0xca, 0x93, 0xd0, 0x0f, 0x27, 0xb1, 0x71, 0x5d, 0x0b, 0x69, 0x3a, 0x6f, 0x8c, 0x4c, 0x5b,
	0x59, 0x66, 0x24, 0x3f, 0xe6, 0x81, 0x7c, 0x39, 0x54, 0x81, 0xb4, 0xb8, 0x28, 0x0d, 0xfd, 0x47,
	0xca, 0x62, 0x1f, 0x41, 0xad, 0x37, 0x0c, 0x42, 0x2f, 0xe8, 0xf8, 0x81, 0x1c, 0xd5, 0x0b, 0x8d,
	0xdc, 0x5e, 0xb5, 0xbd, 0x35, 0x89, 0x0d, 0xa6, 0x4d, 0x64, 0x98, 0x5c, 0x80, 0x5e, 0x7d, 0x1a,
	0xc8, 0x51, 0x46, 0xd1, 0x95, 0x47, 0x51, 0xbd, 0x78, 0x86, 0x22, 0x32, 0x67, 0x8a, 0x8f, 0x71,
	0xf1, 0x87, 0x1c, 0x5c, 0xc0, 0x68, 0xd3, 0x28, 0x7d, 0xfb, 0x98, 0xbd, 0x03, 0x95, 0x03, 0x33,
	0xec, 0x38, 0x5e, 0x20, 0x29, 0xd8, 0x4a, 0x7b, 0x7d, 0x1c, 0x1b, 0x33, 0x9a, 0x58, 0x3b, 0x30,
	0xc3, 0x47, 0x5e, 0x20, 0xd9, 0x7d, 0x28, 0xda, 0x2a, 0x8c, 0xea, 0xf9, 0x46, 0x61, 0xaf, 0x76,
	0xf3, 0x5a, 0x73, 0x41, 0x72, 0x9a, 0x53, 0xd3, 0x6d, 0x36, 0x8e, 0x8d, 0x0d, 0x14, 0x7f, 0xcf,
	0x73, 0x54, 0x44, 0x98, 0x0b, 0x52, 0xe7, 0x9f, 0xc0, 0x66, 0x16, 0x72, 0x84, 0xfa, 0xc3, 0x2c,
	0xd4, 0x7c, 0x12, 0x1b, 0x3b, 0x29, 0xd4, 0x0b, 0x21, 0x44, 0x71, 0x7e, 0x5b, 0x47, 0x93, 0x1a,
	0xc2, 0x68, 0x76, 0x13, 0x27, 0x73, 0x8d, 0xc2, 0x5e, 0x61, 0x89, 0x17, 0xff, 0xc8, 0xc1, 0x85,
	0x47, 0x9e, 0xa5, 0xfa, 0xc7, 0xdf, 0xd8, 0x91, 0x6f, 0x58, 0x07, 0x3f, 0x87, 0xb2, 0xd9, 0x43,
	0x07, 0xa8, 0x04, 0x4a, 0x59, 0x6d, 0x4d, 0x5f, 0xac, 0x9d, 0x28, 0x71, 0x01, 0x17, 0x4f, 0xc6,
	0x81, 0x38, 0xdc, 0x86, 0xf5, 0xbe, 0x67, 0xdb, 0xde, 0x61, 0x27, 0x8c, 0xcc, 0x48, 0x67, 0xb6,
	0xd4, 0xae, 0x8f, 0x63, 0x63, 0x8e, 0xfe, 0x55, 0x6c, 0x14, 0x95, 0x1b, 0xfd, 0x44, 0xd4, 0x34,
	0xf5, 0x09, 0x12, 0xf9, 0x9f, 0xf3, 0x3a, 0x47, 0x6f, 0x76, 0x1c, 0x1e, 0x64, 0x60, 0x40, 0xf0,
	0x5b, 0x93, 0xd8, 0x78, 0x37, 0x0b, 0x43, 0x9a, 0x84, 0xa5, 0x80, 0xdc, 0x80, 0xaa, 0x2b, 0xa5,
	0xd5, 0xb1, 0x64, 0xd8, 0x23, 0x4c, 0x2a, 0xed, 0xef, 0x4f, 0x62, 0xe3, 0xbc, 0x36, 0x35, 0x63,
	0x71, 0x51, 0xc1, 0xff, 0xef, 0xc9, 0xb0, 0x37, 0x53, 0xc1, 0x98, 0xe8, 0x40, 0x9c, 0x56, 0x41,
	0x56, 0xa2, 0x82, 0x41, 0xb2, 0x5f, 0xc1, 0x05, 0xa2, 0xcf, 0xa1, 0x54, 0x22, 0xd5, 0xab, 0x93,
	0xd8, 0xa8, 0x67, 0x54, 0xb3, 0x22, 0x5c, 0x6c, 0x22, 0xed, 0x41, 0x06, 0xad, 0xbf, 0xe7, 0xe0,
	0x7c, 0x16, 0xad, 0xbb, 0x9e, 0xdb, 0x9f, 0x0f, 0x22, 0xf7, 0xe6, 0x41, 0xe4, 0xbf, 0x7e, 0x10,
	0x85, 0xaf, 0x13, 0xc4, 0x0d, 0x38, 0xf7, 0xe9, 0x81, 0xe7, 0xca, 0xbb, 0x07, 0xb2, 0xf7, 0x62,
	0xa5, 0x7c, 0xf3, 0x0f, 0x60, 0x33, 0xab, 0x82, 0x55, 0x77, 0x0d, 0x20, 0x92, 0x36, 0x6d, 0x32,
	0x0c, 0x29, 0x86, 0x92, 0xa8, 0x46, 0xd2, 0x7e, 0x42, 0x04, 0xfe, 0xd7, 0x1c, 0xac, 0xed, 0xab,
	0x17, 0xf2, 0x7f, 0x75, 0xd4, 0x3e, 0x82, 0xa2, 0xe7, 0x2b, 0x8b, 0x10, 0x2a, 0xb4, 0x7f, 0x30,
	0x89, 0x0d, 0x43, 0xeb, 0x22, 0x75, 0xb1, 0x26, 0x29, 0xf0, 0x26, 0x54, 0xb5, 0xdf, 0x18, 0xe4,
	0x75, 0x58, 0x37, 0xfb, 0x7d, 0xd9, 0x8b, 0xa4, 0xd5, 0x71, 0x87, 0x8e, 0x0e, 0x41, 0xd4, 0xa6,
	0xb4, 0xc7, 0x43, 0x87, 0xff, 0x2d, 0x97, 0x1e, 0xa0, 0x69, 0xc0, 0xff, 0x6f, 0xdd, 0xe2, 0x37,
	0x50, 0x46, 0xd7, 0x9f, 0x8c, 0xd8, 0x55, 0x28, 0x86, 0xa3, 0x59, 0xae, 0x2a, 0xe3, 0xd8, 0xa0,
	0xb5, 0xa0, 0x27, 0xbb, 0x05, 0xeb, 0x89, 0x8d, 0x91, 0x69, 0x0f, 0x25, 0x45, 0x57, 0x6d, 0x9f,
	0xc7, 0x9b, 0x26, 0x4b, 0x17, 0x89, 0x1b, 0xcf, 0x71, 0xc1, 0x7f, 0x9f, 0x69, 0x45, 0x29, 0xb2,
	0x2b, 0xb7, 0xa2, 0xbb, 0x73, 0xad, 0xe8, 0xca, 0xc2, 0x56, 0xa4, 0x9d, 0x5f, 0xd2, 0x02, 0x9e,
	0x41, 0xf5, 0x61, 0x38, 0xcd, 0xce, 0xeb, 0xaf, 0xb7, 0x5d, 0x28, 0x61, 0xbc, 0x61, 0x72, 0xbb,
	0x9d, 0x9f, 0xd0, 0x55, 0x8a, 0x32, 0x44, 0xe6, 0x42, 0xb3, 0xf9, 0x4f, 0xa1, 0x36, 0x35, 0x8b,
	0x31, 0xfd, 0x68, 0xae, 0x21, 0x6d, 0x8d, 0x63, 0x83, 0x4d, 0xe3, 0x39, 0xe5, 0xd1, 0x1f, 0xd7,
	0xa0, 0x82, 0x88, 0xb4, 0xcd, 0x50, 0xb2, 0x77, 0xb2, 0x1e, 0x5d, 0x1a, 0xc7, 0x06, 0x2e, 0x17,
	0x39, 0xd6, 0x82, 0xd2, 0xd0, 0x35, 0x9d, 0x29, 0xf2, 0x6f, 0x8d, 0x63, 0x43, 0x13, 0x52, 0x0f,
	0x69, 0x89, 0xb5, 0x84, 0x6f, 0xf6, 0x2e, 0x14, 0xfb, 0x66, 0x4f, 0x26, 0x45, 0x74, 0x19, 0xf3,
	0x89, 0xeb, 0x49, 0x6c, 0xd4, 0xb4, 0x38, 0xae, 0xb8, 0x20, 0x22, 0xbb, 0x0d, 0x95, 0xae, 0x0a,
	0xa2, 0x03, 0xcb, 0x3c, 0x4e, 0x8a, 0xc7, 0xc0, 0x9c, 0x4c, 0x69, 0x93, 0xd8, 0xd8, 0xd4, 0x4a,
	0x53, 0x0a, 0x17, 0x33, 0x26, 0xa2, 0x2a, 0x8f, 0x7c, 0xba, 0x56, 0xe7, 0x50, 0x95, 0x47, 0x3e,
	0x17, 0xc8, 0x42, 0x54, 0x6d, 0x39, 0x92, 0x76, 0xbd, 0x4c, 0x32, 0x19, 0x54, 0x89, 0xcc, 0x85,
	0x66, 0xb3, 0x1f, 0x43, 0xa9, 0x17, 0x29, 0x47, 0xd6, 0xd7, 0x48, 0xce, 0xf8, 0x2a, 0x36, 0xae,
	0x0c, 0xbc, 0xf7, 0x7b, 0x9e, 0xe3, 0x78, 0x6e, 0xcb, 0x56, 0xdd, 0xc0, 0x0c, 0x8e, 0x5b, 0x28,
	0xd1, 0x7c, 0xaa, 0x1c, 0x29, 0xb4, 0x34, 0xaa, 0x39, 0xa4, 0x56, 0x59, 0x51, 0x8d, 0xa4, 0x59,
	0x0b, 0x0a, 0xa1, 0x3c, 0xaa, 0x57, 0xa9, 0x69, 0x5e, 0x43, 0xec, 0x43, 0x79, 0x94, 0xba, 0x1f,
	0xca, 0x23, 0x3e, 0xeb, 0x9c, 0xc8, 0x62, 0xb7, 0xa0, 0x1c, 0xc8, 0x01, 0x36, 0x71, 0xa0, 0x8d,
	0xae, 0x8c, 0x63, 0x23, 0xa1, 0x4c, 0x62, 0xe3, 0x9c, 0x56, 0xd3, 0x6b, 0x2e, 0x12, 0x06, 0xfb,
	0x25, 0x54, 0x43, 0x35, 0x70, 0xcd, 0x68, 0x18, 0xc8, 0x7a, 0x8d, 0xb0, 0xbd, 0x3e, 0x8e, 0x8d,
	0x94, 0x98, 0xde, 0xfe, 0x33, 0x12, 0x17, 0x29, 0x9b, 0xdd, 0x84, 0x2a, 0x56, 0x7b, 0x27, 0x3a,
	0xf6, 0x65, 0x7d, 0x9d, 0x9c, 0xc5, 0x42, 0x49, 0x89, 0x33, 0x27, 0x2b, 0x48, 0x7a, 0x7a, 0xec,
	0x4b, 0x76, 0x0f, 0x36, 0x7b, 0x9e, 0xe3, 0xdb, 0x32, 0x92, 0x1d, 0x4b, 0x0e, 0x02, 0x29, 0xeb,
	0xe7, 0x48, 0x13, 0x5d, 0x3e, 0xc9, 0x9a, 0xe9, 0x6f, 0x4c, 0x19, 0xf7, 0x88, 0xce, 0x7e, 0x01,
	0x6b, 0xae, 0x3c, 0xec, 0x44, 0xe6, 0xa0, 0xbe, 0xa1, 0xa7, 0x96, 0x71, 0x6c, 0x4c, 0x49, 0x93,
	0xd8, 0xd8, 0x98, 0x76, 0x1e, 0x22, 0xa4, 0x60, 0x95, 0x5d, 0x79, 0xf8, 0xd4, 0x1c, 0xb0, 0x0f,
	0xa0, 0xa6, 0x41, 0xe8, 0x50, 0xe5, 0x5e, 0xa2, 0xe0, 0x37, 0xc7, 0xb1, 0x91, 0x25, 0x0b, 0xd0,
	0x8b, 0xc7, 0x58, 0xb4, 0x1f, 0x26, 0xb1, 0x52, 0x43, 0xdd, 0x6a, 0x14, 0x92, 0xca, 0xbd, 0x38,
	0x23, 0x66, 0x4e, 0x13, 0x45, 0x4b, 0x3d, 0xf5, 0x0e, 0xd4, 0xb0, 0x8a, 0x3b, 0x43, 0x9f, 0xaa,
	0xe0, 0x32, 0xed, 0xd3, 0xc0, 0x7d, 0x32, 0xe4, 0x34, 0x43, 0x7a, 0xcd, 0x05, 0x20, 0xf7, 0x99,
	0x5e, 0xfc, 0x2b, 0xa7, 0x0f, 0x25, 0x35, 0xdc, 0x2d, 0xc8, 0x87, 0xa3, 0xe4, 0x4c, 0x96, 0xc7,
	0xb1, 0x91, 0x0f, 0x47, 0x22, 0x1f, 0xd2, 0x15, 0x69, 0xab, 0x17, 0x32, 0xb9, 0xda, 0xe9, 0x8a,
	0xc4, 0xb5, 0xa0, 0x27, 0x33, 0xa0, 0x84, 0xef, 0x69, 0xe3, 0xa9, 0xe2, 0x09, 0x25, 0x82, 0xd0,
	0x2f, 0xc6, 0xa1, 0xac, 0xfb, 0x33, 0x1d, 0xb1, 0x42, 0x1b, 0xb0, 0x7c, 0x34, 0x45, 0x24, 0x6f,
	0xf6, 0x16, 0x14, 0xfa, 0xa6, 0x9b, 0x9c, 0xa5, 0x35, 0xac, 0xc9, 0xbe, 0xe9, 0x0a, 0x7c, 0xa0,
	0xfd, 0xae, 0x6d, 0xf6, 0x5e, 0x24, 0x87, 0x88, 0xec, 0x13, 0x41, 0xe8, 0x17, 0xba, 0x37, 0x52,
	0xf2, 0x30, 0x39, 0x3c, 0xe4, 0x1e, 0xae, 0x05, 0x3d, 0xf9, 0x9f, 0xf2, 0x3a, 0x42, 0x1c, 0x5e,
	0xd8, 0x93, 0x04, 0xe7, 0xae, 0x19, 0xea, 0x4b, 0x78, 0xd9, 0xa8, 0x8f, 0x17, 0x55, 0x26, 0x0d,
	0xa8, 0x73, 0x32, 0x0d, 0x74, 0x97, 0x4d, 0x8d, 0xce, 0x46, 0x9b, 0x65, 0x46, 0x11, 0xe8, 0x8c,
	0x51, 0xd4, 0x39, 0x69, 0x94, 0x72, 0x71, 0x72, 0xc4, 0x2d, 0xbc, 0xc1, 0x88, 0x7b, 0xaa, 0x6b,
	0x15, 0x57, 0xe9, 0x5a, 0x7f, 0xc9, 0xc1, 0xfa, 0xbe, 0xd7, 0xa3, 0x31, 0xfb, 0x61, 0x24, 0x1d,
	0x2c, 0x87, 0xe4, 0x8a, 0x2e, 0xe9, 0x72, 0x50, 0x96, 0xc8, 0x2b, 0x0b, 0x73, 0xe5, 0x27, 0x8d,
	0xbe, 0xa4, 0x73, 0xe5, 0x2b, 0x4b, 0xe0, 0x03, 0x53, 0x41, 0x25, 0xaf, 0x2f, 0x5f, 0x4a, 0x05,
	0xd5, 0x3a, 0x3d, 0xd9, 0x3e, 0x94, 0x7a, 0x07, 0xca, 0xb6, 0xea, 0x45, 0xea, 0x6c, 0xd7, 0x17,
	0x77, 0xb6, 0x8c, 0x0b, 0xed, 0x8b, 0x74, 0x6c, 0x51, 0x27, 0x03, 0x92, 0x36, 0xc2, 0x3f, 0x83,
	0x73, 0x08, 0xe8, 0x73, 0x65, 0x49, 0xef, 0xb9, 0x92, 0x87, 0xab, 0x75, 0x39, 0xac, 0x89, 0x30,
	0xa9, 0xe4, 0xcc, 0x7d, 0x4c, 0x64, 0x2e, 0x34, 0xfb, 0xe6, 0x97, 0x55, 0x28, 0xa2, 0x6d, 0x76,
	0x1f, 0x4a, 0xfb, 0xde, 0x40, 0xb9, 0x6c, 0x79, 0x95, 0x6c, 0x2f, 0x67, 0xb3, 0xe7, 0x00, 0xe9,
	0x30, 0xc9, 0xf8, 0x42, 0xe1, 0xb9, 0x01, 0x75, 0xfb, 0xed, 0xd7, 0xca, 0x60, 0xfb, 0xbd, 0xa3,
	0x4b, 0xfb, 0xbe, 0xa5, 0xa2, 0xd7, 0x79, 0xb8, 0xd5, 0xd4, 0x3f, 0x15, 0x34, 0xa7, 0x3f, 0x15,
	0x34, 0xef, 0x23, 0x98, 0xec, 0xb7, 0xb0, 0x9e, 0x1d, 0xef, 0xd9, 0xdb, 0x67, 0x8c, 0x1b, 0x73,
	0xdf, 0x4b, 0xdb, 0xbb, 0x2b, 0x48, 0xa1, 0x83, 0x9f, 0xc0, 0xda, 0x1d, 0xcb, 0xc2, 0x79, 0x81,
	0x5d, 0x3d, 0x73, 0x8e, 0x41, 0x83, 0x3b, 0x4b, 0xb8, 0x68, 0xe8, 0xd7, 0x00, 0x77, 0x4d, 0xb7,
	0x27, 0xed, 0x6f, 0xc1, 0x56, 0x26, 0x64, 0xb2, 0xb6, 0x3c, 0xe4, 0xa9, 0xd5, 0xdd, 0x15, 0xa4,
	0xb4, 0xa7, 0x65, 0x3d, 0x21, 0xb1, 0xc5, 0x7e, 0xcc, 0xa6, 0xb2, 0xed, 0xc6, 0x52, 0x3e, 0xda,
	0xea, 0xc2, 0xc6, 0xfc, 0xe7, 0x2f, 0x5b, 0xec, 0xc5, 0xa9, 0x6f, 0xfd, 0xed, 0xbd, 0x95, 0xe4,
	0x70, 0x8f, 0xdf, 0x01, 0xc3, 0x20, 0xf4, 0xe7, 0xd2, 0xac, 0x0c, 0xde, 0x3b, 0x33, 0xda, 0x05,
	0xbf, 0x26, 0xad, 0x5c, 0x0e, 0x03, 0xfd, 0xe1, 0xf0, 0xc0, 0x74, 0xbf, 0xe3, 0x8d, 0x94, 0x1e,
	0xc0, 0xdb, 0xd8, 0x1f, 0xbe, 0xe3, 0xad, 0x3e, 0x07, 0x48, 0xf1, 0x5b, 0x52, 0x4b, 0xd9, 0xec,
	0xec, 0xae, 0x20, 0x85, 0xb6, 0x3f, 0xc3, 0x2f, 0xb3, 0x24, 0x8c, 0x6f, 0xd7, 0x74, 0xfb, 0xd2,
	0x17, 0xff, 0xde, 0xf9, 0xde, 0x17, 0xaf, 0x76, 0x72, 0xff, 0x7c, 0xb5, 0x93, 0xfb, 0xf2, 0xd5,
	0x4e, 0xee, 0xf3, 0x82, 0xe9, 0xab, 0x6e, 0x99, 0xae, 0x87, 0x5b, 0xff, 0x0d, 0x00, 0x00, 0xff,
	0xff, 0x42, 0xa9, 0xe4, 0x05, 0xc1, 0x14, 0x00, 0x00,
}
