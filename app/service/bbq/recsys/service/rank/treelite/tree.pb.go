// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: app/service/bbq/recsys/service/rank/treelite/tree.proto

/*
	Package treelite is a generated protocol buffer package.

	It is generated from these files:
		app/service/bbq/recsys/service/rank/treelite/tree.proto

	It has these top-level messages:
		Model
		Tree
		Node
*/
package treelite

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import binary "encoding/binary"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// missing if leaf
type Node_SplitFeatureType int32

const (
	Node_NUMERICAL   Node_SplitFeatureType = 0
	Node_CATEGORICAL Node_SplitFeatureType = 1
)

var Node_SplitFeatureType_name = map[int32]string{
	0: "NUMERICAL",
	1: "CATEGORICAL",
}
var Node_SplitFeatureType_value = map[string]int32{
	"NUMERICAL":   0,
	"CATEGORICAL": 1,
}

func (x Node_SplitFeatureType) Enum() *Node_SplitFeatureType {
	p := new(Node_SplitFeatureType)
	*p = x
	return p
}
func (x Node_SplitFeatureType) String() string {
	return proto.EnumName(Node_SplitFeatureType_name, int32(x))
}
func (x *Node_SplitFeatureType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Node_SplitFeatureType_value, data, "Node_SplitFeatureType")
	if err != nil {
		return err
	}
	*x = Node_SplitFeatureType(value)
	return nil
}
func (Node_SplitFeatureType) EnumDescriptor() ([]byte, []int) { return fileDescriptorTree, []int{2, 0} }

type Model struct {
	Trees          []*Tree `protobuf:"bytes,1,rep,name=trees" json:"trees,omitempty"`
	NumFeature     *int32  `protobuf:"varint,2,opt,name=num_feature,json=numFeature" json:"num_feature,omitempty"`
	NumOutputGroup *int32  `protobuf:"varint,3,opt,name=num_output_group,json=numOutputGroup" json:"num_output_group,omitempty"`
	// =1 for everything else
	RandomForestFlag *bool `protobuf:"varint,4,opt,name=random_forest_flag,json=randomForestFlag" json:"random_forest_flag,omitempty"`
	// false for gradient boosted trees
	ExtraParams      map[string]string `protobuf:"bytes,5,rep,name=extra_params,json=extraParams" json:"extra_params,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	XXX_unrecognized []byte            `json:"-"`
}

func (m *Model) Reset()                    { *m = Model{} }
func (m *Model) String() string            { return proto.CompactTextString(m) }
func (*Model) ProtoMessage()               {}
func (*Model) Descriptor() ([]byte, []int) { return fileDescriptorTree, []int{0} }

func (m *Model) GetTrees() []*Tree {
	if m != nil {
		return m.Trees
	}
	return nil
}

func (m *Model) GetNumFeature() int32 {
	if m != nil && m.NumFeature != nil {
		return *m.NumFeature
	}
	return 0
}

func (m *Model) GetNumOutputGroup() int32 {
	if m != nil && m.NumOutputGroup != nil {
		return *m.NumOutputGroup
	}
	return 0
}

func (m *Model) GetRandomForestFlag() bool {
	if m != nil && m.RandomForestFlag != nil {
		return *m.RandomForestFlag
	}
	return false
}

func (m *Model) GetExtraParams() map[string]string {
	if m != nil {
		return m.ExtraParams
	}
	return nil
}

type Tree struct {
	Head             *Node  `protobuf:"bytes,1,opt,name=head" json:"head,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *Tree) Reset()                    { *m = Tree{} }
func (m *Tree) String() string            { return proto.CompactTextString(m) }
func (*Tree) ProtoMessage()               {}
func (*Tree) Descriptor() ([]byte, []int) { return fileDescriptorTree, []int{1} }

func (m *Tree) GetHead() *Node {
	if m != nil {
		return m.Head
	}
	return nil
}

type Node struct {
	LeftChild   *Node `protobuf:"bytes,1,opt,name=left_child,json=leftChild" json:"left_child,omitempty"`
	RightChild  *Node `protobuf:"bytes,2,opt,name=right_child,json=rightChild" json:"right_child,omitempty"`
	DefaultLeft *bool `protobuf:"varint,3,opt,name=default_left,json=defaultLeft" json:"default_left,omitempty"`
	// true: default to left
	// false: default to right
	SplitIndex *int32                 `protobuf:"varint,4,opt,name=split_index,json=splitIndex" json:"split_index,omitempty"`
	SplitType  *Node_SplitFeatureType `protobuf:"varint,5,opt,name=split_type,json=splitType,enum=treelite.Node_SplitFeatureType" json:"split_type,omitempty"`
	// Type of feature used for the split
	// missing if leaf
	Op *string `protobuf:"bytes,6,opt,name=op" json:"op,omitempty"`
	// of form [feature value] OP [threshold].
	// The left child is taken if the
	// expression evaluates to true; the right
	// child is taken otherwise.
	// missing if leaf or categorical split
	Threshold *float64 `protobuf:"fixed64,7,opt,name=threshold" json:"threshold,omitempty"`
	// missing if leaf or categorical split
	LeftCategories []uint32 `protobuf:"varint,8,rep,name=left_categories,json=leftCategories" json:"left_categories,omitempty"`
	// List of all categories belonging to
	// the left child. All other categories
	// will belong to the right child.
	// missing if leaf or numerical split
	LeafValue *float64 `protobuf:"fixed64,9,opt,name=leaf_value,json=leafValue" json:"leaf_value,omitempty"`
	// also missing if leaf_vector field exists
	LeafVector []float64 `protobuf:"fixed64,10,rep,name=leaf_vector,json=leafVector" json:"leaf_vector,omitempty"`
	// forests with multi-class classification
	DataCount *uint64 `protobuf:"varint,11,opt,name=data_count,json=dataCount" json:"data_count,omitempty"`
	// paths include this node. May be
	// ommitted if unavailable
	SumHess *float64 `protobuf:"fixed64,12,opt,name=sum_hess,json=sumHess" json:"sum_hess,omitempty"`
	// points whose traversal paths include
	// this node. This value is generally
	// correlated positively with the data
	// count. May be omitted if unavailable
	Gain             *float64 `protobuf:"fixed64,13,opt,name=gain" json:"gain,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *Node) Reset()                    { *m = Node{} }
func (m *Node) String() string            { return proto.CompactTextString(m) }
func (*Node) ProtoMessage()               {}
func (*Node) Descriptor() ([]byte, []int) { return fileDescriptorTree, []int{2} }

func (m *Node) GetLeftChild() *Node {
	if m != nil {
		return m.LeftChild
	}
	return nil
}

func (m *Node) GetRightChild() *Node {
	if m != nil {
		return m.RightChild
	}
	return nil
}

func (m *Node) GetDefaultLeft() bool {
	if m != nil && m.DefaultLeft != nil {
		return *m.DefaultLeft
	}
	return false
}

func (m *Node) GetSplitIndex() int32 {
	if m != nil && m.SplitIndex != nil {
		return *m.SplitIndex
	}
	return 0
}

func (m *Node) GetSplitType() Node_SplitFeatureType {
	if m != nil && m.SplitType != nil {
		return *m.SplitType
	}
	return Node_NUMERICAL
}

func (m *Node) GetOp() string {
	if m != nil && m.Op != nil {
		return *m.Op
	}
	return ""
}

func (m *Node) GetThreshold() float64 {
	if m != nil && m.Threshold != nil {
		return *m.Threshold
	}
	return 0
}

func (m *Node) GetLeftCategories() []uint32 {
	if m != nil {
		return m.LeftCategories
	}
	return nil
}

func (m *Node) GetLeafValue() float64 {
	if m != nil && m.LeafValue != nil {
		return *m.LeafValue
	}
	return 0
}

func (m *Node) GetLeafVector() []float64 {
	if m != nil {
		return m.LeafVector
	}
	return nil
}

func (m *Node) GetDataCount() uint64 {
	if m != nil && m.DataCount != nil {
		return *m.DataCount
	}
	return 0
}

func (m *Node) GetSumHess() float64 {
	if m != nil && m.SumHess != nil {
		return *m.SumHess
	}
	return 0
}

func (m *Node) GetGain() float64 {
	if m != nil && m.Gain != nil {
		return *m.Gain
	}
	return 0
}

func init() {
	proto.RegisterType((*Model)(nil), "treelite.Model")
	proto.RegisterType((*Tree)(nil), "treelite.Tree")
	proto.RegisterType((*Node)(nil), "treelite.Node")
	proto.RegisterEnum("treelite.Node_SplitFeatureType", Node_SplitFeatureType_name, Node_SplitFeatureType_value)
}
func (m *Model) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Model) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Trees) > 0 {
		for _, msg := range m.Trees {
			dAtA[i] = 0xa
			i++
			i = encodeVarintTree(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.NumFeature != nil {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTree(dAtA, i, uint64(*m.NumFeature))
	}
	if m.NumOutputGroup != nil {
		dAtA[i] = 0x18
		i++
		i = encodeVarintTree(dAtA, i, uint64(*m.NumOutputGroup))
	}
	if m.RandomForestFlag != nil {
		dAtA[i] = 0x20
		i++
		if *m.RandomForestFlag {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.ExtraParams) > 0 {
		for k, _ := range m.ExtraParams {
			dAtA[i] = 0x2a
			i++
			v := m.ExtraParams[k]
			mapSize := 1 + len(k) + sovTree(uint64(len(k))) + 1 + len(v) + sovTree(uint64(len(v)))
			i = encodeVarintTree(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintTree(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			dAtA[i] = 0x12
			i++
			i = encodeVarintTree(dAtA, i, uint64(len(v)))
			i += copy(dAtA[i:], v)
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Tree) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Tree) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Head != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTree(dAtA, i, uint64(m.Head.Size()))
		n1, err := m.Head.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Node) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Node) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.LeftChild != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTree(dAtA, i, uint64(m.LeftChild.Size()))
		n2, err := m.LeftChild.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if m.RightChild != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTree(dAtA, i, uint64(m.RightChild.Size()))
		n3, err := m.RightChild.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	if m.DefaultLeft != nil {
		dAtA[i] = 0x18
		i++
		if *m.DefaultLeft {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.SplitIndex != nil {
		dAtA[i] = 0x20
		i++
		i = encodeVarintTree(dAtA, i, uint64(*m.SplitIndex))
	}
	if m.SplitType != nil {
		dAtA[i] = 0x28
		i++
		i = encodeVarintTree(dAtA, i, uint64(*m.SplitType))
	}
	if m.Op != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintTree(dAtA, i, uint64(len(*m.Op)))
		i += copy(dAtA[i:], *m.Op)
	}
	if m.Threshold != nil {
		dAtA[i] = 0x39
		i++
		binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(*m.Threshold))))
		i += 8
	}
	if len(m.LeftCategories) > 0 {
		for _, num := range m.LeftCategories {
			dAtA[i] = 0x40
			i++
			i = encodeVarintTree(dAtA, i, uint64(num))
		}
	}
	if m.LeafValue != nil {
		dAtA[i] = 0x49
		i++
		binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(*m.LeafValue))))
		i += 8
	}
	if len(m.LeafVector) > 0 {
		for _, num := range m.LeafVector {
			dAtA[i] = 0x51
			i++
			f4 := math.Float64bits(float64(num))
			binary.LittleEndian.PutUint64(dAtA[i:], uint64(f4))
			i += 8
		}
	}
	if m.DataCount != nil {
		dAtA[i] = 0x58
		i++
		i = encodeVarintTree(dAtA, i, uint64(*m.DataCount))
	}
	if m.SumHess != nil {
		dAtA[i] = 0x61
		i++
		binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(*m.SumHess))))
		i += 8
	}
	if m.Gain != nil {
		dAtA[i] = 0x69
		i++
		binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(*m.Gain))))
		i += 8
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintTree(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Model) Size() (n int) {
	var l int
	_ = l
	if len(m.Trees) > 0 {
		for _, e := range m.Trees {
			l = e.Size()
			n += 1 + l + sovTree(uint64(l))
		}
	}
	if m.NumFeature != nil {
		n += 1 + sovTree(uint64(*m.NumFeature))
	}
	if m.NumOutputGroup != nil {
		n += 1 + sovTree(uint64(*m.NumOutputGroup))
	}
	if m.RandomForestFlag != nil {
		n += 2
	}
	if len(m.ExtraParams) > 0 {
		for k, v := range m.ExtraParams {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovTree(uint64(len(k))) + 1 + len(v) + sovTree(uint64(len(v)))
			n += mapEntrySize + 1 + sovTree(uint64(mapEntrySize))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Tree) Size() (n int) {
	var l int
	_ = l
	if m.Head != nil {
		l = m.Head.Size()
		n += 1 + l + sovTree(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Node) Size() (n int) {
	var l int
	_ = l
	if m.LeftChild != nil {
		l = m.LeftChild.Size()
		n += 1 + l + sovTree(uint64(l))
	}
	if m.RightChild != nil {
		l = m.RightChild.Size()
		n += 1 + l + sovTree(uint64(l))
	}
	if m.DefaultLeft != nil {
		n += 2
	}
	if m.SplitIndex != nil {
		n += 1 + sovTree(uint64(*m.SplitIndex))
	}
	if m.SplitType != nil {
		n += 1 + sovTree(uint64(*m.SplitType))
	}
	if m.Op != nil {
		l = len(*m.Op)
		n += 1 + l + sovTree(uint64(l))
	}
	if m.Threshold != nil {
		n += 9
	}
	if len(m.LeftCategories) > 0 {
		for _, e := range m.LeftCategories {
			n += 1 + sovTree(uint64(e))
		}
	}
	if m.LeafValue != nil {
		n += 9
	}
	if len(m.LeafVector) > 0 {
		n += 9 * len(m.LeafVector)
	}
	if m.DataCount != nil {
		n += 1 + sovTree(uint64(*m.DataCount))
	}
	if m.SumHess != nil {
		n += 9
	}
	if m.Gain != nil {
		n += 9
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovTree(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozTree(x uint64) (n int) {
	return sovTree(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Model) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTree
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Model: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Model: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Trees", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTree
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTree
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Trees = append(m.Trees, &Tree{})
			if err := m.Trees[len(m.Trees)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumFeature", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTree
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.NumFeature = &v
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumOutputGroup", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTree
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.NumOutputGroup = &v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RandomForestFlag", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTree
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.RandomForestFlag = &b
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExtraParams", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTree
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTree
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ExtraParams == nil {
				m.ExtraParams = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTree
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTree
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthTree
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTree
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthTree
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipTree(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthTree
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.ExtraParams[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTree(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTree
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Tree) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTree
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Tree: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Tree: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Head", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTree
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTree
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Head == nil {
				m.Head = &Node{}
			}
			if err := m.Head.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTree(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTree
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Node) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTree
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Node: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Node: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LeftChild", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTree
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTree
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LeftChild == nil {
				m.LeftChild = &Node{}
			}
			if err := m.LeftChild.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RightChild", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTree
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTree
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RightChild == nil {
				m.RightChild = &Node{}
			}
			if err := m.RightChild.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultLeft", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTree
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.DefaultLeft = &b
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SplitIndex", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTree
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SplitIndex = &v
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SplitType", wireType)
			}
			var v Node_SplitFeatureType
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTree
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (Node_SplitFeatureType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SplitType = &v
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Op", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTree
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTree
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Op = &s
			iNdEx = postIndex
		case 7:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Threshold", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			v2 := float64(math.Float64frombits(v))
			m.Threshold = &v2
		case 8:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTree
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (uint32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.LeftCategories = append(m.LeftCategories, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTree
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTree
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTree
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (uint32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.LeftCategories = append(m.LeftCategories, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field LeftCategories", wireType)
			}
		case 9:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field LeafValue", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			v2 := float64(math.Float64frombits(v))
			m.LeafValue = &v2
		case 10:
			if wireType == 1 {
				var v uint64
				if (iNdEx + 8) > l {
					return io.ErrUnexpectedEOF
				}
				v = uint64(binary.LittleEndian.Uint64(dAtA[iNdEx:]))
				iNdEx += 8
				v2 := float64(math.Float64frombits(v))
				m.LeafVector = append(m.LeafVector, v2)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTree
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTree
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v uint64
					if (iNdEx + 8) > l {
						return io.ErrUnexpectedEOF
					}
					v = uint64(binary.LittleEndian.Uint64(dAtA[iNdEx:]))
					iNdEx += 8
					v2 := float64(math.Float64frombits(v))
					m.LeafVector = append(m.LeafVector, v2)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field LeafVector", wireType)
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataCount", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTree
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DataCount = &v
		case 12:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field SumHess", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			v2 := float64(math.Float64frombits(v))
			m.SumHess = &v2
		case 13:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gain", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			v2 := float64(math.Float64frombits(v))
			m.Gain = &v2
		default:
			iNdEx = preIndex
			skippy, err := skipTree(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTree
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTree(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTree
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTree
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTree
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthTree
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowTree
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipTree(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthTree = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTree   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("app/service/bbq/recsys/service/rank/treelite/tree.proto", fileDescriptorTree)
}

var fileDescriptorTree = []byte{
	// 585 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x91, 0xcd, 0x6e, 0xd3, 0x4a,
	0x14, 0xc7, 0xef, 0x24, 0xf6, 0x6d, 0x7c, 0x9c, 0xa6, 0xd1, 0xe8, 0x2e, 0xe6, 0x22, 0x68, 0x4d,
	0x84, 0x84, 0x85, 0x20, 0x91, 0xba, 0x01, 0xb1, 0xa8, 0x54, 0xa2, 0xb4, 0x54, 0xea, 0x07, 0x1a,
	0x4a, 0xb7, 0xd6, 0x34, 0x3e, 0x4e, 0xac, 0xda, 0x1e, 0x33, 0x33, 0xae, 0x9a, 0x35, 0x8f, 0xc3,
	0x8b, 0xb0, 0xe4, 0x11, 0x50, 0x9f, 0x04, 0xcd, 0xb8, 0x1f, 0x6a, 0x05, 0xbb, 0x33, 0xbf, 0xf3,
	0x3b, 0x63, 0xcf, 0xff, 0xc0, 0x5b, 0x51, 0xd7, 0x13, 0x8d, 0xea, 0x32, 0x9f, 0xe3, 0xe4, 0xfc,
	0xfc, 0xeb, 0x44, 0xe1, 0x5c, 0xaf, 0xf4, 0x1d, 0x52, 0xa2, 0xba, 0x98, 0x18, 0x85, 0x58, 0xe4,
	0x06, 0x5d, 0x31, 0xae, 0x95, 0x34, 0x92, 0xf6, 0x6e, 0xe1, 0xe8, 0x7b, 0x07, 0xfc, 0x23, 0x99,
	0x62, 0x41, 0x5f, 0x80, 0x6f, 0xa9, 0x66, 0x24, 0xea, 0xc6, 0xe1, 0xf6, 0x60, 0x7c, 0xeb, 0x8c,
	0x4f, 0x15, 0x22, 0x6f, 0x9b, 0x74, 0x0b, 0xc2, 0xaa, 0x29, 0x93, 0x0c, 0x85, 0x69, 0x14, 0xb2,
	0x4e, 0x44, 0x62, 0x9f, 0x43, 0xd5, 0x94, 0x7b, 0x2d, 0xa1, 0x31, 0x0c, 0xad, 0x20, 0x1b, 0x53,
	0x37, 0x26, 0x59, 0x28, 0xd9, 0xd4, 0xac, 0xeb, 0xac, 0x41, 0xd5, 0x94, 0x27, 0x0e, 0xef, 0x5b,
	0x4a, 0x5f, 0x03, 0x55, 0xa2, 0x4a, 0x65, 0x99, 0x64, 0x52, 0xa1, 0x36, 0x49, 0x56, 0x88, 0x05,
	0xf3, 0x22, 0x12, 0xf7, 0xf8, 0xb0, 0xed, 0xec, 0xb9, 0xc6, 0x5e, 0x21, 0x16, 0x74, 0x0a, 0x7d,
	0xbc, 0x32, 0x4a, 0x24, 0xb5, 0x50, 0xa2, 0xd4, 0xcc, 0x77, 0x7f, 0x19, 0xdd, 0xff, 0xa5, 0x7b,
	0xc5, 0x78, 0x66, 0x9d, 0x4f, 0x4e, 0x99, 0x55, 0x46, 0xad, 0x78, 0x88, 0xf7, 0xe4, 0xc9, 0x0e,
	0x0c, 0x1f, 0x0b, 0x74, 0x08, 0xdd, 0x0b, 0x5c, 0x31, 0x12, 0x91, 0x38, 0xe0, 0xb6, 0xa4, 0xff,
	0x81, 0x7f, 0x29, 0x8a, 0xa6, 0x7d, 0x5d, 0xc0, 0xdb, 0xc3, 0xfb, 0xce, 0x3b, 0x32, 0x7a, 0x05,
	0x9e, 0x0d, 0x83, 0x8e, 0xc0, 0x5b, 0xa2, 0x48, 0xdd, 0xd0, 0x83, 0xa8, 0x8e, 0x65, 0x8a, 0xdc,
	0xf5, 0x46, 0xdf, 0x3c, 0xf0, 0xec, 0x91, 0xbe, 0x01, 0x28, 0x30, 0x33, 0xc9, 0x7c, 0x99, 0x17,
	0x7f, 0x1b, 0x09, 0xac, 0x31, 0xb5, 0x02, 0x9d, 0x40, 0xa8, 0xf2, 0xc5, 0xf2, 0xd6, 0xef, 0xfc,
	0xd1, 0x07, 0xa7, 0xb4, 0x03, 0xcf, 0xa1, 0x9f, 0x62, 0x26, 0x9a, 0xc2, 0x24, 0xf6, 0x16, 0x97,
	0x76, 0x8f, 0x87, 0x37, 0xec, 0x10, 0x33, 0x63, 0xb7, 0xa6, 0xeb, 0x22, 0x37, 0x49, 0x5e, 0xa5,
	0x78, 0xe5, 0x32, 0xf6, 0x39, 0x38, 0x74, 0x60, 0x09, 0xdd, 0x81, 0xf6, 0x94, 0x98, 0x55, 0x8d,
	0xcc, 0x8f, 0x48, 0x3c, 0xd8, 0xde, 0x7a, 0xf8, 0xcd, 0xf1, 0x67, 0x2b, 0xdc, 0xac, 0xf9, 0x74,
	0x55, 0x23, 0x0f, 0xdc, 0x88, 0x2d, 0xe9, 0x00, 0x3a, 0xb2, 0x66, 0xff, 0xba, 0xbc, 0x3a, 0xb2,
	0xa6, 0x4f, 0x21, 0x30, 0x4b, 0x85, 0x7a, 0x29, 0x8b, 0x94, 0xad, 0x45, 0x24, 0x26, 0xfc, 0x1e,
	0xd0, 0x97, 0xb0, 0xd1, 0x26, 0x22, 0x0c, 0x2e, 0xa4, 0xca, 0x51, 0xb3, 0x5e, 0xd4, 0x8d, 0xd7,
	0xf9, 0xc0, 0xc5, 0x70, 0x47, 0xe9, 0x33, 0x1b, 0x9d, 0xc8, 0x92, 0x76, 0x1d, 0x41, 0x7b, 0x8f,
	0x25, 0x67, 0x16, 0xd8, 0x67, 0xb5, 0x6d, 0x9c, 0x1b, 0xa9, 0x18, 0x44, 0xdd, 0x98, 0x70, 0x37,
	0x71, 0xe6, 0x88, 0x9d, 0x4f, 0x85, 0x11, 0xc9, 0x5c, 0x36, 0x95, 0x61, 0x61, 0x44, 0x62, 0x8f,
	0x07, 0x96, 0x4c, 0x2d, 0xa0, 0xff, 0x43, 0x4f, 0x37, 0x65, 0xb2, 0x44, 0xad, 0x59, 0xdf, 0x5d,
	0xbe, 0xa6, 0x9b, 0xf2, 0x23, 0x6a, 0x4d, 0x29, 0x78, 0x0b, 0x91, 0x57, 0x6c, 0xdd, 0x61, 0x57,
	0x8f, 0xb6, 0x61, 0xf8, 0x38, 0x03, 0xba, 0x0e, 0xc1, 0xf1, 0x97, 0xa3, 0x19, 0x3f, 0x98, 0xee,
	0x1e, 0x0e, 0xff, 0xa1, 0x1b, 0x10, 0x4e, 0x77, 0x4f, 0x67, 0xfb, 0x27, 0x2d, 0x20, 0x1f, 0xfa,
	0x3f, 0xae, 0x37, 0xc9, 0xcf, 0xeb, 0x4d, 0xf2, 0xeb, 0x7a, 0x93, 0xfc, 0x0e, 0x00, 0x00, 0xff,
	0xff, 0x44, 0x1d, 0x46, 0xe9, 0xb1, 0x03, 0x00, 0x00,
}
