// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: app/service/bbq/recsys-recall/api/grpc/v1/api.proto

package v1

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import proto1 "go-common/app/job/bbq/recall/proto"
import _ "github.com/gogo/protobuf/gogoproto"
import empty "github.com/golang/protobuf/ptypes/empty"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import encoding_binary "encoding/binary"

import strings "strings"
import reflect "reflect"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type RecallInfo struct {
	Tag                  string   `protobuf:"bytes,1,opt,name=tag,proto3" json:"tag" form:"tag"`
	Name                 string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name" form:"name"`
	Scorer               string   `protobuf:"bytes,3,opt,name=scorer,proto3" json:"scorer" form:"scorer"`
	Filter               string   `protobuf:"bytes,4,opt,name=filter,proto3" json:"filter" form:"filter"`
	Ranker               string   `protobuf:"bytes,5,opt,name=ranker,proto3" json:"ranker" form:"ranker"`
	Priority             int32    `protobuf:"varint,6,opt,name=priority,proto3" json:"priority" form:"priority"`
	Limit                int32    `protobuf:"varint,7,opt,name=limit,proto3" json:"limit" form:"limit"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RecallInfo) Reset()      { *m = RecallInfo{} }
func (*RecallInfo) ProtoMessage() {}
func (*RecallInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_df8b3273faae6c47, []int{0}
}
func (m *RecallInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RecallInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RecallInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *RecallInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RecallInfo.Merge(dst, src)
}
func (m *RecallInfo) XXX_Size() int {
	return m.Size()
}
func (m *RecallInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_RecallInfo.DiscardUnknown(m)
}

var xxx_messageInfo_RecallInfo proto.InternalMessageInfo

type RecallRequest struct {
	MID                  int64         `protobuf:"varint,1,opt,name=mid,proto3" json:"mid" form:"mid"`
	BUVID                string        `protobuf:"bytes,2,opt,name=buvid,proto3" json:"buvid" form:"buvid"`
	Infos                []*RecallInfo `protobuf:"bytes,3,rep,name=info" json:"infos" form:"infos"`
	TotalLimit           int32         `protobuf:"varint,4,opt,name=total_limit,json=totalLimit,proto3" json:"total_limit" form:"total_limit"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *RecallRequest) Reset()      { *m = RecallRequest{} }
func (*RecallRequest) ProtoMessage() {}
func (*RecallRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_df8b3273faae6c47, []int{1}
}
func (m *RecallRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RecallRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RecallRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *RecallRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RecallRequest.Merge(dst, src)
}
func (m *RecallRequest) XXX_Size() int {
	return m.Size()
}
func (m *RecallRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RecallRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RecallRequest proto.InternalMessageInfo

type InvertedIndex struct {
	Index                string   `protobuf:"bytes,1,opt,name=index,proto3" json:"index" form:"index"`
	Name                 string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name" form:"name"`
	Score                float32  `protobuf:"fixed32,3,opt,name=score,proto3" json:"score" form:"score"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *InvertedIndex) Reset()      { *m = InvertedIndex{} }
func (*InvertedIndex) ProtoMessage() {}
func (*InvertedIndex) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_df8b3273faae6c47, []int{2}
}
func (m *InvertedIndex) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InvertedIndex) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InvertedIndex.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *InvertedIndex) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InvertedIndex.Merge(dst, src)
}
func (m *InvertedIndex) XXX_Size() int {
	return m.Size()
}
func (m *InvertedIndex) XXX_DiscardUnknown() {
	xxx_messageInfo_InvertedIndex.DiscardUnknown(m)
}

var xxx_messageInfo_InvertedIndex proto.InternalMessageInfo

type Video struct {
	SVID                 int64                `protobuf:"varint,1,opt,name=svid,proto3" json:"svid" form:"svid"`
	Score                float32              `protobuf:"fixed32,2,opt,name=score,proto3" json:"score" form:"score"`
	Name                 string               `protobuf:"bytes,3,opt,name=name,proto3" json:"name" form:"name"`
	ForwardIndex         *proto1.ForwardIndex `protobuf:"bytes,4,opt,name=forward_index,json=forwardIndex" json:"forward_index" form:"forward_index"`
	InvertedIndex        string               `protobuf:"bytes,5,opt,name=inverted_index,json=invertedIndex,proto3" json:"inverted_index" form:"inverted_index"`
	InvertedIndexes      []*InvertedIndex     `protobuf:"bytes,6,rep,name=indexes" json:"inverted_indexes" form:"inverted_indexes"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *Video) Reset()      { *m = Video{} }
func (*Video) ProtoMessage() {}
func (*Video) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_df8b3273faae6c47, []int{3}
}
func (m *Video) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Video) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Video.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Video) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Video.Merge(dst, src)
}
func (m *Video) XXX_Size() int {
	return m.Size()
}
func (m *Video) XXX_DiscardUnknown() {
	xxx_messageInfo_Video.DiscardUnknown(m)
}

var xxx_messageInfo_Video proto.InternalMessageInfo

type RecallSrc struct {
	TotalHit             int32    `protobuf:"varint,1,opt,name=total_hit,json=totalHit,proto3" json:"total_hit" form:"total_hit"`
	Filter               int32    `protobuf:"varint,2,opt,name=filter,proto3" json:"filter" form:"filter"`
	Final                int32    `protobuf:"varint,3,opt,name=final,proto3" json:"final" form:"final"`
	Tag                  string   `protobuf:"bytes,4,opt,name=tag,proto3" json:"tag" form:"tag"`
	Name                 string   `protobuf:"bytes,5,opt,name=name,proto3" json:"name" form:"name"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RecallSrc) Reset()      { *m = RecallSrc{} }
func (*RecallSrc) ProtoMessage() {}
func (*RecallSrc) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_df8b3273faae6c47, []int{4}
}
func (m *RecallSrc) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RecallSrc) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RecallSrc.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *RecallSrc) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RecallSrc.Merge(dst, src)
}
func (m *RecallSrc) XXX_Size() int {
	return m.Size()
}
func (m *RecallSrc) XXX_DiscardUnknown() {
	xxx_messageInfo_RecallSrc.DiscardUnknown(m)
}

var xxx_messageInfo_RecallSrc proto.InternalMessageInfo

type RecallResponse struct {
	Total                int32        `protobuf:"varint,1,opt,name=total,proto3" json:"total" form:"total"`
	List                 []*Video     `protobuf:"bytes,2,rep,name=list" json:"list" form:"list"`
	SrcInfo              []*RecallSrc `protobuf:"bytes,3,rep,name=src_info,json=srcInfo" json:"src_info" form:"src_info"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *RecallResponse) Reset()      { *m = RecallResponse{} }
func (*RecallResponse) ProtoMessage() {}
func (*RecallResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_df8b3273faae6c47, []int{5}
}
func (m *RecallResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RecallResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RecallResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *RecallResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RecallResponse.Merge(dst, src)
}
func (m *RecallResponse) XXX_Size() int {
	return m.Size()
}
func (m *RecallResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RecallResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RecallResponse proto.InternalMessageInfo

type VideoIndexRequest struct {
	SVIDs                []int64  `protobuf:"varint,1,rep,packed,name=svids" json:"svids" form:"svids"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VideoIndexRequest) Reset()      { *m = VideoIndexRequest{} }
func (*VideoIndexRequest) ProtoMessage() {}
func (*VideoIndexRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_df8b3273faae6c47, []int{6}
}
func (m *VideoIndexRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VideoIndexRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VideoIndexRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *VideoIndexRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VideoIndexRequest.Merge(dst, src)
}
func (m *VideoIndexRequest) XXX_Size() int {
	return m.Size()
}
func (m *VideoIndexRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_VideoIndexRequest.DiscardUnknown(m)
}

var xxx_messageInfo_VideoIndexRequest proto.InternalMessageInfo

type VideoIndexResponse struct {
	List                 []*proto1.ForwardIndex `protobuf:"bytes,1,rep,name=list" json:"list" form:"list"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *VideoIndexResponse) Reset()      { *m = VideoIndexResponse{} }
func (*VideoIndexResponse) ProtoMessage() {}
func (*VideoIndexResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_df8b3273faae6c47, []int{7}
}
func (m *VideoIndexResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VideoIndexResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VideoIndexResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *VideoIndexResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VideoIndexResponse.Merge(dst, src)
}
func (m *VideoIndexResponse) XXX_Size() int {
	return m.Size()
}
func (m *VideoIndexResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_VideoIndexResponse.DiscardUnknown(m)
}

var xxx_messageInfo_VideoIndexResponse proto.InternalMessageInfo

type NewIncomeVideoRequest struct {
	SVIDs                []int64  `protobuf:"varint,1,rep,packed,name=svids" json:"svids" form:"svids"`
	Key                  string   `protobuf:"bytes,2,opt,name=key,proto3" json:"key" form:"key"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NewIncomeVideoRequest) Reset()      { *m = NewIncomeVideoRequest{} }
func (*NewIncomeVideoRequest) ProtoMessage() {}
func (*NewIncomeVideoRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_df8b3273faae6c47, []int{8}
}
func (m *NewIncomeVideoRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NewIncomeVideoRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NewIncomeVideoRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *NewIncomeVideoRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NewIncomeVideoRequest.Merge(dst, src)
}
func (m *NewIncomeVideoRequest) XXX_Size() int {
	return m.Size()
}
func (m *NewIncomeVideoRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_NewIncomeVideoRequest.DiscardUnknown(m)
}

var xxx_messageInfo_NewIncomeVideoRequest proto.InternalMessageInfo

type VideosByIndexRequest struct {
	Key                  string   `protobuf:"bytes,1,opt,name=key,proto3" json:"key" form:"key"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VideosByIndexRequest) Reset()      { *m = VideosByIndexRequest{} }
func (*VideosByIndexRequest) ProtoMessage() {}
func (*VideosByIndexRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_df8b3273faae6c47, []int{9}
}
func (m *VideosByIndexRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VideosByIndexRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VideosByIndexRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *VideosByIndexRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VideosByIndexRequest.Merge(dst, src)
}
func (m *VideosByIndexRequest) XXX_Size() int {
	return m.Size()
}
func (m *VideosByIndexRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_VideosByIndexRequest.DiscardUnknown(m)
}

var xxx_messageInfo_VideosByIndexRequest proto.InternalMessageInfo

type VideosByIndexResponse struct {
	Key                  string   `protobuf:"bytes,1,opt,name=key,proto3" json:"key" form:"key"`
	SVIDs                []int64  `protobuf:"varint,2,rep,packed,name=svids" json:"svids" form:"svids"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VideosByIndexResponse) Reset()      { *m = VideosByIndexResponse{} }
func (*VideosByIndexResponse) ProtoMessage() {}
func (*VideosByIndexResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_df8b3273faae6c47, []int{10}
}
func (m *VideosByIndexResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VideosByIndexResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VideosByIndexResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *VideosByIndexResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VideosByIndexResponse.Merge(dst, src)
}
func (m *VideosByIndexResponse) XXX_Size() int {
	return m.Size()
}
func (m *VideosByIndexResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_VideosByIndexResponse.DiscardUnknown(m)
}

var xxx_messageInfo_VideosByIndexResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*RecallInfo)(nil), "bbq.service.recall.v1.RecallInfo")
	proto.RegisterType((*RecallRequest)(nil), "bbq.service.recall.v1.RecallRequest")
	proto.RegisterType((*InvertedIndex)(nil), "bbq.service.recall.v1.InvertedIndex")
	proto.RegisterType((*Video)(nil), "bbq.service.recall.v1.Video")
	proto.RegisterType((*RecallSrc)(nil), "bbq.service.recall.v1.RecallSrc")
	proto.RegisterType((*RecallResponse)(nil), "bbq.service.recall.v1.RecallResponse")
	proto.RegisterType((*VideoIndexRequest)(nil), "bbq.service.recall.v1.VideoIndexRequest")
	proto.RegisterType((*VideoIndexResponse)(nil), "bbq.service.recall.v1.VideoIndexResponse")
	proto.RegisterType((*NewIncomeVideoRequest)(nil), "bbq.service.recall.v1.NewIncomeVideoRequest")
	proto.RegisterType((*VideosByIndexRequest)(nil), "bbq.service.recall.v1.VideosByIndexRequest")
	proto.RegisterType((*VideosByIndexResponse)(nil), "bbq.service.recall.v1.VideosByIndexResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// RecsysRecallClient is the client API for RecsysRecall service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RecsysRecallClient interface {
	Recall(ctx context.Context, in *RecallRequest, opts ...grpc.CallOption) (*RecallResponse, error)
	VideoIndex(ctx context.Context, in *VideoIndexRequest, opts ...grpc.CallOption) (*VideoIndexResponse, error)
	NewIncomeVideo(ctx context.Context, in *NewIncomeVideoRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	VideosByIndex(ctx context.Context, in *VideosByIndexRequest, opts ...grpc.CallOption) (*VideosByIndexResponse, error)
}

type recsysRecallClient struct {
	cc *grpc.ClientConn
}

func NewRecsysRecallClient(cc *grpc.ClientConn) RecsysRecallClient {
	return &recsysRecallClient{cc}
}

func (c *recsysRecallClient) Recall(ctx context.Context, in *RecallRequest, opts ...grpc.CallOption) (*RecallResponse, error) {
	out := new(RecallResponse)
	err := c.cc.Invoke(ctx, "/bbq.service.recall.v1.RecsysRecall/Recall", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recsysRecallClient) VideoIndex(ctx context.Context, in *VideoIndexRequest, opts ...grpc.CallOption) (*VideoIndexResponse, error) {
	out := new(VideoIndexResponse)
	err := c.cc.Invoke(ctx, "/bbq.service.recall.v1.RecsysRecall/VideoIndex", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recsysRecallClient) NewIncomeVideo(ctx context.Context, in *NewIncomeVideoRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/bbq.service.recall.v1.RecsysRecall/NewIncomeVideo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recsysRecallClient) VideosByIndex(ctx context.Context, in *VideosByIndexRequest, opts ...grpc.CallOption) (*VideosByIndexResponse, error) {
	out := new(VideosByIndexResponse)
	err := c.cc.Invoke(ctx, "/bbq.service.recall.v1.RecsysRecall/VideosByIndex", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RecsysRecallServer is the server API for RecsysRecall service.
type RecsysRecallServer interface {
	Recall(context.Context, *RecallRequest) (*RecallResponse, error)
	VideoIndex(context.Context, *VideoIndexRequest) (*VideoIndexResponse, error)
	NewIncomeVideo(context.Context, *NewIncomeVideoRequest) (*empty.Empty, error)
	VideosByIndex(context.Context, *VideosByIndexRequest) (*VideosByIndexResponse, error)
}

func RegisterRecsysRecallServer(s *grpc.Server, srv RecsysRecallServer) {
	s.RegisterService(&_RecsysRecall_serviceDesc, srv)
}

func _RecsysRecall_Recall_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecallRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecsysRecallServer).Recall(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bbq.service.recall.v1.RecsysRecall/Recall",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecsysRecallServer).Recall(ctx, req.(*RecallRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RecsysRecall_VideoIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VideoIndexRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecsysRecallServer).VideoIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bbq.service.recall.v1.RecsysRecall/VideoIndex",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecsysRecallServer).VideoIndex(ctx, req.(*VideoIndexRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RecsysRecall_NewIncomeVideo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewIncomeVideoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecsysRecallServer).NewIncomeVideo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bbq.service.recall.v1.RecsysRecall/NewIncomeVideo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecsysRecallServer).NewIncomeVideo(ctx, req.(*NewIncomeVideoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RecsysRecall_VideosByIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VideosByIndexRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecsysRecallServer).VideosByIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bbq.service.recall.v1.RecsysRecall/VideosByIndex",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecsysRecallServer).VideosByIndex(ctx, req.(*VideosByIndexRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _RecsysRecall_serviceDesc = grpc.ServiceDesc{
	ServiceName: "bbq.service.recall.v1.RecsysRecall",
	HandlerType: (*RecsysRecallServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Recall",
			Handler:    _RecsysRecall_Recall_Handler,
		},
		{
			MethodName: "VideoIndex",
			Handler:    _RecsysRecall_VideoIndex_Handler,
		},
		{
			MethodName: "NewIncomeVideo",
			Handler:    _RecsysRecall_NewIncomeVideo_Handler,
		},
		{
			MethodName: "VideosByIndex",
			Handler:    _RecsysRecall_VideosByIndex_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "app/service/bbq/recsys-recall/api/grpc/v1/api.proto",
}

func (m *RecallInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RecallInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Tag) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Tag)))
		i += copy(dAtA[i:], m.Tag)
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.Scorer) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Scorer)))
		i += copy(dAtA[i:], m.Scorer)
	}
	if len(m.Filter) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Filter)))
		i += copy(dAtA[i:], m.Filter)
	}
	if len(m.Ranker) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Ranker)))
		i += copy(dAtA[i:], m.Ranker)
	}
	if m.Priority != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Priority))
	}
	if m.Limit != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Limit))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *RecallRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RecallRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.MID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.MID))
	}
	if len(m.BUVID) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.BUVID)))
		i += copy(dAtA[i:], m.BUVID)
	}
	if len(m.Infos) > 0 {
		for _, msg := range m.Infos {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintApi(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.TotalLimit != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.TotalLimit))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *InvertedIndex) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InvertedIndex) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Index) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Index)))
		i += copy(dAtA[i:], m.Index)
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if m.Score != 0 {
		dAtA[i] = 0x1d
		i++
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Score))))
		i += 4
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Video) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Video) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.SVID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.SVID))
	}
	if m.Score != 0 {
		dAtA[i] = 0x15
		i++
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Score))))
		i += 4
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if m.ForwardIndex != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.ForwardIndex.Size()))
		n1, err := m.ForwardIndex.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if len(m.InvertedIndex) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.InvertedIndex)))
		i += copy(dAtA[i:], m.InvertedIndex)
	}
	if len(m.InvertedIndexes) > 0 {
		for _, msg := range m.InvertedIndexes {
			dAtA[i] = 0x32
			i++
			i = encodeVarintApi(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *RecallSrc) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RecallSrc) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.TotalHit != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.TotalHit))
	}
	if m.Filter != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Filter))
	}
	if m.Final != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Final))
	}
	if len(m.Tag) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Tag)))
		i += copy(dAtA[i:], m.Tag)
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *RecallResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RecallResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Total != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Total))
	}
	if len(m.List) > 0 {
		for _, msg := range m.List {
			dAtA[i] = 0x12
			i++
			i = encodeVarintApi(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.SrcInfo) > 0 {
		for _, msg := range m.SrcInfo {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintApi(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *VideoIndexRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VideoIndexRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.SVIDs) > 0 {
		dAtA3 := make([]byte, len(m.SVIDs)*10)
		var j2 int
		for _, num1 := range m.SVIDs {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA3[j2] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j2++
			}
			dAtA3[j2] = uint8(num)
			j2++
		}
		dAtA[i] = 0xa
		i++
		i = encodeVarintApi(dAtA, i, uint64(j2))
		i += copy(dAtA[i:], dAtA3[:j2])
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *VideoIndexResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VideoIndexResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, msg := range m.List {
			dAtA[i] = 0xa
			i++
			i = encodeVarintApi(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *NewIncomeVideoRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NewIncomeVideoRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.SVIDs) > 0 {
		dAtA5 := make([]byte, len(m.SVIDs)*10)
		var j4 int
		for _, num1 := range m.SVIDs {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA5[j4] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j4++
			}
			dAtA5[j4] = uint8(num)
			j4++
		}
		dAtA[i] = 0xa
		i++
		i = encodeVarintApi(dAtA, i, uint64(j4))
		i += copy(dAtA[i:], dAtA5[:j4])
	}
	if len(m.Key) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Key)))
		i += copy(dAtA[i:], m.Key)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *VideosByIndexRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VideosByIndexRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Key) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Key)))
		i += copy(dAtA[i:], m.Key)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *VideosByIndexResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VideosByIndexResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Key) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Key)))
		i += copy(dAtA[i:], m.Key)
	}
	if len(m.SVIDs) > 0 {
		dAtA7 := make([]byte, len(m.SVIDs)*10)
		var j6 int
		for _, num1 := range m.SVIDs {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA7[j6] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j6++
			}
			dAtA7[j6] = uint8(num)
			j6++
		}
		dAtA[i] = 0x12
		i++
		i = encodeVarintApi(dAtA, i, uint64(j6))
		i += copy(dAtA[i:], dAtA7[:j6])
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintApi(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *RecallInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Tag)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Scorer)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Filter)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Ranker)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Priority != 0 {
		n += 1 + sovApi(uint64(m.Priority))
	}
	if m.Limit != 0 {
		n += 1 + sovApi(uint64(m.Limit))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RecallRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MID != 0 {
		n += 1 + sovApi(uint64(m.MID))
	}
	l = len(m.BUVID)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if len(m.Infos) > 0 {
		for _, e := range m.Infos {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.TotalLimit != 0 {
		n += 1 + sovApi(uint64(m.TotalLimit))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *InvertedIndex) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Index)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Score != 0 {
		n += 5
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Video) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SVID != 0 {
		n += 1 + sovApi(uint64(m.SVID))
	}
	if m.Score != 0 {
		n += 5
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.ForwardIndex != nil {
		l = m.ForwardIndex.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.InvertedIndex)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if len(m.InvertedIndexes) > 0 {
		for _, e := range m.InvertedIndexes {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RecallSrc) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TotalHit != 0 {
		n += 1 + sovApi(uint64(m.TotalHit))
	}
	if m.Filter != 0 {
		n += 1 + sovApi(uint64(m.Filter))
	}
	if m.Final != 0 {
		n += 1 + sovApi(uint64(m.Final))
	}
	l = len(m.Tag)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RecallResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Total != 0 {
		n += 1 + sovApi(uint64(m.Total))
	}
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if len(m.SrcInfo) > 0 {
		for _, e := range m.SrcInfo {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *VideoIndexRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.SVIDs) > 0 {
		l = 0
		for _, e := range m.SVIDs {
			l += sovApi(uint64(e))
		}
		n += 1 + sovApi(uint64(l)) + l
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *VideoIndexResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *NewIncomeVideoRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.SVIDs) > 0 {
		l = 0
		for _, e := range m.SVIDs {
			l += sovApi(uint64(e))
		}
		n += 1 + sovApi(uint64(l)) + l
	}
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *VideosByIndexRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *VideosByIndexResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if len(m.SVIDs) > 0 {
		l = 0
		for _, e := range m.SVIDs {
			l += sovApi(uint64(e))
		}
		n += 1 + sovApi(uint64(l)) + l
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovApi(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozApi(x uint64) (n int) {
	return sovApi(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *RecallInfo) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RecallInfo{`,
		`Tag:` + fmt.Sprintf("%v", this.Tag) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Scorer:` + fmt.Sprintf("%v", this.Scorer) + `,`,
		`Filter:` + fmt.Sprintf("%v", this.Filter) + `,`,
		`Ranker:` + fmt.Sprintf("%v", this.Ranker) + `,`,
		`Priority:` + fmt.Sprintf("%v", this.Priority) + `,`,
		`Limit:` + fmt.Sprintf("%v", this.Limit) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RecallRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RecallRequest{`,
		`MID:` + fmt.Sprintf("%v", this.MID) + `,`,
		`BUVID:` + fmt.Sprintf("%v", this.BUVID) + `,`,
		`Infos:` + strings.Replace(fmt.Sprintf("%v", this.Infos), "RecallInfo", "RecallInfo", 1) + `,`,
		`TotalLimit:` + fmt.Sprintf("%v", this.TotalLimit) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *InvertedIndex) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&InvertedIndex{`,
		`Index:` + fmt.Sprintf("%v", this.Index) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Score:` + fmt.Sprintf("%v", this.Score) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Video) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Video{`,
		`SVID:` + fmt.Sprintf("%v", this.SVID) + `,`,
		`Score:` + fmt.Sprintf("%v", this.Score) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`ForwardIndex:` + strings.Replace(fmt.Sprintf("%v", this.ForwardIndex), "ForwardIndex", "proto1.ForwardIndex", 1) + `,`,
		`InvertedIndex:` + fmt.Sprintf("%v", this.InvertedIndex) + `,`,
		`InvertedIndexes:` + strings.Replace(fmt.Sprintf("%v", this.InvertedIndexes), "InvertedIndex", "InvertedIndex", 1) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RecallSrc) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RecallSrc{`,
		`TotalHit:` + fmt.Sprintf("%v", this.TotalHit) + `,`,
		`Filter:` + fmt.Sprintf("%v", this.Filter) + `,`,
		`Final:` + fmt.Sprintf("%v", this.Final) + `,`,
		`Tag:` + fmt.Sprintf("%v", this.Tag) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RecallResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RecallResponse{`,
		`Total:` + fmt.Sprintf("%v", this.Total) + `,`,
		`List:` + strings.Replace(fmt.Sprintf("%v", this.List), "Video", "Video", 1) + `,`,
		`SrcInfo:` + strings.Replace(fmt.Sprintf("%v", this.SrcInfo), "RecallSrc", "RecallSrc", 1) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *VideoIndexRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&VideoIndexRequest{`,
		`SVIDs:` + fmt.Sprintf("%v", this.SVIDs) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *VideoIndexResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&VideoIndexResponse{`,
		`List:` + strings.Replace(fmt.Sprintf("%v", this.List), "ForwardIndex", "proto1.ForwardIndex", 1) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *NewIncomeVideoRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&NewIncomeVideoRequest{`,
		`SVIDs:` + fmt.Sprintf("%v", this.SVIDs) + `,`,
		`Key:` + fmt.Sprintf("%v", this.Key) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *VideosByIndexRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&VideosByIndexRequest{`,
		`Key:` + fmt.Sprintf("%v", this.Key) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *VideosByIndexResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&VideosByIndexResponse{`,
		`Key:` + fmt.Sprintf("%v", this.Key) + `,`,
		`SVIDs:` + fmt.Sprintf("%v", this.SVIDs) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringApi(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *RecallInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RecallInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RecallInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tag", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tag = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Scorer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Scorer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Filter", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Filter = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ranker", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ranker = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Priority", wireType)
			}
			m.Priority = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Priority |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RecallRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RecallRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RecallRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MID", wireType)
			}
			m.MID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MID |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BUVID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BUVID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Infos", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Infos = append(m.Infos, &RecallInfo{})
			if err := m.Infos[len(m.Infos)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalLimit", wireType)
			}
			m.TotalLimit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalLimit |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InvertedIndex) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InvertedIndex: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InvertedIndex: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Index = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Score", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Score = float32(math.Float32frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Video) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Video: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Video: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SVID", wireType)
			}
			m.SVID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SVID |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Score", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Score = float32(math.Float32frombits(v))
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ForwardIndex", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ForwardIndex == nil {
				m.ForwardIndex = &proto1.ForwardIndex{}
			}
			if err := m.ForwardIndex.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InvertedIndex", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InvertedIndex = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InvertedIndexes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InvertedIndexes = append(m.InvertedIndexes, &InvertedIndex{})
			if err := m.InvertedIndexes[len(m.InvertedIndexes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RecallSrc) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RecallSrc: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RecallSrc: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalHit", wireType)
			}
			m.TotalHit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalHit |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Filter", wireType)
			}
			m.Filter = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Filter |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Final", wireType)
			}
			m.Final = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Final |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tag", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tag = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RecallResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RecallResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RecallResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Total", wireType)
			}
			m.Total = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Total |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &Video{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SrcInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SrcInfo = append(m.SrcInfo, &RecallSrc{})
			if err := m.SrcInfo[len(m.SrcInfo)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VideoIndexRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VideoIndexRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VideoIndexRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.SVIDs = append(m.SVIDs, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthApi
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.SVIDs = append(m.SVIDs, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field SVIDs", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VideoIndexResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VideoIndexResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VideoIndexResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &proto1.ForwardIndex{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NewIncomeVideoRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NewIncomeVideoRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NewIncomeVideoRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.SVIDs = append(m.SVIDs, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthApi
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.SVIDs = append(m.SVIDs, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field SVIDs", wireType)
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VideosByIndexRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VideosByIndexRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VideosByIndexRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VideosByIndexResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VideosByIndexResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VideosByIndexResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.SVIDs = append(m.SVIDs, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthApi
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.SVIDs = append(m.SVIDs, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field SVIDs", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipApi(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowApi
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowApi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowApi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthApi
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowApi
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipApi(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthApi = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowApi   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("app/service/bbq/recsys-recall/api/grpc/v1/api.proto", fileDescriptor_api_df8b3273faae6c47)
}

var fileDescriptor_api_df8b3273faae6c47 = []byte{
	// 1202 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x56, 0x4f, 0x6f, 0x1b, 0x45,
	0x14, 0xef, 0xfa, 0x5f, 0xd2, 0x49, 0x9c, 0x96, 0x55, 0x03, 0x96, 0x89, 0x3c, 0x61, 0xd4, 0x4a,
	0x29, 0x4d, 0xd6, 0x4a, 0x72, 0x09, 0x08, 0x2e, 0x56, 0x09, 0x18, 0xda, 0x0a, 0x26, 0x69, 0x24,
	0x38, 0x10, 0xad, 0x77, 0xc7, 0xce, 0x24, 0xb6, 0xd7, 0xd9, 0xdd, 0xb8, 0xf1, 0x0d, 0x38, 0x20,
	0x21, 0xf1, 0x25, 0xb8, 0x72, 0xe3, 0x80, 0xc4, 0x47, 0xe8, 0x91, 0x23, 0xa7, 0x11, 0xdd, 0xa3,
	0x8f, 0xfe, 0x04, 0x68, 0xde, 0xcc, 0x66, 0xd6, 0x51, 0x12, 0x62, 0x38, 0xd9, 0xef, 0xf7, 0xfe,
	0xce, 0xbc, 0xdf, 0x7b, 0xb3, 0x68, 0xdb, 0x1d, 0x0c, 0xea, 0x11, 0x0b, 0x87, 0xdc, 0x63, 0xf5,
	0x56, 0xeb, 0xb4, 0x1e, 0x32, 0x2f, 0x1a, 0x45, 0x1b, 0x21, 0xf3, 0xdc, 0x6e, 0xb7, 0xee, 0x0e,
	0x78, 0xbd, 0x13, 0x0e, 0xbc, 0xfa, 0x70, 0x53, 0xfe, 0x77, 0x06, 0x61, 0x10, 0x07, 0xf6, 0x72,
	0xab, 0x75, 0xea, 0x68, 0x27, 0x47, 0x59, 0x3a, 0xc3, 0xcd, 0xea, 0x46, 0x87, 0xc7, 0x47, 0x67,
	0x2d, 0xc7, 0x0b, 0x7a, 0xf5, 0x4e, 0xd0, 0x09, 0xea, 0x60, 0xdd, 0x3a, 0x6b, 0x83, 0x04, 0x02,
	0xfc, 0x53, 0x51, 0xaa, 0xeb, 0x32, 0xf5, 0x71, 0xd0, 0x4a, 0xd3, 0xca, 0x7c, 0xca, 0xa8, 0x1d,
	0x84, 0xaf, 0xdc, 0xd0, 0x3f, 0xe4, 0x7d, 0x9f, 0x9d, 0x6b, 0xeb, 0x77, 0x3b, 0x41, 0xd0, 0xe9,
	0x32, 0x13, 0x93, 0xf5, 0x06, 0xf1, 0x48, 0x29, 0xc9, 0x6f, 0x79, 0x84, 0x28, 0x44, 0x68, 0xf6,
	0xdb, 0x81, 0xed, 0xa0, 0x7c, 0xec, 0x76, 0x2a, 0xd6, 0xaa, 0xb5, 0x76, 0xb7, 0xb1, 0x92, 0x08,
	0x9c, 0xdf, 0x77, 0x3b, 0x63, 0x81, 0x25, 0x3a, 0x11, 0x18, 0xb5, 0x83, 0xb0, 0xf7, 0x21, 0x89,
	0xdd, 0x0e, 0xa1, 0x12, 0xb2, 0xb7, 0x51, 0xa1, 0xef, 0xf6, 0x58, 0x25, 0x07, 0x0e, 0x38, 0x11,
	0xb8, 0xf0, 0xc2, 0xed, 0xb1, 0xb1, 0xc0, 0x80, 0x4f, 0x04, 0x5e, 0x50, 0x2e, 0x52, 0x22, 0x14,
	0x40, 0xfb, 0x63, 0x54, 0x8a, 0xbc, 0x20, 0x64, 0x61, 0x25, 0x0f, 0x6e, 0x8f, 0x12, 0x81, 0x4b,
	0x7b, 0x80, 0x8c, 0x05, 0xd6, 0xba, 0x89, 0xc0, 0x65, 0xe5, 0xaa, 0x64, 0x42, 0xb5, 0x42, 0xba,
	0xb7, 0x79, 0x37, 0x66, 0x61, 0xa5, 0x60, 0xdc, 0x77, 0x01, 0x91, 0xee, 0x4a, 0x67, 0xdc, 0x95,
	0x4c, 0xa8, 0x56, 0x48, 0xf7, 0xd0, 0xed, 0x9f, 0xb0, 0xb0, 0x52, 0x34, 0xee, 0x14, 0x10, 0xe9,
	0xae, 0x74, 0xc6, 0x5d, 0xc9, 0x84, 0x6a, 0x85, 0xfd, 0x29, 0x9a, 0x1f, 0x84, 0x3c, 0x08, 0x79,
	0x3c, 0xaa, 0x94, 0x56, 0xad, 0xb5, 0x62, 0xe3, 0x49, 0x22, 0xf0, 0xfc, 0x97, 0x1a, 0x1b, 0x0b,
	0x7c, 0xa1, 0x9f, 0x08, 0x7c, 0x4f, 0x05, 0x49, 0x11, 0x42, 0x2f, 0x94, 0xf6, 0x0e, 0x2a, 0x76,
	0x79, 0x8f, 0xc7, 0x95, 0x39, 0x88, 0x42, 0x12, 0x81, 0x8b, 0xcf, 0x24, 0x30, 0x16, 0x58, 0x69,
	0x26, 0x02, 0x2f, 0x2a, 0x7f, 0x10, 0x09, 0x55, 0x30, 0xf9, 0x35, 0x87, 0xca, 0xaa, 0x67, 0x94,
	0x9d, 0x9e, 0xb1, 0x28, 0x96, 0x6d, 0xeb, 0x71, 0x1f, 0xda, 0x96, 0x57, 0x6d, 0x7b, 0xde, 0x7c,
	0x2a, 0xdb, 0xd6, 0xe3, 0xbe, 0x69, 0x5b, 0x8f, 0xfb, 0x84, 0x4a, 0x48, 0xe6, 0x6e, 0x9d, 0x0d,
	0xb9, 0xaf, 0xfb, 0x06, 0xb9, 0x1b, 0x2f, 0x0f, 0xc0, 0x47, 0x69, 0x4c, 0x6e, 0x10, 0x09, 0x55,
	0xb0, 0xfd, 0x35, 0x2a, 0xf0, 0x7e, 0x3b, 0xa8, 0xe4, 0x57, 0xf3, 0x6b, 0x0b, 0x5b, 0xef, 0x39,
	0x57, 0xf2, 0xd9, 0x31, 0x8c, 0x52, 0xb1, 0xe5, 0xbf, 0x48, 0xc6, 0x96, 0xbe, 0x91, 0x89, 0x0d,
	0x22, 0xa1, 0x10, 0xd2, 0xde, 0x47, 0x0b, 0x71, 0x10, 0xbb, 0xdd, 0x43, 0x75, 0x2d, 0x05, 0xb8,
	0x96, 0xed, 0x44, 0x60, 0xb4, 0x2f, 0xe1, 0xf4, 0x6e, 0xb2, 0x46, 0x13, 0x81, 0x6d, 0x4d, 0x49,
	0x03, 0x12, 0x8a, 0xe2, 0x0b, 0x07, 0xf2, 0x87, 0x85, 0xca, 0xcd, 0xfe, 0x90, 0x85, 0x31, 0xf3,
	0x9b, 0x72, 0x2a, 0xe4, 0xe1, 0x61, 0x3c, 0x34, 0xcb, 0x75, 0x81, 0x3e, 0x3b, 0x57, 0x05, 0xfa,
	0xec, 0x3c, 0x5b, 0xa0, 0xcf, 0xce, 0x09, 0x55, 0xf0, 0x7f, 0x63, 0xfb, 0x0e, 0x2a, 0x02, 0x71,
	0x81, 0xec, 0x39, 0x95, 0x0e, 0xc8, 0x2e, 0xd3, 0x81, 0xc6, 0xa4, 0x03, 0x91, 0x50, 0x05, 0x93,
	0x5f, 0x0a, 0xa8, 0x78, 0xc0, 0x7d, 0x16, 0xc8, 0xc4, 0xd1, 0xf0, 0xa2, 0xc1, 0x90, 0x78, 0x4f,
	0x75, 0x0b, 0x70, 0x93, 0x38, 0x82, 0x5e, 0x01, 0x68, 0x12, 0xe7, 0x66, 0x4c, 0x7c, 0x71, 0xce,
	0xfc, 0x2c, 0xe7, 0xfc, 0xc9, 0x42, 0xe5, 0xa9, 0xf5, 0x03, 0x1d, 0x5c, 0xd8, 0x7a, 0x0c, 0x1c,
	0x39, 0x0e, 0x5a, 0x29, 0x3f, 0xb4, 0x91, 0x5a, 0x51, 0xbb, 0x4a, 0x80, 0xfb, 0x6f, 0x7c, 0x90,
	0x08, 0xbc, 0x98, 0x45, 0xc6, 0x6a, 0x0c, 0x4d, 0xcc, 0x89, 0xc0, 0x0f, 0xf4, 0x58, 0x67, 0x61,
	0x42, 0x17, 0xdb, 0x19, 0x37, 0xdb, 0x43, 0x4b, 0x5c, 0xf7, 0x5c, 0xd7, 0xa2, 0x66, 0xfd, 0xa3,
	0x44, 0xe0, 0x69, 0x36, 0x8c, 0x05, 0xbe, 0x64, 0x3a, 0x11, 0x78, 0x39, 0x6d, 0x7e, 0x16, 0x27,
	0xb4, 0xcc, 0xa7, 0x78, 0xf4, 0x83, 0x85, 0xe6, 0x40, 0xc3, 0xa2, 0x4a, 0x09, 0xc6, 0xe1, 0xe1,
	0x35, 0xe3, 0x30, 0x95, 0xb1, 0xd1, 0x48, 0x04, 0xbe, 0x37, 0x05, 0x31, 0x39, 0x1b, 0xf7, 0xa7,
	0xd3, 0x31, 0x39, 0x26, 0xef, 0x5c, 0x55, 0x08, 0x8b, 0x08, 0x4d, 0x13, 0x93, 0xdf, 0x73, 0xe8,
	0xae, 0x9a, 0xb6, 0xbd, 0xd0, 0xb3, 0x3f, 0x47, 0x77, 0xd5, 0x20, 0x1c, 0xf1, 0x18, 0xc8, 0x52,
	0x6c, 0x6c, 0xc8, 0xed, 0x04, 0x03, 0xf4, 0x19, 0x8c, 0x8f, 0x31, 0x98, 0x08, 0x7c, 0x3f, 0x3b,
	0x3c, 0x47, 0x72, 0x74, 0xe6, 0x63, 0x6d, 0x9a, 0x59, 0xb3, 0x39, 0x08, 0x34, 0xe3, 0x9a, 0xdd,
	0x41, 0xc5, 0x36, 0xef, 0xbb, 0x5d, 0x20, 0x91, 0x5e, 0x6f, 0xbb, 0x12, 0x90, 0xec, 0x03, 0x8d,
	0x61, 0x1f, 0x88, 0x84, 0x2a, 0x38, 0x7d, 0x83, 0x0a, 0xb3, 0xbe, 0x41, 0xc5, 0x19, 0xd8, 0x4a,
	0x7e, 0xcc, 0xa1, 0xa5, 0x74, 0x87, 0x46, 0x83, 0xa0, 0x1f, 0xc1, 0xa0, 0xc2, 0xe1, 0xf5, 0xc5,
	0x41, 0xc5, 0x70, 0x71, 0xb2, 0x62, 0xd0, 0x98, 0x8a, 0x41, 0x24, 0x54, 0xc1, 0xf6, 0x57, 0xa8,
	0xd0, 0xe5, 0x51, 0x5c, 0xc9, 0x01, 0x0b, 0x56, 0xae, 0x61, 0x01, 0x8c, 0xb2, 0xaa, 0xef, 0x19,
	0x8f, 0x64, 0x2f, 0xc0, 0xcb, 0xd4, 0x27, 0x25, 0x42, 0x01, 0xb4, 0x3b, 0x68, 0x3e, 0x0a, 0xbd,
	0xc3, 0xcc, 0xae, 0x5d, 0xbd, 0x71, 0xd7, 0xee, 0x85, 0x5e, 0xe3, 0xfd, 0x44, 0xe0, 0xb9, 0xbd,
	0xd0, 0x93, 0xdb, 0x56, 0xbe, 0x43, 0x69, 0x00, 0xf3, 0x0e, 0xa5, 0x08, 0xa1, 0x73, 0x91, 0xb2,
	0x23, 0xcf, 0xd1, 0x5b, 0x50, 0x18, 0x10, 0x31, 0x7d, 0x4f, 0xe4, 0xea, 0x18, 0x72, 0x3f, 0xaa,
	0x58, 0xab, 0xf9, 0xb5, 0xbc, 0x5e, 0x1d, 0x07, 0xcd, 0xa7, 0xb0, 0xc3, 0x41, 0x93, 0x59, 0x1d,
	0x52, 0x94, 0xab, 0x03, 0x7e, 0x63, 0x64, 0x67, 0xc3, 0xe9, 0xab, 0xfd, 0x56, 0x5f, 0x90, 0x05,
	0x27, 0x99, 0x61, 0x23, 0xdc, 0xee, 0xb6, 0xc8, 0xf7, 0x16, 0x5a, 0x7e, 0xc1, 0x5e, 0x35, 0xfb,
	0x5e, 0xd0, 0x63, 0x90, 0xff, 0x7f, 0x9f, 0x44, 0xd2, 0xf0, 0x84, 0x8d, 0xf4, 0xae, 0x07, 0x1a,
	0x7e, 0xc1, 0xe4, 0xf3, 0x2e, 0x51, 0x43, 0xc3, 0x13, 0x36, 0x22, 0x54, 0x42, 0x64, 0x17, 0x3d,
	0x80, 0xcc, 0x51, 0x63, 0x34, 0x75, 0x97, 0x3a, 0x8e, 0x75, 0xdb, 0x38, 0xf2, 0x2c, 0x97, 0x02,
	0xe9, 0x5b, 0x9c, 0x31, 0x92, 0x39, 0x7b, 0x6e, 0xc6, 0xb3, 0x6f, 0xfd, 0x9c, 0x47, 0x8b, 0x14,
	0x3e, 0x67, 0x15, 0xbb, 0xec, 0x97, 0xa8, 0xa4, 0xff, 0x3d, 0xbc, 0x91, 0x86, 0xfa, 0xd0, 0xd5,
	0x47, 0xff, 0x62, 0xa5, 0x4f, 0xe4, 0x22, 0x64, 0xd8, 0x62, 0xaf, 0xdd, 0x34, 0x38, 0xd9, 0x3b,
	0xad, 0x3e, 0xbe, 0x85, 0xa5, 0x4e, 0x71, 0x80, 0x96, 0xa6, 0x99, 0x61, 0xaf, 0x5f, 0xe3, 0x7c,
	0x25, 0x81, 0xaa, 0x6f, 0x3b, 0xea, 0xf3, 0xd9, 0x49, 0x3f, 0x9f, 0x9d, 0x4f, 0xe4, 0xe7, 0xb3,
	0x7d, 0x8c, 0xca, 0x53, 0x5d, 0xb2, 0x9f, 0xdc, 0x54, 0xd3, 0x25, 0x52, 0x54, 0xd7, 0x6f, 0x67,
	0xac, 0xce, 0xd0, 0x58, 0x79, 0xfd, 0xa6, 0x76, 0xe7, 0xaf, 0x37, 0xb5, 0x3b, 0xdf, 0x25, 0x35,
	0xeb, 0x75, 0x52, 0xb3, 0xfe, 0x4c, 0x6a, 0xd6, 0xdf, 0x49, 0xcd, 0xfa, 0x26, 0x37, 0xdc, 0x6c,
	0x95, 0xa0, 0xb2, 0xed, 0x7f, 0x02, 0x00, 0x00, 0xff, 0xff, 0x76, 0x6b, 0xfb, 0x0e, 0x91, 0x0c,
	0x00, 0x00,
}
