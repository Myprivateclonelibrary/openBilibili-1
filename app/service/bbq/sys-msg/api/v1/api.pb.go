// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: app/service/bbq/sys-msg/api/v1/api.proto

package v1

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"
import empty "github.com/golang/protobuf/ptypes/empty"

import go_common_library_time "go-common/library/time"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type ListSysMsgReq struct {
	Ids                  []int64  `protobuf:"varint,1,rep,packed,name=ids" json:"ids" form:"ids" validate:"required"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListSysMsgReq) Reset()         { *m = ListSysMsgReq{} }
func (m *ListSysMsgReq) String() string { return proto.CompactTextString(m) }
func (*ListSysMsgReq) ProtoMessage()    {}
func (*ListSysMsgReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_21ae7c83bcad04e3, []int{0}
}
func (m *ListSysMsgReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListSysMsgReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListSysMsgReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ListSysMsgReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListSysMsgReq.Merge(dst, src)
}
func (m *ListSysMsgReq) XXX_Size() int {
	return m.Size()
}
func (m *ListSysMsgReq) XXX_DiscardUnknown() {
	xxx_messageInfo_ListSysMsgReq.DiscardUnknown(m)
}

var xxx_messageInfo_ListSysMsgReq proto.InternalMessageInfo

type ListSysMsgReply struct {
	// 用户mid
	Mid                  int64     `protobuf:"varint,1,opt,name=mid,proto3" json:"mid"`
	List                 []*SysMsg `protobuf:"bytes,2,rep,name=list" json:"list,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *ListSysMsgReply) Reset()         { *m = ListSysMsgReply{} }
func (m *ListSysMsgReply) String() string { return proto.CompactTextString(m) }
func (*ListSysMsgReply) ProtoMessage()    {}
func (*ListSysMsgReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_21ae7c83bcad04e3, []int{1}
}
func (m *ListSysMsgReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListSysMsgReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListSysMsgReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ListSysMsgReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListSysMsgReply.Merge(dst, src)
}
func (m *ListSysMsgReply) XXX_Size() int {
	return m.Size()
}
func (m *ListSysMsgReply) XXX_DiscardUnknown() {
	xxx_messageInfo_ListSysMsgReply.DiscardUnknown(m)
}

var xxx_messageInfo_ListSysMsgReply proto.InternalMessageInfo

type SysMsg struct {
	Id                   int64                       `protobuf:"varint,1,opt,name=id,proto3" json:"id"`
	Type                 int32                       `protobuf:"varint,2,opt,name=type,proto3" json:"type" form:"type" validate:"required"`
	Sender               int64                       `protobuf:"varint,3,opt,name=sender,proto3" json:"sender" form:"sender" validate:"required"`
	Receiver             int64                       `protobuf:"varint,4,opt,name=receiver,proto3" json:"receiver" form:"receiver" validate:"required"`
	JumpUrl              string                      `protobuf:"bytes,5,opt,name=jump_url,json=jumpUrl,proto3" json:"jump_url" form:"jump_url"`
	Text                 string                      `protobuf:"bytes,6,opt,name=text,proto3" json:"text" form:"text" validate:"required"`
	State                int32                       `protobuf:"varint,7,opt,name=state,proto3" json:"state" form:"state"`
	Ctime                go_common_library_time.Time `protobuf:"varint,8,opt,name=ctime,proto3,casttype=go-common/library/time.Time" json:"ctime"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_unrecognized     []byte                      `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *SysMsg) Reset()         { *m = SysMsg{} }
func (m *SysMsg) String() string { return proto.CompactTextString(m) }
func (*SysMsg) ProtoMessage()    {}
func (*SysMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_21ae7c83bcad04e3, []int{2}
}
func (m *SysMsg) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SysMsg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SysMsg.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *SysMsg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SysMsg.Merge(dst, src)
}
func (m *SysMsg) XXX_Size() int {
	return m.Size()
}
func (m *SysMsg) XXX_DiscardUnknown() {
	xxx_messageInfo_SysMsg.DiscardUnknown(m)
}

var xxx_messageInfo_SysMsg proto.InternalMessageInfo

func init() {
	proto.RegisterType((*ListSysMsgReq)(nil), "bbq.service.sysmsg.v1.ListSysMsgReq")
	proto.RegisterType((*ListSysMsgReply)(nil), "bbq.service.sysmsg.v1.ListSysMsgReply")
	proto.RegisterType((*SysMsg)(nil), "bbq.service.sysmsg.v1.SysMsg")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// SysMsgServiceClient is the client API for SysMsgService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SysMsgServiceClient interface {
	// 获取系统通知
	ListSysMsg(ctx context.Context, in *ListSysMsgReq, opts ...grpc.CallOption) (*ListSysMsgReply, error)
	// 创建消息
	CreateSysMsg(ctx context.Context, in *SysMsg, opts ...grpc.CallOption) (*empty.Empty, error)
	// 更新，一般是状态更新
	UpdateSysMsg(ctx context.Context, in *SysMsg, opts ...grpc.CallOption) (*empty.Empty, error)
}

type sysMsgServiceClient struct {
	cc *grpc.ClientConn
}

func NewSysMsgServiceClient(cc *grpc.ClientConn) SysMsgServiceClient {
	return &sysMsgServiceClient{cc}
}

func (c *sysMsgServiceClient) ListSysMsg(ctx context.Context, in *ListSysMsgReq, opts ...grpc.CallOption) (*ListSysMsgReply, error) {
	out := new(ListSysMsgReply)
	err := c.cc.Invoke(ctx, "/bbq.service.sysmsg.v1.SysMsgService/ListSysMsg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysMsgServiceClient) CreateSysMsg(ctx context.Context, in *SysMsg, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/bbq.service.sysmsg.v1.SysMsgService/CreateSysMsg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysMsgServiceClient) UpdateSysMsg(ctx context.Context, in *SysMsg, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/bbq.service.sysmsg.v1.SysMsgService/UpdateSysMsg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SysMsgServiceServer is the server API for SysMsgService service.
type SysMsgServiceServer interface {
	// 获取系统通知
	ListSysMsg(context.Context, *ListSysMsgReq) (*ListSysMsgReply, error)
	// 创建消息
	CreateSysMsg(context.Context, *SysMsg) (*empty.Empty, error)
	// 更新，一般是状态更新
	UpdateSysMsg(context.Context, *SysMsg) (*empty.Empty, error)
}

func RegisterSysMsgServiceServer(s *grpc.Server, srv SysMsgServiceServer) {
	s.RegisterService(&_SysMsgService_serviceDesc, srv)
}

func _SysMsgService_ListSysMsg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSysMsgReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysMsgServiceServer).ListSysMsg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bbq.service.sysmsg.v1.SysMsgService/ListSysMsg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysMsgServiceServer).ListSysMsg(ctx, req.(*ListSysMsgReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SysMsgService_CreateSysMsg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SysMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysMsgServiceServer).CreateSysMsg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bbq.service.sysmsg.v1.SysMsgService/CreateSysMsg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysMsgServiceServer).CreateSysMsg(ctx, req.(*SysMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _SysMsgService_UpdateSysMsg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SysMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysMsgServiceServer).UpdateSysMsg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bbq.service.sysmsg.v1.SysMsgService/UpdateSysMsg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysMsgServiceServer).UpdateSysMsg(ctx, req.(*SysMsg))
	}
	return interceptor(ctx, in, info, handler)
}

var _SysMsgService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "bbq.service.sysmsg.v1.SysMsgService",
	HandlerType: (*SysMsgServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListSysMsg",
			Handler:    _SysMsgService_ListSysMsg_Handler,
		},
		{
			MethodName: "CreateSysMsg",
			Handler:    _SysMsgService_CreateSysMsg_Handler,
		},
		{
			MethodName: "UpdateSysMsg",
			Handler:    _SysMsgService_UpdateSysMsg_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "app/service/bbq/sys-msg/api/v1/api.proto",
}

func (m *ListSysMsgReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListSysMsgReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Ids) > 0 {
		dAtA2 := make([]byte, len(m.Ids)*10)
		var j1 int
		for _, num1 := range m.Ids {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		dAtA[i] = 0xa
		i++
		i = encodeVarintApi(dAtA, i, uint64(j1))
		i += copy(dAtA[i:], dAtA2[:j1])
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ListSysMsgReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListSysMsgReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Mid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Mid))
	}
	if len(m.List) > 0 {
		for _, msg := range m.List {
			dAtA[i] = 0x12
			i++
			i = encodeVarintApi(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *SysMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SysMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Id))
	}
	if m.Type != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Type))
	}
	if m.Sender != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Sender))
	}
	if m.Receiver != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Receiver))
	}
	if len(m.JumpUrl) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.JumpUrl)))
		i += copy(dAtA[i:], m.JumpUrl)
	}
	if len(m.Text) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Text)))
		i += copy(dAtA[i:], m.Text)
	}
	if m.State != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.State))
	}
	if m.Ctime != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Ctime))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintApi(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *ListSysMsgReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Ids) > 0 {
		l = 0
		for _, e := range m.Ids {
			l += sovApi(uint64(e))
		}
		n += 1 + sovApi(uint64(l)) + l
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ListSysMsgReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Mid != 0 {
		n += 1 + sovApi(uint64(m.Mid))
	}
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SysMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovApi(uint64(m.Id))
	}
	if m.Type != 0 {
		n += 1 + sovApi(uint64(m.Type))
	}
	if m.Sender != 0 {
		n += 1 + sovApi(uint64(m.Sender))
	}
	if m.Receiver != 0 {
		n += 1 + sovApi(uint64(m.Receiver))
	}
	l = len(m.JumpUrl)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Text)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.State != 0 {
		n += 1 + sovApi(uint64(m.State))
	}
	if m.Ctime != 0 {
		n += 1 + sovApi(uint64(m.Ctime))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovApi(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozApi(x uint64) (n int) {
	return sovApi(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ListSysMsgReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListSysMsgReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListSysMsgReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Ids = append(m.Ids, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthApi
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Ids) == 0 {
					m.Ids = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Ids = append(m.Ids, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Ids", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListSysMsgReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListSysMsgReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListSysMsgReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &SysMsg{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SysMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SysMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SysMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			m.Sender = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sender |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Receiver", wireType)
			}
			m.Receiver = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Receiver |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JumpUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.JumpUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Text", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Text = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ctime", wireType)
			}
			m.Ctime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ctime |= (go_common_library_time.Time(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipApi(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowApi
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowApi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowApi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthApi
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowApi
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipApi(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthApi = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowApi   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("app/service/bbq/sys-msg/api/v1/api.proto", fileDescriptor_api_21ae7c83bcad04e3)
}

var fileDescriptor_api_21ae7c83bcad04e3 = []byte{
	// 588 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x93, 0xc1, 0x6f, 0xd3, 0x30,
	0x14, 0xc6, 0x49, 0xb3, 0x76, 0xc3, 0x6c, 0x4c, 0xb2, 0x60, 0xca, 0x3a, 0x51, 0x97, 0x80, 0x50,
	0x10, 0x2c, 0xd1, 0xb6, 0xdb, 0x90, 0x40, 0x2a, 0x9a, 0xb8, 0x0c, 0x21, 0x65, 0xec, 0xb2, 0x0b,
	0x4a, 0x1a, 0x2f, 0x18, 0xc5, 0x73, 0x6a, 0xbb, 0x55, 0xf3, 0x1f, 0xee, 0xc8, 0x5f, 0x60, 0xc1,
	0x6e, 0xe4, 0x98, 0x1b, 0x9c, 0x90, 0xed, 0xb6, 0x1b, 0x52, 0x87, 0x90, 0xb8, 0xb4, 0x7e, 0x5f,
	0xbe, 0xf7, 0x8b, 0xde, 0xcb, 0x67, 0x10, 0x24, 0x65, 0x19, 0x09, 0xcc, 0x27, 0x64, 0x88, 0xa3,
	0x34, 0x1d, 0x45, 0xa2, 0x12, 0xbb, 0x54, 0xe4, 0x51, 0x52, 0x92, 0x68, 0xb2, 0xa7, 0xff, 0xc2,
	0x92, 0x33, 0xc9, 0xe0, 0xc3, 0x34, 0x1d, 0x85, 0x33, 0x67, 0x28, 0x2a, 0x41, 0x45, 0x1e, 0x4e,
	0xf6, 0xba, 0x3b, 0x39, 0x63, 0x79, 0x81, 0x23, 0x63, 0x4a, 0xc7, 0xe7, 0x11, 0xa6, 0xa5, 0xac,
	0x6c, 0x4f, 0x77, 0x37, 0x27, 0xf2, 0xf3, 0x38, 0x0d, 0x87, 0x8c, 0x46, 0x39, 0xcb, 0xd9, 0xb5,
	0x4b, 0x57, 0xa6, 0x30, 0x27, 0x6b, 0xf7, 0x8f, 0xc1, 0xc6, 0x31, 0x11, 0xf2, 0xa4, 0x12, 0xef,
	0x45, 0x1e, 0xe3, 0x11, 0x7c, 0x05, 0x5c, 0x92, 0x09, 0xcf, 0xe9, 0xbb, 0x81, 0x3b, 0x78, 0x5e,
	0x2b, 0xa4, 0xcb, 0x46, 0xa1, 0xde, 0x39, 0xe3, 0xf4, 0xd0, 0x27, 0x99, 0xf0, 0xfb, 0x93, 0xa4,
	0x20, 0x59, 0x22, 0xf1, 0xa1, 0xcf, 0xf1, 0x68, 0x4c, 0x38, 0xce, 0xfc, 0x58, 0xdb, 0x7c, 0x01,
	0x36, 0x6f, 0xd2, 0xca, 0xa2, 0x82, 0xdb, 0xc0, 0xa5, 0x24, 0xf3, 0x9c, 0xbe, 0x13, 0xb8, 0x83,
	0x55, 0xcd, 0xa3, 0x24, 0x8b, 0xf5, 0x0f, 0x3c, 0x02, 0x2b, 0x05, 0x11, 0xd2, 0x6b, 0xf5, 0xdd,
	0xe0, 0xde, 0xfe, 0xa3, 0x70, 0xe9, 0xb4, 0xa1, 0x85, 0x0d, 0x60, 0xad, 0xd0, 0x7d, 0x6d, 0x7f,
	0xc9, 0x28, 0x91, 0x66, 0xe2, 0xd8, 0xb4, 0xfb, 0x3f, 0x5c, 0xd0, 0xb1, 0x26, 0xb8, 0x05, 0x5a,
	0x8b, 0x77, 0x75, 0x6a, 0x85, 0x5a, 0x24, 0x8b, 0x5b, 0x24, 0x83, 0x6f, 0xc0, 0x8a, 0xac, 0x4a,
	0xec, 0xb5, 0xfa, 0x4e, 0xd0, 0x1e, 0xbc, 0xa8, 0x15, 0x32, 0x75, 0xa3, 0x10, 0xb2, 0x63, 0xe9,
	0x6a, 0xf9, 0x5c, 0xc6, 0x08, 0xdf, 0x81, 0x8e, 0xc0, 0x17, 0x19, 0xe6, 0x9e, 0x6b, 0xe0, 0x51,
	0xad, 0xd0, 0x4c, 0x69, 0x14, 0x7a, 0x6c, 0x21, 0xb6, 0x5e, 0x8e, 0x99, 0x99, 0xe1, 0x07, 0xb0,
	0xc6, 0xf1, 0x10, 0x93, 0x09, 0xe6, 0xde, 0x8a, 0x41, 0x1d, 0xd4, 0x0a, 0x2d, 0xb4, 0x46, 0xa1,
	0x27, 0x16, 0x36, 0x57, 0x96, 0xe3, 0x16, 0x0d, 0xf0, 0x10, 0xac, 0x7d, 0x19, 0xd3, 0xf2, 0xd3,
	0x98, 0x17, 0x5e, 0xbb, 0xef, 0x04, 0x77, 0x07, 0x48, 0x03, 0xe7, 0x5a, 0xa3, 0xd0, 0xa6, 0x05,
	0xce, 0x15, 0x3f, 0x5e, 0xd5, 0xc7, 0x53, 0x5e, 0x98, 0xb5, 0xe0, 0xa9, 0xf4, 0x3a, 0xa6, 0xcf,
	0xae, 0x05, 0x4f, 0xe5, 0x8d, 0xb5, 0xe0, 0xa9, 0xbc, 0x6d, 0x2d, 0x78, 0x2a, 0x61, 0x04, 0xda,
	0x42, 0x26, 0x12, 0x7b, 0xab, 0x66, 0xb1, 0xdb, 0xb5, 0x42, 0x56, 0x68, 0x14, 0x5a, 0x9f, 0x2d,
	0x45, 0x97, 0x7e, 0x6c, 0x65, 0xf8, 0x1a, 0xb4, 0x87, 0x92, 0x50, 0xec, 0xad, 0x99, 0xd9, 0x03,
	0xdd, 0x60, 0x84, 0x5f, 0x0a, 0xed, 0xe4, 0x6c, 0x77, 0xc8, 0x28, 0x65, 0x17, 0x51, 0x41, 0x52,
	0x9e, 0xf0, 0x2a, 0xd2, 0x4f, 0xc2, 0x8f, 0x84, 0xe2, 0xd8, 0xba, 0xf6, 0x7f, 0x3a, 0x60, 0xc3,
	0x7e, 0xeb, 0x13, 0x1b, 0x14, 0x78, 0x06, 0xc0, 0x75, 0xe4, 0xe0, 0xd3, 0x5b, 0x42, 0xf4, 0x47,
	0xc6, 0xbb, 0xcf, 0xfe, 0xc1, 0xa5, 0xb3, 0x7b, 0x04, 0xd6, 0xdf, 0x72, 0x9c, 0x48, 0x3c, 0xa3,
	0xff, 0x3d, 0xa2, 0xdd, 0xad, 0xd0, 0x5e, 0xcc, 0x70, 0x7e, 0xe5, 0xc2, 0x23, 0x1d, 0x53, 0x8d,
	0x39, 0x2d, 0xb3, 0xff, 0xc5, 0x0c, 0x1e, 0x5c, 0x7e, 0xef, 0xdd, 0xb9, 0xbc, 0xea, 0x39, 0x5f,
	0xaf, 0x7a, 0xce, 0xb7, 0xab, 0x9e, 0x73, 0xd6, 0x9a, 0xec, 0xa5, 0x1d, 0xe3, 0x3a, 0xf8, 0x1d,
	0x00, 0x00, 0xff, 0xff, 0x17, 0xa4, 0xbe, 0xba, 0x56, 0x04, 0x00, 0x00,
}
