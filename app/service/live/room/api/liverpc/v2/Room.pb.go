// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: v2/Room.proto

package v2

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type RoomGetByIdsReq struct {
	// 房间id, 尽可能传长号（支持短号，eg.短号1->长号40000，则返回的房间信息map key是40000）
	Ids []int64 `protobuf:"varint,1,rep,packed,name=ids" json:"ids"`
	// 是否需要附加uname、face字段，need_uinfo=1  尽量别传，传了请和@小卫报备！！
	NeedUinfo int64 `protobuf:"varint,2,opt,name=need_uinfo,json=needUinfo,proto3" json:"need_uinfo"`
	// 是否需要broadcast_type字段，need_broadcast_type=1
	NeedBroadcastType int64 `protobuf:"varint,3,opt,name=need_broadcast_type,json=needBroadcastType,proto3" json:"need_broadcast_type"`
	// 需要哪些字段, 不传默认给大多数字段
	Fields []string `protobuf:"bytes,4,rep,name=fields" json:"fields"`
	// 调用方来源，英文，格式约定：部门_服务_业务 eg.live_activity_spring
	From string `protobuf:"bytes,5,opt,name=from,proto3" json:"from"`
}

func (m *RoomGetByIdsReq) Reset()         { *m = RoomGetByIdsReq{} }
func (m *RoomGetByIdsReq) String() string { return proto.CompactTextString(m) }
func (*RoomGetByIdsReq) ProtoMessage()    {}
func (*RoomGetByIdsReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_Room_53aba32353b401ba, []int{0}
}
func (m *RoomGetByIdsReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RoomGetByIdsReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RoomGetByIdsReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *RoomGetByIdsReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RoomGetByIdsReq.Merge(dst, src)
}
func (m *RoomGetByIdsReq) XXX_Size() int {
	return m.Size()
}
func (m *RoomGetByIdsReq) XXX_DiscardUnknown() {
	xxx_messageInfo_RoomGetByIdsReq.DiscardUnknown(m)
}

var xxx_messageInfo_RoomGetByIdsReq proto.InternalMessageInfo

func (m *RoomGetByIdsReq) GetIds() []int64 {
	if m != nil {
		return m.Ids
	}
	return nil
}

func (m *RoomGetByIdsReq) GetNeedUinfo() int64 {
	if m != nil {
		return m.NeedUinfo
	}
	return 0
}

func (m *RoomGetByIdsReq) GetNeedBroadcastType() int64 {
	if m != nil {
		return m.NeedBroadcastType
	}
	return 0
}

func (m *RoomGetByIdsReq) GetFields() []string {
	if m != nil {
		return m.Fields
	}
	return nil
}

func (m *RoomGetByIdsReq) GetFrom() string {
	if m != nil {
		return m.From
	}
	return ""
}

type RoomGetByIdsResp struct {
	// code
	Code int64 `protobuf:"varint,1,opt,name=code,proto3" json:"code"`
	// msg
	Msg string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg"`
	// 房间信息map
	Data map[int64]*RoomGetByIdsResp_RoomInfo `protobuf:"bytes,3,rep,name=data" json:"data" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *RoomGetByIdsResp) Reset()         { *m = RoomGetByIdsResp{} }
func (m *RoomGetByIdsResp) String() string { return proto.CompactTextString(m) }
func (*RoomGetByIdsResp) ProtoMessage()    {}
func (*RoomGetByIdsResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_Room_53aba32353b401ba, []int{1}
}
func (m *RoomGetByIdsResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RoomGetByIdsResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RoomGetByIdsResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *RoomGetByIdsResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RoomGetByIdsResp.Merge(dst, src)
}
func (m *RoomGetByIdsResp) XXX_Size() int {
	return m.Size()
}
func (m *RoomGetByIdsResp) XXX_DiscardUnknown() {
	xxx_messageInfo_RoomGetByIdsResp.DiscardUnknown(m)
}

var xxx_messageInfo_RoomGetByIdsResp proto.InternalMessageInfo

func (m *RoomGetByIdsResp) GetCode() int64 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *RoomGetByIdsResp) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func (m *RoomGetByIdsResp) GetData() map[int64]*RoomGetByIdsResp_RoomInfo {
	if m != nil {
		return m.Data
	}
	return nil
}

type RoomGetByIdsResp_RoomInfo struct {
	// 房间id
	Roomid int64 `protobuf:"varint,1,opt,name=roomid,proto3" json:"roomid"`
	// 用户名
	Uname string `protobuf:"bytes,2,opt,name=uname,proto3" json:"uname"`
	// 用户头像
	Face string `protobuf:"bytes,3,opt,name=face,proto3" json:"face"`
	// 加v认证信息
	Verify string `protobuf:"bytes,4,opt,name=verify,proto3" json:"verify"`
	// 关键帧 注：need_uinfo=1时，该字段优先表示封面图
	Cover string `protobuf:"bytes,5,opt,name=cover,proto3" json:"cover"`
	// 用户id
	Uid int64 `protobuf:"varint,6,opt,name=uid,proto3" json:"uid"`
	// 开播时间
	LiveTime string `protobuf:"bytes,7,opt,name=live_time,json=liveTime,proto3" json:"live_time"`
	// 轮播投递状态 1开启 0关闭
	RoundStatus int64 `protobuf:"varint,8,opt,name=round_status,json=roundStatus,proto3" json:"round_status"`
	// 轮播开启状态 1开启 0关闭
	OnFlag int64 `protobuf:"varint,9,opt,name=on_flag,json=onFlag,proto3" json:"on_flag"`
	// 直播间标题
	Title string `protobuf:"bytes,10,opt,name=title,proto3" json:"title"`
	// 直播间标签
	Tags string `protobuf:"bytes,11,opt,name=tags,proto3" json:"tags"`
	// 锁定到时间
	LockStatus string `protobuf:"bytes,12,opt,name=lock_status,json=lockStatus,proto3" json:"lock_status"`
	// 隐藏到时间
	HiddenStatus string `protobuf:"bytes,13,opt,name=hidden_status,json=hiddenStatus,proto3" json:"hidden_status"`
	// 封面
	UserCover string `protobuf:"bytes,14,opt,name=user_cover,json=userCover,proto3" json:"user_cover"`
	// 短号
	ShortId int64 `protobuf:"varint,15,opt,name=short_id,json=shortId,proto3" json:"short_id"`
	// 在线人数
	Online int64 `protobuf:"varint,16,opt,name=online,proto3" json:"online"`
	// 分区id
	Area int64 `protobuf:"varint,17,opt,name=area,proto3" json:"area"`
	// 分区v2 id
	AreaV2Id int64 `protobuf:"varint,18,opt,name=area_v2_id,json=areaV2Id,proto3" json:"area_v2_id"`
	// 分区v2 父分区id
	AreaV2ParentId int64 `protobuf:"varint,19,opt,name=area_v2_parent_id,json=areaV2ParentId,proto3" json:"area_v2_parent_id"`
	// 分区是否开放pk 0关闭 1开放
	AreaPkStatus int64 `protobuf:"varint,20,opt,name=area_pk_status,json=areaPkStatus,proto3" json:"area_pk_status"`
	// 分区v2名字
	AreaV2Name string `protobuf:"bytes,21,opt,name=area_v2_name,json=areaV2Name,proto3" json:"area_v2_name"`
	// 分区v2父分区名字
	AreaV2ParentName string `protobuf:"bytes,22,opt,name=area_v2_parent_name,json=areaV2ParentName,proto3" json:"area_v2_parent_name"`
	// 关注人数
	Attentions int64 `protobuf:"varint,23,opt,name=attentions,proto3" json:"attentions"`
	// 房间背景图
	Background string `protobuf:"bytes,24,opt,name=background,proto3" json:"background"`
	// 是否静默 0否,1注册会员,2全部
	RoomSilent int64 `protobuf:"varint,25,opt,name=room_silent,json=roomSilent,proto3" json:"room_silent"`
	// 是否使用房主的屏蔽用户，作为房间全局屏蔽用户，0：不使用，1：使用
	RoomShield int64 `protobuf:"varint,26,opt,name=room_shield,json=roomShield,proto3" json:"room_shield"`
	// 试用直播间到期时间
	TryTime string `protobuf:"bytes,27,opt,name=try_time,json=tryTime,proto3" json:"try_time"`
	// 直播间状态 0关播 1直播中 2轮播中
	LiveStatus int64 `protobuf:"varint,28,opt,name=live_status,json=liveStatus,proto3" json:"live_status"`
	// 横竖屏，只有传了need_broadcast_type才会返回  0横屏  1竖屏 -1异常情况
	BroadcastType int64 `protobuf:"varint,29,opt,name=broadcast_type,json=broadcastType,proto3" json:"broadcast_type"`
	//
	Virtual int64 `protobuf:"varint,30,opt,name=virtual,proto3" json:"virtual"`
	//
	Ctime string `protobuf:"bytes,31,opt,name=ctime,proto3" json:"ctime"`
	//
	Mtime string `protobuf:"bytes,32,opt,name=mtime,proto3" json:"mtime"`
}

func (m *RoomGetByIdsResp_RoomInfo) Reset()         { *m = RoomGetByIdsResp_RoomInfo{} }
func (m *RoomGetByIdsResp_RoomInfo) String() string { return proto.CompactTextString(m) }
func (*RoomGetByIdsResp_RoomInfo) ProtoMessage()    {}
func (*RoomGetByIdsResp_RoomInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_Room_53aba32353b401ba, []int{1, 1}
}
func (m *RoomGetByIdsResp_RoomInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RoomGetByIdsResp_RoomInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RoomGetByIdsResp_RoomInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *RoomGetByIdsResp_RoomInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RoomGetByIdsResp_RoomInfo.Merge(dst, src)
}
func (m *RoomGetByIdsResp_RoomInfo) XXX_Size() int {
	return m.Size()
}
func (m *RoomGetByIdsResp_RoomInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_RoomGetByIdsResp_RoomInfo.DiscardUnknown(m)
}

var xxx_messageInfo_RoomGetByIdsResp_RoomInfo proto.InternalMessageInfo

func (m *RoomGetByIdsResp_RoomInfo) GetRoomid() int64 {
	if m != nil {
		return m.Roomid
	}
	return 0
}

func (m *RoomGetByIdsResp_RoomInfo) GetUname() string {
	if m != nil {
		return m.Uname
	}
	return ""
}

func (m *RoomGetByIdsResp_RoomInfo) GetFace() string {
	if m != nil {
		return m.Face
	}
	return ""
}

func (m *RoomGetByIdsResp_RoomInfo) GetVerify() string {
	if m != nil {
		return m.Verify
	}
	return ""
}

func (m *RoomGetByIdsResp_RoomInfo) GetCover() string {
	if m != nil {
		return m.Cover
	}
	return ""
}

func (m *RoomGetByIdsResp_RoomInfo) GetUid() int64 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *RoomGetByIdsResp_RoomInfo) GetLiveTime() string {
	if m != nil {
		return m.LiveTime
	}
	return ""
}

func (m *RoomGetByIdsResp_RoomInfo) GetRoundStatus() int64 {
	if m != nil {
		return m.RoundStatus
	}
	return 0
}

func (m *RoomGetByIdsResp_RoomInfo) GetOnFlag() int64 {
	if m != nil {
		return m.OnFlag
	}
	return 0
}

func (m *RoomGetByIdsResp_RoomInfo) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *RoomGetByIdsResp_RoomInfo) GetTags() string {
	if m != nil {
		return m.Tags
	}
	return ""
}

func (m *RoomGetByIdsResp_RoomInfo) GetLockStatus() string {
	if m != nil {
		return m.LockStatus
	}
	return ""
}

func (m *RoomGetByIdsResp_RoomInfo) GetHiddenStatus() string {
	if m != nil {
		return m.HiddenStatus
	}
	return ""
}

func (m *RoomGetByIdsResp_RoomInfo) GetUserCover() string {
	if m != nil {
		return m.UserCover
	}
	return ""
}

func (m *RoomGetByIdsResp_RoomInfo) GetShortId() int64 {
	if m != nil {
		return m.ShortId
	}
	return 0
}

func (m *RoomGetByIdsResp_RoomInfo) GetOnline() int64 {
	if m != nil {
		return m.Online
	}
	return 0
}

func (m *RoomGetByIdsResp_RoomInfo) GetArea() int64 {
	if m != nil {
		return m.Area
	}
	return 0
}

func (m *RoomGetByIdsResp_RoomInfo) GetAreaV2Id() int64 {
	if m != nil {
		return m.AreaV2Id
	}
	return 0
}

func (m *RoomGetByIdsResp_RoomInfo) GetAreaV2ParentId() int64 {
	if m != nil {
		return m.AreaV2ParentId
	}
	return 0
}

func (m *RoomGetByIdsResp_RoomInfo) GetAreaPkStatus() int64 {
	if m != nil {
		return m.AreaPkStatus
	}
	return 0
}

func (m *RoomGetByIdsResp_RoomInfo) GetAreaV2Name() string {
	if m != nil {
		return m.AreaV2Name
	}
	return ""
}

func (m *RoomGetByIdsResp_RoomInfo) GetAreaV2ParentName() string {
	if m != nil {
		return m.AreaV2ParentName
	}
	return ""
}

func (m *RoomGetByIdsResp_RoomInfo) GetAttentions() int64 {
	if m != nil {
		return m.Attentions
	}
	return 0
}

func (m *RoomGetByIdsResp_RoomInfo) GetBackground() string {
	if m != nil {
		return m.Background
	}
	return ""
}

func (m *RoomGetByIdsResp_RoomInfo) GetRoomSilent() int64 {
	if m != nil {
		return m.RoomSilent
	}
	return 0
}

func (m *RoomGetByIdsResp_RoomInfo) GetRoomShield() int64 {
	if m != nil {
		return m.RoomShield
	}
	return 0
}

func (m *RoomGetByIdsResp_RoomInfo) GetTryTime() string {
	if m != nil {
		return m.TryTime
	}
	return ""
}

func (m *RoomGetByIdsResp_RoomInfo) GetLiveStatus() int64 {
	if m != nil {
		return m.LiveStatus
	}
	return 0
}

func (m *RoomGetByIdsResp_RoomInfo) GetBroadcastType() int64 {
	if m != nil {
		return m.BroadcastType
	}
	return 0
}

func (m *RoomGetByIdsResp_RoomInfo) GetVirtual() int64 {
	if m != nil {
		return m.Virtual
	}
	return 0
}

func (m *RoomGetByIdsResp_RoomInfo) GetCtime() string {
	if m != nil {
		return m.Ctime
	}
	return ""
}

func (m *RoomGetByIdsResp_RoomInfo) GetMtime() string {
	if m != nil {
		return m.Mtime
	}
	return ""
}

type RoomRoomIdByUidReq struct {
	// 用户uid
	Uid int64 `protobuf:"varint,1,opt,name=uid,proto3" json:"uid"`
}

func (m *RoomRoomIdByUidReq) Reset()         { *m = RoomRoomIdByUidReq{} }
func (m *RoomRoomIdByUidReq) String() string { return proto.CompactTextString(m) }
func (*RoomRoomIdByUidReq) ProtoMessage()    {}
func (*RoomRoomIdByUidReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_Room_53aba32353b401ba, []int{2}
}
func (m *RoomRoomIdByUidReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RoomRoomIdByUidReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RoomRoomIdByUidReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *RoomRoomIdByUidReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RoomRoomIdByUidReq.Merge(dst, src)
}
func (m *RoomRoomIdByUidReq) XXX_Size() int {
	return m.Size()
}
func (m *RoomRoomIdByUidReq) XXX_DiscardUnknown() {
	xxx_messageInfo_RoomRoomIdByUidReq.DiscardUnknown(m)
}

var xxx_messageInfo_RoomRoomIdByUidReq proto.InternalMessageInfo

func (m *RoomRoomIdByUidReq) GetUid() int64 {
	if m != nil {
		return m.Uid
	}
	return 0
}

type RoomRoomIdByUidResp struct {
	// code
	Code int64 `protobuf:"varint,1,opt,name=code,proto3" json:"code"`
	// msg
	Msg string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg"`
	//
	Data *RoomRoomIdByUidResp_Data `protobuf:"bytes,3,opt,name=data" json:"data"`
}

func (m *RoomRoomIdByUidResp) Reset()         { *m = RoomRoomIdByUidResp{} }
func (m *RoomRoomIdByUidResp) String() string { return proto.CompactTextString(m) }
func (*RoomRoomIdByUidResp) ProtoMessage()    {}
func (*RoomRoomIdByUidResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_Room_53aba32353b401ba, []int{3}
}
func (m *RoomRoomIdByUidResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RoomRoomIdByUidResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RoomRoomIdByUidResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *RoomRoomIdByUidResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RoomRoomIdByUidResp.Merge(dst, src)
}
func (m *RoomRoomIdByUidResp) XXX_Size() int {
	return m.Size()
}
func (m *RoomRoomIdByUidResp) XXX_DiscardUnknown() {
	xxx_messageInfo_RoomRoomIdByUidResp.DiscardUnknown(m)
}

var xxx_messageInfo_RoomRoomIdByUidResp proto.InternalMessageInfo

func (m *RoomRoomIdByUidResp) GetCode() int64 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *RoomRoomIdByUidResp) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func (m *RoomRoomIdByUidResp) GetData() *RoomRoomIdByUidResp_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

type RoomRoomIdByUidResp_Data struct {
	// room_id
	RoomId int64 `protobuf:"varint,1,opt,name=room_id,json=roomId,proto3" json:"room_id"`
}

func (m *RoomRoomIdByUidResp_Data) Reset()         { *m = RoomRoomIdByUidResp_Data{} }
func (m *RoomRoomIdByUidResp_Data) String() string { return proto.CompactTextString(m) }
func (*RoomRoomIdByUidResp_Data) ProtoMessage()    {}
func (*RoomRoomIdByUidResp_Data) Descriptor() ([]byte, []int) {
	return fileDescriptor_Room_53aba32353b401ba, []int{3, 0}
}
func (m *RoomRoomIdByUidResp_Data) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RoomRoomIdByUidResp_Data) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RoomRoomIdByUidResp_Data.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *RoomRoomIdByUidResp_Data) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RoomRoomIdByUidResp_Data.Merge(dst, src)
}
func (m *RoomRoomIdByUidResp_Data) XXX_Size() int {
	return m.Size()
}
func (m *RoomRoomIdByUidResp_Data) XXX_DiscardUnknown() {
	xxx_messageInfo_RoomRoomIdByUidResp_Data.DiscardUnknown(m)
}

var xxx_messageInfo_RoomRoomIdByUidResp_Data proto.InternalMessageInfo

func (m *RoomRoomIdByUidResp_Data) GetRoomId() int64 {
	if m != nil {
		return m.RoomId
	}
	return 0
}

type RoomRoomIdByUidMultiReq struct {
	// 用户uids,单次请求数量限制：400
	Uids []int64 `protobuf:"varint,1,rep,packed,name=uids" json:"uids"`
}

func (m *RoomRoomIdByUidMultiReq) Reset()         { *m = RoomRoomIdByUidMultiReq{} }
func (m *RoomRoomIdByUidMultiReq) String() string { return proto.CompactTextString(m) }
func (*RoomRoomIdByUidMultiReq) ProtoMessage()    {}
func (*RoomRoomIdByUidMultiReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_Room_53aba32353b401ba, []int{4}
}
func (m *RoomRoomIdByUidMultiReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RoomRoomIdByUidMultiReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RoomRoomIdByUidMultiReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *RoomRoomIdByUidMultiReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RoomRoomIdByUidMultiReq.Merge(dst, src)
}
func (m *RoomRoomIdByUidMultiReq) XXX_Size() int {
	return m.Size()
}
func (m *RoomRoomIdByUidMultiReq) XXX_DiscardUnknown() {
	xxx_messageInfo_RoomRoomIdByUidMultiReq.DiscardUnknown(m)
}

var xxx_messageInfo_RoomRoomIdByUidMultiReq proto.InternalMessageInfo

func (m *RoomRoomIdByUidMultiReq) GetUids() []int64 {
	if m != nil {
		return m.Uids
	}
	return nil
}

type RoomRoomIdByUidMultiResp struct {
	// code
	Code int64 `protobuf:"varint,1,opt,name=code,proto3" json:"code"`
	// msg
	Msg string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg"`
	// 房间id map ['uid1' => roomid1, 'uid2' => roomid2]
	Data map[string]string `protobuf:"bytes,3,rep,name=data" json:"data" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *RoomRoomIdByUidMultiResp) Reset()         { *m = RoomRoomIdByUidMultiResp{} }
func (m *RoomRoomIdByUidMultiResp) String() string { return proto.CompactTextString(m) }
func (*RoomRoomIdByUidMultiResp) ProtoMessage()    {}
func (*RoomRoomIdByUidMultiResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_Room_53aba32353b401ba, []int{5}
}
func (m *RoomRoomIdByUidMultiResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RoomRoomIdByUidMultiResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RoomRoomIdByUidMultiResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *RoomRoomIdByUidMultiResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RoomRoomIdByUidMultiResp.Merge(dst, src)
}
func (m *RoomRoomIdByUidMultiResp) XXX_Size() int {
	return m.Size()
}
func (m *RoomRoomIdByUidMultiResp) XXX_DiscardUnknown() {
	xxx_messageInfo_RoomRoomIdByUidMultiResp.DiscardUnknown(m)
}

var xxx_messageInfo_RoomRoomIdByUidMultiResp proto.InternalMessageInfo

func (m *RoomRoomIdByUidMultiResp) GetCode() int64 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *RoomRoomIdByUidMultiResp) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func (m *RoomRoomIdByUidMultiResp) GetData() map[string]string {
	if m != nil {
		return m.Data
	}
	return nil
}

type RoomGetOnlineRoomIdsReq struct {
	// 父分区id，不传给所有
	ParentAreaId int64 `protobuf:"varint,1,opt,name=parent_area_id,json=parentAreaId,proto3" json:"parent_area_id"`
	// 二级分区id，不传给所有
	AreaId int64 `protobuf:"varint,2,opt,name=area_id,json=areaId,proto3" json:"area_id"`
	// 调用方来源 eg. live.lottery.xxx
	From string `protobuf:"bytes,3,opt,name=from,proto3" json:"from"`
}

func (m *RoomGetOnlineRoomIdsReq) Reset()         { *m = RoomGetOnlineRoomIdsReq{} }
func (m *RoomGetOnlineRoomIdsReq) String() string { return proto.CompactTextString(m) }
func (*RoomGetOnlineRoomIdsReq) ProtoMessage()    {}
func (*RoomGetOnlineRoomIdsReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_Room_53aba32353b401ba, []int{6}
}
func (m *RoomGetOnlineRoomIdsReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RoomGetOnlineRoomIdsReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RoomGetOnlineRoomIdsReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *RoomGetOnlineRoomIdsReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RoomGetOnlineRoomIdsReq.Merge(dst, src)
}
func (m *RoomGetOnlineRoomIdsReq) XXX_Size() int {
	return m.Size()
}
func (m *RoomGetOnlineRoomIdsReq) XXX_DiscardUnknown() {
	xxx_messageInfo_RoomGetOnlineRoomIdsReq.DiscardUnknown(m)
}

var xxx_messageInfo_RoomGetOnlineRoomIdsReq proto.InternalMessageInfo

func (m *RoomGetOnlineRoomIdsReq) GetParentAreaId() int64 {
	if m != nil {
		return m.ParentAreaId
	}
	return 0
}

func (m *RoomGetOnlineRoomIdsReq) GetAreaId() int64 {
	if m != nil {
		return m.AreaId
	}
	return 0
}

func (m *RoomGetOnlineRoomIdsReq) GetFrom() string {
	if m != nil {
		return m.From
	}
	return ""
}

type RoomGetOnlineRoomIdsResp struct {
	//
	Msg string `protobuf:"bytes,1,opt,name=msg,proto3" json:"msg"`
	//
	Code int64 `protobuf:"varint,2,opt,name=code,proto3" json:"code"`
	//
	Data *RoomGetOnlineRoomIdsResp_Data `protobuf:"bytes,3,opt,name=data" json:"data"`
}

func (m *RoomGetOnlineRoomIdsResp) Reset()         { *m = RoomGetOnlineRoomIdsResp{} }
func (m *RoomGetOnlineRoomIdsResp) String() string { return proto.CompactTextString(m) }
func (*RoomGetOnlineRoomIdsResp) ProtoMessage()    {}
func (*RoomGetOnlineRoomIdsResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_Room_53aba32353b401ba, []int{7}
}
func (m *RoomGetOnlineRoomIdsResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RoomGetOnlineRoomIdsResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RoomGetOnlineRoomIdsResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *RoomGetOnlineRoomIdsResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RoomGetOnlineRoomIdsResp.Merge(dst, src)
}
func (m *RoomGetOnlineRoomIdsResp) XXX_Size() int {
	return m.Size()
}
func (m *RoomGetOnlineRoomIdsResp) XXX_DiscardUnknown() {
	xxx_messageInfo_RoomGetOnlineRoomIdsResp.DiscardUnknown(m)
}

var xxx_messageInfo_RoomGetOnlineRoomIdsResp proto.InternalMessageInfo

func (m *RoomGetOnlineRoomIdsResp) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func (m *RoomGetOnlineRoomIdsResp) GetCode() int64 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *RoomGetOnlineRoomIdsResp) GetData() *RoomGetOnlineRoomIdsResp_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

type RoomGetOnlineRoomIdsResp_Data struct {
	// roomid 逗号分隔的字符串
	RoomIds string `protobuf:"bytes,1,opt,name=room_ids,json=roomIds,proto3" json:"room_ids"`
}

func (m *RoomGetOnlineRoomIdsResp_Data) Reset()         { *m = RoomGetOnlineRoomIdsResp_Data{} }
func (m *RoomGetOnlineRoomIdsResp_Data) String() string { return proto.CompactTextString(m) }
func (*RoomGetOnlineRoomIdsResp_Data) ProtoMessage()    {}
func (*RoomGetOnlineRoomIdsResp_Data) Descriptor() ([]byte, []int) {
	return fileDescriptor_Room_53aba32353b401ba, []int{7, 0}
}
func (m *RoomGetOnlineRoomIdsResp_Data) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RoomGetOnlineRoomIdsResp_Data) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RoomGetOnlineRoomIdsResp_Data.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *RoomGetOnlineRoomIdsResp_Data) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RoomGetOnlineRoomIdsResp_Data.Merge(dst, src)
}
func (m *RoomGetOnlineRoomIdsResp_Data) XXX_Size() int {
	return m.Size()
}
func (m *RoomGetOnlineRoomIdsResp_Data) XXX_DiscardUnknown() {
	xxx_messageInfo_RoomGetOnlineRoomIdsResp_Data.DiscardUnknown(m)
}

var xxx_messageInfo_RoomGetOnlineRoomIdsResp_Data proto.InternalMessageInfo

func (m *RoomGetOnlineRoomIdsResp_Data) GetRoomIds() string {
	if m != nil {
		return m.RoomIds
	}
	return ""
}

type RoomMobileTabReq struct {
	// 房间号
	Roomid int64 `protobuf:"varint,1,opt,name=roomid,proto3" json:"roomid"`
}

func (m *RoomMobileTabReq) Reset()         { *m = RoomMobileTabReq{} }
func (m *RoomMobileTabReq) String() string { return proto.CompactTextString(m) }
func (*RoomMobileTabReq) ProtoMessage()    {}
func (*RoomMobileTabReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_Room_53aba32353b401ba, []int{8}
}
func (m *RoomMobileTabReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RoomMobileTabReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RoomMobileTabReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *RoomMobileTabReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RoomMobileTabReq.Merge(dst, src)
}
func (m *RoomMobileTabReq) XXX_Size() int {
	return m.Size()
}
func (m *RoomMobileTabReq) XXX_DiscardUnknown() {
	xxx_messageInfo_RoomMobileTabReq.DiscardUnknown(m)
}

var xxx_messageInfo_RoomMobileTabReq proto.InternalMessageInfo

func (m *RoomMobileTabReq) GetRoomid() int64 {
	if m != nil {
		return m.Roomid
	}
	return 0
}

type RoomMobileTabResp struct {
	// code
	Code int64 `protobuf:"varint,1,opt,name=code,proto3" json:"code"`
	// msg
	Msg string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg"`
	//
	Data []*RoomMobileTabResp_Data `protobuf:"bytes,3,rep,name=data" json:"data"`
}

func (m *RoomMobileTabResp) Reset()         { *m = RoomMobileTabResp{} }
func (m *RoomMobileTabResp) String() string { return proto.CompactTextString(m) }
func (*RoomMobileTabResp) ProtoMessage()    {}
func (*RoomMobileTabResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_Room_53aba32353b401ba, []int{9}
}
func (m *RoomMobileTabResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RoomMobileTabResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RoomMobileTabResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *RoomMobileTabResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RoomMobileTabResp.Merge(dst, src)
}
func (m *RoomMobileTabResp) XXX_Size() int {
	return m.Size()
}
func (m *RoomMobileTabResp) XXX_DiscardUnknown() {
	xxx_messageInfo_RoomMobileTabResp.DiscardUnknown(m)
}

var xxx_messageInfo_RoomMobileTabResp proto.InternalMessageInfo

func (m *RoomMobileTabResp) GetCode() int64 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *RoomMobileTabResp) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func (m *RoomMobileTabResp) GetData() []*RoomMobileTabResp_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

type RoomMobileTabResp_Grand struct {
	// tab类型
	Type string `protobuf:"bytes,1,opt,name=type,proto3" json:"type"`
	// 中文标题
	Desc string `protobuf:"bytes,2,opt,name=desc,proto3" json:"desc"`
	// h5链接
	Url string `protobuf:"bytes,3,opt,name=url,proto3" json:"url"`
	// 1展示0不展示
	Status int64 `protobuf:"varint,4,opt,name=status,proto3" json:"status"`
	// 排序，值越小越靠前
	Order int64 `protobuf:"varint,5,opt,name=order,proto3" json:"order"`
	// 文案
	Documents string `protobuf:"bytes,6,opt,name=documents,proto3" json:"documents"`
	// 名称
	RankName string `protobuf:"bytes,7,opt,name=rank_name,json=rankName,proto3" json:"rank_name"`
}

func (m *RoomMobileTabResp_Grand) Reset()         { *m = RoomMobileTabResp_Grand{} }
func (m *RoomMobileTabResp_Grand) String() string { return proto.CompactTextString(m) }
func (*RoomMobileTabResp_Grand) ProtoMessage()    {}
func (*RoomMobileTabResp_Grand) Descriptor() ([]byte, []int) {
	return fileDescriptor_Room_53aba32353b401ba, []int{9, 0}
}
func (m *RoomMobileTabResp_Grand) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RoomMobileTabResp_Grand) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RoomMobileTabResp_Grand.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *RoomMobileTabResp_Grand) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RoomMobileTabResp_Grand.Merge(dst, src)
}
func (m *RoomMobileTabResp_Grand) XXX_Size() int {
	return m.Size()
}
func (m *RoomMobileTabResp_Grand) XXX_DiscardUnknown() {
	xxx_messageInfo_RoomMobileTabResp_Grand.DiscardUnknown(m)
}

var xxx_messageInfo_RoomMobileTabResp_Grand proto.InternalMessageInfo

func (m *RoomMobileTabResp_Grand) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *RoomMobileTabResp_Grand) GetDesc() string {
	if m != nil {
		return m.Desc
	}
	return ""
}

func (m *RoomMobileTabResp_Grand) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *RoomMobileTabResp_Grand) GetStatus() int64 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *RoomMobileTabResp_Grand) GetOrder() int64 {
	if m != nil {
		return m.Order
	}
	return 0
}

func (m *RoomMobileTabResp_Grand) GetDocuments() string {
	if m != nil {
		return m.Documents
	}
	return ""
}

func (m *RoomMobileTabResp_Grand) GetRankName() string {
	if m != nil {
		return m.RankName
	}
	return ""
}

type RoomMobileTabResp_Sub struct {
	// tab类型
	Type string `protobuf:"bytes,1,opt,name=type,proto3" json:"type"`
	// 中文标题
	Desc string `protobuf:"bytes,2,opt,name=desc,proto3" json:"desc"`
	// h5链接
	Url string `protobuf:"bytes,3,opt,name=url,proto3" json:"url"`
	// 1展示0不展示
	Status int64 `protobuf:"varint,4,opt,name=status,proto3" json:"status"`
	// 排序，值越小越靠前
	Order int64 `protobuf:"varint,5,opt,name=order,proto3" json:"order"`
	// 文案
	Documents string `protobuf:"bytes,6,opt,name=documents,proto3" json:"documents"`
	// 名称
	RankName string `protobuf:"bytes,7,opt,name=rank_name,json=rankName,proto3" json:"rank_name"`
	// 三级默认定位tab
	DefaultSubTab string `protobuf:"bytes,8,opt,name=default_sub_tab,json=defaultSubTab,proto3" json:"default_sub_tab"`
	// 三级tab
	SubTab []*RoomMobileTabResp_Grand `protobuf:"bytes,9,rep,name=sub_tab,json=subTab" json:"sub_tab"`
}

func (m *RoomMobileTabResp_Sub) Reset()         { *m = RoomMobileTabResp_Sub{} }
func (m *RoomMobileTabResp_Sub) String() string { return proto.CompactTextString(m) }
func (*RoomMobileTabResp_Sub) ProtoMessage()    {}
func (*RoomMobileTabResp_Sub) Descriptor() ([]byte, []int) {
	return fileDescriptor_Room_53aba32353b401ba, []int{9, 1}
}
func (m *RoomMobileTabResp_Sub) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RoomMobileTabResp_Sub) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RoomMobileTabResp_Sub.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *RoomMobileTabResp_Sub) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RoomMobileTabResp_Sub.Merge(dst, src)
}
func (m *RoomMobileTabResp_Sub) XXX_Size() int {
	return m.Size()
}
func (m *RoomMobileTabResp_Sub) XXX_DiscardUnknown() {
	xxx_messageInfo_RoomMobileTabResp_Sub.DiscardUnknown(m)
}

var xxx_messageInfo_RoomMobileTabResp_Sub proto.InternalMessageInfo

func (m *RoomMobileTabResp_Sub) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *RoomMobileTabResp_Sub) GetDesc() string {
	if m != nil {
		return m.Desc
	}
	return ""
}

func (m *RoomMobileTabResp_Sub) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *RoomMobileTabResp_Sub) GetStatus() int64 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *RoomMobileTabResp_Sub) GetOrder() int64 {
	if m != nil {
		return m.Order
	}
	return 0
}

func (m *RoomMobileTabResp_Sub) GetDocuments() string {
	if m != nil {
		return m.Documents
	}
	return ""
}

func (m *RoomMobileTabResp_Sub) GetRankName() string {
	if m != nil {
		return m.RankName
	}
	return ""
}

func (m *RoomMobileTabResp_Sub) GetDefaultSubTab() string {
	if m != nil {
		return m.DefaultSubTab
	}
	return ""
}

func (m *RoomMobileTabResp_Sub) GetSubTab() []*RoomMobileTabResp_Grand {
	if m != nil {
		return m.SubTab
	}
	return nil
}

type RoomMobileTabResp_Data struct {
	// tab类型
	Type string `protobuf:"bytes,1,opt,name=type,proto3" json:"type"`
	// 中文标题
	Desc string `protobuf:"bytes,2,opt,name=desc,proto3" json:"desc"`
	// h5链接，用来区分native还是h5
	Url string `protobuf:"bytes,3,opt,name=url,proto3" json:"url"`
	// 1展示0不展示
	Status int64 `protobuf:"varint,4,opt,name=status,proto3" json:"status"`
	// 排序，值越小越靠前
	Order int64 `protobuf:"varint,5,opt,name=order,proto3" json:"order"`
	// 1默认定位0不是
	Default int64 `protobuf:"varint,6,opt,name=default,proto3" json:"default"`
	// 二级默认定位tab
	DefaultSubTab string `protobuf:"bytes,7,opt,name=default_sub_tab,json=defaultSubTab,proto3" json:"default_sub_tab"`
	// 二级tab
	SubTab []*RoomMobileTabResp_Sub `protobuf:"bytes,8,rep,name=sub_tab,json=subTab" json:"sub_tab"`
}

func (m *RoomMobileTabResp_Data) Reset()         { *m = RoomMobileTabResp_Data{} }
func (m *RoomMobileTabResp_Data) String() string { return proto.CompactTextString(m) }
func (*RoomMobileTabResp_Data) ProtoMessage()    {}
func (*RoomMobileTabResp_Data) Descriptor() ([]byte, []int) {
	return fileDescriptor_Room_53aba32353b401ba, []int{9, 2}
}
func (m *RoomMobileTabResp_Data) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RoomMobileTabResp_Data) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RoomMobileTabResp_Data.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *RoomMobileTabResp_Data) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RoomMobileTabResp_Data.Merge(dst, src)
}
func (m *RoomMobileTabResp_Data) XXX_Size() int {
	return m.Size()
}
func (m *RoomMobileTabResp_Data) XXX_DiscardUnknown() {
	xxx_messageInfo_RoomMobileTabResp_Data.DiscardUnknown(m)
}

var xxx_messageInfo_RoomMobileTabResp_Data proto.InternalMessageInfo

func (m *RoomMobileTabResp_Data) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *RoomMobileTabResp_Data) GetDesc() string {
	if m != nil {
		return m.Desc
	}
	return ""
}

func (m *RoomMobileTabResp_Data) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *RoomMobileTabResp_Data) GetStatus() int64 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *RoomMobileTabResp_Data) GetOrder() int64 {
	if m != nil {
		return m.Order
	}
	return 0
}

func (m *RoomMobileTabResp_Data) GetDefault() int64 {
	if m != nil {
		return m.Default
	}
	return 0
}

func (m *RoomMobileTabResp_Data) GetDefaultSubTab() string {
	if m != nil {
		return m.DefaultSubTab
	}
	return ""
}

func (m *RoomMobileTabResp_Data) GetSubTab() []*RoomMobileTabResp_Sub {
	if m != nil {
		return m.SubTab
	}
	return nil
}

func init() {
	proto.RegisterType((*RoomGetByIdsReq)(nil), "room.v2.RoomGetByIdsReq")
	proto.RegisterType((*RoomGetByIdsResp)(nil), "room.v2.RoomGetByIdsResp")
	proto.RegisterMapType((map[int64]*RoomGetByIdsResp_RoomInfo)(nil), "room.v2.RoomGetByIdsResp.DataEntry")
	proto.RegisterType((*RoomGetByIdsResp_RoomInfo)(nil), "room.v2.RoomGetByIdsResp.RoomInfo")
	proto.RegisterType((*RoomRoomIdByUidReq)(nil), "room.v2.RoomRoomIdByUidReq")
	proto.RegisterType((*RoomRoomIdByUidResp)(nil), "room.v2.RoomRoomIdByUidResp")
	proto.RegisterType((*RoomRoomIdByUidResp_Data)(nil), "room.v2.RoomRoomIdByUidResp.Data")
	proto.RegisterType((*RoomRoomIdByUidMultiReq)(nil), "room.v2.RoomRoomIdByUidMultiReq")
	proto.RegisterType((*RoomRoomIdByUidMultiResp)(nil), "room.v2.RoomRoomIdByUidMultiResp")
	proto.RegisterMapType((map[string]string)(nil), "room.v2.RoomRoomIdByUidMultiResp.DataEntry")
	proto.RegisterType((*RoomGetOnlineRoomIdsReq)(nil), "room.v2.RoomGetOnlineRoomIdsReq")
	proto.RegisterType((*RoomGetOnlineRoomIdsResp)(nil), "room.v2.RoomGetOnlineRoomIdsResp")
	proto.RegisterType((*RoomGetOnlineRoomIdsResp_Data)(nil), "room.v2.RoomGetOnlineRoomIdsResp.Data")
	proto.RegisterType((*RoomMobileTabReq)(nil), "room.v2.RoomMobileTabReq")
	proto.RegisterType((*RoomMobileTabResp)(nil), "room.v2.RoomMobileTabResp")
	proto.RegisterType((*RoomMobileTabResp_Grand)(nil), "room.v2.RoomMobileTabResp.Grand")
	proto.RegisterType((*RoomMobileTabResp_Sub)(nil), "room.v2.RoomMobileTabResp.Sub")
	proto.RegisterType((*RoomMobileTabResp_Data)(nil), "room.v2.RoomMobileTabResp.Data")
}
func (m *RoomGetByIdsReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RoomGetByIdsReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Ids) > 0 {
		dAtA2 := make([]byte, len(m.Ids)*10)
		var j1 int
		for _, num1 := range m.Ids {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		dAtA[i] = 0xa
		i++
		i = encodeVarintRoom(dAtA, i, uint64(j1))
		i += copy(dAtA[i:], dAtA2[:j1])
	}
	if m.NeedUinfo != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintRoom(dAtA, i, uint64(m.NeedUinfo))
	}
	if m.NeedBroadcastType != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintRoom(dAtA, i, uint64(m.NeedBroadcastType))
	}
	if len(m.Fields) > 0 {
		for _, s := range m.Fields {
			dAtA[i] = 0x22
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.From) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintRoom(dAtA, i, uint64(len(m.From)))
		i += copy(dAtA[i:], m.From)
	}
	return i, nil
}

func (m *RoomGetByIdsResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RoomGetByIdsResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintRoom(dAtA, i, uint64(m.Code))
	}
	if len(m.Msg) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintRoom(dAtA, i, uint64(len(m.Msg)))
		i += copy(dAtA[i:], m.Msg)
	}
	if len(m.Data) > 0 {
		for k, _ := range m.Data {
			dAtA[i] = 0x1a
			i++
			v := m.Data[k]
			msgSize := 0
			if v != nil {
				msgSize = v.Size()
				msgSize += 1 + sovRoom(uint64(msgSize))
			}
			mapSize := 1 + sovRoom(uint64(k)) + msgSize
			i = encodeVarintRoom(dAtA, i, uint64(mapSize))
			dAtA[i] = 0x8
			i++
			i = encodeVarintRoom(dAtA, i, uint64(k))
			if v != nil {
				dAtA[i] = 0x12
				i++
				i = encodeVarintRoom(dAtA, i, uint64(v.Size()))
				n3, err := v.MarshalTo(dAtA[i:])
				if err != nil {
					return 0, err
				}
				i += n3
			}
		}
	}
	return i, nil
}

func (m *RoomGetByIdsResp_RoomInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RoomGetByIdsResp_RoomInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Roomid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintRoom(dAtA, i, uint64(m.Roomid))
	}
	if len(m.Uname) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintRoom(dAtA, i, uint64(len(m.Uname)))
		i += copy(dAtA[i:], m.Uname)
	}
	if len(m.Face) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintRoom(dAtA, i, uint64(len(m.Face)))
		i += copy(dAtA[i:], m.Face)
	}
	if len(m.Verify) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintRoom(dAtA, i, uint64(len(m.Verify)))
		i += copy(dAtA[i:], m.Verify)
	}
	if len(m.Cover) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintRoom(dAtA, i, uint64(len(m.Cover)))
		i += copy(dAtA[i:], m.Cover)
	}
	if m.Uid != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintRoom(dAtA, i, uint64(m.Uid))
	}
	if len(m.LiveTime) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintRoom(dAtA, i, uint64(len(m.LiveTime)))
		i += copy(dAtA[i:], m.LiveTime)
	}
	if m.RoundStatus != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintRoom(dAtA, i, uint64(m.RoundStatus))
	}
	if m.OnFlag != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintRoom(dAtA, i, uint64(m.OnFlag))
	}
	if len(m.Title) > 0 {
		dAtA[i] = 0x52
		i++
		i = encodeVarintRoom(dAtA, i, uint64(len(m.Title)))
		i += copy(dAtA[i:], m.Title)
	}
	if len(m.Tags) > 0 {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintRoom(dAtA, i, uint64(len(m.Tags)))
		i += copy(dAtA[i:], m.Tags)
	}
	if len(m.LockStatus) > 0 {
		dAtA[i] = 0x62
		i++
		i = encodeVarintRoom(dAtA, i, uint64(len(m.LockStatus)))
		i += copy(dAtA[i:], m.LockStatus)
	}
	if len(m.HiddenStatus) > 0 {
		dAtA[i] = 0x6a
		i++
		i = encodeVarintRoom(dAtA, i, uint64(len(m.HiddenStatus)))
		i += copy(dAtA[i:], m.HiddenStatus)
	}
	if len(m.UserCover) > 0 {
		dAtA[i] = 0x72
		i++
		i = encodeVarintRoom(dAtA, i, uint64(len(m.UserCover)))
		i += copy(dAtA[i:], m.UserCover)
	}
	if m.ShortId != 0 {
		dAtA[i] = 0x78
		i++
		i = encodeVarintRoom(dAtA, i, uint64(m.ShortId))
	}
	if m.Online != 0 {
		dAtA[i] = 0x80
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintRoom(dAtA, i, uint64(m.Online))
	}
	if m.Area != 0 {
		dAtA[i] = 0x88
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintRoom(dAtA, i, uint64(m.Area))
	}
	if m.AreaV2Id != 0 {
		dAtA[i] = 0x90
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintRoom(dAtA, i, uint64(m.AreaV2Id))
	}
	if m.AreaV2ParentId != 0 {
		dAtA[i] = 0x98
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintRoom(dAtA, i, uint64(m.AreaV2ParentId))
	}
	if m.AreaPkStatus != 0 {
		dAtA[i] = 0xa0
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintRoom(dAtA, i, uint64(m.AreaPkStatus))
	}
	if len(m.AreaV2Name) > 0 {
		dAtA[i] = 0xaa
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintRoom(dAtA, i, uint64(len(m.AreaV2Name)))
		i += copy(dAtA[i:], m.AreaV2Name)
	}
	if len(m.AreaV2ParentName) > 0 {
		dAtA[i] = 0xb2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintRoom(dAtA, i, uint64(len(m.AreaV2ParentName)))
		i += copy(dAtA[i:], m.AreaV2ParentName)
	}
	if m.Attentions != 0 {
		dAtA[i] = 0xb8
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintRoom(dAtA, i, uint64(m.Attentions))
	}
	if len(m.Background) > 0 {
		dAtA[i] = 0xc2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintRoom(dAtA, i, uint64(len(m.Background)))
		i += copy(dAtA[i:], m.Background)
	}
	if m.RoomSilent != 0 {
		dAtA[i] = 0xc8
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintRoom(dAtA, i, uint64(m.RoomSilent))
	}
	if m.RoomShield != 0 {
		dAtA[i] = 0xd0
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintRoom(dAtA, i, uint64(m.RoomShield))
	}
	if len(m.TryTime) > 0 {
		dAtA[i] = 0xda
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintRoom(dAtA, i, uint64(len(m.TryTime)))
		i += copy(dAtA[i:], m.TryTime)
	}
	if m.LiveStatus != 0 {
		dAtA[i] = 0xe0
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintRoom(dAtA, i, uint64(m.LiveStatus))
	}
	if m.BroadcastType != 0 {
		dAtA[i] = 0xe8
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintRoom(dAtA, i, uint64(m.BroadcastType))
	}
	if m.Virtual != 0 {
		dAtA[i] = 0xf0
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintRoom(dAtA, i, uint64(m.Virtual))
	}
	if len(m.Ctime) > 0 {
		dAtA[i] = 0xfa
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintRoom(dAtA, i, uint64(len(m.Ctime)))
		i += copy(dAtA[i:], m.Ctime)
	}
	if len(m.Mtime) > 0 {
		dAtA[i] = 0x82
		i++
		dAtA[i] = 0x2
		i++
		i = encodeVarintRoom(dAtA, i, uint64(len(m.Mtime)))
		i += copy(dAtA[i:], m.Mtime)
	}
	return i, nil
}

func (m *RoomRoomIdByUidReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RoomRoomIdByUidReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Uid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintRoom(dAtA, i, uint64(m.Uid))
	}
	return i, nil
}

func (m *RoomRoomIdByUidResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RoomRoomIdByUidResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintRoom(dAtA, i, uint64(m.Code))
	}
	if len(m.Msg) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintRoom(dAtA, i, uint64(len(m.Msg)))
		i += copy(dAtA[i:], m.Msg)
	}
	if m.Data != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintRoom(dAtA, i, uint64(m.Data.Size()))
		n4, err := m.Data.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	return i, nil
}

func (m *RoomRoomIdByUidResp_Data) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RoomRoomIdByUidResp_Data) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.RoomId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintRoom(dAtA, i, uint64(m.RoomId))
	}
	return i, nil
}

func (m *RoomRoomIdByUidMultiReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RoomRoomIdByUidMultiReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Uids) > 0 {
		dAtA6 := make([]byte, len(m.Uids)*10)
		var j5 int
		for _, num1 := range m.Uids {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA6[j5] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j5++
			}
			dAtA6[j5] = uint8(num)
			j5++
		}
		dAtA[i] = 0xa
		i++
		i = encodeVarintRoom(dAtA, i, uint64(j5))
		i += copy(dAtA[i:], dAtA6[:j5])
	}
	return i, nil
}

func (m *RoomRoomIdByUidMultiResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RoomRoomIdByUidMultiResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintRoom(dAtA, i, uint64(m.Code))
	}
	if len(m.Msg) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintRoom(dAtA, i, uint64(len(m.Msg)))
		i += copy(dAtA[i:], m.Msg)
	}
	if len(m.Data) > 0 {
		for k, _ := range m.Data {
			dAtA[i] = 0x1a
			i++
			v := m.Data[k]
			mapSize := 1 + len(k) + sovRoom(uint64(len(k))) + 1 + len(v) + sovRoom(uint64(len(v)))
			i = encodeVarintRoom(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintRoom(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			dAtA[i] = 0x12
			i++
			i = encodeVarintRoom(dAtA, i, uint64(len(v)))
			i += copy(dAtA[i:], v)
		}
	}
	return i, nil
}

func (m *RoomGetOnlineRoomIdsReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RoomGetOnlineRoomIdsReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ParentAreaId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintRoom(dAtA, i, uint64(m.ParentAreaId))
	}
	if m.AreaId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintRoom(dAtA, i, uint64(m.AreaId))
	}
	if len(m.From) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintRoom(dAtA, i, uint64(len(m.From)))
		i += copy(dAtA[i:], m.From)
	}
	return i, nil
}

func (m *RoomGetOnlineRoomIdsResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RoomGetOnlineRoomIdsResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Msg) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintRoom(dAtA, i, uint64(len(m.Msg)))
		i += copy(dAtA[i:], m.Msg)
	}
	if m.Code != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintRoom(dAtA, i, uint64(m.Code))
	}
	if m.Data != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintRoom(dAtA, i, uint64(m.Data.Size()))
		n7, err := m.Data.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	return i, nil
}

func (m *RoomGetOnlineRoomIdsResp_Data) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RoomGetOnlineRoomIdsResp_Data) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.RoomIds) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintRoom(dAtA, i, uint64(len(m.RoomIds)))
		i += copy(dAtA[i:], m.RoomIds)
	}
	return i, nil
}

func (m *RoomMobileTabReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RoomMobileTabReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Roomid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintRoom(dAtA, i, uint64(m.Roomid))
	}
	return i, nil
}

func (m *RoomMobileTabResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RoomMobileTabResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintRoom(dAtA, i, uint64(m.Code))
	}
	if len(m.Msg) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintRoom(dAtA, i, uint64(len(m.Msg)))
		i += copy(dAtA[i:], m.Msg)
	}
	if len(m.Data) > 0 {
		for _, msg := range m.Data {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintRoom(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *RoomMobileTabResp_Grand) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RoomMobileTabResp_Grand) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Type) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintRoom(dAtA, i, uint64(len(m.Type)))
		i += copy(dAtA[i:], m.Type)
	}
	if len(m.Desc) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintRoom(dAtA, i, uint64(len(m.Desc)))
		i += copy(dAtA[i:], m.Desc)
	}
	if len(m.Url) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintRoom(dAtA, i, uint64(len(m.Url)))
		i += copy(dAtA[i:], m.Url)
	}
	if m.Status != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintRoom(dAtA, i, uint64(m.Status))
	}
	if m.Order != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintRoom(dAtA, i, uint64(m.Order))
	}
	if len(m.Documents) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintRoom(dAtA, i, uint64(len(m.Documents)))
		i += copy(dAtA[i:], m.Documents)
	}
	if len(m.RankName) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintRoom(dAtA, i, uint64(len(m.RankName)))
		i += copy(dAtA[i:], m.RankName)
	}
	return i, nil
}

func (m *RoomMobileTabResp_Sub) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RoomMobileTabResp_Sub) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Type) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintRoom(dAtA, i, uint64(len(m.Type)))
		i += copy(dAtA[i:], m.Type)
	}
	if len(m.Desc) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintRoom(dAtA, i, uint64(len(m.Desc)))
		i += copy(dAtA[i:], m.Desc)
	}
	if len(m.Url) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintRoom(dAtA, i, uint64(len(m.Url)))
		i += copy(dAtA[i:], m.Url)
	}
	if m.Status != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintRoom(dAtA, i, uint64(m.Status))
	}
	if m.Order != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintRoom(dAtA, i, uint64(m.Order))
	}
	if len(m.Documents) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintRoom(dAtA, i, uint64(len(m.Documents)))
		i += copy(dAtA[i:], m.Documents)
	}
	if len(m.RankName) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintRoom(dAtA, i, uint64(len(m.RankName)))
		i += copy(dAtA[i:], m.RankName)
	}
	if len(m.DefaultSubTab) > 0 {
		dAtA[i] = 0x42
		i++
		i = encodeVarintRoom(dAtA, i, uint64(len(m.DefaultSubTab)))
		i += copy(dAtA[i:], m.DefaultSubTab)
	}
	if len(m.SubTab) > 0 {
		for _, msg := range m.SubTab {
			dAtA[i] = 0x4a
			i++
			i = encodeVarintRoom(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *RoomMobileTabResp_Data) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RoomMobileTabResp_Data) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Type) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintRoom(dAtA, i, uint64(len(m.Type)))
		i += copy(dAtA[i:], m.Type)
	}
	if len(m.Desc) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintRoom(dAtA, i, uint64(len(m.Desc)))
		i += copy(dAtA[i:], m.Desc)
	}
	if len(m.Url) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintRoom(dAtA, i, uint64(len(m.Url)))
		i += copy(dAtA[i:], m.Url)
	}
	if m.Status != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintRoom(dAtA, i, uint64(m.Status))
	}
	if m.Order != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintRoom(dAtA, i, uint64(m.Order))
	}
	if m.Default != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintRoom(dAtA, i, uint64(m.Default))
	}
	if len(m.DefaultSubTab) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintRoom(dAtA, i, uint64(len(m.DefaultSubTab)))
		i += copy(dAtA[i:], m.DefaultSubTab)
	}
	if len(m.SubTab) > 0 {
		for _, msg := range m.SubTab {
			dAtA[i] = 0x42
			i++
			i = encodeVarintRoom(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func encodeVarintRoom(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *RoomGetByIdsReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Ids) > 0 {
		l = 0
		for _, e := range m.Ids {
			l += sovRoom(uint64(e))
		}
		n += 1 + sovRoom(uint64(l)) + l
	}
	if m.NeedUinfo != 0 {
		n += 1 + sovRoom(uint64(m.NeedUinfo))
	}
	if m.NeedBroadcastType != 0 {
		n += 1 + sovRoom(uint64(m.NeedBroadcastType))
	}
	if len(m.Fields) > 0 {
		for _, s := range m.Fields {
			l = len(s)
			n += 1 + l + sovRoom(uint64(l))
		}
	}
	l = len(m.From)
	if l > 0 {
		n += 1 + l + sovRoom(uint64(l))
	}
	return n
}

func (m *RoomGetByIdsResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovRoom(uint64(m.Code))
	}
	l = len(m.Msg)
	if l > 0 {
		n += 1 + l + sovRoom(uint64(l))
	}
	if len(m.Data) > 0 {
		for k, v := range m.Data {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovRoom(uint64(l))
			}
			mapEntrySize := 1 + sovRoom(uint64(k)) + l
			n += mapEntrySize + 1 + sovRoom(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *RoomGetByIdsResp_RoomInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Roomid != 0 {
		n += 1 + sovRoom(uint64(m.Roomid))
	}
	l = len(m.Uname)
	if l > 0 {
		n += 1 + l + sovRoom(uint64(l))
	}
	l = len(m.Face)
	if l > 0 {
		n += 1 + l + sovRoom(uint64(l))
	}
	l = len(m.Verify)
	if l > 0 {
		n += 1 + l + sovRoom(uint64(l))
	}
	l = len(m.Cover)
	if l > 0 {
		n += 1 + l + sovRoom(uint64(l))
	}
	if m.Uid != 0 {
		n += 1 + sovRoom(uint64(m.Uid))
	}
	l = len(m.LiveTime)
	if l > 0 {
		n += 1 + l + sovRoom(uint64(l))
	}
	if m.RoundStatus != 0 {
		n += 1 + sovRoom(uint64(m.RoundStatus))
	}
	if m.OnFlag != 0 {
		n += 1 + sovRoom(uint64(m.OnFlag))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovRoom(uint64(l))
	}
	l = len(m.Tags)
	if l > 0 {
		n += 1 + l + sovRoom(uint64(l))
	}
	l = len(m.LockStatus)
	if l > 0 {
		n += 1 + l + sovRoom(uint64(l))
	}
	l = len(m.HiddenStatus)
	if l > 0 {
		n += 1 + l + sovRoom(uint64(l))
	}
	l = len(m.UserCover)
	if l > 0 {
		n += 1 + l + sovRoom(uint64(l))
	}
	if m.ShortId != 0 {
		n += 1 + sovRoom(uint64(m.ShortId))
	}
	if m.Online != 0 {
		n += 2 + sovRoom(uint64(m.Online))
	}
	if m.Area != 0 {
		n += 2 + sovRoom(uint64(m.Area))
	}
	if m.AreaV2Id != 0 {
		n += 2 + sovRoom(uint64(m.AreaV2Id))
	}
	if m.AreaV2ParentId != 0 {
		n += 2 + sovRoom(uint64(m.AreaV2ParentId))
	}
	if m.AreaPkStatus != 0 {
		n += 2 + sovRoom(uint64(m.AreaPkStatus))
	}
	l = len(m.AreaV2Name)
	if l > 0 {
		n += 2 + l + sovRoom(uint64(l))
	}
	l = len(m.AreaV2ParentName)
	if l > 0 {
		n += 2 + l + sovRoom(uint64(l))
	}
	if m.Attentions != 0 {
		n += 2 + sovRoom(uint64(m.Attentions))
	}
	l = len(m.Background)
	if l > 0 {
		n += 2 + l + sovRoom(uint64(l))
	}
	if m.RoomSilent != 0 {
		n += 2 + sovRoom(uint64(m.RoomSilent))
	}
	if m.RoomShield != 0 {
		n += 2 + sovRoom(uint64(m.RoomShield))
	}
	l = len(m.TryTime)
	if l > 0 {
		n += 2 + l + sovRoom(uint64(l))
	}
	if m.LiveStatus != 0 {
		n += 2 + sovRoom(uint64(m.LiveStatus))
	}
	if m.BroadcastType != 0 {
		n += 2 + sovRoom(uint64(m.BroadcastType))
	}
	if m.Virtual != 0 {
		n += 2 + sovRoom(uint64(m.Virtual))
	}
	l = len(m.Ctime)
	if l > 0 {
		n += 2 + l + sovRoom(uint64(l))
	}
	l = len(m.Mtime)
	if l > 0 {
		n += 2 + l + sovRoom(uint64(l))
	}
	return n
}

func (m *RoomRoomIdByUidReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Uid != 0 {
		n += 1 + sovRoom(uint64(m.Uid))
	}
	return n
}

func (m *RoomRoomIdByUidResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovRoom(uint64(m.Code))
	}
	l = len(m.Msg)
	if l > 0 {
		n += 1 + l + sovRoom(uint64(l))
	}
	if m.Data != nil {
		l = m.Data.Size()
		n += 1 + l + sovRoom(uint64(l))
	}
	return n
}

func (m *RoomRoomIdByUidResp_Data) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RoomId != 0 {
		n += 1 + sovRoom(uint64(m.RoomId))
	}
	return n
}

func (m *RoomRoomIdByUidMultiReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Uids) > 0 {
		l = 0
		for _, e := range m.Uids {
			l += sovRoom(uint64(e))
		}
		n += 1 + sovRoom(uint64(l)) + l
	}
	return n
}

func (m *RoomRoomIdByUidMultiResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovRoom(uint64(m.Code))
	}
	l = len(m.Msg)
	if l > 0 {
		n += 1 + l + sovRoom(uint64(l))
	}
	if len(m.Data) > 0 {
		for k, v := range m.Data {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovRoom(uint64(len(k))) + 1 + len(v) + sovRoom(uint64(len(v)))
			n += mapEntrySize + 1 + sovRoom(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *RoomGetOnlineRoomIdsReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ParentAreaId != 0 {
		n += 1 + sovRoom(uint64(m.ParentAreaId))
	}
	if m.AreaId != 0 {
		n += 1 + sovRoom(uint64(m.AreaId))
	}
	l = len(m.From)
	if l > 0 {
		n += 1 + l + sovRoom(uint64(l))
	}
	return n
}

func (m *RoomGetOnlineRoomIdsResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Msg)
	if l > 0 {
		n += 1 + l + sovRoom(uint64(l))
	}
	if m.Code != 0 {
		n += 1 + sovRoom(uint64(m.Code))
	}
	if m.Data != nil {
		l = m.Data.Size()
		n += 1 + l + sovRoom(uint64(l))
	}
	return n
}

func (m *RoomGetOnlineRoomIdsResp_Data) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RoomIds)
	if l > 0 {
		n += 1 + l + sovRoom(uint64(l))
	}
	return n
}

func (m *RoomMobileTabReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Roomid != 0 {
		n += 1 + sovRoom(uint64(m.Roomid))
	}
	return n
}

func (m *RoomMobileTabResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovRoom(uint64(m.Code))
	}
	l = len(m.Msg)
	if l > 0 {
		n += 1 + l + sovRoom(uint64(l))
	}
	if len(m.Data) > 0 {
		for _, e := range m.Data {
			l = e.Size()
			n += 1 + l + sovRoom(uint64(l))
		}
	}
	return n
}

func (m *RoomMobileTabResp_Grand) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovRoom(uint64(l))
	}
	l = len(m.Desc)
	if l > 0 {
		n += 1 + l + sovRoom(uint64(l))
	}
	l = len(m.Url)
	if l > 0 {
		n += 1 + l + sovRoom(uint64(l))
	}
	if m.Status != 0 {
		n += 1 + sovRoom(uint64(m.Status))
	}
	if m.Order != 0 {
		n += 1 + sovRoom(uint64(m.Order))
	}
	l = len(m.Documents)
	if l > 0 {
		n += 1 + l + sovRoom(uint64(l))
	}
	l = len(m.RankName)
	if l > 0 {
		n += 1 + l + sovRoom(uint64(l))
	}
	return n
}

func (m *RoomMobileTabResp_Sub) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovRoom(uint64(l))
	}
	l = len(m.Desc)
	if l > 0 {
		n += 1 + l + sovRoom(uint64(l))
	}
	l = len(m.Url)
	if l > 0 {
		n += 1 + l + sovRoom(uint64(l))
	}
	if m.Status != 0 {
		n += 1 + sovRoom(uint64(m.Status))
	}
	if m.Order != 0 {
		n += 1 + sovRoom(uint64(m.Order))
	}
	l = len(m.Documents)
	if l > 0 {
		n += 1 + l + sovRoom(uint64(l))
	}
	l = len(m.RankName)
	if l > 0 {
		n += 1 + l + sovRoom(uint64(l))
	}
	l = len(m.DefaultSubTab)
	if l > 0 {
		n += 1 + l + sovRoom(uint64(l))
	}
	if len(m.SubTab) > 0 {
		for _, e := range m.SubTab {
			l = e.Size()
			n += 1 + l + sovRoom(uint64(l))
		}
	}
	return n
}

func (m *RoomMobileTabResp_Data) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovRoom(uint64(l))
	}
	l = len(m.Desc)
	if l > 0 {
		n += 1 + l + sovRoom(uint64(l))
	}
	l = len(m.Url)
	if l > 0 {
		n += 1 + l + sovRoom(uint64(l))
	}
	if m.Status != 0 {
		n += 1 + sovRoom(uint64(m.Status))
	}
	if m.Order != 0 {
		n += 1 + sovRoom(uint64(m.Order))
	}
	if m.Default != 0 {
		n += 1 + sovRoom(uint64(m.Default))
	}
	l = len(m.DefaultSubTab)
	if l > 0 {
		n += 1 + l + sovRoom(uint64(l))
	}
	if len(m.SubTab) > 0 {
		for _, e := range m.SubTab {
			l = e.Size()
			n += 1 + l + sovRoom(uint64(l))
		}
	}
	return n
}

func sovRoom(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozRoom(x uint64) (n int) {
	return sovRoom(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *RoomGetByIdsReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRoom
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RoomGetByIdsReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RoomGetByIdsReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowRoom
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Ids = append(m.Ids, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowRoom
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthRoom
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Ids) == 0 {
					m.Ids = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowRoom
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Ids = append(m.Ids, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Ids", wireType)
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NeedUinfo", wireType)
			}
			m.NeedUinfo = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NeedUinfo |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NeedBroadcastType", wireType)
			}
			m.NeedBroadcastType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NeedBroadcastType |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fields", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRoom
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Fields = append(m.Fields, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRoom
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.From = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRoom(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRoom
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RoomGetByIdsResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRoom
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RoomGetByIdsResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RoomGetByIdsResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRoom
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRoom
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = make(map[int64]*RoomGetByIdsResp_RoomInfo)
			}
			var mapkey int64
			var mapvalue *RoomGetByIdsResp_RoomInfo
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowRoom
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowRoom
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= (int64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowRoom
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= (int(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthRoom
					}
					postmsgIndex := iNdEx + mapmsglen
					if mapmsglen < 0 {
						return ErrInvalidLengthRoom
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &RoomGetByIdsResp_RoomInfo{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipRoom(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthRoom
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Data[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRoom(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRoom
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RoomGetByIdsResp_RoomInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRoom
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RoomInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RoomInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Roomid", wireType)
			}
			m.Roomid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Roomid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uname", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRoom
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Uname = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Face", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRoom
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Face = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Verify", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRoom
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Verify = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cover", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRoom
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cover = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LiveTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRoom
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LiveTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoundStatus", wireType)
			}
			m.RoundStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RoundStatus |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OnFlag", wireType)
			}
			m.OnFlag = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OnFlag |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRoom
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tags", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRoom
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tags = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LockStatus", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRoom
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LockStatus = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HiddenStatus", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRoom
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HiddenStatus = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserCover", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRoom
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserCover = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShortId", wireType)
			}
			m.ShortId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ShortId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Online", wireType)
			}
			m.Online = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Online |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Area", wireType)
			}
			m.Area = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Area |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AreaV2Id", wireType)
			}
			m.AreaV2Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AreaV2Id |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 19:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AreaV2ParentId", wireType)
			}
			m.AreaV2ParentId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AreaV2ParentId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 20:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AreaPkStatus", wireType)
			}
			m.AreaPkStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AreaPkStatus |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AreaV2Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRoom
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AreaV2Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 22:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AreaV2ParentName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRoom
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AreaV2ParentName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 23:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attentions", wireType)
			}
			m.Attentions = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Attentions |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 24:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Background", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRoom
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Background = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 25:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoomSilent", wireType)
			}
			m.RoomSilent = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RoomSilent |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 26:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoomShield", wireType)
			}
			m.RoomShield = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RoomShield |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 27:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TryTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRoom
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TryTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 28:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LiveStatus", wireType)
			}
			m.LiveStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LiveStatus |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 29:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BroadcastType", wireType)
			}
			m.BroadcastType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BroadcastType |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 30:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Virtual", wireType)
			}
			m.Virtual = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Virtual |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 31:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ctime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRoom
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ctime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 32:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mtime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRoom
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Mtime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRoom(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRoom
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RoomRoomIdByUidReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRoom
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RoomRoomIdByUidReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RoomRoomIdByUidReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRoom(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRoom
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RoomRoomIdByUidResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRoom
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RoomRoomIdByUidResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RoomRoomIdByUidResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRoom
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRoom
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = &RoomRoomIdByUidResp_Data{}
			}
			if err := m.Data.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRoom(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRoom
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RoomRoomIdByUidResp_Data) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRoom
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Data: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Data: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoomId", wireType)
			}
			m.RoomId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RoomId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRoom(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRoom
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RoomRoomIdByUidMultiReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRoom
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RoomRoomIdByUidMultiReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RoomRoomIdByUidMultiReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowRoom
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Uids = append(m.Uids, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowRoom
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthRoom
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Uids) == 0 {
					m.Uids = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowRoom
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Uids = append(m.Uids, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Uids", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRoom(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRoom
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RoomRoomIdByUidMultiResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRoom
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RoomRoomIdByUidMultiResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RoomRoomIdByUidMultiResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRoom
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRoom
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowRoom
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowRoom
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthRoom
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowRoom
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthRoom
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipRoom(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthRoom
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Data[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRoom(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRoom
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RoomGetOnlineRoomIdsReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRoom
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RoomGetOnlineRoomIdsReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RoomGetOnlineRoomIdsReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParentAreaId", wireType)
			}
			m.ParentAreaId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ParentAreaId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AreaId", wireType)
			}
			m.AreaId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AreaId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRoom
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.From = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRoom(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRoom
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RoomGetOnlineRoomIdsResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRoom
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RoomGetOnlineRoomIdsResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RoomGetOnlineRoomIdsResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRoom
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRoom
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = &RoomGetOnlineRoomIdsResp_Data{}
			}
			if err := m.Data.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRoom(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRoom
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RoomGetOnlineRoomIdsResp_Data) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRoom
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Data: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Data: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoomIds", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRoom
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RoomIds = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRoom(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRoom
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RoomMobileTabReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRoom
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RoomMobileTabReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RoomMobileTabReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Roomid", wireType)
			}
			m.Roomid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Roomid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRoom(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRoom
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RoomMobileTabResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRoom
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RoomMobileTabResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RoomMobileTabResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRoom
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRoom
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data, &RoomMobileTabResp_Data{})
			if err := m.Data[len(m.Data)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRoom(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRoom
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RoomMobileTabResp_Grand) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRoom
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Grand: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Grand: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRoom
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Desc", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRoom
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Desc = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Url", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRoom
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Url = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Order", wireType)
			}
			m.Order = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Order |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Documents", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRoom
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Documents = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RankName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRoom
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RankName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRoom(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRoom
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RoomMobileTabResp_Sub) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRoom
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Sub: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Sub: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRoom
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Desc", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRoom
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Desc = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Url", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRoom
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Url = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Order", wireType)
			}
			m.Order = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Order |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Documents", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRoom
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Documents = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RankName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRoom
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RankName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultSubTab", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRoom
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DefaultSubTab = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubTab", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRoom
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SubTab = append(m.SubTab, &RoomMobileTabResp_Grand{})
			if err := m.SubTab[len(m.SubTab)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRoom(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRoom
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RoomMobileTabResp_Data) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRoom
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Data: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Data: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRoom
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Desc", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRoom
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Desc = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Url", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRoom
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Url = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Order", wireType)
			}
			m.Order = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Order |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Default", wireType)
			}
			m.Default = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Default |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultSubTab", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRoom
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DefaultSubTab = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubTab", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoom
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRoom
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SubTab = append(m.SubTab, &RoomMobileTabResp_Sub{})
			if err := m.SubTab[len(m.SubTab)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRoom(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRoom
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipRoom(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowRoom
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRoom
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRoom
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthRoom
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowRoom
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipRoom(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthRoom = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowRoom   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("v2/Room.proto", fileDescriptor_Room_53aba32353b401ba) }

var fileDescriptor_Room_53aba32353b401ba = []byte{
	// 1562 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe4, 0x58, 0xcd, 0x6e, 0x1b, 0x47,
	0x12, 0x36, 0x45, 0x4a, 0x24, 0x4b, 0xd4, 0x5f, 0xcb, 0x5e, 0x8f, 0x68, 0x2d, 0x87, 0xe6, 0xae,
	0xd7, 0xc2, 0xda, 0x96, 0x16, 0x34, 0x60, 0x6b, 0x77, 0xb1, 0xd8, 0x98, 0x71, 0x2c, 0x10, 0x81,
	0x13, 0xa3, 0x25, 0x27, 0x40, 0x7c, 0x20, 0x66, 0x38, 0x2d, 0x6a, 0xa0, 0xe1, 0x8c, 0x34, 0x3f,
	0x04, 0x78, 0xcb, 0x23, 0xf8, 0x96, 0xa7, 0xc9, 0x3d, 0x08, 0x72, 0xf0, 0x2d, 0x01, 0x02, 0x0c,
	0x02, 0x1b, 0xc8, 0x61, 0x0e, 0x79, 0x82, 0x00, 0x09, 0xaa, 0xba, 0x87, 0x43, 0x52, 0xa4, 0x6c,
	0xc0, 0x97, 0x00, 0xb9, 0x74, 0x57, 0x7f, 0x3d, 0xd5, 0xd5, 0xfd, 0x55, 0x75, 0x55, 0x93, 0xb0,
	0x32, 0x68, 0xee, 0x71, 0xcf, 0xeb, 0xef, 0x9e, 0xf9, 0x5e, 0xe8, 0xb1, 0xa2, 0x8f, 0xf2, 0xa0,
	0x59, 0xbd, 0xd7, 0xb3, 0xc3, 0x93, 0xc8, 0xdc, 0xed, 0x7a, 0xfd, 0xbd, 0x9e, 0xd7, 0xf3, 0xf6,
	0x68, 0xde, 0x8c, 0x8e, 0x69, 0x44, 0x03, 0x92, 0xa4, 0x5e, 0xe3, 0xe7, 0x1c, 0xac, 0xe1, 0x32,
	0x07, 0x22, 0x6c, 0x0d, 0xdb, 0x56, 0xc0, 0xc5, 0x39, 0xdb, 0x82, 0xbc, 0x6d, 0x05, 0x5a, 0xae,
	0x9e, 0xdf, 0xc9, 0xb7, 0x8a, 0x49, 0xac, 0xe3, 0x90, 0x63, 0xc3, 0xee, 0x01, 0xb8, 0x42, 0x58,
	0x9d, 0xc8, 0x76, 0x8f, 0x3d, 0x6d, 0xa1, 0x9e, 0xdb, 0xc9, 0xb7, 0x56, 0x93, 0x58, 0x1f, 0x43,
	0x79, 0x19, 0xe5, 0xe7, 0x28, 0xb2, 0x03, 0xd8, 0xa4, 0x09, 0xd3, 0xf7, 0x0c, 0xab, 0x6b, 0x04,
	0x61, 0x27, 0x1c, 0x9e, 0x09, 0x2d, 0x4f, 0x7a, 0xd7, 0x93, 0x58, 0x9f, 0x35, 0xcd, 0x37, 0x10,
	0x6c, 0xa5, 0xd8, 0xd1, 0xf0, 0x4c, 0xb0, 0x06, 0x2c, 0x1d, 0xdb, 0xc2, 0xb1, 0x02, 0xad, 0x50,
	0xcf, 0xef, 0x94, 0x5b, 0x90, 0xc4, 0xba, 0x42, 0xb8, 0xea, 0xd9, 0x36, 0x14, 0x8e, 0x7d, 0xaf,
	0xaf, 0x2d, 0xd6, 0x73, 0x3b, 0xe5, 0x56, 0x29, 0x89, 0x75, 0x1a, 0x73, 0x6a, 0x1b, 0xbf, 0x54,
	0x60, 0x7d, 0xf2, 0xa0, 0xc1, 0x19, 0xaa, 0x74, 0x3d, 0x4b, 0x68, 0x39, 0xda, 0x10, 0xa9, 0xe0,
	0x98, 0x53, 0x8b, 0x3c, 0xf4, 0x83, 0x1e, 0x9d, 0xb2, 0x2c, 0x79, 0xe8, 0x07, 0x3d, 0x8e, 0x0d,
	0x7b, 0x04, 0x05, 0xcb, 0x08, 0x0d, 0x2d, 0x5f, 0xcf, 0xef, 0x2c, 0x37, 0xff, 0xb6, 0xab, 0xd8,
	0xdf, 0x9d, 0xb6, 0xb0, 0xfb, 0xd8, 0x08, 0x8d, 0x8f, 0xdc, 0xd0, 0x1f, 0xca, 0xd5, 0x51, 0x89,
	0x53, 0x5b, 0x7d, 0x01, 0xe5, 0xd1, 0x24, 0x5b, 0x87, 0xfc, 0xa9, 0x18, 0xca, 0x7d, 0x70, 0x14,
	0xd9, 0x3e, 0x2c, 0x0e, 0x0c, 0x27, 0x12, 0x64, 0x7e, 0xb9, 0xd9, 0x98, 0x6f, 0x02, 0x81, 0x36,
	0x12, 0x2f, 0x15, 0xfe, 0xb3, 0xb0, 0x9f, 0xab, 0x7e, 0xb9, 0x0c, 0xa5, 0x14, 0x47, 0xf2, 0x50,
	0xd9, 0xb6, 0xd4, 0x39, 0x89, 0x3c, 0x89, 0x70, 0xd5, 0x33, 0x1d, 0x16, 0x23, 0xd7, 0xe8, 0x0b,
	0x75, 0xda, 0x72, 0x12, 0xeb, 0x12, 0xe0, 0xb2, 0x23, 0x76, 0x8d, 0xae, 0xf4, 0x5d, 0xca, 0xae,
	0xd1, 0x15, 0x9c, 0x5a, 0x34, 0x31, 0x10, 0xbe, 0x7d, 0x3c, 0xd4, 0x0a, 0x34, 0x4f, 0x26, 0x24,
	0xc2, 0x55, 0x8f, 0x26, 0xba, 0xde, 0x40, 0xf8, 0xca, 0x41, 0x64, 0x82, 0x00, 0x2e, 0x3b, 0xe4,
	0x3b, 0xb2, 0x2d, 0x6d, 0x89, 0x36, 0x49, 0x7c, 0x47, 0xb6, 0xc5, 0xb1, 0x61, 0xff, 0x84, 0xb2,
	0x63, 0x0f, 0x44, 0x27, 0xb4, 0xfb, 0x42, 0x2b, 0x92, 0xfe, 0x4a, 0x12, 0xeb, 0x19, 0xc8, 0x4b,
	0x28, 0x1e, 0xd9, 0x7d, 0xc1, 0xee, 0x43, 0xc5, 0xf7, 0x22, 0xd7, 0xea, 0x04, 0xa1, 0x11, 0x46,
	0x81, 0x56, 0xa2, 0xf5, 0xd6, 0x93, 0x58, 0x9f, 0xc0, 0xf9, 0x32, 0x8d, 0x0e, 0x69, 0xc0, 0xfe,
	0x0e, 0x45, 0xcf, 0xed, 0x1c, 0x3b, 0x46, 0x4f, 0x2b, 0xd3, 0xf7, 0xcb, 0x49, 0xac, 0xa7, 0x10,
	0x5f, 0xf2, 0xdc, 0x27, 0x8e, 0xd1, 0xc3, 0x23, 0x84, 0x76, 0xe8, 0x08, 0x0d, 0xb2, 0x23, 0x10,
	0xc0, 0x65, 0x87, 0x2c, 0x85, 0x46, 0x2f, 0xd0, 0x96, 0x33, 0x96, 0x70, 0xcc, 0xa9, 0x65, 0xff,
	0x82, 0x65, 0xc7, 0xeb, 0x9e, 0xa6, 0x1b, 0xab, 0xd0, 0x47, 0x6b, 0x49, 0xac, 0x8f, 0xc3, 0x1c,
	0x70, 0xa0, 0xb6, 0xf5, 0x00, 0x56, 0x4e, 0x6c, 0xcb, 0x12, 0x6e, 0xaa, 0xb3, 0x42, 0x3a, 0x1b,
	0x49, 0xac, 0x4f, 0x4e, 0xf0, 0x8a, 0x1c, 0x2a, 0xbd, 0x7b, 0x00, 0x51, 0x20, 0xfc, 0x8e, 0x24,
	0x7c, 0x95, 0x94, 0xe8, 0x9e, 0x66, 0x28, 0x2f, 0xa3, 0xfc, 0x21, 0x31, 0x7f, 0x1b, 0x4a, 0xc1,
	0x89, 0xe7, 0x87, 0x1d, 0xdb, 0xd2, 0xd6, 0xe8, 0xf8, 0x95, 0x24, 0xd6, 0x47, 0x18, 0x2f, 0x92,
	0xd4, 0xb6, 0xd0, 0xcf, 0x9e, 0xeb, 0xd8, 0xae, 0xd0, 0xd6, 0xb3, 0x50, 0x92, 0x08, 0x57, 0x3d,
	0x72, 0x60, 0xf8, 0xc2, 0xd0, 0x36, 0xb2, 0x4b, 0x85, 0x63, 0x4e, 0x2d, 0xbb, 0x0b, 0x80, 0x7d,
	0x67, 0xd0, 0x44, 0x63, 0x2c, 0xcb, 0x20, 0x19, 0xca, 0x4b, 0x28, 0x7f, 0xd6, 0x6c, 0x5b, 0xec,
	0x03, 0xd8, 0x48, 0xf1, 0x33, 0xc3, 0x17, 0x2e, 0xed, 0x70, 0x93, 0x94, 0xae, 0x25, 0xb1, 0x7e,
	0x71, 0x92, 0xaf, 0x4a, 0xdd, 0x67, 0x04, 0xb4, 0x2d, 0xb6, 0x0f, 0x84, 0x74, 0xce, 0x46, 0xb4,
	0x5f, 0x25, 0x75, 0x96, 0xc4, 0xfa, 0xd4, 0x0c, 0xaf, 0xe0, 0xf8, 0x59, 0xca, 0x7d, 0x13, 0x2a,
	0xe9, 0xf2, 0x74, 0x33, 0xae, 0x11, 0x8b, 0x14, 0x47, 0xe3, 0x38, 0x07, 0x69, 0xf1, 0x13, 0xbc,
	0x25, 0x4f, 0x60, 0x73, 0x6a, 0x4b, 0xa4, 0xfa, 0x17, 0x52, 0xa5, 0x84, 0x37, 0x63, 0x9a, 0xaf,
	0x8f, 0xef, 0x99, 0xd6, 0xd9, 0x05, 0x30, 0xc2, 0x50, 0xb8, 0xa1, 0xed, 0xb9, 0x81, 0x76, 0x7d,
	0x8c, 0xa5, 0x11, 0xca, 0xc7, 0x64, 0xfc, 0xde, 0x34, 0xba, 0xa7, 0x3d, 0x0a, 0x69, 0x4d, 0xcb,
	0xfc, 0x9d, 0xa1, 0x7c, 0x4c, 0xc6, 0x48, 0xc4, 0x8b, 0xdf, 0x09, 0x6c, 0x47, 0xb8, 0xa1, 0xb6,
	0x45, 0x06, 0x28, 0x12, 0xc7, 0x60, 0x0e, 0x38, 0x38, 0x24, 0x39, 0xd3, 0x38, 0xc1, 0x6c, 0xab,
	0x55, 0xa7, 0x35, 0x08, 0x56, 0x1a, 0x24, 0x63, 0x50, 0x85, 0xfe, 0x50, 0x5e, 0xd9, 0x1b, 0xb4,
	0x23, 0x0a, 0xaa, 0x14, 0xe3, 0xc5, 0xd0, 0x1f, 0xd2, 0x85, 0xc5, 0x6b, 0x81, 0xf7, 0x58, 0xf9,
	0x67, 0x3b, 0x5b, 0x7a, 0x0c, 0xe6, 0x80, 0x03, 0xe5, 0x9a, 0x7f, 0xc3, 0xea, 0x54, 0x49, 0xf9,
	0x6b, 0xe6, 0xd4, 0xa9, 0x6a, 0xb2, 0x62, 0x4e, 0x54, 0x92, 0x5b, 0x50, 0x1c, 0xd8, 0x7e, 0x18,
	0x19, 0x8e, 0x56, 0xcb, 0x2e, 0xba, 0x82, 0x78, 0x2a, 0x50, 0xb2, 0xa2, 0x9d, 0xeb, 0x63, 0xc9,
	0x8a, 0xb6, 0x2d, 0x3b, 0xfc, 0xa0, 0x4f, 0x1f, 0xd4, 0xb3, 0x0f, 0xfa, 0xf2, 0x03, 0xea, 0x1a,
	0x7b, 0xc0, 0x30, 0x03, 0x53, 0x16, 0xb6, 0x5a, 0xc3, 0xe7, 0xb6, 0xa5, 0x6a, 0x6b, 0x34, 0x4a,
	0xc4, 0x13, 0x39, 0xae, 0xf1, 0x75, 0x0e, 0x36, 0x2f, 0x68, 0xbc, 0x4f, 0x91, 0xfa, 0xff, 0xa8,
	0x48, 0x61, 0x05, 0xb9, 0x39, 0x51, 0x41, 0xa6, 0x8c, 0x50, 0x9d, 0xba, 0x50, 0xa2, 0xee, 0x42,
	0x01, 0x71, 0x4c, 0x8e, 0xe4, 0xe4, 0xd1, 0xc6, 0x89, 0x33, 0x05, 0xc9, 0x12, 0xd2, 0xb6, 0x1a,
	0x0f, 0xe1, 0xfa, 0xd4, 0xca, 0x4f, 0x23, 0x27, 0xb4, 0xf1, 0xd4, 0xdb, 0x50, 0x88, 0xb2, 0x27,
	0x05, 0x99, 0xc1, 0x31, 0xa7, 0xb6, 0xf1, 0x7d, 0x0e, 0xb4, 0xd9, 0x9a, 0xef, 0x73, 0xfa, 0xf6,
	0x44, 0x89, 0xbe, 0x33, 0xef, 0xf4, 0x23, 0x4b, 0x97, 0x94, 0xea, 0x87, 0x73, 0x4a, 0x75, 0x59,
	0x96, 0xea, 0xab, 0xe3, 0xa5, 0xba, 0x3c, 0x56, 0x86, 0x1b, 0x5f, 0xe5, 0x24, 0x27, 0x07, 0x22,
	0xfc, 0x54, 0x26, 0x49, 0x32, 0x4c, 0xaf, 0xac, 0x7d, 0x58, 0x55, 0x39, 0x80, 0x52, 0xc2, 0x88,
	0x5b, 0x8a, 0xe1, 0xc9, 0x19, 0x5e, 0x91, 0xe3, 0x47, 0xbe, 0x30, 0xda, 0x16, 0xba, 0x23, 0x55,
	0x59, 0xc8, 0xdc, 0x91, 0x7e, 0xbb, 0x64, 0xc8, 0xaf, 0xd2, 0xe7, 0x50, 0x7e, 0xe6, 0x73, 0xe8,
	0x5b, 0xc5, 0xf9, 0xc5, 0x9d, 0x05, 0x67, 0x29, 0xab, 0xb9, 0x19, 0xac, 0xa6, 0xee, 0x58, 0x98,
	0xe9, 0x8e, 0xc7, 0x13, 0x11, 0xf7, 0x8f, 0xe9, 0x37, 0xcb, 0x05, 0x4b, 0xb3, 0xc3, 0x6e, 0x4f,
	0x85, 0xdd, 0x6d, 0x28, 0xa9, 0x18, 0x0b, 0xd4, 0x5e, 0x28, 0x81, 0xa4, 0x18, 0x2f, 0xca, 0xc0,
	0x0b, 0x1a, 0x0f, 0xe4, 0xd3, 0xee, 0xa9, 0x67, 0xda, 0x8e, 0x38, 0x32, 0x4c, 0xa4, 0xf7, 0x1d,
	0x1e, 0x3d, 0x8d, 0x1f, 0x4b, 0xb0, 0x31, 0xa5, 0xf8, 0x3e, 0x11, 0xf7, 0xbf, 0x89, 0x88, 0xd3,
	0x27, 0x4e, 0x3f, 0x61, 0x62, 0xf6, 0xb1, 0x7f, 0xcd, 0xc1, 0xe2, 0x81, 0x6f, 0xb8, 0xe4, 0x3a,
	0x4a, 0x6a, 0xb9, 0xb1, 0x57, 0x04, 0xa6, 0x32, 0x6a, 0x71, 0xd6, 0x12, 0x41, 0x57, 0x6d, 0x41,
	0xae, 0x22, 0x82, 0x2e, 0xa7, 0x96, 0x12, 0x8c, 0xef, 0x28, 0xaf, 0xcb, 0x04, 0xe3, 0x3b, 0x1c,
	0x1b, 0xa4, 0x44, 0xa5, 0xd8, 0x42, 0x46, 0x89, 0xca, 0xae, 0xaa, 0xc7, 0xb4, 0xe6, 0xf9, 0x96,
	0x7a, 0xa4, 0xe5, 0x65, 0x5a, 0x23, 0x80, 0xcb, 0x8e, 0xdd, 0x81, 0xb2, 0xe5, 0x75, 0xa3, 0xbe,
	0x70, 0xc3, 0x80, 0x9e, 0x6a, 0xea, 0x25, 0x36, 0x02, 0x79, 0x26, 0xe2, 0xb3, 0xcd, 0x37, 0xdc,
	0x53, 0x59, 0x04, 0xc7, 0x9e, 0x6d, 0x23, 0x90, 0x97, 0x50, 0xc4, 0x92, 0x57, 0xfd, 0x6d, 0x01,
	0xf2, 0x87, 0x91, 0xf9, 0xa7, 0x3c, 0x3c, 0xfb, 0x2f, 0xac, 0x59, 0xe2, 0xd8, 0x88, 0x9c, 0xb0,
	0x13, 0x44, 0x66, 0x27, 0x34, 0x4c, 0x7a, 0xb6, 0x96, 0x5b, 0x9b, 0x49, 0xac, 0x4f, 0x4f, 0xf1,
	0x15, 0x05, 0x1c, 0x46, 0xe6, 0x91, 0x61, 0xb2, 0x27, 0x50, 0x4c, 0x95, 0xca, 0x14, 0x7a, 0xf5,
	0x4b, 0x42, 0x8f, 0x22, 0x4c, 0x66, 0x8c, 0x74, 0xb9, 0xa5, 0x80, 0xd6, 0xa9, 0x7e, 0xb7, 0xa0,
	0x2e, 0xde, 0x1f, 0xd9, 0x05, 0xb7, 0xa0, 0xa8, 0x4e, 0xaf, 0x7e, 0x28, 0xd0, 0x51, 0x14, 0xc4,
	0x53, 0x61, 0x16, 0xa1, 0xc5, 0x77, 0x26, 0xf4, 0x71, 0x46, 0x68, 0x89, 0x08, 0xad, 0x5d, 0x42,
	0xe8, 0x61, 0x64, 0xce, 0xa4, 0xb3, 0xf9, 0x32, 0x0f, 0x05, 0xfc, 0x9c, 0x3d, 0x02, 0xe8, 0x89,
	0xb0, 0x63, 0x0e, 0x31, 0x6b, 0x31, 0x6d, 0xce, 0x2f, 0xb9, 0xf3, 0xea, 0xd6, 0xdc, 0xdf, 0x78,
	0xec, 0x63, 0x58, 0x55, 0x69, 0x0f, 0x97, 0xc1, 0x5f, 0x44, 0x37, 0xe6, 0x97, 0xf3, 0xf3, 0xea,
	0xf6, 0x65, 0xb5, 0x9e, 0xbd, 0x80, 0xab, 0x93, 0x8b, 0x75, 0xfa, 0x58, 0x04, 0x59, 0xfd, 0x2d,
	0x35, 0xf2, 0xbc, 0x7a, 0xf3, 0xad, 0x55, 0x94, 0x7d, 0x0e, 0xeb, 0xbd, 0xa9, 0x4c, 0x3f, 0xb5,
	0xf0, 0x8c, 0x62, 0x38, 0xb5, 0xf0, 0xcc, 0xa2, 0xd4, 0x82, 0x72, 0x3f, 0x25, 0x9e, 0x6d, 0xcd,
	0x73, 0xc8, 0x79, 0xb5, 0x3a, 0xdf, 0x57, 0xad, 0xed, 0x6f, 0x5e, 0xd7, 0x72, 0xaf, 0x5e, 0xd7,
	0x72, 0x3f, 0xbd, 0xae, 0xe5, 0x5e, 0xbe, 0xa9, 0x5d, 0x79, 0xf5, 0xa6, 0x76, 0xe5, 0x87, 0x37,
	0xb5, 0x2b, 0x5f, 0x2c, 0x0c, 0x9a, 0xe6, 0x12, 0xfd, 0x25, 0x72, 0xff, 0xf7, 0x00, 0x00, 0x00,
	0xff, 0xff, 0x8a, 0x52, 0x32, 0xde, 0x5b, 0x11, 0x00, 0x00,
}
