// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: v2/AppIndex.proto

package v2

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type AppIndexGetAllListReq struct {
	// 平台
	Platform string `protobuf:"bytes,1,opt,name=platform,proto3" json:"platform"`
	// 设备
	Device string `protobuf:"bytes,2,opt,name=device,proto3" json:"device"`
	// 分辨率
	Scale string `protobuf:"bytes,3,opt,name=scale,proto3" json:"scale"`
	// 分辨率
	Build int64 `protobuf:"varint,4,opt,name=build,proto3" json:"build"`
	// 模块唯一标识，不传表示获取所有模块
	ModuleId int64 `protobuf:"varint,5,opt,name=module_id,json=moduleId,proto3" json:"module_id"`
	// 关注第几刷
	RelationPage int64 `protobuf:"varint,6,opt,name=relation_page,json=relationPage,proto3" json:"relation_page"`
}

func (m *AppIndexGetAllListReq) Reset()         { *m = AppIndexGetAllListReq{} }
func (m *AppIndexGetAllListReq) String() string { return proto.CompactTextString(m) }
func (*AppIndexGetAllListReq) ProtoMessage()    {}
func (*AppIndexGetAllListReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_AppIndex_45d5ad418ac35a63, []int{0}
}
func (m *AppIndexGetAllListReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AppIndexGetAllListReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AppIndexGetAllListReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *AppIndexGetAllListReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AppIndexGetAllListReq.Merge(dst, src)
}
func (m *AppIndexGetAllListReq) XXX_Size() int {
	return m.Size()
}
func (m *AppIndexGetAllListReq) XXX_DiscardUnknown() {
	xxx_messageInfo_AppIndexGetAllListReq.DiscardUnknown(m)
}

var xxx_messageInfo_AppIndexGetAllListReq proto.InternalMessageInfo

func (m *AppIndexGetAllListReq) GetPlatform() string {
	if m != nil {
		return m.Platform
	}
	return ""
}

func (m *AppIndexGetAllListReq) GetDevice() string {
	if m != nil {
		return m.Device
	}
	return ""
}

func (m *AppIndexGetAllListReq) GetScale() string {
	if m != nil {
		return m.Scale
	}
	return ""
}

func (m *AppIndexGetAllListReq) GetBuild() int64 {
	if m != nil {
		return m.Build
	}
	return 0
}

func (m *AppIndexGetAllListReq) GetModuleId() int64 {
	if m != nil {
		return m.ModuleId
	}
	return 0
}

func (m *AppIndexGetAllListReq) GetRelationPage() int64 {
	if m != nil {
		return m.RelationPage
	}
	return 0
}

type AppIndexGetAllListResp struct {
	// code
	Code int64 `protobuf:"varint,1,opt,name=code,proto3" json:"code"`
	// msg
	Msg string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg"`
	//
	Data *AppIndexGetAllListResp_Data `protobuf:"bytes,3,opt,name=data" json:"data"`
}

func (m *AppIndexGetAllListResp) Reset()         { *m = AppIndexGetAllListResp{} }
func (m *AppIndexGetAllListResp) String() string { return proto.CompactTextString(m) }
func (*AppIndexGetAllListResp) ProtoMessage()    {}
func (*AppIndexGetAllListResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_AppIndex_45d5ad418ac35a63, []int{1}
}
func (m *AppIndexGetAllListResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AppIndexGetAllListResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AppIndexGetAllListResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *AppIndexGetAllListResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AppIndexGetAllListResp.Merge(dst, src)
}
func (m *AppIndexGetAllListResp) XXX_Size() int {
	return m.Size()
}
func (m *AppIndexGetAllListResp) XXX_DiscardUnknown() {
	xxx_messageInfo_AppIndexGetAllListResp.DiscardUnknown(m)
}

var xxx_messageInfo_AppIndexGetAllListResp proto.InternalMessageInfo

func (m *AppIndexGetAllListResp) GetCode() int64 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *AppIndexGetAllListResp) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func (m *AppIndexGetAllListResp) GetData() *AppIndexGetAllListResp_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

type AppIndexGetAllListResp_ModuleInfo struct {
	// 模块id
	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id"`
	// 标题
	Title string `protobuf:"bytes,2,opt,name=title,proto3" json:"title"`
	// 图标
	Pic string `protobuf:"bytes,3,opt,name=pic,proto3" json:"pic"`
	// list数据类型  1: banner 2: 导航栏 3: 运营推荐分区-标准 4: 运营推荐分区-方 5：排行榜（小时榜） 6: 推荐主播-标准 7: 推荐主播-方 8:我的关注(用户相关) 9：一级分区-标准 10：一级分区-方 11: 活动卡片 12：常用标签推荐入口(用户相关) 13：常用标签推荐房间列表(用户相关) 14：大航海提示入口
	Type int64 `protobuf:"varint,4,opt,name=type,proto3" json:"type"`
	// 跳转链接
	Link string `protobuf:"bytes,5,opt,name=link,proto3" json:"link"`
	// 该模块数据总数
	Count int64 `protobuf:"varint,6,opt,name=count,proto3" json:"count"`
	// 二级标题，目前只有小时榜才会返
	SubTitle string `protobuf:"bytes,7,opt,name=sub_title,json=subTitle,proto3" json:"sub_title"`
}

func (m *AppIndexGetAllListResp_ModuleInfo) Reset()         { *m = AppIndexGetAllListResp_ModuleInfo{} }
func (m *AppIndexGetAllListResp_ModuleInfo) String() string { return proto.CompactTextString(m) }
func (*AppIndexGetAllListResp_ModuleInfo) ProtoMessage()    {}
func (*AppIndexGetAllListResp_ModuleInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_AppIndex_45d5ad418ac35a63, []int{1, 0}
}
func (m *AppIndexGetAllListResp_ModuleInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AppIndexGetAllListResp_ModuleInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AppIndexGetAllListResp_ModuleInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *AppIndexGetAllListResp_ModuleInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AppIndexGetAllListResp_ModuleInfo.Merge(dst, src)
}
func (m *AppIndexGetAllListResp_ModuleInfo) XXX_Size() int {
	return m.Size()
}
func (m *AppIndexGetAllListResp_ModuleInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_AppIndexGetAllListResp_ModuleInfo.DiscardUnknown(m)
}

var xxx_messageInfo_AppIndexGetAllListResp_ModuleInfo proto.InternalMessageInfo

func (m *AppIndexGetAllListResp_ModuleInfo) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *AppIndexGetAllListResp_ModuleInfo) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *AppIndexGetAllListResp_ModuleInfo) GetPic() string {
	if m != nil {
		return m.Pic
	}
	return ""
}

func (m *AppIndexGetAllListResp_ModuleInfo) GetType() int64 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *AppIndexGetAllListResp_ModuleInfo) GetLink() string {
	if m != nil {
		return m.Link
	}
	return ""
}

func (m *AppIndexGetAllListResp_ModuleInfo) GetCount() int64 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *AppIndexGetAllListResp_ModuleInfo) GetSubTitle() string {
	if m != nil {
		return m.SubTitle
	}
	return ""
}

type AppIndexGetAllListResp_RoomList struct {
	// 房间id
	Roomid int64 `protobuf:"varint,1,opt,name=roomid,proto3" json:"roomid"`
	// 房间标题
	Title string `protobuf:"bytes,2,opt,name=title,proto3" json:"title"`
	// 用户名
	Uname string `protobuf:"bytes,3,opt,name=uname,proto3" json:"uname"`
	// 在线人数
	Online int64 `protobuf:"varint,4,opt,name=online,proto3" json:"online"`
	// 封面，封面现在有3种：关键帧、封面图、秀场封面（正方形的），返回哪个由后端决定
	Cover string `protobuf:"bytes,5,opt,name=cover,proto3" json:"cover"`
	// 链接
	Link string `protobuf:"bytes,6,opt,name=link,proto3" json:"link"`
	// 主播头像
	Face string `protobuf:"bytes,7,opt,name=face,proto3" json:"face"`
	// 父分区id
	AreaV2ParentId int64 `protobuf:"varint,8,opt,name=area_v2_parent_id,json=areaV2ParentId,proto3" json:"area_v2_parent_id"`
	// 父分区名称
	AreaV2ParentName string `protobuf:"bytes,9,opt,name=area_v2_parent_name,json=areaV2ParentName,proto3" json:"area_v2_parent_name"`
	// 二级分区id
	AreaV2Id int64 `protobuf:"varint,10,opt,name=area_v2_id,json=areaV2Id,proto3" json:"area_v2_id"`
	// 二级分区名
	AreaV2Name string `protobuf:"bytes,11,opt,name=area_v2_name,json=areaV2Name,proto3" json:"area_v2_name"`
	// 秒开播放串 h264
	PlayUrl string `protobuf:"bytes,12,opt,name=play_url,json=playUrl,proto3" json:"play_url"`
	// 秒开播放串 h265
	PlayUrlH265 string `protobuf:"bytes,13,opt,name=play_url_h265,json=playUrlH265,proto3" json:"play_url_h265"`
	// 当前清晰度,清晰度 0:默认码率, 2:800 3:1500 4:原画
	CurrentQuality int64 `protobuf:"varint,14,opt,name=current_quality,json=currentQuality,proto3" json:"current_quality"`
	// 当前拥有清晰度列表
	AcceptQuality []int64 `protobuf:"varint,15,rep,packed,name=accept_quality,json=acceptQuality" json:"accept_quality"`
	// 横竖屏  0:横屏 1:竖屏 -1:异常情况
	BroadcastType int64 `protobuf:"varint,16,opt,name=broadcast_type,json=broadcastType,proto3" json:"broadcast_type"`
	// 新版角标-右上 默认为空 只能是文字！！！@古月 【5.29显示更新】：服务端还是吐右上（兼容老版），5.29显示在左上
	PendentRu string `protobuf:"bytes,17,opt,name=pendent_ru,json=pendentRu,proto3" json:"pendent_ru"`
	// 【5.29显示更新】：服务端还是吐右上，5.29客户端显示在左上,对应的背景图片
	PendentRuPic string `protobuf:"bytes,18,opt,name=pendent_ru_pic,json=pendentRuPic,proto3" json:"pendent_ru_pic"`
	// 新版移动端角标色值-右上
	PendentRuColor string `protobuf:"bytes,19,opt,name=pendent_ru_color,json=pendentRuColor,proto3" json:"pendent_ru_color"`
	// 推荐类型 1：人气 2：营收 3：运营强推 4：天马推荐（暂定）用于客户端打点
	RecType int64 `protobuf:"varint,20,opt,name=rec_type,json=recType,proto3" json:"rec_type"`
	// 当前房间pk_id，默认0 用于客户端打点
	PkId int64 `protobuf:"varint,21,opt,name=pk_id,json=pkId,proto3" json:"pk_id"`
}

func (m *AppIndexGetAllListResp_RoomList) Reset()         { *m = AppIndexGetAllListResp_RoomList{} }
func (m *AppIndexGetAllListResp_RoomList) String() string { return proto.CompactTextString(m) }
func (*AppIndexGetAllListResp_RoomList) ProtoMessage()    {}
func (*AppIndexGetAllListResp_RoomList) Descriptor() ([]byte, []int) {
	return fileDescriptor_AppIndex_45d5ad418ac35a63, []int{1, 1}
}
func (m *AppIndexGetAllListResp_RoomList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AppIndexGetAllListResp_RoomList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AppIndexGetAllListResp_RoomList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *AppIndexGetAllListResp_RoomList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AppIndexGetAllListResp_RoomList.Merge(dst, src)
}
func (m *AppIndexGetAllListResp_RoomList) XXX_Size() int {
	return m.Size()
}
func (m *AppIndexGetAllListResp_RoomList) XXX_DiscardUnknown() {
	xxx_messageInfo_AppIndexGetAllListResp_RoomList.DiscardUnknown(m)
}

var xxx_messageInfo_AppIndexGetAllListResp_RoomList proto.InternalMessageInfo

func (m *AppIndexGetAllListResp_RoomList) GetRoomid() int64 {
	if m != nil {
		return m.Roomid
	}
	return 0
}

func (m *AppIndexGetAllListResp_RoomList) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *AppIndexGetAllListResp_RoomList) GetUname() string {
	if m != nil {
		return m.Uname
	}
	return ""
}

func (m *AppIndexGetAllListResp_RoomList) GetOnline() int64 {
	if m != nil {
		return m.Online
	}
	return 0
}

func (m *AppIndexGetAllListResp_RoomList) GetCover() string {
	if m != nil {
		return m.Cover
	}
	return ""
}

func (m *AppIndexGetAllListResp_RoomList) GetLink() string {
	if m != nil {
		return m.Link
	}
	return ""
}

func (m *AppIndexGetAllListResp_RoomList) GetFace() string {
	if m != nil {
		return m.Face
	}
	return ""
}

func (m *AppIndexGetAllListResp_RoomList) GetAreaV2ParentId() int64 {
	if m != nil {
		return m.AreaV2ParentId
	}
	return 0
}

func (m *AppIndexGetAllListResp_RoomList) GetAreaV2ParentName() string {
	if m != nil {
		return m.AreaV2ParentName
	}
	return ""
}

func (m *AppIndexGetAllListResp_RoomList) GetAreaV2Id() int64 {
	if m != nil {
		return m.AreaV2Id
	}
	return 0
}

func (m *AppIndexGetAllListResp_RoomList) GetAreaV2Name() string {
	if m != nil {
		return m.AreaV2Name
	}
	return ""
}

func (m *AppIndexGetAllListResp_RoomList) GetPlayUrl() string {
	if m != nil {
		return m.PlayUrl
	}
	return ""
}

func (m *AppIndexGetAllListResp_RoomList) GetPlayUrlH265() string {
	if m != nil {
		return m.PlayUrlH265
	}
	return ""
}

func (m *AppIndexGetAllListResp_RoomList) GetCurrentQuality() int64 {
	if m != nil {
		return m.CurrentQuality
	}
	return 0
}

func (m *AppIndexGetAllListResp_RoomList) GetAcceptQuality() []int64 {
	if m != nil {
		return m.AcceptQuality
	}
	return nil
}

func (m *AppIndexGetAllListResp_RoomList) GetBroadcastType() int64 {
	if m != nil {
		return m.BroadcastType
	}
	return 0
}

func (m *AppIndexGetAllListResp_RoomList) GetPendentRu() string {
	if m != nil {
		return m.PendentRu
	}
	return ""
}

func (m *AppIndexGetAllListResp_RoomList) GetPendentRuPic() string {
	if m != nil {
		return m.PendentRuPic
	}
	return ""
}

func (m *AppIndexGetAllListResp_RoomList) GetPendentRuColor() string {
	if m != nil {
		return m.PendentRuColor
	}
	return ""
}

func (m *AppIndexGetAllListResp_RoomList) GetRecType() int64 {
	if m != nil {
		return m.RecType
	}
	return 0
}

func (m *AppIndexGetAllListResp_RoomList) GetPkId() int64 {
	if m != nil {
		return m.PkId
	}
	return 0
}

type AppIndexGetAllListResp_ModuleList struct {
	//
	ModuleInfo *AppIndexGetAllListResp_ModuleInfo `protobuf:"bytes,1,opt,name=module_info,json=moduleInfo" json:"module_info"`
	// 注意：可能是 PicList{id,pic,link,title}，需要根据ModuleInfo里的type判断
	List []*AppIndexGetAllListResp_RoomList `protobuf:"bytes,2,rep,name=list" json:"list"`
}

func (m *AppIndexGetAllListResp_ModuleList) Reset()         { *m = AppIndexGetAllListResp_ModuleList{} }
func (m *AppIndexGetAllListResp_ModuleList) String() string { return proto.CompactTextString(m) }
func (*AppIndexGetAllListResp_ModuleList) ProtoMessage()    {}
func (*AppIndexGetAllListResp_ModuleList) Descriptor() ([]byte, []int) {
	return fileDescriptor_AppIndex_45d5ad418ac35a63, []int{1, 2}
}
func (m *AppIndexGetAllListResp_ModuleList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AppIndexGetAllListResp_ModuleList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AppIndexGetAllListResp_ModuleList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *AppIndexGetAllListResp_ModuleList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AppIndexGetAllListResp_ModuleList.Merge(dst, src)
}
func (m *AppIndexGetAllListResp_ModuleList) XXX_Size() int {
	return m.Size()
}
func (m *AppIndexGetAllListResp_ModuleList) XXX_DiscardUnknown() {
	xxx_messageInfo_AppIndexGetAllListResp_ModuleList.DiscardUnknown(m)
}

var xxx_messageInfo_AppIndexGetAllListResp_ModuleList proto.InternalMessageInfo

func (m *AppIndexGetAllListResp_ModuleList) GetModuleInfo() *AppIndexGetAllListResp_ModuleInfo {
	if m != nil {
		return m.ModuleInfo
	}
	return nil
}

func (m *AppIndexGetAllListResp_ModuleList) GetList() []*AppIndexGetAllListResp_RoomList {
	if m != nil {
		return m.List
	}
	return nil
}

type AppIndexGetAllListResp_Data struct {
	// 客户端请求间隔 秒
	Interval int64 `protobuf:"varint,1,opt,name=interval,proto3" json:"interval"`
	// 模块列表
	ModuleList []*AppIndexGetAllListResp_ModuleList `protobuf:"bytes,2,rep,name=module_list,json=moduleList" json:"module_list"`
}

func (m *AppIndexGetAllListResp_Data) Reset()         { *m = AppIndexGetAllListResp_Data{} }
func (m *AppIndexGetAllListResp_Data) String() string { return proto.CompactTextString(m) }
func (*AppIndexGetAllListResp_Data) ProtoMessage()    {}
func (*AppIndexGetAllListResp_Data) Descriptor() ([]byte, []int) {
	return fileDescriptor_AppIndex_45d5ad418ac35a63, []int{1, 3}
}
func (m *AppIndexGetAllListResp_Data) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AppIndexGetAllListResp_Data) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AppIndexGetAllListResp_Data.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *AppIndexGetAllListResp_Data) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AppIndexGetAllListResp_Data.Merge(dst, src)
}
func (m *AppIndexGetAllListResp_Data) XXX_Size() int {
	return m.Size()
}
func (m *AppIndexGetAllListResp_Data) XXX_DiscardUnknown() {
	xxx_messageInfo_AppIndexGetAllListResp_Data.DiscardUnknown(m)
}

var xxx_messageInfo_AppIndexGetAllListResp_Data proto.InternalMessageInfo

func (m *AppIndexGetAllListResp_Data) GetInterval() int64 {
	if m != nil {
		return m.Interval
	}
	return 0
}

func (m *AppIndexGetAllListResp_Data) GetModuleList() []*AppIndexGetAllListResp_ModuleList {
	if m != nil {
		return m.ModuleList
	}
	return nil
}

type AppIndexGetBaseMInfoListReq struct {
	// 模块ID，不传获取所有
	ModuleId int64 `protobuf:"varint,1,opt,name=module_id,json=moduleId,proto3" json:"module_id"`
}

func (m *AppIndexGetBaseMInfoListReq) Reset()         { *m = AppIndexGetBaseMInfoListReq{} }
func (m *AppIndexGetBaseMInfoListReq) String() string { return proto.CompactTextString(m) }
func (*AppIndexGetBaseMInfoListReq) ProtoMessage()    {}
func (*AppIndexGetBaseMInfoListReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_AppIndex_45d5ad418ac35a63, []int{2}
}
func (m *AppIndexGetBaseMInfoListReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AppIndexGetBaseMInfoListReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AppIndexGetBaseMInfoListReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *AppIndexGetBaseMInfoListReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AppIndexGetBaseMInfoListReq.Merge(dst, src)
}
func (m *AppIndexGetBaseMInfoListReq) XXX_Size() int {
	return m.Size()
}
func (m *AppIndexGetBaseMInfoListReq) XXX_DiscardUnknown() {
	xxx_messageInfo_AppIndexGetBaseMInfoListReq.DiscardUnknown(m)
}

var xxx_messageInfo_AppIndexGetBaseMInfoListReq proto.InternalMessageInfo

func (m *AppIndexGetBaseMInfoListReq) GetModuleId() int64 {
	if m != nil {
		return m.ModuleId
	}
	return 0
}

type AppIndexGetBaseMInfoListResp struct {
	// code
	Code int64 `protobuf:"varint,1,opt,name=code,proto3" json:"code"`
	// msg
	Msg string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg"`
	//
	Data []*AppIndexGetBaseMInfoListResp_ModuleInfo `protobuf:"bytes,3,rep,name=data" json:"data"`
}

func (m *AppIndexGetBaseMInfoListResp) Reset()         { *m = AppIndexGetBaseMInfoListResp{} }
func (m *AppIndexGetBaseMInfoListResp) String() string { return proto.CompactTextString(m) }
func (*AppIndexGetBaseMInfoListResp) ProtoMessage()    {}
func (*AppIndexGetBaseMInfoListResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_AppIndex_45d5ad418ac35a63, []int{3}
}
func (m *AppIndexGetBaseMInfoListResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AppIndexGetBaseMInfoListResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AppIndexGetBaseMInfoListResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *AppIndexGetBaseMInfoListResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AppIndexGetBaseMInfoListResp.Merge(dst, src)
}
func (m *AppIndexGetBaseMInfoListResp) XXX_Size() int {
	return m.Size()
}
func (m *AppIndexGetBaseMInfoListResp) XXX_DiscardUnknown() {
	xxx_messageInfo_AppIndexGetBaseMInfoListResp.DiscardUnknown(m)
}

var xxx_messageInfo_AppIndexGetBaseMInfoListResp proto.InternalMessageInfo

func (m *AppIndexGetBaseMInfoListResp) GetCode() int64 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *AppIndexGetBaseMInfoListResp) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func (m *AppIndexGetBaseMInfoListResp) GetData() []*AppIndexGetBaseMInfoListResp_ModuleInfo {
	if m != nil {
		return m.Data
	}
	return nil
}

type AppIndexGetBaseMInfoListResp_ModuleInfo struct {
	// 模块id
	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id"`
	// 标题
	Title string `protobuf:"bytes,2,opt,name=title,proto3" json:"title"`
	// 图标
	Pic string `protobuf:"bytes,3,opt,name=pic,proto3" json:"pic"`
	// list数据类型  1: banner 2: 导航栏 3: 运营推荐分区-标准 4: 运营推荐分区-方 5：排行榜（小时榜） 6: 推荐主播-标准 7: 推荐主播-方 8:我的关注(用户相关) 9：一级分区-标准 10：一级分区-方 11: 活动卡片 12：常用标签推荐入口(用户相关) 13：常用标签推荐房间列表(用户相关) 14：大航海提示入口
	Type int64 `protobuf:"varint,4,opt,name=type,proto3" json:"type"`
	// 跳转链接
	Link string `protobuf:"bytes,5,opt,name=link,proto3" json:"link"`
	// 模块排序
	Sort int64 `protobuf:"varint,6,opt,name=sort,proto3" json:"sort"`
	// 数量
	Count int64 `protobuf:"varint,7,opt,name=count,proto3" json:"count"`
}

func (m *AppIndexGetBaseMInfoListResp_ModuleInfo) Reset() {
	*m = AppIndexGetBaseMInfoListResp_ModuleInfo{}
}
func (m *AppIndexGetBaseMInfoListResp_ModuleInfo) String() string { return proto.CompactTextString(m) }
func (*AppIndexGetBaseMInfoListResp_ModuleInfo) ProtoMessage()    {}
func (*AppIndexGetBaseMInfoListResp_ModuleInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_AppIndex_45d5ad418ac35a63, []int{3, 0}
}
func (m *AppIndexGetBaseMInfoListResp_ModuleInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AppIndexGetBaseMInfoListResp_ModuleInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AppIndexGetBaseMInfoListResp_ModuleInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *AppIndexGetBaseMInfoListResp_ModuleInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AppIndexGetBaseMInfoListResp_ModuleInfo.Merge(dst, src)
}
func (m *AppIndexGetBaseMInfoListResp_ModuleInfo) XXX_Size() int {
	return m.Size()
}
func (m *AppIndexGetBaseMInfoListResp_ModuleInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_AppIndexGetBaseMInfoListResp_ModuleInfo.DiscardUnknown(m)
}

var xxx_messageInfo_AppIndexGetBaseMInfoListResp_ModuleInfo proto.InternalMessageInfo

func (m *AppIndexGetBaseMInfoListResp_ModuleInfo) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *AppIndexGetBaseMInfoListResp_ModuleInfo) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *AppIndexGetBaseMInfoListResp_ModuleInfo) GetPic() string {
	if m != nil {
		return m.Pic
	}
	return ""
}

func (m *AppIndexGetBaseMInfoListResp_ModuleInfo) GetType() int64 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *AppIndexGetBaseMInfoListResp_ModuleInfo) GetLink() string {
	if m != nil {
		return m.Link
	}
	return ""
}

func (m *AppIndexGetBaseMInfoListResp_ModuleInfo) GetSort() int64 {
	if m != nil {
		return m.Sort
	}
	return 0
}

func (m *AppIndexGetBaseMInfoListResp_ModuleInfo) GetCount() int64 {
	if m != nil {
		return m.Count
	}
	return 0
}

type AppIndexGetRoomListByIdsReq struct {
	// 模块ids
	Ids []int64 `protobuf:"varint,1,rep,packed,name=ids" json:"ids"`
}

func (m *AppIndexGetRoomListByIdsReq) Reset()         { *m = AppIndexGetRoomListByIdsReq{} }
func (m *AppIndexGetRoomListByIdsReq) String() string { return proto.CompactTextString(m) }
func (*AppIndexGetRoomListByIdsReq) ProtoMessage()    {}
func (*AppIndexGetRoomListByIdsReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_AppIndex_45d5ad418ac35a63, []int{4}
}
func (m *AppIndexGetRoomListByIdsReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AppIndexGetRoomListByIdsReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AppIndexGetRoomListByIdsReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *AppIndexGetRoomListByIdsReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AppIndexGetRoomListByIdsReq.Merge(dst, src)
}
func (m *AppIndexGetRoomListByIdsReq) XXX_Size() int {
	return m.Size()
}
func (m *AppIndexGetRoomListByIdsReq) XXX_DiscardUnknown() {
	xxx_messageInfo_AppIndexGetRoomListByIdsReq.DiscardUnknown(m)
}

var xxx_messageInfo_AppIndexGetRoomListByIdsReq proto.InternalMessageInfo

func (m *AppIndexGetRoomListByIdsReq) GetIds() []int64 {
	if m != nil {
		return m.Ids
	}
	return nil
}

type AppIndexGetRoomListByIdsResp struct {
	// code
	Code int64 `protobuf:"varint,1,opt,name=code,proto3" json:"code"`
	// msg
	Msg string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg"`
	//
	Data map[int64]*AppIndexGetRoomListByIdsResp_RoomList `protobuf:"bytes,3,rep,name=data" json:"data" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *AppIndexGetRoomListByIdsResp) Reset()         { *m = AppIndexGetRoomListByIdsResp{} }
func (m *AppIndexGetRoomListByIdsResp) String() string { return proto.CompactTextString(m) }
func (*AppIndexGetRoomListByIdsResp) ProtoMessage()    {}
func (*AppIndexGetRoomListByIdsResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_AppIndex_45d5ad418ac35a63, []int{5}
}
func (m *AppIndexGetRoomListByIdsResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AppIndexGetRoomListByIdsResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AppIndexGetRoomListByIdsResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *AppIndexGetRoomListByIdsResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AppIndexGetRoomListByIdsResp.Merge(dst, src)
}
func (m *AppIndexGetRoomListByIdsResp) XXX_Size() int {
	return m.Size()
}
func (m *AppIndexGetRoomListByIdsResp) XXX_DiscardUnknown() {
	xxx_messageInfo_AppIndexGetRoomListByIdsResp.DiscardUnknown(m)
}

var xxx_messageInfo_AppIndexGetRoomListByIdsResp proto.InternalMessageInfo

func (m *AppIndexGetRoomListByIdsResp) GetCode() int64 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *AppIndexGetRoomListByIdsResp) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func (m *AppIndexGetRoomListByIdsResp) GetData() map[int64]*AppIndexGetRoomListByIdsResp_RoomList {
	if m != nil {
		return m.Data
	}
	return nil
}

type AppIndexGetRoomListByIdsResp_RoomInfo struct {
	// 房间id
	Roomid int64 `protobuf:"varint,1,opt,name=roomid,proto3" json:"roomid"`
	// 房间标题
	Title string `protobuf:"bytes,2,opt,name=title,proto3" json:"title"`
	// 用户名
	Uname string `protobuf:"bytes,3,opt,name=uname,proto3" json:"uname"`
	// 在线人数
	Online int64 `protobuf:"varint,4,opt,name=online,proto3" json:"online"`
	// 封面，封面现在有3种：关键帧、封面图、秀场封面（正方形的），返回哪个由后端决定
	Cover string `protobuf:"bytes,5,opt,name=cover,proto3" json:"cover"`
	// 链接
	Link string `protobuf:"bytes,6,opt,name=link,proto3" json:"link"`
	// 主播头像
	Face string `protobuf:"bytes,7,opt,name=face,proto3" json:"face"`
	// 父分区id
	AreaV2ParentId int64 `protobuf:"varint,8,opt,name=area_v2_parent_id,json=areaV2ParentId,proto3" json:"area_v2_parent_id"`
	// 父分区名称
	AreaV2ParentName string `protobuf:"bytes,9,opt,name=area_v2_parent_name,json=areaV2ParentName,proto3" json:"area_v2_parent_name"`
	// 二级分区id
	AreaV2Id int64 `protobuf:"varint,10,opt,name=area_v2_id,json=areaV2Id,proto3" json:"area_v2_id"`
	// 二级分区名
	AreaV2Name string `protobuf:"bytes,11,opt,name=area_v2_name,json=areaV2Name,proto3" json:"area_v2_name"`
	// 秒开播放串 h264
	PlayUrl string `protobuf:"bytes,12,opt,name=play_url,json=playUrl,proto3" json:"play_url"`
	// 秒开播放串 h265
	PlayUrlH265 string `protobuf:"bytes,13,opt,name=play_url_h265,json=playUrlH265,proto3" json:"play_url_h265"`
	// 当前清晰度,清晰度 0:默认码率, 2:800 3:1500 4:原画
	CurrentQuality int64 `protobuf:"varint,14,opt,name=current_quality,json=currentQuality,proto3" json:"current_quality"`
	// 当前拥有清晰度列表
	AcceptQuality []int64 `protobuf:"varint,15,rep,packed,name=accept_quality,json=acceptQuality" json:"accept_quality"`
	// 横竖屏  0:横屏 1:竖屏 -1:异常情况
	BroadcastType int64 `protobuf:"varint,16,opt,name=broadcast_type,json=broadcastType,proto3" json:"broadcast_type"`
	// 新版角标-右上 默认为空 只能是文字！！！@古月 【5.29显示更新】：服务端还是吐右上（兼容老版），5.29显示在左上
	PendentRu string `protobuf:"bytes,17,opt,name=pendent_ru,json=pendentRu,proto3" json:"pendent_ru"`
	// 【5.29显示更新】：服务端还是吐右上，5.29客户端显示在左上,对应的背景图片
	PendentRuPic string `protobuf:"bytes,18,opt,name=pendent_ru_pic,json=pendentRuPic,proto3" json:"pendent_ru_pic"`
	// 新版移动端角标色值-右上
	PendentRuColor string `protobuf:"bytes,19,opt,name=pendent_ru_color,json=pendentRuColor,proto3" json:"pendent_ru_color"`
	// 推荐类型 1：人气 2：营收 3：运营强推 4：天马推荐（暂定）用于客户端打点
	RecType int64 `protobuf:"varint,20,opt,name=rec_type,json=recType,proto3" json:"rec_type"`
	// 当前房间pk_id，默认0 用于客户端打点
	PkId int64 `protobuf:"varint,21,opt,name=pk_id,json=pkId,proto3" json:"pk_id"`
}

func (m *AppIndexGetRoomListByIdsResp_RoomInfo) Reset()         { *m = AppIndexGetRoomListByIdsResp_RoomInfo{} }
func (m *AppIndexGetRoomListByIdsResp_RoomInfo) String() string { return proto.CompactTextString(m) }
func (*AppIndexGetRoomListByIdsResp_RoomInfo) ProtoMessage()    {}
func (*AppIndexGetRoomListByIdsResp_RoomInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_AppIndex_45d5ad418ac35a63, []int{5, 1}
}
func (m *AppIndexGetRoomListByIdsResp_RoomInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AppIndexGetRoomListByIdsResp_RoomInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AppIndexGetRoomListByIdsResp_RoomInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *AppIndexGetRoomListByIdsResp_RoomInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AppIndexGetRoomListByIdsResp_RoomInfo.Merge(dst, src)
}
func (m *AppIndexGetRoomListByIdsResp_RoomInfo) XXX_Size() int {
	return m.Size()
}
func (m *AppIndexGetRoomListByIdsResp_RoomInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_AppIndexGetRoomListByIdsResp_RoomInfo.DiscardUnknown(m)
}

var xxx_messageInfo_AppIndexGetRoomListByIdsResp_RoomInfo proto.InternalMessageInfo

func (m *AppIndexGetRoomListByIdsResp_RoomInfo) GetRoomid() int64 {
	if m != nil {
		return m.Roomid
	}
	return 0
}

func (m *AppIndexGetRoomListByIdsResp_RoomInfo) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *AppIndexGetRoomListByIdsResp_RoomInfo) GetUname() string {
	if m != nil {
		return m.Uname
	}
	return ""
}

func (m *AppIndexGetRoomListByIdsResp_RoomInfo) GetOnline() int64 {
	if m != nil {
		return m.Online
	}
	return 0
}

func (m *AppIndexGetRoomListByIdsResp_RoomInfo) GetCover() string {
	if m != nil {
		return m.Cover
	}
	return ""
}

func (m *AppIndexGetRoomListByIdsResp_RoomInfo) GetLink() string {
	if m != nil {
		return m.Link
	}
	return ""
}

func (m *AppIndexGetRoomListByIdsResp_RoomInfo) GetFace() string {
	if m != nil {
		return m.Face
	}
	return ""
}

func (m *AppIndexGetRoomListByIdsResp_RoomInfo) GetAreaV2ParentId() int64 {
	if m != nil {
		return m.AreaV2ParentId
	}
	return 0
}

func (m *AppIndexGetRoomListByIdsResp_RoomInfo) GetAreaV2ParentName() string {
	if m != nil {
		return m.AreaV2ParentName
	}
	return ""
}

func (m *AppIndexGetRoomListByIdsResp_RoomInfo) GetAreaV2Id() int64 {
	if m != nil {
		return m.AreaV2Id
	}
	return 0
}

func (m *AppIndexGetRoomListByIdsResp_RoomInfo) GetAreaV2Name() string {
	if m != nil {
		return m.AreaV2Name
	}
	return ""
}

func (m *AppIndexGetRoomListByIdsResp_RoomInfo) GetPlayUrl() string {
	if m != nil {
		return m.PlayUrl
	}
	return ""
}

func (m *AppIndexGetRoomListByIdsResp_RoomInfo) GetPlayUrlH265() string {
	if m != nil {
		return m.PlayUrlH265
	}
	return ""
}

func (m *AppIndexGetRoomListByIdsResp_RoomInfo) GetCurrentQuality() int64 {
	if m != nil {
		return m.CurrentQuality
	}
	return 0
}

func (m *AppIndexGetRoomListByIdsResp_RoomInfo) GetAcceptQuality() []int64 {
	if m != nil {
		return m.AcceptQuality
	}
	return nil
}

func (m *AppIndexGetRoomListByIdsResp_RoomInfo) GetBroadcastType() int64 {
	if m != nil {
		return m.BroadcastType
	}
	return 0
}

func (m *AppIndexGetRoomListByIdsResp_RoomInfo) GetPendentRu() string {
	if m != nil {
		return m.PendentRu
	}
	return ""
}

func (m *AppIndexGetRoomListByIdsResp_RoomInfo) GetPendentRuPic() string {
	if m != nil {
		return m.PendentRuPic
	}
	return ""
}

func (m *AppIndexGetRoomListByIdsResp_RoomInfo) GetPendentRuColor() string {
	if m != nil {
		return m.PendentRuColor
	}
	return ""
}

func (m *AppIndexGetRoomListByIdsResp_RoomInfo) GetRecType() int64 {
	if m != nil {
		return m.RecType
	}
	return 0
}

func (m *AppIndexGetRoomListByIdsResp_RoomInfo) GetPkId() int64 {
	if m != nil {
		return m.PkId
	}
	return 0
}

type AppIndexGetRoomListByIdsResp_RoomList struct {
	//
	List []*AppIndexGetRoomListByIdsResp_RoomInfo `protobuf:"bytes,1,rep,name=list" json:"list"`
}

func (m *AppIndexGetRoomListByIdsResp_RoomList) Reset()         { *m = AppIndexGetRoomListByIdsResp_RoomList{} }
func (m *AppIndexGetRoomListByIdsResp_RoomList) String() string { return proto.CompactTextString(m) }
func (*AppIndexGetRoomListByIdsResp_RoomList) ProtoMessage()    {}
func (*AppIndexGetRoomListByIdsResp_RoomList) Descriptor() ([]byte, []int) {
	return fileDescriptor_AppIndex_45d5ad418ac35a63, []int{5, 2}
}
func (m *AppIndexGetRoomListByIdsResp_RoomList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AppIndexGetRoomListByIdsResp_RoomList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AppIndexGetRoomListByIdsResp_RoomList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *AppIndexGetRoomListByIdsResp_RoomList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AppIndexGetRoomListByIdsResp_RoomList.Merge(dst, src)
}
func (m *AppIndexGetRoomListByIdsResp_RoomList) XXX_Size() int {
	return m.Size()
}
func (m *AppIndexGetRoomListByIdsResp_RoomList) XXX_DiscardUnknown() {
	xxx_messageInfo_AppIndexGetRoomListByIdsResp_RoomList.DiscardUnknown(m)
}

var xxx_messageInfo_AppIndexGetRoomListByIdsResp_RoomList proto.InternalMessageInfo

func (m *AppIndexGetRoomListByIdsResp_RoomList) GetList() []*AppIndexGetRoomListByIdsResp_RoomInfo {
	if m != nil {
		return m.List
	}
	return nil
}

type AppIndexGetPicListByIdsReq struct {
	// 模块ids
	Ids []int64 `protobuf:"varint,1,rep,packed,name=ids" json:"ids"`
}

func (m *AppIndexGetPicListByIdsReq) Reset()         { *m = AppIndexGetPicListByIdsReq{} }
func (m *AppIndexGetPicListByIdsReq) String() string { return proto.CompactTextString(m) }
func (*AppIndexGetPicListByIdsReq) ProtoMessage()    {}
func (*AppIndexGetPicListByIdsReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_AppIndex_45d5ad418ac35a63, []int{6}
}
func (m *AppIndexGetPicListByIdsReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AppIndexGetPicListByIdsReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AppIndexGetPicListByIdsReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *AppIndexGetPicListByIdsReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AppIndexGetPicListByIdsReq.Merge(dst, src)
}
func (m *AppIndexGetPicListByIdsReq) XXX_Size() int {
	return m.Size()
}
func (m *AppIndexGetPicListByIdsReq) XXX_DiscardUnknown() {
	xxx_messageInfo_AppIndexGetPicListByIdsReq.DiscardUnknown(m)
}

var xxx_messageInfo_AppIndexGetPicListByIdsReq proto.InternalMessageInfo

func (m *AppIndexGetPicListByIdsReq) GetIds() []int64 {
	if m != nil {
		return m.Ids
	}
	return nil
}

type AppIndexGetPicListByIdsResp struct {
	// code
	Code int64 `protobuf:"varint,1,opt,name=code,proto3" json:"code"`
	// msg
	Msg string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg"`
	//
	Data map[int64]*AppIndexGetPicListByIdsResp_ItemList `protobuf:"bytes,3,rep,name=data" json:"data" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *AppIndexGetPicListByIdsResp) Reset()         { *m = AppIndexGetPicListByIdsResp{} }
func (m *AppIndexGetPicListByIdsResp) String() string { return proto.CompactTextString(m) }
func (*AppIndexGetPicListByIdsResp) ProtoMessage()    {}
func (*AppIndexGetPicListByIdsResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_AppIndex_45d5ad418ac35a63, []int{7}
}
func (m *AppIndexGetPicListByIdsResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AppIndexGetPicListByIdsResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AppIndexGetPicListByIdsResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *AppIndexGetPicListByIdsResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AppIndexGetPicListByIdsResp.Merge(dst, src)
}
func (m *AppIndexGetPicListByIdsResp) XXX_Size() int {
	return m.Size()
}
func (m *AppIndexGetPicListByIdsResp) XXX_DiscardUnknown() {
	xxx_messageInfo_AppIndexGetPicListByIdsResp.DiscardUnknown(m)
}

var xxx_messageInfo_AppIndexGetPicListByIdsResp proto.InternalMessageInfo

func (m *AppIndexGetPicListByIdsResp) GetCode() int64 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *AppIndexGetPicListByIdsResp) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func (m *AppIndexGetPicListByIdsResp) GetData() map[int64]*AppIndexGetPicListByIdsResp_ItemList {
	if m != nil {
		return m.Data
	}
	return nil
}

type AppIndexGetPicListByIdsResp_Item struct {
	// 唯一标识id
	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id"`
	// 图片url
	Pic string `protobuf:"bytes,2,opt,name=pic,proto3" json:"pic"`
	// 跳转url
	Link string `protobuf:"bytes,3,opt,name=link,proto3" json:"link"`
	// 图片标题
	Title string `protobuf:"bytes,4,opt,name=title,proto3" json:"title"`
}

func (m *AppIndexGetPicListByIdsResp_Item) Reset()         { *m = AppIndexGetPicListByIdsResp_Item{} }
func (m *AppIndexGetPicListByIdsResp_Item) String() string { return proto.CompactTextString(m) }
func (*AppIndexGetPicListByIdsResp_Item) ProtoMessage()    {}
func (*AppIndexGetPicListByIdsResp_Item) Descriptor() ([]byte, []int) {
	return fileDescriptor_AppIndex_45d5ad418ac35a63, []int{7, 1}
}
func (m *AppIndexGetPicListByIdsResp_Item) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AppIndexGetPicListByIdsResp_Item) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AppIndexGetPicListByIdsResp_Item.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *AppIndexGetPicListByIdsResp_Item) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AppIndexGetPicListByIdsResp_Item.Merge(dst, src)
}
func (m *AppIndexGetPicListByIdsResp_Item) XXX_Size() int {
	return m.Size()
}
func (m *AppIndexGetPicListByIdsResp_Item) XXX_DiscardUnknown() {
	xxx_messageInfo_AppIndexGetPicListByIdsResp_Item.DiscardUnknown(m)
}

var xxx_messageInfo_AppIndexGetPicListByIdsResp_Item proto.InternalMessageInfo

func (m *AppIndexGetPicListByIdsResp_Item) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *AppIndexGetPicListByIdsResp_Item) GetPic() string {
	if m != nil {
		return m.Pic
	}
	return ""
}

func (m *AppIndexGetPicListByIdsResp_Item) GetLink() string {
	if m != nil {
		return m.Link
	}
	return ""
}

func (m *AppIndexGetPicListByIdsResp_Item) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

type AppIndexGetPicListByIdsResp_ItemList struct {
	//
	List []*AppIndexGetPicListByIdsResp_Item `protobuf:"bytes,1,rep,name=list" json:"list"`
}

func (m *AppIndexGetPicListByIdsResp_ItemList) Reset()         { *m = AppIndexGetPicListByIdsResp_ItemList{} }
func (m *AppIndexGetPicListByIdsResp_ItemList) String() string { return proto.CompactTextString(m) }
func (*AppIndexGetPicListByIdsResp_ItemList) ProtoMessage()    {}
func (*AppIndexGetPicListByIdsResp_ItemList) Descriptor() ([]byte, []int) {
	return fileDescriptor_AppIndex_45d5ad418ac35a63, []int{7, 2}
}
func (m *AppIndexGetPicListByIdsResp_ItemList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AppIndexGetPicListByIdsResp_ItemList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AppIndexGetPicListByIdsResp_ItemList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *AppIndexGetPicListByIdsResp_ItemList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AppIndexGetPicListByIdsResp_ItemList.Merge(dst, src)
}
func (m *AppIndexGetPicListByIdsResp_ItemList) XXX_Size() int {
	return m.Size()
}
func (m *AppIndexGetPicListByIdsResp_ItemList) XXX_DiscardUnknown() {
	xxx_messageInfo_AppIndexGetPicListByIdsResp_ItemList.DiscardUnknown(m)
}

var xxx_messageInfo_AppIndexGetPicListByIdsResp_ItemList proto.InternalMessageInfo

func (m *AppIndexGetPicListByIdsResp_ItemList) GetList() []*AppIndexGetPicListByIdsResp_Item {
	if m != nil {
		return m.List
	}
	return nil
}

type AppIndexGetIndexBannerReq struct {
	// 平台
	Platform string `protobuf:"bytes,1,opt,name=platform,proto3" json:"platform"`
	// 设备
	Device string `protobuf:"bytes,2,opt,name=device,proto3" json:"device"`
	// 版本号
	Build int64 `protobuf:"varint,3,opt,name=build,proto3" json:"build"`
}

func (m *AppIndexGetIndexBannerReq) Reset()         { *m = AppIndexGetIndexBannerReq{} }
func (m *AppIndexGetIndexBannerReq) String() string { return proto.CompactTextString(m) }
func (*AppIndexGetIndexBannerReq) ProtoMessage()    {}
func (*AppIndexGetIndexBannerReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_AppIndex_45d5ad418ac35a63, []int{8}
}
func (m *AppIndexGetIndexBannerReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AppIndexGetIndexBannerReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AppIndexGetIndexBannerReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *AppIndexGetIndexBannerReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AppIndexGetIndexBannerReq.Merge(dst, src)
}
func (m *AppIndexGetIndexBannerReq) XXX_Size() int {
	return m.Size()
}
func (m *AppIndexGetIndexBannerReq) XXX_DiscardUnknown() {
	xxx_messageInfo_AppIndexGetIndexBannerReq.DiscardUnknown(m)
}

var xxx_messageInfo_AppIndexGetIndexBannerReq proto.InternalMessageInfo

func (m *AppIndexGetIndexBannerReq) GetPlatform() string {
	if m != nil {
		return m.Platform
	}
	return ""
}

func (m *AppIndexGetIndexBannerReq) GetDevice() string {
	if m != nil {
		return m.Device
	}
	return ""
}

func (m *AppIndexGetIndexBannerReq) GetBuild() int64 {
	if m != nil {
		return m.Build
	}
	return 0
}

type AppIndexGetIndexBannerResp struct {
	// code
	Code int64 `protobuf:"varint,1,opt,name=code,proto3" json:"code"`
	// msg
	Msg string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg"`
	//
	Data *AppIndexGetIndexBannerResp_Data `protobuf:"bytes,3,opt,name=data" json:"data"`
}

func (m *AppIndexGetIndexBannerResp) Reset()         { *m = AppIndexGetIndexBannerResp{} }
func (m *AppIndexGetIndexBannerResp) String() string { return proto.CompactTextString(m) }
func (*AppIndexGetIndexBannerResp) ProtoMessage()    {}
func (*AppIndexGetIndexBannerResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_AppIndex_45d5ad418ac35a63, []int{9}
}
func (m *AppIndexGetIndexBannerResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AppIndexGetIndexBannerResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AppIndexGetIndexBannerResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *AppIndexGetIndexBannerResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AppIndexGetIndexBannerResp.Merge(dst, src)
}
func (m *AppIndexGetIndexBannerResp) XXX_Size() int {
	return m.Size()
}
func (m *AppIndexGetIndexBannerResp) XXX_DiscardUnknown() {
	xxx_messageInfo_AppIndexGetIndexBannerResp.DiscardUnknown(m)
}

var xxx_messageInfo_AppIndexGetIndexBannerResp proto.InternalMessageInfo

func (m *AppIndexGetIndexBannerResp) GetCode() int64 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *AppIndexGetIndexBannerResp) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func (m *AppIndexGetIndexBannerResp) GetData() *AppIndexGetIndexBannerResp_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

type AppIndexGetIndexBannerResp_Data struct {
	// banner id
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id"`
	// 图片地址
	Pic string `protobuf:"bytes,2,opt,name=pic,proto3" json:"pic"`
	// 图片地址
	Img string `protobuf:"bytes,3,opt,name=img,proto3" json:"img"`
	// 跳转链接
	Link string `protobuf:"bytes,4,opt,name=link,proto3" json:"link"`
	// 标题
	Title string `protobuf:"bytes,5,opt,name=title,proto3" json:"title"`
	// 第几帧
	Position string `protobuf:"bytes,6,opt,name=position,proto3" json:"position"`
	// 权重
	SortNum string `protobuf:"bytes,7,opt,name=sort_num,json=sortNum,proto3" json:"sort_num"`
	// 注释
	Remark string `protobuf:"bytes,8,opt,name=remark,proto3" json:"remark"`
}

func (m *AppIndexGetIndexBannerResp_Data) Reset()         { *m = AppIndexGetIndexBannerResp_Data{} }
func (m *AppIndexGetIndexBannerResp_Data) String() string { return proto.CompactTextString(m) }
func (*AppIndexGetIndexBannerResp_Data) ProtoMessage()    {}
func (*AppIndexGetIndexBannerResp_Data) Descriptor() ([]byte, []int) {
	return fileDescriptor_AppIndex_45d5ad418ac35a63, []int{9, 0}
}
func (m *AppIndexGetIndexBannerResp_Data) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AppIndexGetIndexBannerResp_Data) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AppIndexGetIndexBannerResp_Data.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *AppIndexGetIndexBannerResp_Data) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AppIndexGetIndexBannerResp_Data.Merge(dst, src)
}
func (m *AppIndexGetIndexBannerResp_Data) XXX_Size() int {
	return m.Size()
}
func (m *AppIndexGetIndexBannerResp_Data) XXX_DiscardUnknown() {
	xxx_messageInfo_AppIndexGetIndexBannerResp_Data.DiscardUnknown(m)
}

var xxx_messageInfo_AppIndexGetIndexBannerResp_Data proto.InternalMessageInfo

func (m *AppIndexGetIndexBannerResp_Data) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *AppIndexGetIndexBannerResp_Data) GetPic() string {
	if m != nil {
		return m.Pic
	}
	return ""
}

func (m *AppIndexGetIndexBannerResp_Data) GetImg() string {
	if m != nil {
		return m.Img
	}
	return ""
}

func (m *AppIndexGetIndexBannerResp_Data) GetLink() string {
	if m != nil {
		return m.Link
	}
	return ""
}

func (m *AppIndexGetIndexBannerResp_Data) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *AppIndexGetIndexBannerResp_Data) GetPosition() string {
	if m != nil {
		return m.Position
	}
	return ""
}

func (m *AppIndexGetIndexBannerResp_Data) GetSortNum() string {
	if m != nil {
		return m.SortNum
	}
	return ""
}

func (m *AppIndexGetIndexBannerResp_Data) GetRemark() string {
	if m != nil {
		return m.Remark
	}
	return ""
}

type AppIndexGetAllRawListReq struct {
	// 模块唯一标识，不传表示获取所有模块
	ModuleId int64 `protobuf:"varint,1,opt,name=module_id,json=moduleId,proto3" json:"module_id"`
}

func (m *AppIndexGetAllRawListReq) Reset()         { *m = AppIndexGetAllRawListReq{} }
func (m *AppIndexGetAllRawListReq) String() string { return proto.CompactTextString(m) }
func (*AppIndexGetAllRawListReq) ProtoMessage()    {}
func (*AppIndexGetAllRawListReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_AppIndex_45d5ad418ac35a63, []int{10}
}
func (m *AppIndexGetAllRawListReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AppIndexGetAllRawListReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AppIndexGetAllRawListReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *AppIndexGetAllRawListReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AppIndexGetAllRawListReq.Merge(dst, src)
}
func (m *AppIndexGetAllRawListReq) XXX_Size() int {
	return m.Size()
}
func (m *AppIndexGetAllRawListReq) XXX_DiscardUnknown() {
	xxx_messageInfo_AppIndexGetAllRawListReq.DiscardUnknown(m)
}

var xxx_messageInfo_AppIndexGetAllRawListReq proto.InternalMessageInfo

func (m *AppIndexGetAllRawListReq) GetModuleId() int64 {
	if m != nil {
		return m.ModuleId
	}
	return 0
}

type AppIndexGetAllRawListResp struct {
	// code
	Code int64 `protobuf:"varint,1,opt,name=code,proto3" json:"code"`
	// msg
	Msg string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg"`
	//
	Data *AppIndexGetAllRawListResp_Data `protobuf:"bytes,3,opt,name=data" json:"data"`
}

func (m *AppIndexGetAllRawListResp) Reset()         { *m = AppIndexGetAllRawListResp{} }
func (m *AppIndexGetAllRawListResp) String() string { return proto.CompactTextString(m) }
func (*AppIndexGetAllRawListResp) ProtoMessage()    {}
func (*AppIndexGetAllRawListResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_AppIndex_45d5ad418ac35a63, []int{11}
}
func (m *AppIndexGetAllRawListResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AppIndexGetAllRawListResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AppIndexGetAllRawListResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *AppIndexGetAllRawListResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AppIndexGetAllRawListResp.Merge(dst, src)
}
func (m *AppIndexGetAllRawListResp) XXX_Size() int {
	return m.Size()
}
func (m *AppIndexGetAllRawListResp) XXX_DiscardUnknown() {
	xxx_messageInfo_AppIndexGetAllRawListResp.DiscardUnknown(m)
}

var xxx_messageInfo_AppIndexGetAllRawListResp proto.InternalMessageInfo

func (m *AppIndexGetAllRawListResp) GetCode() int64 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *AppIndexGetAllRawListResp) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func (m *AppIndexGetAllRawListResp) GetData() *AppIndexGetAllRawListResp_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

type AppIndexGetAllRawListResp_ModuleInfo struct {
	// 模块id
	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id"`
	// 标题
	Title string `protobuf:"bytes,2,opt,name=title,proto3" json:"title"`
	// 图标
	Pic string `protobuf:"bytes,3,opt,name=pic,proto3" json:"pic"`
	// list数据类型  1: banner 2: 导航栏 3: 运营推荐分区-标准 4: 运营推荐分区-方 5：排行榜（小时榜） 6: 推荐主播-标准 7: 推荐主播-方 8:我的关注(用户相关) 9：一级分区-标准 10：一级分区-方 11: 活动卡片 12：常用标签推荐入口(用户相关) 13：常用标签推荐房间列表(用户相关) 14：大航海提示入口
	Type int64 `protobuf:"varint,4,opt,name=type,proto3" json:"type"`
	// 跳转链接
	Link string `protobuf:"bytes,5,opt,name=link,proto3" json:"link"`
	// 该模块数据总数
	Count int64 `protobuf:"varint,6,opt,name=count,proto3" json:"count"`
	// 二级标题，目前只有小时榜才会返
	SubTitle string `protobuf:"bytes,7,opt,name=sub_title,json=subTitle,proto3" json:"sub_title"`
}

func (m *AppIndexGetAllRawListResp_ModuleInfo) Reset()         { *m = AppIndexGetAllRawListResp_ModuleInfo{} }
func (m *AppIndexGetAllRawListResp_ModuleInfo) String() string { return proto.CompactTextString(m) }
func (*AppIndexGetAllRawListResp_ModuleInfo) ProtoMessage()    {}
func (*AppIndexGetAllRawListResp_ModuleInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_AppIndex_45d5ad418ac35a63, []int{11, 0}
}
func (m *AppIndexGetAllRawListResp_ModuleInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AppIndexGetAllRawListResp_ModuleInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AppIndexGetAllRawListResp_ModuleInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *AppIndexGetAllRawListResp_ModuleInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AppIndexGetAllRawListResp_ModuleInfo.Merge(dst, src)
}
func (m *AppIndexGetAllRawListResp_ModuleInfo) XXX_Size() int {
	return m.Size()
}
func (m *AppIndexGetAllRawListResp_ModuleInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_AppIndexGetAllRawListResp_ModuleInfo.DiscardUnknown(m)
}

var xxx_messageInfo_AppIndexGetAllRawListResp_ModuleInfo proto.InternalMessageInfo

func (m *AppIndexGetAllRawListResp_ModuleInfo) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *AppIndexGetAllRawListResp_ModuleInfo) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *AppIndexGetAllRawListResp_ModuleInfo) GetPic() string {
	if m != nil {
		return m.Pic
	}
	return ""
}

func (m *AppIndexGetAllRawListResp_ModuleInfo) GetType() int64 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *AppIndexGetAllRawListResp_ModuleInfo) GetLink() string {
	if m != nil {
		return m.Link
	}
	return ""
}

func (m *AppIndexGetAllRawListResp_ModuleInfo) GetCount() int64 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *AppIndexGetAllRawListResp_ModuleInfo) GetSubTitle() string {
	if m != nil {
		return m.SubTitle
	}
	return ""
}

type AppIndexGetAllRawListResp_RoomList struct {
	// 房间id
	Roomid int64 `protobuf:"varint,1,opt,name=roomid,proto3" json:"roomid"`
	// 房间标题
	Title string `protobuf:"bytes,2,opt,name=title,proto3" json:"title"`
	// 用户名
	Uname string `protobuf:"bytes,3,opt,name=uname,proto3" json:"uname"`
	// 在线人数
	Online int64 `protobuf:"varint,4,opt,name=online,proto3" json:"online"`
	// 封面，封面现在有3种：关键帧、封面图、秀场封面（正方形的），返回哪个由后端决定
	Cover string `protobuf:"bytes,5,opt,name=cover,proto3" json:"cover"`
	// 链接
	Link string `protobuf:"bytes,6,opt,name=link,proto3" json:"link"`
	// 主播头像
	Face string `protobuf:"bytes,7,opt,name=face,proto3" json:"face"`
	// 父分区id
	AreaV2ParentId int64 `protobuf:"varint,8,opt,name=area_v2_parent_id,json=areaV2ParentId,proto3" json:"area_v2_parent_id"`
	// 父分区名称
	AreaV2ParentName string `protobuf:"bytes,9,opt,name=area_v2_parent_name,json=areaV2ParentName,proto3" json:"area_v2_parent_name"`
	// 二级分区id
	AreaV2Id int64 `protobuf:"varint,10,opt,name=area_v2_id,json=areaV2Id,proto3" json:"area_v2_id"`
	// 二级分区名
	AreaV2Name string `protobuf:"bytes,11,opt,name=area_v2_name,json=areaV2Name,proto3" json:"area_v2_name"`
	// 秒开播放串
	PlayUrl string `protobuf:"bytes,12,opt,name=play_url,json=playUrl,proto3" json:"play_url"`
	// 当前清晰度,清晰度 0:默认码率, 2:800 3:1500 4:原画
	CurrentQuality int64 `protobuf:"varint,13,opt,name=current_quality,json=currentQuality,proto3" json:"current_quality"`
	// 当前拥有清晰度列表
	AcceptQuality []int64 `protobuf:"varint,14,rep,packed,name=accept_quality,json=acceptQuality" json:"accept_quality"`
	// 横竖屏  0:横屏 1:竖屏 -1:异常情况
	BroadcastType int64 `protobuf:"varint,15,opt,name=broadcast_type,json=broadcastType,proto3" json:"broadcast_type"`
	// 新版角标-左下 默认为空 只能是文字！！！@古月  5.32+废弃
	PendentLd string `protobuf:"bytes,16,opt,name=pendent_ld,json=pendentLd,proto3" json:"pendent_ld"`
	// 新版角标-右上 默认为空 只能是文字！！！@古月 【5.29显示更新】：服务端还是吐右上（兼容老版），5.29显示在左上
	PendentRu string `protobuf:"bytes,17,opt,name=pendent_ru,json=pendentRu,proto3" json:"pendent_ru"`
	// 【5.29显示更新】：服务端还是吐右上，5.29客户端显示在左上,对应的背景图片
	PendentRuPic string `protobuf:"bytes,18,opt,name=pendent_ru_pic,json=pendentRuPic,proto3" json:"pendent_ru_pic"`
	// 新版移动端角标色值-左下 5.32+废弃
	PendentLdColor string `protobuf:"bytes,19,opt,name=pendent_ld_color,json=pendentLdColor,proto3" json:"pendent_ld_color"`
	// 新版移动端角标色值-右上
	PendentRuColor string `protobuf:"bytes,20,opt,name=pendent_ru_color,json=pendentRuColor,proto3" json:"pendent_ru_color"`
	// 推荐类型 1：人气 2：营收 3：运营强推 4：天马推荐（暂定）用于客户端打点
	RecType int64 `protobuf:"varint,21,opt,name=rec_type,json=recType,proto3" json:"rec_type"`
	// 当前房间pk_id，默认0 用于客户端打点
	PkId int64 `protobuf:"varint,22,opt,name=pk_id,json=pkId,proto3" json:"pk_id"`
}

func (m *AppIndexGetAllRawListResp_RoomList) Reset()         { *m = AppIndexGetAllRawListResp_RoomList{} }
func (m *AppIndexGetAllRawListResp_RoomList) String() string { return proto.CompactTextString(m) }
func (*AppIndexGetAllRawListResp_RoomList) ProtoMessage()    {}
func (*AppIndexGetAllRawListResp_RoomList) Descriptor() ([]byte, []int) {
	return fileDescriptor_AppIndex_45d5ad418ac35a63, []int{11, 1}
}
func (m *AppIndexGetAllRawListResp_RoomList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AppIndexGetAllRawListResp_RoomList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AppIndexGetAllRawListResp_RoomList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *AppIndexGetAllRawListResp_RoomList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AppIndexGetAllRawListResp_RoomList.Merge(dst, src)
}
func (m *AppIndexGetAllRawListResp_RoomList) XXX_Size() int {
	return m.Size()
}
func (m *AppIndexGetAllRawListResp_RoomList) XXX_DiscardUnknown() {
	xxx_messageInfo_AppIndexGetAllRawListResp_RoomList.DiscardUnknown(m)
}

var xxx_messageInfo_AppIndexGetAllRawListResp_RoomList proto.InternalMessageInfo

func (m *AppIndexGetAllRawListResp_RoomList) GetRoomid() int64 {
	if m != nil {
		return m.Roomid
	}
	return 0
}

func (m *AppIndexGetAllRawListResp_RoomList) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *AppIndexGetAllRawListResp_RoomList) GetUname() string {
	if m != nil {
		return m.Uname
	}
	return ""
}

func (m *AppIndexGetAllRawListResp_RoomList) GetOnline() int64 {
	if m != nil {
		return m.Online
	}
	return 0
}

func (m *AppIndexGetAllRawListResp_RoomList) GetCover() string {
	if m != nil {
		return m.Cover
	}
	return ""
}

func (m *AppIndexGetAllRawListResp_RoomList) GetLink() string {
	if m != nil {
		return m.Link
	}
	return ""
}

func (m *AppIndexGetAllRawListResp_RoomList) GetFace() string {
	if m != nil {
		return m.Face
	}
	return ""
}

func (m *AppIndexGetAllRawListResp_RoomList) GetAreaV2ParentId() int64 {
	if m != nil {
		return m.AreaV2ParentId
	}
	return 0
}

func (m *AppIndexGetAllRawListResp_RoomList) GetAreaV2ParentName() string {
	if m != nil {
		return m.AreaV2ParentName
	}
	return ""
}

func (m *AppIndexGetAllRawListResp_RoomList) GetAreaV2Id() int64 {
	if m != nil {
		return m.AreaV2Id
	}
	return 0
}

func (m *AppIndexGetAllRawListResp_RoomList) GetAreaV2Name() string {
	if m != nil {
		return m.AreaV2Name
	}
	return ""
}

func (m *AppIndexGetAllRawListResp_RoomList) GetPlayUrl() string {
	if m != nil {
		return m.PlayUrl
	}
	return ""
}

func (m *AppIndexGetAllRawListResp_RoomList) GetCurrentQuality() int64 {
	if m != nil {
		return m.CurrentQuality
	}
	return 0
}

func (m *AppIndexGetAllRawListResp_RoomList) GetAcceptQuality() []int64 {
	if m != nil {
		return m.AcceptQuality
	}
	return nil
}

func (m *AppIndexGetAllRawListResp_RoomList) GetBroadcastType() int64 {
	if m != nil {
		return m.BroadcastType
	}
	return 0
}

func (m *AppIndexGetAllRawListResp_RoomList) GetPendentLd() string {
	if m != nil {
		return m.PendentLd
	}
	return ""
}

func (m *AppIndexGetAllRawListResp_RoomList) GetPendentRu() string {
	if m != nil {
		return m.PendentRu
	}
	return ""
}

func (m *AppIndexGetAllRawListResp_RoomList) GetPendentRuPic() string {
	if m != nil {
		return m.PendentRuPic
	}
	return ""
}

func (m *AppIndexGetAllRawListResp_RoomList) GetPendentLdColor() string {
	if m != nil {
		return m.PendentLdColor
	}
	return ""
}

func (m *AppIndexGetAllRawListResp_RoomList) GetPendentRuColor() string {
	if m != nil {
		return m.PendentRuColor
	}
	return ""
}

func (m *AppIndexGetAllRawListResp_RoomList) GetRecType() int64 {
	if m != nil {
		return m.RecType
	}
	return 0
}

func (m *AppIndexGetAllRawListResp_RoomList) GetPkId() int64 {
	if m != nil {
		return m.PkId
	}
	return 0
}

type AppIndexGetAllRawListResp_ModuleList struct {
	//
	ModuleInfo *AppIndexGetAllRawListResp_ModuleInfo `protobuf:"bytes,1,opt,name=module_info,json=moduleInfo" json:"module_info"`
	// 注意：可能是 PicList{id,pic,link,title}，需要根据ModuleInfo里的type判断
	List []*AppIndexGetAllRawListResp_RoomList `protobuf:"bytes,2,rep,name=list" json:"list"`
}

func (m *AppIndexGetAllRawListResp_ModuleList) Reset()         { *m = AppIndexGetAllRawListResp_ModuleList{} }
func (m *AppIndexGetAllRawListResp_ModuleList) String() string { return proto.CompactTextString(m) }
func (*AppIndexGetAllRawListResp_ModuleList) ProtoMessage()    {}
func (*AppIndexGetAllRawListResp_ModuleList) Descriptor() ([]byte, []int) {
	return fileDescriptor_AppIndex_45d5ad418ac35a63, []int{11, 2}
}
func (m *AppIndexGetAllRawListResp_ModuleList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AppIndexGetAllRawListResp_ModuleList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AppIndexGetAllRawListResp_ModuleList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *AppIndexGetAllRawListResp_ModuleList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AppIndexGetAllRawListResp_ModuleList.Merge(dst, src)
}
func (m *AppIndexGetAllRawListResp_ModuleList) XXX_Size() int {
	return m.Size()
}
func (m *AppIndexGetAllRawListResp_ModuleList) XXX_DiscardUnknown() {
	xxx_messageInfo_AppIndexGetAllRawListResp_ModuleList.DiscardUnknown(m)
}

var xxx_messageInfo_AppIndexGetAllRawListResp_ModuleList proto.InternalMessageInfo

func (m *AppIndexGetAllRawListResp_ModuleList) GetModuleInfo() *AppIndexGetAllRawListResp_ModuleInfo {
	if m != nil {
		return m.ModuleInfo
	}
	return nil
}

func (m *AppIndexGetAllRawListResp_ModuleList) GetList() []*AppIndexGetAllRawListResp_RoomList {
	if m != nil {
		return m.List
	}
	return nil
}

type AppIndexGetAllRawListResp_Data struct {
	// 客户端请求间隔 秒
	Interval int64 `protobuf:"varint,1,opt,name=interval,proto3" json:"interval"`
	// 模块列表
	ModuleList []*AppIndexGetAllRawListResp_ModuleList `protobuf:"bytes,2,rep,name=module_list,json=moduleList" json:"module_list"`
}

func (m *AppIndexGetAllRawListResp_Data) Reset()         { *m = AppIndexGetAllRawListResp_Data{} }
func (m *AppIndexGetAllRawListResp_Data) String() string { return proto.CompactTextString(m) }
func (*AppIndexGetAllRawListResp_Data) ProtoMessage()    {}
func (*AppIndexGetAllRawListResp_Data) Descriptor() ([]byte, []int) {
	return fileDescriptor_AppIndex_45d5ad418ac35a63, []int{11, 3}
}
func (m *AppIndexGetAllRawListResp_Data) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AppIndexGetAllRawListResp_Data) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AppIndexGetAllRawListResp_Data.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *AppIndexGetAllRawListResp_Data) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AppIndexGetAllRawListResp_Data.Merge(dst, src)
}
func (m *AppIndexGetAllRawListResp_Data) XXX_Size() int {
	return m.Size()
}
func (m *AppIndexGetAllRawListResp_Data) XXX_DiscardUnknown() {
	xxx_messageInfo_AppIndexGetAllRawListResp_Data.DiscardUnknown(m)
}

var xxx_messageInfo_AppIndexGetAllRawListResp_Data proto.InternalMessageInfo

func (m *AppIndexGetAllRawListResp_Data) GetInterval() int64 {
	if m != nil {
		return m.Interval
	}
	return 0
}

func (m *AppIndexGetAllRawListResp_Data) GetModuleList() []*AppIndexGetAllRawListResp_ModuleList {
	if m != nil {
		return m.ModuleList
	}
	return nil
}

type AppIndexGetMultiRoomListReq struct {
	// 子分区id列表(传入格式：多个以英文逗号分隔)
	AreaIds string `protobuf:"bytes,1,opt,name=area_ids,json=areaIds,proto3" json:"area_ids"`
	// 平台类型 web、ios、android
	Platform string `protobuf:"bytes,2,opt,name=platform,proto3" json:"platform"`
}

func (m *AppIndexGetMultiRoomListReq) Reset()         { *m = AppIndexGetMultiRoomListReq{} }
func (m *AppIndexGetMultiRoomListReq) String() string { return proto.CompactTextString(m) }
func (*AppIndexGetMultiRoomListReq) ProtoMessage()    {}
func (*AppIndexGetMultiRoomListReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_AppIndex_45d5ad418ac35a63, []int{12}
}
func (m *AppIndexGetMultiRoomListReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AppIndexGetMultiRoomListReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AppIndexGetMultiRoomListReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *AppIndexGetMultiRoomListReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AppIndexGetMultiRoomListReq.Merge(dst, src)
}
func (m *AppIndexGetMultiRoomListReq) XXX_Size() int {
	return m.Size()
}
func (m *AppIndexGetMultiRoomListReq) XXX_DiscardUnknown() {
	xxx_messageInfo_AppIndexGetMultiRoomListReq.DiscardUnknown(m)
}

var xxx_messageInfo_AppIndexGetMultiRoomListReq proto.InternalMessageInfo

func (m *AppIndexGetMultiRoomListReq) GetAreaIds() string {
	if m != nil {
		return m.AreaIds
	}
	return ""
}

func (m *AppIndexGetMultiRoomListReq) GetPlatform() string {
	if m != nil {
		return m.Platform
	}
	return ""
}

type AppIndexGetMultiRoomListResp struct {
	// code
	Code int64 `protobuf:"varint,1,opt,name=code,proto3" json:"code"`
	// msg
	Msg string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg"`
	// 房间信息map   分区id=>list
	Data []*AppIndexGetMultiRoomListResp_InfoList `protobuf:"bytes,3,rep,name=data" json:"data"`
}

func (m *AppIndexGetMultiRoomListResp) Reset()         { *m = AppIndexGetMultiRoomListResp{} }
func (m *AppIndexGetMultiRoomListResp) String() string { return proto.CompactTextString(m) }
func (*AppIndexGetMultiRoomListResp) ProtoMessage()    {}
func (*AppIndexGetMultiRoomListResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_AppIndex_45d5ad418ac35a63, []int{13}
}
func (m *AppIndexGetMultiRoomListResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AppIndexGetMultiRoomListResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AppIndexGetMultiRoomListResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *AppIndexGetMultiRoomListResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AppIndexGetMultiRoomListResp.Merge(dst, src)
}
func (m *AppIndexGetMultiRoomListResp) XXX_Size() int {
	return m.Size()
}
func (m *AppIndexGetMultiRoomListResp) XXX_DiscardUnknown() {
	xxx_messageInfo_AppIndexGetMultiRoomListResp.DiscardUnknown(m)
}

var xxx_messageInfo_AppIndexGetMultiRoomListResp proto.InternalMessageInfo

func (m *AppIndexGetMultiRoomListResp) GetCode() int64 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *AppIndexGetMultiRoomListResp) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func (m *AppIndexGetMultiRoomListResp) GetData() []*AppIndexGetMultiRoomListResp_InfoList {
	if m != nil {
		return m.Data
	}
	return nil
}

type AppIndexGetMultiRoomListResp_RoomList struct {
	// 房间id
	Roomid int64 `protobuf:"varint,1,opt,name=roomid,proto3" json:"roomid"`
	// 房间标题
	Title string `protobuf:"bytes,2,opt,name=title,proto3" json:"title"`
	// 用户名
	Uname string `protobuf:"bytes,3,opt,name=uname,proto3" json:"uname"`
	// 在线人数
	Online int64 `protobuf:"varint,4,opt,name=online,proto3" json:"online"`
	// 封面，封面现在有3种：关键帧、封面图、秀场封面（正方形的），返回哪个由后端决定
	Cover string `protobuf:"bytes,5,opt,name=cover,proto3" json:"cover"`
	// 链接
	Link string `protobuf:"bytes,6,opt,name=link,proto3" json:"link"`
	// 主播头像
	Face string `protobuf:"bytes,7,opt,name=face,proto3" json:"face"`
	// 父分区id
	AreaV2ParentId int64 `protobuf:"varint,8,opt,name=area_v2_parent_id,json=areaV2ParentId,proto3" json:"area_v2_parent_id"`
	// 父分区名称
	AreaV2ParentName string `protobuf:"bytes,9,opt,name=area_v2_parent_name,json=areaV2ParentName,proto3" json:"area_v2_parent_name"`
	// 二级分区id
	AreaV2Id int64 `protobuf:"varint,10,opt,name=area_v2_id,json=areaV2Id,proto3" json:"area_v2_id"`
	// 二级分区名
	AreaV2Name string `protobuf:"bytes,11,opt,name=area_v2_name,json=areaV2Name,proto3" json:"area_v2_name"`
	// 秒开播放串 h264
	PlayUrl string `protobuf:"bytes,12,opt,name=play_url,json=playUrl,proto3" json:"play_url"`
	// 秒开播放串 h265
	PlayUrlH265 string `protobuf:"bytes,13,opt,name=play_url_h265,json=playUrlH265,proto3" json:"play_url_h265"`
	// 当前清晰度,清晰度 0:默认码率, 2:800 3:1500 4:原画
	CurrentQuality int64 `protobuf:"varint,14,opt,name=current_quality,json=currentQuality,proto3" json:"current_quality"`
	// 当前拥有清晰度列表
	AcceptQuality []int64 `protobuf:"varint,15,rep,packed,name=accept_quality,json=acceptQuality" json:"accept_quality"`
	// 横竖屏  0:横屏 1:竖屏 -1:异常情况
	BroadcastType int64 `protobuf:"varint,16,opt,name=broadcast_type,json=broadcastType,proto3" json:"broadcast_type"`
	// 新版角标-右上 默认为空 只能是文字！！！@古月 【5.29显示更新】：服务端还是吐右上（兼容老版），5.29显示在左上
	PendentRu string `protobuf:"bytes,17,opt,name=pendent_ru,json=pendentRu,proto3" json:"pendent_ru"`
	// 【5.29显示更新】：服务端还是吐右上，5.29客户端显示在左上,对应的背景图片
	PendentRuPic string `protobuf:"bytes,18,opt,name=pendent_ru_pic,json=pendentRuPic,proto3" json:"pendent_ru_pic"`
	// 新版移动端角标色值-右上
	PendentRuColor string `protobuf:"bytes,19,opt,name=pendent_ru_color,json=pendentRuColor,proto3" json:"pendent_ru_color"`
	// 推荐类型 1：人气 2：营收 3：运营强推 4：天马推荐（暂定）用于客户端打点
	RecType int64 `protobuf:"varint,20,opt,name=rec_type,json=recType,proto3" json:"rec_type"`
	// 当前房间pk_id，默认0 用于客户端打点
	PkId int64 `protobuf:"varint,21,opt,name=pk_id,json=pkId,proto3" json:"pk_id"`
}

func (m *AppIndexGetMultiRoomListResp_RoomList) Reset()         { *m = AppIndexGetMultiRoomListResp_RoomList{} }
func (m *AppIndexGetMultiRoomListResp_RoomList) String() string { return proto.CompactTextString(m) }
func (*AppIndexGetMultiRoomListResp_RoomList) ProtoMessage()    {}
func (*AppIndexGetMultiRoomListResp_RoomList) Descriptor() ([]byte, []int) {
	return fileDescriptor_AppIndex_45d5ad418ac35a63, []int{13, 0}
}
func (m *AppIndexGetMultiRoomListResp_RoomList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AppIndexGetMultiRoomListResp_RoomList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AppIndexGetMultiRoomListResp_RoomList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *AppIndexGetMultiRoomListResp_RoomList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AppIndexGetMultiRoomListResp_RoomList.Merge(dst, src)
}
func (m *AppIndexGetMultiRoomListResp_RoomList) XXX_Size() int {
	return m.Size()
}
func (m *AppIndexGetMultiRoomListResp_RoomList) XXX_DiscardUnknown() {
	xxx_messageInfo_AppIndexGetMultiRoomListResp_RoomList.DiscardUnknown(m)
}

var xxx_messageInfo_AppIndexGetMultiRoomListResp_RoomList proto.InternalMessageInfo

func (m *AppIndexGetMultiRoomListResp_RoomList) GetRoomid() int64 {
	if m != nil {
		return m.Roomid
	}
	return 0
}

func (m *AppIndexGetMultiRoomListResp_RoomList) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *AppIndexGetMultiRoomListResp_RoomList) GetUname() string {
	if m != nil {
		return m.Uname
	}
	return ""
}

func (m *AppIndexGetMultiRoomListResp_RoomList) GetOnline() int64 {
	if m != nil {
		return m.Online
	}
	return 0
}

func (m *AppIndexGetMultiRoomListResp_RoomList) GetCover() string {
	if m != nil {
		return m.Cover
	}
	return ""
}

func (m *AppIndexGetMultiRoomListResp_RoomList) GetLink() string {
	if m != nil {
		return m.Link
	}
	return ""
}

func (m *AppIndexGetMultiRoomListResp_RoomList) GetFace() string {
	if m != nil {
		return m.Face
	}
	return ""
}

func (m *AppIndexGetMultiRoomListResp_RoomList) GetAreaV2ParentId() int64 {
	if m != nil {
		return m.AreaV2ParentId
	}
	return 0
}

func (m *AppIndexGetMultiRoomListResp_RoomList) GetAreaV2ParentName() string {
	if m != nil {
		return m.AreaV2ParentName
	}
	return ""
}

func (m *AppIndexGetMultiRoomListResp_RoomList) GetAreaV2Id() int64 {
	if m != nil {
		return m.AreaV2Id
	}
	return 0
}

func (m *AppIndexGetMultiRoomListResp_RoomList) GetAreaV2Name() string {
	if m != nil {
		return m.AreaV2Name
	}
	return ""
}

func (m *AppIndexGetMultiRoomListResp_RoomList) GetPlayUrl() string {
	if m != nil {
		return m.PlayUrl
	}
	return ""
}

func (m *AppIndexGetMultiRoomListResp_RoomList) GetPlayUrlH265() string {
	if m != nil {
		return m.PlayUrlH265
	}
	return ""
}

func (m *AppIndexGetMultiRoomListResp_RoomList) GetCurrentQuality() int64 {
	if m != nil {
		return m.CurrentQuality
	}
	return 0
}

func (m *AppIndexGetMultiRoomListResp_RoomList) GetAcceptQuality() []int64 {
	if m != nil {
		return m.AcceptQuality
	}
	return nil
}

func (m *AppIndexGetMultiRoomListResp_RoomList) GetBroadcastType() int64 {
	if m != nil {
		return m.BroadcastType
	}
	return 0
}

func (m *AppIndexGetMultiRoomListResp_RoomList) GetPendentRu() string {
	if m != nil {
		return m.PendentRu
	}
	return ""
}

func (m *AppIndexGetMultiRoomListResp_RoomList) GetPendentRuPic() string {
	if m != nil {
		return m.PendentRuPic
	}
	return ""
}

func (m *AppIndexGetMultiRoomListResp_RoomList) GetPendentRuColor() string {
	if m != nil {
		return m.PendentRuColor
	}
	return ""
}

func (m *AppIndexGetMultiRoomListResp_RoomList) GetRecType() int64 {
	if m != nil {
		return m.RecType
	}
	return 0
}

func (m *AppIndexGetMultiRoomListResp_RoomList) GetPkId() int64 {
	if m != nil {
		return m.PkId
	}
	return 0
}

type AppIndexGetMultiRoomListResp_InfoList struct {
	// 二级分区id
	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id"`
	// 房间列表
	List []*AppIndexGetMultiRoomListResp_RoomList `protobuf:"bytes,2,rep,name=list" json:"list"`
}

func (m *AppIndexGetMultiRoomListResp_InfoList) Reset()         { *m = AppIndexGetMultiRoomListResp_InfoList{} }
func (m *AppIndexGetMultiRoomListResp_InfoList) String() string { return proto.CompactTextString(m) }
func (*AppIndexGetMultiRoomListResp_InfoList) ProtoMessage()    {}
func (*AppIndexGetMultiRoomListResp_InfoList) Descriptor() ([]byte, []int) {
	return fileDescriptor_AppIndex_45d5ad418ac35a63, []int{13, 1}
}
func (m *AppIndexGetMultiRoomListResp_InfoList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AppIndexGetMultiRoomListResp_InfoList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AppIndexGetMultiRoomListResp_InfoList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *AppIndexGetMultiRoomListResp_InfoList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AppIndexGetMultiRoomListResp_InfoList.Merge(dst, src)
}
func (m *AppIndexGetMultiRoomListResp_InfoList) XXX_Size() int {
	return m.Size()
}
func (m *AppIndexGetMultiRoomListResp_InfoList) XXX_DiscardUnknown() {
	xxx_messageInfo_AppIndexGetMultiRoomListResp_InfoList.DiscardUnknown(m)
}

var xxx_messageInfo_AppIndexGetMultiRoomListResp_InfoList proto.InternalMessageInfo

func (m *AppIndexGetMultiRoomListResp_InfoList) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *AppIndexGetMultiRoomListResp_InfoList) GetList() []*AppIndexGetMultiRoomListResp_RoomList {
	if m != nil {
		return m.List
	}
	return nil
}

type AppIndexGetActivityCardReq struct {
	// 活动模块ids
	Ids []int64 `protobuf:"varint,1,rep,packed,name=ids" json:"ids"`
}

func (m *AppIndexGetActivityCardReq) Reset()         { *m = AppIndexGetActivityCardReq{} }
func (m *AppIndexGetActivityCardReq) String() string { return proto.CompactTextString(m) }
func (*AppIndexGetActivityCardReq) ProtoMessage()    {}
func (*AppIndexGetActivityCardReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_AppIndex_45d5ad418ac35a63, []int{14}
}
func (m *AppIndexGetActivityCardReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AppIndexGetActivityCardReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AppIndexGetActivityCardReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *AppIndexGetActivityCardReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AppIndexGetActivityCardReq.Merge(dst, src)
}
func (m *AppIndexGetActivityCardReq) XXX_Size() int {
	return m.Size()
}
func (m *AppIndexGetActivityCardReq) XXX_DiscardUnknown() {
	xxx_messageInfo_AppIndexGetActivityCardReq.DiscardUnknown(m)
}

var xxx_messageInfo_AppIndexGetActivityCardReq proto.InternalMessageInfo

func (m *AppIndexGetActivityCardReq) GetIds() []int64 {
	if m != nil {
		return m.Ids
	}
	return nil
}

type AppIndexGetActivityCardResp struct {
	// code
	Code int64 `protobuf:"varint,1,opt,name=code,proto3" json:"code"`
	// msg
	Msg string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg"`
	//
	Data *AppIndexGetActivityCardResp_Data `protobuf:"bytes,3,opt,name=data" json:"data"`
}

func (m *AppIndexGetActivityCardResp) Reset()         { *m = AppIndexGetActivityCardResp{} }
func (m *AppIndexGetActivityCardResp) String() string { return proto.CompactTextString(m) }
func (*AppIndexGetActivityCardResp) ProtoMessage()    {}
func (*AppIndexGetActivityCardResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_AppIndex_45d5ad418ac35a63, []int{15}
}
func (m *AppIndexGetActivityCardResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AppIndexGetActivityCardResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AppIndexGetActivityCardResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *AppIndexGetActivityCardResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AppIndexGetActivityCardResp.Merge(dst, src)
}
func (m *AppIndexGetActivityCardResp) XXX_Size() int {
	return m.Size()
}
func (m *AppIndexGetActivityCardResp) XXX_DiscardUnknown() {
	xxx_messageInfo_AppIndexGetActivityCardResp.DiscardUnknown(m)
}

var xxx_messageInfo_AppIndexGetActivityCardResp proto.InternalMessageInfo

func (m *AppIndexGetActivityCardResp) GetCode() int64 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *AppIndexGetActivityCardResp) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func (m *AppIndexGetActivityCardResp) GetData() *AppIndexGetActivityCardResp_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

type AppIndexGetActivityCardResp_Banner struct {
	//
	Aid int64 `protobuf:"varint,1,opt,name=aid,proto3" json:"aid"`
	//
	Pic string `protobuf:"bytes,2,opt,name=pic,proto3" json:"pic"`
	//
	Title string `protobuf:"bytes,3,opt,name=title,proto3" json:"title"`
	//
	Text string `protobuf:"bytes,4,opt,name=text,proto3" json:"text"`
	//
	PicLink string `protobuf:"bytes,5,opt,name=pic_link,json=picLink,proto3" json:"pic_link"`
	//
	GoLink string `protobuf:"bytes,6,opt,name=go_link,json=goLink,proto3" json:"go_link"`
	//
	ButtonText string `protobuf:"bytes,7,opt,name=button_text,json=buttonText,proto3" json:"button_text"`
	//
	Status int64 `protobuf:"varint,8,opt,name=status,proto3" json:"status"`
	//
	Sort int64 `protobuf:"varint,9,opt,name=sort,proto3" json:"sort"`
}

func (m *AppIndexGetActivityCardResp_Banner) Reset()         { *m = AppIndexGetActivityCardResp_Banner{} }
func (m *AppIndexGetActivityCardResp_Banner) String() string { return proto.CompactTextString(m) }
func (*AppIndexGetActivityCardResp_Banner) ProtoMessage()    {}
func (*AppIndexGetActivityCardResp_Banner) Descriptor() ([]byte, []int) {
	return fileDescriptor_AppIndex_45d5ad418ac35a63, []int{15, 0}
}
func (m *AppIndexGetActivityCardResp_Banner) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AppIndexGetActivityCardResp_Banner) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AppIndexGetActivityCardResp_Banner.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *AppIndexGetActivityCardResp_Banner) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AppIndexGetActivityCardResp_Banner.Merge(dst, src)
}
func (m *AppIndexGetActivityCardResp_Banner) XXX_Size() int {
	return m.Size()
}
func (m *AppIndexGetActivityCardResp_Banner) XXX_DiscardUnknown() {
	xxx_messageInfo_AppIndexGetActivityCardResp_Banner.DiscardUnknown(m)
}

var xxx_messageInfo_AppIndexGetActivityCardResp_Banner proto.InternalMessageInfo

func (m *AppIndexGetActivityCardResp_Banner) GetAid() int64 {
	if m != nil {
		return m.Aid
	}
	return 0
}

func (m *AppIndexGetActivityCardResp_Banner) GetPic() string {
	if m != nil {
		return m.Pic
	}
	return ""
}

func (m *AppIndexGetActivityCardResp_Banner) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *AppIndexGetActivityCardResp_Banner) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

func (m *AppIndexGetActivityCardResp_Banner) GetPicLink() string {
	if m != nil {
		return m.PicLink
	}
	return ""
}

func (m *AppIndexGetActivityCardResp_Banner) GetGoLink() string {
	if m != nil {
		return m.GoLink
	}
	return ""
}

func (m *AppIndexGetActivityCardResp_Banner) GetButtonText() string {
	if m != nil {
		return m.ButtonText
	}
	return ""
}

func (m *AppIndexGetActivityCardResp_Banner) GetStatus() int64 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *AppIndexGetActivityCardResp_Banner) GetSort() int64 {
	if m != nil {
		return m.Sort
	}
	return 0
}

type AppIndexGetActivityCardResp_Room struct {
	//
	IsLive int64 `protobuf:"varint,1,opt,name=is_live,json=isLive,proto3" json:"is_live"`
	//
	Roomid int64 `protobuf:"varint,2,opt,name=roomid,proto3" json:"roomid"`
	//
	Title string `protobuf:"bytes,3,opt,name=title,proto3" json:"title"`
	//
	Uname string `protobuf:"bytes,4,opt,name=uname,proto3" json:"uname"`
	//
	Online int64 `protobuf:"varint,5,opt,name=online,proto3" json:"online"`
	//
	Cover string `protobuf:"bytes,6,opt,name=cover,proto3" json:"cover"`
	//
	AreaV2ParentId int64 `protobuf:"varint,7,opt,name=area_v2_parent_id,json=areaV2ParentId,proto3" json:"area_v2_parent_id"`
	//
	AreaV2Id int64 `protobuf:"varint,8,opt,name=area_v2_id,json=areaV2Id,proto3" json:"area_v2_id"`
	//
	Sort int64 `protobuf:"varint,9,opt,name=sort,proto3" json:"sort"`
}

func (m *AppIndexGetActivityCardResp_Room) Reset()         { *m = AppIndexGetActivityCardResp_Room{} }
func (m *AppIndexGetActivityCardResp_Room) String() string { return proto.CompactTextString(m) }
func (*AppIndexGetActivityCardResp_Room) ProtoMessage()    {}
func (*AppIndexGetActivityCardResp_Room) Descriptor() ([]byte, []int) {
	return fileDescriptor_AppIndex_45d5ad418ac35a63, []int{15, 1}
}
func (m *AppIndexGetActivityCardResp_Room) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AppIndexGetActivityCardResp_Room) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AppIndexGetActivityCardResp_Room.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *AppIndexGetActivityCardResp_Room) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AppIndexGetActivityCardResp_Room.Merge(dst, src)
}
func (m *AppIndexGetActivityCardResp_Room) XXX_Size() int {
	return m.Size()
}
func (m *AppIndexGetActivityCardResp_Room) XXX_DiscardUnknown() {
	xxx_messageInfo_AppIndexGetActivityCardResp_Room.DiscardUnknown(m)
}

var xxx_messageInfo_AppIndexGetActivityCardResp_Room proto.InternalMessageInfo

func (m *AppIndexGetActivityCardResp_Room) GetIsLive() int64 {
	if m != nil {
		return m.IsLive
	}
	return 0
}

func (m *AppIndexGetActivityCardResp_Room) GetRoomid() int64 {
	if m != nil {
		return m.Roomid
	}
	return 0
}

func (m *AppIndexGetActivityCardResp_Room) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *AppIndexGetActivityCardResp_Room) GetUname() string {
	if m != nil {
		return m.Uname
	}
	return ""
}

func (m *AppIndexGetActivityCardResp_Room) GetOnline() int64 {
	if m != nil {
		return m.Online
	}
	return 0
}

func (m *AppIndexGetActivityCardResp_Room) GetCover() string {
	if m != nil {
		return m.Cover
	}
	return ""
}

func (m *AppIndexGetActivityCardResp_Room) GetAreaV2ParentId() int64 {
	if m != nil {
		return m.AreaV2ParentId
	}
	return 0
}

func (m *AppIndexGetActivityCardResp_Room) GetAreaV2Id() int64 {
	if m != nil {
		return m.AreaV2Id
	}
	return 0
}

func (m *AppIndexGetActivityCardResp_Room) GetSort() int64 {
	if m != nil {
		return m.Sort
	}
	return 0
}

type AppIndexGetActivityCardResp_Av struct {
	//
	Avid int64 `protobuf:"varint,1,opt,name=avid,proto3" json:"avid"`
	//
	Title string `protobuf:"bytes,2,opt,name=title,proto3" json:"title"`
	//
	ViewCount int64 `protobuf:"varint,3,opt,name=view_count,json=viewCount,proto3" json:"view_count"`
	//
	Danmaku int64 `protobuf:"varint,4,opt,name=danmaku,proto3" json:"danmaku"`
	//
	Duration int64 `protobuf:"varint,5,opt,name=duration,proto3" json:"duration"`
	//
	Cover string `protobuf:"bytes,6,opt,name=cover,proto3" json:"cover"`
	//
	Sort int64 `protobuf:"varint,7,opt,name=sort,proto3" json:"sort"`
}

func (m *AppIndexGetActivityCardResp_Av) Reset()         { *m = AppIndexGetActivityCardResp_Av{} }
func (m *AppIndexGetActivityCardResp_Av) String() string { return proto.CompactTextString(m) }
func (*AppIndexGetActivityCardResp_Av) ProtoMessage()    {}
func (*AppIndexGetActivityCardResp_Av) Descriptor() ([]byte, []int) {
	return fileDescriptor_AppIndex_45d5ad418ac35a63, []int{15, 2}
}
func (m *AppIndexGetActivityCardResp_Av) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AppIndexGetActivityCardResp_Av) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AppIndexGetActivityCardResp_Av.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *AppIndexGetActivityCardResp_Av) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AppIndexGetActivityCardResp_Av.Merge(dst, src)
}
func (m *AppIndexGetActivityCardResp_Av) XXX_Size() int {
	return m.Size()
}
func (m *AppIndexGetActivityCardResp_Av) XXX_DiscardUnknown() {
	xxx_messageInfo_AppIndexGetActivityCardResp_Av.DiscardUnknown(m)
}

var xxx_messageInfo_AppIndexGetActivityCardResp_Av proto.InternalMessageInfo

func (m *AppIndexGetActivityCardResp_Av) GetAvid() int64 {
	if m != nil {
		return m.Avid
	}
	return 0
}

func (m *AppIndexGetActivityCardResp_Av) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *AppIndexGetActivityCardResp_Av) GetViewCount() int64 {
	if m != nil {
		return m.ViewCount
	}
	return 0
}

func (m *AppIndexGetActivityCardResp_Av) GetDanmaku() int64 {
	if m != nil {
		return m.Danmaku
	}
	return 0
}

func (m *AppIndexGetActivityCardResp_Av) GetDuration() int64 {
	if m != nil {
		return m.Duration
	}
	return 0
}

func (m *AppIndexGetActivityCardResp_Av) GetCover() string {
	if m != nil {
		return m.Cover
	}
	return ""
}

func (m *AppIndexGetActivityCardResp_Av) GetSort() int64 {
	if m != nil {
		return m.Sort
	}
	return 0
}

type AppIndexGetActivityCardResp_ActivityCard struct {
	//
	Card *AppIndexGetActivityCardResp_Banner `protobuf:"bytes,1,opt,name=card" json:"card"`
	//
	Room []*AppIndexGetActivityCardResp_Room `protobuf:"bytes,2,rep,name=room" json:"room"`
	//
	Av []*AppIndexGetActivityCardResp_Av `protobuf:"bytes,3,rep,name=av" json:"av"`
}

func (m *AppIndexGetActivityCardResp_ActivityCard) Reset() {
	*m = AppIndexGetActivityCardResp_ActivityCard{}
}
func (m *AppIndexGetActivityCardResp_ActivityCard) String() string { return proto.CompactTextString(m) }
func (*AppIndexGetActivityCardResp_ActivityCard) ProtoMessage()    {}
func (*AppIndexGetActivityCardResp_ActivityCard) Descriptor() ([]byte, []int) {
	return fileDescriptor_AppIndex_45d5ad418ac35a63, []int{15, 3}
}
func (m *AppIndexGetActivityCardResp_ActivityCard) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AppIndexGetActivityCardResp_ActivityCard) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AppIndexGetActivityCardResp_ActivityCard.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *AppIndexGetActivityCardResp_ActivityCard) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AppIndexGetActivityCardResp_ActivityCard.Merge(dst, src)
}
func (m *AppIndexGetActivityCardResp_ActivityCard) XXX_Size() int {
	return m.Size()
}
func (m *AppIndexGetActivityCardResp_ActivityCard) XXX_DiscardUnknown() {
	xxx_messageInfo_AppIndexGetActivityCardResp_ActivityCard.DiscardUnknown(m)
}

var xxx_messageInfo_AppIndexGetActivityCardResp_ActivityCard proto.InternalMessageInfo

func (m *AppIndexGetActivityCardResp_ActivityCard) GetCard() *AppIndexGetActivityCardResp_Banner {
	if m != nil {
		return m.Card
	}
	return nil
}

func (m *AppIndexGetActivityCardResp_ActivityCard) GetRoom() []*AppIndexGetActivityCardResp_Room {
	if m != nil {
		return m.Room
	}
	return nil
}

func (m *AppIndexGetActivityCardResp_ActivityCard) GetAv() []*AppIndexGetActivityCardResp_Av {
	if m != nil {
		return m.Av
	}
	return nil
}

type AppIndexGetActivityCardResp_Data struct {
	//
	ActivityCard map[int64]*AppIndexGetActivityCardResp_ActivityCard `protobuf:"bytes,1,rep,name=activity_card,json=activityCard" json:"activity_card" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *AppIndexGetActivityCardResp_Data) Reset()         { *m = AppIndexGetActivityCardResp_Data{} }
func (m *AppIndexGetActivityCardResp_Data) String() string { return proto.CompactTextString(m) }
func (*AppIndexGetActivityCardResp_Data) ProtoMessage()    {}
func (*AppIndexGetActivityCardResp_Data) Descriptor() ([]byte, []int) {
	return fileDescriptor_AppIndex_45d5ad418ac35a63, []int{15, 4}
}
func (m *AppIndexGetActivityCardResp_Data) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AppIndexGetActivityCardResp_Data) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AppIndexGetActivityCardResp_Data.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *AppIndexGetActivityCardResp_Data) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AppIndexGetActivityCardResp_Data.Merge(dst, src)
}
func (m *AppIndexGetActivityCardResp_Data) XXX_Size() int {
	return m.Size()
}
func (m *AppIndexGetActivityCardResp_Data) XXX_DiscardUnknown() {
	xxx_messageInfo_AppIndexGetActivityCardResp_Data.DiscardUnknown(m)
}

var xxx_messageInfo_AppIndexGetActivityCardResp_Data proto.InternalMessageInfo

func (m *AppIndexGetActivityCardResp_Data) GetActivityCard() map[int64]*AppIndexGetActivityCardResp_ActivityCard {
	if m != nil {
		return m.ActivityCard
	}
	return nil
}

func init() {
	proto.RegisterType((*AppIndexGetAllListReq)(nil), "room.v2.AppIndexGetAllListReq")
	proto.RegisterType((*AppIndexGetAllListResp)(nil), "room.v2.AppIndexGetAllListResp")
	proto.RegisterType((*AppIndexGetAllListResp_ModuleInfo)(nil), "room.v2.AppIndexGetAllListResp.ModuleInfo")
	proto.RegisterType((*AppIndexGetAllListResp_RoomList)(nil), "room.v2.AppIndexGetAllListResp.RoomList")
	proto.RegisterType((*AppIndexGetAllListResp_ModuleList)(nil), "room.v2.AppIndexGetAllListResp.ModuleList")
	proto.RegisterType((*AppIndexGetAllListResp_Data)(nil), "room.v2.AppIndexGetAllListResp.Data")
	proto.RegisterType((*AppIndexGetBaseMInfoListReq)(nil), "room.v2.AppIndexGetBaseMInfoListReq")
	proto.RegisterType((*AppIndexGetBaseMInfoListResp)(nil), "room.v2.AppIndexGetBaseMInfoListResp")
	proto.RegisterType((*AppIndexGetBaseMInfoListResp_ModuleInfo)(nil), "room.v2.AppIndexGetBaseMInfoListResp.ModuleInfo")
	proto.RegisterType((*AppIndexGetRoomListByIdsReq)(nil), "room.v2.AppIndexGetRoomListByIdsReq")
	proto.RegisterType((*AppIndexGetRoomListByIdsResp)(nil), "room.v2.AppIndexGetRoomListByIdsResp")
	proto.RegisterMapType((map[int64]*AppIndexGetRoomListByIdsResp_RoomList)(nil), "room.v2.AppIndexGetRoomListByIdsResp.DataEntry")
	proto.RegisterType((*AppIndexGetRoomListByIdsResp_RoomInfo)(nil), "room.v2.AppIndexGetRoomListByIdsResp.RoomInfo")
	proto.RegisterType((*AppIndexGetRoomListByIdsResp_RoomList)(nil), "room.v2.AppIndexGetRoomListByIdsResp.RoomList")
	proto.RegisterType((*AppIndexGetPicListByIdsReq)(nil), "room.v2.AppIndexGetPicListByIdsReq")
	proto.RegisterType((*AppIndexGetPicListByIdsResp)(nil), "room.v2.AppIndexGetPicListByIdsResp")
	proto.RegisterMapType((map[int64]*AppIndexGetPicListByIdsResp_ItemList)(nil), "room.v2.AppIndexGetPicListByIdsResp.DataEntry")
	proto.RegisterType((*AppIndexGetPicListByIdsResp_Item)(nil), "room.v2.AppIndexGetPicListByIdsResp.Item")
	proto.RegisterType((*AppIndexGetPicListByIdsResp_ItemList)(nil), "room.v2.AppIndexGetPicListByIdsResp.ItemList")
	proto.RegisterType((*AppIndexGetIndexBannerReq)(nil), "room.v2.AppIndexGetIndexBannerReq")
	proto.RegisterType((*AppIndexGetIndexBannerResp)(nil), "room.v2.AppIndexGetIndexBannerResp")
	proto.RegisterType((*AppIndexGetIndexBannerResp_Data)(nil), "room.v2.AppIndexGetIndexBannerResp.Data")
	proto.RegisterType((*AppIndexGetAllRawListReq)(nil), "room.v2.AppIndexGetAllRawListReq")
	proto.RegisterType((*AppIndexGetAllRawListResp)(nil), "room.v2.AppIndexGetAllRawListResp")
	proto.RegisterType((*AppIndexGetAllRawListResp_ModuleInfo)(nil), "room.v2.AppIndexGetAllRawListResp.ModuleInfo")
	proto.RegisterType((*AppIndexGetAllRawListResp_RoomList)(nil), "room.v2.AppIndexGetAllRawListResp.RoomList")
	proto.RegisterType((*AppIndexGetAllRawListResp_ModuleList)(nil), "room.v2.AppIndexGetAllRawListResp.ModuleList")
	proto.RegisterType((*AppIndexGetAllRawListResp_Data)(nil), "room.v2.AppIndexGetAllRawListResp.Data")
	proto.RegisterType((*AppIndexGetMultiRoomListReq)(nil), "room.v2.AppIndexGetMultiRoomListReq")
	proto.RegisterType((*AppIndexGetMultiRoomListResp)(nil), "room.v2.AppIndexGetMultiRoomListResp")
	proto.RegisterType((*AppIndexGetMultiRoomListResp_RoomList)(nil), "room.v2.AppIndexGetMultiRoomListResp.RoomList")
	proto.RegisterType((*AppIndexGetMultiRoomListResp_InfoList)(nil), "room.v2.AppIndexGetMultiRoomListResp.InfoList")
	proto.RegisterType((*AppIndexGetActivityCardReq)(nil), "room.v2.AppIndexGetActivityCardReq")
	proto.RegisterType((*AppIndexGetActivityCardResp)(nil), "room.v2.AppIndexGetActivityCardResp")
	proto.RegisterType((*AppIndexGetActivityCardResp_Banner)(nil), "room.v2.AppIndexGetActivityCardResp.Banner")
	proto.RegisterType((*AppIndexGetActivityCardResp_Room)(nil), "room.v2.AppIndexGetActivityCardResp.Room")
	proto.RegisterType((*AppIndexGetActivityCardResp_Av)(nil), "room.v2.AppIndexGetActivityCardResp.Av")
	proto.RegisterType((*AppIndexGetActivityCardResp_ActivityCard)(nil), "room.v2.AppIndexGetActivityCardResp.ActivityCard")
	proto.RegisterType((*AppIndexGetActivityCardResp_Data)(nil), "room.v2.AppIndexGetActivityCardResp.Data")
	proto.RegisterMapType((map[int64]*AppIndexGetActivityCardResp_ActivityCard)(nil), "room.v2.AppIndexGetActivityCardResp.Data.ActivityCardEntry")
}
func (m *AppIndexGetAllListReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AppIndexGetAllListReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Platform) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAppIndex(dAtA, i, uint64(len(m.Platform)))
		i += copy(dAtA[i:], m.Platform)
	}
	if len(m.Device) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintAppIndex(dAtA, i, uint64(len(m.Device)))
		i += copy(dAtA[i:], m.Device)
	}
	if len(m.Scale) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintAppIndex(dAtA, i, uint64(len(m.Scale)))
		i += copy(dAtA[i:], m.Scale)
	}
	if m.Build != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintAppIndex(dAtA, i, uint64(m.Build))
	}
	if m.ModuleId != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintAppIndex(dAtA, i, uint64(m.ModuleId))
	}
	if m.RelationPage != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintAppIndex(dAtA, i, uint64(m.RelationPage))
	}
	return i, nil
}

func (m *AppIndexGetAllListResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AppIndexGetAllListResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintAppIndex(dAtA, i, uint64(m.Code))
	}
	if len(m.Msg) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintAppIndex(dAtA, i, uint64(len(m.Msg)))
		i += copy(dAtA[i:], m.Msg)
	}
	if m.Data != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintAppIndex(dAtA, i, uint64(m.Data.Size()))
		n1, err := m.Data.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	return i, nil
}

func (m *AppIndexGetAllListResp_ModuleInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AppIndexGetAllListResp_ModuleInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintAppIndex(dAtA, i, uint64(m.Id))
	}
	if len(m.Title) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintAppIndex(dAtA, i, uint64(len(m.Title)))
		i += copy(dAtA[i:], m.Title)
	}
	if len(m.Pic) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintAppIndex(dAtA, i, uint64(len(m.Pic)))
		i += copy(dAtA[i:], m.Pic)
	}
	if m.Type != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintAppIndex(dAtA, i, uint64(m.Type))
	}
	if len(m.Link) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintAppIndex(dAtA, i, uint64(len(m.Link)))
		i += copy(dAtA[i:], m.Link)
	}
	if m.Count != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintAppIndex(dAtA, i, uint64(m.Count))
	}
	if len(m.SubTitle) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintAppIndex(dAtA, i, uint64(len(m.SubTitle)))
		i += copy(dAtA[i:], m.SubTitle)
	}
	return i, nil
}

func (m *AppIndexGetAllListResp_RoomList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AppIndexGetAllListResp_RoomList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Roomid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintAppIndex(dAtA, i, uint64(m.Roomid))
	}
	if len(m.Title) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintAppIndex(dAtA, i, uint64(len(m.Title)))
		i += copy(dAtA[i:], m.Title)
	}
	if len(m.Uname) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintAppIndex(dAtA, i, uint64(len(m.Uname)))
		i += copy(dAtA[i:], m.Uname)
	}
	if m.Online != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintAppIndex(dAtA, i, uint64(m.Online))
	}
	if len(m.Cover) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintAppIndex(dAtA, i, uint64(len(m.Cover)))
		i += copy(dAtA[i:], m.Cover)
	}
	if len(m.Link) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintAppIndex(dAtA, i, uint64(len(m.Link)))
		i += copy(dAtA[i:], m.Link)
	}
	if len(m.Face) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintAppIndex(dAtA, i, uint64(len(m.Face)))
		i += copy(dAtA[i:], m.Face)
	}
	if m.AreaV2ParentId != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintAppIndex(dAtA, i, uint64(m.AreaV2ParentId))
	}
	if len(m.AreaV2ParentName) > 0 {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintAppIndex(dAtA, i, uint64(len(m.AreaV2ParentName)))
		i += copy(dAtA[i:], m.AreaV2ParentName)
	}
	if m.AreaV2Id != 0 {
		dAtA[i] = 0x50
		i++
		i = encodeVarintAppIndex(dAtA, i, uint64(m.AreaV2Id))
	}
	if len(m.AreaV2Name) > 0 {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintAppIndex(dAtA, i, uint64(len(m.AreaV2Name)))
		i += copy(dAtA[i:], m.AreaV2Name)
	}
	if len(m.PlayUrl) > 0 {
		dAtA[i] = 0x62
		i++
		i = encodeVarintAppIndex(dAtA, i, uint64(len(m.PlayUrl)))
		i += copy(dAtA[i:], m.PlayUrl)
	}
	if len(m.PlayUrlH265) > 0 {
		dAtA[i] = 0x6a
		i++
		i = encodeVarintAppIndex(dAtA, i, uint64(len(m.PlayUrlH265)))
		i += copy(dAtA[i:], m.PlayUrlH265)
	}
	if m.CurrentQuality != 0 {
		dAtA[i] = 0x70
		i++
		i = encodeVarintAppIndex(dAtA, i, uint64(m.CurrentQuality))
	}
	if len(m.AcceptQuality) > 0 {
		dAtA3 := make([]byte, len(m.AcceptQuality)*10)
		var j2 int
		for _, num1 := range m.AcceptQuality {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA3[j2] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j2++
			}
			dAtA3[j2] = uint8(num)
			j2++
		}
		dAtA[i] = 0x7a
		i++
		i = encodeVarintAppIndex(dAtA, i, uint64(j2))
		i += copy(dAtA[i:], dAtA3[:j2])
	}
	if m.BroadcastType != 0 {
		dAtA[i] = 0x80
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintAppIndex(dAtA, i, uint64(m.BroadcastType))
	}
	if len(m.PendentRu) > 0 {
		dAtA[i] = 0x8a
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintAppIndex(dAtA, i, uint64(len(m.PendentRu)))
		i += copy(dAtA[i:], m.PendentRu)
	}
	if len(m.PendentRuPic) > 0 {
		dAtA[i] = 0x92
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintAppIndex(dAtA, i, uint64(len(m.PendentRuPic)))
		i += copy(dAtA[i:], m.PendentRuPic)
	}
	if len(m.PendentRuColor) > 0 {
		dAtA[i] = 0x9a
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintAppIndex(dAtA, i, uint64(len(m.PendentRuColor)))
		i += copy(dAtA[i:], m.PendentRuColor)
	}
	if m.RecType != 0 {
		dAtA[i] = 0xa0
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintAppIndex(dAtA, i, uint64(m.RecType))
	}
	if m.PkId != 0 {
		dAtA[i] = 0xa8
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintAppIndex(dAtA, i, uint64(m.PkId))
	}
	return i, nil
}

func (m *AppIndexGetAllListResp_ModuleList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AppIndexGetAllListResp_ModuleList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ModuleInfo != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAppIndex(dAtA, i, uint64(m.ModuleInfo.Size()))
		n4, err := m.ModuleInfo.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	if len(m.List) > 0 {
		for _, msg := range m.List {
			dAtA[i] = 0x12
			i++
			i = encodeVarintAppIndex(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *AppIndexGetAllListResp_Data) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AppIndexGetAllListResp_Data) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Interval != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintAppIndex(dAtA, i, uint64(m.Interval))
	}
	if len(m.ModuleList) > 0 {
		for _, msg := range m.ModuleList {
			dAtA[i] = 0x12
			i++
			i = encodeVarintAppIndex(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *AppIndexGetBaseMInfoListReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AppIndexGetBaseMInfoListReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ModuleId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintAppIndex(dAtA, i, uint64(m.ModuleId))
	}
	return i, nil
}

func (m *AppIndexGetBaseMInfoListResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AppIndexGetBaseMInfoListResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintAppIndex(dAtA, i, uint64(m.Code))
	}
	if len(m.Msg) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintAppIndex(dAtA, i, uint64(len(m.Msg)))
		i += copy(dAtA[i:], m.Msg)
	}
	if len(m.Data) > 0 {
		for _, msg := range m.Data {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintAppIndex(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *AppIndexGetBaseMInfoListResp_ModuleInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AppIndexGetBaseMInfoListResp_ModuleInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintAppIndex(dAtA, i, uint64(m.Id))
	}
	if len(m.Title) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintAppIndex(dAtA, i, uint64(len(m.Title)))
		i += copy(dAtA[i:], m.Title)
	}
	if len(m.Pic) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintAppIndex(dAtA, i, uint64(len(m.Pic)))
		i += copy(dAtA[i:], m.Pic)
	}
	if m.Type != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintAppIndex(dAtA, i, uint64(m.Type))
	}
	if len(m.Link) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintAppIndex(dAtA, i, uint64(len(m.Link)))
		i += copy(dAtA[i:], m.Link)
	}
	if m.Sort != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintAppIndex(dAtA, i, uint64(m.Sort))
	}
	if m.Count != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintAppIndex(dAtA, i, uint64(m.Count))
	}
	return i, nil
}

func (m *AppIndexGetRoomListByIdsReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AppIndexGetRoomListByIdsReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Ids) > 0 {
		dAtA6 := make([]byte, len(m.Ids)*10)
		var j5 int
		for _, num1 := range m.Ids {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA6[j5] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j5++
			}
			dAtA6[j5] = uint8(num)
			j5++
		}
		dAtA[i] = 0xa
		i++
		i = encodeVarintAppIndex(dAtA, i, uint64(j5))
		i += copy(dAtA[i:], dAtA6[:j5])
	}
	return i, nil
}

func (m *AppIndexGetRoomListByIdsResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AppIndexGetRoomListByIdsResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintAppIndex(dAtA, i, uint64(m.Code))
	}
	if len(m.Msg) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintAppIndex(dAtA, i, uint64(len(m.Msg)))
		i += copy(dAtA[i:], m.Msg)
	}
	if len(m.Data) > 0 {
		for k, _ := range m.Data {
			dAtA[i] = 0x1a
			i++
			v := m.Data[k]
			msgSize := 0
			if v != nil {
				msgSize = v.Size()
				msgSize += 1 + sovAppIndex(uint64(msgSize))
			}
			mapSize := 1 + sovAppIndex(uint64(k)) + msgSize
			i = encodeVarintAppIndex(dAtA, i, uint64(mapSize))
			dAtA[i] = 0x8
			i++
			i = encodeVarintAppIndex(dAtA, i, uint64(k))
			if v != nil {
				dAtA[i] = 0x12
				i++
				i = encodeVarintAppIndex(dAtA, i, uint64(v.Size()))
				n7, err := v.MarshalTo(dAtA[i:])
				if err != nil {
					return 0, err
				}
				i += n7
			}
		}
	}
	return i, nil
}

func (m *AppIndexGetRoomListByIdsResp_RoomInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AppIndexGetRoomListByIdsResp_RoomInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Roomid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintAppIndex(dAtA, i, uint64(m.Roomid))
	}
	if len(m.Title) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintAppIndex(dAtA, i, uint64(len(m.Title)))
		i += copy(dAtA[i:], m.Title)
	}
	if len(m.Uname) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintAppIndex(dAtA, i, uint64(len(m.Uname)))
		i += copy(dAtA[i:], m.Uname)
	}
	if m.Online != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintAppIndex(dAtA, i, uint64(m.Online))
	}
	if len(m.Cover) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintAppIndex(dAtA, i, uint64(len(m.Cover)))
		i += copy(dAtA[i:], m.Cover)
	}
	if len(m.Link) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintAppIndex(dAtA, i, uint64(len(m.Link)))
		i += copy(dAtA[i:], m.Link)
	}
	if len(m.Face) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintAppIndex(dAtA, i, uint64(len(m.Face)))
		i += copy(dAtA[i:], m.Face)
	}
	if m.AreaV2ParentId != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintAppIndex(dAtA, i, uint64(m.AreaV2ParentId))
	}
	if len(m.AreaV2ParentName) > 0 {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintAppIndex(dAtA, i, uint64(len(m.AreaV2ParentName)))
		i += copy(dAtA[i:], m.AreaV2ParentName)
	}
	if m.AreaV2Id != 0 {
		dAtA[i] = 0x50
		i++
		i = encodeVarintAppIndex(dAtA, i, uint64(m.AreaV2Id))
	}
	if len(m.AreaV2Name) > 0 {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintAppIndex(dAtA, i, uint64(len(m.AreaV2Name)))
		i += copy(dAtA[i:], m.AreaV2Name)
	}
	if len(m.PlayUrl) > 0 {
		dAtA[i] = 0x62
		i++
		i = encodeVarintAppIndex(dAtA, i, uint64(len(m.PlayUrl)))
		i += copy(dAtA[i:], m.PlayUrl)
	}
	if len(m.PlayUrlH265) > 0 {
		dAtA[i] = 0x6a
		i++
		i = encodeVarintAppIndex(dAtA, i, uint64(len(m.PlayUrlH265)))
		i += copy(dAtA[i:], m.PlayUrlH265)
	}
	if m.CurrentQuality != 0 {
		dAtA[i] = 0x70
		i++
		i = encodeVarintAppIndex(dAtA, i, uint64(m.CurrentQuality))
	}
	if len(m.AcceptQuality) > 0 {
		dAtA9 := make([]byte, len(m.AcceptQuality)*10)
		var j8 int
		for _, num1 := range m.AcceptQuality {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA9[j8] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j8++
			}
			dAtA9[j8] = uint8(num)
			j8++
		}
		dAtA[i] = 0x7a
		i++
		i = encodeVarintAppIndex(dAtA, i, uint64(j8))
		i += copy(dAtA[i:], dAtA9[:j8])
	}
	if m.BroadcastType != 0 {
		dAtA[i] = 0x80
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintAppIndex(dAtA, i, uint64(m.BroadcastType))
	}
	if len(m.PendentRu) > 0 {
		dAtA[i] = 0x8a
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintAppIndex(dAtA, i, uint64(len(m.PendentRu)))
		i += copy(dAtA[i:], m.PendentRu)
	}
	if len(m.PendentRuPic) > 0 {
		dAtA[i] = 0x92
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintAppIndex(dAtA, i, uint64(len(m.PendentRuPic)))
		i += copy(dAtA[i:], m.PendentRuPic)
	}
	if len(m.PendentRuColor) > 0 {
		dAtA[i] = 0x9a
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintAppIndex(dAtA, i, uint64(len(m.PendentRuColor)))
		i += copy(dAtA[i:], m.PendentRuColor)
	}
	if m.RecType != 0 {
		dAtA[i] = 0xa0
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintAppIndex(dAtA, i, uint64(m.RecType))
	}
	if m.PkId != 0 {
		dAtA[i] = 0xa8
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintAppIndex(dAtA, i, uint64(m.PkId))
	}
	return i, nil
}

func (m *AppIndexGetRoomListByIdsResp_RoomList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AppIndexGetRoomListByIdsResp_RoomList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, msg := range m.List {
			dAtA[i] = 0xa
			i++
			i = encodeVarintAppIndex(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *AppIndexGetPicListByIdsReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AppIndexGetPicListByIdsReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Ids) > 0 {
		dAtA11 := make([]byte, len(m.Ids)*10)
		var j10 int
		for _, num1 := range m.Ids {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA11[j10] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j10++
			}
			dAtA11[j10] = uint8(num)
			j10++
		}
		dAtA[i] = 0xa
		i++
		i = encodeVarintAppIndex(dAtA, i, uint64(j10))
		i += copy(dAtA[i:], dAtA11[:j10])
	}
	return i, nil
}

func (m *AppIndexGetPicListByIdsResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AppIndexGetPicListByIdsResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintAppIndex(dAtA, i, uint64(m.Code))
	}
	if len(m.Msg) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintAppIndex(dAtA, i, uint64(len(m.Msg)))
		i += copy(dAtA[i:], m.Msg)
	}
	if len(m.Data) > 0 {
		for k, _ := range m.Data {
			dAtA[i] = 0x1a
			i++
			v := m.Data[k]
			msgSize := 0
			if v != nil {
				msgSize = v.Size()
				msgSize += 1 + sovAppIndex(uint64(msgSize))
			}
			mapSize := 1 + sovAppIndex(uint64(k)) + msgSize
			i = encodeVarintAppIndex(dAtA, i, uint64(mapSize))
			dAtA[i] = 0x8
			i++
			i = encodeVarintAppIndex(dAtA, i, uint64(k))
			if v != nil {
				dAtA[i] = 0x12
				i++
				i = encodeVarintAppIndex(dAtA, i, uint64(v.Size()))
				n12, err := v.MarshalTo(dAtA[i:])
				if err != nil {
					return 0, err
				}
				i += n12
			}
		}
	}
	return i, nil
}

func (m *AppIndexGetPicListByIdsResp_Item) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AppIndexGetPicListByIdsResp_Item) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintAppIndex(dAtA, i, uint64(m.Id))
	}
	if len(m.Pic) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintAppIndex(dAtA, i, uint64(len(m.Pic)))
		i += copy(dAtA[i:], m.Pic)
	}
	if len(m.Link) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintAppIndex(dAtA, i, uint64(len(m.Link)))
		i += copy(dAtA[i:], m.Link)
	}
	if len(m.Title) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintAppIndex(dAtA, i, uint64(len(m.Title)))
		i += copy(dAtA[i:], m.Title)
	}
	return i, nil
}

func (m *AppIndexGetPicListByIdsResp_ItemList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AppIndexGetPicListByIdsResp_ItemList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, msg := range m.List {
			dAtA[i] = 0xa
			i++
			i = encodeVarintAppIndex(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *AppIndexGetIndexBannerReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AppIndexGetIndexBannerReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Platform) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAppIndex(dAtA, i, uint64(len(m.Platform)))
		i += copy(dAtA[i:], m.Platform)
	}
	if len(m.Device) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintAppIndex(dAtA, i, uint64(len(m.Device)))
		i += copy(dAtA[i:], m.Device)
	}
	if m.Build != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintAppIndex(dAtA, i, uint64(m.Build))
	}
	return i, nil
}

func (m *AppIndexGetIndexBannerResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AppIndexGetIndexBannerResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintAppIndex(dAtA, i, uint64(m.Code))
	}
	if len(m.Msg) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintAppIndex(dAtA, i, uint64(len(m.Msg)))
		i += copy(dAtA[i:], m.Msg)
	}
	if m.Data != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintAppIndex(dAtA, i, uint64(m.Data.Size()))
		n13, err := m.Data.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n13
	}
	return i, nil
}

func (m *AppIndexGetIndexBannerResp_Data) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AppIndexGetIndexBannerResp_Data) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAppIndex(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	if len(m.Pic) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintAppIndex(dAtA, i, uint64(len(m.Pic)))
		i += copy(dAtA[i:], m.Pic)
	}
	if len(m.Img) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintAppIndex(dAtA, i, uint64(len(m.Img)))
		i += copy(dAtA[i:], m.Img)
	}
	if len(m.Link) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintAppIndex(dAtA, i, uint64(len(m.Link)))
		i += copy(dAtA[i:], m.Link)
	}
	if len(m.Title) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintAppIndex(dAtA, i, uint64(len(m.Title)))
		i += copy(dAtA[i:], m.Title)
	}
	if len(m.Position) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintAppIndex(dAtA, i, uint64(len(m.Position)))
		i += copy(dAtA[i:], m.Position)
	}
	if len(m.SortNum) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintAppIndex(dAtA, i, uint64(len(m.SortNum)))
		i += copy(dAtA[i:], m.SortNum)
	}
	if len(m.Remark) > 0 {
		dAtA[i] = 0x42
		i++
		i = encodeVarintAppIndex(dAtA, i, uint64(len(m.Remark)))
		i += copy(dAtA[i:], m.Remark)
	}
	return i, nil
}

func (m *AppIndexGetAllRawListReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AppIndexGetAllRawListReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ModuleId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintAppIndex(dAtA, i, uint64(m.ModuleId))
	}
	return i, nil
}

func (m *AppIndexGetAllRawListResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AppIndexGetAllRawListResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintAppIndex(dAtA, i, uint64(m.Code))
	}
	if len(m.Msg) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintAppIndex(dAtA, i, uint64(len(m.Msg)))
		i += copy(dAtA[i:], m.Msg)
	}
	if m.Data != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintAppIndex(dAtA, i, uint64(m.Data.Size()))
		n14, err := m.Data.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n14
	}
	return i, nil
}

func (m *AppIndexGetAllRawListResp_ModuleInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AppIndexGetAllRawListResp_ModuleInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintAppIndex(dAtA, i, uint64(m.Id))
	}
	if len(m.Title) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintAppIndex(dAtA, i, uint64(len(m.Title)))
		i += copy(dAtA[i:], m.Title)
	}
	if len(m.Pic) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintAppIndex(dAtA, i, uint64(len(m.Pic)))
		i += copy(dAtA[i:], m.Pic)
	}
	if m.Type != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintAppIndex(dAtA, i, uint64(m.Type))
	}
	if len(m.Link) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintAppIndex(dAtA, i, uint64(len(m.Link)))
		i += copy(dAtA[i:], m.Link)
	}
	if m.Count != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintAppIndex(dAtA, i, uint64(m.Count))
	}
	if len(m.SubTitle) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintAppIndex(dAtA, i, uint64(len(m.SubTitle)))
		i += copy(dAtA[i:], m.SubTitle)
	}
	return i, nil
}

func (m *AppIndexGetAllRawListResp_RoomList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AppIndexGetAllRawListResp_RoomList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Roomid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintAppIndex(dAtA, i, uint64(m.Roomid))
	}
	if len(m.Title) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintAppIndex(dAtA, i, uint64(len(m.Title)))
		i += copy(dAtA[i:], m.Title)
	}
	if len(m.Uname) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintAppIndex(dAtA, i, uint64(len(m.Uname)))
		i += copy(dAtA[i:], m.Uname)
	}
	if m.Online != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintAppIndex(dAtA, i, uint64(m.Online))
	}
	if len(m.Cover) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintAppIndex(dAtA, i, uint64(len(m.Cover)))
		i += copy(dAtA[i:], m.Cover)
	}
	if len(m.Link) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintAppIndex(dAtA, i, uint64(len(m.Link)))
		i += copy(dAtA[i:], m.Link)
	}
	if len(m.Face) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintAppIndex(dAtA, i, uint64(len(m.Face)))
		i += copy(dAtA[i:], m.Face)
	}
	if m.AreaV2ParentId != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintAppIndex(dAtA, i, uint64(m.AreaV2ParentId))
	}
	if len(m.AreaV2ParentName) > 0 {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintAppIndex(dAtA, i, uint64(len(m.AreaV2ParentName)))
		i += copy(dAtA[i:], m.AreaV2ParentName)
	}
	if m.AreaV2Id != 0 {
		dAtA[i] = 0x50
		i++
		i = encodeVarintAppIndex(dAtA, i, uint64(m.AreaV2Id))
	}
	if len(m.AreaV2Name) > 0 {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintAppIndex(dAtA, i, uint64(len(m.AreaV2Name)))
		i += copy(dAtA[i:], m.AreaV2Name)
	}
	if len(m.PlayUrl) > 0 {
		dAtA[i] = 0x62
		i++
		i = encodeVarintAppIndex(dAtA, i, uint64(len(m.PlayUrl)))
		i += copy(dAtA[i:], m.PlayUrl)
	}
	if m.CurrentQuality != 0 {
		dAtA[i] = 0x68
		i++
		i = encodeVarintAppIndex(dAtA, i, uint64(m.CurrentQuality))
	}
	if len(m.AcceptQuality) > 0 {
		dAtA16 := make([]byte, len(m.AcceptQuality)*10)
		var j15 int
		for _, num1 := range m.AcceptQuality {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA16[j15] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j15++
			}
			dAtA16[j15] = uint8(num)
			j15++
		}
		dAtA[i] = 0x72
		i++
		i = encodeVarintAppIndex(dAtA, i, uint64(j15))
		i += copy(dAtA[i:], dAtA16[:j15])
	}
	if m.BroadcastType != 0 {
		dAtA[i] = 0x78
		i++
		i = encodeVarintAppIndex(dAtA, i, uint64(m.BroadcastType))
	}
	if len(m.PendentLd) > 0 {
		dAtA[i] = 0x82
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintAppIndex(dAtA, i, uint64(len(m.PendentLd)))
		i += copy(dAtA[i:], m.PendentLd)
	}
	if len(m.PendentRu) > 0 {
		dAtA[i] = 0x8a
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintAppIndex(dAtA, i, uint64(len(m.PendentRu)))
		i += copy(dAtA[i:], m.PendentRu)
	}
	if len(m.PendentRuPic) > 0 {
		dAtA[i] = 0x92
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintAppIndex(dAtA, i, uint64(len(m.PendentRuPic)))
		i += copy(dAtA[i:], m.PendentRuPic)
	}
	if len(m.PendentLdColor) > 0 {
		dAtA[i] = 0x9a
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintAppIndex(dAtA, i, uint64(len(m.PendentLdColor)))
		i += copy(dAtA[i:], m.PendentLdColor)
	}
	if len(m.PendentRuColor) > 0 {
		dAtA[i] = 0xa2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintAppIndex(dAtA, i, uint64(len(m.PendentRuColor)))
		i += copy(dAtA[i:], m.PendentRuColor)
	}
	if m.RecType != 0 {
		dAtA[i] = 0xa8
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintAppIndex(dAtA, i, uint64(m.RecType))
	}
	if m.PkId != 0 {
		dAtA[i] = 0xb0
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintAppIndex(dAtA, i, uint64(m.PkId))
	}
	return i, nil
}

func (m *AppIndexGetAllRawListResp_ModuleList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AppIndexGetAllRawListResp_ModuleList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ModuleInfo != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAppIndex(dAtA, i, uint64(m.ModuleInfo.Size()))
		n17, err := m.ModuleInfo.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n17
	}
	if len(m.List) > 0 {
		for _, msg := range m.List {
			dAtA[i] = 0x12
			i++
			i = encodeVarintAppIndex(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *AppIndexGetAllRawListResp_Data) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AppIndexGetAllRawListResp_Data) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Interval != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintAppIndex(dAtA, i, uint64(m.Interval))
	}
	if len(m.ModuleList) > 0 {
		for _, msg := range m.ModuleList {
			dAtA[i] = 0x12
			i++
			i = encodeVarintAppIndex(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *AppIndexGetMultiRoomListReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AppIndexGetMultiRoomListReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.AreaIds) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAppIndex(dAtA, i, uint64(len(m.AreaIds)))
		i += copy(dAtA[i:], m.AreaIds)
	}
	if len(m.Platform) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintAppIndex(dAtA, i, uint64(len(m.Platform)))
		i += copy(dAtA[i:], m.Platform)
	}
	return i, nil
}

func (m *AppIndexGetMultiRoomListResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AppIndexGetMultiRoomListResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintAppIndex(dAtA, i, uint64(m.Code))
	}
	if len(m.Msg) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintAppIndex(dAtA, i, uint64(len(m.Msg)))
		i += copy(dAtA[i:], m.Msg)
	}
	if len(m.Data) > 0 {
		for _, msg := range m.Data {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintAppIndex(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *AppIndexGetMultiRoomListResp_RoomList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AppIndexGetMultiRoomListResp_RoomList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Roomid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintAppIndex(dAtA, i, uint64(m.Roomid))
	}
	if len(m.Title) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintAppIndex(dAtA, i, uint64(len(m.Title)))
		i += copy(dAtA[i:], m.Title)
	}
	if len(m.Uname) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintAppIndex(dAtA, i, uint64(len(m.Uname)))
		i += copy(dAtA[i:], m.Uname)
	}
	if m.Online != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintAppIndex(dAtA, i, uint64(m.Online))
	}
	if len(m.Cover) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintAppIndex(dAtA, i, uint64(len(m.Cover)))
		i += copy(dAtA[i:], m.Cover)
	}
	if len(m.Link) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintAppIndex(dAtA, i, uint64(len(m.Link)))
		i += copy(dAtA[i:], m.Link)
	}
	if len(m.Face) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintAppIndex(dAtA, i, uint64(len(m.Face)))
		i += copy(dAtA[i:], m.Face)
	}
	if m.AreaV2ParentId != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintAppIndex(dAtA, i, uint64(m.AreaV2ParentId))
	}
	if len(m.AreaV2ParentName) > 0 {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintAppIndex(dAtA, i, uint64(len(m.AreaV2ParentName)))
		i += copy(dAtA[i:], m.AreaV2ParentName)
	}
	if m.AreaV2Id != 0 {
		dAtA[i] = 0x50
		i++
		i = encodeVarintAppIndex(dAtA, i, uint64(m.AreaV2Id))
	}
	if len(m.AreaV2Name) > 0 {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintAppIndex(dAtA, i, uint64(len(m.AreaV2Name)))
		i += copy(dAtA[i:], m.AreaV2Name)
	}
	if len(m.PlayUrl) > 0 {
		dAtA[i] = 0x62
		i++
		i = encodeVarintAppIndex(dAtA, i, uint64(len(m.PlayUrl)))
		i += copy(dAtA[i:], m.PlayUrl)
	}
	if len(m.PlayUrlH265) > 0 {
		dAtA[i] = 0x6a
		i++
		i = encodeVarintAppIndex(dAtA, i, uint64(len(m.PlayUrlH265)))
		i += copy(dAtA[i:], m.PlayUrlH265)
	}
	if m.CurrentQuality != 0 {
		dAtA[i] = 0x70
		i++
		i = encodeVarintAppIndex(dAtA, i, uint64(m.CurrentQuality))
	}
	if len(m.AcceptQuality) > 0 {
		dAtA19 := make([]byte, len(m.AcceptQuality)*10)
		var j18 int
		for _, num1 := range m.AcceptQuality {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA19[j18] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j18++
			}
			dAtA19[j18] = uint8(num)
			j18++
		}
		dAtA[i] = 0x7a
		i++
		i = encodeVarintAppIndex(dAtA, i, uint64(j18))
		i += copy(dAtA[i:], dAtA19[:j18])
	}
	if m.BroadcastType != 0 {
		dAtA[i] = 0x80
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintAppIndex(dAtA, i, uint64(m.BroadcastType))
	}
	if len(m.PendentRu) > 0 {
		dAtA[i] = 0x8a
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintAppIndex(dAtA, i, uint64(len(m.PendentRu)))
		i += copy(dAtA[i:], m.PendentRu)
	}
	if len(m.PendentRuPic) > 0 {
		dAtA[i] = 0x92
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintAppIndex(dAtA, i, uint64(len(m.PendentRuPic)))
		i += copy(dAtA[i:], m.PendentRuPic)
	}
	if len(m.PendentRuColor) > 0 {
		dAtA[i] = 0x9a
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintAppIndex(dAtA, i, uint64(len(m.PendentRuColor)))
		i += copy(dAtA[i:], m.PendentRuColor)
	}
	if m.RecType != 0 {
		dAtA[i] = 0xa0
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintAppIndex(dAtA, i, uint64(m.RecType))
	}
	if m.PkId != 0 {
		dAtA[i] = 0xa8
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintAppIndex(dAtA, i, uint64(m.PkId))
	}
	return i, nil
}

func (m *AppIndexGetMultiRoomListResp_InfoList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AppIndexGetMultiRoomListResp_InfoList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintAppIndex(dAtA, i, uint64(m.Id))
	}
	if len(m.List) > 0 {
		for _, msg := range m.List {
			dAtA[i] = 0x12
			i++
			i = encodeVarintAppIndex(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *AppIndexGetActivityCardReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AppIndexGetActivityCardReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Ids) > 0 {
		dAtA21 := make([]byte, len(m.Ids)*10)
		var j20 int
		for _, num1 := range m.Ids {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA21[j20] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j20++
			}
			dAtA21[j20] = uint8(num)
			j20++
		}
		dAtA[i] = 0xa
		i++
		i = encodeVarintAppIndex(dAtA, i, uint64(j20))
		i += copy(dAtA[i:], dAtA21[:j20])
	}
	return i, nil
}

func (m *AppIndexGetActivityCardResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AppIndexGetActivityCardResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintAppIndex(dAtA, i, uint64(m.Code))
	}
	if len(m.Msg) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintAppIndex(dAtA, i, uint64(len(m.Msg)))
		i += copy(dAtA[i:], m.Msg)
	}
	if m.Data != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintAppIndex(dAtA, i, uint64(m.Data.Size()))
		n22, err := m.Data.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n22
	}
	return i, nil
}

func (m *AppIndexGetActivityCardResp_Banner) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AppIndexGetActivityCardResp_Banner) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Aid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintAppIndex(dAtA, i, uint64(m.Aid))
	}
	if len(m.Pic) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintAppIndex(dAtA, i, uint64(len(m.Pic)))
		i += copy(dAtA[i:], m.Pic)
	}
	if len(m.Title) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintAppIndex(dAtA, i, uint64(len(m.Title)))
		i += copy(dAtA[i:], m.Title)
	}
	if len(m.Text) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintAppIndex(dAtA, i, uint64(len(m.Text)))
		i += copy(dAtA[i:], m.Text)
	}
	if len(m.PicLink) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintAppIndex(dAtA, i, uint64(len(m.PicLink)))
		i += copy(dAtA[i:], m.PicLink)
	}
	if len(m.GoLink) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintAppIndex(dAtA, i, uint64(len(m.GoLink)))
		i += copy(dAtA[i:], m.GoLink)
	}
	if len(m.ButtonText) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintAppIndex(dAtA, i, uint64(len(m.ButtonText)))
		i += copy(dAtA[i:], m.ButtonText)
	}
	if m.Status != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintAppIndex(dAtA, i, uint64(m.Status))
	}
	if m.Sort != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintAppIndex(dAtA, i, uint64(m.Sort))
	}
	return i, nil
}

func (m *AppIndexGetActivityCardResp_Room) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AppIndexGetActivityCardResp_Room) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.IsLive != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintAppIndex(dAtA, i, uint64(m.IsLive))
	}
	if m.Roomid != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintAppIndex(dAtA, i, uint64(m.Roomid))
	}
	if len(m.Title) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintAppIndex(dAtA, i, uint64(len(m.Title)))
		i += copy(dAtA[i:], m.Title)
	}
	if len(m.Uname) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintAppIndex(dAtA, i, uint64(len(m.Uname)))
		i += copy(dAtA[i:], m.Uname)
	}
	if m.Online != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintAppIndex(dAtA, i, uint64(m.Online))
	}
	if len(m.Cover) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintAppIndex(dAtA, i, uint64(len(m.Cover)))
		i += copy(dAtA[i:], m.Cover)
	}
	if m.AreaV2ParentId != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintAppIndex(dAtA, i, uint64(m.AreaV2ParentId))
	}
	if m.AreaV2Id != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintAppIndex(dAtA, i, uint64(m.AreaV2Id))
	}
	if m.Sort != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintAppIndex(dAtA, i, uint64(m.Sort))
	}
	return i, nil
}

func (m *AppIndexGetActivityCardResp_Av) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AppIndexGetActivityCardResp_Av) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Avid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintAppIndex(dAtA, i, uint64(m.Avid))
	}
	if len(m.Title) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintAppIndex(dAtA, i, uint64(len(m.Title)))
		i += copy(dAtA[i:], m.Title)
	}
	if m.ViewCount != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintAppIndex(dAtA, i, uint64(m.ViewCount))
	}
	if m.Danmaku != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintAppIndex(dAtA, i, uint64(m.Danmaku))
	}
	if m.Duration != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintAppIndex(dAtA, i, uint64(m.Duration))
	}
	if len(m.Cover) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintAppIndex(dAtA, i, uint64(len(m.Cover)))
		i += copy(dAtA[i:], m.Cover)
	}
	if m.Sort != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintAppIndex(dAtA, i, uint64(m.Sort))
	}
	return i, nil
}

func (m *AppIndexGetActivityCardResp_ActivityCard) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AppIndexGetActivityCardResp_ActivityCard) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Card != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAppIndex(dAtA, i, uint64(m.Card.Size()))
		n23, err := m.Card.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n23
	}
	if len(m.Room) > 0 {
		for _, msg := range m.Room {
			dAtA[i] = 0x12
			i++
			i = encodeVarintAppIndex(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Av) > 0 {
		for _, msg := range m.Av {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintAppIndex(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *AppIndexGetActivityCardResp_Data) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AppIndexGetActivityCardResp_Data) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ActivityCard) > 0 {
		for k, _ := range m.ActivityCard {
			dAtA[i] = 0xa
			i++
			v := m.ActivityCard[k]
			msgSize := 0
			if v != nil {
				msgSize = v.Size()
				msgSize += 1 + sovAppIndex(uint64(msgSize))
			}
			mapSize := 1 + sovAppIndex(uint64(k)) + msgSize
			i = encodeVarintAppIndex(dAtA, i, uint64(mapSize))
			dAtA[i] = 0x8
			i++
			i = encodeVarintAppIndex(dAtA, i, uint64(k))
			if v != nil {
				dAtA[i] = 0x12
				i++
				i = encodeVarintAppIndex(dAtA, i, uint64(v.Size()))
				n24, err := v.MarshalTo(dAtA[i:])
				if err != nil {
					return 0, err
				}
				i += n24
			}
		}
	}
	return i, nil
}

func encodeVarintAppIndex(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *AppIndexGetAllListReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Platform)
	if l > 0 {
		n += 1 + l + sovAppIndex(uint64(l))
	}
	l = len(m.Device)
	if l > 0 {
		n += 1 + l + sovAppIndex(uint64(l))
	}
	l = len(m.Scale)
	if l > 0 {
		n += 1 + l + sovAppIndex(uint64(l))
	}
	if m.Build != 0 {
		n += 1 + sovAppIndex(uint64(m.Build))
	}
	if m.ModuleId != 0 {
		n += 1 + sovAppIndex(uint64(m.ModuleId))
	}
	if m.RelationPage != 0 {
		n += 1 + sovAppIndex(uint64(m.RelationPage))
	}
	return n
}

func (m *AppIndexGetAllListResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovAppIndex(uint64(m.Code))
	}
	l = len(m.Msg)
	if l > 0 {
		n += 1 + l + sovAppIndex(uint64(l))
	}
	if m.Data != nil {
		l = m.Data.Size()
		n += 1 + l + sovAppIndex(uint64(l))
	}
	return n
}

func (m *AppIndexGetAllListResp_ModuleInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovAppIndex(uint64(m.Id))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovAppIndex(uint64(l))
	}
	l = len(m.Pic)
	if l > 0 {
		n += 1 + l + sovAppIndex(uint64(l))
	}
	if m.Type != 0 {
		n += 1 + sovAppIndex(uint64(m.Type))
	}
	l = len(m.Link)
	if l > 0 {
		n += 1 + l + sovAppIndex(uint64(l))
	}
	if m.Count != 0 {
		n += 1 + sovAppIndex(uint64(m.Count))
	}
	l = len(m.SubTitle)
	if l > 0 {
		n += 1 + l + sovAppIndex(uint64(l))
	}
	return n
}

func (m *AppIndexGetAllListResp_RoomList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Roomid != 0 {
		n += 1 + sovAppIndex(uint64(m.Roomid))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovAppIndex(uint64(l))
	}
	l = len(m.Uname)
	if l > 0 {
		n += 1 + l + sovAppIndex(uint64(l))
	}
	if m.Online != 0 {
		n += 1 + sovAppIndex(uint64(m.Online))
	}
	l = len(m.Cover)
	if l > 0 {
		n += 1 + l + sovAppIndex(uint64(l))
	}
	l = len(m.Link)
	if l > 0 {
		n += 1 + l + sovAppIndex(uint64(l))
	}
	l = len(m.Face)
	if l > 0 {
		n += 1 + l + sovAppIndex(uint64(l))
	}
	if m.AreaV2ParentId != 0 {
		n += 1 + sovAppIndex(uint64(m.AreaV2ParentId))
	}
	l = len(m.AreaV2ParentName)
	if l > 0 {
		n += 1 + l + sovAppIndex(uint64(l))
	}
	if m.AreaV2Id != 0 {
		n += 1 + sovAppIndex(uint64(m.AreaV2Id))
	}
	l = len(m.AreaV2Name)
	if l > 0 {
		n += 1 + l + sovAppIndex(uint64(l))
	}
	l = len(m.PlayUrl)
	if l > 0 {
		n += 1 + l + sovAppIndex(uint64(l))
	}
	l = len(m.PlayUrlH265)
	if l > 0 {
		n += 1 + l + sovAppIndex(uint64(l))
	}
	if m.CurrentQuality != 0 {
		n += 1 + sovAppIndex(uint64(m.CurrentQuality))
	}
	if len(m.AcceptQuality) > 0 {
		l = 0
		for _, e := range m.AcceptQuality {
			l += sovAppIndex(uint64(e))
		}
		n += 1 + sovAppIndex(uint64(l)) + l
	}
	if m.BroadcastType != 0 {
		n += 2 + sovAppIndex(uint64(m.BroadcastType))
	}
	l = len(m.PendentRu)
	if l > 0 {
		n += 2 + l + sovAppIndex(uint64(l))
	}
	l = len(m.PendentRuPic)
	if l > 0 {
		n += 2 + l + sovAppIndex(uint64(l))
	}
	l = len(m.PendentRuColor)
	if l > 0 {
		n += 2 + l + sovAppIndex(uint64(l))
	}
	if m.RecType != 0 {
		n += 2 + sovAppIndex(uint64(m.RecType))
	}
	if m.PkId != 0 {
		n += 2 + sovAppIndex(uint64(m.PkId))
	}
	return n
}

func (m *AppIndexGetAllListResp_ModuleList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ModuleInfo != nil {
		l = m.ModuleInfo.Size()
		n += 1 + l + sovAppIndex(uint64(l))
	}
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovAppIndex(uint64(l))
		}
	}
	return n
}

func (m *AppIndexGetAllListResp_Data) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Interval != 0 {
		n += 1 + sovAppIndex(uint64(m.Interval))
	}
	if len(m.ModuleList) > 0 {
		for _, e := range m.ModuleList {
			l = e.Size()
			n += 1 + l + sovAppIndex(uint64(l))
		}
	}
	return n
}

func (m *AppIndexGetBaseMInfoListReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ModuleId != 0 {
		n += 1 + sovAppIndex(uint64(m.ModuleId))
	}
	return n
}

func (m *AppIndexGetBaseMInfoListResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovAppIndex(uint64(m.Code))
	}
	l = len(m.Msg)
	if l > 0 {
		n += 1 + l + sovAppIndex(uint64(l))
	}
	if len(m.Data) > 0 {
		for _, e := range m.Data {
			l = e.Size()
			n += 1 + l + sovAppIndex(uint64(l))
		}
	}
	return n
}

func (m *AppIndexGetBaseMInfoListResp_ModuleInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovAppIndex(uint64(m.Id))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovAppIndex(uint64(l))
	}
	l = len(m.Pic)
	if l > 0 {
		n += 1 + l + sovAppIndex(uint64(l))
	}
	if m.Type != 0 {
		n += 1 + sovAppIndex(uint64(m.Type))
	}
	l = len(m.Link)
	if l > 0 {
		n += 1 + l + sovAppIndex(uint64(l))
	}
	if m.Sort != 0 {
		n += 1 + sovAppIndex(uint64(m.Sort))
	}
	if m.Count != 0 {
		n += 1 + sovAppIndex(uint64(m.Count))
	}
	return n
}

func (m *AppIndexGetRoomListByIdsReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Ids) > 0 {
		l = 0
		for _, e := range m.Ids {
			l += sovAppIndex(uint64(e))
		}
		n += 1 + sovAppIndex(uint64(l)) + l
	}
	return n
}

func (m *AppIndexGetRoomListByIdsResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovAppIndex(uint64(m.Code))
	}
	l = len(m.Msg)
	if l > 0 {
		n += 1 + l + sovAppIndex(uint64(l))
	}
	if len(m.Data) > 0 {
		for k, v := range m.Data {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovAppIndex(uint64(l))
			}
			mapEntrySize := 1 + sovAppIndex(uint64(k)) + l
			n += mapEntrySize + 1 + sovAppIndex(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *AppIndexGetRoomListByIdsResp_RoomInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Roomid != 0 {
		n += 1 + sovAppIndex(uint64(m.Roomid))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovAppIndex(uint64(l))
	}
	l = len(m.Uname)
	if l > 0 {
		n += 1 + l + sovAppIndex(uint64(l))
	}
	if m.Online != 0 {
		n += 1 + sovAppIndex(uint64(m.Online))
	}
	l = len(m.Cover)
	if l > 0 {
		n += 1 + l + sovAppIndex(uint64(l))
	}
	l = len(m.Link)
	if l > 0 {
		n += 1 + l + sovAppIndex(uint64(l))
	}
	l = len(m.Face)
	if l > 0 {
		n += 1 + l + sovAppIndex(uint64(l))
	}
	if m.AreaV2ParentId != 0 {
		n += 1 + sovAppIndex(uint64(m.AreaV2ParentId))
	}
	l = len(m.AreaV2ParentName)
	if l > 0 {
		n += 1 + l + sovAppIndex(uint64(l))
	}
	if m.AreaV2Id != 0 {
		n += 1 + sovAppIndex(uint64(m.AreaV2Id))
	}
	l = len(m.AreaV2Name)
	if l > 0 {
		n += 1 + l + sovAppIndex(uint64(l))
	}
	l = len(m.PlayUrl)
	if l > 0 {
		n += 1 + l + sovAppIndex(uint64(l))
	}
	l = len(m.PlayUrlH265)
	if l > 0 {
		n += 1 + l + sovAppIndex(uint64(l))
	}
	if m.CurrentQuality != 0 {
		n += 1 + sovAppIndex(uint64(m.CurrentQuality))
	}
	if len(m.AcceptQuality) > 0 {
		l = 0
		for _, e := range m.AcceptQuality {
			l += sovAppIndex(uint64(e))
		}
		n += 1 + sovAppIndex(uint64(l)) + l
	}
	if m.BroadcastType != 0 {
		n += 2 + sovAppIndex(uint64(m.BroadcastType))
	}
	l = len(m.PendentRu)
	if l > 0 {
		n += 2 + l + sovAppIndex(uint64(l))
	}
	l = len(m.PendentRuPic)
	if l > 0 {
		n += 2 + l + sovAppIndex(uint64(l))
	}
	l = len(m.PendentRuColor)
	if l > 0 {
		n += 2 + l + sovAppIndex(uint64(l))
	}
	if m.RecType != 0 {
		n += 2 + sovAppIndex(uint64(m.RecType))
	}
	if m.PkId != 0 {
		n += 2 + sovAppIndex(uint64(m.PkId))
	}
	return n
}

func (m *AppIndexGetRoomListByIdsResp_RoomList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovAppIndex(uint64(l))
		}
	}
	return n
}

func (m *AppIndexGetPicListByIdsReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Ids) > 0 {
		l = 0
		for _, e := range m.Ids {
			l += sovAppIndex(uint64(e))
		}
		n += 1 + sovAppIndex(uint64(l)) + l
	}
	return n
}

func (m *AppIndexGetPicListByIdsResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovAppIndex(uint64(m.Code))
	}
	l = len(m.Msg)
	if l > 0 {
		n += 1 + l + sovAppIndex(uint64(l))
	}
	if len(m.Data) > 0 {
		for k, v := range m.Data {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovAppIndex(uint64(l))
			}
			mapEntrySize := 1 + sovAppIndex(uint64(k)) + l
			n += mapEntrySize + 1 + sovAppIndex(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *AppIndexGetPicListByIdsResp_Item) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovAppIndex(uint64(m.Id))
	}
	l = len(m.Pic)
	if l > 0 {
		n += 1 + l + sovAppIndex(uint64(l))
	}
	l = len(m.Link)
	if l > 0 {
		n += 1 + l + sovAppIndex(uint64(l))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovAppIndex(uint64(l))
	}
	return n
}

func (m *AppIndexGetPicListByIdsResp_ItemList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovAppIndex(uint64(l))
		}
	}
	return n
}

func (m *AppIndexGetIndexBannerReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Platform)
	if l > 0 {
		n += 1 + l + sovAppIndex(uint64(l))
	}
	l = len(m.Device)
	if l > 0 {
		n += 1 + l + sovAppIndex(uint64(l))
	}
	if m.Build != 0 {
		n += 1 + sovAppIndex(uint64(m.Build))
	}
	return n
}

func (m *AppIndexGetIndexBannerResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovAppIndex(uint64(m.Code))
	}
	l = len(m.Msg)
	if l > 0 {
		n += 1 + l + sovAppIndex(uint64(l))
	}
	if m.Data != nil {
		l = m.Data.Size()
		n += 1 + l + sovAppIndex(uint64(l))
	}
	return n
}

func (m *AppIndexGetIndexBannerResp_Data) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovAppIndex(uint64(l))
	}
	l = len(m.Pic)
	if l > 0 {
		n += 1 + l + sovAppIndex(uint64(l))
	}
	l = len(m.Img)
	if l > 0 {
		n += 1 + l + sovAppIndex(uint64(l))
	}
	l = len(m.Link)
	if l > 0 {
		n += 1 + l + sovAppIndex(uint64(l))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovAppIndex(uint64(l))
	}
	l = len(m.Position)
	if l > 0 {
		n += 1 + l + sovAppIndex(uint64(l))
	}
	l = len(m.SortNum)
	if l > 0 {
		n += 1 + l + sovAppIndex(uint64(l))
	}
	l = len(m.Remark)
	if l > 0 {
		n += 1 + l + sovAppIndex(uint64(l))
	}
	return n
}

func (m *AppIndexGetAllRawListReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ModuleId != 0 {
		n += 1 + sovAppIndex(uint64(m.ModuleId))
	}
	return n
}

func (m *AppIndexGetAllRawListResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovAppIndex(uint64(m.Code))
	}
	l = len(m.Msg)
	if l > 0 {
		n += 1 + l + sovAppIndex(uint64(l))
	}
	if m.Data != nil {
		l = m.Data.Size()
		n += 1 + l + sovAppIndex(uint64(l))
	}
	return n
}

func (m *AppIndexGetAllRawListResp_ModuleInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovAppIndex(uint64(m.Id))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovAppIndex(uint64(l))
	}
	l = len(m.Pic)
	if l > 0 {
		n += 1 + l + sovAppIndex(uint64(l))
	}
	if m.Type != 0 {
		n += 1 + sovAppIndex(uint64(m.Type))
	}
	l = len(m.Link)
	if l > 0 {
		n += 1 + l + sovAppIndex(uint64(l))
	}
	if m.Count != 0 {
		n += 1 + sovAppIndex(uint64(m.Count))
	}
	l = len(m.SubTitle)
	if l > 0 {
		n += 1 + l + sovAppIndex(uint64(l))
	}
	return n
}

func (m *AppIndexGetAllRawListResp_RoomList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Roomid != 0 {
		n += 1 + sovAppIndex(uint64(m.Roomid))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovAppIndex(uint64(l))
	}
	l = len(m.Uname)
	if l > 0 {
		n += 1 + l + sovAppIndex(uint64(l))
	}
	if m.Online != 0 {
		n += 1 + sovAppIndex(uint64(m.Online))
	}
	l = len(m.Cover)
	if l > 0 {
		n += 1 + l + sovAppIndex(uint64(l))
	}
	l = len(m.Link)
	if l > 0 {
		n += 1 + l + sovAppIndex(uint64(l))
	}
	l = len(m.Face)
	if l > 0 {
		n += 1 + l + sovAppIndex(uint64(l))
	}
	if m.AreaV2ParentId != 0 {
		n += 1 + sovAppIndex(uint64(m.AreaV2ParentId))
	}
	l = len(m.AreaV2ParentName)
	if l > 0 {
		n += 1 + l + sovAppIndex(uint64(l))
	}
	if m.AreaV2Id != 0 {
		n += 1 + sovAppIndex(uint64(m.AreaV2Id))
	}
	l = len(m.AreaV2Name)
	if l > 0 {
		n += 1 + l + sovAppIndex(uint64(l))
	}
	l = len(m.PlayUrl)
	if l > 0 {
		n += 1 + l + sovAppIndex(uint64(l))
	}
	if m.CurrentQuality != 0 {
		n += 1 + sovAppIndex(uint64(m.CurrentQuality))
	}
	if len(m.AcceptQuality) > 0 {
		l = 0
		for _, e := range m.AcceptQuality {
			l += sovAppIndex(uint64(e))
		}
		n += 1 + sovAppIndex(uint64(l)) + l
	}
	if m.BroadcastType != 0 {
		n += 1 + sovAppIndex(uint64(m.BroadcastType))
	}
	l = len(m.PendentLd)
	if l > 0 {
		n += 2 + l + sovAppIndex(uint64(l))
	}
	l = len(m.PendentRu)
	if l > 0 {
		n += 2 + l + sovAppIndex(uint64(l))
	}
	l = len(m.PendentRuPic)
	if l > 0 {
		n += 2 + l + sovAppIndex(uint64(l))
	}
	l = len(m.PendentLdColor)
	if l > 0 {
		n += 2 + l + sovAppIndex(uint64(l))
	}
	l = len(m.PendentRuColor)
	if l > 0 {
		n += 2 + l + sovAppIndex(uint64(l))
	}
	if m.RecType != 0 {
		n += 2 + sovAppIndex(uint64(m.RecType))
	}
	if m.PkId != 0 {
		n += 2 + sovAppIndex(uint64(m.PkId))
	}
	return n
}

func (m *AppIndexGetAllRawListResp_ModuleList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ModuleInfo != nil {
		l = m.ModuleInfo.Size()
		n += 1 + l + sovAppIndex(uint64(l))
	}
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovAppIndex(uint64(l))
		}
	}
	return n
}

func (m *AppIndexGetAllRawListResp_Data) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Interval != 0 {
		n += 1 + sovAppIndex(uint64(m.Interval))
	}
	if len(m.ModuleList) > 0 {
		for _, e := range m.ModuleList {
			l = e.Size()
			n += 1 + l + sovAppIndex(uint64(l))
		}
	}
	return n
}

func (m *AppIndexGetMultiRoomListReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AreaIds)
	if l > 0 {
		n += 1 + l + sovAppIndex(uint64(l))
	}
	l = len(m.Platform)
	if l > 0 {
		n += 1 + l + sovAppIndex(uint64(l))
	}
	return n
}

func (m *AppIndexGetMultiRoomListResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovAppIndex(uint64(m.Code))
	}
	l = len(m.Msg)
	if l > 0 {
		n += 1 + l + sovAppIndex(uint64(l))
	}
	if len(m.Data) > 0 {
		for _, e := range m.Data {
			l = e.Size()
			n += 1 + l + sovAppIndex(uint64(l))
		}
	}
	return n
}

func (m *AppIndexGetMultiRoomListResp_RoomList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Roomid != 0 {
		n += 1 + sovAppIndex(uint64(m.Roomid))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovAppIndex(uint64(l))
	}
	l = len(m.Uname)
	if l > 0 {
		n += 1 + l + sovAppIndex(uint64(l))
	}
	if m.Online != 0 {
		n += 1 + sovAppIndex(uint64(m.Online))
	}
	l = len(m.Cover)
	if l > 0 {
		n += 1 + l + sovAppIndex(uint64(l))
	}
	l = len(m.Link)
	if l > 0 {
		n += 1 + l + sovAppIndex(uint64(l))
	}
	l = len(m.Face)
	if l > 0 {
		n += 1 + l + sovAppIndex(uint64(l))
	}
	if m.AreaV2ParentId != 0 {
		n += 1 + sovAppIndex(uint64(m.AreaV2ParentId))
	}
	l = len(m.AreaV2ParentName)
	if l > 0 {
		n += 1 + l + sovAppIndex(uint64(l))
	}
	if m.AreaV2Id != 0 {
		n += 1 + sovAppIndex(uint64(m.AreaV2Id))
	}
	l = len(m.AreaV2Name)
	if l > 0 {
		n += 1 + l + sovAppIndex(uint64(l))
	}
	l = len(m.PlayUrl)
	if l > 0 {
		n += 1 + l + sovAppIndex(uint64(l))
	}
	l = len(m.PlayUrlH265)
	if l > 0 {
		n += 1 + l + sovAppIndex(uint64(l))
	}
	if m.CurrentQuality != 0 {
		n += 1 + sovAppIndex(uint64(m.CurrentQuality))
	}
	if len(m.AcceptQuality) > 0 {
		l = 0
		for _, e := range m.AcceptQuality {
			l += sovAppIndex(uint64(e))
		}
		n += 1 + sovAppIndex(uint64(l)) + l
	}
	if m.BroadcastType != 0 {
		n += 2 + sovAppIndex(uint64(m.BroadcastType))
	}
	l = len(m.PendentRu)
	if l > 0 {
		n += 2 + l + sovAppIndex(uint64(l))
	}
	l = len(m.PendentRuPic)
	if l > 0 {
		n += 2 + l + sovAppIndex(uint64(l))
	}
	l = len(m.PendentRuColor)
	if l > 0 {
		n += 2 + l + sovAppIndex(uint64(l))
	}
	if m.RecType != 0 {
		n += 2 + sovAppIndex(uint64(m.RecType))
	}
	if m.PkId != 0 {
		n += 2 + sovAppIndex(uint64(m.PkId))
	}
	return n
}

func (m *AppIndexGetMultiRoomListResp_InfoList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovAppIndex(uint64(m.Id))
	}
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovAppIndex(uint64(l))
		}
	}
	return n
}

func (m *AppIndexGetActivityCardReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Ids) > 0 {
		l = 0
		for _, e := range m.Ids {
			l += sovAppIndex(uint64(e))
		}
		n += 1 + sovAppIndex(uint64(l)) + l
	}
	return n
}

func (m *AppIndexGetActivityCardResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovAppIndex(uint64(m.Code))
	}
	l = len(m.Msg)
	if l > 0 {
		n += 1 + l + sovAppIndex(uint64(l))
	}
	if m.Data != nil {
		l = m.Data.Size()
		n += 1 + l + sovAppIndex(uint64(l))
	}
	return n
}

func (m *AppIndexGetActivityCardResp_Banner) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Aid != 0 {
		n += 1 + sovAppIndex(uint64(m.Aid))
	}
	l = len(m.Pic)
	if l > 0 {
		n += 1 + l + sovAppIndex(uint64(l))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovAppIndex(uint64(l))
	}
	l = len(m.Text)
	if l > 0 {
		n += 1 + l + sovAppIndex(uint64(l))
	}
	l = len(m.PicLink)
	if l > 0 {
		n += 1 + l + sovAppIndex(uint64(l))
	}
	l = len(m.GoLink)
	if l > 0 {
		n += 1 + l + sovAppIndex(uint64(l))
	}
	l = len(m.ButtonText)
	if l > 0 {
		n += 1 + l + sovAppIndex(uint64(l))
	}
	if m.Status != 0 {
		n += 1 + sovAppIndex(uint64(m.Status))
	}
	if m.Sort != 0 {
		n += 1 + sovAppIndex(uint64(m.Sort))
	}
	return n
}

func (m *AppIndexGetActivityCardResp_Room) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IsLive != 0 {
		n += 1 + sovAppIndex(uint64(m.IsLive))
	}
	if m.Roomid != 0 {
		n += 1 + sovAppIndex(uint64(m.Roomid))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovAppIndex(uint64(l))
	}
	l = len(m.Uname)
	if l > 0 {
		n += 1 + l + sovAppIndex(uint64(l))
	}
	if m.Online != 0 {
		n += 1 + sovAppIndex(uint64(m.Online))
	}
	l = len(m.Cover)
	if l > 0 {
		n += 1 + l + sovAppIndex(uint64(l))
	}
	if m.AreaV2ParentId != 0 {
		n += 1 + sovAppIndex(uint64(m.AreaV2ParentId))
	}
	if m.AreaV2Id != 0 {
		n += 1 + sovAppIndex(uint64(m.AreaV2Id))
	}
	if m.Sort != 0 {
		n += 1 + sovAppIndex(uint64(m.Sort))
	}
	return n
}

func (m *AppIndexGetActivityCardResp_Av) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Avid != 0 {
		n += 1 + sovAppIndex(uint64(m.Avid))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovAppIndex(uint64(l))
	}
	if m.ViewCount != 0 {
		n += 1 + sovAppIndex(uint64(m.ViewCount))
	}
	if m.Danmaku != 0 {
		n += 1 + sovAppIndex(uint64(m.Danmaku))
	}
	if m.Duration != 0 {
		n += 1 + sovAppIndex(uint64(m.Duration))
	}
	l = len(m.Cover)
	if l > 0 {
		n += 1 + l + sovAppIndex(uint64(l))
	}
	if m.Sort != 0 {
		n += 1 + sovAppIndex(uint64(m.Sort))
	}
	return n
}

func (m *AppIndexGetActivityCardResp_ActivityCard) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Card != nil {
		l = m.Card.Size()
		n += 1 + l + sovAppIndex(uint64(l))
	}
	if len(m.Room) > 0 {
		for _, e := range m.Room {
			l = e.Size()
			n += 1 + l + sovAppIndex(uint64(l))
		}
	}
	if len(m.Av) > 0 {
		for _, e := range m.Av {
			l = e.Size()
			n += 1 + l + sovAppIndex(uint64(l))
		}
	}
	return n
}

func (m *AppIndexGetActivityCardResp_Data) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ActivityCard) > 0 {
		for k, v := range m.ActivityCard {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovAppIndex(uint64(l))
			}
			mapEntrySize := 1 + sovAppIndex(uint64(k)) + l
			n += mapEntrySize + 1 + sovAppIndex(uint64(mapEntrySize))
		}
	}
	return n
}

func sovAppIndex(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozAppIndex(x uint64) (n int) {
	return sovAppIndex(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *AppIndexGetAllListReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAppIndex
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AppIndexGetAllListReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AppIndexGetAllListReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Platform", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAppIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAppIndex
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Platform = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Device", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAppIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAppIndex
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Device = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Scale", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAppIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAppIndex
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Scale = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Build", wireType)
			}
			m.Build = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAppIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Build |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ModuleId", wireType)
			}
			m.ModuleId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAppIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ModuleId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RelationPage", wireType)
			}
			m.RelationPage = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAppIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RelationPage |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAppIndex(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAppIndex
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AppIndexGetAllListResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAppIndex
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AppIndexGetAllListResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AppIndexGetAllListResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAppIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAppIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAppIndex
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAppIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAppIndex
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = &AppIndexGetAllListResp_Data{}
			}
			if err := m.Data.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAppIndex(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAppIndex
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AppIndexGetAllListResp_ModuleInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAppIndex
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ModuleInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ModuleInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAppIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAppIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAppIndex
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pic", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAppIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAppIndex
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pic = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAppIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Link", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAppIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAppIndex
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Link = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAppIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubTitle", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAppIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAppIndex
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SubTitle = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAppIndex(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAppIndex
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AppIndexGetAllListResp_RoomList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAppIndex
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RoomList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RoomList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Roomid", wireType)
			}
			m.Roomid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAppIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Roomid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAppIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAppIndex
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uname", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAppIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAppIndex
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Uname = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Online", wireType)
			}
			m.Online = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAppIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Online |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cover", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAppIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAppIndex
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cover = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Link", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAppIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAppIndex
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Link = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Face", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAppIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAppIndex
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Face = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AreaV2ParentId", wireType)
			}
			m.AreaV2ParentId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAppIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AreaV2ParentId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AreaV2ParentName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAppIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAppIndex
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AreaV2ParentName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AreaV2Id", wireType)
			}
			m.AreaV2Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAppIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AreaV2Id |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AreaV2Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAppIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAppIndex
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AreaV2Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAppIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAppIndex
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PlayUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayUrlH265", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAppIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAppIndex
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PlayUrlH265 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentQuality", wireType)
			}
			m.CurrentQuality = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAppIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CurrentQuality |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 15:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowAppIndex
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.AcceptQuality = append(m.AcceptQuality, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowAppIndex
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthAppIndex
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.AcceptQuality) == 0 {
					m.AcceptQuality = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowAppIndex
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.AcceptQuality = append(m.AcceptQuality, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field AcceptQuality", wireType)
			}
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BroadcastType", wireType)
			}
			m.BroadcastType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAppIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BroadcastType |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PendentRu", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAppIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAppIndex
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PendentRu = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PendentRuPic", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAppIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAppIndex
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PendentRuPic = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PendentRuColor", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAppIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAppIndex
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PendentRuColor = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 20:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecType", wireType)
			}
			m.RecType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAppIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RecType |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 21:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PkId", wireType)
			}
			m.PkId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAppIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PkId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAppIndex(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAppIndex
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AppIndexGetAllListResp_ModuleList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAppIndex
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ModuleList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ModuleList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ModuleInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAppIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAppIndex
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ModuleInfo == nil {
				m.ModuleInfo = &AppIndexGetAllListResp_ModuleInfo{}
			}
			if err := m.ModuleInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAppIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAppIndex
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &AppIndexGetAllListResp_RoomList{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAppIndex(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAppIndex
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AppIndexGetAllListResp_Data) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAppIndex
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Data: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Data: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Interval", wireType)
			}
			m.Interval = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAppIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Interval |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ModuleList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAppIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAppIndex
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ModuleList = append(m.ModuleList, &AppIndexGetAllListResp_ModuleList{})
			if err := m.ModuleList[len(m.ModuleList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAppIndex(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAppIndex
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AppIndexGetBaseMInfoListReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAppIndex
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AppIndexGetBaseMInfoListReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AppIndexGetBaseMInfoListReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ModuleId", wireType)
			}
			m.ModuleId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAppIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ModuleId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAppIndex(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAppIndex
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AppIndexGetBaseMInfoListResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAppIndex
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AppIndexGetBaseMInfoListResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AppIndexGetBaseMInfoListResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAppIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAppIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAppIndex
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAppIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAppIndex
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data, &AppIndexGetBaseMInfoListResp_ModuleInfo{})
			if err := m.Data[len(m.Data)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAppIndex(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAppIndex
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AppIndexGetBaseMInfoListResp_ModuleInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAppIndex
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ModuleInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ModuleInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAppIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAppIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAppIndex
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pic", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAppIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAppIndex
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pic = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAppIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Link", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAppIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAppIndex
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Link = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sort", wireType)
			}
			m.Sort = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAppIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sort |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAppIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAppIndex(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAppIndex
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AppIndexGetRoomListByIdsReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAppIndex
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AppIndexGetRoomListByIdsReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AppIndexGetRoomListByIdsReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowAppIndex
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Ids = append(m.Ids, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowAppIndex
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthAppIndex
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Ids) == 0 {
					m.Ids = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowAppIndex
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Ids = append(m.Ids, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Ids", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAppIndex(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAppIndex
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AppIndexGetRoomListByIdsResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAppIndex
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AppIndexGetRoomListByIdsResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AppIndexGetRoomListByIdsResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAppIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAppIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAppIndex
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAppIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAppIndex
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = make(map[int64]*AppIndexGetRoomListByIdsResp_RoomList)
			}
			var mapkey int64
			var mapvalue *AppIndexGetRoomListByIdsResp_RoomList
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowAppIndex
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowAppIndex
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= (int64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowAppIndex
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= (int(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthAppIndex
					}
					postmsgIndex := iNdEx + mapmsglen
					if mapmsglen < 0 {
						return ErrInvalidLengthAppIndex
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &AppIndexGetRoomListByIdsResp_RoomList{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipAppIndex(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthAppIndex
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Data[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAppIndex(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAppIndex
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AppIndexGetRoomListByIdsResp_RoomInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAppIndex
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RoomInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RoomInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Roomid", wireType)
			}
			m.Roomid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAppIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Roomid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAppIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAppIndex
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uname", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAppIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAppIndex
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Uname = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Online", wireType)
			}
			m.Online = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAppIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Online |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cover", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAppIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAppIndex
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cover = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Link", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAppIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAppIndex
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Link = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Face", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAppIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAppIndex
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Face = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AreaV2ParentId", wireType)
			}
			m.AreaV2ParentId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAppIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AreaV2ParentId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AreaV2ParentName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAppIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAppIndex
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AreaV2ParentName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AreaV2Id", wireType)
			}
			m.AreaV2Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAppIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AreaV2Id |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AreaV2Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAppIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAppIndex
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AreaV2Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAppIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAppIndex
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PlayUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayUrlH265", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAppIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAppIndex
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PlayUrlH265 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentQuality", wireType)
			}
			m.CurrentQuality = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAppIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CurrentQuality |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 15:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowAppIndex
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.AcceptQuality = append(m.AcceptQuality, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowAppIndex
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthAppIndex
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.AcceptQuality) == 0 {
					m.AcceptQuality = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowAppIndex
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.AcceptQuality = append(m.AcceptQuality, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field AcceptQuality", wireType)
			}
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BroadcastType", wireType)
			}
			m.BroadcastType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAppIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BroadcastType |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PendentRu", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAppIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAppIndex
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PendentRu = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PendentRuPic", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAppIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAppIndex
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PendentRuPic = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PendentRuColor", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAppIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAppIndex
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PendentRuColor = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 20:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecType", wireType)
			}
			m.RecType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAppIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RecType |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 21:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PkId", wireType)
			}
			m.PkId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAppIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PkId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAppIndex(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAppIndex
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AppIndexGetRoomListByIdsResp_RoomList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAppIndex
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RoomList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RoomList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAppIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAppIndex
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &AppIndexGetRoomListByIdsResp_RoomInfo{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAppIndex(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAppIndex
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AppIndexGetPicListByIdsReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAppIndex
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AppIndexGetPicListByIdsReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AppIndexGetPicListByIdsReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowAppIndex
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Ids = append(m.Ids, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowAppIndex
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthAppIndex
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Ids) == 0 {
					m.Ids = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowAppIndex
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Ids = append(m.Ids, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Ids", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAppIndex(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAppIndex
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AppIndexGetPicListByIdsResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAppIndex
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AppIndexGetPicListByIdsResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AppIndexGetPicListByIdsResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAppIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAppIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAppIndex
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAppIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAppIndex
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = make(map[int64]*AppIndexGetPicListByIdsResp_ItemList)
			}
			var mapkey int64
			var mapvalue *AppIndexGetPicListByIdsResp_ItemList
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowAppIndex
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowAppIndex
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= (int64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowAppIndex
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= (int(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthAppIndex
					}
					postmsgIndex := iNdEx + mapmsglen
					if mapmsglen < 0 {
						return ErrInvalidLengthAppIndex
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &AppIndexGetPicListByIdsResp_ItemList{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipAppIndex(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthAppIndex
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Data[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAppIndex(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAppIndex
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AppIndexGetPicListByIdsResp_Item) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAppIndex
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Item: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Item: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAppIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pic", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAppIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAppIndex
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pic = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Link", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAppIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAppIndex
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Link = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAppIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAppIndex
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAppIndex(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAppIndex
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AppIndexGetPicListByIdsResp_ItemList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAppIndex
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ItemList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ItemList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAppIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAppIndex
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &AppIndexGetPicListByIdsResp_Item{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAppIndex(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAppIndex
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AppIndexGetIndexBannerReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAppIndex
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AppIndexGetIndexBannerReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AppIndexGetIndexBannerReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Platform", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAppIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAppIndex
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Platform = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Device", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAppIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAppIndex
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Device = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Build", wireType)
			}
			m.Build = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAppIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Build |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAppIndex(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAppIndex
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AppIndexGetIndexBannerResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAppIndex
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AppIndexGetIndexBannerResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AppIndexGetIndexBannerResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAppIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAppIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAppIndex
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAppIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAppIndex
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = &AppIndexGetIndexBannerResp_Data{}
			}
			if err := m.Data.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAppIndex(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAppIndex
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AppIndexGetIndexBannerResp_Data) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAppIndex
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Data: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Data: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAppIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAppIndex
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pic", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAppIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAppIndex
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pic = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Img", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAppIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAppIndex
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Img = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Link", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAppIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAppIndex
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Link = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAppIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAppIndex
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Position", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAppIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAppIndex
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Position = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SortNum", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAppIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAppIndex
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SortNum = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Remark", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAppIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAppIndex
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Remark = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAppIndex(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAppIndex
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AppIndexGetAllRawListReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAppIndex
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AppIndexGetAllRawListReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AppIndexGetAllRawListReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ModuleId", wireType)
			}
			m.ModuleId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAppIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ModuleId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAppIndex(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAppIndex
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AppIndexGetAllRawListResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAppIndex
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AppIndexGetAllRawListResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AppIndexGetAllRawListResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAppIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAppIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAppIndex
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAppIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAppIndex
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = &AppIndexGetAllRawListResp_Data{}
			}
			if err := m.Data.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAppIndex(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAppIndex
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AppIndexGetAllRawListResp_ModuleInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAppIndex
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ModuleInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ModuleInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAppIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAppIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAppIndex
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pic", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAppIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAppIndex
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pic = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAppIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Link", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAppIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAppIndex
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Link = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAppIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubTitle", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAppIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAppIndex
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SubTitle = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAppIndex(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAppIndex
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AppIndexGetAllRawListResp_RoomList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAppIndex
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RoomList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RoomList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Roomid", wireType)
			}
			m.Roomid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAppIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Roomid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAppIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAppIndex
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uname", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAppIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAppIndex
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Uname = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Online", wireType)
			}
			m.Online = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAppIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Online |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cover", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAppIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAppIndex
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cover = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Link", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAppIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAppIndex
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Link = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Face", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAppIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAppIndex
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Face = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AreaV2ParentId", wireType)
			}
			m.AreaV2ParentId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAppIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AreaV2ParentId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AreaV2ParentName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAppIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAppIndex
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AreaV2ParentName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AreaV2Id", wireType)
			}
			m.AreaV2Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAppIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AreaV2Id |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AreaV2Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAppIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAppIndex
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AreaV2Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAppIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAppIndex
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PlayUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentQuality", wireType)
			}
			m.CurrentQuality = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAppIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CurrentQuality |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowAppIndex
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.AcceptQuality = append(m.AcceptQuality, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowAppIndex
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthAppIndex
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.AcceptQuality) == 0 {
					m.AcceptQuality = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowAppIndex
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.AcceptQuality = append(m.AcceptQuality, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field AcceptQuality", wireType)
			}
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BroadcastType", wireType)
			}
			m.BroadcastType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAppIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BroadcastType |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PendentLd", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAppIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAppIndex
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PendentLd = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PendentRu", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAppIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAppIndex
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PendentRu = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PendentRuPic", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAppIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAppIndex
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PendentRuPic = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PendentLdColor", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAppIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAppIndex
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PendentLdColor = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PendentRuColor", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAppIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAppIndex
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PendentRuColor = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 21:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecType", wireType)
			}
			m.RecType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAppIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RecType |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 22:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PkId", wireType)
			}
			m.PkId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAppIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PkId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAppIndex(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAppIndex
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AppIndexGetAllRawListResp_ModuleList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAppIndex
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ModuleList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ModuleList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ModuleInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAppIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAppIndex
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ModuleInfo == nil {
				m.ModuleInfo = &AppIndexGetAllRawListResp_ModuleInfo{}
			}
			if err := m.ModuleInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAppIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAppIndex
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &AppIndexGetAllRawListResp_RoomList{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAppIndex(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAppIndex
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AppIndexGetAllRawListResp_Data) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAppIndex
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Data: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Data: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Interval", wireType)
			}
			m.Interval = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAppIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Interval |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ModuleList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAppIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAppIndex
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ModuleList = append(m.ModuleList, &AppIndexGetAllRawListResp_ModuleList{})
			if err := m.ModuleList[len(m.ModuleList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAppIndex(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAppIndex
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AppIndexGetMultiRoomListReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAppIndex
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AppIndexGetMultiRoomListReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AppIndexGetMultiRoomListReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AreaIds", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAppIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAppIndex
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AreaIds = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Platform", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAppIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAppIndex
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Platform = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAppIndex(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAppIndex
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AppIndexGetMultiRoomListResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAppIndex
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AppIndexGetMultiRoomListResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AppIndexGetMultiRoomListResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAppIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAppIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAppIndex
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAppIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAppIndex
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data, &AppIndexGetMultiRoomListResp_InfoList{})
			if err := m.Data[len(m.Data)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAppIndex(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAppIndex
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AppIndexGetMultiRoomListResp_RoomList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAppIndex
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RoomList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RoomList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Roomid", wireType)
			}
			m.Roomid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAppIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Roomid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAppIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAppIndex
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uname", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAppIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAppIndex
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Uname = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Online", wireType)
			}
			m.Online = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAppIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Online |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cover", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAppIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAppIndex
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cover = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Link", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAppIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAppIndex
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Link = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Face", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAppIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAppIndex
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Face = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AreaV2ParentId", wireType)
			}
			m.AreaV2ParentId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAppIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AreaV2ParentId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AreaV2ParentName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAppIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAppIndex
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AreaV2ParentName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AreaV2Id", wireType)
			}
			m.AreaV2Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAppIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AreaV2Id |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AreaV2Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAppIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAppIndex
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AreaV2Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAppIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAppIndex
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PlayUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayUrlH265", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAppIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAppIndex
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PlayUrlH265 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentQuality", wireType)
			}
			m.CurrentQuality = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAppIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CurrentQuality |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 15:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowAppIndex
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.AcceptQuality = append(m.AcceptQuality, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowAppIndex
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthAppIndex
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.AcceptQuality) == 0 {
					m.AcceptQuality = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowAppIndex
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.AcceptQuality = append(m.AcceptQuality, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field AcceptQuality", wireType)
			}
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BroadcastType", wireType)
			}
			m.BroadcastType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAppIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BroadcastType |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PendentRu", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAppIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAppIndex
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PendentRu = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PendentRuPic", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAppIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAppIndex
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PendentRuPic = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PendentRuColor", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAppIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAppIndex
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PendentRuColor = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 20:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecType", wireType)
			}
			m.RecType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAppIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RecType |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 21:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PkId", wireType)
			}
			m.PkId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAppIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PkId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAppIndex(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAppIndex
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AppIndexGetMultiRoomListResp_InfoList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAppIndex
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InfoList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InfoList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAppIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAppIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAppIndex
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &AppIndexGetMultiRoomListResp_RoomList{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAppIndex(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAppIndex
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AppIndexGetActivityCardReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAppIndex
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AppIndexGetActivityCardReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AppIndexGetActivityCardReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowAppIndex
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Ids = append(m.Ids, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowAppIndex
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthAppIndex
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Ids) == 0 {
					m.Ids = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowAppIndex
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Ids = append(m.Ids, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Ids", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAppIndex(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAppIndex
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AppIndexGetActivityCardResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAppIndex
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AppIndexGetActivityCardResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AppIndexGetActivityCardResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAppIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAppIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAppIndex
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAppIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAppIndex
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = &AppIndexGetActivityCardResp_Data{}
			}
			if err := m.Data.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAppIndex(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAppIndex
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AppIndexGetActivityCardResp_Banner) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAppIndex
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Banner: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Banner: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Aid", wireType)
			}
			m.Aid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAppIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Aid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pic", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAppIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAppIndex
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pic = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAppIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAppIndex
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Text", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAppIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAppIndex
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Text = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PicLink", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAppIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAppIndex
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PicLink = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GoLink", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAppIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAppIndex
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GoLink = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ButtonText", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAppIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAppIndex
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ButtonText = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAppIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sort", wireType)
			}
			m.Sort = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAppIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sort |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAppIndex(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAppIndex
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AppIndexGetActivityCardResp_Room) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAppIndex
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Room: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Room: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsLive", wireType)
			}
			m.IsLive = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAppIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IsLive |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Roomid", wireType)
			}
			m.Roomid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAppIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Roomid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAppIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAppIndex
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uname", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAppIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAppIndex
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Uname = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Online", wireType)
			}
			m.Online = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAppIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Online |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cover", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAppIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAppIndex
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cover = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AreaV2ParentId", wireType)
			}
			m.AreaV2ParentId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAppIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AreaV2ParentId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AreaV2Id", wireType)
			}
			m.AreaV2Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAppIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AreaV2Id |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sort", wireType)
			}
			m.Sort = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAppIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sort |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAppIndex(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAppIndex
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AppIndexGetActivityCardResp_Av) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAppIndex
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Av: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Av: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Avid", wireType)
			}
			m.Avid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAppIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Avid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAppIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAppIndex
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ViewCount", wireType)
			}
			m.ViewCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAppIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ViewCount |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Danmaku", wireType)
			}
			m.Danmaku = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAppIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Danmaku |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Duration", wireType)
			}
			m.Duration = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAppIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Duration |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cover", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAppIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAppIndex
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cover = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sort", wireType)
			}
			m.Sort = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAppIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sort |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAppIndex(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAppIndex
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AppIndexGetActivityCardResp_ActivityCard) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAppIndex
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ActivityCard: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ActivityCard: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Card", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAppIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAppIndex
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Card == nil {
				m.Card = &AppIndexGetActivityCardResp_Banner{}
			}
			if err := m.Card.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Room", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAppIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAppIndex
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Room = append(m.Room, &AppIndexGetActivityCardResp_Room{})
			if err := m.Room[len(m.Room)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Av", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAppIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAppIndex
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Av = append(m.Av, &AppIndexGetActivityCardResp_Av{})
			if err := m.Av[len(m.Av)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAppIndex(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAppIndex
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AppIndexGetActivityCardResp_Data) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAppIndex
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Data: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Data: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActivityCard", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAppIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAppIndex
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ActivityCard == nil {
				m.ActivityCard = make(map[int64]*AppIndexGetActivityCardResp_ActivityCard)
			}
			var mapkey int64
			var mapvalue *AppIndexGetActivityCardResp_ActivityCard
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowAppIndex
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowAppIndex
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= (int64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowAppIndex
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= (int(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthAppIndex
					}
					postmsgIndex := iNdEx + mapmsglen
					if mapmsglen < 0 {
						return ErrInvalidLengthAppIndex
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &AppIndexGetActivityCardResp_ActivityCard{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipAppIndex(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthAppIndex
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.ActivityCard[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAppIndex(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAppIndex
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipAppIndex(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowAppIndex
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAppIndex
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAppIndex
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthAppIndex
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowAppIndex
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipAppIndex(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthAppIndex = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowAppIndex   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("v2/AppIndex.proto", fileDescriptor_AppIndex_45d5ad418ac35a63) }

var fileDescriptor_AppIndex_45d5ad418ac35a63 = []byte{
	// 2191 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x1a, 0x4d, 0x6f, 0x1c, 0x49,
	0x35, 0xf3, 0xe1, 0xf9, 0x78, 0xf6, 0xf8, 0xa3, 0xf3, 0xc1, 0x64, 0xb0, 0xdc, 0x61, 0x92, 0x55,
	0xcc, 0x2e, 0x76, 0x96, 0x41, 0x09, 0xe1, 0x43, 0x80, 0x9d, 0xdd, 0x84, 0x91, 0xec, 0x28, 0x14,
	0x61, 0x05, 0x68, 0xa5, 0x56, 0xb9, 0xbb, 0x3d, 0xdb, 0x72, 0x4f, 0xf7, 0xb8, 0xbf, 0x36, 0xbe,
	0x22, 0x71, 0x59, 0x24, 0x04, 0x67, 0x7e, 0x00, 0x12, 0x12, 0x17, 0x4e, 0x1c, 0x39, 0x72, 0x63,
	0x8f, 0x48, 0x2b, 0x8d, 0x50, 0x2c, 0x0e, 0x0c, 0x07, 0x2e, 0x5c, 0x91, 0x50, 0xbd, 0xaa, 0xee,
	0xe9, 0x9a, 0xe9, 0xf1, 0x74, 0x62, 0xad, 0x40, 0xd1, 0x5c, 0xaa, 0xab, 0x5e, 0xd5, 0xab, 0x57,
	0xef, 0xbd, 0xaa, 0xf7, 0x5e, 0xbd, 0x6a, 0xd8, 0x88, 0x3a, 0xf7, 0xf6, 0x06, 0x83, 0xae, 0x63,
	0x98, 0x2f, 0x76, 0x07, 0x9e, 0x1b, 0xb8, 0x4a, 0xd5, 0x73, 0xdd, 0xfe, 0x6e, 0xd4, 0x69, 0xed,
	0xf4, 0xac, 0xe0, 0xa3, 0xf0, 0x68, 0x57, 0x77, 0xfb, 0xf7, 0x7a, 0x6e, 0xcf, 0xbd, 0x87, 0xfd,
	0x47, 0xe1, 0x31, 0xb6, 0xb0, 0x81, 0x35, 0x8e, 0xd7, 0xfe, 0x45, 0x11, 0xae, 0xc7, 0x53, 0x3d,
	0x31, 0x83, 0x3d, 0xdb, 0x3e, 0xb0, 0xfc, 0x80, 0x98, 0xa7, 0xca, 0x36, 0xd4, 0x06, 0x36, 0x0d,
	0x8e, 0x5d, 0xaf, 0xdf, 0x2c, 0xdc, 0x2a, 0x6c, 0xd7, 0xf7, 0x57, 0x46, 0x43, 0x35, 0x81, 0x91,
	0xa4, 0xa6, 0xb4, 0xa1, 0x62, 0x98, 0x91, 0xa5, 0x9b, 0xcd, 0x22, 0x8e, 0x83, 0xd1, 0x50, 0x15,
	0x10, 0x22, 0xbe, 0x8a, 0x0a, 0x4b, 0xbe, 0x4e, 0x6d, 0xb3, 0x59, 0xc2, 0x21, 0xf5, 0xd1, 0x50,
	0xe5, 0x00, 0xc2, 0x3f, 0x6c, 0xc0, 0x51, 0x68, 0xd9, 0x46, 0xb3, 0x7c, 0xab, 0xb0, 0x5d, 0xe2,
	0x03, 0x10, 0x40, 0xf8, 0x47, 0x79, 0x1b, 0xea, 0x7d, 0xd7, 0x08, 0x6d, 0x53, 0xb3, 0x8c, 0xe6,
	0x12, 0x0e, 0x6a, 0x8c, 0x86, 0xea, 0x18, 0x48, 0x6a, 0xbc, 0xda, 0x35, 0x94, 0x07, 0xd0, 0xf0,
	0x4c, 0x9b, 0x06, 0x96, 0xeb, 0x68, 0x03, 0xda, 0x33, 0x9b, 0x15, 0x1c, 0xbf, 0x31, 0x1a, 0xaa,
	0x72, 0x07, 0x59, 0x89, 0x9b, 0xcf, 0x68, 0xcf, 0x6c, 0xff, 0xbe, 0x01, 0x37, 0xb2, 0xa4, 0xe1,
	0x0f, 0x94, 0x4d, 0x28, 0xeb, 0xae, 0x61, 0xa2, 0x28, 0x4a, 0xfb, 0xb5, 0xd1, 0x50, 0xc5, 0x36,
	0xc1, 0x52, 0xb9, 0x09, 0xa5, 0xbe, 0xdf, 0x13, 0xfc, 0x57, 0x47, 0x43, 0x95, 0x35, 0x09, 0x2b,
	0x94, 0x7d, 0x28, 0x1b, 0x34, 0xa0, 0xc8, 0xf8, 0x72, 0xe7, 0xce, 0xae, 0x50, 0xd4, 0x6e, 0x36,
	0x9d, 0xdd, 0xf7, 0x68, 0x40, 0xf9, 0xf4, 0x0c, 0x8b, 0x60, 0xd9, 0xfa, 0x47, 0x01, 0xe0, 0x90,
	0x33, 0xe7, 0x1c, 0xbb, 0xca, 0x0d, 0x28, 0x5a, 0x86, 0x58, 0x49, 0x65, 0x34, 0x54, 0x8b, 0x96,
	0x41, 0x8a, 0x96, 0xc1, 0x64, 0x18, 0x58, 0x81, 0x1d, 0xeb, 0x01, 0x65, 0x88, 0x00, 0xc2, 0x3f,
	0x6c, 0x99, 0x03, 0x4b, 0x17, 0x3a, 0xc0, 0x65, 0x0e, 0x2c, 0x9d, 0xb0, 0x82, 0xf1, 0x17, 0x9c,
	0x0d, 0x4c, 0x21, 0x7e, 0x5c, 0x00, 0x6b, 0x13, 0x2c, 0x59, 0xaf, 0x6d, 0x39, 0x27, 0x28, 0xf7,
	0x3a, 0xef, 0x65, 0x6d, 0x82, 0x25, 0xa3, 0xab, 0xbb, 0xa1, 0x13, 0x08, 0x31, 0x23, 0x5d, 0x04,
	0x10, 0xfe, 0x61, 0xba, 0xf3, 0xc3, 0x23, 0x8d, 0x2f, 0xae, 0x8a, 0x73, 0xa0, 0xee, 0x12, 0x20,
	0xa9, 0xf9, 0xe1, 0xd1, 0x73, 0x56, 0x6b, 0x9d, 0x57, 0xa1, 0x46, 0x5c, 0xb7, 0xcf, 0x24, 0xc2,
	0xb6, 0x16, 0x93, 0x57, 0xc2, 0x2d, 0x6e, 0x2d, 0x0e, 0x21, 0xe2, 0x3b, 0x9f, 0x6b, 0x15, 0x96,
	0x42, 0x87, 0xf6, 0xa5, 0xbd, 0x87, 0x00, 0xc2, 0x3f, 0x8c, 0x8a, 0xeb, 0xd8, 0x96, 0x13, 0x73,
	0x8f, 0x54, 0x38, 0x84, 0x88, 0x2f, 0xe7, 0x31, 0x32, 0x3d, 0x21, 0x02, 0xc1, 0x63, 0x64, 0x7a,
	0x84, 0x7f, 0x12, 0x11, 0x55, 0x32, 0x45, 0xb4, 0x09, 0xe5, 0x63, 0xaa, 0xc7, 0xcc, 0x63, 0x2f,
	0x6b, 0x13, 0x2c, 0x95, 0xef, 0xc1, 0x06, 0xf5, 0x4c, 0xaa, 0x45, 0x1d, 0x6d, 0x40, 0x3d, 0xd3,
	0x09, 0xd8, 0x1e, 0xaf, 0xe1, 0x5a, 0xae, 0x8f, 0x86, 0xea, 0x74, 0x27, 0x59, 0x65, 0xa0, 0x0f,
	0x3a, 0xcf, 0x10, 0xd0, 0x35, 0x94, 0xc7, 0x70, 0x75, 0x62, 0x10, 0x72, 0x5c, 0x47, 0x72, 0x5f,
	0x18, 0x0d, 0xd5, 0xac, 0x6e, 0xb2, 0x9e, 0x9e, 0xe5, 0x29, 0x13, 0xc5, 0x57, 0x00, 0xe2, 0x81,
	0x96, 0xd1, 0x04, 0x5c, 0xc2, 0xea, 0x68, 0xa8, 0xa6, 0xa0, 0xa4, 0xc6, 0xb1, 0xba, 0x86, 0xd2,
	0x81, 0x95, 0x18, 0x8e, 0xe4, 0x96, 0x91, 0xdc, 0xfa, 0x68, 0xa8, 0x4a, 0x70, 0x02, 0x1c, 0x03,
	0x29, 0xdc, 0x45, 0xbb, 0x72, 0xa6, 0x85, 0x9e, 0xdd, 0x5c, 0x91, 0xec, 0x0a, 0xc2, 0x48, 0x95,
	0xd5, 0x7e, 0xe4, 0xd9, 0xca, 0x7d, 0x68, 0xc4, 0x40, 0xed, 0xa3, 0xce, 0x83, 0xfb, 0xcd, 0x06,
	0x8e, 0xc6, 0x43, 0x2c, 0x75, 0x90, 0x65, 0x81, 0xf2, 0xfd, 0xce, 0x83, 0xfb, 0xca, 0xb7, 0x61,
	0x4d, 0x0f, 0x3d, 0xe4, 0xf1, 0x34, 0xa4, 0xb6, 0x15, 0x9c, 0x35, 0x57, 0x91, 0x8d, 0xab, 0xa3,
	0xa1, 0x3a, 0xd9, 0x45, 0x56, 0x05, 0xe0, 0x07, 0xbc, 0xad, 0x7c, 0x03, 0x56, 0xa9, 0xae, 0x9b,
	0x83, 0x31, 0xf2, 0xda, 0xad, 0xd2, 0x76, 0x69, 0x5f, 0x19, 0x0d, 0xd5, 0x89, 0x1e, 0xd2, 0xe0,
	0xed, 0x14, 0xea, 0x91, 0xe7, 0x52, 0x43, 0xa7, 0x7e, 0xa0, 0xe1, 0x59, 0x5a, 0x47, 0xba, 0x88,
	0x2a, 0xf7, 0x90, 0x46, 0xd2, 0x7e, 0xce, 0x8e, 0xd7, 0x0e, 0xc0, 0xc0, 0x74, 0x0c, 0xb6, 0x30,
	0x2f, 0x6c, 0x6e, 0x20, 0x9f, 0x28, 0xf5, 0x31, 0x94, 0xd4, 0x45, 0x9d, 0x84, 0xca, 0x43, 0x58,
	0x1d, 0x77, 0x68, 0xec, 0x44, 0x2b, 0x88, 0x82, 0x94, 0xe4, 0x1e, 0xb2, 0x92, 0xa0, 0x3d, 0xb3,
	0x74, 0xe5, 0x3b, 0xb0, 0x9e, 0xea, 0xd7, 0x5d, 0xdb, 0xf5, 0x9a, 0x57, 0x11, 0xf7, 0xda, 0x68,
	0xa8, 0x4e, 0xf5, 0x91, 0xd5, 0x04, 0xfb, 0x11, 0x6b, 0x33, 0xe5, 0x79, 0xa6, 0xce, 0xb9, 0xbb,
	0x86, 0xdc, 0xa1, 0xf2, 0x62, 0x18, 0xa9, 0x7a, 0xa6, 0x8e, 0x1c, 0x6d, 0xc1, 0xd2, 0xe0, 0x84,
	0x6d, 0xa1, 0xeb, 0x63, 0x93, 0x80, 0x00, 0x52, 0x1e, 0x9c, 0x74, 0x8d, 0xd6, 0x1f, 0x12, 0x8b,
	0x86, 0xe7, 0xfc, 0x43, 0x58, 0x8e, 0xed, 0xb8, 0x73, 0xec, 0xe2, 0x61, 0x5f, 0xee, 0xbc, 0x3d,
	0xcf, 0x56, 0x8e, 0x4d, 0xe2, 0xfe, 0xda, 0x68, 0xa8, 0xa6, 0xa7, 0x20, 0xd0, 0x1f, 0xdb, 0xcb,
	0xc7, 0xec, 0x68, 0xfa, 0x41, 0xb3, 0x78, 0xab, 0xb4, 0xbd, 0xdc, 0xd9, 0x9e, 0x37, 0x6d, 0x6c,
	0x7d, 0xe2, 0x43, 0xec, 0x07, 0x04, 0xcb, 0xd6, 0x2f, 0x0b, 0x50, 0x66, 0xf6, 0x99, 0xf9, 0x46,
	0xcb, 0x09, 0x4c, 0x2f, 0xa2, 0xb6, 0x30, 0x4c, 0x28, 0x86, 0x18, 0x46, 0x92, 0x5a, 0x8a, 0xb1,
	0xd4, 0x0a, 0x72, 0x32, 0x86, 0x6b, 0x48, 0x33, 0x86, 0x4b, 0x11, 0x8c, 0xb1, 0xce, 0x76, 0x17,
	0xbe, 0x98, 0x9a, 0x61, 0x9f, 0xfa, 0xe6, 0x21, 0x63, 0x38, 0x76, 0xe1, 0x92, 0xcb, 0x2c, 0x5c,
	0xe8, 0x32, 0xdb, 0x3f, 0x2f, 0xc1, 0xe6, 0xec, 0xb9, 0x2e, 0xe3, 0x00, 0x9f, 0x26, 0x0e, 0x90,
	0xf1, 0xfe, 0x6e, 0x16, 0xef, 0x53, 0xd4, 0xd2, 0xaa, 0x9d, 0x74, 0x86, 0x9f, 0xfd, 0x7f, 0x3b,
	0xc3, 0x4d, 0x28, 0xfb, 0xae, 0x17, 0xfb, 0x42, 0xec, 0x65, 0x6d, 0x82, 0xe5, 0xd8, 0x55, 0x56,
	0xb3, 0x5d, 0x65, 0xfb, 0xa1, 0xa4, 0xd2, 0x64, 0x2b, 0x9e, 0x75, 0x0d, 0x9f, 0xa9, 0xf4, 0x26,
	0x94, 0x2c, 0xc3, 0x6f, 0x16, 0xd0, 0x28, 0xe1, 0xa2, 0x2d, 0xc3, 0x27, 0xac, 0x68, 0xff, 0x05,
	0x24, 0x0d, 0x4e, 0xa0, 0x5e, 0x46, 0x83, 0x87, 0x92, 0x06, 0xef, 0x65, 0x69, 0x70, 0x8a, 0x1a,
	0x06, 0x32, 0xef, 0x3b, 0x81, 0x77, 0x36, 0xa5, 0xc0, 0x1e, 0xd4, 0x93, 0x4e, 0x65, 0x1d, 0x4a,
	0x27, 0xe6, 0x19, 0x5f, 0x13, 0x61, 0x55, 0xe5, 0x3d, 0x58, 0x8a, 0xa8, 0x1d, 0x72, 0xc5, 0x2d,
	0x77, 0x76, 0xf3, 0x91, 0x8b, 0x21, 0x84, 0x23, 0x7f, 0xb3, 0xf8, 0xb0, 0x90, 0x84, 0x12, 0xb8,
	0x4f, 0x16, 0xa1, 0xc4, 0x22, 0x94, 0x58, 0x84, 0x12, 0x6f, 0x60, 0x28, 0xf1, 0xe3, 0xd4, 0x7d,
	0xe1, 0x40, 0x78, 0xfa, 0x02, 0x5a, 0xaa, 0x57, 0x30, 0x1d, 0x63, 0x4f, 0x33, 0xf6, 0xf7, 0xed,
	0xaf, 0x43, 0x2b, 0x85, 0xf8, 0xcc, 0xd2, 0xf3, 0x9a, 0xe2, 0xcf, 0x4a, 0x92, 0x15, 0x97, 0x31,
	0x2f, 0x63, 0x89, 0x0f, 0x24, 0x4b, 0x9c, 0xc9, 0xdf, 0x24, 0xb1, 0x0b, 0x0c, 0xf1, 0xf1, 0xc5,
	0x86, 0xf8, 0x91, 0x6c, 0x88, 0x77, 0x72, 0x51, 0xeb, 0x06, 0xe6, 0x94, 0x1d, 0x7e, 0x01, 0x65,
	0x06, 0x9e, 0xe9, 0xaa, 0x85, 0x27, 0x2e, 0x66, 0x7b, 0x62, 0x34, 0x85, 0xa5, 0x59, 0x17, 0x4f,
	0x6e, 0xaf, 0xcb, 0xd9, 0xf6, 0xba, 0xf5, 0x43, 0xa8, 0xc5, 0x0b, 0x52, 0x9e, 0x48, 0x7b, 0xe3,
	0xcb, 0xb9, 0xb9, 0x99, 0xda, 0x16, 0x9f, 0x14, 0xe0, 0x66, 0x0a, 0x09, 0xbf, 0xfb, 0xd4, 0x71,
	0x4c, 0xef, 0x73, 0xc9, 0x9b, 0xf0, 0xb4, 0x48, 0x29, 0x3b, 0x2d, 0xd2, 0xfe, 0x5d, 0x49, 0xda,
	0xa4, 0xd2, 0x62, 0x2e, 0xb3, 0xd3, 0x1e, 0x4b, 0x69, 0x8b, 0xcc, 0x98, 0x79, 0x82, 0x56, 0x76,
	0xea, 0xe2, 0x93, 0xa2, 0x88, 0x99, 0xc7, 0xca, 0xaf, 0xe7, 0x55, 0x3e, 0x3b, 0x61, 0xfd, 0x5e,
	0x3a, 0x42, 0xb3, 0xfa, 0x3d, 0xc2, 0x8a, 0x64, 0x5f, 0x94, 0x2f, 0xde, 0x17, 0x4b, 0x33, 0xfc,
	0x38, 0x53, 0x92, 0xeb, 0x5b, 0x81, 0xe5, 0x3a, 0xc2, 0xcb, 0x72, 0x25, 0x09, 0x18, 0x49, 0x6a,
	0xcc, 0x4c, 0xb1, 0xc0, 0x4d, 0x73, 0xc2, 0xbe, 0xf0, 0xb8, 0x38, 0x32, 0x86, 0x91, 0x2a, 0xab,
	0x3d, 0x0d, 0x51, 0x9b, 0x9e, 0xd9, 0xa7, 0xde, 0x09, 0x7a, 0x5b, 0xa1, 0x4d, 0x0e, 0x21, 0xe2,
	0xdb, 0x7e, 0x0c, 0x4d, 0x39, 0xe2, 0x27, 0xf4, 0xe3, 0xd7, 0x09, 0xd6, 0xff, 0xdd, 0x90, 0x76,
	0x60, 0x7a, 0xa2, 0xcb, 0xe8, 0xfc, 0x7d, 0x49, 0xe7, 0x77, 0x67, 0xdc, 0x52, 0x52, 0xa4, 0x16,
	0xd9, 0xaa, 0xdf, 0xd4, 0x16, 0xd9, 0xaa, 0x45, 0x88, 0xe9, 0xd9, 0x59, 0xb1, 0x62, 0xe3, 0x32,
	0xb1, 0xe2, 0xea, 0xeb, 0xc7, 0x8a, 0x6b, 0xaf, 0x11, 0x2b, 0xda, 0x06, 0x86, 0x98, 0x13, 0xb1,
	0xa2, 0x6d, 0x24, 0xb1, 0xe2, 0x81, 0xf1, 0x3f, 0x09, 0x2d, 0x6d, 0x63, 0x76, 0x68, 0x19, 0xf7,
	0x25, 0xa1, 0xe5, 0x81, 0xc1, 0x43, 0xcb, 0xac, 0xd0, 0xf4, 0xda, 0x6b, 0x86, 0xa6, 0xd7, 0x73,
	0x85, 0xa6, 0x37, 0xb2, 0x43, 0xd3, 0x3f, 0xca, 0x59, 0x2e, 0x2d, 0x2b, 0xcb, 0xb5, 0x93, 0xc3,
	0xcc, 0xe6, 0x4d, 0x74, 0x75, 0xa5, 0x44, 0xd7, 0x3b, 0x39, 0x66, 0x9e, 0x99, 0xeb, 0xfa, 0xf5,
	0xab, 0xe7, 0xba, 0xb4, 0xac, 0x5c, 0x57, 0x7e, 0xf6, 0xe6, 0xa7, 0xbb, 0x06, 0x52, 0x54, 0x7d,
	0x18, 0xda, 0x81, 0x95, 0x5c, 0xfb, 0xcd, 0x53, 0xa6, 0x36, 0x3c, 0xc7, 0x3c, 0x2a, 0x4f, 0xce,
	0x6a, 0x0c, 0x23, 0x55, 0x56, 0xeb, 0x1a, 0xbe, 0x14, 0xa2, 0x15, 0x2f, 0x0a, 0xd1, 0xda, 0xff,
	0xa9, 0x4b, 0x39, 0x95, 0x09, 0x92, 0x9f, 0x73, 0x24, 0x3f, 0x45, 0x6d, 0x37, 0x4e, 0x91, 0x4d,
	0xb9, 0xdc, 0xc5, 0xa3, 0xc9, 0xc2, 0x0d, 0x2d, 0x32, 0x1d, 0x6f, 0x7a, 0xa6, 0x63, 0x00, 0xb5,
	0xd8, 0x02, 0xcc, 0x8c, 0xaa, 0x0f, 0x24, 0x17, 0x90, 0xd3, 0xae, 0xcc, 0xf2, 0x02, 0x13, 0x19,
	0x90, 0x3d, 0x3d, 0xb0, 0x22, 0x2b, 0x38, 0x7b, 0x44, 0x3d, 0x63, 0x4e, 0x06, 0xe4, 0xb7, 0x2b,
	0x92, 0xad, 0x96, 0x31, 0x2f, 0x63, 0x37, 0x9f, 0x48, 0x77, 0x94, 0xcc, 0x5b, 0xfc, 0x24, 0xb1,
	0xec, 0x5b, 0xca, 0x9f, 0x8a, 0x50, 0xe1, 0x97, 0x57, 0x46, 0x8e, 0x26, 0xc2, 0x44, 0x72, 0xd4,
	0x32, 0x08, 0x2b, 0x2e, 0xba, 0x9d, 0x26, 0x26, 0xb4, 0x34, 0xc3, 0x84, 0xb2, 0x4b, 0x8a, 0xf9,
	0x22, 0x48, 0xdf, 0x51, 0x59, 0x9b, 0x60, 0x89, 0x47, 0xda, 0xd2, 0xb5, 0xd4, 0x45, 0x85, 0x1f,
	0x69, 0x01, 0x23, 0xd5, 0x81, 0xa5, 0x1f, 0x30, 0x2b, 0x78, 0x07, 0xaa, 0x3d, 0x57, 0x4b, 0x99,
	0xc9, 0xe5, 0xd1, 0x50, 0x8d, 0x41, 0xa4, 0xd2, 0x73, 0x71, 0xd4, 0xbb, 0xb0, 0x7c, 0x14, 0x06,
	0x81, 0xeb, 0x68, 0x48, 0x93, 0x9b, 0x4c, 0xf4, 0xa6, 0x29, 0x30, 0x01, 0xde, 0x78, 0xce, 0x16,
	0xd0, 0x86, 0x8a, 0x1f, 0xd0, 0x20, 0xf4, 0x85, 0xd1, 0x44, 0x03, 0xce, 0x21, 0x44, 0x7c, 0x93,
	0xc7, 0x8c, 0x7a, 0xd6, 0x63, 0x46, 0xeb, 0xef, 0x45, 0x28, 0xb3, 0xad, 0xc3, 0x96, 0x68, 0xf9,
	0x9a, 0x6d, 0x45, 0xb1, 0x42, 0x71, 0x89, 0x02, 0x44, 0x2a, 0x96, 0x7f, 0x60, 0x45, 0x66, 0xca,
	0x2f, 0x15, 0xe7, 0xfb, 0xa5, 0xd2, 0x3c, 0xbf, 0x54, 0x9e, 0xeb, 0x97, 0x96, 0xe6, 0xfb, 0xa5,
	0xca, 0x0c, 0xbf, 0x94, 0xe9, 0x5b, 0xaa, 0xaf, 0xe2, 0x5b, 0x64, 0x9f, 0x50, 0x9b, 0xe3, 0x13,
	0x2e, 0x96, 0xf3, 0xcf, 0x8a, 0x50, 0xdc, 0x8b, 0xd8, 0x20, 0x1a, 0x25, 0xfb, 0x14, 0x07, 0xb1,
	0x36, 0xc1, 0x72, 0xbe, 0x47, 0xdf, 0x01, 0x88, 0x2c, 0xf3, 0x63, 0x8d, 0x5f, 0x7e, 0x4b, 0xe3,
	0x15, 0x8d, 0xa1, 0xa4, 0xce, 0xea, 0x8f, 0xf0, 0x16, 0xfc, 0x16, 0x54, 0x0d, 0xea, 0xf4, 0xe9,
	0x49, 0x28, 0x1c, 0x3c, 0xea, 0x54, 0x80, 0x48, 0x5c, 0x61, 0xb1, 0x94, 0x11, 0x7a, 0xf8, 0x0b,
	0x8d, 0x10, 0x38, 0x6e, 0xe3, 0x18, 0x46, 0x92, 0xda, 0x7c, 0xa1, 0xc7, 0x42, 0xa8, 0x66, 0x0a,
	0xe1, 0xbc, 0x00, 0x2b, 0xe9, 0x93, 0xcd, 0x82, 0x5d, 0x9d, 0x7a, 0x86, 0x08, 0xa3, 0xdf, 0xc9,
	0x65, 0x09, 0xf8, 0x81, 0x17, 0xf6, 0x86, 0x01, 0xb1, 0x64, 0x46, 0x85, 0x61, 0x0b, 0xa3, 0x99,
	0xcf, 0xa8, 0xb0, 0x8d, 0xcf, 0x27, 0x62, 0xa3, 0x09, 0x96, 0xca, 0x77, 0xa1, 0x48, 0x23, 0x11,
	0xd3, 0xdd, 0xcd, 0x35, 0xcd, 0x5e, 0xc4, 0xcd, 0x37, 0x8d, 0x48, 0x91, 0x46, 0xad, 0x7f, 0xc5,
	0x61, 0xb7, 0x0f, 0x0d, 0x2a, 0xc6, 0x6a, 0x82, 0x4d, 0x36, 0xe9, 0xb7, 0x72, 0x1b, 0xbc, 0xdd,
	0x34, 0x94, 0xe7, 0x7f, 0x31, 0x0a, 0x90, 0x66, 0x25, 0x2b, 0x34, 0x35, 0xaa, 0xe5, 0xc1, 0xc6,
	0x14, 0x56, 0x46, 0x62, 0xf8, 0x89, 0x9c, 0x18, 0xfe, 0x6a, 0x3e, 0x46, 0xd3, 0x80, 0x71, 0x72,
	0xb8, 0xf3, 0xcf, 0x25, 0xa8, 0xc5, 0x78, 0xca, 0x21, 0x40, 0x2f, 0x79, 0x0a, 0x57, 0xb6, 0x2e,
	0x7c, 0x27, 0x3f, 0x6d, 0xa9, 0x73, 0xde, 0xd1, 0x15, 0x0d, 0xd6, 0x7b, 0x13, 0xaf, 0xcb, 0xca,
	0x9d, 0x1c, 0x0f, 0xd0, 0xa7, 0xad, 0xb7, 0x72, 0x3d, 0x53, 0x0b, 0x02, 0xd2, 0x93, 0x42, 0x36,
	0x81, 0xc9, 0x87, 0xdc, 0x6c, 0x02, 0xd3, 0x6f, 0xb6, 0x1f, 0xc2, 0x5a, 0x4f, 0xce, 0x4b, 0x2b,
	0xb7, 0xe7, 0x67, 0xae, 0x4f, 0x5b, 0x77, 0xf2, 0xa4, 0xb7, 0x95, 0x9f, 0xc0, 0x6a, 0x4f, 0xca,
	0xe3, 0x2a, 0xed, 0xb9, 0x89, 0xde, 0xd3, 0xd6, 0xed, 0x1c, 0xc9, 0x60, 0xe5, 0x03, 0x68, 0xf4,
	0xd2, 0x17, 0x3d, 0xe5, 0x4b, 0xf3, 0x2e, 0x82, 0xa7, 0xad, 0xf6, 0xfc, 0xbb, 0xa2, 0x90, 0xb8,
	0x14, 0xc2, 0x64, 0x4b, 0x7c, 0xf2, 0x7a, 0x98, 0x2d, 0xf1, 0xe9, 0x1b, 0x1d, 0x97, 0xb8, 0x64,
	0x69, 0x6e, 0xcf, 0xdf, 0xe0, 0x33, 0x24, 0x3e, 0x79, 0x0a, 0xf6, 0x37, 0xff, 0xfc, 0x72, 0xab,
	0xf0, 0xe9, 0xcb, 0xad, 0xc2, 0xdf, 0x5e, 0x6e, 0x15, 0x7e, 0x75, 0xbe, 0x75, 0xe5, 0xd3, 0xf3,
	0xad, 0x2b, 0x7f, 0x3d, 0xdf, 0xba, 0xf2, 0xd3, 0x62, 0xd4, 0x39, 0xaa, 0xe0, 0x4f, 0x99, 0x5f,
	0xfb, 0x6f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xef, 0x01, 0xe4, 0x88, 0xe1, 0x29, 0x00, 0x00,
}
