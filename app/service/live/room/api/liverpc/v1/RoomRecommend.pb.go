// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: v1/RoomRecommend.proto

package v1

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type RoomRecommendGetPlayerListReq struct {
	// 二级分区
	AreaV2Id int64 `protobuf:"varint,1,opt,name=area_v2_id,json=areaV2Id,proto3" json:"area_v2_id"`
	// roomid
	Roomid int64 `protobuf:"varint,2,opt,name=roomid,proto3" json:"roomid"`
	// 0.默认old 1.新文本
	IsNew int64 `protobuf:"varint,3,opt,name=is_new,json=isNew,proto3" json:"is_new"`
}

func (m *RoomRecommendGetPlayerListReq) Reset()         { *m = RoomRecommendGetPlayerListReq{} }
func (m *RoomRecommendGetPlayerListReq) String() string { return proto.CompactTextString(m) }
func (*RoomRecommendGetPlayerListReq) ProtoMessage()    {}
func (*RoomRecommendGetPlayerListReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_RoomRecommend_2e8a5a54a8657efa, []int{0}
}
func (m *RoomRecommendGetPlayerListReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RoomRecommendGetPlayerListReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RoomRecommendGetPlayerListReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *RoomRecommendGetPlayerListReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RoomRecommendGetPlayerListReq.Merge(dst, src)
}
func (m *RoomRecommendGetPlayerListReq) XXX_Size() int {
	return m.Size()
}
func (m *RoomRecommendGetPlayerListReq) XXX_DiscardUnknown() {
	xxx_messageInfo_RoomRecommendGetPlayerListReq.DiscardUnknown(m)
}

var xxx_messageInfo_RoomRecommendGetPlayerListReq proto.InternalMessageInfo

func (m *RoomRecommendGetPlayerListReq) GetAreaV2Id() int64 {
	if m != nil {
		return m.AreaV2Id
	}
	return 0
}

func (m *RoomRecommendGetPlayerListReq) GetRoomid() int64 {
	if m != nil {
		return m.Roomid
	}
	return 0
}

func (m *RoomRecommendGetPlayerListReq) GetIsNew() int64 {
	if m != nil {
		return m.IsNew
	}
	return 0
}

type RoomRecommendGetPlayerListResp struct {
	// code
	Code int64 `protobuf:"varint,1,opt,name=code,proto3" json:"code"`
	// msg
	Msg string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg"`
	//
	Data *RoomRecommendGetPlayerListResp_Data `protobuf:"bytes,3,opt,name=data" json:"data"`
}

func (m *RoomRecommendGetPlayerListResp) Reset()         { *m = RoomRecommendGetPlayerListResp{} }
func (m *RoomRecommendGetPlayerListResp) String() string { return proto.CompactTextString(m) }
func (*RoomRecommendGetPlayerListResp) ProtoMessage()    {}
func (*RoomRecommendGetPlayerListResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_RoomRecommend_2e8a5a54a8657efa, []int{1}
}
func (m *RoomRecommendGetPlayerListResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RoomRecommendGetPlayerListResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RoomRecommendGetPlayerListResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *RoomRecommendGetPlayerListResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RoomRecommendGetPlayerListResp.Merge(dst, src)
}
func (m *RoomRecommendGetPlayerListResp) XXX_Size() int {
	return m.Size()
}
func (m *RoomRecommendGetPlayerListResp) XXX_DiscardUnknown() {
	xxx_messageInfo_RoomRecommendGetPlayerListResp.DiscardUnknown(m)
}

var xxx_messageInfo_RoomRecommendGetPlayerListResp proto.InternalMessageInfo

func (m *RoomRecommendGetPlayerListResp) GetCode() int64 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *RoomRecommendGetPlayerListResp) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func (m *RoomRecommendGetPlayerListResp) GetData() *RoomRecommendGetPlayerListResp_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

type RoomRecommendGetPlayerListResp_RoomInfo struct {
	// 房间id
	Roomid int64 `protobuf:"varint,1,opt,name=roomid,proto3" json:"roomid"`
	// 房间标题
	Title string `protobuf:"bytes,2,opt,name=title,proto3" json:"title"`
	// 用户名
	Uname string `protobuf:"bytes,3,opt,name=uname,proto3" json:"uname"`
	// 在线人数
	Online int64 `protobuf:"varint,4,opt,name=online,proto3" json:"online"`
	// 封面，封面现在有3种：关键帧、封面图、秀场封面（正方形的），返回哪个由后端决定
	Cover string `protobuf:"bytes,5,opt,name=cover,proto3" json:"cover"`
	// 链接
	Link string `protobuf:"bytes,6,opt,name=link,proto3" json:"link"`
	// 主播头像
	Face string `protobuf:"bytes,7,opt,name=face,proto3" json:"face"`
	// 父分区id
	AreaV2ParentId int64 `protobuf:"varint,8,opt,name=area_v2_parent_id,json=areaV2ParentId,proto3" json:"area_v2_parent_id"`
	// 父分区名称
	AreaV2ParentName string `protobuf:"bytes,9,opt,name=area_v2_parent_name,json=areaV2ParentName,proto3" json:"area_v2_parent_name"`
	// 二级分区id
	AreaV2Id int64 `protobuf:"varint,10,opt,name=area_v2_id,json=areaV2Id,proto3" json:"area_v2_id"`
	// 二级分区名
	AreaV2Name string `protobuf:"bytes,11,opt,name=area_v2_name,json=areaV2Name,proto3" json:"area_v2_name"`
	// 秒开播放串
	PlayUrl string `protobuf:"bytes,12,opt,name=play_url,json=playUrl,proto3" json:"play_url"`
	// 当前清晰度,清晰度 0:默认码率, 2:800 3:1500 4:原画
	CurrentQuality int64 `protobuf:"varint,13,opt,name=current_quality,json=currentQuality,proto3" json:"current_quality"`
	// 当前拥有清晰度列表
	AcceptQuality []int64 `protobuf:"varint,14,rep,packed,name=accept_quality,json=acceptQuality" json:"accept_quality"`
	// 横竖屏  0:横屏 1:竖屏 -1:异常情况
	BroadcastType int64 `protobuf:"varint,15,opt,name=broadcast_type,json=broadcastType,proto3" json:"broadcast_type"`
	// 是否关注 0未关注 1已关注
	IsFocus int64 `protobuf:"varint,16,opt,name=is_focus,json=isFocus,proto3" json:"is_focus"`
}

func (m *RoomRecommendGetPlayerListResp_RoomInfo) Reset() {
	*m = RoomRecommendGetPlayerListResp_RoomInfo{}
}
func (m *RoomRecommendGetPlayerListResp_RoomInfo) String() string { return proto.CompactTextString(m) }
func (*RoomRecommendGetPlayerListResp_RoomInfo) ProtoMessage()    {}
func (*RoomRecommendGetPlayerListResp_RoomInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_RoomRecommend_2e8a5a54a8657efa, []int{1, 0}
}
func (m *RoomRecommendGetPlayerListResp_RoomInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RoomRecommendGetPlayerListResp_RoomInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RoomRecommendGetPlayerListResp_RoomInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *RoomRecommendGetPlayerListResp_RoomInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RoomRecommendGetPlayerListResp_RoomInfo.Merge(dst, src)
}
func (m *RoomRecommendGetPlayerListResp_RoomInfo) XXX_Size() int {
	return m.Size()
}
func (m *RoomRecommendGetPlayerListResp_RoomInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_RoomRecommendGetPlayerListResp_RoomInfo.DiscardUnknown(m)
}

var xxx_messageInfo_RoomRecommendGetPlayerListResp_RoomInfo proto.InternalMessageInfo

func (m *RoomRecommendGetPlayerListResp_RoomInfo) GetRoomid() int64 {
	if m != nil {
		return m.Roomid
	}
	return 0
}

func (m *RoomRecommendGetPlayerListResp_RoomInfo) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *RoomRecommendGetPlayerListResp_RoomInfo) GetUname() string {
	if m != nil {
		return m.Uname
	}
	return ""
}

func (m *RoomRecommendGetPlayerListResp_RoomInfo) GetOnline() int64 {
	if m != nil {
		return m.Online
	}
	return 0
}

func (m *RoomRecommendGetPlayerListResp_RoomInfo) GetCover() string {
	if m != nil {
		return m.Cover
	}
	return ""
}

func (m *RoomRecommendGetPlayerListResp_RoomInfo) GetLink() string {
	if m != nil {
		return m.Link
	}
	return ""
}

func (m *RoomRecommendGetPlayerListResp_RoomInfo) GetFace() string {
	if m != nil {
		return m.Face
	}
	return ""
}

func (m *RoomRecommendGetPlayerListResp_RoomInfo) GetAreaV2ParentId() int64 {
	if m != nil {
		return m.AreaV2ParentId
	}
	return 0
}

func (m *RoomRecommendGetPlayerListResp_RoomInfo) GetAreaV2ParentName() string {
	if m != nil {
		return m.AreaV2ParentName
	}
	return ""
}

func (m *RoomRecommendGetPlayerListResp_RoomInfo) GetAreaV2Id() int64 {
	if m != nil {
		return m.AreaV2Id
	}
	return 0
}

func (m *RoomRecommendGetPlayerListResp_RoomInfo) GetAreaV2Name() string {
	if m != nil {
		return m.AreaV2Name
	}
	return ""
}

func (m *RoomRecommendGetPlayerListResp_RoomInfo) GetPlayUrl() string {
	if m != nil {
		return m.PlayUrl
	}
	return ""
}

func (m *RoomRecommendGetPlayerListResp_RoomInfo) GetCurrentQuality() int64 {
	if m != nil {
		return m.CurrentQuality
	}
	return 0
}

func (m *RoomRecommendGetPlayerListResp_RoomInfo) GetAcceptQuality() []int64 {
	if m != nil {
		return m.AcceptQuality
	}
	return nil
}

func (m *RoomRecommendGetPlayerListResp_RoomInfo) GetBroadcastType() int64 {
	if m != nil {
		return m.BroadcastType
	}
	return 0
}

func (m *RoomRecommendGetPlayerListResp_RoomInfo) GetIsFocus() int64 {
	if m != nil {
		return m.IsFocus
	}
	return 0
}

type RoomRecommendGetPlayerListResp_Data struct {
	// 播放器文本
	Title string `protobuf:"bytes,1,opt,name=title,proto3" json:"title"`
	// 关播推荐房间列表
	List []*RoomRecommendGetPlayerListResp_RoomInfo `protobuf:"bytes,2,rep,name=list" json:"list"`
}

func (m *RoomRecommendGetPlayerListResp_Data) Reset()         { *m = RoomRecommendGetPlayerListResp_Data{} }
func (m *RoomRecommendGetPlayerListResp_Data) String() string { return proto.CompactTextString(m) }
func (*RoomRecommendGetPlayerListResp_Data) ProtoMessage()    {}
func (*RoomRecommendGetPlayerListResp_Data) Descriptor() ([]byte, []int) {
	return fileDescriptor_RoomRecommend_2e8a5a54a8657efa, []int{1, 1}
}
func (m *RoomRecommendGetPlayerListResp_Data) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RoomRecommendGetPlayerListResp_Data) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RoomRecommendGetPlayerListResp_Data.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *RoomRecommendGetPlayerListResp_Data) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RoomRecommendGetPlayerListResp_Data.Merge(dst, src)
}
func (m *RoomRecommendGetPlayerListResp_Data) XXX_Size() int {
	return m.Size()
}
func (m *RoomRecommendGetPlayerListResp_Data) XXX_DiscardUnknown() {
	xxx_messageInfo_RoomRecommendGetPlayerListResp_Data.DiscardUnknown(m)
}

var xxx_messageInfo_RoomRecommendGetPlayerListResp_Data proto.InternalMessageInfo

func (m *RoomRecommendGetPlayerListResp_Data) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *RoomRecommendGetPlayerListResp_Data) GetList() []*RoomRecommendGetPlayerListResp_RoomInfo {
	if m != nil {
		return m.List
	}
	return nil
}

type RoomRecommendClientRecStrongReq struct {
	// 强推第几刷
	RecPage int64 `protobuf:"varint,1,opt,name=rec_page,json=recPage,proto3" json:"rec_page"`
}

func (m *RoomRecommendClientRecStrongReq) Reset()         { *m = RoomRecommendClientRecStrongReq{} }
func (m *RoomRecommendClientRecStrongReq) String() string { return proto.CompactTextString(m) }
func (*RoomRecommendClientRecStrongReq) ProtoMessage()    {}
func (*RoomRecommendClientRecStrongReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_RoomRecommend_2e8a5a54a8657efa, []int{2}
}
func (m *RoomRecommendClientRecStrongReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RoomRecommendClientRecStrongReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RoomRecommendClientRecStrongReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *RoomRecommendClientRecStrongReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RoomRecommendClientRecStrongReq.Merge(dst, src)
}
func (m *RoomRecommendClientRecStrongReq) XXX_Size() int {
	return m.Size()
}
func (m *RoomRecommendClientRecStrongReq) XXX_DiscardUnknown() {
	xxx_messageInfo_RoomRecommendClientRecStrongReq.DiscardUnknown(m)
}

var xxx_messageInfo_RoomRecommendClientRecStrongReq proto.InternalMessageInfo

func (m *RoomRecommendClientRecStrongReq) GetRecPage() int64 {
	if m != nil {
		return m.RecPage
	}
	return 0
}

type RoomRecommendClientRecStrongResp struct {
	// code
	Code int64 `protobuf:"varint,1,opt,name=code,proto3" json:"code"`
	// msg
	Msg string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg"`
	//
	Data *RoomRecommendClientRecStrongResp_Data `protobuf:"bytes,3,opt,name=data" json:"data"`
}

func (m *RoomRecommendClientRecStrongResp) Reset()         { *m = RoomRecommendClientRecStrongResp{} }
func (m *RoomRecommendClientRecStrongResp) String() string { return proto.CompactTextString(m) }
func (*RoomRecommendClientRecStrongResp) ProtoMessage()    {}
func (*RoomRecommendClientRecStrongResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_RoomRecommend_2e8a5a54a8657efa, []int{3}
}
func (m *RoomRecommendClientRecStrongResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RoomRecommendClientRecStrongResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RoomRecommendClientRecStrongResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *RoomRecommendClientRecStrongResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RoomRecommendClientRecStrongResp.Merge(dst, src)
}
func (m *RoomRecommendClientRecStrongResp) XXX_Size() int {
	return m.Size()
}
func (m *RoomRecommendClientRecStrongResp) XXX_DiscardUnknown() {
	xxx_messageInfo_RoomRecommendClientRecStrongResp.DiscardUnknown(m)
}

var xxx_messageInfo_RoomRecommendClientRecStrongResp proto.InternalMessageInfo

func (m *RoomRecommendClientRecStrongResp) GetCode() int64 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *RoomRecommendClientRecStrongResp) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func (m *RoomRecommendClientRecStrongResp) GetData() *RoomRecommendClientRecStrongResp_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

type RoomRecommendClientRecStrongResp_Result struct {
	// 房间id
	Roomid int64 `protobuf:"varint,1,opt,name=roomid,proto3" json:"roomid"`
	// 房间标题
	Title string `protobuf:"bytes,2,opt,name=title,proto3" json:"title"`
	// 用户名
	Uname string `protobuf:"bytes,3,opt,name=uname,proto3" json:"uname"`
	// 在线人数
	Online int64 `protobuf:"varint,4,opt,name=online,proto3" json:"online"`
	// 封面，封面现在有3种：关键帧、封面图、秀场封面（正方形的），返回哪个由后端决定
	Cover string `protobuf:"bytes,5,opt,name=cover,proto3" json:"cover"`
	// 封面图
	UserCover string `protobuf:"bytes,6,opt,name=user_cover,json=userCover,proto3" json:"user_cover"`
	// 关键帧
	SystemCover string `protobuf:"bytes,7,opt,name=system_cover,json=systemCover,proto3" json:"system_cover"`
	// 链接
	Link string `protobuf:"bytes,8,opt,name=link,proto3" json:"link"`
	// 主播头像
	Face string `protobuf:"bytes,9,opt,name=face,proto3" json:"face"`
	// 父分区id
	AreaV2ParentId int64 `protobuf:"varint,10,opt,name=area_v2_parent_id,json=areaV2ParentId,proto3" json:"area_v2_parent_id"`
	// 父分区名称
	AreaV2ParentName string `protobuf:"bytes,11,opt,name=area_v2_parent_name,json=areaV2ParentName,proto3" json:"area_v2_parent_name"`
	// 二级分区id
	AreaV2Id int64 `protobuf:"varint,12,opt,name=area_v2_id,json=areaV2Id,proto3" json:"area_v2_id"`
	// 二级分区名
	AreaV2Name string `protobuf:"bytes,13,opt,name=area_v2_name,json=areaV2Name,proto3" json:"area_v2_name"`
	// 秒开播放串
	PlayUrl string `protobuf:"bytes,14,opt,name=play_url,json=playUrl,proto3" json:"play_url"`
	// 当前清晰度,清晰度 0:默认码率, 2:800 3:1500 4:原画
	CurrentQuality int64 `protobuf:"varint,15,opt,name=current_quality,json=currentQuality,proto3" json:"current_quality"`
	// 当前拥有清晰度列表
	AcceptQuality []int64 `protobuf:"varint,16,rep,packed,name=accept_quality,json=acceptQuality" json:"accept_quality"`
	// 横竖屏  0:横屏 1:竖屏 -1:异常情况
	BroadcastType int64 `protobuf:"varint,17,opt,name=broadcast_type,json=broadcastType,proto3" json:"broadcast_type"`
	// 新版角标-右上 默认为空 只能是文字！！！@古月 【5.29显示更新】：服务端还是吐右上（兼容老版），5.29显示在左上
	PendentRu string `protobuf:"bytes,18,opt,name=pendent_ru,json=pendentRu,proto3" json:"pendent_ru"`
	// 【5.29显示更新】：服务端还是吐右上，5.29客户端显示在左上,对应的背景图片
	PendentRuPic string `protobuf:"bytes,19,opt,name=pendent_ru_pic,json=pendentRuPic,proto3" json:"pendent_ru_pic"`
	// 新版移动端角标色值-右上
	PendentRuColor string `protobuf:"bytes,20,opt,name=pendent_ru_color,json=pendentRuColor,proto3" json:"pendent_ru_color"`
	// 推荐类型 1：人气 2：营收 3：运营强推 4：天马推荐（暂定）用于客户端打点
	RecType int64 `protobuf:"varint,21,opt,name=rec_type,json=recType,proto3" json:"rec_type"`
	// 当前房间pk_id，默认0 用于客户端打点
	PkId int64 `protobuf:"varint,22,opt,name=pk_id,json=pkId,proto3" json:"pk_id"`
}

func (m *RoomRecommendClientRecStrongResp_Result) Reset() {
	*m = RoomRecommendClientRecStrongResp_Result{}
}
func (m *RoomRecommendClientRecStrongResp_Result) String() string { return proto.CompactTextString(m) }
func (*RoomRecommendClientRecStrongResp_Result) ProtoMessage()    {}
func (*RoomRecommendClientRecStrongResp_Result) Descriptor() ([]byte, []int) {
	return fileDescriptor_RoomRecommend_2e8a5a54a8657efa, []int{3, 0}
}
func (m *RoomRecommendClientRecStrongResp_Result) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RoomRecommendClientRecStrongResp_Result) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RoomRecommendClientRecStrongResp_Result.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *RoomRecommendClientRecStrongResp_Result) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RoomRecommendClientRecStrongResp_Result.Merge(dst, src)
}
func (m *RoomRecommendClientRecStrongResp_Result) XXX_Size() int {
	return m.Size()
}
func (m *RoomRecommendClientRecStrongResp_Result) XXX_DiscardUnknown() {
	xxx_messageInfo_RoomRecommendClientRecStrongResp_Result.DiscardUnknown(m)
}

var xxx_messageInfo_RoomRecommendClientRecStrongResp_Result proto.InternalMessageInfo

func (m *RoomRecommendClientRecStrongResp_Result) GetRoomid() int64 {
	if m != nil {
		return m.Roomid
	}
	return 0
}

func (m *RoomRecommendClientRecStrongResp_Result) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *RoomRecommendClientRecStrongResp_Result) GetUname() string {
	if m != nil {
		return m.Uname
	}
	return ""
}

func (m *RoomRecommendClientRecStrongResp_Result) GetOnline() int64 {
	if m != nil {
		return m.Online
	}
	return 0
}

func (m *RoomRecommendClientRecStrongResp_Result) GetCover() string {
	if m != nil {
		return m.Cover
	}
	return ""
}

func (m *RoomRecommendClientRecStrongResp_Result) GetUserCover() string {
	if m != nil {
		return m.UserCover
	}
	return ""
}

func (m *RoomRecommendClientRecStrongResp_Result) GetSystemCover() string {
	if m != nil {
		return m.SystemCover
	}
	return ""
}

func (m *RoomRecommendClientRecStrongResp_Result) GetLink() string {
	if m != nil {
		return m.Link
	}
	return ""
}

func (m *RoomRecommendClientRecStrongResp_Result) GetFace() string {
	if m != nil {
		return m.Face
	}
	return ""
}

func (m *RoomRecommendClientRecStrongResp_Result) GetAreaV2ParentId() int64 {
	if m != nil {
		return m.AreaV2ParentId
	}
	return 0
}

func (m *RoomRecommendClientRecStrongResp_Result) GetAreaV2ParentName() string {
	if m != nil {
		return m.AreaV2ParentName
	}
	return ""
}

func (m *RoomRecommendClientRecStrongResp_Result) GetAreaV2Id() int64 {
	if m != nil {
		return m.AreaV2Id
	}
	return 0
}

func (m *RoomRecommendClientRecStrongResp_Result) GetAreaV2Name() string {
	if m != nil {
		return m.AreaV2Name
	}
	return ""
}

func (m *RoomRecommendClientRecStrongResp_Result) GetPlayUrl() string {
	if m != nil {
		return m.PlayUrl
	}
	return ""
}

func (m *RoomRecommendClientRecStrongResp_Result) GetCurrentQuality() int64 {
	if m != nil {
		return m.CurrentQuality
	}
	return 0
}

func (m *RoomRecommendClientRecStrongResp_Result) GetAcceptQuality() []int64 {
	if m != nil {
		return m.AcceptQuality
	}
	return nil
}

func (m *RoomRecommendClientRecStrongResp_Result) GetBroadcastType() int64 {
	if m != nil {
		return m.BroadcastType
	}
	return 0
}

func (m *RoomRecommendClientRecStrongResp_Result) GetPendentRu() string {
	if m != nil {
		return m.PendentRu
	}
	return ""
}

func (m *RoomRecommendClientRecStrongResp_Result) GetPendentRuPic() string {
	if m != nil {
		return m.PendentRuPic
	}
	return ""
}

func (m *RoomRecommendClientRecStrongResp_Result) GetPendentRuColor() string {
	if m != nil {
		return m.PendentRuColor
	}
	return ""
}

func (m *RoomRecommendClientRecStrongResp_Result) GetRecType() int64 {
	if m != nil {
		return m.RecType
	}
	return 0
}

func (m *RoomRecommendClientRecStrongResp_Result) GetPkId() int64 {
	if m != nil {
		return m.PkId
	}
	return 0
}

type RoomRecommendClientRecStrongResp_Data struct {
	//
	Result map[int64]*RoomRecommendClientRecStrongResp_Result `protobuf:"bytes,1,rep,name=result" json:"result" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *RoomRecommendClientRecStrongResp_Data) Reset()         { *m = RoomRecommendClientRecStrongResp_Data{} }
func (m *RoomRecommendClientRecStrongResp_Data) String() string { return proto.CompactTextString(m) }
func (*RoomRecommendClientRecStrongResp_Data) ProtoMessage()    {}
func (*RoomRecommendClientRecStrongResp_Data) Descriptor() ([]byte, []int) {
	return fileDescriptor_RoomRecommend_2e8a5a54a8657efa, []int{3, 1}
}
func (m *RoomRecommendClientRecStrongResp_Data) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RoomRecommendClientRecStrongResp_Data) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RoomRecommendClientRecStrongResp_Data.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *RoomRecommendClientRecStrongResp_Data) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RoomRecommendClientRecStrongResp_Data.Merge(dst, src)
}
func (m *RoomRecommendClientRecStrongResp_Data) XXX_Size() int {
	return m.Size()
}
func (m *RoomRecommendClientRecStrongResp_Data) XXX_DiscardUnknown() {
	xxx_messageInfo_RoomRecommendClientRecStrongResp_Data.DiscardUnknown(m)
}

var xxx_messageInfo_RoomRecommendClientRecStrongResp_Data proto.InternalMessageInfo

func (m *RoomRecommendClientRecStrongResp_Data) GetResult() map[int64]*RoomRecommendClientRecStrongResp_Result {
	if m != nil {
		return m.Result
	}
	return nil
}

func init() {
	proto.RegisterType((*RoomRecommendGetPlayerListReq)(nil), "room.v1.RoomRecommendGetPlayerListReq")
	proto.RegisterType((*RoomRecommendGetPlayerListResp)(nil), "room.v1.RoomRecommendGetPlayerListResp")
	proto.RegisterType((*RoomRecommendGetPlayerListResp_RoomInfo)(nil), "room.v1.RoomRecommendGetPlayerListResp.RoomInfo")
	proto.RegisterType((*RoomRecommendGetPlayerListResp_Data)(nil), "room.v1.RoomRecommendGetPlayerListResp.Data")
	proto.RegisterType((*RoomRecommendClientRecStrongReq)(nil), "room.v1.RoomRecommendClientRecStrongReq")
	proto.RegisterType((*RoomRecommendClientRecStrongResp)(nil), "room.v1.RoomRecommendClientRecStrongResp")
	proto.RegisterType((*RoomRecommendClientRecStrongResp_Result)(nil), "room.v1.RoomRecommendClientRecStrongResp.Result")
	proto.RegisterType((*RoomRecommendClientRecStrongResp_Data)(nil), "room.v1.RoomRecommendClientRecStrongResp.Data")
	proto.RegisterMapType((map[int64]*RoomRecommendClientRecStrongResp_Result)(nil), "room.v1.RoomRecommendClientRecStrongResp.Data.ResultEntry")
}
func (m *RoomRecommendGetPlayerListReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RoomRecommendGetPlayerListReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.AreaV2Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintRoomRecommend(dAtA, i, uint64(m.AreaV2Id))
	}
	if m.Roomid != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintRoomRecommend(dAtA, i, uint64(m.Roomid))
	}
	if m.IsNew != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintRoomRecommend(dAtA, i, uint64(m.IsNew))
	}
	return i, nil
}

func (m *RoomRecommendGetPlayerListResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RoomRecommendGetPlayerListResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintRoomRecommend(dAtA, i, uint64(m.Code))
	}
	if len(m.Msg) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintRoomRecommend(dAtA, i, uint64(len(m.Msg)))
		i += copy(dAtA[i:], m.Msg)
	}
	if m.Data != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintRoomRecommend(dAtA, i, uint64(m.Data.Size()))
		n1, err := m.Data.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	return i, nil
}

func (m *RoomRecommendGetPlayerListResp_RoomInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RoomRecommendGetPlayerListResp_RoomInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Roomid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintRoomRecommend(dAtA, i, uint64(m.Roomid))
	}
	if len(m.Title) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintRoomRecommend(dAtA, i, uint64(len(m.Title)))
		i += copy(dAtA[i:], m.Title)
	}
	if len(m.Uname) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintRoomRecommend(dAtA, i, uint64(len(m.Uname)))
		i += copy(dAtA[i:], m.Uname)
	}
	if m.Online != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintRoomRecommend(dAtA, i, uint64(m.Online))
	}
	if len(m.Cover) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintRoomRecommend(dAtA, i, uint64(len(m.Cover)))
		i += copy(dAtA[i:], m.Cover)
	}
	if len(m.Link) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintRoomRecommend(dAtA, i, uint64(len(m.Link)))
		i += copy(dAtA[i:], m.Link)
	}
	if len(m.Face) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintRoomRecommend(dAtA, i, uint64(len(m.Face)))
		i += copy(dAtA[i:], m.Face)
	}
	if m.AreaV2ParentId != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintRoomRecommend(dAtA, i, uint64(m.AreaV2ParentId))
	}
	if len(m.AreaV2ParentName) > 0 {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintRoomRecommend(dAtA, i, uint64(len(m.AreaV2ParentName)))
		i += copy(dAtA[i:], m.AreaV2ParentName)
	}
	if m.AreaV2Id != 0 {
		dAtA[i] = 0x50
		i++
		i = encodeVarintRoomRecommend(dAtA, i, uint64(m.AreaV2Id))
	}
	if len(m.AreaV2Name) > 0 {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintRoomRecommend(dAtA, i, uint64(len(m.AreaV2Name)))
		i += copy(dAtA[i:], m.AreaV2Name)
	}
	if len(m.PlayUrl) > 0 {
		dAtA[i] = 0x62
		i++
		i = encodeVarintRoomRecommend(dAtA, i, uint64(len(m.PlayUrl)))
		i += copy(dAtA[i:], m.PlayUrl)
	}
	if m.CurrentQuality != 0 {
		dAtA[i] = 0x68
		i++
		i = encodeVarintRoomRecommend(dAtA, i, uint64(m.CurrentQuality))
	}
	if len(m.AcceptQuality) > 0 {
		dAtA3 := make([]byte, len(m.AcceptQuality)*10)
		var j2 int
		for _, num1 := range m.AcceptQuality {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA3[j2] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j2++
			}
			dAtA3[j2] = uint8(num)
			j2++
		}
		dAtA[i] = 0x72
		i++
		i = encodeVarintRoomRecommend(dAtA, i, uint64(j2))
		i += copy(dAtA[i:], dAtA3[:j2])
	}
	if m.BroadcastType != 0 {
		dAtA[i] = 0x78
		i++
		i = encodeVarintRoomRecommend(dAtA, i, uint64(m.BroadcastType))
	}
	if m.IsFocus != 0 {
		dAtA[i] = 0x80
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintRoomRecommend(dAtA, i, uint64(m.IsFocus))
	}
	return i, nil
}

func (m *RoomRecommendGetPlayerListResp_Data) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RoomRecommendGetPlayerListResp_Data) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Title) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintRoomRecommend(dAtA, i, uint64(len(m.Title)))
		i += copy(dAtA[i:], m.Title)
	}
	if len(m.List) > 0 {
		for _, msg := range m.List {
			dAtA[i] = 0x12
			i++
			i = encodeVarintRoomRecommend(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *RoomRecommendClientRecStrongReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RoomRecommendClientRecStrongReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.RecPage != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintRoomRecommend(dAtA, i, uint64(m.RecPage))
	}
	return i, nil
}

func (m *RoomRecommendClientRecStrongResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RoomRecommendClientRecStrongResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintRoomRecommend(dAtA, i, uint64(m.Code))
	}
	if len(m.Msg) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintRoomRecommend(dAtA, i, uint64(len(m.Msg)))
		i += copy(dAtA[i:], m.Msg)
	}
	if m.Data != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintRoomRecommend(dAtA, i, uint64(m.Data.Size()))
		n4, err := m.Data.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	return i, nil
}

func (m *RoomRecommendClientRecStrongResp_Result) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RoomRecommendClientRecStrongResp_Result) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Roomid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintRoomRecommend(dAtA, i, uint64(m.Roomid))
	}
	if len(m.Title) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintRoomRecommend(dAtA, i, uint64(len(m.Title)))
		i += copy(dAtA[i:], m.Title)
	}
	if len(m.Uname) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintRoomRecommend(dAtA, i, uint64(len(m.Uname)))
		i += copy(dAtA[i:], m.Uname)
	}
	if m.Online != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintRoomRecommend(dAtA, i, uint64(m.Online))
	}
	if len(m.Cover) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintRoomRecommend(dAtA, i, uint64(len(m.Cover)))
		i += copy(dAtA[i:], m.Cover)
	}
	if len(m.UserCover) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintRoomRecommend(dAtA, i, uint64(len(m.UserCover)))
		i += copy(dAtA[i:], m.UserCover)
	}
	if len(m.SystemCover) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintRoomRecommend(dAtA, i, uint64(len(m.SystemCover)))
		i += copy(dAtA[i:], m.SystemCover)
	}
	if len(m.Link) > 0 {
		dAtA[i] = 0x42
		i++
		i = encodeVarintRoomRecommend(dAtA, i, uint64(len(m.Link)))
		i += copy(dAtA[i:], m.Link)
	}
	if len(m.Face) > 0 {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintRoomRecommend(dAtA, i, uint64(len(m.Face)))
		i += copy(dAtA[i:], m.Face)
	}
	if m.AreaV2ParentId != 0 {
		dAtA[i] = 0x50
		i++
		i = encodeVarintRoomRecommend(dAtA, i, uint64(m.AreaV2ParentId))
	}
	if len(m.AreaV2ParentName) > 0 {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintRoomRecommend(dAtA, i, uint64(len(m.AreaV2ParentName)))
		i += copy(dAtA[i:], m.AreaV2ParentName)
	}
	if m.AreaV2Id != 0 {
		dAtA[i] = 0x60
		i++
		i = encodeVarintRoomRecommend(dAtA, i, uint64(m.AreaV2Id))
	}
	if len(m.AreaV2Name) > 0 {
		dAtA[i] = 0x6a
		i++
		i = encodeVarintRoomRecommend(dAtA, i, uint64(len(m.AreaV2Name)))
		i += copy(dAtA[i:], m.AreaV2Name)
	}
	if len(m.PlayUrl) > 0 {
		dAtA[i] = 0x72
		i++
		i = encodeVarintRoomRecommend(dAtA, i, uint64(len(m.PlayUrl)))
		i += copy(dAtA[i:], m.PlayUrl)
	}
	if m.CurrentQuality != 0 {
		dAtA[i] = 0x78
		i++
		i = encodeVarintRoomRecommend(dAtA, i, uint64(m.CurrentQuality))
	}
	if len(m.AcceptQuality) > 0 {
		dAtA6 := make([]byte, len(m.AcceptQuality)*10)
		var j5 int
		for _, num1 := range m.AcceptQuality {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA6[j5] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j5++
			}
			dAtA6[j5] = uint8(num)
			j5++
		}
		dAtA[i] = 0x82
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintRoomRecommend(dAtA, i, uint64(j5))
		i += copy(dAtA[i:], dAtA6[:j5])
	}
	if m.BroadcastType != 0 {
		dAtA[i] = 0x88
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintRoomRecommend(dAtA, i, uint64(m.BroadcastType))
	}
	if len(m.PendentRu) > 0 {
		dAtA[i] = 0x92
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintRoomRecommend(dAtA, i, uint64(len(m.PendentRu)))
		i += copy(dAtA[i:], m.PendentRu)
	}
	if len(m.PendentRuPic) > 0 {
		dAtA[i] = 0x9a
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintRoomRecommend(dAtA, i, uint64(len(m.PendentRuPic)))
		i += copy(dAtA[i:], m.PendentRuPic)
	}
	if len(m.PendentRuColor) > 0 {
		dAtA[i] = 0xa2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintRoomRecommend(dAtA, i, uint64(len(m.PendentRuColor)))
		i += copy(dAtA[i:], m.PendentRuColor)
	}
	if m.RecType != 0 {
		dAtA[i] = 0xa8
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintRoomRecommend(dAtA, i, uint64(m.RecType))
	}
	if m.PkId != 0 {
		dAtA[i] = 0xb0
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintRoomRecommend(dAtA, i, uint64(m.PkId))
	}
	return i, nil
}

func (m *RoomRecommendClientRecStrongResp_Data) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RoomRecommendClientRecStrongResp_Data) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Result) > 0 {
		for k, _ := range m.Result {
			dAtA[i] = 0xa
			i++
			v := m.Result[k]
			msgSize := 0
			if v != nil {
				msgSize = v.Size()
				msgSize += 1 + sovRoomRecommend(uint64(msgSize))
			}
			mapSize := 1 + sovRoomRecommend(uint64(k)) + msgSize
			i = encodeVarintRoomRecommend(dAtA, i, uint64(mapSize))
			dAtA[i] = 0x8
			i++
			i = encodeVarintRoomRecommend(dAtA, i, uint64(k))
			if v != nil {
				dAtA[i] = 0x12
				i++
				i = encodeVarintRoomRecommend(dAtA, i, uint64(v.Size()))
				n7, err := v.MarshalTo(dAtA[i:])
				if err != nil {
					return 0, err
				}
				i += n7
			}
		}
	}
	return i, nil
}

func encodeVarintRoomRecommend(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *RoomRecommendGetPlayerListReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AreaV2Id != 0 {
		n += 1 + sovRoomRecommend(uint64(m.AreaV2Id))
	}
	if m.Roomid != 0 {
		n += 1 + sovRoomRecommend(uint64(m.Roomid))
	}
	if m.IsNew != 0 {
		n += 1 + sovRoomRecommend(uint64(m.IsNew))
	}
	return n
}

func (m *RoomRecommendGetPlayerListResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovRoomRecommend(uint64(m.Code))
	}
	l = len(m.Msg)
	if l > 0 {
		n += 1 + l + sovRoomRecommend(uint64(l))
	}
	if m.Data != nil {
		l = m.Data.Size()
		n += 1 + l + sovRoomRecommend(uint64(l))
	}
	return n
}

func (m *RoomRecommendGetPlayerListResp_RoomInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Roomid != 0 {
		n += 1 + sovRoomRecommend(uint64(m.Roomid))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovRoomRecommend(uint64(l))
	}
	l = len(m.Uname)
	if l > 0 {
		n += 1 + l + sovRoomRecommend(uint64(l))
	}
	if m.Online != 0 {
		n += 1 + sovRoomRecommend(uint64(m.Online))
	}
	l = len(m.Cover)
	if l > 0 {
		n += 1 + l + sovRoomRecommend(uint64(l))
	}
	l = len(m.Link)
	if l > 0 {
		n += 1 + l + sovRoomRecommend(uint64(l))
	}
	l = len(m.Face)
	if l > 0 {
		n += 1 + l + sovRoomRecommend(uint64(l))
	}
	if m.AreaV2ParentId != 0 {
		n += 1 + sovRoomRecommend(uint64(m.AreaV2ParentId))
	}
	l = len(m.AreaV2ParentName)
	if l > 0 {
		n += 1 + l + sovRoomRecommend(uint64(l))
	}
	if m.AreaV2Id != 0 {
		n += 1 + sovRoomRecommend(uint64(m.AreaV2Id))
	}
	l = len(m.AreaV2Name)
	if l > 0 {
		n += 1 + l + sovRoomRecommend(uint64(l))
	}
	l = len(m.PlayUrl)
	if l > 0 {
		n += 1 + l + sovRoomRecommend(uint64(l))
	}
	if m.CurrentQuality != 0 {
		n += 1 + sovRoomRecommend(uint64(m.CurrentQuality))
	}
	if len(m.AcceptQuality) > 0 {
		l = 0
		for _, e := range m.AcceptQuality {
			l += sovRoomRecommend(uint64(e))
		}
		n += 1 + sovRoomRecommend(uint64(l)) + l
	}
	if m.BroadcastType != 0 {
		n += 1 + sovRoomRecommend(uint64(m.BroadcastType))
	}
	if m.IsFocus != 0 {
		n += 2 + sovRoomRecommend(uint64(m.IsFocus))
	}
	return n
}

func (m *RoomRecommendGetPlayerListResp_Data) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovRoomRecommend(uint64(l))
	}
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovRoomRecommend(uint64(l))
		}
	}
	return n
}

func (m *RoomRecommendClientRecStrongReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RecPage != 0 {
		n += 1 + sovRoomRecommend(uint64(m.RecPage))
	}
	return n
}

func (m *RoomRecommendClientRecStrongResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovRoomRecommend(uint64(m.Code))
	}
	l = len(m.Msg)
	if l > 0 {
		n += 1 + l + sovRoomRecommend(uint64(l))
	}
	if m.Data != nil {
		l = m.Data.Size()
		n += 1 + l + sovRoomRecommend(uint64(l))
	}
	return n
}

func (m *RoomRecommendClientRecStrongResp_Result) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Roomid != 0 {
		n += 1 + sovRoomRecommend(uint64(m.Roomid))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovRoomRecommend(uint64(l))
	}
	l = len(m.Uname)
	if l > 0 {
		n += 1 + l + sovRoomRecommend(uint64(l))
	}
	if m.Online != 0 {
		n += 1 + sovRoomRecommend(uint64(m.Online))
	}
	l = len(m.Cover)
	if l > 0 {
		n += 1 + l + sovRoomRecommend(uint64(l))
	}
	l = len(m.UserCover)
	if l > 0 {
		n += 1 + l + sovRoomRecommend(uint64(l))
	}
	l = len(m.SystemCover)
	if l > 0 {
		n += 1 + l + sovRoomRecommend(uint64(l))
	}
	l = len(m.Link)
	if l > 0 {
		n += 1 + l + sovRoomRecommend(uint64(l))
	}
	l = len(m.Face)
	if l > 0 {
		n += 1 + l + sovRoomRecommend(uint64(l))
	}
	if m.AreaV2ParentId != 0 {
		n += 1 + sovRoomRecommend(uint64(m.AreaV2ParentId))
	}
	l = len(m.AreaV2ParentName)
	if l > 0 {
		n += 1 + l + sovRoomRecommend(uint64(l))
	}
	if m.AreaV2Id != 0 {
		n += 1 + sovRoomRecommend(uint64(m.AreaV2Id))
	}
	l = len(m.AreaV2Name)
	if l > 0 {
		n += 1 + l + sovRoomRecommend(uint64(l))
	}
	l = len(m.PlayUrl)
	if l > 0 {
		n += 1 + l + sovRoomRecommend(uint64(l))
	}
	if m.CurrentQuality != 0 {
		n += 1 + sovRoomRecommend(uint64(m.CurrentQuality))
	}
	if len(m.AcceptQuality) > 0 {
		l = 0
		for _, e := range m.AcceptQuality {
			l += sovRoomRecommend(uint64(e))
		}
		n += 2 + sovRoomRecommend(uint64(l)) + l
	}
	if m.BroadcastType != 0 {
		n += 2 + sovRoomRecommend(uint64(m.BroadcastType))
	}
	l = len(m.PendentRu)
	if l > 0 {
		n += 2 + l + sovRoomRecommend(uint64(l))
	}
	l = len(m.PendentRuPic)
	if l > 0 {
		n += 2 + l + sovRoomRecommend(uint64(l))
	}
	l = len(m.PendentRuColor)
	if l > 0 {
		n += 2 + l + sovRoomRecommend(uint64(l))
	}
	if m.RecType != 0 {
		n += 2 + sovRoomRecommend(uint64(m.RecType))
	}
	if m.PkId != 0 {
		n += 2 + sovRoomRecommend(uint64(m.PkId))
	}
	return n
}

func (m *RoomRecommendClientRecStrongResp_Data) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Result) > 0 {
		for k, v := range m.Result {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovRoomRecommend(uint64(l))
			}
			mapEntrySize := 1 + sovRoomRecommend(uint64(k)) + l
			n += mapEntrySize + 1 + sovRoomRecommend(uint64(mapEntrySize))
		}
	}
	return n
}

func sovRoomRecommend(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozRoomRecommend(x uint64) (n int) {
	return sovRoomRecommend(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *RoomRecommendGetPlayerListReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRoomRecommend
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RoomRecommendGetPlayerListReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RoomRecommendGetPlayerListReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AreaV2Id", wireType)
			}
			m.AreaV2Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoomRecommend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AreaV2Id |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Roomid", wireType)
			}
			m.Roomid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoomRecommend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Roomid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsNew", wireType)
			}
			m.IsNew = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoomRecommend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IsNew |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRoomRecommend(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRoomRecommend
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RoomRecommendGetPlayerListResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRoomRecommend
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RoomRecommendGetPlayerListResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RoomRecommendGetPlayerListResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoomRecommend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoomRecommend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRoomRecommend
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoomRecommend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRoomRecommend
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = &RoomRecommendGetPlayerListResp_Data{}
			}
			if err := m.Data.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRoomRecommend(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRoomRecommend
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RoomRecommendGetPlayerListResp_RoomInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRoomRecommend
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RoomInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RoomInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Roomid", wireType)
			}
			m.Roomid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoomRecommend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Roomid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoomRecommend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRoomRecommend
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uname", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoomRecommend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRoomRecommend
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Uname = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Online", wireType)
			}
			m.Online = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoomRecommend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Online |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cover", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoomRecommend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRoomRecommend
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cover = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Link", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoomRecommend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRoomRecommend
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Link = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Face", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoomRecommend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRoomRecommend
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Face = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AreaV2ParentId", wireType)
			}
			m.AreaV2ParentId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoomRecommend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AreaV2ParentId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AreaV2ParentName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoomRecommend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRoomRecommend
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AreaV2ParentName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AreaV2Id", wireType)
			}
			m.AreaV2Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoomRecommend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AreaV2Id |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AreaV2Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoomRecommend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRoomRecommend
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AreaV2Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoomRecommend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRoomRecommend
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PlayUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentQuality", wireType)
			}
			m.CurrentQuality = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoomRecommend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CurrentQuality |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowRoomRecommend
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.AcceptQuality = append(m.AcceptQuality, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowRoomRecommend
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthRoomRecommend
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.AcceptQuality) == 0 {
					m.AcceptQuality = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowRoomRecommend
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.AcceptQuality = append(m.AcceptQuality, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field AcceptQuality", wireType)
			}
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BroadcastType", wireType)
			}
			m.BroadcastType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoomRecommend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BroadcastType |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsFocus", wireType)
			}
			m.IsFocus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoomRecommend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IsFocus |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRoomRecommend(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRoomRecommend
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RoomRecommendGetPlayerListResp_Data) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRoomRecommend
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Data: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Data: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoomRecommend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRoomRecommend
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoomRecommend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRoomRecommend
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &RoomRecommendGetPlayerListResp_RoomInfo{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRoomRecommend(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRoomRecommend
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RoomRecommendClientRecStrongReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRoomRecommend
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RoomRecommendClientRecStrongReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RoomRecommendClientRecStrongReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecPage", wireType)
			}
			m.RecPage = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoomRecommend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RecPage |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRoomRecommend(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRoomRecommend
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RoomRecommendClientRecStrongResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRoomRecommend
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RoomRecommendClientRecStrongResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RoomRecommendClientRecStrongResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoomRecommend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoomRecommend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRoomRecommend
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoomRecommend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRoomRecommend
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = &RoomRecommendClientRecStrongResp_Data{}
			}
			if err := m.Data.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRoomRecommend(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRoomRecommend
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RoomRecommendClientRecStrongResp_Result) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRoomRecommend
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Result: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Result: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Roomid", wireType)
			}
			m.Roomid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoomRecommend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Roomid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoomRecommend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRoomRecommend
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uname", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoomRecommend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRoomRecommend
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Uname = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Online", wireType)
			}
			m.Online = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoomRecommend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Online |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cover", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoomRecommend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRoomRecommend
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cover = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserCover", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoomRecommend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRoomRecommend
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserCover = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SystemCover", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoomRecommend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRoomRecommend
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SystemCover = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Link", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoomRecommend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRoomRecommend
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Link = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Face", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoomRecommend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRoomRecommend
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Face = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AreaV2ParentId", wireType)
			}
			m.AreaV2ParentId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoomRecommend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AreaV2ParentId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AreaV2ParentName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoomRecommend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRoomRecommend
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AreaV2ParentName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AreaV2Id", wireType)
			}
			m.AreaV2Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoomRecommend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AreaV2Id |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AreaV2Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoomRecommend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRoomRecommend
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AreaV2Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoomRecommend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRoomRecommend
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PlayUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentQuality", wireType)
			}
			m.CurrentQuality = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoomRecommend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CurrentQuality |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 16:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowRoomRecommend
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.AcceptQuality = append(m.AcceptQuality, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowRoomRecommend
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthRoomRecommend
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.AcceptQuality) == 0 {
					m.AcceptQuality = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowRoomRecommend
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.AcceptQuality = append(m.AcceptQuality, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field AcceptQuality", wireType)
			}
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BroadcastType", wireType)
			}
			m.BroadcastType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoomRecommend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BroadcastType |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PendentRu", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoomRecommend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRoomRecommend
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PendentRu = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PendentRuPic", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoomRecommend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRoomRecommend
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PendentRuPic = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PendentRuColor", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoomRecommend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRoomRecommend
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PendentRuColor = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 21:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecType", wireType)
			}
			m.RecType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoomRecommend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RecType |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 22:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PkId", wireType)
			}
			m.PkId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoomRecommend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PkId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRoomRecommend(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRoomRecommend
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RoomRecommendClientRecStrongResp_Data) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRoomRecommend
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Data: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Data: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoomRecommend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRoomRecommend
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Result == nil {
				m.Result = make(map[int64]*RoomRecommendClientRecStrongResp_Result)
			}
			var mapkey int64
			var mapvalue *RoomRecommendClientRecStrongResp_Result
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowRoomRecommend
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowRoomRecommend
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= (int64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowRoomRecommend
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= (int(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthRoomRecommend
					}
					postmsgIndex := iNdEx + mapmsglen
					if mapmsglen < 0 {
						return ErrInvalidLengthRoomRecommend
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &RoomRecommendClientRecStrongResp_Result{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipRoomRecommend(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthRoomRecommend
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Result[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRoomRecommend(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRoomRecommend
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipRoomRecommend(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowRoomRecommend
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRoomRecommend
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRoomRecommend
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthRoomRecommend
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowRoomRecommend
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipRoomRecommend(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthRoomRecommend = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowRoomRecommend   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("v1/RoomRecommend.proto", fileDescriptor_RoomRecommend_2e8a5a54a8657efa)
}

var fileDescriptor_RoomRecommend_2e8a5a54a8657efa = []byte{
	// 1006 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xd4, 0x56, 0xcd, 0x6f, 0xe3, 0x44,
	0x14, 0xaf, 0x9b, 0xe6, 0xeb, 0xe5, 0xa3, 0xd9, 0xe9, 0xee, 0x62, 0xa2, 0x25, 0x2e, 0x3d, 0xd0,
	0x22, 0x6d, 0x53, 0x9a, 0xbd, 0x2c, 0x2b, 0x84, 0x50, 0x0b, 0x45, 0x5d, 0xad, 0xaa, 0x32, 0x7c,
	0x1c, 0x38, 0x10, 0x5c, 0x7b, 0x1a, 0xac, 0x38, 0x1e, 0xd7, 0x1e, 0xa7, 0xca, 0x9d, 0x33, 0xda,
	0x03, 0x7f, 0x14, 0xc7, 0x95, 0xb8, 0xc0, 0xc5, 0x42, 0xed, 0xcd, 0x7f, 0x05, 0x9a, 0x37, 0x4e,
	0x1d, 0x77, 0xd3, 0x92, 0x52, 0x2e, 0x5c, 0x66, 0xe6, 0xfd, 0xde, 0xfb, 0xcd, 0x7b, 0x2f, 0x7d,
	0xf3, 0x73, 0xe1, 0xf1, 0x78, 0x77, 0x87, 0x72, 0x3e, 0xa2, 0xcc, 0xe2, 0xa3, 0x11, 0xf3, 0xec,
	0xae, 0x1f, 0x70, 0xc1, 0x49, 0x39, 0xe0, 0x7c, 0xd4, 0x1d, 0xef, 0xb6, 0xb7, 0x07, 0x8e, 0xf8,
	0x29, 0x3a, 0xe9, 0x5a, 0x7c, 0xb4, 0x33, 0xe0, 0x03, 0xbe, 0x83, 0xfe, 0x93, 0xe8, 0x14, 0x2d,
	0x34, 0xf0, 0xa4, 0x78, 0x1b, 0xbf, 0x6a, 0xf0, 0x5e, 0xee, 0xbe, 0x2f, 0x99, 0x38, 0x76, 0xcd,
	0x09, 0x0b, 0x5e, 0x39, 0xa1, 0xa0, 0xec, 0x8c, 0x3c, 0x05, 0x30, 0x03, 0x66, 0xf6, 0xc7, 0xbd,
	0xbe, 0x63, 0xeb, 0xda, 0xba, 0xb6, 0x55, 0xd8, 0x6b, 0x26, 0xb1, 0x31, 0x83, 0xd2, 0x8a, 0x3c,
	0x7f, 0xd7, 0x3b, 0xb4, 0xc9, 0x06, 0x94, 0x64, 0x25, 0x8e, 0xad, 0x2f, 0x63, 0x24, 0x24, 0xb1,
	0x91, 0x22, 0x34, 0xdd, 0xc9, 0xfb, 0x50, 0x72, 0xc2, 0xbe, 0xc7, 0xce, 0xf5, 0x42, 0x16, 0xa3,
	0x10, 0x5a, 0x74, 0xc2, 0x23, 0x76, 0xbe, 0xf1, 0x73, 0x05, 0x3a, 0xb7, 0x95, 0x15, 0xfa, 0xe4,
	0x09, 0xac, 0x58, 0xdc, 0x66, 0x69, 0x45, 0x95, 0x24, 0x36, 0xd0, 0xa6, 0xb8, 0x92, 0x77, 0xa1,
	0x30, 0x0a, 0x07, 0x58, 0x44, 0x75, 0xaf, 0x9c, 0xc4, 0x86, 0x34, 0xa9, 0x5c, 0xc8, 0x4b, 0x58,
	0xb1, 0x4d, 0x61, 0x62, 0xf2, 0x5a, 0xef, 0x69, 0x37, 0xfd, 0xe5, 0xba, 0xb7, 0xe7, 0xeb, 0x7e,
	0x6e, 0x0a, 0x53, 0xa5, 0x91, 0x6c, 0x8a, 0x6b, 0xfb, 0xb2, 0x08, 0x15, 0xc9, 0x3b, 0xf4, 0x4e,
	0xf9, 0x4c, 0xef, 0xda, 0x8d, 0xbd, 0x1b, 0x50, 0x14, 0x8e, 0x70, 0x59, 0x5a, 0x59, 0x35, 0x89,
	0x0d, 0x05, 0x50, 0xb5, 0xc9, 0x80, 0xc8, 0x33, 0x47, 0x0c, 0xcb, 0x4b, 0x03, 0x10, 0xa0, 0x6a,
	0x93, 0x59, 0xb8, 0xe7, 0x3a, 0x1e, 0xd3, 0x57, 0xb2, 0x2c, 0x0a, 0xa1, 0xe9, 0x2e, 0x2f, 0xb1,
	0xf8, 0x98, 0x05, 0x7a, 0x31, 0xbb, 0x04, 0x01, 0xaa, 0x36, 0xf9, 0xe3, 0xb9, 0x8e, 0x37, 0xd4,
	0x4b, 0xe8, 0xc7, 0xae, 0xa4, 0x4d, 0x71, 0x95, 0xde, 0x53, 0xd3, 0x62, 0x7a, 0x39, 0xf3, 0x4a,
	0x9b, 0xe2, 0x4a, 0x3e, 0x83, 0x07, 0xd3, 0x3f, 0xbd, 0x6f, 0x06, 0xcc, 0x13, 0x72, 0x2e, 0x2a,
	0x58, 0xcb, 0xa3, 0x24, 0x36, 0xde, 0x76, 0xd2, 0xa6, 0x1a, 0x8f, 0x63, 0x04, 0x0e, 0x6d, 0x72,
	0x00, 0x6b, 0xd7, 0x82, 0xb0, 0xe3, 0x2a, 0xa6, 0x7b, 0x27, 0x89, 0x8d, 0x79, 0x6e, 0xda, 0x9a,
	0xbd, 0xe5, 0x48, 0xfe, 0x14, 0xf9, 0xd1, 0x84, 0x7f, 0x18, 0xcd, 0x1e, 0xd4, 0xa7, 0x38, 0xa6,
	0xab, 0x61, 0xba, 0x56, 0x12, 0x1b, 0x39, 0x9c, 0x82, 0x62, 0x60, 0x86, 0x4d, 0xa8, 0xf8, 0xae,
	0x39, 0xe9, 0x47, 0x81, 0xab, 0xd7, 0x31, 0xbe, 0x9e, 0xc4, 0xc6, 0x15, 0x46, 0xcb, 0xf2, 0xf4,
	0x6d, 0xe0, 0x92, 0x4f, 0x60, 0xd5, 0x8a, 0x02, 0x2c, 0xf6, 0x2c, 0x32, 0x5d, 0x47, 0x4c, 0xf4,
	0x06, 0xd6, 0xb3, 0x96, 0xc4, 0xc6, 0x75, 0x17, 0x6d, 0xa6, 0xc0, 0x57, 0xca, 0x26, 0x1f, 0x43,
	0xd3, 0xb4, 0x2c, 0xe6, 0x67, 0xe4, 0xe6, 0x7a, 0x61, 0xab, 0xb0, 0x47, 0x92, 0xd8, 0xb8, 0xe6,
	0xa1, 0x0d, 0x65, 0xcf, 0x50, 0x4f, 0x02, 0x6e, 0xda, 0x96, 0x19, 0x8a, 0xbe, 0x98, 0xf8, 0x4c,
	0x5f, 0xc5, 0xbc, 0x48, 0xcd, 0x7b, 0x68, 0xe3, 0xca, 0xfe, 0x66, 0xe2, 0x63, 0x73, 0x4e, 0xd8,
	0x3f, 0xe5, 0x56, 0x14, 0xea, 0x2d, 0x24, 0x61, 0x73, 0x53, 0x8c, 0x96, 0x9d, 0xf0, 0x40, 0x1e,
	0xda, 0xe7, 0xb0, 0x22, 0xa7, 0x3f, 0x1b, 0x5e, 0xed, 0x86, 0xe1, 0x3d, 0x92, 0x63, 0x15, 0x0a,
	0x7d, 0x79, 0xbd, 0xb0, 0x55, 0xeb, 0x7d, 0xb4, 0xe8, 0xd3, 0x9a, 0xbe, 0xa0, 0xe9, 0x20, 0x86,
	0x82, 0xe2, 0xba, 0xf1, 0x12, 0x8c, 0x1c, 0x75, 0xdf, 0x75, 0x98, 0x27, 0x28, 0xb3, 0xbe, 0x16,
	0x01, 0xf7, 0x06, 0x52, 0x9e, 0x36, 0xa1, 0x12, 0x30, 0xab, 0xef, 0x9b, 0x83, 0xa9, 0x14, 0x60,
	0x13, 0x53, 0x8c, 0x96, 0x03, 0x66, 0x1d, 0x9b, 0x03, 0xb6, 0xf1, 0xba, 0x06, 0xeb, 0xb7, 0x5f,
	0x76, 0x1f, 0x51, 0x79, 0x95, 0x13, 0x95, 0xee, 0xfc, 0xce, 0xe7, 0x64, 0x9c, 0x2f, 0x2b, 0xbf,
	0x54, 0xa0, 0x44, 0x59, 0x18, 0xb9, 0xe2, 0xff, 0x24, 0x2a, 0xdb, 0x00, 0x51, 0xc8, 0x82, 0xbe,
	0x8a, 0x52, 0xd2, 0x82, 0xcf, 0x31, 0x43, 0x69, 0x55, 0x9e, 0xf7, 0x31, 0xfc, 0x19, 0xd4, 0xc3,
	0x49, 0x28, 0xd8, 0x28, 0x25, 0x94, 0xb3, 0xf7, 0x38, 0x8b, 0xd3, 0x9a, 0xb2, 0xf6, 0x73, 0xc2,
	0x55, 0xb9, 0x55, 0xb8, 0xaa, 0x8b, 0x0b, 0x17, 0xfc, 0x07, 0xc2, 0x55, 0xbb, 0x9f, 0x70, 0xd5,
	0xef, 0x28, 0x5c, 0x8d, 0x3b, 0x0a, 0x57, 0xf3, 0x8e, 0xc2, 0xb5, 0x7a, 0x1f, 0xe1, 0x6a, 0xfd,
	0x7b, 0xe1, 0x7a, 0xb0, 0xa8, 0x70, 0x6d, 0x03, 0xf8, 0xcc, 0xb3, 0x65, 0x61, 0x41, 0xa4, 0x93,
	0x6c, 0xd0, 0x32, 0x94, 0x56, 0xd3, 0x33, 0x8d, 0xc8, 0x73, 0x68, 0x66, 0x8e, 0xbe, 0xef, 0x58,
	0xfa, 0x1a, 0x52, 0x30, 0x53, 0xde, 0x43, 0xeb, 0x57, 0xb4, 0x63, 0xc7, 0x22, 0x9f, 0x42, 0x6b,
	0xc6, 0x6f, 0x71, 0x97, 0x07, 0xfa, 0x43, 0xe4, 0x3e, 0x4c, 0x62, 0xe3, 0x2d, 0x1f, 0x6d, 0x5e,
	0xb1, 0xf7, 0xa5, 0x3d, 0x15, 0x27, 0xec, 0xee, 0x51, 0x5e, 0x9c, 0xb0, 0x2f, 0x29, 0x4e, 0xd8,
	0x51, 0x07, 0x8a, 0xfe, 0x50, 0xce, 0xc2, 0x63, 0x8c, 0xc2, 0xb7, 0x85, 0x00, 0x5d, 0xf1, 0x87,
	0x87, 0x76, 0xfb, 0x77, 0x2d, 0x95, 0xe0, 0x1f, 0xa0, 0x14, 0xa0, 0x30, 0xe8, 0x1a, 0x6a, 0xec,
	0x8b, 0xbb, 0x29, 0x4d, 0x57, 0xa9, 0xca, 0x17, 0x9e, 0x08, 0x26, 0xa9, 0x94, 0x20, 0x40, 0xd3,
	0xbd, 0x3d, 0x84, 0xda, 0x4c, 0x08, 0x69, 0x41, 0x61, 0xc8, 0x26, 0x4a, 0x7a, 0xa8, 0x3c, 0x92,
	0x03, 0x28, 0x8e, 0x4d, 0x37, 0x52, 0x5a, 0x73, 0xa3, 0xc6, 0xcf, 0xcb, 0xaf, 0xee, 0xa5, 0x8a,
	0xfe, 0x62, 0xf9, 0xb9, 0xd6, 0xfb, 0x53, 0x83, 0x46, 0x8e, 0x46, 0x7e, 0x84, 0xc6, 0x60, 0xf6,
	0xf3, 0x40, 0x3e, 0x58, 0xe8, 0x1b, 0x72, 0xd6, 0xde, 0x5c, 0xf0, 0x5b, 0x43, 0x4e, 0x61, 0xd5,
	0xca, 0x17, 0x47, 0xb6, 0x16, 0xec, 0xe1, 0xac, 0xfd, 0xe1, 0xc2, 0xdd, 0xee, 0x3d, 0xf9, 0xed,
	0xa2, 0xa3, 0xbd, 0xb9, 0xe8, 0x68, 0x7f, 0x5d, 0x74, 0xb4, 0xd7, 0x97, 0x9d, 0xa5, 0x37, 0x97,
	0x9d, 0xa5, 0x3f, 0x2e, 0x3b, 0x4b, 0xdf, 0x2f, 0x8f, 0x77, 0x4f, 0x4a, 0xf8, 0xdf, 0xf7, 0xb3,
	0xbf, 0x03, 0x00, 0x00, 0xff, 0xff, 0x14, 0xd8, 0x85, 0xad, 0xcf, 0x0b, 0x00, 0x00,
}
