// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: v1/Skin.proto

package v1

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type SkinCurrentReq struct {
	// 平台web、ios、android、ipad
	SkinPlatform string `protobuf:"bytes,1,opt,name=skin_platform,json=skinPlatform,proto3" json:"skin_platform"`
	// 客户端支持的皮肤版本，如“1.0”
	SkinVersion string `protobuf:"bytes,2,opt,name=skin_version,json=skinVersion,proto3" json:"skin_version"`
	// 房间id，支持长短号
	Roomid int64 `protobuf:"varint,3,opt,name=roomid,proto3" json:"roomid"`
	// 一级分区id
	AreaV2ParentId int64 `protobuf:"varint,4,opt,name=area_v2_parent_id,json=areaV2ParentId,proto3" json:"area_v2_parent_id"`
	// 二级分区id
	AreaV2Id int64 `protobuf:"varint,5,opt,name=area_v2_id,json=areaV2Id,proto3" json:"area_v2_id"`
}

func (m *SkinCurrentReq) Reset()         { *m = SkinCurrentReq{} }
func (m *SkinCurrentReq) String() string { return proto.CompactTextString(m) }
func (*SkinCurrentReq) ProtoMessage()    {}
func (*SkinCurrentReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_Skin_a39e5d086ea153eb, []int{0}
}
func (m *SkinCurrentReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SkinCurrentReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SkinCurrentReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *SkinCurrentReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SkinCurrentReq.Merge(dst, src)
}
func (m *SkinCurrentReq) XXX_Size() int {
	return m.Size()
}
func (m *SkinCurrentReq) XXX_DiscardUnknown() {
	xxx_messageInfo_SkinCurrentReq.DiscardUnknown(m)
}

var xxx_messageInfo_SkinCurrentReq proto.InternalMessageInfo

func (m *SkinCurrentReq) GetSkinPlatform() string {
	if m != nil {
		return m.SkinPlatform
	}
	return ""
}

func (m *SkinCurrentReq) GetSkinVersion() string {
	if m != nil {
		return m.SkinVersion
	}
	return ""
}

func (m *SkinCurrentReq) GetRoomid() int64 {
	if m != nil {
		return m.Roomid
	}
	return 0
}

func (m *SkinCurrentReq) GetAreaV2ParentId() int64 {
	if m != nil {
		return m.AreaV2ParentId
	}
	return 0
}

func (m *SkinCurrentReq) GetAreaV2Id() int64 {
	if m != nil {
		return m.AreaV2Id
	}
	return 0
}

type SkinCurrentResp struct {
	//
	Code int64 `protobuf:"varint,1,opt,name=code,proto3" json:"code"`
	//
	Msg string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg"`
	//
	Data *SkinCurrentResp_Data `protobuf:"bytes,3,opt,name=data" json:"data"`
}

func (m *SkinCurrentResp) Reset()         { *m = SkinCurrentResp{} }
func (m *SkinCurrentResp) String() string { return proto.CompactTextString(m) }
func (*SkinCurrentResp) ProtoMessage()    {}
func (*SkinCurrentResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_Skin_a39e5d086ea153eb, []int{1}
}
func (m *SkinCurrentResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SkinCurrentResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SkinCurrentResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *SkinCurrentResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SkinCurrentResp.Merge(dst, src)
}
func (m *SkinCurrentResp) XXX_Size() int {
	return m.Size()
}
func (m *SkinCurrentResp) XXX_DiscardUnknown() {
	xxx_messageInfo_SkinCurrentResp.DiscardUnknown(m)
}

var xxx_messageInfo_SkinCurrentResp proto.InternalMessageInfo

func (m *SkinCurrentResp) GetCode() int64 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *SkinCurrentResp) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func (m *SkinCurrentResp) GetData() *SkinCurrentResp_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

type SkinCurrentResp_Data struct {
	// 皮肤id
	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id"`
	// 皮肤配置，字符串类型
	SkinConfig string `protobuf:"bytes,2,opt,name=skin_config,json=skinConfig,proto3" json:"skin_config"`
	// 失效时间
	EndTime int64 `protobuf:"varint,3,opt,name=end_time,json=endTime,proto3" json:"end_time"`
	// 当前时间
	CurrentTime int64 `protobuf:"varint,4,opt,name=current_time,json=currentTime,proto3" json:"current_time"`
}

func (m *SkinCurrentResp_Data) Reset()         { *m = SkinCurrentResp_Data{} }
func (m *SkinCurrentResp_Data) String() string { return proto.CompactTextString(m) }
func (*SkinCurrentResp_Data) ProtoMessage()    {}
func (*SkinCurrentResp_Data) Descriptor() ([]byte, []int) {
	return fileDescriptor_Skin_a39e5d086ea153eb, []int{1, 0}
}
func (m *SkinCurrentResp_Data) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SkinCurrentResp_Data) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SkinCurrentResp_Data.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *SkinCurrentResp_Data) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SkinCurrentResp_Data.Merge(dst, src)
}
func (m *SkinCurrentResp_Data) XXX_Size() int {
	return m.Size()
}
func (m *SkinCurrentResp_Data) XXX_DiscardUnknown() {
	xxx_messageInfo_SkinCurrentResp_Data.DiscardUnknown(m)
}

var xxx_messageInfo_SkinCurrentResp_Data proto.InternalMessageInfo

func (m *SkinCurrentResp_Data) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *SkinCurrentResp_Data) GetSkinConfig() string {
	if m != nil {
		return m.SkinConfig
	}
	return ""
}

func (m *SkinCurrentResp_Data) GetEndTime() int64 {
	if m != nil {
		return m.EndTime
	}
	return 0
}

func (m *SkinCurrentResp_Data) GetCurrentTime() int64 {
	if m != nil {
		return m.CurrentTime
	}
	return 0
}

func init() {
	proto.RegisterType((*SkinCurrentReq)(nil), "room.v1.SkinCurrentReq")
	proto.RegisterType((*SkinCurrentResp)(nil), "room.v1.SkinCurrentResp")
	proto.RegisterType((*SkinCurrentResp_Data)(nil), "room.v1.SkinCurrentResp.Data")
}
func (m *SkinCurrentReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SkinCurrentReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.SkinPlatform) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSkin(dAtA, i, uint64(len(m.SkinPlatform)))
		i += copy(dAtA[i:], m.SkinPlatform)
	}
	if len(m.SkinVersion) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSkin(dAtA, i, uint64(len(m.SkinVersion)))
		i += copy(dAtA[i:], m.SkinVersion)
	}
	if m.Roomid != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintSkin(dAtA, i, uint64(m.Roomid))
	}
	if m.AreaV2ParentId != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintSkin(dAtA, i, uint64(m.AreaV2ParentId))
	}
	if m.AreaV2Id != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintSkin(dAtA, i, uint64(m.AreaV2Id))
	}
	return i, nil
}

func (m *SkinCurrentResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SkinCurrentResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSkin(dAtA, i, uint64(m.Code))
	}
	if len(m.Msg) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSkin(dAtA, i, uint64(len(m.Msg)))
		i += copy(dAtA[i:], m.Msg)
	}
	if m.Data != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintSkin(dAtA, i, uint64(m.Data.Size()))
		n1, err := m.Data.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	return i, nil
}

func (m *SkinCurrentResp_Data) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SkinCurrentResp_Data) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSkin(dAtA, i, uint64(m.Id))
	}
	if len(m.SkinConfig) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSkin(dAtA, i, uint64(len(m.SkinConfig)))
		i += copy(dAtA[i:], m.SkinConfig)
	}
	if m.EndTime != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintSkin(dAtA, i, uint64(m.EndTime))
	}
	if m.CurrentTime != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintSkin(dAtA, i, uint64(m.CurrentTime))
	}
	return i, nil
}

func encodeVarintSkin(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *SkinCurrentReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SkinPlatform)
	if l > 0 {
		n += 1 + l + sovSkin(uint64(l))
	}
	l = len(m.SkinVersion)
	if l > 0 {
		n += 1 + l + sovSkin(uint64(l))
	}
	if m.Roomid != 0 {
		n += 1 + sovSkin(uint64(m.Roomid))
	}
	if m.AreaV2ParentId != 0 {
		n += 1 + sovSkin(uint64(m.AreaV2ParentId))
	}
	if m.AreaV2Id != 0 {
		n += 1 + sovSkin(uint64(m.AreaV2Id))
	}
	return n
}

func (m *SkinCurrentResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovSkin(uint64(m.Code))
	}
	l = len(m.Msg)
	if l > 0 {
		n += 1 + l + sovSkin(uint64(l))
	}
	if m.Data != nil {
		l = m.Data.Size()
		n += 1 + l + sovSkin(uint64(l))
	}
	return n
}

func (m *SkinCurrentResp_Data) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovSkin(uint64(m.Id))
	}
	l = len(m.SkinConfig)
	if l > 0 {
		n += 1 + l + sovSkin(uint64(l))
	}
	if m.EndTime != 0 {
		n += 1 + sovSkin(uint64(m.EndTime))
	}
	if m.CurrentTime != 0 {
		n += 1 + sovSkin(uint64(m.CurrentTime))
	}
	return n
}

func sovSkin(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozSkin(x uint64) (n int) {
	return sovSkin(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *SkinCurrentReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSkin
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SkinCurrentReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SkinCurrentReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SkinPlatform", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSkin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSkin
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SkinPlatform = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SkinVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSkin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSkin
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SkinVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Roomid", wireType)
			}
			m.Roomid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSkin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Roomid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AreaV2ParentId", wireType)
			}
			m.AreaV2ParentId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSkin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AreaV2ParentId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AreaV2Id", wireType)
			}
			m.AreaV2Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSkin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AreaV2Id |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSkin(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSkin
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SkinCurrentResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSkin
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SkinCurrentResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SkinCurrentResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSkin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSkin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSkin
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSkin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSkin
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = &SkinCurrentResp_Data{}
			}
			if err := m.Data.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSkin(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSkin
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SkinCurrentResp_Data) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSkin
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Data: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Data: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSkin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SkinConfig", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSkin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSkin
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SkinConfig = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndTime", wireType)
			}
			m.EndTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSkin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EndTime |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentTime", wireType)
			}
			m.CurrentTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSkin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CurrentTime |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSkin(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSkin
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSkin(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSkin
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSkin
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSkin
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthSkin
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowSkin
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipSkin(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthSkin = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSkin   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("v1/Skin.proto", fileDescriptor_Skin_a39e5d086ea153eb) }

var fileDescriptor_Skin_a39e5d086ea153eb = []byte{
	// 467 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x92, 0xcf, 0x72, 0xd3, 0x30,
	0x10, 0xc6, 0x63, 0x27, 0x24, 0x61, 0xd3, 0xa6, 0x54, 0x33, 0x80, 0xc9, 0x14, 0xab, 0x93, 0x0b,
	0x3d, 0x80, 0x43, 0xd2, 0x19, 0x2e, 0x70, 0x60, 0xd2, 0x5e, 0x7a, 0xeb, 0x08, 0xa6, 0x07, 0x2e,
	0x1e, 0x27, 0x52, 0x82, 0xa6, 0xd8, 0x4a, 0x1d, 0xc7, 0xcf, 0x01, 0x2f, 0xc2, 0x99, 0x47, 0xe0,
	0xd8, 0x23, 0x27, 0x0d, 0x93, 0xdc, 0xf4, 0x14, 0x8c, 0xd6, 0x2a, 0x93, 0xf0, 0xe7, 0x22, 0xeb,
	0xf7, 0xed, 0xae, 0xb4, 0xfb, 0xc9, 0xb0, 0x5f, 0x0e, 0x07, 0xef, 0xae, 0x65, 0x16, 0x2d, 0x72,
	0x55, 0x28, 0xd2, 0xca, 0x95, 0x4a, 0xa3, 0x72, 0xd8, 0x7b, 0x31, 0x97, 0xc5, 0xc7, 0xd5, 0x24,
	0x9a, 0xaa, 0x74, 0x30, 0x57, 0x73, 0x35, 0xc0, 0xf8, 0x64, 0x35, 0x43, 0x42, 0xc0, 0x5d, 0x55,
	0xd7, 0xff, 0xe2, 0x43, 0xd7, 0x1e, 0x73, 0xb6, 0xca, 0x73, 0x91, 0x15, 0x4c, 0xdc, 0x90, 0x57,
	0xb0, 0xbf, 0xbc, 0x96, 0x59, 0xbc, 0xf8, 0x94, 0x14, 0x33, 0x95, 0xa7, 0x81, 0x77, 0xec, 0x9d,
	0xdc, 0x1f, 0x1f, 0x1a, 0x4d, 0x77, 0x03, 0x6c, 0xcf, 0xe2, 0xa5, 0x23, 0x72, 0x0a, 0xc8, 0x71,
	0x29, 0xf2, 0xa5, 0x54, 0x59, 0xe0, 0x63, 0xd9, 0x03, 0xa3, 0xe9, 0x8e, 0xce, 0x3a, 0x96, 0xae,
	0x2a, 0x20, 0x7d, 0x68, 0xda, 0xce, 0x25, 0x0f, 0xea, 0xc7, 0xde, 0x49, 0x7d, 0x0c, 0x46, 0x53,
	0xa7, 0x30, 0xf7, 0x25, 0x6f, 0xe1, 0x30, 0xc9, 0x45, 0x12, 0x97, 0xa3, 0x78, 0x91, 0xd8, 0x2e,
	0x63, 0xc9, 0x83, 0x06, 0xa6, 0x3f, 0x34, 0x9a, 0xfe, 0x1d, 0x64, 0x5d, 0x2b, 0x5d, 0x8d, 0x2e,
	0x51, 0xb8, 0xe0, 0xe4, 0x39, 0xc0, 0x5d, 0x92, 0xe4, 0xc1, 0x3d, 0x2c, 0xed, 0x1a, 0x4d, 0xb7,
	0x54, 0xd6, 0xae, 0x6a, 0x2e, 0x78, 0xff, 0x9b, 0x0f, 0x07, 0x3b, 0x9e, 0x2c, 0x17, 0xe4, 0x08,
	0x1a, 0x53, 0xc5, 0x05, 0x7a, 0x51, 0x1f, 0xb7, 0x8d, 0xa6, 0xc8, 0x0c, 0x57, 0xf2, 0x04, 0xea,
	0xe9, 0x72, 0xee, 0x26, 0x6e, 0x19, 0x4d, 0x2d, 0x32, 0xbb, 0x90, 0xd7, 0xd0, 0xe0, 0x49, 0x91,
	0xe0, 0x78, 0x9d, 0xd1, 0xd3, 0xc8, 0xbd, 0x53, 0xf4, 0xc7, 0x05, 0xd1, 0x79, 0x52, 0x24, 0xd5,
	0xb9, 0x36, 0x9d, 0xe1, 0xda, 0xfb, 0xea, 0x41, 0xc3, 0x06, 0xc8, 0x23, 0xf0, 0x25, 0x77, 0x97,
	0x37, 0x8d, 0xa6, 0xbe, 0xe4, 0xcc, 0x97, 0x9c, 0xbc, 0x04, 0x74, 0x33, 0x9e, 0xaa, 0x6c, 0x26,
	0xef, 0x1a, 0x38, 0x30, 0x9a, 0x6e, 0xcb, 0x0c, 0x2c, 0x9c, 0xe1, 0x9e, 0x3c, 0x83, 0xb6, 0xc8,
	0x78, 0x5c, 0xc8, 0x54, 0x38, 0xcb, 0xf7, 0x8c, 0xa6, 0xbf, 0x35, 0xd6, 0x12, 0x19, 0x7f, 0x2f,
	0x53, 0x61, 0x9f, 0x73, 0x5a, 0xf5, 0x57, 0x25, 0x57, 0x86, 0xe3, 0x73, 0x6e, 0xeb, 0xac, 0xe3,
	0xc8, 0x16, 0x8d, 0xce, 0xa1, 0x61, 0x07, 0x23, 0x6f, 0xa0, 0xe5, 0x64, 0xf2, 0xf8, 0xdf, 0x23,
	0xdf, 0xf4, 0x82, 0xff, 0x79, 0x31, 0x3e, 0xfa, 0xbe, 0x0e, 0xbd, 0xdb, 0x75, 0xe8, 0xfd, 0x5c,
	0x87, 0xde, 0xe7, 0x4d, 0x58, 0xbb, 0xdd, 0x84, 0xb5, 0x1f, 0x9b, 0xb0, 0xf6, 0xc1, 0x2f, 0x87,
	0x93, 0x26, 0xfe, 0xb9, 0xa7, 0xbf, 0x02, 0x00, 0x00, 0xff, 0xff, 0xdb, 0x2a, 0xa2, 0xe7, 0x02,
	0x03, 0x00, 0x00,
}
