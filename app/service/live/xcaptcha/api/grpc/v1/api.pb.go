// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: app/service/live/xcaptcha/api/grpc/v1/api.proto

package v1

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type XCreateCaptchaReq struct {
	Type                 int64    `protobuf:"varint,1,opt,name=type,proto3" json:"type,omitempty" form:"type"`
	ClientType           string   `protobuf:"bytes,2,opt,name=client_type,json=clientType,proto3" json:"client_type,omitempty" form:"client_type"`
	Height               int64    `protobuf:"varint,3,opt,name=height,proto3" json:"height,omitempty" form:"height"`
	Width                int64    `protobuf:"varint,4,opt,name=width,proto3" json:"width,omitempty" form:"width"`
	Uid                  int64    `protobuf:"varint,5,opt,name=uid,proto3" json:"uid,omitempty" form:"uid"`
	ClientIp             string   `protobuf:"bytes,6,opt,name=client_ip,json=clientIp,proto3" json:"client_ip,omitempty" form:"client_ip"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *XCreateCaptchaReq) Reset()         { *m = XCreateCaptchaReq{} }
func (m *XCreateCaptchaReq) String() string { return proto.CompactTextString(m) }
func (*XCreateCaptchaReq) ProtoMessage()    {}
func (*XCreateCaptchaReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_f738d198e275b8db, []int{0}
}
func (m *XCreateCaptchaReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *XCreateCaptchaReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_XCreateCaptchaReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *XCreateCaptchaReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_XCreateCaptchaReq.Merge(dst, src)
}
func (m *XCreateCaptchaReq) XXX_Size() int {
	return m.Size()
}
func (m *XCreateCaptchaReq) XXX_DiscardUnknown() {
	xxx_messageInfo_XCreateCaptchaReq.DiscardUnknown(m)
}

var xxx_messageInfo_XCreateCaptchaReq proto.InternalMessageInfo

func (m *XCreateCaptchaReq) GetType() int64 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *XCreateCaptchaReq) GetClientType() string {
	if m != nil {
		return m.ClientType
	}
	return ""
}

func (m *XCreateCaptchaReq) GetHeight() int64 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *XCreateCaptchaReq) GetWidth() int64 {
	if m != nil {
		return m.Width
	}
	return 0
}

func (m *XCreateCaptchaReq) GetUid() int64 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *XCreateCaptchaReq) GetClientIp() string {
	if m != nil {
		return m.ClientIp
	}
	return ""
}

type XCreateCaptchaResp struct {
	Type                 int64    `protobuf:"varint,1,opt,name=type,proto3" json:"type"`
	Geetest              *GeeTest `protobuf:"bytes,2,opt,name=geetest" json:"geetest"`
	Image                *Image   `protobuf:"bytes,3,opt,name=image" json:"image"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *XCreateCaptchaResp) Reset()         { *m = XCreateCaptchaResp{} }
func (m *XCreateCaptchaResp) String() string { return proto.CompactTextString(m) }
func (*XCreateCaptchaResp) ProtoMessage()    {}
func (*XCreateCaptchaResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_f738d198e275b8db, []int{1}
}
func (m *XCreateCaptchaResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *XCreateCaptchaResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_XCreateCaptchaResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *XCreateCaptchaResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_XCreateCaptchaResp.Merge(dst, src)
}
func (m *XCreateCaptchaResp) XXX_Size() int {
	return m.Size()
}
func (m *XCreateCaptchaResp) XXX_DiscardUnknown() {
	xxx_messageInfo_XCreateCaptchaResp.DiscardUnknown(m)
}

var xxx_messageInfo_XCreateCaptchaResp proto.InternalMessageInfo

func (m *XCreateCaptchaResp) GetType() int64 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *XCreateCaptchaResp) GetGeetest() *GeeTest {
	if m != nil {
		return m.Geetest
	}
	return nil
}

func (m *XCreateCaptchaResp) GetImage() *Image {
	if m != nil {
		return m.Image
	}
	return nil
}

type GeeTest struct {
	Gt                   string   `protobuf:"bytes,1,opt,name=gt,proto3" json:"gt"`
	Challenge            string   `protobuf:"bytes,2,opt,name=challenge,proto3" json:"challenge"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GeeTest) Reset()         { *m = GeeTest{} }
func (m *GeeTest) String() string { return proto.CompactTextString(m) }
func (*GeeTest) ProtoMessage()    {}
func (*GeeTest) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_f738d198e275b8db, []int{2}
}
func (m *GeeTest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GeeTest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GeeTest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *GeeTest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GeeTest.Merge(dst, src)
}
func (m *GeeTest) XXX_Size() int {
	return m.Size()
}
func (m *GeeTest) XXX_DiscardUnknown() {
	xxx_messageInfo_GeeTest.DiscardUnknown(m)
}

var xxx_messageInfo_GeeTest proto.InternalMessageInfo

func (m *GeeTest) GetGt() string {
	if m != nil {
		return m.Gt
	}
	return ""
}

func (m *GeeTest) GetChallenge() string {
	if m != nil {
		return m.Challenge
	}
	return ""
}

type Image struct {
	Tips                 string   `protobuf:"bytes,1,opt,name=tips,proto3" json:"tips"`
	Token                string   `protobuf:"bytes,2,opt,name=token,proto3" json:"token"`
	Content              string   `protobuf:"bytes,3,opt,name=content,proto3" json:"content"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Image) Reset()         { *m = Image{} }
func (m *Image) String() string { return proto.CompactTextString(m) }
func (*Image) ProtoMessage()    {}
func (*Image) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_f738d198e275b8db, []int{3}
}
func (m *Image) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Image) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Image.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Image) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Image.Merge(dst, src)
}
func (m *Image) XXX_Size() int {
	return m.Size()
}
func (m *Image) XXX_DiscardUnknown() {
	xxx_messageInfo_Image.DiscardUnknown(m)
}

var xxx_messageInfo_Image proto.InternalMessageInfo

func (m *Image) GetTips() string {
	if m != nil {
		return m.Tips
	}
	return ""
}

func (m *Image) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *Image) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

type XVerifyReq struct {
	XAnti                string   `protobuf:"bytes,1,opt,name=_anti,json=Anti,proto3" json:"_anti,omitempty" form:"_anti" validate:"required"`
	Uid                  int64    `protobuf:"varint,2,opt,name=uid,proto3" json:"uid,omitempty" form:"uid" validate:"required"`
	ClientIp             string   `protobuf:"bytes,3,opt,name=client_ip,json=clientIp,proto3" json:"client_ip,omitempty" form:"client_ip"`
	RoomId               int64    `protobuf:"varint,4,opt,name=room_id,json=roomId,proto3" json:"room_id,omitempty" form:"room_id"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *XVerifyReq) Reset()         { *m = XVerifyReq{} }
func (m *XVerifyReq) String() string { return proto.CompactTextString(m) }
func (*XVerifyReq) ProtoMessage()    {}
func (*XVerifyReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_f738d198e275b8db, []int{4}
}
func (m *XVerifyReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *XVerifyReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_XVerifyReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *XVerifyReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_XVerifyReq.Merge(dst, src)
}
func (m *XVerifyReq) XXX_Size() int {
	return m.Size()
}
func (m *XVerifyReq) XXX_DiscardUnknown() {
	xxx_messageInfo_XVerifyReq.DiscardUnknown(m)
}

var xxx_messageInfo_XVerifyReq proto.InternalMessageInfo

func (m *XVerifyReq) GetXAnti() string {
	if m != nil {
		return m.XAnti
	}
	return ""
}

func (m *XVerifyReq) GetUid() int64 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *XVerifyReq) GetClientIp() string {
	if m != nil {
		return m.ClientIp
	}
	return ""
}

func (m *XVerifyReq) GetRoomId() int64 {
	if m != nil {
		return m.RoomId
	}
	return 0
}

type XVerifyResp struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *XVerifyResp) Reset()         { *m = XVerifyResp{} }
func (m *XVerifyResp) String() string { return proto.CompactTextString(m) }
func (*XVerifyResp) ProtoMessage()    {}
func (*XVerifyResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_f738d198e275b8db, []int{5}
}
func (m *XVerifyResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *XVerifyResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_XVerifyResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *XVerifyResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_XVerifyResp.Merge(dst, src)
}
func (m *XVerifyResp) XXX_Size() int {
	return m.Size()
}
func (m *XVerifyResp) XXX_DiscardUnknown() {
	xxx_messageInfo_XVerifyResp.DiscardUnknown(m)
}

var xxx_messageInfo_XVerifyResp proto.InternalMessageInfo

type CheckReq struct {
	Anti                 string   `protobuf:"bytes,1,opt,name=anti,proto3" json:"anti,omitempty" form:"anti" validate:"required"`
	Uid                  int64    `protobuf:"varint,2,opt,name=uid,proto3" json:"uid,omitempty" form:"uid" validate:"required"`
	ClientIp             string   `protobuf:"bytes,3,opt,name=client_ip,json=clientIp,proto3" json:"client_ip,omitempty" form:"client_ip"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CheckReq) Reset()         { *m = CheckReq{} }
func (m *CheckReq) String() string { return proto.CompactTextString(m) }
func (*CheckReq) ProtoMessage()    {}
func (*CheckReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_f738d198e275b8db, []int{6}
}
func (m *CheckReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CheckReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CheckReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *CheckReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CheckReq.Merge(dst, src)
}
func (m *CheckReq) XXX_Size() int {
	return m.Size()
}
func (m *CheckReq) XXX_DiscardUnknown() {
	xxx_messageInfo_CheckReq.DiscardUnknown(m)
}

var xxx_messageInfo_CheckReq proto.InternalMessageInfo

func (m *CheckReq) GetAnti() string {
	if m != nil {
		return m.Anti
	}
	return ""
}

func (m *CheckReq) GetUid() int64 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *CheckReq) GetClientIp() string {
	if m != nil {
		return m.ClientIp
	}
	return ""
}

type CheckResp struct {
	Type                 int64    `protobuf:"varint,1,opt,name=type,proto3" json:"type"`
	Token                string   `protobuf:"bytes,2,opt,name=token,proto3" json:"token"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CheckResp) Reset()         { *m = CheckResp{} }
func (m *CheckResp) String() string { return proto.CompactTextString(m) }
func (*CheckResp) ProtoMessage()    {}
func (*CheckResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_f738d198e275b8db, []int{7}
}
func (m *CheckResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CheckResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CheckResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *CheckResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CheckResp.Merge(dst, src)
}
func (m *CheckResp) XXX_Size() int {
	return m.Size()
}
func (m *CheckResp) XXX_DiscardUnknown() {
	xxx_messageInfo_CheckResp.DiscardUnknown(m)
}

var xxx_messageInfo_CheckResp proto.InternalMessageInfo

func (m *CheckResp) GetType() int64 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *CheckResp) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func init() {
	proto.RegisterType((*XCreateCaptchaReq)(nil), "live.xcaptcha.v1.XCreateCaptchaReq")
	proto.RegisterType((*XCreateCaptchaResp)(nil), "live.xcaptcha.v1.XCreateCaptchaResp")
	proto.RegisterType((*GeeTest)(nil), "live.xcaptcha.v1.GeeTest")
	proto.RegisterType((*Image)(nil), "live.xcaptcha.v1.Image")
	proto.RegisterType((*XVerifyReq)(nil), "live.xcaptcha.v1.XVerifyReq")
	proto.RegisterType((*XVerifyResp)(nil), "live.xcaptcha.v1.XVerifyResp")
	proto.RegisterType((*CheckReq)(nil), "live.xcaptcha.v1.CheckReq")
	proto.RegisterType((*CheckResp)(nil), "live.xcaptcha.v1.CheckResp")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// XCaptchaClient is the client API for XCaptcha service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type XCaptchaClient interface {
	// 创建验证码
	Create(ctx context.Context, in *XCreateCaptchaReq, opts ...grpc.CallOption) (*XCreateCaptchaResp, error)
	// 二次校验checkToken  `internal:"true"`
	Verify(ctx context.Context, in *XVerifyReq, opts ...grpc.CallOption) (*XVerifyResp, error)
	// 验证码校验 `internal:"true"`
	Check(ctx context.Context, in *CheckReq, opts ...grpc.CallOption) (*CheckResp, error)
}

type xCaptchaClient struct {
	cc *grpc.ClientConn
}

func NewXCaptchaClient(cc *grpc.ClientConn) XCaptchaClient {
	return &xCaptchaClient{cc}
}

func (c *xCaptchaClient) Create(ctx context.Context, in *XCreateCaptchaReq, opts ...grpc.CallOption) (*XCreateCaptchaResp, error) {
	out := new(XCreateCaptchaResp)
	err := c.cc.Invoke(ctx, "/live.xcaptcha.v1.XCaptcha/create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *xCaptchaClient) Verify(ctx context.Context, in *XVerifyReq, opts ...grpc.CallOption) (*XVerifyResp, error) {
	out := new(XVerifyResp)
	err := c.cc.Invoke(ctx, "/live.xcaptcha.v1.XCaptcha/verify", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *xCaptchaClient) Check(ctx context.Context, in *CheckReq, opts ...grpc.CallOption) (*CheckResp, error) {
	out := new(CheckResp)
	err := c.cc.Invoke(ctx, "/live.xcaptcha.v1.XCaptcha/check", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// XCaptchaServer is the server API for XCaptcha service.
type XCaptchaServer interface {
	// 创建验证码
	Create(context.Context, *XCreateCaptchaReq) (*XCreateCaptchaResp, error)
	// 二次校验checkToken  `internal:"true"`
	Verify(context.Context, *XVerifyReq) (*XVerifyResp, error)
	// 验证码校验 `internal:"true"`
	Check(context.Context, *CheckReq) (*CheckResp, error)
}

func RegisterXCaptchaServer(s *grpc.Server, srv XCaptchaServer) {
	s.RegisterService(&_XCaptcha_serviceDesc, srv)
}

func _XCaptcha_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(XCreateCaptchaReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XCaptchaServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/live.xcaptcha.v1.XCaptcha/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XCaptchaServer).Create(ctx, req.(*XCreateCaptchaReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _XCaptcha_Verify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(XVerifyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XCaptchaServer).Verify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/live.xcaptcha.v1.XCaptcha/Verify",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XCaptchaServer).Verify(ctx, req.(*XVerifyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _XCaptcha_Check_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XCaptchaServer).Check(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/live.xcaptcha.v1.XCaptcha/Check",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XCaptchaServer).Check(ctx, req.(*CheckReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _XCaptcha_serviceDesc = grpc.ServiceDesc{
	ServiceName: "live.xcaptcha.v1.XCaptcha",
	HandlerType: (*XCaptchaServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "create",
			Handler:    _XCaptcha_Create_Handler,
		},
		{
			MethodName: "verify",
			Handler:    _XCaptcha_Verify_Handler,
		},
		{
			MethodName: "check",
			Handler:    _XCaptcha_Check_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "app/service/live/xcaptcha/api/grpc/v1/api.proto",
}

func (m *XCreateCaptchaReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *XCreateCaptchaReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Type != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Type))
	}
	if len(m.ClientType) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.ClientType)))
		i += copy(dAtA[i:], m.ClientType)
	}
	if m.Height != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Height))
	}
	if m.Width != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Width))
	}
	if m.Uid != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Uid))
	}
	if len(m.ClientIp) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.ClientIp)))
		i += copy(dAtA[i:], m.ClientIp)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *XCreateCaptchaResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *XCreateCaptchaResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Type != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Type))
	}
	if m.Geetest != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Geetest.Size()))
		n1, err := m.Geetest.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.Image != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Image.Size()))
		n2, err := m.Image.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GeeTest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GeeTest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Gt) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Gt)))
		i += copy(dAtA[i:], m.Gt)
	}
	if len(m.Challenge) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Challenge)))
		i += copy(dAtA[i:], m.Challenge)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Image) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Image) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Tips) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Tips)))
		i += copy(dAtA[i:], m.Tips)
	}
	if len(m.Token) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Token)))
		i += copy(dAtA[i:], m.Token)
	}
	if len(m.Content) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Content)))
		i += copy(dAtA[i:], m.Content)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *XVerifyReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *XVerifyReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.XAnti) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.XAnti)))
		i += copy(dAtA[i:], m.XAnti)
	}
	if m.Uid != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Uid))
	}
	if len(m.ClientIp) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.ClientIp)))
		i += copy(dAtA[i:], m.ClientIp)
	}
	if m.RoomId != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.RoomId))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *XVerifyResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *XVerifyResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *CheckReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CheckReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Anti) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Anti)))
		i += copy(dAtA[i:], m.Anti)
	}
	if m.Uid != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Uid))
	}
	if len(m.ClientIp) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.ClientIp)))
		i += copy(dAtA[i:], m.ClientIp)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *CheckResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CheckResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Type != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Type))
	}
	if len(m.Token) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Token)))
		i += copy(dAtA[i:], m.Token)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintApi(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *XCreateCaptchaReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovApi(uint64(m.Type))
	}
	l = len(m.ClientType)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Height != 0 {
		n += 1 + sovApi(uint64(m.Height))
	}
	if m.Width != 0 {
		n += 1 + sovApi(uint64(m.Width))
	}
	if m.Uid != 0 {
		n += 1 + sovApi(uint64(m.Uid))
	}
	l = len(m.ClientIp)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *XCreateCaptchaResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovApi(uint64(m.Type))
	}
	if m.Geetest != nil {
		l = m.Geetest.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Image != nil {
		l = m.Image.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GeeTest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Gt)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Challenge)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Image) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Tips)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Token)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Content)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *XVerifyReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.XAnti)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Uid != 0 {
		n += 1 + sovApi(uint64(m.Uid))
	}
	l = len(m.ClientIp)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.RoomId != 0 {
		n += 1 + sovApi(uint64(m.RoomId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *XVerifyResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CheckReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Anti)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Uid != 0 {
		n += 1 + sovApi(uint64(m.Uid))
	}
	l = len(m.ClientIp)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CheckResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovApi(uint64(m.Type))
	}
	l = len(m.Token)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovApi(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozApi(x uint64) (n int) {
	return sovApi(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *XCreateCaptchaReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: XCreateCaptchaReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: XCreateCaptchaReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClientType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Width", wireType)
			}
			m.Width = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Width |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientIp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClientIp = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *XCreateCaptchaResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: XCreateCaptchaResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: XCreateCaptchaResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Geetest", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Geetest == nil {
				m.Geetest = &GeeTest{}
			}
			if err := m.Geetest.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Image", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Image == nil {
				m.Image = &Image{}
			}
			if err := m.Image.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GeeTest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GeeTest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GeeTest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Gt = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Challenge", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Challenge = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Image) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Image: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Image: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tips", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tips = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Content = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *XVerifyReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: XVerifyReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: XVerifyReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field XAnti", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.XAnti = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientIp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClientIp = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoomId", wireType)
			}
			m.RoomId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RoomId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *XVerifyResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: XVerifyResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: XVerifyResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CheckReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CheckReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CheckReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Anti", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Anti = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientIp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClientIp = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CheckResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CheckResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CheckResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipApi(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowApi
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowApi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowApi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthApi
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowApi
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipApi(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthApi = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowApi   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("app/service/live/xcaptcha/api/grpc/v1/api.proto", fileDescriptor_api_f738d198e275b8db)
}

var fileDescriptor_api_f738d198e275b8db = []byte{
	// 698 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x54, 0xcf, 0x6e, 0xd3, 0x4e,
	0x10, 0x96, 0xf3, 0x3f, 0x93, 0x5f, 0xfb, 0x4b, 0x57, 0xa8, 0x84, 0x50, 0xb2, 0xd1, 0xb6, 0xa0,
	0xa2, 0x8a, 0x58, 0x29, 0x48, 0x85, 0x9e, 0x4a, 0x2a, 0x84, 0xca, 0x81, 0xc3, 0x52, 0xa1, 0x8a,
	0x4b, 0xe5, 0x3a, 0x5b, 0x67, 0xd5, 0xc4, 0xde, 0xda, 0x1b, 0x43, 0x1f, 0x85, 0x77, 0x40, 0x3c,
	0x07, 0x47, 0x5e, 0x80, 0x15, 0xea, 0x09, 0xe5, 0xe8, 0x27, 0x40, 0xde, 0x75, 0xfa, 0x2f, 0xa5,
	0xe5, 0xc4, 0xc5, 0x9e, 0x9d, 0xf9, 0x66, 0x3c, 0xdf, 0xcc, 0xb7, 0x06, 0xdb, 0x11, 0xc2, 0x8e,
	0x58, 0x18, 0x73, 0x97, 0xd9, 0x43, 0x1e, 0x33, 0xfb, 0x93, 0xeb, 0x08, 0xe9, 0x0e, 0x1c, 0xdb,
	0x11, 0xdc, 0xf6, 0x42, 0xe1, 0xda, 0x71, 0x37, 0xb5, 0x3b, 0x22, 0x0c, 0x64, 0x80, 0xea, 0x29,
	0xa8, 0x33, 0x05, 0x75, 0xe2, 0x6e, 0xf3, 0x89, 0xc7, 0xe5, 0x60, 0x7c, 0xd0, 0x71, 0x83, 0x91,
	0xed, 0x05, 0x5e, 0x60, 0x6b, 0xe0, 0xc1, 0xf8, 0x50, 0x9f, 0xf4, 0x41, 0x5b, 0xa6, 0x00, 0xf9,
	0x9c, 0x83, 0x85, 0xbd, 0xed, 0x90, 0x39, 0x92, 0x6d, 0x9b, 0x22, 0x94, 0x1d, 0xa3, 0x65, 0x28,
	0xc8, 0x13, 0xc1, 0x1a, 0x56, 0xdb, 0x5a, 0xcd, 0xf7, 0xfe, 0x4f, 0x14, 0xae, 0x1d, 0x06, 0xe1,
	0x68, 0x93, 0xa4, 0x5e, 0x42, 0x75, 0x10, 0x6d, 0x40, 0xcd, 0x1d, 0x72, 0xe6, 0xcb, 0x7d, 0x8d,
	0xcd, 0xb5, 0xad, 0xd5, 0x6a, 0x6f, 0x31, 0x51, 0x18, 0x19, 0xec, 0x85, 0x20, 0xa1, 0x60, 0x4e,
	0xbb, 0x69, 0xe2, 0x63, 0x28, 0x0d, 0x18, 0xf7, 0x06, 0xb2, 0x91, 0xd7, 0xf5, 0x17, 0x12, 0x85,
	0xe7, 0x4c, 0x8e, 0xf1, 0x13, 0x9a, 0x01, 0xd0, 0x23, 0x28, 0x7e, 0xe4, 0x7d, 0x39, 0x68, 0x14,
	0x34, 0xb2, 0x9e, 0x28, 0xfc, 0x9f, 0x41, 0x6a, 0x37, 0xa1, 0x26, 0x8c, 0xda, 0x90, 0x1f, 0xf3,
	0x7e, 0xa3, 0xa8, 0x51, 0xf3, 0x89, 0xc2, 0x60, 0x50, 0x63, 0xde, 0x27, 0x34, 0x0d, 0xa1, 0x2e,
	0x54, 0xb3, 0x86, 0xb8, 0x68, 0x94, 0x74, 0xaf, 0x77, 0x12, 0x85, 0xeb, 0x97, 0x7a, 0xe5, 0x82,
	0xd0, 0x8a, 0xb1, 0x77, 0x04, 0xf9, 0x6a, 0x01, 0xba, 0x3a, 0x9b, 0x48, 0xa0, 0xa5, 0x4b, 0xc3,
	0xa9, 0x4c, 0x14, 0xd6, 0xe7, 0x6c, 0x2a, 0x5b, 0x50, 0xf6, 0x18, 0x93, 0x2c, 0x92, 0x7a, 0x22,
	0xb5, 0xf5, 0x7b, 0x9d, 0xab, 0x3b, 0xea, 0xbc, 0x66, 0x6c, 0x97, 0x45, 0xb2, 0x57, 0x9b, 0x28,
	0x3c, 0x45, 0xd3, 0xa9, 0x81, 0x9e, 0x43, 0x91, 0x8f, 0x1c, 0x8f, 0xe9, 0xe9, 0xd4, 0xd6, 0xef,
	0xce, 0xe6, 0xef, 0xa4, 0xe1, 0x5e, 0x75, 0xa2, 0xb0, 0x41, 0x52, 0xf3, 0x22, 0x6f, 0xa1, 0x9c,
	0x95, 0x46, 0x8b, 0x90, 0xf3, 0xa4, 0x6e, 0xb1, 0xda, 0x2b, 0x4d, 0x14, 0xce, 0x79, 0x92, 0xe6,
	0x3c, 0x89, 0xd6, 0xa0, 0xea, 0x0e, 0x9c, 0xe1, 0x90, 0xf9, 0xde, 0x74, 0x65, 0x73, 0x13, 0x85,
	0xcf, 0x9d, 0xf4, 0xdc, 0x24, 0x23, 0x28, 0xea, 0x4f, 0x69, 0xca, 0x5c, 0x44, 0x59, 0x3d, 0x43,
	0x99, 0x8b, 0x88, 0xea, 0x27, 0xc2, 0x50, 0x94, 0xc1, 0x11, 0xf3, 0xb3, 0x7a, 0xba, 0x2f, 0xed,
	0xa0, 0xe6, 0x85, 0x1e, 0x42, 0xd9, 0x0d, 0x7c, 0xc9, 0x7c, 0xb3, 0xf1, 0xaa, 0x21, 0x9e, 0xb9,
	0xe8, 0xd4, 0x20, 0x3f, 0x2c, 0x80, 0xbd, 0xf7, 0x2c, 0xe4, 0x87, 0x27, 0xa9, 0x08, 0x5f, 0x40,
	0x71, 0xdf, 0xf1, 0x25, 0xcf, 0xbe, 0xba, 0x92, 0x28, 0xdc, 0x36, 0xdb, 0xd2, 0x6e, 0xd2, 0x8e,
	0x9d, 0x21, 0xef, 0x3b, 0x92, 0x6d, 0x92, 0x90, 0x1d, 0x8f, 0x79, 0xc8, 0xfa, 0x84, 0x16, 0x5e,
	0xfa, 0x92, 0xa3, 0x67, 0x46, 0x0e, 0x39, 0xbd, 0x21, 0x92, 0x28, 0xdc, 0x3a, 0x97, 0xc3, 0xb5,
	0x69, 0xb3, 0x12, 0xc9, 0xff, 0x8d, 0x44, 0xd0, 0x1a, 0x94, 0xc3, 0x20, 0x18, 0xed, 0xf3, 0x7e,
	0xa6, 0x50, 0x94, 0x28, 0x3c, 0x6f, 0x12, 0xb2, 0x00, 0xa1, 0xa5, 0xd4, 0xda, 0xe9, 0x93, 0x39,
	0xa8, 0x9d, 0xd1, 0x8b, 0x04, 0xf9, 0x62, 0x41, 0x65, 0x7b, 0xc0, 0xdc, 0xa3, 0x94, 0xec, 0x06,
	0x14, 0x2e, 0x70, 0x5d, 0x4e, 0x14, 0xc6, 0xa6, 0xca, 0x0d, 0x54, 0x9d, 0x7f, 0x49, 0x95, 0xbc,
	0x81, 0x6a, 0xd6, 0xed, 0xad, 0x77, 0xe0, 0x36, 0x41, 0xac, 0xff, 0xb2, 0xa0, 0xb2, 0x97, 0xdd,
	0x29, 0xf4, 0x0e, 0x4a, 0xae, 0xbe, 0x64, 0x68, 0x79, 0x56, 0xea, 0x33, 0xff, 0xa6, 0xe6, 0xca,
	0xed, 0xa0, 0x48, 0xa0, 0x57, 0x50, 0x8a, 0xf5, 0xa8, 0xd1, 0xd2, 0x35, 0xf8, 0x33, 0x91, 0x35,
	0x1f, 0xdc, 0x10, 0x8d, 0x04, 0xda, 0x82, 0xa2, 0x9b, 0x92, 0x46, 0xcd, 0x59, 0xdc, 0x74, 0x77,
	0xcd, 0xfb, 0x7f, 0x8c, 0x45, 0xa2, 0x57, 0xff, 0x76, 0xda, 0xb2, 0xbe, 0x9f, 0xb6, 0xac, 0x9f,
	0xa7, 0x2d, 0xeb, 0x43, 0x2e, 0xee, 0x1e, 0x94, 0xf4, 0x9f, 0xf7, 0xe9, 0xef, 0x00, 0x00, 0x00,
	0xff, 0xff, 0x82, 0x35, 0xcb, 0xcc, 0xed, 0x05, 0x00, 0x00,
}
