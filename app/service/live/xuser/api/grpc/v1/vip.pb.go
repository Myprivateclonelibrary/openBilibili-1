// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: app/service/live/xuser/api/grpc/v1/vip.proto

package v1

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import grpc1 "go-common/app/service/live/xuser/api/grpc"
import _ "github.com/gogo/protobuf/gogoproto"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type UidReq struct {
	Uid                  int64    `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty" validate:"gt=0,required"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UidReq) Reset()         { *m = UidReq{} }
func (m *UidReq) String() string { return proto.CompactTextString(m) }
func (*UidReq) ProtoMessage()    {}
func (*UidReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_vip_104e2dab5f0482b7, []int{0}
}
func (m *UidReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UidReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UidReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *UidReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UidReq.Merge(dst, src)
}
func (m *UidReq) XXX_Size() int {
	return m.Size()
}
func (m *UidReq) XXX_DiscardUnknown() {
	xxx_messageInfo_UidReq.DiscardUnknown(m)
}

var xxx_messageInfo_UidReq proto.InternalMessageInfo

func (m *UidReq) GetUid() int64 {
	if m != nil {
		return m.Uid
	}
	return 0
}

type Info struct {
	Vip                  int      `protobuf:"varint,1,opt,name=vip,proto3,casttype=int" json:"vip"`
	Svip                 int      `protobuf:"varint,2,opt,name=svip,proto3,casttype=int" json:"svip"`
	VipTime              string   `protobuf:"bytes,3,opt,name=vip_time,json=vipTime,proto3" json:"vip_time"`
	SvipTime             string   `protobuf:"bytes,4,opt,name=svip_time,json=svipTime,proto3" json:"svip_time"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Info) Reset()         { *m = Info{} }
func (m *Info) String() string { return proto.CompactTextString(m) }
func (*Info) ProtoMessage()    {}
func (*Info) Descriptor() ([]byte, []int) {
	return fileDescriptor_vip_104e2dab5f0482b7, []int{1}
}
func (m *Info) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Info) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Info.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Info) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Info.Merge(dst, src)
}
func (m *Info) XXX_Size() int {
	return m.Size()
}
func (m *Info) XXX_DiscardUnknown() {
	xxx_messageInfo_Info.DiscardUnknown(m)
}

var xxx_messageInfo_Info proto.InternalMessageInfo

func (m *Info) GetVip() int {
	if m != nil {
		return m.Vip
	}
	return 0
}

func (m *Info) GetSvip() int {
	if m != nil {
		return m.Svip
	}
	return 0
}

func (m *Info) GetVipTime() string {
	if m != nil {
		return m.VipTime
	}
	return ""
}

func (m *Info) GetSvipTime() string {
	if m != nil {
		return m.SvipTime
	}
	return ""
}

type InfoReply struct {
	Info                 *Info    `protobuf:"bytes,1,opt,name=info" json:"info,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *InfoReply) Reset()         { *m = InfoReply{} }
func (m *InfoReply) String() string { return proto.CompactTextString(m) }
func (*InfoReply) ProtoMessage()    {}
func (*InfoReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_vip_104e2dab5f0482b7, []int{2}
}
func (m *InfoReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InfoReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InfoReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *InfoReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InfoReply.Merge(dst, src)
}
func (m *InfoReply) XXX_Size() int {
	return m.Size()
}
func (m *InfoReply) XXX_DiscardUnknown() {
	xxx_messageInfo_InfoReply.DiscardUnknown(m)
}

var xxx_messageInfo_InfoReply proto.InternalMessageInfo

func (m *InfoReply) GetInfo() *Info {
	if m != nil {
		return m.Info
	}
	return nil
}

type BuyReq struct {
	OrderId              string         `protobuf:"bytes,1,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty" validate:"required"`
	Uid                  int64          `protobuf:"varint,2,opt,name=uid,proto3" json:"uid,omitempty" validate:"gt=0,required"`
	GoodId               int            `protobuf:"varint,3,opt,name=good_id,json=goodId,proto3,casttype=int" json:"good_id,omitempty" validate:"gt=0,required"`
	GoodNum              int            `protobuf:"varint,4,opt,name=good_num,json=goodNum,proto3,casttype=int" json:"good_num,omitempty" validate:"gt=0,required"`
	Platform             grpc1.Platform `protobuf:"varint,5,opt,name=platform,proto3,enum=live.xuser.Platform" json:"platform,omitempty" validate:"required"`
	Source               string         `protobuf:"bytes,6,opt,name=source,proto3" json:"source,omitempty" validate:"required"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *BuyReq) Reset()         { *m = BuyReq{} }
func (m *BuyReq) String() string { return proto.CompactTextString(m) }
func (*BuyReq) ProtoMessage()    {}
func (*BuyReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_vip_104e2dab5f0482b7, []int{3}
}
func (m *BuyReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BuyReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BuyReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *BuyReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BuyReq.Merge(dst, src)
}
func (m *BuyReq) XXX_Size() int {
	return m.Size()
}
func (m *BuyReq) XXX_DiscardUnknown() {
	xxx_messageInfo_BuyReq.DiscardUnknown(m)
}

var xxx_messageInfo_BuyReq proto.InternalMessageInfo

func (m *BuyReq) GetOrderId() string {
	if m != nil {
		return m.OrderId
	}
	return ""
}

func (m *BuyReq) GetUid() int64 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *BuyReq) GetGoodId() int {
	if m != nil {
		return m.GoodId
	}
	return 0
}

func (m *BuyReq) GetGoodNum() int {
	if m != nil {
		return m.GoodNum
	}
	return 0
}

func (m *BuyReq) GetPlatform() grpc1.Platform {
	if m != nil {
		return m.Platform
	}
	return grpc1.Platform_UNKNOWN
}

func (m *BuyReq) GetSource() string {
	if m != nil {
		return m.Source
	}
	return ""
}

type BuyReply struct {
	Status               int      `protobuf:"varint,1,opt,name=status,proto3,casttype=int" json:"status"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BuyReply) Reset()         { *m = BuyReply{} }
func (m *BuyReply) String() string { return proto.CompactTextString(m) }
func (*BuyReply) ProtoMessage()    {}
func (*BuyReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_vip_104e2dab5f0482b7, []int{4}
}
func (m *BuyReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BuyReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BuyReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *BuyReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BuyReply.Merge(dst, src)
}
func (m *BuyReply) XXX_Size() int {
	return m.Size()
}
func (m *BuyReply) XXX_DiscardUnknown() {
	xxx_messageInfo_BuyReply.DiscardUnknown(m)
}

var xxx_messageInfo_BuyReply proto.InternalMessageInfo

func (m *BuyReply) GetStatus() int {
	if m != nil {
		return m.Status
	}
	return 0
}

func init() {
	proto.RegisterType((*UidReq)(nil), "live.xuser.v1.UidReq")
	proto.RegisterType((*Info)(nil), "live.xuser.v1.Info")
	proto.RegisterType((*InfoReply)(nil), "live.xuser.v1.InfoReply")
	proto.RegisterType((*BuyReq)(nil), "live.xuser.v1.BuyReq")
	proto.RegisterType((*BuyReply)(nil), "live.xuser.v1.BuyReply")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// VipClient is the client API for Vip service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type VipClient interface {
	// Info 返回用户vip信息
	Info(ctx context.Context, in *UidReq, opts ...grpc.CallOption) (*InfoReply, error)
	// Buy 购买月费/年费姥爷
	Buy(ctx context.Context, in *BuyReq, opts ...grpc.CallOption) (*BuyReply, error)
}

type vipClient struct {
	cc *grpc.ClientConn
}

func NewVipClient(cc *grpc.ClientConn) VipClient {
	return &vipClient{cc}
}

func (c *vipClient) Info(ctx context.Context, in *UidReq, opts ...grpc.CallOption) (*InfoReply, error) {
	out := new(InfoReply)
	err := c.cc.Invoke(ctx, "/live.xuser.v1.Vip/Info", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vipClient) Buy(ctx context.Context, in *BuyReq, opts ...grpc.CallOption) (*BuyReply, error) {
	out := new(BuyReply)
	err := c.cc.Invoke(ctx, "/live.xuser.v1.Vip/Buy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VipServer is the server API for Vip service.
type VipServer interface {
	// Info 返回用户vip信息
	Info(context.Context, *UidReq) (*InfoReply, error)
	// Buy 购买月费/年费姥爷
	Buy(context.Context, *BuyReq) (*BuyReply, error)
}

func RegisterVipServer(s *grpc.Server, srv VipServer) {
	s.RegisterService(&_Vip_serviceDesc, srv)
}

func _Vip_Info_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UidReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VipServer).Info(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/live.xuser.v1.Vip/Info",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VipServer).Info(ctx, req.(*UidReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Vip_Buy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BuyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VipServer).Buy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/live.xuser.v1.Vip/Buy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VipServer).Buy(ctx, req.(*BuyReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _Vip_serviceDesc = grpc.ServiceDesc{
	ServiceName: "live.xuser.v1.Vip",
	HandlerType: (*VipServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Info",
			Handler:    _Vip_Info_Handler,
		},
		{
			MethodName: "Buy",
			Handler:    _Vip_Buy_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "app/service/live/xuser/api/grpc/v1/vip.proto",
}

func (m *UidReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UidReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Uid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintVip(dAtA, i, uint64(m.Uid))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Info) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Info) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Vip != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintVip(dAtA, i, uint64(m.Vip))
	}
	if m.Svip != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintVip(dAtA, i, uint64(m.Svip))
	}
	if len(m.VipTime) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintVip(dAtA, i, uint64(len(m.VipTime)))
		i += copy(dAtA[i:], m.VipTime)
	}
	if len(m.SvipTime) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintVip(dAtA, i, uint64(len(m.SvipTime)))
		i += copy(dAtA[i:], m.SvipTime)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *InfoReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InfoReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Info != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintVip(dAtA, i, uint64(m.Info.Size()))
		n1, err := m.Info.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *BuyReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BuyReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.OrderId) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintVip(dAtA, i, uint64(len(m.OrderId)))
		i += copy(dAtA[i:], m.OrderId)
	}
	if m.Uid != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintVip(dAtA, i, uint64(m.Uid))
	}
	if m.GoodId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintVip(dAtA, i, uint64(m.GoodId))
	}
	if m.GoodNum != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintVip(dAtA, i, uint64(m.GoodNum))
	}
	if m.Platform != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintVip(dAtA, i, uint64(m.Platform))
	}
	if len(m.Source) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintVip(dAtA, i, uint64(len(m.Source)))
		i += copy(dAtA[i:], m.Source)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *BuyReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BuyReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Status != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintVip(dAtA, i, uint64(m.Status))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintVip(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *UidReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Uid != 0 {
		n += 1 + sovVip(uint64(m.Uid))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Info) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Vip != 0 {
		n += 1 + sovVip(uint64(m.Vip))
	}
	if m.Svip != 0 {
		n += 1 + sovVip(uint64(m.Svip))
	}
	l = len(m.VipTime)
	if l > 0 {
		n += 1 + l + sovVip(uint64(l))
	}
	l = len(m.SvipTime)
	if l > 0 {
		n += 1 + l + sovVip(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *InfoReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Info != nil {
		l = m.Info.Size()
		n += 1 + l + sovVip(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *BuyReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.OrderId)
	if l > 0 {
		n += 1 + l + sovVip(uint64(l))
	}
	if m.Uid != 0 {
		n += 1 + sovVip(uint64(m.Uid))
	}
	if m.GoodId != 0 {
		n += 1 + sovVip(uint64(m.GoodId))
	}
	if m.GoodNum != 0 {
		n += 1 + sovVip(uint64(m.GoodNum))
	}
	if m.Platform != 0 {
		n += 1 + sovVip(uint64(m.Platform))
	}
	l = len(m.Source)
	if l > 0 {
		n += 1 + l + sovVip(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *BuyReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Status != 0 {
		n += 1 + sovVip(uint64(m.Status))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovVip(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozVip(x uint64) (n int) {
	return sovVip(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *UidReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVip
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UidReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UidReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVip
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipVip(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVip
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Info) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVip
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Info: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Info: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vip", wireType)
			}
			m.Vip = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVip
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Vip |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Svip", wireType)
			}
			m.Svip = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVip
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Svip |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VipTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVip
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVip
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VipTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SvipTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVip
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVip
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SvipTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVip(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVip
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InfoReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVip
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InfoReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InfoReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Info", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVip
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVip
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Info == nil {
				m.Info = &Info{}
			}
			if err := m.Info.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVip(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVip
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BuyReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVip
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BuyReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BuyReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVip
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVip
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrderId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVip
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GoodId", wireType)
			}
			m.GoodId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVip
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GoodId |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GoodNum", wireType)
			}
			m.GoodNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVip
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GoodNum |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Platform", wireType)
			}
			m.Platform = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVip
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Platform |= (grpc1.Platform(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Source", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVip
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVip
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Source = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVip(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVip
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BuyReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVip
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BuyReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BuyReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVip
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipVip(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVip
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipVip(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowVip
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowVip
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowVip
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthVip
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowVip
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipVip(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthVip = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowVip   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("app/service/live/xuser/api/grpc/v1/vip.proto", fileDescriptor_vip_104e2dab5f0482b7)
}

var fileDescriptor_vip_104e2dab5f0482b7 = []byte{
	// 517 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x93, 0xcf, 0x6e, 0xd3, 0x40,
	0x10, 0x87, 0xe5, 0x38, 0x75, 0x9c, 0x81, 0x16, 0xd8, 0x82, 0x6a, 0x45, 0x28, 0x8e, 0xdc, 0x43,
	0x03, 0x14, 0x9b, 0x04, 0x2a, 0x10, 0x02, 0x0e, 0xbe, 0xe5, 0x82, 0x90, 0x05, 0x1c, 0xb8, 0x54,
	0x4e, 0xbc, 0x31, 0x2b, 0xc5, 0xd9, 0xad, 0xed, 0xb5, 0xc8, 0xeb, 0xf0, 0x34, 0x1c, 0x79, 0x02,
	0x0b, 0xe5, 0xc0, 0x21, 0xc7, 0x1e, 0x39, 0xa1, 0x1d, 0x3b, 0x09, 0x7f, 0x4a, 0xe9, 0xcd, 0x33,
	0xf9, 0x7e, 0x19, 0xef, 0x37, 0x6b, 0x38, 0x0e, 0x85, 0xf0, 0x32, 0x9a, 0x16, 0x6c, 0x42, 0xbd,
	0x19, 0x2b, 0xa8, 0xf7, 0x49, 0x66, 0x34, 0xf5, 0x42, 0xc1, 0xbc, 0x38, 0x15, 0x13, 0xaf, 0x18,
	0x78, 0x05, 0x13, 0xae, 0x48, 0x79, 0xce, 0xc9, 0xae, 0x22, 0x5c, 0x24, 0xdc, 0x62, 0xd0, 0x79,
	0x18, 0xb3, 0xfc, 0xa3, 0x1c, 0xbb, 0x13, 0x9e, 0x78, 0x31, 0x8f, 0xb9, 0x87, 0xd4, 0x58, 0x4e,
	0xb1, 0xc2, 0x02, 0x9f, 0xaa, 0x74, 0xe7, 0xc1, 0xff, 0x66, 0x55, 0x7f, 0x8c, 0xb0, 0xf3, 0x0c,
	0x8c, 0x77, 0x2c, 0x0a, 0xe8, 0x19, 0x71, 0x41, 0x97, 0x2c, 0xb2, 0xb4, 0x9e, 0xd6, 0xd7, 0xfd,
	0xbb, 0xe7, 0xa5, 0x6d, 0x15, 0xe1, 0x8c, 0x45, 0x61, 0x4e, 0x9f, 0x3b, 0x71, 0xfe, 0xf2, 0xd1,
	0x71, 0x4a, 0xcf, 0x24, 0x4b, 0x69, 0xe4, 0x04, 0x0a, 0x74, 0x3e, 0x6b, 0xd0, 0x1c, 0xcd, 0xa7,
	0x9c, 0xf4, 0x40, 0x2f, 0x98, 0xc0, 0xe0, 0x8e, 0xbf, 0xb7, 0x2a, 0x6d, 0x55, 0xfe, 0x28, 0x6d,
	0x9d, 0xcd, 0xf3, 0x40, 0x3d, 0x93, 0x43, 0x68, 0x66, 0x0a, 0x69, 0x20, 0x72, 0x63, 0x55, 0xda,
	0x58, 0xaf, 0x19, 0x2c, 0xc8, 0x11, 0x98, 0x05, 0x13, 0xa7, 0x39, 0x4b, 0xa8, 0xa5, 0xf7, 0xb4,
	0x7e, 0xdb, 0xbf, 0xbe, 0x2a, 0xed, 0x4d, 0x2f, 0x68, 0x15, 0x4c, 0xbc, 0x65, 0x09, 0x25, 0xf7,
	0xa1, 0x9d, 0x6d, 0xc8, 0x26, 0x92, 0xbb, 0xab, 0xd2, 0xde, 0x36, 0x03, 0x33, 0xab, 0x59, 0xe7,
	0x09, 0xb4, 0xd5, 0x3b, 0x06, 0x54, 0xcc, 0x16, 0xe4, 0x08, 0x9a, 0x6c, 0x3e, 0xe5, 0xf8, 0xa6,
	0xd7, 0x86, 0xfb, 0xee, 0x6f, 0x96, 0x5d, 0xe4, 0x10, 0x70, 0xbe, 0x37, 0xc0, 0xf0, 0xe5, 0x42,
	0x59, 0x19, 0x82, 0xc9, 0xd3, 0x88, 0xa6, 0xa7, 0xb5, 0x9a, 0xb6, 0x7f, 0x70, 0x5e, 0xda, 0xfb,
	0x5b, 0x35, 0x5b, 0x2b, 0x2d, 0x04, 0x47, 0xd1, 0xda, 0x64, 0xe3, 0x8a, 0x26, 0xc9, 0x0b, 0x68,
	0xc5, 0x9c, 0x47, 0x6a, 0x84, 0x8e, 0x86, 0x0e, 0x2f, 0xcb, 0xac, 0xad, 0x19, 0x2a, 0x33, 0x8a,
	0xc8, 0x2b, 0x30, 0x31, 0x3d, 0x97, 0x09, 0xda, 0xb8, 0x62, 0x1c, 0x47, 0xbe, 0x96, 0x09, 0x19,
	0x81, 0x29, 0x66, 0x61, 0x3e, 0xe5, 0x69, 0x62, 0xed, 0xf4, 0xb4, 0xfe, 0xde, 0xf0, 0xf6, 0xaf,
	0x66, 0xde, 0xd4, 0xbf, 0xfd, 0xfb, 0xdc, 0x9b, 0x38, 0xf1, 0xc0, 0xc8, 0xb8, 0x4c, 0x27, 0xd4,
	0x32, 0x2e, 0x57, 0x55, 0x63, 0xce, 0x09, 0x98, 0xe8, 0x59, 0x6d, 0xe7, 0x1e, 0x18, 0x59, 0x1e,
	0xe6, 0x32, 0xab, 0x6f, 0xd2, 0xad, 0x55, 0x69, 0xd7, 0x9d, 0xcd, 0x91, 0xab, 0x72, 0x28, 0x41,
	0x7f, 0xcf, 0x04, 0x79, 0x5a, 0x5f, 0xc0, 0x3b, 0x7f, 0x6c, 0xb2, 0xba, 0xd0, 0x1d, 0xeb, 0xa2,
	0x05, 0xe3, 0xa8, 0x13, 0xd0, 0x7d, 0xb9, 0xf8, 0x2b, 0x57, 0xad, 0xbc, 0x73, 0x70, 0x51, 0x5b,
	0xcc, 0x16, 0xfe, 0xcd, 0x2f, 0xcb, 0xae, 0xf6, 0x75, 0xd9, 0xd5, 0xbe, 0x2d, 0xbb, 0xda, 0x87,
	0x46, 0x31, 0x18, 0x1b, 0xf8, 0x11, 0x3d, 0xfe, 0x19, 0x00, 0x00, 0xff, 0xff, 0x1a, 0xc3, 0xe4,
	0x45, 0xdf, 0x03, 0x00, 0x00,
}
