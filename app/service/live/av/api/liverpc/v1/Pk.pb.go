// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: v1/Pk.proto

package v1

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type PkGetInfoByIdReq struct {
	// 会返回主播数据
	IsAnchor int64 `protobuf:"varint,1,opt,name=is_anchor,json=isAnchor,proto3" json:"is_anchor"`
	// 直播场次id
	PkId int64 `protobuf:"varint,2,opt,name=pk_id,json=pkId,proto3" json:"pk_id"`
	// 房间id   房间id （pk_id与room_id必传一个）
	RoomId int64 `protobuf:"varint,3,opt,name=room_id,json=roomId,proto3" json:"room_id"`
	// 来源：pc：表示PC端；pc_link：表示PC直播姬；ios：表示ios端；ios_link：表示ios_link端；android：安卓端；android_link：安卓link端；ipad：ipad；android_pad:安卓pad端；live_mng：表示live后台;vc_mng：表示vc后台;"
	Platform string `protobuf:"bytes,4,opt,name=platform,proto3" json:"platform"`
}

func (m *PkGetInfoByIdReq) Reset()         { *m = PkGetInfoByIdReq{} }
func (m *PkGetInfoByIdReq) String() string { return proto.CompactTextString(m) }
func (*PkGetInfoByIdReq) ProtoMessage()    {}
func (*PkGetInfoByIdReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_Pk_73bf1d6a8022969f, []int{0}
}
func (m *PkGetInfoByIdReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PkGetInfoByIdReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PkGetInfoByIdReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *PkGetInfoByIdReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PkGetInfoByIdReq.Merge(dst, src)
}
func (m *PkGetInfoByIdReq) XXX_Size() int {
	return m.Size()
}
func (m *PkGetInfoByIdReq) XXX_DiscardUnknown() {
	xxx_messageInfo_PkGetInfoByIdReq.DiscardUnknown(m)
}

var xxx_messageInfo_PkGetInfoByIdReq proto.InternalMessageInfo

func (m *PkGetInfoByIdReq) GetIsAnchor() int64 {
	if m != nil {
		return m.IsAnchor
	}
	return 0
}

func (m *PkGetInfoByIdReq) GetPkId() int64 {
	if m != nil {
		return m.PkId
	}
	return 0
}

func (m *PkGetInfoByIdReq) GetRoomId() int64 {
	if m != nil {
		return m.RoomId
	}
	return 0
}

func (m *PkGetInfoByIdReq) GetPlatform() string {
	if m != nil {
		return m.Platform
	}
	return ""
}

type PkGetInfoByIdResp struct {
	//
	Code int64 `protobuf:"varint,1,opt,name=code,proto3" json:"code"`
	//
	Msg string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg"`
	//
	Data *PkGetInfoByIdResp_Data `protobuf:"bytes,3,opt,name=data" json:"data"`
}

func (m *PkGetInfoByIdResp) Reset()         { *m = PkGetInfoByIdResp{} }
func (m *PkGetInfoByIdResp) String() string { return proto.CompactTextString(m) }
func (*PkGetInfoByIdResp) ProtoMessage()    {}
func (*PkGetInfoByIdResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_Pk_73bf1d6a8022969f, []int{1}
}
func (m *PkGetInfoByIdResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PkGetInfoByIdResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PkGetInfoByIdResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *PkGetInfoByIdResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PkGetInfoByIdResp.Merge(dst, src)
}
func (m *PkGetInfoByIdResp) XXX_Size() int {
	return m.Size()
}
func (m *PkGetInfoByIdResp) XXX_DiscardUnknown() {
	xxx_messageInfo_PkGetInfoByIdResp.DiscardUnknown(m)
}

var xxx_messageInfo_PkGetInfoByIdResp proto.InternalMessageInfo

func (m *PkGetInfoByIdResp) GetCode() int64 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *PkGetInfoByIdResp) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func (m *PkGetInfoByIdResp) GetData() *PkGetInfoByIdResp_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

type PkGetInfoByIdResp_Data struct {
	// 本场直播pk_id
	PkId int64 `protobuf:"varint,1,opt,name=pk_id,json=pkId,proto3" json:"pk_id"`
	// 发起方房间id
	InitId int64 `protobuf:"varint,2,opt,name=init_id,json=initId,proto3" json:"init_id"`
	// 匹配方房间id
	MatchId int64 `protobuf:"varint,3,opt,name=match_id,json=matchId,proto3" json:"match_id"`
	// pk预备发起时间
	PreTime int64 `protobuf:"varint,4,opt,name=pre_time,json=preTime,proto3" json:"pre_time"`
	// pk状态 0 匹配成功;1.pk准备中; 2.pk进行中; 3.惩罚中; 10.连麦正常结束; 11.pk中断,连麦结束, 12 连麦异常,连麦结束
	Status int64 `protobuf:"varint,5,opt,name=status,proto3" json:"status"`
	// pk话题
	PkTopic string `protobuf:"bytes,6,opt,name=pk_topic,json=pkTopic,proto3" json:"pk_topic"`
	// 惩罚话题
	PunishTopic string `protobuf:"bytes,7,opt,name=punish_topic,json=punishTopic,proto3" json:"punish_topic"`
}

func (m *PkGetInfoByIdResp_Data) Reset()         { *m = PkGetInfoByIdResp_Data{} }
func (m *PkGetInfoByIdResp_Data) String() string { return proto.CompactTextString(m) }
func (*PkGetInfoByIdResp_Data) ProtoMessage()    {}
func (*PkGetInfoByIdResp_Data) Descriptor() ([]byte, []int) {
	return fileDescriptor_Pk_73bf1d6a8022969f, []int{1, 0}
}
func (m *PkGetInfoByIdResp_Data) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PkGetInfoByIdResp_Data) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PkGetInfoByIdResp_Data.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *PkGetInfoByIdResp_Data) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PkGetInfoByIdResp_Data.Merge(dst, src)
}
func (m *PkGetInfoByIdResp_Data) XXX_Size() int {
	return m.Size()
}
func (m *PkGetInfoByIdResp_Data) XXX_DiscardUnknown() {
	xxx_messageInfo_PkGetInfoByIdResp_Data.DiscardUnknown(m)
}

var xxx_messageInfo_PkGetInfoByIdResp_Data proto.InternalMessageInfo

func (m *PkGetInfoByIdResp_Data) GetPkId() int64 {
	if m != nil {
		return m.PkId
	}
	return 0
}

func (m *PkGetInfoByIdResp_Data) GetInitId() int64 {
	if m != nil {
		return m.InitId
	}
	return 0
}

func (m *PkGetInfoByIdResp_Data) GetMatchId() int64 {
	if m != nil {
		return m.MatchId
	}
	return 0
}

func (m *PkGetInfoByIdResp_Data) GetPreTime() int64 {
	if m != nil {
		return m.PreTime
	}
	return 0
}

func (m *PkGetInfoByIdResp_Data) GetStatus() int64 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *PkGetInfoByIdResp_Data) GetPkTopic() string {
	if m != nil {
		return m.PkTopic
	}
	return ""
}

func (m *PkGetInfoByIdResp_Data) GetPunishTopic() string {
	if m != nil {
		return m.PunishTopic
	}
	return ""
}

type PkGetPkStatusReq struct {
	// 会返回主播数据
	IsAnchor int64 `protobuf:"varint,1,opt,name=is_anchor,json=isAnchor,proto3" json:"is_anchor"`
	// 直播场次id
	PkId int64 `protobuf:"varint,2,opt,name=pk_id,json=pkId,proto3" json:"pk_id"`
	// 房间id   房间id （pk_id与room_id必传一个）
	RoomId int64 `protobuf:"varint,3,opt,name=room_id,json=roomId,proto3" json:"room_id"`
	// 邀请id
	InviteId int64 `protobuf:"varint,4,opt,name=invite_id,json=inviteId,proto3" json:"invite_id"`
	// 来源：pc：表示PC端；pc_link：表示PC直播姬；ios：表示ios端；ios_link：表示ios_link端；android：安卓端；android_link：安卓link端；ipad：ipad；android_pad:安卓pad端；live_mng：表示live后台;vc_mng：表示vc后台;"
	Platform string `protobuf:"bytes,5,opt,name=platform,proto3" json:"platform"`
}

func (m *PkGetPkStatusReq) Reset()         { *m = PkGetPkStatusReq{} }
func (m *PkGetPkStatusReq) String() string { return proto.CompactTextString(m) }
func (*PkGetPkStatusReq) ProtoMessage()    {}
func (*PkGetPkStatusReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_Pk_73bf1d6a8022969f, []int{2}
}
func (m *PkGetPkStatusReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PkGetPkStatusReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PkGetPkStatusReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *PkGetPkStatusReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PkGetPkStatusReq.Merge(dst, src)
}
func (m *PkGetPkStatusReq) XXX_Size() int {
	return m.Size()
}
func (m *PkGetPkStatusReq) XXX_DiscardUnknown() {
	xxx_messageInfo_PkGetPkStatusReq.DiscardUnknown(m)
}

var xxx_messageInfo_PkGetPkStatusReq proto.InternalMessageInfo

func (m *PkGetPkStatusReq) GetIsAnchor() int64 {
	if m != nil {
		return m.IsAnchor
	}
	return 0
}

func (m *PkGetPkStatusReq) GetPkId() int64 {
	if m != nil {
		return m.PkId
	}
	return 0
}

func (m *PkGetPkStatusReq) GetRoomId() int64 {
	if m != nil {
		return m.RoomId
	}
	return 0
}

func (m *PkGetPkStatusReq) GetInviteId() int64 {
	if m != nil {
		return m.InviteId
	}
	return 0
}

func (m *PkGetPkStatusReq) GetPlatform() string {
	if m != nil {
		return m.Platform
	}
	return ""
}

type PkGetPkStatusResp struct {
	//
	Code int64 `protobuf:"varint,1,opt,name=code,proto3" json:"code"`
	//
	Msg string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg"`
	//
	Data *PkGetPkStatusResp_Data `protobuf:"bytes,3,opt,name=data" json:"data"`
}

func (m *PkGetPkStatusResp) Reset()         { *m = PkGetPkStatusResp{} }
func (m *PkGetPkStatusResp) String() string { return proto.CompactTextString(m) }
func (*PkGetPkStatusResp) ProtoMessage()    {}
func (*PkGetPkStatusResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_Pk_73bf1d6a8022969f, []int{3}
}
func (m *PkGetPkStatusResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PkGetPkStatusResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PkGetPkStatusResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *PkGetPkStatusResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PkGetPkStatusResp.Merge(dst, src)
}
func (m *PkGetPkStatusResp) XXX_Size() int {
	return m.Size()
}
func (m *PkGetPkStatusResp) XXX_DiscardUnknown() {
	xxx_messageInfo_PkGetPkStatusResp.DiscardUnknown(m)
}

var xxx_messageInfo_PkGetPkStatusResp proto.InternalMessageInfo

func (m *PkGetPkStatusResp) GetCode() int64 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *PkGetPkStatusResp) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func (m *PkGetPkStatusResp) GetData() *PkGetPkStatusResp_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

type PkGetPkStatusResp_Data struct {
	// 当前时间
	Timestamp int64 `protobuf:"varint,1,opt,name=timestamp,proto3" json:"timestamp"`
	// 本场直播pk_id
	PkId int64 `protobuf:"varint,2,opt,name=pk_id,json=pkId,proto3" json:"pk_id"`
	// pk状态 100 匹配成功;200.pk准备中; 300.pk进行中; 400惩罚中; 1000.连麦正常结束; 1100.pk中断,连麦结束, 1200，逃跑 1300 连麦异常,连麦结束
	PkStatus int64 `protobuf:"varint,3,opt,name=pk_status,json=pkStatus,proto3" json:"pk_status"`
	// 邀请id
	InviteId int64 `protobuf:"varint,4,opt,name=invite_id,json=inviteId,proto3" json:"invite_id"`
	// 100 排队中 200 邀请中 1000 同意邀请 1100 拒绝邀请 1200 取消邀请,1300 邀请异常（主播信息）
	InviteStatus int64 `protobuf:"varint,5,opt,name=invite_status,json=inviteStatus,proto3" json:"invite_status"`
}

func (m *PkGetPkStatusResp_Data) Reset()         { *m = PkGetPkStatusResp_Data{} }
func (m *PkGetPkStatusResp_Data) String() string { return proto.CompactTextString(m) }
func (*PkGetPkStatusResp_Data) ProtoMessage()    {}
func (*PkGetPkStatusResp_Data) Descriptor() ([]byte, []int) {
	return fileDescriptor_Pk_73bf1d6a8022969f, []int{3, 0}
}
func (m *PkGetPkStatusResp_Data) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PkGetPkStatusResp_Data) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PkGetPkStatusResp_Data.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *PkGetPkStatusResp_Data) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PkGetPkStatusResp_Data.Merge(dst, src)
}
func (m *PkGetPkStatusResp_Data) XXX_Size() int {
	return m.Size()
}
func (m *PkGetPkStatusResp_Data) XXX_DiscardUnknown() {
	xxx_messageInfo_PkGetPkStatusResp_Data.DiscardUnknown(m)
}

var xxx_messageInfo_PkGetPkStatusResp_Data proto.InternalMessageInfo

func (m *PkGetPkStatusResp_Data) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *PkGetPkStatusResp_Data) GetPkId() int64 {
	if m != nil {
		return m.PkId
	}
	return 0
}

func (m *PkGetPkStatusResp_Data) GetPkStatus() int64 {
	if m != nil {
		return m.PkStatus
	}
	return 0
}

func (m *PkGetPkStatusResp_Data) GetInviteId() int64 {
	if m != nil {
		return m.InviteId
	}
	return 0
}

func (m *PkGetPkStatusResp_Data) GetInviteStatus() int64 {
	if m != nil {
		return m.InviteStatus
	}
	return 0
}

type PkGetPkIdsByRoomIdsReq struct {
	// 房间ids
	RoomIds []int64 `protobuf:"varint,1,rep,packed,name=room_ids,json=roomIds" json:"room_ids"`
	// 来源：pc：表示PC端；pc_link：表示PC直播姬；ios：表示ios端；ios_link：表示ios_link端；android：安卓端；android_link：安卓link端；ipad：ipad；android_pad:安卓pad端；live_mng：表示live后台;vc_mng：表示vc后台;"
	Platform string `protobuf:"bytes,2,opt,name=platform,proto3" json:"platform"`
}

func (m *PkGetPkIdsByRoomIdsReq) Reset()         { *m = PkGetPkIdsByRoomIdsReq{} }
func (m *PkGetPkIdsByRoomIdsReq) String() string { return proto.CompactTextString(m) }
func (*PkGetPkIdsByRoomIdsReq) ProtoMessage()    {}
func (*PkGetPkIdsByRoomIdsReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_Pk_73bf1d6a8022969f, []int{4}
}
func (m *PkGetPkIdsByRoomIdsReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PkGetPkIdsByRoomIdsReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PkGetPkIdsByRoomIdsReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *PkGetPkIdsByRoomIdsReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PkGetPkIdsByRoomIdsReq.Merge(dst, src)
}
func (m *PkGetPkIdsByRoomIdsReq) XXX_Size() int {
	return m.Size()
}
func (m *PkGetPkIdsByRoomIdsReq) XXX_DiscardUnknown() {
	xxx_messageInfo_PkGetPkIdsByRoomIdsReq.DiscardUnknown(m)
}

var xxx_messageInfo_PkGetPkIdsByRoomIdsReq proto.InternalMessageInfo

func (m *PkGetPkIdsByRoomIdsReq) GetRoomIds() []int64 {
	if m != nil {
		return m.RoomIds
	}
	return nil
}

func (m *PkGetPkIdsByRoomIdsReq) GetPlatform() string {
	if m != nil {
		return m.Platform
	}
	return ""
}

type PkGetPkIdsByRoomIdsResp struct {
	//
	Code int64 `protobuf:"varint,1,opt,name=code,proto3" json:"code"`
	//
	Msg string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg"`
	//
	Data map[string]int64 `protobuf:"bytes,3,rep,name=data" json:"data" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (m *PkGetPkIdsByRoomIdsResp) Reset()         { *m = PkGetPkIdsByRoomIdsResp{} }
func (m *PkGetPkIdsByRoomIdsResp) String() string { return proto.CompactTextString(m) }
func (*PkGetPkIdsByRoomIdsResp) ProtoMessage()    {}
func (*PkGetPkIdsByRoomIdsResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_Pk_73bf1d6a8022969f, []int{5}
}
func (m *PkGetPkIdsByRoomIdsResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PkGetPkIdsByRoomIdsResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PkGetPkIdsByRoomIdsResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *PkGetPkIdsByRoomIdsResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PkGetPkIdsByRoomIdsResp.Merge(dst, src)
}
func (m *PkGetPkIdsByRoomIdsResp) XXX_Size() int {
	return m.Size()
}
func (m *PkGetPkIdsByRoomIdsResp) XXX_DiscardUnknown() {
	xxx_messageInfo_PkGetPkIdsByRoomIdsResp.DiscardUnknown(m)
}

var xxx_messageInfo_PkGetPkIdsByRoomIdsResp proto.InternalMessageInfo

func (m *PkGetPkIdsByRoomIdsResp) GetCode() int64 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *PkGetPkIdsByRoomIdsResp) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func (m *PkGetPkIdsByRoomIdsResp) GetData() map[string]int64 {
	if m != nil {
		return m.Data
	}
	return nil
}

func init() {
	proto.RegisterType((*PkGetInfoByIdReq)(nil), "av.v1.PkGetInfoByIdReq")
	proto.RegisterType((*PkGetInfoByIdResp)(nil), "av.v1.PkGetInfoByIdResp")
	proto.RegisterType((*PkGetInfoByIdResp_Data)(nil), "av.v1.PkGetInfoByIdResp.Data")
	proto.RegisterType((*PkGetPkStatusReq)(nil), "av.v1.PkGetPkStatusReq")
	proto.RegisterType((*PkGetPkStatusResp)(nil), "av.v1.PkGetPkStatusResp")
	proto.RegisterType((*PkGetPkStatusResp_Data)(nil), "av.v1.PkGetPkStatusResp.Data")
	proto.RegisterType((*PkGetPkIdsByRoomIdsReq)(nil), "av.v1.PkGetPkIdsByRoomIdsReq")
	proto.RegisterType((*PkGetPkIdsByRoomIdsResp)(nil), "av.v1.PkGetPkIdsByRoomIdsResp")
	proto.RegisterMapType((map[string]int64)(nil), "av.v1.PkGetPkIdsByRoomIdsResp.DataEntry")
}
func (m *PkGetInfoByIdReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PkGetInfoByIdReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.IsAnchor != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPk(dAtA, i, uint64(m.IsAnchor))
	}
	if m.PkId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPk(dAtA, i, uint64(m.PkId))
	}
	if m.RoomId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintPk(dAtA, i, uint64(m.RoomId))
	}
	if len(m.Platform) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintPk(dAtA, i, uint64(len(m.Platform)))
		i += copy(dAtA[i:], m.Platform)
	}
	return i, nil
}

func (m *PkGetInfoByIdResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PkGetInfoByIdResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPk(dAtA, i, uint64(m.Code))
	}
	if len(m.Msg) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintPk(dAtA, i, uint64(len(m.Msg)))
		i += copy(dAtA[i:], m.Msg)
	}
	if m.Data != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintPk(dAtA, i, uint64(m.Data.Size()))
		n1, err := m.Data.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	return i, nil
}

func (m *PkGetInfoByIdResp_Data) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PkGetInfoByIdResp_Data) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.PkId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPk(dAtA, i, uint64(m.PkId))
	}
	if m.InitId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPk(dAtA, i, uint64(m.InitId))
	}
	if m.MatchId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintPk(dAtA, i, uint64(m.MatchId))
	}
	if m.PreTime != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintPk(dAtA, i, uint64(m.PreTime))
	}
	if m.Status != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintPk(dAtA, i, uint64(m.Status))
	}
	if len(m.PkTopic) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintPk(dAtA, i, uint64(len(m.PkTopic)))
		i += copy(dAtA[i:], m.PkTopic)
	}
	if len(m.PunishTopic) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintPk(dAtA, i, uint64(len(m.PunishTopic)))
		i += copy(dAtA[i:], m.PunishTopic)
	}
	return i, nil
}

func (m *PkGetPkStatusReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PkGetPkStatusReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.IsAnchor != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPk(dAtA, i, uint64(m.IsAnchor))
	}
	if m.PkId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPk(dAtA, i, uint64(m.PkId))
	}
	if m.RoomId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintPk(dAtA, i, uint64(m.RoomId))
	}
	if m.InviteId != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintPk(dAtA, i, uint64(m.InviteId))
	}
	if len(m.Platform) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintPk(dAtA, i, uint64(len(m.Platform)))
		i += copy(dAtA[i:], m.Platform)
	}
	return i, nil
}

func (m *PkGetPkStatusResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PkGetPkStatusResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPk(dAtA, i, uint64(m.Code))
	}
	if len(m.Msg) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintPk(dAtA, i, uint64(len(m.Msg)))
		i += copy(dAtA[i:], m.Msg)
	}
	if m.Data != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintPk(dAtA, i, uint64(m.Data.Size()))
		n2, err := m.Data.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	return i, nil
}

func (m *PkGetPkStatusResp_Data) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PkGetPkStatusResp_Data) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Timestamp != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPk(dAtA, i, uint64(m.Timestamp))
	}
	if m.PkId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPk(dAtA, i, uint64(m.PkId))
	}
	if m.PkStatus != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintPk(dAtA, i, uint64(m.PkStatus))
	}
	if m.InviteId != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintPk(dAtA, i, uint64(m.InviteId))
	}
	if m.InviteStatus != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintPk(dAtA, i, uint64(m.InviteStatus))
	}
	return i, nil
}

func (m *PkGetPkIdsByRoomIdsReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PkGetPkIdsByRoomIdsReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.RoomIds) > 0 {
		dAtA4 := make([]byte, len(m.RoomIds)*10)
		var j3 int
		for _, num1 := range m.RoomIds {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA4[j3] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j3++
			}
			dAtA4[j3] = uint8(num)
			j3++
		}
		dAtA[i] = 0xa
		i++
		i = encodeVarintPk(dAtA, i, uint64(j3))
		i += copy(dAtA[i:], dAtA4[:j3])
	}
	if len(m.Platform) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintPk(dAtA, i, uint64(len(m.Platform)))
		i += copy(dAtA[i:], m.Platform)
	}
	return i, nil
}

func (m *PkGetPkIdsByRoomIdsResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PkGetPkIdsByRoomIdsResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPk(dAtA, i, uint64(m.Code))
	}
	if len(m.Msg) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintPk(dAtA, i, uint64(len(m.Msg)))
		i += copy(dAtA[i:], m.Msg)
	}
	if len(m.Data) > 0 {
		for k, _ := range m.Data {
			dAtA[i] = 0x1a
			i++
			v := m.Data[k]
			mapSize := 1 + len(k) + sovPk(uint64(len(k))) + 1 + sovPk(uint64(v))
			i = encodeVarintPk(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintPk(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			dAtA[i] = 0x10
			i++
			i = encodeVarintPk(dAtA, i, uint64(v))
		}
	}
	return i, nil
}

func encodeVarintPk(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *PkGetInfoByIdReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IsAnchor != 0 {
		n += 1 + sovPk(uint64(m.IsAnchor))
	}
	if m.PkId != 0 {
		n += 1 + sovPk(uint64(m.PkId))
	}
	if m.RoomId != 0 {
		n += 1 + sovPk(uint64(m.RoomId))
	}
	l = len(m.Platform)
	if l > 0 {
		n += 1 + l + sovPk(uint64(l))
	}
	return n
}

func (m *PkGetInfoByIdResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovPk(uint64(m.Code))
	}
	l = len(m.Msg)
	if l > 0 {
		n += 1 + l + sovPk(uint64(l))
	}
	if m.Data != nil {
		l = m.Data.Size()
		n += 1 + l + sovPk(uint64(l))
	}
	return n
}

func (m *PkGetInfoByIdResp_Data) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PkId != 0 {
		n += 1 + sovPk(uint64(m.PkId))
	}
	if m.InitId != 0 {
		n += 1 + sovPk(uint64(m.InitId))
	}
	if m.MatchId != 0 {
		n += 1 + sovPk(uint64(m.MatchId))
	}
	if m.PreTime != 0 {
		n += 1 + sovPk(uint64(m.PreTime))
	}
	if m.Status != 0 {
		n += 1 + sovPk(uint64(m.Status))
	}
	l = len(m.PkTopic)
	if l > 0 {
		n += 1 + l + sovPk(uint64(l))
	}
	l = len(m.PunishTopic)
	if l > 0 {
		n += 1 + l + sovPk(uint64(l))
	}
	return n
}

func (m *PkGetPkStatusReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IsAnchor != 0 {
		n += 1 + sovPk(uint64(m.IsAnchor))
	}
	if m.PkId != 0 {
		n += 1 + sovPk(uint64(m.PkId))
	}
	if m.RoomId != 0 {
		n += 1 + sovPk(uint64(m.RoomId))
	}
	if m.InviteId != 0 {
		n += 1 + sovPk(uint64(m.InviteId))
	}
	l = len(m.Platform)
	if l > 0 {
		n += 1 + l + sovPk(uint64(l))
	}
	return n
}

func (m *PkGetPkStatusResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovPk(uint64(m.Code))
	}
	l = len(m.Msg)
	if l > 0 {
		n += 1 + l + sovPk(uint64(l))
	}
	if m.Data != nil {
		l = m.Data.Size()
		n += 1 + l + sovPk(uint64(l))
	}
	return n
}

func (m *PkGetPkStatusResp_Data) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Timestamp != 0 {
		n += 1 + sovPk(uint64(m.Timestamp))
	}
	if m.PkId != 0 {
		n += 1 + sovPk(uint64(m.PkId))
	}
	if m.PkStatus != 0 {
		n += 1 + sovPk(uint64(m.PkStatus))
	}
	if m.InviteId != 0 {
		n += 1 + sovPk(uint64(m.InviteId))
	}
	if m.InviteStatus != 0 {
		n += 1 + sovPk(uint64(m.InviteStatus))
	}
	return n
}

func (m *PkGetPkIdsByRoomIdsReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.RoomIds) > 0 {
		l = 0
		for _, e := range m.RoomIds {
			l += sovPk(uint64(e))
		}
		n += 1 + sovPk(uint64(l)) + l
	}
	l = len(m.Platform)
	if l > 0 {
		n += 1 + l + sovPk(uint64(l))
	}
	return n
}

func (m *PkGetPkIdsByRoomIdsResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovPk(uint64(m.Code))
	}
	l = len(m.Msg)
	if l > 0 {
		n += 1 + l + sovPk(uint64(l))
	}
	if len(m.Data) > 0 {
		for k, v := range m.Data {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovPk(uint64(len(k))) + 1 + sovPk(uint64(v))
			n += mapEntrySize + 1 + sovPk(uint64(mapEntrySize))
		}
	}
	return n
}

func sovPk(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozPk(x uint64) (n int) {
	return sovPk(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *PkGetInfoByIdReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPk
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PkGetInfoByIdReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PkGetInfoByIdReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsAnchor", wireType)
			}
			m.IsAnchor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPk
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IsAnchor |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PkId", wireType)
			}
			m.PkId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPk
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PkId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoomId", wireType)
			}
			m.RoomId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPk
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RoomId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Platform", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPk
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPk
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Platform = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPk(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPk
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PkGetInfoByIdResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPk
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PkGetInfoByIdResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PkGetInfoByIdResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPk
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPk
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPk
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPk
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPk
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = &PkGetInfoByIdResp_Data{}
			}
			if err := m.Data.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPk(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPk
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PkGetInfoByIdResp_Data) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPk
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Data: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Data: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PkId", wireType)
			}
			m.PkId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPk
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PkId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InitId", wireType)
			}
			m.InitId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPk
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InitId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MatchId", wireType)
			}
			m.MatchId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPk
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MatchId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PreTime", wireType)
			}
			m.PreTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPk
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PreTime |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPk
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PkTopic", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPk
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPk
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PkTopic = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PunishTopic", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPk
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPk
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PunishTopic = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPk(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPk
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PkGetPkStatusReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPk
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PkGetPkStatusReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PkGetPkStatusReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsAnchor", wireType)
			}
			m.IsAnchor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPk
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IsAnchor |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PkId", wireType)
			}
			m.PkId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPk
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PkId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoomId", wireType)
			}
			m.RoomId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPk
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RoomId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InviteId", wireType)
			}
			m.InviteId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPk
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InviteId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Platform", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPk
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPk
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Platform = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPk(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPk
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PkGetPkStatusResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPk
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PkGetPkStatusResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PkGetPkStatusResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPk
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPk
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPk
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPk
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPk
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = &PkGetPkStatusResp_Data{}
			}
			if err := m.Data.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPk(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPk
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PkGetPkStatusResp_Data) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPk
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Data: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Data: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			m.Timestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPk
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timestamp |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PkId", wireType)
			}
			m.PkId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPk
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PkId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PkStatus", wireType)
			}
			m.PkStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPk
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PkStatus |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InviteId", wireType)
			}
			m.InviteId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPk
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InviteId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InviteStatus", wireType)
			}
			m.InviteStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPk
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InviteStatus |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPk(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPk
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PkGetPkIdsByRoomIdsReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPk
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PkGetPkIdsByRoomIdsReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PkGetPkIdsByRoomIdsReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPk
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.RoomIds = append(m.RoomIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPk
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthPk
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.RoomIds) == 0 {
					m.RoomIds = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPk
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.RoomIds = append(m.RoomIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field RoomIds", wireType)
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Platform", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPk
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPk
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Platform = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPk(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPk
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PkGetPkIdsByRoomIdsResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPk
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PkGetPkIdsByRoomIdsResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PkGetPkIdsByRoomIdsResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPk
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPk
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPk
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPk
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPk
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = make(map[string]int64)
			}
			var mapkey string
			var mapvalue int64
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPk
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPk
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthPk
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPk
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvalue |= (int64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipPk(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthPk
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Data[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPk(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPk
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPk(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPk
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPk
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPk
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthPk
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowPk
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipPk(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthPk = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPk   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("v1/Pk.proto", fileDescriptor_Pk_73bf1d6a8022969f) }

var fileDescriptor_Pk_73bf1d6a8022969f = []byte{
	// 711 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x55, 0xcd, 0x6a, 0xdb, 0x40,
	0x10, 0x8e, 0x24, 0xdb, 0x92, 0xc6, 0x09, 0x24, 0x4b, 0x69, 0x54, 0x93, 0x48, 0xc1, 0x14, 0x62,
	0x52, 0xea, 0x90, 0x04, 0xda, 0xd2, 0x5e, 0x5a, 0xd3, 0x1f, 0x7c, 0x33, 0xdb, 0x9c, 0x7a, 0x31,
	0x8a, 0xa5, 0xd8, 0x42, 0x91, 0xb5, 0x91, 0xd6, 0x06, 0xbf, 0x45, 0x1f, 0xa1, 0x0f, 0x50, 0xfa,
	0x1c, 0x3d, 0x06, 0x7a, 0x29, 0xa5, 0x88, 0x12, 0xdf, 0x74, 0xe9, 0x2b, 0x14, 0xad, 0x56, 0x96,
	0xe5, 0x38, 0x2e, 0xa5, 0x94, 0x5e, 0xd6, 0x33, 0xdf, 0x8e, 0x66, 0x66, 0xbf, 0xf9, 0x76, 0x0d,
	0xd5, 0xf1, 0xd1, 0x61, 0xc7, 0x6d, 0x92, 0xc0, 0xa7, 0x3e, 0x2a, 0x9b, 0xe3, 0xe6, 0xf8, 0xa8,
	0xf6, 0xb0, 0xef, 0xd0, 0xc1, 0xe8, 0xac, 0xd9, 0xf3, 0xbd, 0xc3, 0xbe, 0xdf, 0xf7, 0x0f, 0xd9,
	0xee, 0xd9, 0xe8, 0x9c, 0x79, 0xcc, 0x61, 0x56, 0xfa, 0x55, 0xfd, 0x93, 0x00, 0x9b, 0x1d, 0xf7,
	0x8d, 0x4d, 0xdb, 0xc3, 0x73, 0xbf, 0x35, 0x69, 0x5b, 0xd8, 0xbe, 0x44, 0x07, 0xa0, 0x3a, 0x61,
	0xd7, 0x1c, 0xf6, 0x06, 0x7e, 0xa0, 0x09, 0x7b, 0x42, 0x43, 0x6a, 0x6d, 0xc4, 0x91, 0x91, 0x83,
	0x58, 0x71, 0xc2, 0x17, 0xcc, 0x42, 0x3a, 0x94, 0x89, 0xdb, 0x75, 0x2c, 0x4d, 0x64, 0x71, 0x6a,
	0x1c, 0x19, 0x29, 0x80, 0x4b, 0xc4, 0x6d, 0x5b, 0xe8, 0x3e, 0xc8, 0x81, 0xef, 0x7b, 0x49, 0x84,
	0xc4, 0x22, 0xaa, 0x71, 0x64, 0x64, 0x10, 0xae, 0x24, 0x46, 0xdb, 0x42, 0x0d, 0x50, 0xc8, 0x85,
	0x49, 0xcf, 0xfd, 0xc0, 0xd3, 0x4a, 0x7b, 0x42, 0x43, 0x6d, 0xad, 0xc7, 0x91, 0x31, 0xc3, 0xf0,
	0xcc, 0xaa, 0x7f, 0x94, 0x60, 0x6b, 0xa1, 0xe1, 0x90, 0xa0, 0x1d, 0x28, 0xf5, 0x7c, 0xcb, 0xe6,
	0xcd, 0x2a, 0x71, 0x64, 0x30, 0x1f, 0xb3, 0x15, 0xdd, 0x03, 0xc9, 0x0b, 0xfb, 0xac, 0x43, 0xb5,
	0x25, 0xc7, 0x91, 0x91, 0xb8, 0x38, 0x59, 0xd0, 0x33, 0x28, 0x59, 0x26, 0x35, 0x59, 0x6f, 0xd5,
	0xe3, 0xdd, 0x26, 0x23, 0xb1, 0x79, 0xa3, 0x40, 0xf3, 0xa5, 0x49, 0xcd, 0x34, 0x6f, 0x12, 0x8e,
	0xd9, 0x5a, 0xfb, 0x20, 0x42, 0x29, 0xd9, 0xc8, 0x49, 0x10, 0x6e, 0x25, 0xc1, 0x19, 0x3a, 0x34,
	0xa7, 0x89, 0x91, 0xc0, 0x21, 0x5c, 0x49, 0x8c, 0xb6, 0x85, 0xf6, 0x41, 0xf1, 0x4c, 0xda, 0x1b,
	0xe4, 0x5c, 0x31, 0x12, 0x32, 0x0c, 0xcb, 0xcc, 0x4a, 0x03, 0x49, 0x60, 0x77, 0xa9, 0xe3, 0xd9,
	0x8c, 0x2d, 0x1e, 0x98, 0x61, 0x58, 0x26, 0x81, 0x7d, 0xea, 0x78, 0x36, 0xaa, 0x43, 0x25, 0xa4,
	0x26, 0x1d, 0x85, 0x5a, 0x99, 0x85, 0x41, 0x1c, 0x19, 0x1c, 0xc1, 0xfc, 0x97, 0x25, 0x73, 0xbb,
	0xd4, 0x27, 0x4e, 0x4f, 0xab, 0xcc, 0x51, 0xcf, 0x31, 0x2c, 0x13, 0xf7, 0x34, 0x31, 0xd0, 0x09,
	0xac, 0x93, 0xd1, 0xd0, 0x09, 0x07, 0x3c, 0x58, 0x66, 0xc1, 0x9b, 0x71, 0x64, 0x14, 0x70, 0x5c,
	0x4d, 0x3d, 0xf6, 0x51, 0xfd, 0x5b, 0xa6, 0xaf, 0x8e, 0xfb, 0x36, 0xad, 0xfb, 0x5f, 0xf4, 0x95,
	0x54, 0x1c, 0x8e, 0x1d, 0x6a, 0x27, 0x71, 0xa5, 0xb9, 0x8a, 0x19, 0x88, 0x95, 0xd4, 0x5c, 0xd0,
	0x62, 0x79, 0xa5, 0x16, 0x7f, 0x8a, 0x5c, 0x8b, 0xf9, 0xe1, 0xfe, 0x91, 0x16, 0xe7, 0x0b, 0x2c,
	0xd7, 0xe2, 0x54, 0xe0, 0x5a, 0x7c, 0x00, 0x6a, 0x22, 0x82, 0x90, 0x9a, 0x1e, 0x99, 0x27, 0x77,
	0x06, 0xe2, 0xdc, 0xfc, 0x2d, 0xbb, 0x07, 0xa0, 0x12, 0xb7, 0xcb, 0x35, 0x24, 0xe5, 0xc9, 0x66,
	0x20, 0x56, 0x08, 0x6f, 0xed, 0x8f, 0x38, 0x7e, 0x04, 0x1b, 0x1c, 0x2e, 0xe8, 0x73, 0x2b, 0x8e,
	0x8c, 0xe2, 0x06, 0x5e, 0x4f, 0xdd, 0xb4, 0x46, 0xdd, 0x85, 0xbb, 0x9c, 0x8f, 0xb6, 0x15, 0xb6,
	0x26, 0x98, 0x4d, 0x97, 0x69, 0x6a, 0x1f, 0x14, 0x3e, 0xf4, 0x50, 0x13, 0xf6, 0xa4, 0xec, 0x4e,
	0x64, 0x18, 0x96, 0x53, 0x25, 0x84, 0x85, 0xf1, 0x8a, 0x2b, 0xc7, 0xfb, 0x45, 0x80, 0xed, 0xa5,
	0xd5, 0xfe, 0x66, 0xc8, 0xaf, 0x67, 0x43, 0x96, 0x1a, 0xd5, 0xe3, 0x46, 0x71, 0xc8, 0x8b, 0x65,
	0xd8, 0xa8, 0x5f, 0x0d, 0x69, 0x30, 0xb9, 0x31, 0xef, 0xc7, 0xa0, 0xce, 0x36, 0xd1, 0x26, 0x48,
	0xae, 0x3d, 0x61, 0xcd, 0xa8, 0x38, 0x31, 0xd1, 0x1d, 0x28, 0x8f, 0xcd, 0x8b, 0x91, 0x9d, 0x0e,
	0x16, 0xa7, 0xce, 0x53, 0xf1, 0x89, 0x70, 0xfc, 0x5d, 0x00, 0xb1, 0xe3, 0xa2, 0xe7, 0x50, 0xed,
	0xe7, 0x6f, 0x1c, 0xda, 0x5e, 0xfe, 0xf2, 0x5d, 0xd6, 0xb4, 0xdb, 0x9e, 0x44, 0x9e, 0x21, 0x53,
	0x66, 0x31, 0xc3, 0xdc, 0x6d, 0x2f, 0x66, 0x28, 0xdc, 0x14, 0x0c, 0x5b, 0xfd, 0xc5, 0x63, 0xa3,
	0xdd, 0x55, 0x94, 0x5c, 0xd6, 0xf4, 0xd5, 0x8c, 0xb5, 0x76, 0x3e, 0x5f, 0xeb, 0xc2, 0xd5, 0xb5,
	0x2e, 0xfc, 0xb8, 0xd6, 0x85, 0xf7, 0x53, 0x7d, 0xed, 0x6a, 0xaa, 0xaf, 0x7d, 0x9d, 0xea, 0x6b,
	0xef, 0xc4, 0xf1, 0xd1, 0x59, 0x85, 0xfd, 0xeb, 0x9d, 0xfc, 0x0a, 0x00, 0x00, 0xff, 0xff, 0x16,
	0xca, 0x77, 0x00, 0x3a, 0x07, 0x00, 0x00,
}
