// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: v0/Message.proto

package v0

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type MessageLiveNotifyReq struct {
}

func (m *MessageLiveNotifyReq) Reset()         { *m = MessageLiveNotifyReq{} }
func (m *MessageLiveNotifyReq) String() string { return proto.CompactTextString(m) }
func (*MessageLiveNotifyReq) ProtoMessage()    {}
func (*MessageLiveNotifyReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_Message_1e41299cf86f2f2e, []int{0}
}
func (m *MessageLiveNotifyReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MessageLiveNotifyReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MessageLiveNotifyReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *MessageLiveNotifyReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MessageLiveNotifyReq.Merge(dst, src)
}
func (m *MessageLiveNotifyReq) XXX_Size() int {
	return m.Size()
}
func (m *MessageLiveNotifyReq) XXX_DiscardUnknown() {
	xxx_messageInfo_MessageLiveNotifyReq.DiscardUnknown(m)
}

var xxx_messageInfo_MessageLiveNotifyReq proto.InternalMessageInfo

type MessageLiveNotifyResp struct {
	// code
	Code int64 `protobuf:"varint,1,opt,name=code,proto3" json:"code"`
	// msg
	Msg string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg"`
	//
	Data *MessageLiveNotifyResp_Data `protobuf:"bytes,3,opt,name=data" json:"data"`
}

func (m *MessageLiveNotifyResp) Reset()         { *m = MessageLiveNotifyResp{} }
func (m *MessageLiveNotifyResp) String() string { return proto.CompactTextString(m) }
func (*MessageLiveNotifyResp) ProtoMessage()    {}
func (*MessageLiveNotifyResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_Message_1e41299cf86f2f2e, []int{1}
}
func (m *MessageLiveNotifyResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MessageLiveNotifyResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MessageLiveNotifyResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *MessageLiveNotifyResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MessageLiveNotifyResp.Merge(dst, src)
}
func (m *MessageLiveNotifyResp) XXX_Size() int {
	return m.Size()
}
func (m *MessageLiveNotifyResp) XXX_DiscardUnknown() {
	xxx_messageInfo_MessageLiveNotifyResp.DiscardUnknown(m)
}

var xxx_messageInfo_MessageLiveNotifyResp proto.InternalMessageInfo

func (m *MessageLiveNotifyResp) GetCode() int64 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *MessageLiveNotifyResp) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func (m *MessageLiveNotifyResp) GetData() *MessageLiveNotifyResp_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

type MessageLiveNotifyResp_Data struct {
}

func (m *MessageLiveNotifyResp_Data) Reset()         { *m = MessageLiveNotifyResp_Data{} }
func (m *MessageLiveNotifyResp_Data) String() string { return proto.CompactTextString(m) }
func (*MessageLiveNotifyResp_Data) ProtoMessage()    {}
func (*MessageLiveNotifyResp_Data) Descriptor() ([]byte, []int) {
	return fileDescriptor_Message_1e41299cf86f2f2e, []int{1, 0}
}
func (m *MessageLiveNotifyResp_Data) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MessageLiveNotifyResp_Data) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MessageLiveNotifyResp_Data.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *MessageLiveNotifyResp_Data) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MessageLiveNotifyResp_Data.Merge(dst, src)
}
func (m *MessageLiveNotifyResp_Data) XXX_Size() int {
	return m.Size()
}
func (m *MessageLiveNotifyResp_Data) XXX_DiscardUnknown() {
	xxx_messageInfo_MessageLiveNotifyResp_Data.DiscardUnknown(m)
}

var xxx_messageInfo_MessageLiveNotifyResp_Data proto.InternalMessageInfo

type MessageAreaNotifyReq struct {
}

func (m *MessageAreaNotifyReq) Reset()         { *m = MessageAreaNotifyReq{} }
func (m *MessageAreaNotifyReq) String() string { return proto.CompactTextString(m) }
func (*MessageAreaNotifyReq) ProtoMessage()    {}
func (*MessageAreaNotifyReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_Message_1e41299cf86f2f2e, []int{2}
}
func (m *MessageAreaNotifyReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MessageAreaNotifyReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MessageAreaNotifyReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *MessageAreaNotifyReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MessageAreaNotifyReq.Merge(dst, src)
}
func (m *MessageAreaNotifyReq) XXX_Size() int {
	return m.Size()
}
func (m *MessageAreaNotifyReq) XXX_DiscardUnknown() {
	xxx_messageInfo_MessageAreaNotifyReq.DiscardUnknown(m)
}

var xxx_messageInfo_MessageAreaNotifyReq proto.InternalMessageInfo

type MessageAreaNotifyResp struct {
	// code
	Code int64 `protobuf:"varint,1,opt,name=code,proto3" json:"code"`
	// msg
	Msg string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg"`
	//
	Data *MessageAreaNotifyResp_Data `protobuf:"bytes,3,opt,name=data" json:"data"`
}

func (m *MessageAreaNotifyResp) Reset()         { *m = MessageAreaNotifyResp{} }
func (m *MessageAreaNotifyResp) String() string { return proto.CompactTextString(m) }
func (*MessageAreaNotifyResp) ProtoMessage()    {}
func (*MessageAreaNotifyResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_Message_1e41299cf86f2f2e, []int{3}
}
func (m *MessageAreaNotifyResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MessageAreaNotifyResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MessageAreaNotifyResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *MessageAreaNotifyResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MessageAreaNotifyResp.Merge(dst, src)
}
func (m *MessageAreaNotifyResp) XXX_Size() int {
	return m.Size()
}
func (m *MessageAreaNotifyResp) XXX_DiscardUnknown() {
	xxx_messageInfo_MessageAreaNotifyResp.DiscardUnknown(m)
}

var xxx_messageInfo_MessageAreaNotifyResp proto.InternalMessageInfo

func (m *MessageAreaNotifyResp) GetCode() int64 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *MessageAreaNotifyResp) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func (m *MessageAreaNotifyResp) GetData() *MessageAreaNotifyResp_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

type MessageAreaNotifyResp_Data struct {
}

func (m *MessageAreaNotifyResp_Data) Reset()         { *m = MessageAreaNotifyResp_Data{} }
func (m *MessageAreaNotifyResp_Data) String() string { return proto.CompactTextString(m) }
func (*MessageAreaNotifyResp_Data) ProtoMessage()    {}
func (*MessageAreaNotifyResp_Data) Descriptor() ([]byte, []int) {
	return fileDescriptor_Message_1e41299cf86f2f2e, []int{3, 0}
}
func (m *MessageAreaNotifyResp_Data) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MessageAreaNotifyResp_Data) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MessageAreaNotifyResp_Data.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *MessageAreaNotifyResp_Data) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MessageAreaNotifyResp_Data.Merge(dst, src)
}
func (m *MessageAreaNotifyResp_Data) XXX_Size() int {
	return m.Size()
}
func (m *MessageAreaNotifyResp_Data) XXX_DiscardUnknown() {
	xxx_messageInfo_MessageAreaNotifyResp_Data.DiscardUnknown(m)
}

var xxx_messageInfo_MessageAreaNotifyResp_Data proto.InternalMessageInfo

func init() {
	proto.RegisterType((*MessageLiveNotifyReq)(nil), "live_data.v0.MessageLiveNotifyReq")
	proto.RegisterType((*MessageLiveNotifyResp)(nil), "live_data.v0.MessageLiveNotifyResp")
	proto.RegisterType((*MessageLiveNotifyResp_Data)(nil), "live_data.v0.MessageLiveNotifyResp.Data")
	proto.RegisterType((*MessageAreaNotifyReq)(nil), "live_data.v0.MessageAreaNotifyReq")
	proto.RegisterType((*MessageAreaNotifyResp)(nil), "live_data.v0.MessageAreaNotifyResp")
	proto.RegisterType((*MessageAreaNotifyResp_Data)(nil), "live_data.v0.MessageAreaNotifyResp.Data")
}
func (m *MessageLiveNotifyReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MessageLiveNotifyReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *MessageLiveNotifyResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MessageLiveNotifyResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMessage(dAtA, i, uint64(m.Code))
	}
	if len(m.Msg) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMessage(dAtA, i, uint64(len(m.Msg)))
		i += copy(dAtA[i:], m.Msg)
	}
	if m.Data != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintMessage(dAtA, i, uint64(m.Data.Size()))
		n1, err := m.Data.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	return i, nil
}

func (m *MessageLiveNotifyResp_Data) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MessageLiveNotifyResp_Data) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *MessageAreaNotifyReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MessageAreaNotifyReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *MessageAreaNotifyResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MessageAreaNotifyResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMessage(dAtA, i, uint64(m.Code))
	}
	if len(m.Msg) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMessage(dAtA, i, uint64(len(m.Msg)))
		i += copy(dAtA[i:], m.Msg)
	}
	if m.Data != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintMessage(dAtA, i, uint64(m.Data.Size()))
		n2, err := m.Data.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	return i, nil
}

func (m *MessageAreaNotifyResp_Data) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MessageAreaNotifyResp_Data) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func encodeVarintMessage(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *MessageLiveNotifyReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MessageLiveNotifyResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovMessage(uint64(m.Code))
	}
	l = len(m.Msg)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.Data != nil {
		l = m.Data.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	return n
}

func (m *MessageLiveNotifyResp_Data) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MessageAreaNotifyReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MessageAreaNotifyResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovMessage(uint64(m.Code))
	}
	l = len(m.Msg)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.Data != nil {
		l = m.Data.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	return n
}

func (m *MessageAreaNotifyResp_Data) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovMessage(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozMessage(x uint64) (n int) {
	return sovMessage(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MessageLiveNotifyReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MessageLiveNotifyReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MessageLiveNotifyReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MessageLiveNotifyResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MessageLiveNotifyResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MessageLiveNotifyResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = &MessageLiveNotifyResp_Data{}
			}
			if err := m.Data.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MessageLiveNotifyResp_Data) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Data: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Data: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MessageAreaNotifyReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MessageAreaNotifyReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MessageAreaNotifyReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MessageAreaNotifyResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MessageAreaNotifyResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MessageAreaNotifyResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = &MessageAreaNotifyResp_Data{}
			}
			if err := m.Data.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MessageAreaNotifyResp_Data) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Data: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Data: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMessage(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthMessage
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowMessage
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipMessage(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthMessage = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMessage   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("v0/Message.proto", fileDescriptor_Message_1e41299cf86f2f2e) }

var fileDescriptor_Message_1e41299cf86f2f2e = []byte{
	// 295 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x28, 0x33, 0xd0, 0xf7,
	0x4d, 0x2d, 0x2e, 0x4e, 0x4c, 0x4f, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0xc9, 0xc9,
	0x2c, 0x4b, 0x8d, 0x4f, 0x49, 0x2c, 0x49, 0xd4, 0x2b, 0x33, 0x90, 0xd2, 0x4d, 0xcf, 0x2c, 0xc9,
	0x28, 0x4d, 0xd2, 0x4b, 0xce, 0xcf, 0xd5, 0x4f, 0xcf, 0x4f, 0xcf, 0xd7, 0x07, 0x2b, 0x4a, 0x2a,
	0x4d, 0x03, 0xf3, 0xc0, 0x1c, 0x30, 0x0b, 0xa2, 0x59, 0x49, 0x8c, 0x4b, 0x04, 0x6a, 0x9a, 0x4f,
	0x66, 0x59, 0xaa, 0x5f, 0x7e, 0x49, 0x66, 0x5a, 0x65, 0x50, 0x6a, 0xa1, 0xd2, 0x02, 0x46, 0x2e,
	0x51, 0x2c, 0x12, 0xc5, 0x05, 0x42, 0x32, 0x5c, 0x2c, 0xc9, 0xf9, 0x29, 0xa9, 0x12, 0x8c, 0x0a,
	0x8c, 0x1a, 0xcc, 0x4e, 0x1c, 0xaf, 0xee, 0xc9, 0x83, 0xf9, 0x41, 0x60, 0x52, 0x48, 0x92, 0x8b,
	0x39, 0xb7, 0x38, 0x5d, 0x82, 0x49, 0x81, 0x51, 0x83, 0xd3, 0x89, 0xfd, 0xd5, 0x3d, 0x79, 0x10,
	0x37, 0x08, 0x44, 0x08, 0xb9, 0x71, 0xb1, 0x80, 0x1c, 0x29, 0xc1, 0xac, 0xc0, 0xa8, 0xc1, 0x6d,
	0xa4, 0xa1, 0x87, 0xec, 0x6c, 0x3d, 0xac, 0x76, 0xe9, 0xb9, 0x24, 0x96, 0x24, 0x42, 0xac, 0x00,
	0xa9, 0x0b, 0x02, 0x93, 0x52, 0x6c, 0x5c, 0x2c, 0x20, 0x71, 0x24, 0xa7, 0x3b, 0x16, 0xa5, 0x26,
	0x62, 0x75, 0x3a, 0xb2, 0x04, 0xad, 0x9d, 0x8e, 0x6a, 0x17, 0x5e, 0xa7, 0x1b, 0x6d, 0x67, 0xe4,
	0x62, 0x87, 0x6a, 0x13, 0x0a, 0xe5, 0xe2, 0xca, 0x81, 0xfb, 0x5a, 0x48, 0x89, 0x60, 0xb0, 0x14,
	0x4a, 0x29, 0x13, 0x11, 0x74, 0x20, 0x63, 0x13, 0xe1, 0x2e, 0xc2, 0x61, 0x2c, 0x4a, 0xb8, 0xe1,
	0x30, 0x16, 0xd5, 0x5b, 0x4e, 0x32, 0x27, 0x1e, 0xc9, 0x31, 0x5e, 0x78, 0x24, 0xc7, 0xf8, 0xe0,
	0x91, 0x1c, 0xe3, 0x84, 0xc7, 0x72, 0x0c, 0x17, 0x1e, 0xcb, 0x31, 0xdc, 0x78, 0x2c, 0xc7, 0x10,
	0xc5, 0x54, 0x66, 0x90, 0xc4, 0x06, 0x4e, 0x54, 0xc6, 0x80, 0x00, 0x00, 0x00, 0xff, 0xff, 0x34,
	0xdf, 0xe6, 0xc2, 0xa5, 0x02, 0x00, 0x00,
}
