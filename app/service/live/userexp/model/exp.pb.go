// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: exp.proto

package model

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Exp struct {
	Uid                  int64    `protobuf:"varint,1,opt,name=Uid,proto3" json:"uid"`
	Uexp                 int64    `protobuf:"varint,2,opt,name=Uexp,proto3" json:"uexp"`
	Rexp                 int64    `protobuf:"varint,3,opt,name=Rexp,proto3" json:"rexp"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Exp) Reset()         { *m = Exp{} }
func (m *Exp) String() string { return proto.CompactTextString(m) }
func (*Exp) ProtoMessage()    {}
func (*Exp) Descriptor() ([]byte, []int) {
	return fileDescriptor_exp_7984ee062c04d63b, []int{0}
}
func (m *Exp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Exp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Exp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Exp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Exp.Merge(dst, src)
}
func (m *Exp) XXX_Size() int {
	return m.Size()
}
func (m *Exp) XXX_DiscardUnknown() {
	xxx_messageInfo_Exp.DiscardUnknown(m)
}

var xxx_messageInfo_Exp proto.InternalMessageInfo

func (m *Exp) GetUid() int64 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *Exp) GetUexp() int64 {
	if m != nil {
		return m.Uexp
	}
	return 0
}

func (m *Exp) GetRexp() int64 {
	if m != nil {
		return m.Rexp
	}
	return 0
}

type ExpLog struct {
	Mid                  int64             `protobuf:"varint,1,opt,name=mid,proto3" json:"mid"`
	Uexp                 int64             `protobuf:"varint,2,opt,name=uexp,proto3" json:"uexp"`
	Rexp                 int64             `protobuf:"varint,3,opt,name=rexp,proto3" json:"rexp"`
	Ts                   int64             `protobuf:"varint,4,opt,name=ts,proto3" json:"ts"`
	Ip                   string            `protobuf:"bytes,5,opt,name=ip,proto3" json:"ip"`
	Buvid                string            `protobuf:"bytes,6,opt,name=buvid,proto3" json:"buvid"`
	Content              map[string]string `protobuf:"bytes,7,rep,name=content" json:"content" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *ExpLog) Reset()         { *m = ExpLog{} }
func (m *ExpLog) String() string { return proto.CompactTextString(m) }
func (*ExpLog) ProtoMessage()    {}
func (*ExpLog) Descriptor() ([]byte, []int) {
	return fileDescriptor_exp_7984ee062c04d63b, []int{1}
}
func (m *ExpLog) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ExpLog) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ExpLog.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ExpLog) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExpLog.Merge(dst, src)
}
func (m *ExpLog) XXX_Size() int {
	return m.Size()
}
func (m *ExpLog) XXX_DiscardUnknown() {
	xxx_messageInfo_ExpLog.DiscardUnknown(m)
}

var xxx_messageInfo_ExpLog proto.InternalMessageInfo

func (m *ExpLog) GetMid() int64 {
	if m != nil {
		return m.Mid
	}
	return 0
}

func (m *ExpLog) GetUexp() int64 {
	if m != nil {
		return m.Uexp
	}
	return 0
}

func (m *ExpLog) GetRexp() int64 {
	if m != nil {
		return m.Rexp
	}
	return 0
}

func (m *ExpLog) GetTs() int64 {
	if m != nil {
		return m.Ts
	}
	return 0
}

func (m *ExpLog) GetIp() string {
	if m != nil {
		return m.Ip
	}
	return ""
}

func (m *ExpLog) GetBuvid() string {
	if m != nil {
		return m.Buvid
	}
	return ""
}

func (m *ExpLog) GetContent() map[string]string {
	if m != nil {
		return m.Content
	}
	return nil
}

type Level struct {
	Uid                  int64    `protobuf:"varint,1,opt,name=Uid,proto3" json:"uid"`
	Uexp                 int64    `protobuf:"varint,2,opt,name=Uexp,proto3" json:"uexp"`
	Rexp                 int64    `protobuf:"varint,3,opt,name=Rexp,proto3" json:"rexp"`
	Ulevel               int32    `protobuf:"varint,4,opt,name=Ulevel,proto3" json:"ulevel"`
	Rlevel               int32    `protobuf:"varint,5,opt,name=Rlevel,proto3" json:"rlevel"`
	Color                int32    `protobuf:"varint,6,opt,name=Color,proto3" json:"color"`
	Unext                int64    `protobuf:"varint,7,opt,name=Unext,proto3" json:"unext"`
	Rnext                int64    `protobuf:"varint,8,opt,name=Rnext,proto3" json:"rnext"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Level) Reset()         { *m = Level{} }
func (m *Level) String() string { return proto.CompactTextString(m) }
func (*Level) ProtoMessage()    {}
func (*Level) Descriptor() ([]byte, []int) {
	return fileDescriptor_exp_7984ee062c04d63b, []int{2}
}
func (m *Level) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Level) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Level.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Level) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Level.Merge(dst, src)
}
func (m *Level) XXX_Size() int {
	return m.Size()
}
func (m *Level) XXX_DiscardUnknown() {
	xxx_messageInfo_Level.DiscardUnknown(m)
}

var xxx_messageInfo_Level proto.InternalMessageInfo

func (m *Level) GetUid() int64 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *Level) GetUexp() int64 {
	if m != nil {
		return m.Uexp
	}
	return 0
}

func (m *Level) GetRexp() int64 {
	if m != nil {
		return m.Rexp
	}
	return 0
}

func (m *Level) GetUlevel() int32 {
	if m != nil {
		return m.Ulevel
	}
	return 0
}

func (m *Level) GetRlevel() int32 {
	if m != nil {
		return m.Rlevel
	}
	return 0
}

func (m *Level) GetColor() int32 {
	if m != nil {
		return m.Color
	}
	return 0
}

func (m *Level) GetUnext() int64 {
	if m != nil {
		return m.Unext
	}
	return 0
}

func (m *Level) GetRnext() int64 {
	if m != nil {
		return m.Rnext
	}
	return 0
}

func init() {
	proto.RegisterType((*Exp)(nil), "model.Exp")
	proto.RegisterType((*ExpLog)(nil), "model.ExpLog")
	proto.RegisterMapType((map[string]string)(nil), "model.ExpLog.ContentEntry")
	proto.RegisterType((*Level)(nil), "model.Level")
}
func (m *Exp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Exp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Uid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintExp(dAtA, i, uint64(m.Uid))
	}
	if m.Uexp != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintExp(dAtA, i, uint64(m.Uexp))
	}
	if m.Rexp != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintExp(dAtA, i, uint64(m.Rexp))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ExpLog) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ExpLog) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Mid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintExp(dAtA, i, uint64(m.Mid))
	}
	if m.Uexp != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintExp(dAtA, i, uint64(m.Uexp))
	}
	if m.Rexp != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintExp(dAtA, i, uint64(m.Rexp))
	}
	if m.Ts != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintExp(dAtA, i, uint64(m.Ts))
	}
	if len(m.Ip) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintExp(dAtA, i, uint64(len(m.Ip)))
		i += copy(dAtA[i:], m.Ip)
	}
	if len(m.Buvid) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintExp(dAtA, i, uint64(len(m.Buvid)))
		i += copy(dAtA[i:], m.Buvid)
	}
	if len(m.Content) > 0 {
		for k, _ := range m.Content {
			dAtA[i] = 0x3a
			i++
			v := m.Content[k]
			mapSize := 1 + len(k) + sovExp(uint64(len(k))) + 1 + len(v) + sovExp(uint64(len(v)))
			i = encodeVarintExp(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintExp(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			dAtA[i] = 0x12
			i++
			i = encodeVarintExp(dAtA, i, uint64(len(v)))
			i += copy(dAtA[i:], v)
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Level) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Level) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Uid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintExp(dAtA, i, uint64(m.Uid))
	}
	if m.Uexp != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintExp(dAtA, i, uint64(m.Uexp))
	}
	if m.Rexp != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintExp(dAtA, i, uint64(m.Rexp))
	}
	if m.Ulevel != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintExp(dAtA, i, uint64(m.Ulevel))
	}
	if m.Rlevel != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintExp(dAtA, i, uint64(m.Rlevel))
	}
	if m.Color != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintExp(dAtA, i, uint64(m.Color))
	}
	if m.Unext != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintExp(dAtA, i, uint64(m.Unext))
	}
	if m.Rnext != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintExp(dAtA, i, uint64(m.Rnext))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintExp(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Exp) Size() (n int) {
	var l int
	_ = l
	if m.Uid != 0 {
		n += 1 + sovExp(uint64(m.Uid))
	}
	if m.Uexp != 0 {
		n += 1 + sovExp(uint64(m.Uexp))
	}
	if m.Rexp != 0 {
		n += 1 + sovExp(uint64(m.Rexp))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ExpLog) Size() (n int) {
	var l int
	_ = l
	if m.Mid != 0 {
		n += 1 + sovExp(uint64(m.Mid))
	}
	if m.Uexp != 0 {
		n += 1 + sovExp(uint64(m.Uexp))
	}
	if m.Rexp != 0 {
		n += 1 + sovExp(uint64(m.Rexp))
	}
	if m.Ts != 0 {
		n += 1 + sovExp(uint64(m.Ts))
	}
	l = len(m.Ip)
	if l > 0 {
		n += 1 + l + sovExp(uint64(l))
	}
	l = len(m.Buvid)
	if l > 0 {
		n += 1 + l + sovExp(uint64(l))
	}
	if len(m.Content) > 0 {
		for k, v := range m.Content {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovExp(uint64(len(k))) + 1 + len(v) + sovExp(uint64(len(v)))
			n += mapEntrySize + 1 + sovExp(uint64(mapEntrySize))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Level) Size() (n int) {
	var l int
	_ = l
	if m.Uid != 0 {
		n += 1 + sovExp(uint64(m.Uid))
	}
	if m.Uexp != 0 {
		n += 1 + sovExp(uint64(m.Uexp))
	}
	if m.Rexp != 0 {
		n += 1 + sovExp(uint64(m.Rexp))
	}
	if m.Ulevel != 0 {
		n += 1 + sovExp(uint64(m.Ulevel))
	}
	if m.Rlevel != 0 {
		n += 1 + sovExp(uint64(m.Rlevel))
	}
	if m.Color != 0 {
		n += 1 + sovExp(uint64(m.Color))
	}
	if m.Unext != 0 {
		n += 1 + sovExp(uint64(m.Unext))
	}
	if m.Rnext != 0 {
		n += 1 + sovExp(uint64(m.Rnext))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovExp(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozExp(x uint64) (n int) {
	return sovExp(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Exp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowExp
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Exp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Exp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uexp", wireType)
			}
			m.Uexp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uexp |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rexp", wireType)
			}
			m.Rexp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Rexp |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipExp(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthExp
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ExpLog) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowExp
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExpLog: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExpLog: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uexp", wireType)
			}
			m.Uexp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uexp |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rexp", wireType)
			}
			m.Rexp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Rexp |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ts", wireType)
			}
			m.Ts = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ts |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ip", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExp
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ip = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Buvid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExp
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Buvid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExp
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Content == nil {
				m.Content = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowExp
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowExp
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthExp
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowExp
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthExp
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipExp(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthExp
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Content[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipExp(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthExp
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Level) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowExp
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Level: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Level: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uexp", wireType)
			}
			m.Uexp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uexp |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rexp", wireType)
			}
			m.Rexp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Rexp |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ulevel", wireType)
			}
			m.Ulevel = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ulevel |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rlevel", wireType)
			}
			m.Rlevel = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Rlevel |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Color", wireType)
			}
			m.Color = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Color |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Unext", wireType)
			}
			m.Unext = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Unext |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rnext", wireType)
			}
			m.Rnext = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Rnext |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipExp(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthExp
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipExp(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowExp
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowExp
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowExp
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthExp
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowExp
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipExp(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthExp = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowExp   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("exp.proto", fileDescriptor_exp_7984ee062c04d63b) }

var fileDescriptor_exp_7984ee062c04d63b = []byte{
	// 415 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x92, 0xc1, 0x8e, 0x94, 0x30,
	0x18, 0xc7, 0xa5, 0x4c, 0x99, 0xa5, 0xeb, 0x61, 0xd3, 0x18, 0x83, 0x13, 0x03, 0x13, 0x4e, 0x73,
	0x91, 0x4d, 0xf4, 0x62, 0xf6, 0x26, 0x9b, 0xb9, 0xed, 0xa9, 0x09, 0x37, 0x2f, 0x32, 0x54, 0x24,
	0x02, 0x6d, 0x98, 0x76, 0xc2, 0x3e, 0x82, 0x6f, 0xe0, 0x5b, 0xf8, 0x1a, 0x1e, 0x7d, 0x02, 0x62,
	0xc6, 0x1b, 0x4f, 0x61, 0xbe, 0xaf, 0xb3, 0x19, 0x4d, 0xf6, 0xba, 0x17, 0x68, 0x7f, 0xff, 0x1f,
	0xf9, 0xd3, 0x0f, 0x58, 0x28, 0x47, 0x9d, 0xe9, 0x41, 0x19, 0xc5, 0x69, 0xa7, 0x2a, 0xd9, 0xae,
	0xde, 0xd4, 0x8d, 0xf9, 0x62, 0xcb, 0x6c, 0xa7, 0xba, 0xeb, 0x5a, 0xd5, 0xea, 0x1a, 0xd3, 0xd2,
	0x7e, 0xc6, 0x1d, 0x6e, 0x70, 0xe5, 0x9e, 0x4a, 0x3f, 0x32, 0x7f, 0x3b, 0x6a, 0xfe, 0x8a, 0xf9,
	0x45, 0x53, 0x45, 0xde, 0xda, 0xdb, 0xf8, 0xf9, 0x72, 0x9e, 0x12, 0xdf, 0x36, 0x95, 0x00, 0xc6,
	0x5f, 0xb3, 0x45, 0x21, 0x47, 0x1d, 0x11, 0xcc, 0x2e, 0xe6, 0x29, 0x59, 0x58, 0x39, 0x6a, 0x81,
	0x14, 0x52, 0x01, 0xa9, 0x7f, 0x4e, 0x07, 0x4c, 0x81, 0xa6, 0x3f, 0x08, 0x0b, 0xb6, 0xa3, 0xbe,
	0x53, 0x35, 0x34, 0x74, 0xff, 0x37, 0x74, 0xd0, 0xd0, 0xb9, 0x06, 0xfb, 0x68, 0x83, 0x3d, 0x35,
	0x0c, 0x8f, 0x36, 0xc0, 0x95, 0xbf, 0x64, 0xc4, 0xec, 0xa3, 0x05, 0x66, 0xc1, 0x3c, 0x25, 0xc4,
	0xec, 0x05, 0x31, 0x7b, 0xe0, 0x8d, 0x8e, 0xe8, 0xda, 0xdb, 0x84, 0x8e, 0x37, 0x5a, 0x90, 0x46,
	0xf3, 0x84, 0xd1, 0xd2, 0x1e, 0x9a, 0x2a, 0x0a, 0x30, 0x0a, 0xe7, 0x29, 0x71, 0x40, 0xb8, 0x1b,
	0xff, 0xc0, 0x96, 0x3b, 0xd5, 0x1b, 0xd9, 0x9b, 0x68, 0xb9, 0xf6, 0x37, 0x97, 0x6f, 0x57, 0x19,
	0x0e, 0x36, 0x73, 0xe7, 0xc8, 0x6e, 0x5d, 0xb8, 0xed, 0xcd, 0x70, 0x9f, 0x5f, 0xce, 0x53, 0xf2,
	0xa0, 0x8b, 0x87, 0xc5, 0xea, 0x86, 0x3d, 0xff, 0xd7, 0xe2, 0x57, 0xcc, 0xff, 0x2a, 0xef, 0xf1,
	0xe8, 0xa1, 0x80, 0x25, 0x7f, 0xc1, 0xe8, 0xe1, 0x53, 0x6b, 0x25, 0x1e, 0x39, 0x14, 0x6e, 0x73,
	0x43, 0xde, 0x7b, 0xe9, 0x37, 0xc2, 0xe8, 0x9d, 0x3c, 0xc8, 0xf6, 0x89, 0x3e, 0x09, 0x4f, 0x59,
	0x50, 0xb4, 0x50, 0x80, 0x43, 0xa3, 0x39, 0x9b, 0xa7, 0x24, 0xb0, 0x48, 0xc4, 0x29, 0x01, 0x47,
	0x38, 0x87, 0x9e, 0x9d, 0xe1, 0xe4, 0xb8, 0x04, 0x06, 0x79, 0xab, 0x5a, 0x35, 0xe0, 0x20, 0xa9,
	0x1b, 0xe4, 0x0e, 0x80, 0x70, 0x1c, 0x84, 0xa2, 0x97, 0x23, 0x8c, 0x11, 0xde, 0x03, 0x05, 0x0b,
	0x40, 0x38, 0x0e, 0x82, 0x40, 0xe1, 0xe2, 0x2c, 0x0c, 0x4e, 0x40, 0x9e, 0x5f, 0xfd, 0x3c, 0xc6,
	0xde, 0xaf, 0x63, 0xec, 0xfd, 0x3e, 0xc6, 0xde, 0xf7, 0x3f, 0xf1, 0xb3, 0x32, 0xc0, 0x9f, 0xf6,
	0xdd, 0xdf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x20, 0xb3, 0xda, 0xd6, 0xf7, 0x02, 0x00, 0x00,
}
