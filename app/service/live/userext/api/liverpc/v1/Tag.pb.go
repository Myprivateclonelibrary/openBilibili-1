// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: v1/Tag.proto

package v1

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type TagTestReq struct {
	// 活动 id
	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id"`
}

func (m *TagTestReq) Reset()         { *m = TagTestReq{} }
func (m *TagTestReq) String() string { return proto.CompactTextString(m) }
func (*TagTestReq) ProtoMessage()    {}
func (*TagTestReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_Tag_06332839907eeb47, []int{0}
}
func (m *TagTestReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TagTestReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TagTestReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *TagTestReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TagTestReq.Merge(dst, src)
}
func (m *TagTestReq) XXX_Size() int {
	return m.Size()
}
func (m *TagTestReq) XXX_DiscardUnknown() {
	xxx_messageInfo_TagTestReq.DiscardUnknown(m)
}

var xxx_messageInfo_TagTestReq proto.InternalMessageInfo

func (m *TagTestReq) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type TagTestResp struct {
	// code
	Code int64 `protobuf:"varint,1,opt,name=code,proto3" json:"code"`
	// msg
	Msg string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg"`
	//
	Data *TagTestResp_Data `protobuf:"bytes,3,opt,name=data" json:"data"`
}

func (m *TagTestResp) Reset()         { *m = TagTestResp{} }
func (m *TagTestResp) String() string { return proto.CompactTextString(m) }
func (*TagTestResp) ProtoMessage()    {}
func (*TagTestResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_Tag_06332839907eeb47, []int{1}
}
func (m *TagTestResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TagTestResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TagTestResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *TagTestResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TagTestResp.Merge(dst, src)
}
func (m *TagTestResp) XXX_Size() int {
	return m.Size()
}
func (m *TagTestResp) XXX_DiscardUnknown() {
	xxx_messageInfo_TagTestResp.DiscardUnknown(m)
}

var xxx_messageInfo_TagTestResp proto.InternalMessageInfo

func (m *TagTestResp) GetCode() int64 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *TagTestResp) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func (m *TagTestResp) GetData() *TagTestResp_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

type TagTestResp_Data struct {
	// 活动 ID
	Aid int64 `protobuf:"varint,1,opt,name=aid,proto3" json:"aid"`
	// 1.已经预约 2.没有预约
	Action int64 `protobuf:"varint,2,opt,name=action,proto3" json:"action"`
}

func (m *TagTestResp_Data) Reset()         { *m = TagTestResp_Data{} }
func (m *TagTestResp_Data) String() string { return proto.CompactTextString(m) }
func (*TagTestResp_Data) ProtoMessage()    {}
func (*TagTestResp_Data) Descriptor() ([]byte, []int) {
	return fileDescriptor_Tag_06332839907eeb47, []int{1, 0}
}
func (m *TagTestResp_Data) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TagTestResp_Data) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TagTestResp_Data.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *TagTestResp_Data) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TagTestResp_Data.Merge(dst, src)
}
func (m *TagTestResp_Data) XXX_Size() int {
	return m.Size()
}
func (m *TagTestResp_Data) XXX_DiscardUnknown() {
	xxx_messageInfo_TagTestResp_Data.DiscardUnknown(m)
}

var xxx_messageInfo_TagTestResp_Data proto.InternalMessageInfo

func (m *TagTestResp_Data) GetAid() int64 {
	if m != nil {
		return m.Aid
	}
	return 0
}

func (m *TagTestResp_Data) GetAction() int64 {
	if m != nil {
		return m.Action
	}
	return 0
}

func init() {
	proto.RegisterType((*TagTestReq)(nil), "userext.v1.TagTestReq")
	proto.RegisterType((*TagTestResp)(nil), "userext.v1.TagTestResp")
	proto.RegisterType((*TagTestResp_Data)(nil), "userext.v1.TagTestResp.Data")
}
func (m *TagTestReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TagTestReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTag(dAtA, i, uint64(m.Id))
	}
	return i, nil
}

func (m *TagTestResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TagTestResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTag(dAtA, i, uint64(m.Code))
	}
	if len(m.Msg) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTag(dAtA, i, uint64(len(m.Msg)))
		i += copy(dAtA[i:], m.Msg)
	}
	if m.Data != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTag(dAtA, i, uint64(m.Data.Size()))
		n1, err := m.Data.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	return i, nil
}

func (m *TagTestResp_Data) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TagTestResp_Data) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Aid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTag(dAtA, i, uint64(m.Aid))
	}
	if m.Action != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTag(dAtA, i, uint64(m.Action))
	}
	return i, nil
}

func encodeVarintTag(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *TagTestReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovTag(uint64(m.Id))
	}
	return n
}

func (m *TagTestResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovTag(uint64(m.Code))
	}
	l = len(m.Msg)
	if l > 0 {
		n += 1 + l + sovTag(uint64(l))
	}
	if m.Data != nil {
		l = m.Data.Size()
		n += 1 + l + sovTag(uint64(l))
	}
	return n
}

func (m *TagTestResp_Data) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Aid != 0 {
		n += 1 + sovTag(uint64(m.Aid))
	}
	if m.Action != 0 {
		n += 1 + sovTag(uint64(m.Action))
	}
	return n
}

func sovTag(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozTag(x uint64) (n int) {
	return sovTag(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *TagTestReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTag
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TagTestReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TagTestReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTag
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTag(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTag
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TagTestResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTag
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TagTestResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TagTestResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTag
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTag
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTag
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTag
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTag
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = &TagTestResp_Data{}
			}
			if err := m.Data.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTag(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTag
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TagTestResp_Data) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTag
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Data: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Data: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Aid", wireType)
			}
			m.Aid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTag
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Aid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Action", wireType)
			}
			m.Action = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTag
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Action |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTag(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTag
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTag(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTag
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTag
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTag
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthTag
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowTag
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipTag(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthTag = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTag   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("v1/Tag.proto", fileDescriptor_Tag_06332839907eeb47) }

var fileDescriptor_Tag_06332839907eeb47 = []byte{
	// 302 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x90, 0xb1, 0x4e, 0xf3, 0x30,
	0x14, 0x85, 0xeb, 0x24, 0xea, 0xff, 0x73, 0xcb, 0xe4, 0xa1, 0x94, 0xaa, 0x72, 0xaa, 0x8a, 0xa1,
	0x0b, 0xae, 0x5a, 0x06, 0x24, 0x06, 0x86, 0x08, 0x5e, 0xc0, 0xca, 0xc4, 0xe6, 0xd6, 0xc6, 0x78,
	0x28, 0x6e, 0x1b, 0x27, 0xe2, 0x31, 0x78, 0x2c, 0xd8, 0x3a, 0x32, 0x45, 0x28, 0xd9, 0xf2, 0x14,
	0xc8, 0x6e, 0x54, 0x18, 0x60, 0x39, 0xf6, 0xb9, 0x3a, 0x3e, 0xfe, 0x74, 0xe1, 0xb4, 0x98, 0xcf,
	0x52, 0xae, 0xe8, 0x66, 0x67, 0xac, 0xc1, 0x90, 0x67, 0x72, 0x27, 0x5f, 0x2c, 0x2d, 0xe6, 0xc3,
	0x4b, 0xa5, 0xed, 0x53, 0xbe, 0xa4, 0x2b, 0xb3, 0x9e, 0x29, 0xa3, 0xcc, 0xcc, 0x47, 0x96, 0xf9,
	0xa3, 0x77, 0xde, 0xf8, 0xdb, 0xe1, 0xe9, 0xe4, 0x02, 0x20, 0xe5, 0x2a, 0x95, 0x99, 0x65, 0x72,
	0x8b, 0xfb, 0x10, 0x68, 0x31, 0x40, 0x63, 0x34, 0x0d, 0x93, 0x6e, 0x53, 0xc6, 0x81, 0x16, 0x2c,
	0xd0, 0x62, 0xf2, 0x8e, 0xa0, 0x77, 0x8c, 0x65, 0x1b, 0x3c, 0x82, 0x68, 0x65, 0x84, 0x6c, 0x93,
	0xff, 0x9b, 0x32, 0xf6, 0x9e, 0x79, 0xc5, 0xe7, 0x10, 0xae, 0x33, 0x35, 0x08, 0xc6, 0x68, 0x7a,
	0x92, 0xfc, 0x6b, 0xca, 0xd8, 0x59, 0xe6, 0x04, 0xdf, 0x40, 0x24, 0xb8, 0xe5, 0x83, 0x70, 0x8c,
	0xa6, 0xbd, 0xc5, 0x88, 0x7e, 0x83, 0xd3, 0x1f, 0xfd, 0xf4, 0x8e, 0x5b, 0x7e, 0xa8, 0x75, 0x69,
	0xe6, 0x75, 0x78, 0x0f, 0x91, 0x9b, 0xbb, 0x7a, 0x7e, 0xa4, 0xf4, 0xf5, 0x5c, 0x0b, 0xe6, 0x04,
	0x4f, 0xa0, 0xcb, 0x57, 0x56, 0x9b, 0x67, 0xff, 0x79, 0x98, 0x40, 0x53, 0xc6, 0xed, 0x84, 0xb5,
	0xe7, 0xe2, 0x16, 0xc2, 0x94, 0x2b, 0x7c, 0x0d, 0x91, 0x95, 0x99, 0xc5, 0xfd, 0x5f, 0x19, 0xb6,
	0xc3, 0xb3, 0x3f, 0xd8, 0x92, 0xd1, 0x5b, 0x45, 0xd0, 0xbe, 0x22, 0xe8, 0xb3, 0x22, 0xe8, 0xb5,
	0x26, 0x9d, 0x7d, 0x4d, 0x3a, 0x1f, 0x35, 0xe9, 0x3c, 0x04, 0xc5, 0x7c, 0xd9, 0xf5, 0x6b, 0xbd,
	0xfa, 0x0a, 0x00, 0x00, 0xff, 0xff, 0x96, 0x74, 0x73, 0xcb, 0xa1, 0x01, 0x00, 0x00,
}
