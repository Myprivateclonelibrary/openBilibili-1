// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: v1/GrayRule.proto

package v1

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type GrayRuleGetByMarkReq struct {
	//
	Mark string `protobuf:"bytes,1,opt,name=mark,proto3" json:"mark"`
}

func (m *GrayRuleGetByMarkReq) Reset()         { *m = GrayRuleGetByMarkReq{} }
func (m *GrayRuleGetByMarkReq) String() string { return proto.CompactTextString(m) }
func (*GrayRuleGetByMarkReq) ProtoMessage()    {}
func (*GrayRuleGetByMarkReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_GrayRule_7e8c31590802899d, []int{0}
}
func (m *GrayRuleGetByMarkReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GrayRuleGetByMarkReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GrayRuleGetByMarkReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *GrayRuleGetByMarkReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GrayRuleGetByMarkReq.Merge(dst, src)
}
func (m *GrayRuleGetByMarkReq) XXX_Size() int {
	return m.Size()
}
func (m *GrayRuleGetByMarkReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GrayRuleGetByMarkReq.DiscardUnknown(m)
}

var xxx_messageInfo_GrayRuleGetByMarkReq proto.InternalMessageInfo

func (m *GrayRuleGetByMarkReq) GetMark() string {
	if m != nil {
		return m.Mark
	}
	return ""
}

type GrayRuleGetByMarkResp struct {
	// 返回code
	Code int64 `protobuf:"varint,1,opt,name=code,proto3" json:"code"`
	// 返回msg
	Msg string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg"`
	//
	Data *GrayRuleGetByMarkResp_Data `protobuf:"bytes,3,opt,name=data" json:"data"`
}

func (m *GrayRuleGetByMarkResp) Reset()         { *m = GrayRuleGetByMarkResp{} }
func (m *GrayRuleGetByMarkResp) String() string { return proto.CompactTextString(m) }
func (*GrayRuleGetByMarkResp) ProtoMessage()    {}
func (*GrayRuleGetByMarkResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_GrayRule_7e8c31590802899d, []int{1}
}
func (m *GrayRuleGetByMarkResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GrayRuleGetByMarkResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GrayRuleGetByMarkResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *GrayRuleGetByMarkResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GrayRuleGetByMarkResp.Merge(dst, src)
}
func (m *GrayRuleGetByMarkResp) XXX_Size() int {
	return m.Size()
}
func (m *GrayRuleGetByMarkResp) XXX_DiscardUnknown() {
	xxx_messageInfo_GrayRuleGetByMarkResp.DiscardUnknown(m)
}

var xxx_messageInfo_GrayRuleGetByMarkResp proto.InternalMessageInfo

func (m *GrayRuleGetByMarkResp) GetCode() int64 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *GrayRuleGetByMarkResp) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func (m *GrayRuleGetByMarkResp) GetData() *GrayRuleGetByMarkResp_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

type GrayRuleGetByMarkResp_Data struct {
	//
	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id"`
	//
	Mark string `protobuf:"bytes,2,opt,name=mark,proto3" json:"mark"`
	//
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name"`
	//
	Content string `protobuf:"bytes,4,opt,name=content,proto3" json:"content"`
}

func (m *GrayRuleGetByMarkResp_Data) Reset()         { *m = GrayRuleGetByMarkResp_Data{} }
func (m *GrayRuleGetByMarkResp_Data) String() string { return proto.CompactTextString(m) }
func (*GrayRuleGetByMarkResp_Data) ProtoMessage()    {}
func (*GrayRuleGetByMarkResp_Data) Descriptor() ([]byte, []int) {
	return fileDescriptor_GrayRule_7e8c31590802899d, []int{1, 0}
}
func (m *GrayRuleGetByMarkResp_Data) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GrayRuleGetByMarkResp_Data) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GrayRuleGetByMarkResp_Data.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *GrayRuleGetByMarkResp_Data) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GrayRuleGetByMarkResp_Data.Merge(dst, src)
}
func (m *GrayRuleGetByMarkResp_Data) XXX_Size() int {
	return m.Size()
}
func (m *GrayRuleGetByMarkResp_Data) XXX_DiscardUnknown() {
	xxx_messageInfo_GrayRuleGetByMarkResp_Data.DiscardUnknown(m)
}

var xxx_messageInfo_GrayRuleGetByMarkResp_Data proto.InternalMessageInfo

func (m *GrayRuleGetByMarkResp_Data) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *GrayRuleGetByMarkResp_Data) GetMark() string {
	if m != nil {
		return m.Mark
	}
	return ""
}

func (m *GrayRuleGetByMarkResp_Data) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *GrayRuleGetByMarkResp_Data) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

func init() {
	proto.RegisterType((*GrayRuleGetByMarkReq)(nil), "userext.v1.GrayRuleGetByMarkReq")
	proto.RegisterType((*GrayRuleGetByMarkResp)(nil), "userext.v1.GrayRuleGetByMarkResp")
	proto.RegisterType((*GrayRuleGetByMarkResp_Data)(nil), "userext.v1.GrayRuleGetByMarkResp.Data")
}
func (m *GrayRuleGetByMarkReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GrayRuleGetByMarkReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Mark) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintGrayRule(dAtA, i, uint64(len(m.Mark)))
		i += copy(dAtA[i:], m.Mark)
	}
	return i, nil
}

func (m *GrayRuleGetByMarkResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GrayRuleGetByMarkResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGrayRule(dAtA, i, uint64(m.Code))
	}
	if len(m.Msg) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintGrayRule(dAtA, i, uint64(len(m.Msg)))
		i += copy(dAtA[i:], m.Msg)
	}
	if m.Data != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintGrayRule(dAtA, i, uint64(m.Data.Size()))
		n1, err := m.Data.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	return i, nil
}

func (m *GrayRuleGetByMarkResp_Data) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GrayRuleGetByMarkResp_Data) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGrayRule(dAtA, i, uint64(m.Id))
	}
	if len(m.Mark) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintGrayRule(dAtA, i, uint64(len(m.Mark)))
		i += copy(dAtA[i:], m.Mark)
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintGrayRule(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.Content) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintGrayRule(dAtA, i, uint64(len(m.Content)))
		i += copy(dAtA[i:], m.Content)
	}
	return i, nil
}

func encodeVarintGrayRule(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *GrayRuleGetByMarkReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Mark)
	if l > 0 {
		n += 1 + l + sovGrayRule(uint64(l))
	}
	return n
}

func (m *GrayRuleGetByMarkResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovGrayRule(uint64(m.Code))
	}
	l = len(m.Msg)
	if l > 0 {
		n += 1 + l + sovGrayRule(uint64(l))
	}
	if m.Data != nil {
		l = m.Data.Size()
		n += 1 + l + sovGrayRule(uint64(l))
	}
	return n
}

func (m *GrayRuleGetByMarkResp_Data) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovGrayRule(uint64(m.Id))
	}
	l = len(m.Mark)
	if l > 0 {
		n += 1 + l + sovGrayRule(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovGrayRule(uint64(l))
	}
	l = len(m.Content)
	if l > 0 {
		n += 1 + l + sovGrayRule(uint64(l))
	}
	return n
}

func sovGrayRule(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozGrayRule(x uint64) (n int) {
	return sovGrayRule(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *GrayRuleGetByMarkReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGrayRule
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GrayRuleGetByMarkReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GrayRuleGetByMarkReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mark", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGrayRule
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGrayRule
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Mark = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGrayRule(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGrayRule
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GrayRuleGetByMarkResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGrayRule
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GrayRuleGetByMarkResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GrayRuleGetByMarkResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGrayRule
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGrayRule
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGrayRule
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGrayRule
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGrayRule
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = &GrayRuleGetByMarkResp_Data{}
			}
			if err := m.Data.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGrayRule(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGrayRule
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GrayRuleGetByMarkResp_Data) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGrayRule
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Data: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Data: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGrayRule
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mark", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGrayRule
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGrayRule
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Mark = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGrayRule
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGrayRule
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGrayRule
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGrayRule
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Content = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGrayRule(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGrayRule
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGrayRule(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGrayRule
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGrayRule
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGrayRule
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthGrayRule
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowGrayRule
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipGrayRule(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthGrayRule = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGrayRule   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("v1/GrayRule.proto", fileDescriptor_GrayRule_7e8c31590802899d) }

var fileDescriptor_GrayRule_7e8c31590802899d = []byte{
	// 333 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x51, 0x4d, 0x4f, 0xc2, 0x40,
	0x10, 0x65, 0x97, 0x86, 0x8f, 0xe1, 0xe4, 0x46, 0x4d, 0x25, 0xa4, 0x45, 0x12, 0x0d, 0x17, 0x4b,
	0x40, 0x7f, 0x01, 0x21, 0xe1, 0x64, 0x62, 0xf6, 0x68, 0xbc, 0x2c, 0x74, 0xad, 0x0d, 0x96, 0x85,
	0xb2, 0x25, 0x72, 0xf4, 0x1f, 0x78, 0xf6, 0x17, 0x79, 0xe4, 0xe8, 0xa9, 0x31, 0x70, 0xeb, 0xaf,
	0x30, 0x3b, 0x50, 0xbd, 0x90, 0x70, 0x79, 0x99, 0xb7, 0x33, 0x6f, 0xe6, 0xbd, 0x2c, 0x9c, 0x2c,
	0xbb, 0x9d, 0x61, 0x2c, 0x56, 0x3c, 0x79, 0x95, 0xde, 0x2c, 0x56, 0x5a, 0x31, 0x48, 0x16, 0x32,
	0x96, 0x6f, 0xda, 0x5b, 0x76, 0xeb, 0x37, 0x41, 0xa8, 0x5f, 0x92, 0x91, 0x37, 0x56, 0x51, 0x27,
	0x50, 0x81, 0xea, 0xe0, 0xc8, 0x28, 0x79, 0x46, 0x86, 0x04, 0xab, 0x9d, 0xb4, 0x75, 0x07, 0xa7,
	0xf9, 0xb2, 0xa1, 0xd4, 0xfd, 0xd5, 0xbd, 0x88, 0x27, 0x5c, 0xce, 0x59, 0x03, 0xac, 0x48, 0xc4,
	0x13, 0x9b, 0x34, 0x49, 0xbb, 0xda, 0xaf, 0x64, 0xa9, 0x8b, 0x9c, 0x23, 0xb6, 0x3e, 0x29, 0x9c,
	0x1d, 0x90, 0x2d, 0x66, 0x46, 0x37, 0x56, 0xbe, 0x44, 0x5d, 0x71, 0xa7, 0x33, 0x9c, 0x23, 0xb2,
	0x0b, 0x28, 0x46, 0x8b, 0xc0, 0xa6, 0xb8, 0xb4, 0x9c, 0xa5, 0xae, 0xa1, 0xdc, 0x00, 0x1b, 0x80,
	0xe5, 0x0b, 0x2d, 0xec, 0x62, 0x93, 0xb4, 0x6b, 0xbd, 0x6b, 0xef, 0x3f, 0x92, 0x77, 0xf0, 0x92,
	0x37, 0x10, 0x5a, 0xec, 0x0e, 0x18, 0x1d, 0x47, 0xac, 0xbf, 0x13, 0xb0, 0x4c, 0x83, 0x9d, 0x03,
	0x0d, 0xfd, 0xbd, 0x8b, 0x52, 0x96, 0xba, 0x34, 0xf4, 0x39, 0x0d, 0xfd, 0xbf, 0x5c, 0xf4, 0x50,
	0x2e, 0xd3, 0x9d, 0x8a, 0x48, 0xa2, 0x89, 0x7d, 0xd7, 0x70, 0x8e, 0xc8, 0xae, 0xa0, 0x3c, 0x56,
	0x53, 0x2d, 0xa7, 0xda, 0xb6, 0x70, 0xa0, 0x96, 0xa5, 0x6e, 0xfe, 0xc4, 0xf3, 0xa2, 0xf7, 0x04,
	0x95, 0xdc, 0x31, 0x7b, 0x80, 0x6a, 0x90, 0xbb, 0x66, 0xcd, 0x23, 0xa1, 0xe6, 0xf5, 0xcb, 0xa3,
	0xb1, 0xfb, 0x8d, 0xaf, 0x8d, 0x43, 0xd6, 0x1b, 0x87, 0xfc, 0x6c, 0x1c, 0xf2, 0xb1, 0x75, 0x0a,
	0xeb, 0xad, 0x53, 0xf8, 0xde, 0x3a, 0x85, 0x47, 0xba, 0xec, 0x8e, 0x4a, 0xf8, 0xab, 0xb7, 0xbf,
	0x01, 0x00, 0x00, 0xff, 0xff, 0x96, 0xcb, 0x53, 0xa2, 0x25, 0x02, 0x00, 0x00,
}
