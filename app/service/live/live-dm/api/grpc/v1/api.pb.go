// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: app/service/live/live-dm/api/grpc/v1/api.proto

package v1

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type SendMsgReq struct {
	Uid                  int64    `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty" form:"uid" validate:"required"`
	Roomid               int64    `protobuf:"varint,2,opt,name=roomid,proto3" json:"roomid,omitempty" form:"roomid" validate:"required"`
	Msg                  string   `protobuf:"bytes,3,opt,name=msg,proto3" json:"msg,omitempty" form:"msg" validate:"required"`
	Rnd                  string   `protobuf:"bytes,4,opt,name=rnd,proto3" json:"rnd,omitempty" form:"rnd"`
	Ip                   string   `protobuf:"bytes,5,opt,name=ip,proto3" json:"ip,omitempty" form:"ip"`
	Fontsize             int64    `protobuf:"varint,7,opt,name=fontsize,proto3" json:"fontsize,omitempty" form:"fontsize" validate:"gte=0"`
	Mode                 int64    `protobuf:"varint,8,opt,name=mode,proto3" json:"mode,omitempty" form:"mode" validate:"gte=0"`
	Platform             string   `protobuf:"bytes,9,opt,name=platform,proto3" json:"platform,omitempty" form:"platform"`
	Msgtype              int64    `protobuf:"varint,10,opt,name=msgtype,proto3" json:"msgtype,omitempty" form:"msgtype" validate:"gte=0"`
	Bubble               int64    `protobuf:"varint,11,opt,name=bubble,proto3" json:"bubble,omitempty" form:"bubble"`
	Lancer               *Lancer  `protobuf:"bytes,12,opt,name=lancer" json:"lancer,omitempty" form:"lancer"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SendMsgReq) Reset()         { *m = SendMsgReq{} }
func (m *SendMsgReq) String() string { return proto.CompactTextString(m) }
func (*SendMsgReq) ProtoMessage()    {}
func (*SendMsgReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_3321a2d8a2cdd312, []int{0}
}
func (m *SendMsgReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SendMsgReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SendMsgReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *SendMsgReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SendMsgReq.Merge(dst, src)
}
func (m *SendMsgReq) XXX_Size() int {
	return m.Size()
}
func (m *SendMsgReq) XXX_DiscardUnknown() {
	xxx_messageInfo_SendMsgReq.DiscardUnknown(m)
}

var xxx_messageInfo_SendMsgReq proto.InternalMessageInfo

func (m *SendMsgReq) GetUid() int64 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *SendMsgReq) GetRoomid() int64 {
	if m != nil {
		return m.Roomid
	}
	return 0
}

func (m *SendMsgReq) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func (m *SendMsgReq) GetRnd() string {
	if m != nil {
		return m.Rnd
	}
	return ""
}

func (m *SendMsgReq) GetIp() string {
	if m != nil {
		return m.Ip
	}
	return ""
}

func (m *SendMsgReq) GetFontsize() int64 {
	if m != nil {
		return m.Fontsize
	}
	return 0
}

func (m *SendMsgReq) GetMode() int64 {
	if m != nil {
		return m.Mode
	}
	return 0
}

func (m *SendMsgReq) GetPlatform() string {
	if m != nil {
		return m.Platform
	}
	return ""
}

func (m *SendMsgReq) GetMsgtype() int64 {
	if m != nil {
		return m.Msgtype
	}
	return 0
}

func (m *SendMsgReq) GetBubble() int64 {
	if m != nil {
		return m.Bubble
	}
	return 0
}

func (m *SendMsgReq) GetLancer() *Lancer {
	if m != nil {
		return m.Lancer
	}
	return nil
}

type Lancer struct {
	Buvid                string   `protobuf:"bytes,1,opt,name=buvid,proto3" json:"buvid,omitempty" form:"buvid"`
	UserAgent            string   `protobuf:"bytes,2,opt,name=userAgent,proto3" json:"userAgent,omitempty" form:"userAgent"`
	Refer                string   `protobuf:"bytes,3,opt,name=refer,proto3" json:"refer,omitempty" form:"refer"`
	Cookie               string   `protobuf:"bytes,4,opt,name=cookie,proto3" json:"cookie,omitempty" form:"cookie"`
	Build                int64    `protobuf:"varint,5,opt,name=build,proto3" json:"build,omitempty" form:"build"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Lancer) Reset()         { *m = Lancer{} }
func (m *Lancer) String() string { return proto.CompactTextString(m) }
func (*Lancer) ProtoMessage()    {}
func (*Lancer) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_3321a2d8a2cdd312, []int{1}
}
func (m *Lancer) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Lancer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Lancer.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Lancer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Lancer.Merge(dst, src)
}
func (m *Lancer) XXX_Size() int {
	return m.Size()
}
func (m *Lancer) XXX_DiscardUnknown() {
	xxx_messageInfo_Lancer.DiscardUnknown(m)
}

var xxx_messageInfo_Lancer proto.InternalMessageInfo

func (m *Lancer) GetBuvid() string {
	if m != nil {
		return m.Buvid
	}
	return ""
}

func (m *Lancer) GetUserAgent() string {
	if m != nil {
		return m.UserAgent
	}
	return ""
}

func (m *Lancer) GetRefer() string {
	if m != nil {
		return m.Refer
	}
	return ""
}

func (m *Lancer) GetCookie() string {
	if m != nil {
		return m.Cookie
	}
	return ""
}

func (m *Lancer) GetBuild() int64 {
	if m != nil {
		return m.Build
	}
	return 0
}

type SendMsgResp struct {
	IsLimit              bool     `protobuf:"varint,1,opt,name=isLimit,proto3" json:"islimit"`
	LimitMsg             string   `protobuf:"bytes,2,opt,name=limitMsg,proto3" json:"limitmsg"`
	Code                 int32    `protobuf:"varint,3,opt,name=code,proto3" json:"code"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SendMsgResp) Reset()         { *m = SendMsgResp{} }
func (m *SendMsgResp) String() string { return proto.CompactTextString(m) }
func (*SendMsgResp) ProtoMessage()    {}
func (*SendMsgResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_3321a2d8a2cdd312, []int{2}
}
func (m *SendMsgResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SendMsgResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SendMsgResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *SendMsgResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SendMsgResp.Merge(dst, src)
}
func (m *SendMsgResp) XXX_Size() int {
	return m.Size()
}
func (m *SendMsgResp) XXX_DiscardUnknown() {
	xxx_messageInfo_SendMsgResp.DiscardUnknown(m)
}

var xxx_messageInfo_SendMsgResp proto.InternalMessageInfo

func (m *SendMsgResp) GetIsLimit() bool {
	if m != nil {
		return m.IsLimit
	}
	return false
}

func (m *SendMsgResp) GetLimitMsg() string {
	if m != nil {
		return m.LimitMsg
	}
	return ""
}

func (m *SendMsgResp) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

type HistoryReq struct {
	Roomid               int64    `protobuf:"varint,1,opt,name=roomid,proto3" json:"roomid,omitempty" form:"roomid" validate:"required"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HistoryReq) Reset()         { *m = HistoryReq{} }
func (m *HistoryReq) String() string { return proto.CompactTextString(m) }
func (*HistoryReq) ProtoMessage()    {}
func (*HistoryReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_3321a2d8a2cdd312, []int{3}
}
func (m *HistoryReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HistoryReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HistoryReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *HistoryReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HistoryReq.Merge(dst, src)
}
func (m *HistoryReq) XXX_Size() int {
	return m.Size()
}
func (m *HistoryReq) XXX_DiscardUnknown() {
	xxx_messageInfo_HistoryReq.DiscardUnknown(m)
}

var xxx_messageInfo_HistoryReq proto.InternalMessageInfo

func (m *HistoryReq) GetRoomid() int64 {
	if m != nil {
		return m.Roomid
	}
	return 0
}

type HistoryResp struct {
	Room                 []string `protobuf:"bytes,1,rep,name=room" json:"room"`
	Admin                []string `protobuf:"bytes,2,rep,name=admin" json:"admin"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HistoryResp) Reset()         { *m = HistoryResp{} }
func (m *HistoryResp) String() string { return proto.CompactTextString(m) }
func (*HistoryResp) ProtoMessage()    {}
func (*HistoryResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_3321a2d8a2cdd312, []int{4}
}
func (m *HistoryResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HistoryResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HistoryResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *HistoryResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HistoryResp.Merge(dst, src)
}
func (m *HistoryResp) XXX_Size() int {
	return m.Size()
}
func (m *HistoryResp) XXX_DiscardUnknown() {
	xxx_messageInfo_HistoryResp.DiscardUnknown(m)
}

var xxx_messageInfo_HistoryResp proto.InternalMessageInfo

func (m *HistoryResp) GetRoom() []string {
	if m != nil {
		return m.Room
	}
	return nil
}

func (m *HistoryResp) GetAdmin() []string {
	if m != nil {
		return m.Admin
	}
	return nil
}

type ErrMsg struct {
	Message              string   `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ErrMsg) Reset()         { *m = ErrMsg{} }
func (m *ErrMsg) String() string { return proto.CompactTextString(m) }
func (*ErrMsg) ProtoMessage()    {}
func (*ErrMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_3321a2d8a2cdd312, []int{5}
}
func (m *ErrMsg) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ErrMsg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ErrMsg.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ErrMsg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ErrMsg.Merge(dst, src)
}
func (m *ErrMsg) XXX_Size() int {
	return m.Size()
}
func (m *ErrMsg) XXX_DiscardUnknown() {
	xxx_messageInfo_ErrMsg.DiscardUnknown(m)
}

var xxx_messageInfo_ErrMsg proto.InternalMessageInfo

func (m *ErrMsg) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func init() {
	proto.RegisterType((*SendMsgReq)(nil), "live.livedm.v1.SendMsgReq")
	proto.RegisterType((*Lancer)(nil), "live.livedm.v1.lancer")
	proto.RegisterType((*SendMsgResp)(nil), "live.livedm.v1.SendMsgResp")
	proto.RegisterType((*HistoryReq)(nil), "live.livedm.v1.HistoryReq")
	proto.RegisterType((*HistoryResp)(nil), "live.livedm.v1.HistoryResp")
	proto.RegisterType((*ErrMsg)(nil), "live.livedm.v1.ErrMsg")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// DMClient is the client API for DM service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DMClient interface {
	SendMsg(ctx context.Context, in *SendMsgReq, opts ...grpc.CallOption) (*SendMsgResp, error)
	GetHistory(ctx context.Context, in *HistoryReq, opts ...grpc.CallOption) (*HistoryResp, error)
}

type dMClient struct {
	cc *grpc.ClientConn
}

func NewDMClient(cc *grpc.ClientConn) DMClient {
	return &dMClient{cc}
}

func (c *dMClient) SendMsg(ctx context.Context, in *SendMsgReq, opts ...grpc.CallOption) (*SendMsgResp, error) {
	out := new(SendMsgResp)
	err := c.cc.Invoke(ctx, "/live.livedm.v1.DM/SendMsg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dMClient) GetHistory(ctx context.Context, in *HistoryReq, opts ...grpc.CallOption) (*HistoryResp, error) {
	out := new(HistoryResp)
	err := c.cc.Invoke(ctx, "/live.livedm.v1.DM/GetHistory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DMServer is the server API for DM service.
type DMServer interface {
	SendMsg(context.Context, *SendMsgReq) (*SendMsgResp, error)
	GetHistory(context.Context, *HistoryReq) (*HistoryResp, error)
}

func RegisterDMServer(s *grpc.Server, srv DMServer) {
	s.RegisterService(&_DM_serviceDesc, srv)
}

func _DM_SendMsg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendMsgReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DMServer).SendMsg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/live.livedm.v1.DM/SendMsg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DMServer).SendMsg(ctx, req.(*SendMsgReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DM_GetHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HistoryReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DMServer).GetHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/live.livedm.v1.DM/GetHistory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DMServer).GetHistory(ctx, req.(*HistoryReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _DM_serviceDesc = grpc.ServiceDesc{
	ServiceName: "live.livedm.v1.DM",
	HandlerType: (*DMServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendMsg",
			Handler:    _DM_SendMsg_Handler,
		},
		{
			MethodName: "GetHistory",
			Handler:    _DM_GetHistory_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "app/service/live/live-dm/api/grpc/v1/api.proto",
}

func (m *SendMsgReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SendMsgReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Uid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Uid))
	}
	if m.Roomid != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Roomid))
	}
	if len(m.Msg) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Msg)))
		i += copy(dAtA[i:], m.Msg)
	}
	if len(m.Rnd) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Rnd)))
		i += copy(dAtA[i:], m.Rnd)
	}
	if len(m.Ip) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Ip)))
		i += copy(dAtA[i:], m.Ip)
	}
	if m.Fontsize != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Fontsize))
	}
	if m.Mode != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Mode))
	}
	if len(m.Platform) > 0 {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Platform)))
		i += copy(dAtA[i:], m.Platform)
	}
	if m.Msgtype != 0 {
		dAtA[i] = 0x50
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Msgtype))
	}
	if m.Bubble != 0 {
		dAtA[i] = 0x58
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Bubble))
	}
	if m.Lancer != nil {
		dAtA[i] = 0x62
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Lancer.Size()))
		n1, err := m.Lancer.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Lancer) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Lancer) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Buvid) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Buvid)))
		i += copy(dAtA[i:], m.Buvid)
	}
	if len(m.UserAgent) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.UserAgent)))
		i += copy(dAtA[i:], m.UserAgent)
	}
	if len(m.Refer) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Refer)))
		i += copy(dAtA[i:], m.Refer)
	}
	if len(m.Cookie) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Cookie)))
		i += copy(dAtA[i:], m.Cookie)
	}
	if m.Build != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Build))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *SendMsgResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SendMsgResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.IsLimit {
		dAtA[i] = 0x8
		i++
		if m.IsLimit {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.LimitMsg) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.LimitMsg)))
		i += copy(dAtA[i:], m.LimitMsg)
	}
	if m.Code != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Code))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *HistoryReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HistoryReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Roomid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Roomid))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *HistoryResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HistoryResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Room) > 0 {
		for _, s := range m.Room {
			dAtA[i] = 0xa
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.Admin) > 0 {
		for _, s := range m.Admin {
			dAtA[i] = 0x12
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ErrMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ErrMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Message) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Message)))
		i += copy(dAtA[i:], m.Message)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintApi(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *SendMsgReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Uid != 0 {
		n += 1 + sovApi(uint64(m.Uid))
	}
	if m.Roomid != 0 {
		n += 1 + sovApi(uint64(m.Roomid))
	}
	l = len(m.Msg)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Rnd)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Ip)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Fontsize != 0 {
		n += 1 + sovApi(uint64(m.Fontsize))
	}
	if m.Mode != 0 {
		n += 1 + sovApi(uint64(m.Mode))
	}
	l = len(m.Platform)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Msgtype != 0 {
		n += 1 + sovApi(uint64(m.Msgtype))
	}
	if m.Bubble != 0 {
		n += 1 + sovApi(uint64(m.Bubble))
	}
	if m.Lancer != nil {
		l = m.Lancer.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Lancer) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Buvid)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.UserAgent)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Refer)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Cookie)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Build != 0 {
		n += 1 + sovApi(uint64(m.Build))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SendMsgResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IsLimit {
		n += 2
	}
	l = len(m.LimitMsg)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Code != 0 {
		n += 1 + sovApi(uint64(m.Code))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *HistoryReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Roomid != 0 {
		n += 1 + sovApi(uint64(m.Roomid))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *HistoryResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Room) > 0 {
		for _, s := range m.Room {
			l = len(s)
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if len(m.Admin) > 0 {
		for _, s := range m.Admin {
			l = len(s)
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ErrMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovApi(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozApi(x uint64) (n int) {
	return sovApi(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *SendMsgReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SendMsgReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SendMsgReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Roomid", wireType)
			}
			m.Roomid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Roomid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rnd", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Rnd = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ip", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ip = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fontsize", wireType)
			}
			m.Fontsize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Fontsize |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mode", wireType)
			}
			m.Mode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mode |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Platform", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Platform = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msgtype", wireType)
			}
			m.Msgtype = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Msgtype |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bubble", wireType)
			}
			m.Bubble = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Bubble |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lancer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Lancer == nil {
				m.Lancer = &Lancer{}
			}
			if err := m.Lancer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Lancer) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: lancer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: lancer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Buvid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Buvid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserAgent", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserAgent = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Refer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Refer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cookie", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cookie = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Build", wireType)
			}
			m.Build = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Build |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SendMsgResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SendMsgResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SendMsgResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsLimit", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsLimit = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LimitMsg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LimitMsg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HistoryReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HistoryReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HistoryReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Roomid", wireType)
			}
			m.Roomid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Roomid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HistoryResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HistoryResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HistoryResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Room", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Room = append(m.Room, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Admin", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Admin = append(m.Admin, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ErrMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ErrMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ErrMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipApi(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowApi
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowApi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowApi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthApi
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowApi
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipApi(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthApi = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowApi   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("app/service/live/live-dm/api/grpc/v1/api.proto", fileDescriptor_api_3321a2d8a2cdd312)
}

var fileDescriptor_api_3321a2d8a2cdd312 = []byte{
	// 720 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x54, 0xcd, 0x6e, 0xec, 0x34,
	0x18, 0x55, 0xe6, 0x3f, 0xdf, 0xb4, 0xa5, 0x18, 0x84, 0xa2, 0x52, 0xc6, 0xc1, 0x50, 0x34, 0x2c,
	0x3a, 0xa1, 0xa5, 0xab, 0x4a, 0x95, 0xe8, 0x88, 0x0a, 0x24, 0xda, 0x8d, 0xd9, 0xb1, 0xcb, 0x4c,
	0x3c, 0xc1, 0x22, 0x7f, 0xb5, 0x93, 0x48, 0x45, 0xbc, 0x03, 0xaf, 0xc5, 0x0a, 0xdd, 0x27, 0xc8,
	0xbd, 0xea, 0x72, 0x96, 0x79, 0x82, 0x2b, 0xdb, 0xc9, 0xcc, 0xf4, 0xb6, 0xdd, 0xdc, 0x8d, 0x13,
	0x7f, 0xe7, 0x9c, 0xef, 0xc7, 0x39, 0x0e, 0xcc, 0xfc, 0x2c, 0xf3, 0x24, 0x13, 0x25, 0x5f, 0x32,
	0x2f, 0xe2, 0xa5, 0x59, 0x4e, 0x83, 0xd8, 0xf3, 0x33, 0xee, 0x85, 0x22, 0x5b, 0x7a, 0xe5, 0x99,
	0x7a, 0x9f, 0x65, 0x22, 0xcd, 0x53, 0x74, 0xa0, 0xe0, 0x99, 0x5a, 0x82, 0x78, 0x56, 0x9e, 0x1d,
	0x9d, 0x86, 0x3c, 0xff, 0xb3, 0x58, 0xcc, 0x96, 0x69, 0xec, 0x85, 0x69, 0x98, 0x7a, 0x9a, 0xb6,
	0x28, 0x56, 0x7a, 0xa7, 0x37, 0xfa, 0xcd, 0xc8, 0xc9, 0xff, 0x3d, 0x80, 0xdf, 0x59, 0x12, 0xdc,
	0xc9, 0x90, 0xb2, 0x7b, 0x74, 0x01, 0xdd, 0x82, 0x07, 0x8e, 0xe5, 0x5a, 0xd3, 0xee, 0x9c, 0xd4,
	0x15, 0x9e, 0xac, 0x52, 0x11, 0x5f, 0x92, 0x82, 0x07, 0xc4, 0x2d, 0xfd, 0x88, 0x07, 0x7e, 0xce,
	0x2e, 0x89, 0x60, 0xf7, 0x05, 0x17, 0x2c, 0x20, 0x54, 0xd1, 0xd1, 0x15, 0x0c, 0x44, 0x9a, 0xc6,
	0x3c, 0x70, 0x3a, 0x5a, 0x78, 0x52, 0x57, 0xf8, 0x6b, 0x23, 0x34, 0xf1, 0x97, 0xb5, 0x8d, 0x48,
	0x15, 0x8d, 0x65, 0xe8, 0x74, 0x5d, 0x6b, 0x6a, 0xef, 0x16, 0x8d, 0x65, 0xf8, 0x4a, 0xd1, 0x58,
	0x86, 0xc8, 0x85, 0xae, 0x48, 0x02, 0xa7, 0xa7, 0x55, 0x07, 0x75, 0x85, 0xa1, 0xa9, 0x98, 0x28,
	0x86, 0x48, 0x02, 0xf4, 0x15, 0x74, 0x78, 0xe6, 0xf4, 0x35, 0x61, 0xbf, 0xae, 0xb0, 0x6d, 0x08,
	0x3c, 0x23, 0xb4, 0xc3, 0x33, 0xf4, 0x13, 0x8c, 0x56, 0x69, 0x92, 0x4b, 0xfe, 0x37, 0x73, 0x86,
	0xba, 0xef, 0x6f, 0xeb, 0x0a, 0xbb, 0x86, 0xd4, 0x22, 0xbb, 0x0d, 0x84, 0x39, 0xbb, 0xfa, 0x81,
	0xd0, 0x8d, 0x0a, 0x5d, 0x40, 0x2f, 0x4e, 0x03, 0xe6, 0x8c, 0xb4, 0xda, 0xad, 0x2b, 0x7c, 0xdc,
	0x74, 0x9e, 0x06, 0x2f, 0x29, 0x35, 0x1b, 0x79, 0x30, 0xca, 0x22, 0x3f, 0x57, 0x4c, 0xc7, 0xd6,
	0xcd, 0x7d, 0x56, 0x57, 0xf8, 0x13, 0xa3, 0x6c, 0x11, 0x42, 0x37, 0x24, 0x74, 0x05, 0xc3, 0x58,
	0x86, 0xf9, 0x43, 0xc6, 0x1c, 0xd0, 0x95, 0xbe, 0xa9, 0x2b, 0x8c, 0x37, 0x67, 0xa4, 0x80, 0x17,
	0x8a, 0xb5, 0x1a, 0xf4, 0x3d, 0x0c, 0x16, 0xc5, 0x62, 0x11, 0x31, 0x67, 0xac, 0xd5, 0x9f, 0xd6,
	0x15, 0xde, 0x37, 0x6a, 0x13, 0x27, 0xb4, 0x21, 0xa0, 0x6b, 0x18, 0x44, 0x7e, 0xb2, 0x64, 0xc2,
	0xd9, 0x73, 0xad, 0xe9, 0xf8, 0xfc, 0x8b, 0xd9, 0x53, 0x77, 0xcd, 0x0c, 0xba, 0x9b, 0xc2, 0x44,
	0x08, 0x6d, 0x84, 0xe4, 0xad, 0xd5, 0xe6, 0x40, 0xdf, 0x41, 0x7f, 0x51, 0x94, 0x8d, 0x9d, 0xec,
	0xf9, 0x61, 0x5d, 0xe1, 0xbd, 0xb6, 0x6e, 0xc9, 0x03, 0x42, 0x0d, 0x8c, 0xce, 0xc1, 0x2e, 0x24,
	0x13, 0xd7, 0x21, 0x4b, 0x72, 0xed, 0x20, 0x7b, 0xfe, 0x79, 0x5d, 0xe1, 0xc3, 0xc6, 0x7a, 0x2d,
	0x44, 0xe8, 0x96, 0xa6, 0x72, 0x0b, 0xb6, 0x62, 0xa2, 0x71, 0xcd, 0x4e, 0x6e, 0x1d, 0x26, 0xd4,
	0xc0, 0x6a, 0xf8, 0x65, 0x9a, 0xfe, 0xc5, 0x59, 0x63, 0x94, 0x9d, 0xce, 0x4d, 0x9c, 0xd0, 0x86,
	0x60, 0xda, 0xe5, 0x51, 0xa0, 0x1d, 0xd3, 0x7d, 0xda, 0x2e, 0x8f, 0x4c, 0xbb, 0xea, 0xf9, 0x0f,
	0x8c, 0x37, 0x37, 0x46, 0x66, 0xe8, 0x04, 0x86, 0x5c, 0xde, 0xf2, 0x98, 0xe7, 0x7a, 0xce, 0xd1,
	0x7c, 0xbc, 0xae, 0xf0, 0x90, 0xcb, 0x48, 0x85, 0x68, 0x8b, 0xa1, 0x29, 0x8c, 0x74, 0xe4, 0x4e,
	0x86, 0xcd, 0x8c, 0x7b, 0xeb, 0x0a, 0x9b, 0x58, 0x2c, 0x43, 0xba, 0x41, 0xd1, 0x31, 0xf4, 0x96,
	0xca, 0x55, 0x6a, 0xb2, 0xfe, 0x7c, 0xb4, 0xae, 0xb0, 0xde, 0x53, 0xbd, 0x92, 0xdf, 0x00, 0x7e,
	0xe5, 0x32, 0x4f, 0xc5, 0x83, 0xba, 0xaf, 0xdb, 0x9b, 0x67, 0x7d, 0xc4, 0xcd, 0x23, 0xb7, 0x30,
	0xde, 0x24, 0x93, 0x99, 0xaa, 0xac, 0x00, 0xc7, 0x72, 0xbb, 0x53, 0xdb, 0x54, 0x56, 0x7b, 0xaa,
	0x57, 0x84, 0xa1, 0xef, 0x07, 0x31, 0x4f, 0x9c, 0x8e, 0x86, 0xed, 0x75, 0x85, 0x4d, 0x80, 0x9a,
	0x07, 0x21, 0x30, 0xb8, 0x11, 0x42, 0x8d, 0xe0, 0xc0, 0x30, 0x66, 0x52, 0xfa, 0x21, 0x33, 0xdf,
	0x9e, 0xb6, 0xdb, 0xf3, 0x7f, 0x2d, 0xe8, 0xfc, 0x7c, 0x87, 0xe6, 0x30, 0x6c, 0xce, 0x10, 0x1d,
	0x7d, 0xe8, 0xb1, 0xed, 0xef, 0xe8, 0xe8, 0xcb, 0x57, 0x31, 0x99, 0xa1, 0x1b, 0x80, 0x5f, 0x58,
	0xde, 0xf4, 0xff, 0x3c, 0xcd, 0xf6, 0x94, 0x9e, 0xa7, 0xd9, 0x19, 0x7a, 0x7e, 0xf8, 0xdf, 0xe3,
	0xc4, 0x7a, 0xf3, 0x38, 0xb1, 0xde, 0x3d, 0x4e, 0xac, 0x3f, 0x3a, 0xe5, 0xd9, 0x62, 0xa0, 0x7f,
	0x8d, 0x3f, 0xbe, 0x0f, 0x00, 0x00, 0xff, 0xff, 0xb3, 0xad, 0x8d, 0xfc, 0x8b, 0x05, 0x00, 0x00,
}
