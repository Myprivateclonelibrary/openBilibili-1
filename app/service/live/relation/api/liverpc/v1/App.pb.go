// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: v1/App.proto

package v1

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type AppLiveHomePageReq struct {
	// 页号
	RelationPage int64 `protobuf:"varint,1,opt,name=relation_page,json=relationPage,proto3" json:"relation_page"`
}

func (m *AppLiveHomePageReq) Reset()         { *m = AppLiveHomePageReq{} }
func (m *AppLiveHomePageReq) String() string { return proto.CompactTextString(m) }
func (*AppLiveHomePageReq) ProtoMessage()    {}
func (*AppLiveHomePageReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_App_132d75cec33ddf71, []int{0}
}
func (m *AppLiveHomePageReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AppLiveHomePageReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AppLiveHomePageReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *AppLiveHomePageReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AppLiveHomePageReq.Merge(dst, src)
}
func (m *AppLiveHomePageReq) XXX_Size() int {
	return m.Size()
}
func (m *AppLiveHomePageReq) XXX_DiscardUnknown() {
	xxx_messageInfo_AppLiveHomePageReq.DiscardUnknown(m)
}

var xxx_messageInfo_AppLiveHomePageReq proto.InternalMessageInfo

func (m *AppLiveHomePageReq) GetRelationPage() int64 {
	if m != nil {
		return m.RelationPage
	}
	return 0
}

type AppLiveHomePageResp struct {
	//
	Code int64 `protobuf:"varint,1,opt,name=code,proto3" json:"code"`
	//
	Msg string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg"`
	//
	Message string `protobuf:"bytes,3,opt,name=message,proto3" json:"message"`
	//
	Data *AppLiveHomePageResp_Data `protobuf:"bytes,4,opt,name=data" json:"data"`
}

func (m *AppLiveHomePageResp) Reset()         { *m = AppLiveHomePageResp{} }
func (m *AppLiveHomePageResp) String() string { return proto.CompactTextString(m) }
func (*AppLiveHomePageResp) ProtoMessage()    {}
func (*AppLiveHomePageResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_App_132d75cec33ddf71, []int{1}
}
func (m *AppLiveHomePageResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AppLiveHomePageResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AppLiveHomePageResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *AppLiveHomePageResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AppLiveHomePageResp.Merge(dst, src)
}
func (m *AppLiveHomePageResp) XXX_Size() int {
	return m.Size()
}
func (m *AppLiveHomePageResp) XXX_DiscardUnknown() {
	xxx_messageInfo_AppLiveHomePageResp.DiscardUnknown(m)
}

var xxx_messageInfo_AppLiveHomePageResp proto.InternalMessageInfo

func (m *AppLiveHomePageResp) GetCode() int64 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *AppLiveHomePageResp) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func (m *AppLiveHomePageResp) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *AppLiveHomePageResp) GetData() *AppLiveHomePageResp_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

type AppLiveHomePageResp_Rooms struct {
	//
	Roomid int64 `protobuf:"varint,1,opt,name=roomid,proto3" json:"roomid"`
	//
	Uid int64 `protobuf:"varint,2,opt,name=uid,proto3" json:"uid"`
	//
	Uname string `protobuf:"bytes,3,opt,name=uname,proto3" json:"uname"`
	//
	Face string `protobuf:"bytes,4,opt,name=face,proto3" json:"face"`
	//
	Cover string `protobuf:"bytes,5,opt,name=cover,proto3" json:"cover"`
	//
	Title string `protobuf:"bytes,6,opt,name=title,proto3" json:"title"`
	//
	Area int64 `protobuf:"varint,7,opt,name=area,proto3" json:"area"`
	//
	LiveTime int64 `protobuf:"varint,8,opt,name=live_time,json=liveTime,proto3" json:"live_time"`
	//
	AreaName string `protobuf:"bytes,9,opt,name=area_name,json=areaName,proto3" json:"area_name"`
	//
	AreaV2Id int64 `protobuf:"varint,10,opt,name=area_v2_id,json=areaV2Id,proto3" json:"area_v2_id"`
	//
	AreaV2Name string `protobuf:"bytes,11,opt,name=area_v2_name,json=areaV2Name,proto3" json:"area_v2_name"`
	//
	AreaV2ParentName string `protobuf:"bytes,12,opt,name=area_v2_parent_name,json=areaV2ParentName,proto3" json:"area_v2_parent_name"`
	//
	AreaV2ParentId int64 `protobuf:"varint,13,opt,name=area_v2_parent_id,json=areaV2ParentId,proto3" json:"area_v2_parent_id"`
	//
	LiveTagName string `protobuf:"bytes,14,opt,name=live_tag_name,json=liveTagName,proto3" json:"live_tag_name"`
	//
	Online int64 `protobuf:"varint,15,opt,name=online,proto3" json:"online"`
	//
	Playurl string `protobuf:"bytes,16,opt,name=playurl,proto3" json:"playurl"`
	//
	AcceptQuality []int64 `protobuf:"varint,17,rep,packed,name=accept_quality,json=acceptQuality" json:"accept_quality"`
	//
	CurrentQuality int64 `protobuf:"varint,18,opt,name=current_quality,json=currentQuality,proto3" json:"current_quality"`
	//
	PkId int64 `protobuf:"varint,19,opt,name=pk_id,json=pkId,proto3" json:"pk_id"`
	//
	OfficialVerify int64 `protobuf:"varint,20,opt,name=official_verify,json=officialVerify,proto3" json:"official_verify"`
	//
	Link string `protobuf:"bytes,21,opt,name=link,proto3" json:"link"`
	//
	SpecialAttention int64 `protobuf:"varint,22,opt,name=special_attention,json=specialAttention,proto3" json:"special_attention"`
	//
	BroadcastType int64 `protobuf:"varint,23,opt,name=broadcast_type,json=broadcastType,proto3" json:"broadcast_type"`
}

func (m *AppLiveHomePageResp_Rooms) Reset()         { *m = AppLiveHomePageResp_Rooms{} }
func (m *AppLiveHomePageResp_Rooms) String() string { return proto.CompactTextString(m) }
func (*AppLiveHomePageResp_Rooms) ProtoMessage()    {}
func (*AppLiveHomePageResp_Rooms) Descriptor() ([]byte, []int) {
	return fileDescriptor_App_132d75cec33ddf71, []int{1, 0}
}
func (m *AppLiveHomePageResp_Rooms) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AppLiveHomePageResp_Rooms) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AppLiveHomePageResp_Rooms.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *AppLiveHomePageResp_Rooms) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AppLiveHomePageResp_Rooms.Merge(dst, src)
}
func (m *AppLiveHomePageResp_Rooms) XXX_Size() int {
	return m.Size()
}
func (m *AppLiveHomePageResp_Rooms) XXX_DiscardUnknown() {
	xxx_messageInfo_AppLiveHomePageResp_Rooms.DiscardUnknown(m)
}

var xxx_messageInfo_AppLiveHomePageResp_Rooms proto.InternalMessageInfo

func (m *AppLiveHomePageResp_Rooms) GetRoomid() int64 {
	if m != nil {
		return m.Roomid
	}
	return 0
}

func (m *AppLiveHomePageResp_Rooms) GetUid() int64 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *AppLiveHomePageResp_Rooms) GetUname() string {
	if m != nil {
		return m.Uname
	}
	return ""
}

func (m *AppLiveHomePageResp_Rooms) GetFace() string {
	if m != nil {
		return m.Face
	}
	return ""
}

func (m *AppLiveHomePageResp_Rooms) GetCover() string {
	if m != nil {
		return m.Cover
	}
	return ""
}

func (m *AppLiveHomePageResp_Rooms) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *AppLiveHomePageResp_Rooms) GetArea() int64 {
	if m != nil {
		return m.Area
	}
	return 0
}

func (m *AppLiveHomePageResp_Rooms) GetLiveTime() int64 {
	if m != nil {
		return m.LiveTime
	}
	return 0
}

func (m *AppLiveHomePageResp_Rooms) GetAreaName() string {
	if m != nil {
		return m.AreaName
	}
	return ""
}

func (m *AppLiveHomePageResp_Rooms) GetAreaV2Id() int64 {
	if m != nil {
		return m.AreaV2Id
	}
	return 0
}

func (m *AppLiveHomePageResp_Rooms) GetAreaV2Name() string {
	if m != nil {
		return m.AreaV2Name
	}
	return ""
}

func (m *AppLiveHomePageResp_Rooms) GetAreaV2ParentName() string {
	if m != nil {
		return m.AreaV2ParentName
	}
	return ""
}

func (m *AppLiveHomePageResp_Rooms) GetAreaV2ParentId() int64 {
	if m != nil {
		return m.AreaV2ParentId
	}
	return 0
}

func (m *AppLiveHomePageResp_Rooms) GetLiveTagName() string {
	if m != nil {
		return m.LiveTagName
	}
	return ""
}

func (m *AppLiveHomePageResp_Rooms) GetOnline() int64 {
	if m != nil {
		return m.Online
	}
	return 0
}

func (m *AppLiveHomePageResp_Rooms) GetPlayurl() string {
	if m != nil {
		return m.Playurl
	}
	return ""
}

func (m *AppLiveHomePageResp_Rooms) GetAcceptQuality() []int64 {
	if m != nil {
		return m.AcceptQuality
	}
	return nil
}

func (m *AppLiveHomePageResp_Rooms) GetCurrentQuality() int64 {
	if m != nil {
		return m.CurrentQuality
	}
	return 0
}

func (m *AppLiveHomePageResp_Rooms) GetPkId() int64 {
	if m != nil {
		return m.PkId
	}
	return 0
}

func (m *AppLiveHomePageResp_Rooms) GetOfficialVerify() int64 {
	if m != nil {
		return m.OfficialVerify
	}
	return 0
}

func (m *AppLiveHomePageResp_Rooms) GetLink() string {
	if m != nil {
		return m.Link
	}
	return ""
}

func (m *AppLiveHomePageResp_Rooms) GetSpecialAttention() int64 {
	if m != nil {
		return m.SpecialAttention
	}
	return 0
}

func (m *AppLiveHomePageResp_Rooms) GetBroadcastType() int64 {
	if m != nil {
		return m.BroadcastType
	}
	return 0
}

type AppLiveHomePageResp_Data struct {
	//
	TotalCount int64 `protobuf:"varint,1,opt,name=total_count,json=totalCount,proto3" json:"total_count"`
	//
	CardType int64 `protobuf:"varint,2,opt,name=card_type,json=cardType,proto3" json:"card_type"`
	//
	BigCardType int64 `protobuf:"varint,3,opt,name=big_card_type,json=bigCardType,proto3" json:"big_card_type"`
	//
	TimeDesc string `protobuf:"bytes,4,opt,name=time_desc,json=timeDesc,proto3" json:"time_desc"`
	//
	UnameDesc string `protobuf:"bytes,5,opt,name=uname_desc,json=unameDesc,proto3" json:"uname_desc"`
	//
	TagsDesc string `protobuf:"bytes,6,opt,name=tags_desc,json=tagsDesc,proto3" json:"tags_desc"`
	//
	Rooms []*AppLiveHomePageResp_Rooms `protobuf:"bytes,7,rep,name=rooms" json:"rooms"`
}

func (m *AppLiveHomePageResp_Data) Reset()         { *m = AppLiveHomePageResp_Data{} }
func (m *AppLiveHomePageResp_Data) String() string { return proto.CompactTextString(m) }
func (*AppLiveHomePageResp_Data) ProtoMessage()    {}
func (*AppLiveHomePageResp_Data) Descriptor() ([]byte, []int) {
	return fileDescriptor_App_132d75cec33ddf71, []int{1, 1}
}
func (m *AppLiveHomePageResp_Data) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AppLiveHomePageResp_Data) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AppLiveHomePageResp_Data.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *AppLiveHomePageResp_Data) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AppLiveHomePageResp_Data.Merge(dst, src)
}
func (m *AppLiveHomePageResp_Data) XXX_Size() int {
	return m.Size()
}
func (m *AppLiveHomePageResp_Data) XXX_DiscardUnknown() {
	xxx_messageInfo_AppLiveHomePageResp_Data.DiscardUnknown(m)
}

var xxx_messageInfo_AppLiveHomePageResp_Data proto.InternalMessageInfo

func (m *AppLiveHomePageResp_Data) GetTotalCount() int64 {
	if m != nil {
		return m.TotalCount
	}
	return 0
}

func (m *AppLiveHomePageResp_Data) GetCardType() int64 {
	if m != nil {
		return m.CardType
	}
	return 0
}

func (m *AppLiveHomePageResp_Data) GetBigCardType() int64 {
	if m != nil {
		return m.BigCardType
	}
	return 0
}

func (m *AppLiveHomePageResp_Data) GetTimeDesc() string {
	if m != nil {
		return m.TimeDesc
	}
	return ""
}

func (m *AppLiveHomePageResp_Data) GetUnameDesc() string {
	if m != nil {
		return m.UnameDesc
	}
	return ""
}

func (m *AppLiveHomePageResp_Data) GetTagsDesc() string {
	if m != nil {
		return m.TagsDesc
	}
	return ""
}

func (m *AppLiveHomePageResp_Data) GetRooms() []*AppLiveHomePageResp_Rooms {
	if m != nil {
		return m.Rooms
	}
	return nil
}

func init() {
	proto.RegisterType((*AppLiveHomePageReq)(nil), "relation.v1.AppLiveHomePageReq")
	proto.RegisterType((*AppLiveHomePageResp)(nil), "relation.v1.AppLiveHomePageResp")
	proto.RegisterType((*AppLiveHomePageResp_Rooms)(nil), "relation.v1.AppLiveHomePageResp.Rooms")
	proto.RegisterType((*AppLiveHomePageResp_Data)(nil), "relation.v1.AppLiveHomePageResp.Data")
}
func (m *AppLiveHomePageReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AppLiveHomePageReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.RelationPage != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApp(dAtA, i, uint64(m.RelationPage))
	}
	return i, nil
}

func (m *AppLiveHomePageResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AppLiveHomePageResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApp(dAtA, i, uint64(m.Code))
	}
	if len(m.Msg) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintApp(dAtA, i, uint64(len(m.Msg)))
		i += copy(dAtA[i:], m.Msg)
	}
	if len(m.Message) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintApp(dAtA, i, uint64(len(m.Message)))
		i += copy(dAtA[i:], m.Message)
	}
	if m.Data != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintApp(dAtA, i, uint64(m.Data.Size()))
		n1, err := m.Data.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	return i, nil
}

func (m *AppLiveHomePageResp_Rooms) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AppLiveHomePageResp_Rooms) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Roomid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApp(dAtA, i, uint64(m.Roomid))
	}
	if m.Uid != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintApp(dAtA, i, uint64(m.Uid))
	}
	if len(m.Uname) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintApp(dAtA, i, uint64(len(m.Uname)))
		i += copy(dAtA[i:], m.Uname)
	}
	if len(m.Face) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintApp(dAtA, i, uint64(len(m.Face)))
		i += copy(dAtA[i:], m.Face)
	}
	if len(m.Cover) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintApp(dAtA, i, uint64(len(m.Cover)))
		i += copy(dAtA[i:], m.Cover)
	}
	if len(m.Title) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintApp(dAtA, i, uint64(len(m.Title)))
		i += copy(dAtA[i:], m.Title)
	}
	if m.Area != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintApp(dAtA, i, uint64(m.Area))
	}
	if m.LiveTime != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintApp(dAtA, i, uint64(m.LiveTime))
	}
	if len(m.AreaName) > 0 {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintApp(dAtA, i, uint64(len(m.AreaName)))
		i += copy(dAtA[i:], m.AreaName)
	}
	if m.AreaV2Id != 0 {
		dAtA[i] = 0x50
		i++
		i = encodeVarintApp(dAtA, i, uint64(m.AreaV2Id))
	}
	if len(m.AreaV2Name) > 0 {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintApp(dAtA, i, uint64(len(m.AreaV2Name)))
		i += copy(dAtA[i:], m.AreaV2Name)
	}
	if len(m.AreaV2ParentName) > 0 {
		dAtA[i] = 0x62
		i++
		i = encodeVarintApp(dAtA, i, uint64(len(m.AreaV2ParentName)))
		i += copy(dAtA[i:], m.AreaV2ParentName)
	}
	if m.AreaV2ParentId != 0 {
		dAtA[i] = 0x68
		i++
		i = encodeVarintApp(dAtA, i, uint64(m.AreaV2ParentId))
	}
	if len(m.LiveTagName) > 0 {
		dAtA[i] = 0x72
		i++
		i = encodeVarintApp(dAtA, i, uint64(len(m.LiveTagName)))
		i += copy(dAtA[i:], m.LiveTagName)
	}
	if m.Online != 0 {
		dAtA[i] = 0x78
		i++
		i = encodeVarintApp(dAtA, i, uint64(m.Online))
	}
	if len(m.Playurl) > 0 {
		dAtA[i] = 0x82
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintApp(dAtA, i, uint64(len(m.Playurl)))
		i += copy(dAtA[i:], m.Playurl)
	}
	if len(m.AcceptQuality) > 0 {
		dAtA3 := make([]byte, len(m.AcceptQuality)*10)
		var j2 int
		for _, num1 := range m.AcceptQuality {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA3[j2] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j2++
			}
			dAtA3[j2] = uint8(num)
			j2++
		}
		dAtA[i] = 0x8a
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintApp(dAtA, i, uint64(j2))
		i += copy(dAtA[i:], dAtA3[:j2])
	}
	if m.CurrentQuality != 0 {
		dAtA[i] = 0x90
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintApp(dAtA, i, uint64(m.CurrentQuality))
	}
	if m.PkId != 0 {
		dAtA[i] = 0x98
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintApp(dAtA, i, uint64(m.PkId))
	}
	if m.OfficialVerify != 0 {
		dAtA[i] = 0xa0
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintApp(dAtA, i, uint64(m.OfficialVerify))
	}
	if len(m.Link) > 0 {
		dAtA[i] = 0xaa
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintApp(dAtA, i, uint64(len(m.Link)))
		i += copy(dAtA[i:], m.Link)
	}
	if m.SpecialAttention != 0 {
		dAtA[i] = 0xb0
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintApp(dAtA, i, uint64(m.SpecialAttention))
	}
	if m.BroadcastType != 0 {
		dAtA[i] = 0xb8
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintApp(dAtA, i, uint64(m.BroadcastType))
	}
	return i, nil
}

func (m *AppLiveHomePageResp_Data) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AppLiveHomePageResp_Data) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.TotalCount != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApp(dAtA, i, uint64(m.TotalCount))
	}
	if m.CardType != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintApp(dAtA, i, uint64(m.CardType))
	}
	if m.BigCardType != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintApp(dAtA, i, uint64(m.BigCardType))
	}
	if len(m.TimeDesc) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintApp(dAtA, i, uint64(len(m.TimeDesc)))
		i += copy(dAtA[i:], m.TimeDesc)
	}
	if len(m.UnameDesc) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintApp(dAtA, i, uint64(len(m.UnameDesc)))
		i += copy(dAtA[i:], m.UnameDesc)
	}
	if len(m.TagsDesc) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintApp(dAtA, i, uint64(len(m.TagsDesc)))
		i += copy(dAtA[i:], m.TagsDesc)
	}
	if len(m.Rooms) > 0 {
		for _, msg := range m.Rooms {
			dAtA[i] = 0x3a
			i++
			i = encodeVarintApp(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func encodeVarintApp(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *AppLiveHomePageReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RelationPage != 0 {
		n += 1 + sovApp(uint64(m.RelationPage))
	}
	return n
}

func (m *AppLiveHomePageResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovApp(uint64(m.Code))
	}
	l = len(m.Msg)
	if l > 0 {
		n += 1 + l + sovApp(uint64(l))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovApp(uint64(l))
	}
	if m.Data != nil {
		l = m.Data.Size()
		n += 1 + l + sovApp(uint64(l))
	}
	return n
}

func (m *AppLiveHomePageResp_Rooms) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Roomid != 0 {
		n += 1 + sovApp(uint64(m.Roomid))
	}
	if m.Uid != 0 {
		n += 1 + sovApp(uint64(m.Uid))
	}
	l = len(m.Uname)
	if l > 0 {
		n += 1 + l + sovApp(uint64(l))
	}
	l = len(m.Face)
	if l > 0 {
		n += 1 + l + sovApp(uint64(l))
	}
	l = len(m.Cover)
	if l > 0 {
		n += 1 + l + sovApp(uint64(l))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovApp(uint64(l))
	}
	if m.Area != 0 {
		n += 1 + sovApp(uint64(m.Area))
	}
	if m.LiveTime != 0 {
		n += 1 + sovApp(uint64(m.LiveTime))
	}
	l = len(m.AreaName)
	if l > 0 {
		n += 1 + l + sovApp(uint64(l))
	}
	if m.AreaV2Id != 0 {
		n += 1 + sovApp(uint64(m.AreaV2Id))
	}
	l = len(m.AreaV2Name)
	if l > 0 {
		n += 1 + l + sovApp(uint64(l))
	}
	l = len(m.AreaV2ParentName)
	if l > 0 {
		n += 1 + l + sovApp(uint64(l))
	}
	if m.AreaV2ParentId != 0 {
		n += 1 + sovApp(uint64(m.AreaV2ParentId))
	}
	l = len(m.LiveTagName)
	if l > 0 {
		n += 1 + l + sovApp(uint64(l))
	}
	if m.Online != 0 {
		n += 1 + sovApp(uint64(m.Online))
	}
	l = len(m.Playurl)
	if l > 0 {
		n += 2 + l + sovApp(uint64(l))
	}
	if len(m.AcceptQuality) > 0 {
		l = 0
		for _, e := range m.AcceptQuality {
			l += sovApp(uint64(e))
		}
		n += 2 + sovApp(uint64(l)) + l
	}
	if m.CurrentQuality != 0 {
		n += 2 + sovApp(uint64(m.CurrentQuality))
	}
	if m.PkId != 0 {
		n += 2 + sovApp(uint64(m.PkId))
	}
	if m.OfficialVerify != 0 {
		n += 2 + sovApp(uint64(m.OfficialVerify))
	}
	l = len(m.Link)
	if l > 0 {
		n += 2 + l + sovApp(uint64(l))
	}
	if m.SpecialAttention != 0 {
		n += 2 + sovApp(uint64(m.SpecialAttention))
	}
	if m.BroadcastType != 0 {
		n += 2 + sovApp(uint64(m.BroadcastType))
	}
	return n
}

func (m *AppLiveHomePageResp_Data) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TotalCount != 0 {
		n += 1 + sovApp(uint64(m.TotalCount))
	}
	if m.CardType != 0 {
		n += 1 + sovApp(uint64(m.CardType))
	}
	if m.BigCardType != 0 {
		n += 1 + sovApp(uint64(m.BigCardType))
	}
	l = len(m.TimeDesc)
	if l > 0 {
		n += 1 + l + sovApp(uint64(l))
	}
	l = len(m.UnameDesc)
	if l > 0 {
		n += 1 + l + sovApp(uint64(l))
	}
	l = len(m.TagsDesc)
	if l > 0 {
		n += 1 + l + sovApp(uint64(l))
	}
	if len(m.Rooms) > 0 {
		for _, e := range m.Rooms {
			l = e.Size()
			n += 1 + l + sovApp(uint64(l))
		}
	}
	return n
}

func sovApp(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozApp(x uint64) (n int) {
	return sovApp(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *AppLiveHomePageReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApp
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AppLiveHomePageReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AppLiveHomePageReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RelationPage", wireType)
			}
			m.RelationPage = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RelationPage |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApp(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApp
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AppLiveHomePageResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApp
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AppLiveHomePageResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AppLiveHomePageResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApp
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApp
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApp
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = &AppLiveHomePageResp_Data{}
			}
			if err := m.Data.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApp(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApp
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AppLiveHomePageResp_Rooms) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApp
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Rooms: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Rooms: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Roomid", wireType)
			}
			m.Roomid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Roomid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uname", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApp
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Uname = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Face", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApp
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Face = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cover", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApp
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cover = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApp
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Area", wireType)
			}
			m.Area = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Area |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LiveTime", wireType)
			}
			m.LiveTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LiveTime |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AreaName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApp
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AreaName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AreaV2Id", wireType)
			}
			m.AreaV2Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AreaV2Id |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AreaV2Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApp
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AreaV2Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AreaV2ParentName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApp
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AreaV2ParentName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AreaV2ParentId", wireType)
			}
			m.AreaV2ParentId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AreaV2ParentId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LiveTagName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApp
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LiveTagName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Online", wireType)
			}
			m.Online = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Online |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Playurl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApp
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Playurl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 17:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApp
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.AcceptQuality = append(m.AcceptQuality, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApp
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthApp
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.AcceptQuality) == 0 {
					m.AcceptQuality = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApp
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.AcceptQuality = append(m.AcceptQuality, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field AcceptQuality", wireType)
			}
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentQuality", wireType)
			}
			m.CurrentQuality = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CurrentQuality |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 19:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PkId", wireType)
			}
			m.PkId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PkId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 20:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OfficialVerify", wireType)
			}
			m.OfficialVerify = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OfficialVerify |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Link", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApp
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Link = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 22:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpecialAttention", wireType)
			}
			m.SpecialAttention = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SpecialAttention |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 23:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BroadcastType", wireType)
			}
			m.BroadcastType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BroadcastType |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApp(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApp
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AppLiveHomePageResp_Data) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApp
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Data: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Data: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalCount", wireType)
			}
			m.TotalCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalCount |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CardType", wireType)
			}
			m.CardType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CardType |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BigCardType", wireType)
			}
			m.BigCardType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BigCardType |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeDesc", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApp
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TimeDesc = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnameDesc", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApp
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UnameDesc = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TagsDesc", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApp
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TagsDesc = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rooms", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApp
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Rooms = append(m.Rooms, &AppLiveHomePageResp_Rooms{})
			if err := m.Rooms[len(m.Rooms)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApp(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApp
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipApp(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowApp
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowApp
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowApp
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthApp
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowApp
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipApp(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthApp = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowApp   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("v1/App.proto", fileDescriptor_App_132d75cec33ddf71) }

var fileDescriptor_App_132d75cec33ddf71 = []byte{
	// 905 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x55, 0x5f, 0x6b, 0xe3, 0x46,
	0x10, 0x8f, 0xe3, 0x3f, 0xb1, 0xd7, 0x7f, 0x92, 0x6c, 0x7a, 0x3d, 0x35, 0x1c, 0x96, 0x09, 0x5c,
	0x31, 0x47, 0xcf, 0x69, 0x5c, 0x5a, 0x28, 0xf4, 0xa1, 0x71, 0x8e, 0xb6, 0x81, 0xa3, 0xdc, 0x0d,
	0xc7, 0x51, 0xfa, 0x22, 0xd6, 0xd2, 0x5a, 0x5d, 0x22, 0x5b, 0x8a, 0xb4, 0x36, 0xf8, 0x5b, 0xf4,
	0x1b, 0xf4, 0xeb, 0x94, 0x3e, 0xdd, 0x63, 0x9f, 0x44, 0x49, 0xde, 0xd4, 0x2f, 0x51, 0x66, 0x56,
	0x8a, 0xec, 0xe4, 0x68, 0x5e, 0x76, 0x67, 0x7e, 0x33, 0xbf, 0xdf, 0x8e, 0xc6, 0xbb, 0x63, 0xd6,
	0x59, 0x9d, 0x9d, 0x9e, 0x47, 0xd1, 0x28, 0x8a, 0x43, 0x1d, 0xf2, 0x76, 0x2c, 0x03, 0xa1, 0x55,
	0xb8, 0x18, 0xad, 0xce, 0x8e, 0x5f, 0xfa, 0x4a, 0xff, 0xb6, 0x9c, 0x8e, 0xdc, 0x70, 0x7e, 0xea,
	0x87, 0x7e, 0x78, 0x4a, 0x39, 0xd3, 0xe5, 0x8c, 0x3c, 0x72, 0xc8, 0x32, 0xdc, 0x93, 0xd7, 0x8c,
	0x9f, 0x47, 0xd1, 0x6b, 0xb5, 0x92, 0x3f, 0x85, 0x73, 0xf9, 0x46, 0xf8, 0x12, 0xe4, 0x35, 0xff,
	0x86, 0x75, 0x0b, 0x4d, 0x27, 0x12, 0xbe, 0xb4, 0x2a, 0x83, 0xca, 0xb0, 0x3a, 0x39, 0xcc, 0x52,
	0x7b, 0x3b, 0x00, 0x9d, 0xc2, 0x45, 0xea, 0xc9, 0x5f, 0x1d, 0x76, 0xf4, 0x40, 0x2e, 0x89, 0xf8,
	0x33, 0x56, 0x73, 0x43, 0xaf, 0x90, 0x69, 0x66, 0xa9, 0x4d, 0x3e, 0xd0, 0xca, 0x3f, 0x63, 0xd5,
	0x79, 0xe2, 0x5b, 0xbb, 0x83, 0xca, 0xb0, 0x35, 0xd9, 0xcb, 0x52, 0x1b, 0x5d, 0xc0, 0x85, 0x3f,
	0x67, 0x7b, 0x73, 0x99, 0x24, 0x58, 0x42, 0x95, 0xc2, 0xed, 0x2c, 0xb5, 0x0b, 0x08, 0x0a, 0x83,
	0x5f, 0xb0, 0x9a, 0x27, 0xb4, 0xb0, 0x6a, 0x83, 0xca, 0xb0, 0x3d, 0x7e, 0x3e, 0xda, 0x68, 0xc8,
	0xe8, 0x23, 0xf5, 0x8c, 0x5e, 0x09, 0x2d, 0x4c, 0x19, 0x48, 0x03, 0x5a, 0x8f, 0xff, 0x68, 0xb2,
	0x3a, 0x84, 0xe1, 0x3c, 0xe1, 0x27, 0xac, 0x11, 0x87, 0xe1, 0x5c, 0x79, 0x79, 0xc1, 0x2c, 0x4b,
	0xed, 0x1c, 0x81, 0x7c, 0xc7, 0xa2, 0x97, 0xca, 0xa3, 0xa2, 0xab, 0xa6, 0xe8, 0xa5, 0xf2, 0x00,
	0x17, 0x6e, 0xb3, 0xfa, 0x72, 0x21, 0xe6, 0x45, 0xc9, 0xad, 0x2c, 0xb5, 0x0d, 0x00, 0x66, 0xc3,
	0x76, 0xcc, 0x84, 0x2b, 0xa9, 0xdc, 0x96, 0xa9, 0x03, 0x7d, 0xa0, 0x15, 0xe9, 0x6e, 0xb8, 0x92,
	0xb1, 0x55, 0x2f, 0xe9, 0x04, 0x80, 0xd9, 0x30, 0x41, 0x2b, 0x1d, 0x48, 0xab, 0x51, 0x26, 0x10,
	0x00, 0x66, 0x43, 0x7d, 0x11, 0x4b, 0x61, 0xed, 0x95, 0xed, 0x46, 0x1f, 0x68, 0xe5, 0x2f, 0x58,
	0x2b, 0x50, 0x2b, 0xe9, 0x68, 0x35, 0x97, 0x56, 0x93, 0x52, 0xba, 0x59, 0x6a, 0x97, 0x20, 0x34,
	0xd1, 0x7c, 0xa7, 0xe6, 0x12, 0x73, 0x91, 0xe3, 0xd0, 0xe7, 0xb4, 0xe8, 0x38, 0xca, 0xbd, 0x03,
	0xa1, 0x89, 0xe6, 0xcf, 0xf8, 0x55, 0x5f, 0x30, 0x46, 0xf0, 0x6a, 0xec, 0x28, 0xcf, 0x62, 0x24,
	0xdc, 0xcb, 0x52, 0x7b, 0x03, 0x35, 0xd9, 0xef, 0xc7, 0x97, 0x1e, 0x1f, 0xb3, 0x4e, 0x81, 0x93,
	0x78, 0x9b, 0xc4, 0x0f, 0xb2, 0xd4, 0xde, 0xc2, 0x81, 0x19, 0x06, 0x9d, 0xf0, 0x03, 0x3b, 0x2a,
	0x62, 0x91, 0x88, 0xe5, 0x42, 0x1b, 0x6a, 0x87, 0xa8, 0x4f, 0xb3, 0xd4, 0xfe, 0x58, 0x18, 0x0e,
	0x8c, 0xc2, 0x1b, 0x82, 0x48, 0xe7, 0x7b, 0x76, 0x78, 0x2f, 0x51, 0x79, 0x56, 0x97, 0x0a, 0x7e,
	0x92, 0xa5, 0xf6, 0xc3, 0x20, 0xf4, 0x36, 0x35, 0x2e, 0x3d, 0xfe, 0x35, 0xeb, 0x9a, 0x76, 0x09,
	0xdf, 0xd4, 0xd0, 0xa3, 0x1a, 0xe8, 0x81, 0x6c, 0x05, 0xa0, 0x4d, 0xbd, 0x14, 0x3e, 0x1d, 0x7c,
	0xc2, 0x1a, 0xe1, 0x22, 0x50, 0x0b, 0x69, 0xed, 0x97, 0x17, 0xcb, 0x20, 0x90, 0xef, 0x78, 0xe5,
	0xa3, 0x40, 0xac, 0x97, 0x71, 0x60, 0x1d, 0x94, 0x57, 0x3e, 0x87, 0xa0, 0x30, 0xf8, 0xb7, 0xac,
	0x27, 0x5c, 0x57, 0x46, 0xda, 0xb9, 0x5e, 0x8a, 0x40, 0xe9, 0xb5, 0x75, 0x38, 0xa8, 0x0e, 0xab,
	0x13, 0x9e, 0xa5, 0xf6, 0xbd, 0x08, 0x74, 0x8d, 0xff, 0xd6, 0xb8, 0xfc, 0x3b, 0xb6, 0xef, 0x2e,
	0x63, 0xfa, 0xb4, 0x82, 0xcb, 0xa9, 0x9c, 0xa3, 0x2c, 0xb5, 0xef, 0x87, 0xa0, 0x97, 0x03, 0x05,
	0xbb, 0xcf, 0xea, 0xd1, 0x15, 0x36, 0xec, 0x88, 0x38, 0x74, 0xfb, 0x08, 0x80, 0x5a, 0x74, 0x75,
	0xe9, 0xa1, 0x7a, 0x38, 0x9b, 0x29, 0x57, 0x89, 0xc0, 0x59, 0xc9, 0x58, 0xcd, 0xd6, 0xd6, 0x27,
	0xa5, 0xfa, 0xbd, 0x10, 0xf4, 0x0a, 0xe0, 0x3d, 0xf9, 0x78, 0x75, 0x03, 0xb5, 0xb8, 0xb2, 0x9e,
	0x94, 0x4f, 0x03, 0x7d, 0xa0, 0x95, 0x4f, 0xd8, 0x61, 0x12, 0x49, 0xe2, 0x0b, 0xad, 0xe5, 0x02,
	0xdf, 0xb8, 0xf5, 0x69, 0xf9, 0xc3, 0x3d, 0x08, 0xc2, 0x41, 0x0e, 0x9d, 0x17, 0x08, 0x36, 0x6e,
	0x1a, 0x87, 0xc2, 0x73, 0x45, 0xa2, 0x1d, 0xbd, 0x8e, 0xa4, 0xf5, 0x94, 0x04, 0xa8, 0x71, 0xdb,
	0x11, 0xe8, 0xde, 0xf9, 0xef, 0xd6, 0x91, 0x3c, 0xfe, 0x77, 0x97, 0xd5, 0x70, 0x74, 0xf0, 0x2f,
	0x59, 0x5b, 0x87, 0x5a, 0x04, 0x8e, 0x1b, 0x2e, 0x17, 0x3a, 0x9f, 0x12, 0xfb, 0x59, 0x6a, 0x6f,
	0xc2, 0xc0, 0xc8, 0xb9, 0x40, 0x1b, 0x1f, 0x92, 0x2b, 0x62, 0xcf, 0x1c, 0xb8, 0x5b, 0x3e, 0xba,
	0x3b, 0x10, 0x9a, 0x68, 0xe2, 0x31, 0x78, 0xb9, 0xa6, 0xca, 0x77, 0xca, 0xfc, 0x6a, 0x39, 0x7d,
	0xb7, 0x02, 0xd0, 0x9e, 0x2a, 0xff, 0xa2, 0xa0, 0xbd, 0x60, 0x2d, 0x7c, 0xbd, 0x8e, 0x27, 0x13,
	0x37, 0x1f, 0x2d, 0x74, 0xc4, 0x1d, 0x08, 0x4d, 0x34, 0x5f, 0xc9, 0xc4, 0xe5, 0x2f, 0x19, 0xa3,
	0x51, 0x64, 0x92, 0xcd, 0xa0, 0xa1, 0xb7, 0x5a, 0xa2, 0xd0, 0x22, 0x9b, 0xd2, 0x51, 0x5a, 0xf8,
	0x89, 0xc9, 0x6e, 0x6c, 0x48, 0x17, 0x20, 0x34, 0xd1, 0xa4, 0xdc, 0x1f, 0x59, 0x1d, 0x47, 0x64,
	0x62, 0xed, 0x0d, 0xaa, 0xc3, 0xf6, 0xf8, 0xf3, 0x47, 0x87, 0x31, 0xcd, 0x5c, 0x73, 0x8f, 0x88,
	0x08, 0x66, 0x1b, 0xff, 0xc2, 0xaa, 0xe7, 0x51, 0xc4, 0xdf, 0xb2, 0xce, 0x26, 0x85, 0xdb, 0xff,
	0x2f, 0x78, 0x7d, 0x3c, 0x78, 0xec, 0xc4, 0xc9, 0xb3, 0x3f, 0x6f, 0xfa, 0x95, 0x0f, 0x37, 0xfd,
	0xca, 0x3f, 0x37, 0xfd, 0xca, 0xef, 0xb7, 0xfd, 0x9d, 0x0f, 0xb7, 0xfd, 0x9d, 0xbf, 0x6f, 0xfb,
	0x3b, 0xbf, 0xee, 0xae, 0xce, 0xa6, 0x0d, 0xfa, 0x67, 0xfc, 0xea, 0xbf, 0x00, 0x00, 0x00, 0xff,
	0xff, 0x8a, 0x7f, 0x58, 0xe7, 0x65, 0x07, 0x00, 0x00,
}
