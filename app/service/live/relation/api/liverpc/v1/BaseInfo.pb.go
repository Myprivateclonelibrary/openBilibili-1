// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: v1/BaseInfo.proto

package v1

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type BaseInfoGetFollowTypeReq struct {
}

func (m *BaseInfoGetFollowTypeReq) Reset()         { *m = BaseInfoGetFollowTypeReq{} }
func (m *BaseInfoGetFollowTypeReq) String() string { return proto.CompactTextString(m) }
func (*BaseInfoGetFollowTypeReq) ProtoMessage()    {}
func (*BaseInfoGetFollowTypeReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_BaseInfo_7cc4173942266fc5, []int{0}
}
func (m *BaseInfoGetFollowTypeReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BaseInfoGetFollowTypeReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BaseInfoGetFollowTypeReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *BaseInfoGetFollowTypeReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BaseInfoGetFollowTypeReq.Merge(dst, src)
}
func (m *BaseInfoGetFollowTypeReq) XXX_Size() int {
	return m.Size()
}
func (m *BaseInfoGetFollowTypeReq) XXX_DiscardUnknown() {
	xxx_messageInfo_BaseInfoGetFollowTypeReq.DiscardUnknown(m)
}

var xxx_messageInfo_BaseInfoGetFollowTypeReq proto.InternalMessageInfo

type BaseInfoGetFollowTypeResp struct {
	//
	Code int64 `protobuf:"varint,1,opt,name=code,proto3" json:"code"`
	//
	Msg string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg"`
	//
	Data map[int64]*BaseInfoGetFollowTypeResp_UidInfo `protobuf:"bytes,3,rep,name=data" json:"data" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *BaseInfoGetFollowTypeResp) Reset()         { *m = BaseInfoGetFollowTypeResp{} }
func (m *BaseInfoGetFollowTypeResp) String() string { return proto.CompactTextString(m) }
func (*BaseInfoGetFollowTypeResp) ProtoMessage()    {}
func (*BaseInfoGetFollowTypeResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_BaseInfo_7cc4173942266fc5, []int{1}
}
func (m *BaseInfoGetFollowTypeResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BaseInfoGetFollowTypeResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BaseInfoGetFollowTypeResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *BaseInfoGetFollowTypeResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BaseInfoGetFollowTypeResp.Merge(dst, src)
}
func (m *BaseInfoGetFollowTypeResp) XXX_Size() int {
	return m.Size()
}
func (m *BaseInfoGetFollowTypeResp) XXX_DiscardUnknown() {
	xxx_messageInfo_BaseInfoGetFollowTypeResp.DiscardUnknown(m)
}

var xxx_messageInfo_BaseInfoGetFollowTypeResp proto.InternalMessageInfo

func (m *BaseInfoGetFollowTypeResp) GetCode() int64 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *BaseInfoGetFollowTypeResp) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func (m *BaseInfoGetFollowTypeResp) GetData() map[int64]*BaseInfoGetFollowTypeResp_UidInfo {
	if m != nil {
		return m.Data
	}
	return nil
}

type BaseInfoGetFollowTypeResp_UidInfo struct {
	// 用户uid
	Mid int64 `protobuf:"varint,1,opt,name=mid,proto3" json:"mid"`
	// 关注类型
	Attribute int64 `protobuf:"varint,2,opt,name=attribute,proto3" json:"attribute"`
	// 是否特别关注
	Special int64 `protobuf:"varint,3,opt,name=special,proto3" json:"special"`
}

func (m *BaseInfoGetFollowTypeResp_UidInfo) Reset()         { *m = BaseInfoGetFollowTypeResp_UidInfo{} }
func (m *BaseInfoGetFollowTypeResp_UidInfo) String() string { return proto.CompactTextString(m) }
func (*BaseInfoGetFollowTypeResp_UidInfo) ProtoMessage()    {}
func (*BaseInfoGetFollowTypeResp_UidInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_BaseInfo_7cc4173942266fc5, []int{1, 1}
}
func (m *BaseInfoGetFollowTypeResp_UidInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BaseInfoGetFollowTypeResp_UidInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BaseInfoGetFollowTypeResp_UidInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *BaseInfoGetFollowTypeResp_UidInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BaseInfoGetFollowTypeResp_UidInfo.Merge(dst, src)
}
func (m *BaseInfoGetFollowTypeResp_UidInfo) XXX_Size() int {
	return m.Size()
}
func (m *BaseInfoGetFollowTypeResp_UidInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_BaseInfoGetFollowTypeResp_UidInfo.DiscardUnknown(m)
}

var xxx_messageInfo_BaseInfoGetFollowTypeResp_UidInfo proto.InternalMessageInfo

func (m *BaseInfoGetFollowTypeResp_UidInfo) GetMid() int64 {
	if m != nil {
		return m.Mid
	}
	return 0
}

func (m *BaseInfoGetFollowTypeResp_UidInfo) GetAttribute() int64 {
	if m != nil {
		return m.Attribute
	}
	return 0
}

func (m *BaseInfoGetFollowTypeResp_UidInfo) GetSpecial() int64 {
	if m != nil {
		return m.Special
	}
	return 0
}

type BaseInfoGetGiftInfoReq struct {
}

func (m *BaseInfoGetGiftInfoReq) Reset()         { *m = BaseInfoGetGiftInfoReq{} }
func (m *BaseInfoGetGiftInfoReq) String() string { return proto.CompactTextString(m) }
func (*BaseInfoGetGiftInfoReq) ProtoMessage()    {}
func (*BaseInfoGetGiftInfoReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_BaseInfo_7cc4173942266fc5, []int{2}
}
func (m *BaseInfoGetGiftInfoReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BaseInfoGetGiftInfoReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BaseInfoGetGiftInfoReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *BaseInfoGetGiftInfoReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BaseInfoGetGiftInfoReq.Merge(dst, src)
}
func (m *BaseInfoGetGiftInfoReq) XXX_Size() int {
	return m.Size()
}
func (m *BaseInfoGetGiftInfoReq) XXX_DiscardUnknown() {
	xxx_messageInfo_BaseInfoGetGiftInfoReq.DiscardUnknown(m)
}

var xxx_messageInfo_BaseInfoGetGiftInfoReq proto.InternalMessageInfo

type BaseInfoGetGiftInfoResp struct {
	//
	Code int64 `protobuf:"varint,1,opt,name=code,proto3" json:"code"`
	//
	Msg string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg"`
	//
	Data map[int64]*BaseInfoGetGiftInfoResp_UidInfo `protobuf:"bytes,3,rep,name=data" json:"data" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *BaseInfoGetGiftInfoResp) Reset()         { *m = BaseInfoGetGiftInfoResp{} }
func (m *BaseInfoGetGiftInfoResp) String() string { return proto.CompactTextString(m) }
func (*BaseInfoGetGiftInfoResp) ProtoMessage()    {}
func (*BaseInfoGetGiftInfoResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_BaseInfo_7cc4173942266fc5, []int{3}
}
func (m *BaseInfoGetGiftInfoResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BaseInfoGetGiftInfoResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BaseInfoGetGiftInfoResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *BaseInfoGetGiftInfoResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BaseInfoGetGiftInfoResp.Merge(dst, src)
}
func (m *BaseInfoGetGiftInfoResp) XXX_Size() int {
	return m.Size()
}
func (m *BaseInfoGetGiftInfoResp) XXX_DiscardUnknown() {
	xxx_messageInfo_BaseInfoGetGiftInfoResp.DiscardUnknown(m)
}

var xxx_messageInfo_BaseInfoGetGiftInfoResp proto.InternalMessageInfo

func (m *BaseInfoGetGiftInfoResp) GetCode() int64 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *BaseInfoGetGiftInfoResp) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func (m *BaseInfoGetGiftInfoResp) GetData() map[int64]*BaseInfoGetGiftInfoResp_UidInfo {
	if m != nil {
		return m.Data
	}
	return nil
}

type BaseInfoGetGiftInfoResp_UidInfo struct {
	// 用户uid
	Mid int64 `protobuf:"varint,1,opt,name=mid,proto3" json:"mid"`
	// 金瓜子数
	Gold int64 `protobuf:"varint,2,opt,name=gold,proto3" json:"gold"`
}

func (m *BaseInfoGetGiftInfoResp_UidInfo) Reset()         { *m = BaseInfoGetGiftInfoResp_UidInfo{} }
func (m *BaseInfoGetGiftInfoResp_UidInfo) String() string { return proto.CompactTextString(m) }
func (*BaseInfoGetGiftInfoResp_UidInfo) ProtoMessage()    {}
func (*BaseInfoGetGiftInfoResp_UidInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_BaseInfo_7cc4173942266fc5, []int{3, 1}
}
func (m *BaseInfoGetGiftInfoResp_UidInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BaseInfoGetGiftInfoResp_UidInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BaseInfoGetGiftInfoResp_UidInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *BaseInfoGetGiftInfoResp_UidInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BaseInfoGetGiftInfoResp_UidInfo.Merge(dst, src)
}
func (m *BaseInfoGetGiftInfoResp_UidInfo) XXX_Size() int {
	return m.Size()
}
func (m *BaseInfoGetGiftInfoResp_UidInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_BaseInfoGetGiftInfoResp_UidInfo.DiscardUnknown(m)
}

var xxx_messageInfo_BaseInfoGetGiftInfoResp_UidInfo proto.InternalMessageInfo

func (m *BaseInfoGetGiftInfoResp_UidInfo) GetMid() int64 {
	if m != nil {
		return m.Mid
	}
	return 0
}

func (m *BaseInfoGetGiftInfoResp_UidInfo) GetGold() int64 {
	if m != nil {
		return m.Gold
	}
	return 0
}

func init() {
	proto.RegisterType((*BaseInfoGetFollowTypeReq)(nil), "relation.v1.BaseInfoGetFollowTypeReq")
	proto.RegisterType((*BaseInfoGetFollowTypeResp)(nil), "relation.v1.BaseInfoGetFollowTypeResp")
	proto.RegisterMapType((map[int64]*BaseInfoGetFollowTypeResp_UidInfo)(nil), "relation.v1.BaseInfoGetFollowTypeResp.DataEntry")
	proto.RegisterType((*BaseInfoGetFollowTypeResp_UidInfo)(nil), "relation.v1.BaseInfoGetFollowTypeResp.UidInfo")
	proto.RegisterType((*BaseInfoGetGiftInfoReq)(nil), "relation.v1.BaseInfoGetGiftInfoReq")
	proto.RegisterType((*BaseInfoGetGiftInfoResp)(nil), "relation.v1.BaseInfoGetGiftInfoResp")
	proto.RegisterMapType((map[int64]*BaseInfoGetGiftInfoResp_UidInfo)(nil), "relation.v1.BaseInfoGetGiftInfoResp.DataEntry")
	proto.RegisterType((*BaseInfoGetGiftInfoResp_UidInfo)(nil), "relation.v1.BaseInfoGetGiftInfoResp.UidInfo")
}
func (m *BaseInfoGetFollowTypeReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BaseInfoGetFollowTypeReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *BaseInfoGetFollowTypeResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BaseInfoGetFollowTypeResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintBaseInfo(dAtA, i, uint64(m.Code))
	}
	if len(m.Msg) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintBaseInfo(dAtA, i, uint64(len(m.Msg)))
		i += copy(dAtA[i:], m.Msg)
	}
	if len(m.Data) > 0 {
		for k, _ := range m.Data {
			dAtA[i] = 0x1a
			i++
			v := m.Data[k]
			msgSize := 0
			if v != nil {
				msgSize = v.Size()
				msgSize += 1 + sovBaseInfo(uint64(msgSize))
			}
			mapSize := 1 + sovBaseInfo(uint64(k)) + msgSize
			i = encodeVarintBaseInfo(dAtA, i, uint64(mapSize))
			dAtA[i] = 0x8
			i++
			i = encodeVarintBaseInfo(dAtA, i, uint64(k))
			if v != nil {
				dAtA[i] = 0x12
				i++
				i = encodeVarintBaseInfo(dAtA, i, uint64(v.Size()))
				n1, err := v.MarshalTo(dAtA[i:])
				if err != nil {
					return 0, err
				}
				i += n1
			}
		}
	}
	return i, nil
}

func (m *BaseInfoGetFollowTypeResp_UidInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BaseInfoGetFollowTypeResp_UidInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Mid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintBaseInfo(dAtA, i, uint64(m.Mid))
	}
	if m.Attribute != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintBaseInfo(dAtA, i, uint64(m.Attribute))
	}
	if m.Special != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintBaseInfo(dAtA, i, uint64(m.Special))
	}
	return i, nil
}

func (m *BaseInfoGetGiftInfoReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BaseInfoGetGiftInfoReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *BaseInfoGetGiftInfoResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BaseInfoGetGiftInfoResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintBaseInfo(dAtA, i, uint64(m.Code))
	}
	if len(m.Msg) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintBaseInfo(dAtA, i, uint64(len(m.Msg)))
		i += copy(dAtA[i:], m.Msg)
	}
	if len(m.Data) > 0 {
		for k, _ := range m.Data {
			dAtA[i] = 0x1a
			i++
			v := m.Data[k]
			msgSize := 0
			if v != nil {
				msgSize = v.Size()
				msgSize += 1 + sovBaseInfo(uint64(msgSize))
			}
			mapSize := 1 + sovBaseInfo(uint64(k)) + msgSize
			i = encodeVarintBaseInfo(dAtA, i, uint64(mapSize))
			dAtA[i] = 0x8
			i++
			i = encodeVarintBaseInfo(dAtA, i, uint64(k))
			if v != nil {
				dAtA[i] = 0x12
				i++
				i = encodeVarintBaseInfo(dAtA, i, uint64(v.Size()))
				n2, err := v.MarshalTo(dAtA[i:])
				if err != nil {
					return 0, err
				}
				i += n2
			}
		}
	}
	return i, nil
}

func (m *BaseInfoGetGiftInfoResp_UidInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BaseInfoGetGiftInfoResp_UidInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Mid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintBaseInfo(dAtA, i, uint64(m.Mid))
	}
	if m.Gold != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintBaseInfo(dAtA, i, uint64(m.Gold))
	}
	return i, nil
}

func encodeVarintBaseInfo(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *BaseInfoGetFollowTypeReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *BaseInfoGetFollowTypeResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovBaseInfo(uint64(m.Code))
	}
	l = len(m.Msg)
	if l > 0 {
		n += 1 + l + sovBaseInfo(uint64(l))
	}
	if len(m.Data) > 0 {
		for k, v := range m.Data {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovBaseInfo(uint64(l))
			}
			mapEntrySize := 1 + sovBaseInfo(uint64(k)) + l
			n += mapEntrySize + 1 + sovBaseInfo(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *BaseInfoGetFollowTypeResp_UidInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Mid != 0 {
		n += 1 + sovBaseInfo(uint64(m.Mid))
	}
	if m.Attribute != 0 {
		n += 1 + sovBaseInfo(uint64(m.Attribute))
	}
	if m.Special != 0 {
		n += 1 + sovBaseInfo(uint64(m.Special))
	}
	return n
}

func (m *BaseInfoGetGiftInfoReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *BaseInfoGetGiftInfoResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovBaseInfo(uint64(m.Code))
	}
	l = len(m.Msg)
	if l > 0 {
		n += 1 + l + sovBaseInfo(uint64(l))
	}
	if len(m.Data) > 0 {
		for k, v := range m.Data {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovBaseInfo(uint64(l))
			}
			mapEntrySize := 1 + sovBaseInfo(uint64(k)) + l
			n += mapEntrySize + 1 + sovBaseInfo(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *BaseInfoGetGiftInfoResp_UidInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Mid != 0 {
		n += 1 + sovBaseInfo(uint64(m.Mid))
	}
	if m.Gold != 0 {
		n += 1 + sovBaseInfo(uint64(m.Gold))
	}
	return n
}

func sovBaseInfo(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozBaseInfo(x uint64) (n int) {
	return sovBaseInfo(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *BaseInfoGetFollowTypeReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBaseInfo
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BaseInfoGetFollowTypeReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BaseInfoGetFollowTypeReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipBaseInfo(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBaseInfo
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BaseInfoGetFollowTypeResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBaseInfo
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BaseInfoGetFollowTypeResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BaseInfoGetFollowTypeResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBaseInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBaseInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBaseInfo
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBaseInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBaseInfo
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = make(map[int64]*BaseInfoGetFollowTypeResp_UidInfo)
			}
			var mapkey int64
			var mapvalue *BaseInfoGetFollowTypeResp_UidInfo
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowBaseInfo
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowBaseInfo
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= (int64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowBaseInfo
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= (int(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthBaseInfo
					}
					postmsgIndex := iNdEx + mapmsglen
					if mapmsglen < 0 {
						return ErrInvalidLengthBaseInfo
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &BaseInfoGetFollowTypeResp_UidInfo{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipBaseInfo(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthBaseInfo
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Data[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBaseInfo(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBaseInfo
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BaseInfoGetFollowTypeResp_UidInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBaseInfo
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UidInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UidInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBaseInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attribute", wireType)
			}
			m.Attribute = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBaseInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Attribute |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Special", wireType)
			}
			m.Special = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBaseInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Special |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBaseInfo(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBaseInfo
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BaseInfoGetGiftInfoReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBaseInfo
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BaseInfoGetGiftInfoReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BaseInfoGetGiftInfoReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipBaseInfo(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBaseInfo
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BaseInfoGetGiftInfoResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBaseInfo
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BaseInfoGetGiftInfoResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BaseInfoGetGiftInfoResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBaseInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBaseInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBaseInfo
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBaseInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBaseInfo
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = make(map[int64]*BaseInfoGetGiftInfoResp_UidInfo)
			}
			var mapkey int64
			var mapvalue *BaseInfoGetGiftInfoResp_UidInfo
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowBaseInfo
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowBaseInfo
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= (int64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowBaseInfo
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= (int(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthBaseInfo
					}
					postmsgIndex := iNdEx + mapmsglen
					if mapmsglen < 0 {
						return ErrInvalidLengthBaseInfo
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &BaseInfoGetGiftInfoResp_UidInfo{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipBaseInfo(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthBaseInfo
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Data[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBaseInfo(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBaseInfo
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BaseInfoGetGiftInfoResp_UidInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBaseInfo
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UidInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UidInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBaseInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gold", wireType)
			}
			m.Gold = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBaseInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Gold |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBaseInfo(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBaseInfo
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipBaseInfo(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowBaseInfo
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBaseInfo
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBaseInfo
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthBaseInfo
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowBaseInfo
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipBaseInfo(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthBaseInfo = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowBaseInfo   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("v1/BaseInfo.proto", fileDescriptor_BaseInfo_7cc4173942266fc5) }

var fileDescriptor_BaseInfo_7cc4173942266fc5 = []byte{
	// 461 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x53, 0x4d, 0x8b, 0xd3, 0x40,
	0x18, 0xee, 0x74, 0xaa, 0xdd, 0xbe, 0x61, 0x41, 0xe7, 0xa0, 0xd9, 0x50, 0xd2, 0x52, 0x5d, 0x29,
	0xa8, 0xa9, 0xad, 0x17, 0xf1, 0x18, 0x56, 0x17, 0x41, 0x3c, 0x0c, 0x0a, 0xe2, 0x41, 0x98, 0x36,
	0xd3, 0x71, 0x30, 0xdb, 0xe9, 0xc7, 0x34, 0xda, 0x5f, 0xe0, 0xd5, 0x1f, 0xe5, 0x41, 0xf0, 0xb2,
	0x47, 0x4f, 0x41, 0xda, 0x5b, 0x7e, 0x85, 0x64, 0xd2, 0xd8, 0x2c, 0x6c, 0xd7, 0xc0, 0x5e, 0x5e,
	0xde, 0x8f, 0xcc, 0x3c, 0xcf, 0x33, 0xcf, 0x1b, 0xb8, 0x1d, 0xf5, 0x7b, 0x3e, 0x5b, 0xf0, 0x57,
	0x93, 0xb1, 0xf2, 0xa6, 0x73, 0xa5, 0x15, 0xb1, 0xe6, 0x3c, 0x64, 0x5a, 0xaa, 0x89, 0x17, 0xf5,
	0x9d, 0xc7, 0x42, 0xea, 0x4f, 0xcb, 0xa1, 0x37, 0x52, 0x67, 0x3d, 0xa1, 0x84, 0xea, 0x99, 0x6f,
	0x86, 0xcb, 0xb1, 0xa9, 0x4c, 0x61, 0xb2, 0xec, 0x6c, 0xc7, 0x01, 0x3b, 0xbf, 0xed, 0x94, 0xeb,
	0x97, 0x2a, 0x0c, 0xd5, 0x97, 0xb7, 0xab, 0x29, 0xa7, 0x7c, 0xd6, 0xf9, 0x86, 0xe1, 0x68, 0xcf,
	0x70, 0x31, 0x25, 0x4d, 0xa8, 0x8d, 0x54, 0xc0, 0x6d, 0xd4, 0x46, 0x5d, 0xec, 0x1f, 0x24, 0x71,
	0xcb, 0xd4, 0xd4, 0x44, 0x72, 0x04, 0xf8, 0x6c, 0x21, 0xec, 0x6a, 0x1b, 0x75, 0x1b, 0x7e, 0x3d,
	0x89, 0x5b, 0x69, 0x49, 0xd3, 0x40, 0xde, 0x40, 0x2d, 0x60, 0x9a, 0xd9, 0xb8, 0x8d, 0xbb, 0xd6,
	0xe0, 0x89, 0x57, 0x60, 0xef, 0xed, 0x85, 0xf3, 0x4e, 0x98, 0x66, 0x2f, 0x26, 0x7a, 0xbe, 0xca,
	0xa0, 0xd2, 0x1b, 0xa8, 0x89, 0x8e, 0x80, 0xc6, 0xbf, 0x21, 0xb9, 0x05, 0xf8, 0x33, 0x5f, 0x65,
	0xa4, 0x68, 0x9a, 0x92, 0x13, 0xb8, 0x11, 0xb1, 0x70, 0xc9, 0x0d, 0x17, 0x6b, 0xe0, 0x95, 0xc4,
	0x7b, 0x27, 0x83, 0x74, 0x40, 0xb3, 0xc3, 0xcf, 0xab, 0xcf, 0x90, 0xf3, 0x15, 0xea, 0xdb, 0xae,
	0x91, 0x27, 0x83, 0xad, 0xf6, 0x4c, 0x9e, 0x0c, 0x68, 0x1a, 0xc8, 0x43, 0x68, 0x30, 0xad, 0xe7,
	0x72, 0xb8, 0xd4, 0x19, 0x26, 0xf6, 0x0f, 0x93, 0xb8, 0xb5, 0x6b, 0xd2, 0x5d, 0x4a, 0x8e, 0xa1,
	0xbe, 0x98, 0xf2, 0x91, 0x64, 0xa1, 0x8d, 0xcd, 0xa7, 0x56, 0x12, 0xb7, 0xf2, 0x16, 0xcd, 0x93,
	0x8e, 0x0d, 0x77, 0x0a, 0x4c, 0x4f, 0xe5, 0x58, 0x1b, 0x6e, 0x7c, 0xd6, 0xf9, 0x55, 0x85, 0xbb,
	0x97, 0x8e, 0xae, 0xe3, 0xd0, 0xeb, 0x0b, 0x0e, 0xed, 0x7d, 0xb1, 0x22, 0xd8, 0x15, 0xfe, 0xf0,
	0xab, 0xfd, 0xf1, 0x2f, 0xfa, 0xf3, 0xa8, 0x14, 0xda, 0x25, 0xee, 0xf8, 0xa5, 0xdc, 0x69, 0x42,
	0x4d, 0xa8, 0x30, 0xd8, 0x1a, 0x63, 0xa8, 0xa6, 0x35, 0x35, 0x71, 0xf0, 0x03, 0xc1, 0x41, 0x0e,
	0x49, 0x3e, 0xc2, 0xa1, 0x28, 0xae, 0x05, 0x39, 0x2e, 0xb3, 0x3a, 0x33, 0xe7, 0x41, 0xb9, 0x0d,
	0x23, 0xef, 0xc1, 0x12, 0x3b, 0x59, 0xe4, 0xde, 0xff, 0x85, 0xcf, 0x9c, 0xfb, 0x65, 0x5e, 0xc7,
	0x6f, 0xfe, 0x5c, 0xbb, 0xe8, 0x7c, 0xed, 0xa2, 0x3f, 0x6b, 0x17, 0x7d, 0xdf, 0xb8, 0x95, 0xf3,
	0x8d, 0x5b, 0xf9, 0xbd, 0x71, 0x2b, 0x1f, 0xaa, 0x51, 0x7f, 0x78, 0xd3, 0xfc, 0xf9, 0x4f, 0xff,
	0x06, 0x00, 0x00, 0xff, 0xff, 0x22, 0x17, 0x6b, 0x8d, 0x4a, 0x04, 0x00, 0x00,
}
