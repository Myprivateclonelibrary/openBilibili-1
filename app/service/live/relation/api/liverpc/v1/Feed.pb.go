// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: v1/Feed.proto

package v1

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type FeedGetUserFcReq struct {
	// 用户uid
	Follow int64 `protobuf:"varint,1,opt,name=follow,proto3" json:"follow"`
}

func (m *FeedGetUserFcReq) Reset()         { *m = FeedGetUserFcReq{} }
func (m *FeedGetUserFcReq) String() string { return proto.CompactTextString(m) }
func (*FeedGetUserFcReq) ProtoMessage()    {}
func (*FeedGetUserFcReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_Feed_d690314d2e430ba7, []int{0}
}
func (m *FeedGetUserFcReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FeedGetUserFcReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FeedGetUserFcReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *FeedGetUserFcReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FeedGetUserFcReq.Merge(dst, src)
}
func (m *FeedGetUserFcReq) XXX_Size() int {
	return m.Size()
}
func (m *FeedGetUserFcReq) XXX_DiscardUnknown() {
	xxx_messageInfo_FeedGetUserFcReq.DiscardUnknown(m)
}

var xxx_messageInfo_FeedGetUserFcReq proto.InternalMessageInfo

func (m *FeedGetUserFcReq) GetFollow() int64 {
	if m != nil {
		return m.Follow
	}
	return 0
}

type FeedGetUserFcResp struct {
	//
	Code int64 `protobuf:"varint,1,opt,name=code,proto3" json:"code"`
	//
	Msg string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg"`
	//
	Message string `protobuf:"bytes,3,opt,name=message,proto3" json:"message"`
	//
	Data *FeedGetUserFcResp_Data `protobuf:"bytes,4,opt,name=data" json:"data"`
}

func (m *FeedGetUserFcResp) Reset()         { *m = FeedGetUserFcResp{} }
func (m *FeedGetUserFcResp) String() string { return proto.CompactTextString(m) }
func (*FeedGetUserFcResp) ProtoMessage()    {}
func (*FeedGetUserFcResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_Feed_d690314d2e430ba7, []int{1}
}
func (m *FeedGetUserFcResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FeedGetUserFcResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FeedGetUserFcResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *FeedGetUserFcResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FeedGetUserFcResp.Merge(dst, src)
}
func (m *FeedGetUserFcResp) XXX_Size() int {
	return m.Size()
}
func (m *FeedGetUserFcResp) XXX_DiscardUnknown() {
	xxx_messageInfo_FeedGetUserFcResp.DiscardUnknown(m)
}

var xxx_messageInfo_FeedGetUserFcResp proto.InternalMessageInfo

func (m *FeedGetUserFcResp) GetCode() int64 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *FeedGetUserFcResp) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func (m *FeedGetUserFcResp) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *FeedGetUserFcResp) GetData() *FeedGetUserFcResp_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

type FeedGetUserFcResp_Data struct {
	//
	Fc int64 `protobuf:"varint,1,opt,name=fc,proto3" json:"fc"`
}

func (m *FeedGetUserFcResp_Data) Reset()         { *m = FeedGetUserFcResp_Data{} }
func (m *FeedGetUserFcResp_Data) String() string { return proto.CompactTextString(m) }
func (*FeedGetUserFcResp_Data) ProtoMessage()    {}
func (*FeedGetUserFcResp_Data) Descriptor() ([]byte, []int) {
	return fileDescriptor_Feed_d690314d2e430ba7, []int{1, 0}
}
func (m *FeedGetUserFcResp_Data) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FeedGetUserFcResp_Data) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FeedGetUserFcResp_Data.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *FeedGetUserFcResp_Data) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FeedGetUserFcResp_Data.Merge(dst, src)
}
func (m *FeedGetUserFcResp_Data) XXX_Size() int {
	return m.Size()
}
func (m *FeedGetUserFcResp_Data) XXX_DiscardUnknown() {
	xxx_messageInfo_FeedGetUserFcResp_Data.DiscardUnknown(m)
}

var xxx_messageInfo_FeedGetUserFcResp_Data proto.InternalMessageInfo

func (m *FeedGetUserFcResp_Data) GetFc() int64 {
	if m != nil {
		return m.Fc
	}
	return 0
}

type FeedGetUserFcBatchReq struct {
	// 用户uid
	Uids []int64 `protobuf:"varint,1,rep,packed,name=uids" json:"uids"`
}

func (m *FeedGetUserFcBatchReq) Reset()         { *m = FeedGetUserFcBatchReq{} }
func (m *FeedGetUserFcBatchReq) String() string { return proto.CompactTextString(m) }
func (*FeedGetUserFcBatchReq) ProtoMessage()    {}
func (*FeedGetUserFcBatchReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_Feed_d690314d2e430ba7, []int{2}
}
func (m *FeedGetUserFcBatchReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FeedGetUserFcBatchReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FeedGetUserFcBatchReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *FeedGetUserFcBatchReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FeedGetUserFcBatchReq.Merge(dst, src)
}
func (m *FeedGetUserFcBatchReq) XXX_Size() int {
	return m.Size()
}
func (m *FeedGetUserFcBatchReq) XXX_DiscardUnknown() {
	xxx_messageInfo_FeedGetUserFcBatchReq.DiscardUnknown(m)
}

var xxx_messageInfo_FeedGetUserFcBatchReq proto.InternalMessageInfo

func (m *FeedGetUserFcBatchReq) GetUids() []int64 {
	if m != nil {
		return m.Uids
	}
	return nil
}

type FeedGetUserFcBatchResp struct {
	//
	Code int64 `protobuf:"varint,1,opt,name=code,proto3" json:"code"`
	//
	Msg string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg"`
	//
	Message string `protobuf:"bytes,3,opt,name=message,proto3" json:"message"`
	//
	Data map[int64]*FeedGetUserFcBatchResp_RelationList `protobuf:"bytes,4,rep,name=data" json:"data" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *FeedGetUserFcBatchResp) Reset()         { *m = FeedGetUserFcBatchResp{} }
func (m *FeedGetUserFcBatchResp) String() string { return proto.CompactTextString(m) }
func (*FeedGetUserFcBatchResp) ProtoMessage()    {}
func (*FeedGetUserFcBatchResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_Feed_d690314d2e430ba7, []int{3}
}
func (m *FeedGetUserFcBatchResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FeedGetUserFcBatchResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FeedGetUserFcBatchResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *FeedGetUserFcBatchResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FeedGetUserFcBatchResp.Merge(dst, src)
}
func (m *FeedGetUserFcBatchResp) XXX_Size() int {
	return m.Size()
}
func (m *FeedGetUserFcBatchResp) XXX_DiscardUnknown() {
	xxx_messageInfo_FeedGetUserFcBatchResp.DiscardUnknown(m)
}

var xxx_messageInfo_FeedGetUserFcBatchResp proto.InternalMessageInfo

func (m *FeedGetUserFcBatchResp) GetCode() int64 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *FeedGetUserFcBatchResp) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func (m *FeedGetUserFcBatchResp) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *FeedGetUserFcBatchResp) GetData() map[int64]*FeedGetUserFcBatchResp_RelationList {
	if m != nil {
		return m.Data
	}
	return nil
}

type FeedGetUserFcBatchResp_RelationList struct {
	//
	Uid int64 `protobuf:"varint,1,opt,name=uid,proto3" json:"uid"`
	//
	Fc int64 `protobuf:"varint,2,opt,name=fc,proto3" json:"fc"`
}

func (m *FeedGetUserFcBatchResp_RelationList) Reset()         { *m = FeedGetUserFcBatchResp_RelationList{} }
func (m *FeedGetUserFcBatchResp_RelationList) String() string { return proto.CompactTextString(m) }
func (*FeedGetUserFcBatchResp_RelationList) ProtoMessage()    {}
func (*FeedGetUserFcBatchResp_RelationList) Descriptor() ([]byte, []int) {
	return fileDescriptor_Feed_d690314d2e430ba7, []int{3, 1}
}
func (m *FeedGetUserFcBatchResp_RelationList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FeedGetUserFcBatchResp_RelationList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FeedGetUserFcBatchResp_RelationList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *FeedGetUserFcBatchResp_RelationList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FeedGetUserFcBatchResp_RelationList.Merge(dst, src)
}
func (m *FeedGetUserFcBatchResp_RelationList) XXX_Size() int {
	return m.Size()
}
func (m *FeedGetUserFcBatchResp_RelationList) XXX_DiscardUnknown() {
	xxx_messageInfo_FeedGetUserFcBatchResp_RelationList.DiscardUnknown(m)
}

var xxx_messageInfo_FeedGetUserFcBatchResp_RelationList proto.InternalMessageInfo

func (m *FeedGetUserFcBatchResp_RelationList) GetUid() int64 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *FeedGetUserFcBatchResp_RelationList) GetFc() int64 {
	if m != nil {
		return m.Fc
	}
	return 0
}

type FeedGetAttentionListReq struct {
	// 用户uid
	Uid int64 `protobuf:"varint,1,opt,name=uid,proto3" json:"uid"`
}

func (m *FeedGetAttentionListReq) Reset()         { *m = FeedGetAttentionListReq{} }
func (m *FeedGetAttentionListReq) String() string { return proto.CompactTextString(m) }
func (*FeedGetAttentionListReq) ProtoMessage()    {}
func (*FeedGetAttentionListReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_Feed_d690314d2e430ba7, []int{4}
}
func (m *FeedGetAttentionListReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FeedGetAttentionListReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FeedGetAttentionListReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *FeedGetAttentionListReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FeedGetAttentionListReq.Merge(dst, src)
}
func (m *FeedGetAttentionListReq) XXX_Size() int {
	return m.Size()
}
func (m *FeedGetAttentionListReq) XXX_DiscardUnknown() {
	xxx_messageInfo_FeedGetAttentionListReq.DiscardUnknown(m)
}

var xxx_messageInfo_FeedGetAttentionListReq proto.InternalMessageInfo

func (m *FeedGetAttentionListReq) GetUid() int64 {
	if m != nil {
		return m.Uid
	}
	return 0
}

type FeedGetAttentionListResp struct {
	//
	Code int64 `protobuf:"varint,1,opt,name=code,proto3" json:"code"`
	//
	Msg string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg"`
	//
	Message string `protobuf:"bytes,3,opt,name=message,proto3" json:"message"`
	//
	Data *FeedGetAttentionListResp_Data `protobuf:"bytes,4,opt,name=data" json:"data"`
}

func (m *FeedGetAttentionListResp) Reset()         { *m = FeedGetAttentionListResp{} }
func (m *FeedGetAttentionListResp) String() string { return proto.CompactTextString(m) }
func (*FeedGetAttentionListResp) ProtoMessage()    {}
func (*FeedGetAttentionListResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_Feed_d690314d2e430ba7, []int{5}
}
func (m *FeedGetAttentionListResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FeedGetAttentionListResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FeedGetAttentionListResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *FeedGetAttentionListResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FeedGetAttentionListResp.Merge(dst, src)
}
func (m *FeedGetAttentionListResp) XXX_Size() int {
	return m.Size()
}
func (m *FeedGetAttentionListResp) XXX_DiscardUnknown() {
	xxx_messageInfo_FeedGetAttentionListResp.DiscardUnknown(m)
}

var xxx_messageInfo_FeedGetAttentionListResp proto.InternalMessageInfo

func (m *FeedGetAttentionListResp) GetCode() int64 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *FeedGetAttentionListResp) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func (m *FeedGetAttentionListResp) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *FeedGetAttentionListResp) GetData() *FeedGetAttentionListResp_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

type FeedGetAttentionListResp_Data struct {
	//
	List []string `protobuf:"bytes,1,rep,name=list" json:"list"`
}

func (m *FeedGetAttentionListResp_Data) Reset()         { *m = FeedGetAttentionListResp_Data{} }
func (m *FeedGetAttentionListResp_Data) String() string { return proto.CompactTextString(m) }
func (*FeedGetAttentionListResp_Data) ProtoMessage()    {}
func (*FeedGetAttentionListResp_Data) Descriptor() ([]byte, []int) {
	return fileDescriptor_Feed_d690314d2e430ba7, []int{5, 0}
}
func (m *FeedGetAttentionListResp_Data) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FeedGetAttentionListResp_Data) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FeedGetAttentionListResp_Data.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *FeedGetAttentionListResp_Data) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FeedGetAttentionListResp_Data.Merge(dst, src)
}
func (m *FeedGetAttentionListResp_Data) XXX_Size() int {
	return m.Size()
}
func (m *FeedGetAttentionListResp_Data) XXX_DiscardUnknown() {
	xxx_messageInfo_FeedGetAttentionListResp_Data.DiscardUnknown(m)
}

var xxx_messageInfo_FeedGetAttentionListResp_Data proto.InternalMessageInfo

func (m *FeedGetAttentionListResp_Data) GetList() []string {
	if m != nil {
		return m.List
	}
	return nil
}

func init() {
	proto.RegisterType((*FeedGetUserFcReq)(nil), "relation.v1.FeedGetUserFcReq")
	proto.RegisterType((*FeedGetUserFcResp)(nil), "relation.v1.FeedGetUserFcResp")
	proto.RegisterType((*FeedGetUserFcResp_Data)(nil), "relation.v1.FeedGetUserFcResp.Data")
	proto.RegisterType((*FeedGetUserFcBatchReq)(nil), "relation.v1.FeedGetUserFcBatchReq")
	proto.RegisterType((*FeedGetUserFcBatchResp)(nil), "relation.v1.FeedGetUserFcBatchResp")
	proto.RegisterMapType((map[int64]*FeedGetUserFcBatchResp_RelationList)(nil), "relation.v1.FeedGetUserFcBatchResp.DataEntry")
	proto.RegisterType((*FeedGetUserFcBatchResp_RelationList)(nil), "relation.v1.FeedGetUserFcBatchResp.RelationList")
	proto.RegisterType((*FeedGetAttentionListReq)(nil), "relation.v1.FeedGetAttentionListReq")
	proto.RegisterType((*FeedGetAttentionListResp)(nil), "relation.v1.FeedGetAttentionListResp")
	proto.RegisterType((*FeedGetAttentionListResp_Data)(nil), "relation.v1.FeedGetAttentionListResp.Data")
}
func (m *FeedGetUserFcReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FeedGetUserFcReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Follow != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintFeed(dAtA, i, uint64(m.Follow))
	}
	return i, nil
}

func (m *FeedGetUserFcResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FeedGetUserFcResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintFeed(dAtA, i, uint64(m.Code))
	}
	if len(m.Msg) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintFeed(dAtA, i, uint64(len(m.Msg)))
		i += copy(dAtA[i:], m.Msg)
	}
	if len(m.Message) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintFeed(dAtA, i, uint64(len(m.Message)))
		i += copy(dAtA[i:], m.Message)
	}
	if m.Data != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintFeed(dAtA, i, uint64(m.Data.Size()))
		n1, err := m.Data.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	return i, nil
}

func (m *FeedGetUserFcResp_Data) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FeedGetUserFcResp_Data) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Fc != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintFeed(dAtA, i, uint64(m.Fc))
	}
	return i, nil
}

func (m *FeedGetUserFcBatchReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FeedGetUserFcBatchReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Uids) > 0 {
		dAtA3 := make([]byte, len(m.Uids)*10)
		var j2 int
		for _, num1 := range m.Uids {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA3[j2] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j2++
			}
			dAtA3[j2] = uint8(num)
			j2++
		}
		dAtA[i] = 0xa
		i++
		i = encodeVarintFeed(dAtA, i, uint64(j2))
		i += copy(dAtA[i:], dAtA3[:j2])
	}
	return i, nil
}

func (m *FeedGetUserFcBatchResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FeedGetUserFcBatchResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintFeed(dAtA, i, uint64(m.Code))
	}
	if len(m.Msg) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintFeed(dAtA, i, uint64(len(m.Msg)))
		i += copy(dAtA[i:], m.Msg)
	}
	if len(m.Message) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintFeed(dAtA, i, uint64(len(m.Message)))
		i += copy(dAtA[i:], m.Message)
	}
	if len(m.Data) > 0 {
		for k, _ := range m.Data {
			dAtA[i] = 0x22
			i++
			v := m.Data[k]
			msgSize := 0
			if v != nil {
				msgSize = v.Size()
				msgSize += 1 + sovFeed(uint64(msgSize))
			}
			mapSize := 1 + sovFeed(uint64(k)) + msgSize
			i = encodeVarintFeed(dAtA, i, uint64(mapSize))
			dAtA[i] = 0x8
			i++
			i = encodeVarintFeed(dAtA, i, uint64(k))
			if v != nil {
				dAtA[i] = 0x12
				i++
				i = encodeVarintFeed(dAtA, i, uint64(v.Size()))
				n4, err := v.MarshalTo(dAtA[i:])
				if err != nil {
					return 0, err
				}
				i += n4
			}
		}
	}
	return i, nil
}

func (m *FeedGetUserFcBatchResp_RelationList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FeedGetUserFcBatchResp_RelationList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Uid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintFeed(dAtA, i, uint64(m.Uid))
	}
	if m.Fc != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintFeed(dAtA, i, uint64(m.Fc))
	}
	return i, nil
}

func (m *FeedGetAttentionListReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FeedGetAttentionListReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Uid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintFeed(dAtA, i, uint64(m.Uid))
	}
	return i, nil
}

func (m *FeedGetAttentionListResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FeedGetAttentionListResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintFeed(dAtA, i, uint64(m.Code))
	}
	if len(m.Msg) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintFeed(dAtA, i, uint64(len(m.Msg)))
		i += copy(dAtA[i:], m.Msg)
	}
	if len(m.Message) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintFeed(dAtA, i, uint64(len(m.Message)))
		i += copy(dAtA[i:], m.Message)
	}
	if m.Data != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintFeed(dAtA, i, uint64(m.Data.Size()))
		n5, err := m.Data.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	return i, nil
}

func (m *FeedGetAttentionListResp_Data) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FeedGetAttentionListResp_Data) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, s := range m.List {
			dAtA[i] = 0xa
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	return i, nil
}

func encodeVarintFeed(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *FeedGetUserFcReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Follow != 0 {
		n += 1 + sovFeed(uint64(m.Follow))
	}
	return n
}

func (m *FeedGetUserFcResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovFeed(uint64(m.Code))
	}
	l = len(m.Msg)
	if l > 0 {
		n += 1 + l + sovFeed(uint64(l))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovFeed(uint64(l))
	}
	if m.Data != nil {
		l = m.Data.Size()
		n += 1 + l + sovFeed(uint64(l))
	}
	return n
}

func (m *FeedGetUserFcResp_Data) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Fc != 0 {
		n += 1 + sovFeed(uint64(m.Fc))
	}
	return n
}

func (m *FeedGetUserFcBatchReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Uids) > 0 {
		l = 0
		for _, e := range m.Uids {
			l += sovFeed(uint64(e))
		}
		n += 1 + sovFeed(uint64(l)) + l
	}
	return n
}

func (m *FeedGetUserFcBatchResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovFeed(uint64(m.Code))
	}
	l = len(m.Msg)
	if l > 0 {
		n += 1 + l + sovFeed(uint64(l))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovFeed(uint64(l))
	}
	if len(m.Data) > 0 {
		for k, v := range m.Data {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovFeed(uint64(l))
			}
			mapEntrySize := 1 + sovFeed(uint64(k)) + l
			n += mapEntrySize + 1 + sovFeed(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *FeedGetUserFcBatchResp_RelationList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Uid != 0 {
		n += 1 + sovFeed(uint64(m.Uid))
	}
	if m.Fc != 0 {
		n += 1 + sovFeed(uint64(m.Fc))
	}
	return n
}

func (m *FeedGetAttentionListReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Uid != 0 {
		n += 1 + sovFeed(uint64(m.Uid))
	}
	return n
}

func (m *FeedGetAttentionListResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovFeed(uint64(m.Code))
	}
	l = len(m.Msg)
	if l > 0 {
		n += 1 + l + sovFeed(uint64(l))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovFeed(uint64(l))
	}
	if m.Data != nil {
		l = m.Data.Size()
		n += 1 + l + sovFeed(uint64(l))
	}
	return n
}

func (m *FeedGetAttentionListResp_Data) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, s := range m.List {
			l = len(s)
			n += 1 + l + sovFeed(uint64(l))
		}
	}
	return n
}

func sovFeed(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozFeed(x uint64) (n int) {
	return sovFeed(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *FeedGetUserFcReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFeed
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FeedGetUserFcReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FeedGetUserFcReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Follow", wireType)
			}
			m.Follow = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFeed
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Follow |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFeed(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFeed
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FeedGetUserFcResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFeed
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FeedGetUserFcResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FeedGetUserFcResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFeed
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFeed
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFeed
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFeed
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFeed
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFeed
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFeed
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = &FeedGetUserFcResp_Data{}
			}
			if err := m.Data.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFeed(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFeed
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FeedGetUserFcResp_Data) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFeed
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Data: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Data: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fc", wireType)
			}
			m.Fc = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFeed
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Fc |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFeed(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFeed
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FeedGetUserFcBatchReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFeed
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FeedGetUserFcBatchReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FeedGetUserFcBatchReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowFeed
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Uids = append(m.Uids, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowFeed
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthFeed
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Uids) == 0 {
					m.Uids = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowFeed
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Uids = append(m.Uids, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Uids", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFeed(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFeed
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FeedGetUserFcBatchResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFeed
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FeedGetUserFcBatchResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FeedGetUserFcBatchResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFeed
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFeed
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFeed
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFeed
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFeed
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFeed
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFeed
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = make(map[int64]*FeedGetUserFcBatchResp_RelationList)
			}
			var mapkey int64
			var mapvalue *FeedGetUserFcBatchResp_RelationList
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowFeed
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowFeed
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= (int64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowFeed
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= (int(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthFeed
					}
					postmsgIndex := iNdEx + mapmsglen
					if mapmsglen < 0 {
						return ErrInvalidLengthFeed
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &FeedGetUserFcBatchResp_RelationList{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipFeed(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthFeed
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Data[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFeed(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFeed
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FeedGetUserFcBatchResp_RelationList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFeed
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RelationList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RelationList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFeed
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fc", wireType)
			}
			m.Fc = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFeed
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Fc |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFeed(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFeed
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FeedGetAttentionListReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFeed
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FeedGetAttentionListReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FeedGetAttentionListReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFeed
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFeed(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFeed
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FeedGetAttentionListResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFeed
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FeedGetAttentionListResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FeedGetAttentionListResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFeed
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFeed
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFeed
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFeed
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFeed
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFeed
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFeed
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = &FeedGetAttentionListResp_Data{}
			}
			if err := m.Data.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFeed(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFeed
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FeedGetAttentionListResp_Data) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFeed
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Data: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Data: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFeed
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFeed
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFeed(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFeed
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipFeed(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowFeed
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFeed
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFeed
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthFeed
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowFeed
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipFeed(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthFeed = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowFeed   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("v1/Feed.proto", fileDescriptor_Feed_d690314d2e430ba7) }

var fileDescriptor_Feed_d690314d2e430ba7 = []byte{
	// 544 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x94, 0xcf, 0x6e, 0xd3, 0x4e,
	0x10, 0xc7, 0xb3, 0xb6, 0x7f, 0xe9, 0x2f, 0x13, 0x40, 0x65, 0x25, 0x8a, 0xb1, 0x82, 0x13, 0xb9,
	0xad, 0x14, 0x21, 0xd5, 0x21, 0xe1, 0x8f, 0x10, 0xb7, 0x44, 0x10, 0x10, 0x70, 0x5a, 0x89, 0x03,
	0x5c, 0xaa, 0x8d, 0xbd, 0x71, 0x2d, 0x92, 0xb8, 0x8e, 0xd7, 0x41, 0x7d, 0x8b, 0x3e, 0x16, 0xc7,
	0x9e, 0x10, 0x27, 0x0b, 0x25, 0x37, 0x5f, 0x79, 0x01, 0xb4, 0x6b, 0xc7, 0x6a, 0x48, 0x08, 0x39,
	0xf5, 0x32, 0xde, 0xd9, 0xdd, 0x99, 0xfd, 0xee, 0x67, 0x66, 0x0d, 0xb7, 0x67, 0xed, 0x56, 0x9f,
	0x31, 0xd7, 0x3e, 0x9f, 0x06, 0x3c, 0xc0, 0xd5, 0x29, 0x1b, 0x51, 0xee, 0x07, 0x13, 0x7b, 0xd6,
	0x36, 0x4e, 0x3c, 0x9f, 0x9f, 0xc5, 0x03, 0xdb, 0x09, 0xc6, 0x2d, 0x2f, 0xf0, 0x82, 0x96, 0xdc,
	0x33, 0x88, 0x87, 0xd2, 0x93, 0x8e, 0x1c, 0x65, 0xb1, 0xd6, 0x73, 0xd8, 0x17, 0x99, 0xde, 0x30,
	0xfe, 0x31, 0x62, 0xd3, 0xbe, 0x43, 0x58, 0x88, 0x2d, 0x28, 0x0f, 0x83, 0xd1, 0x28, 0xf8, 0xaa,
	0xa3, 0x06, 0x6a, 0xaa, 0x3d, 0x48, 0x93, 0x7a, 0x3e, 0x43, 0xf2, 0xaf, 0xf5, 0x1d, 0xc1, 0xdd,
	0x3f, 0x02, 0xa3, 0x73, 0x5c, 0x03, 0xcd, 0x09, 0x5c, 0x96, 0xc7, 0xfd, 0x9f, 0x26, 0x75, 0xe9,
	0x13, 0x69, 0xf1, 0x03, 0x50, 0xc7, 0x91, 0xa7, 0x2b, 0x0d, 0xd4, 0xac, 0xf4, 0xf6, 0xd2, 0xa4,
	0x2e, 0x5c, 0x22, 0x0c, 0x3e, 0x86, 0xbd, 0x31, 0x8b, 0x22, 0xea, 0x31, 0x5d, 0x95, 0xcb, 0xd5,
	0x34, 0xa9, 0x2f, 0xa7, 0xc8, 0x72, 0x80, 0xbb, 0xa0, 0xb9, 0x94, 0x53, 0x5d, 0x6b, 0xa0, 0x66,
	0xb5, 0x73, 0x68, 0x5f, 0xbb, 0xb8, 0xbd, 0xa6, 0xc6, 0x7e, 0x45, 0x39, 0xcd, 0x44, 0x88, 0x20,
	0x22, 0xad, 0x61, 0x82, 0x26, 0xe6, 0xf1, 0x01, 0x28, 0x43, 0x27, 0x17, 0x5a, 0x4e, 0x93, 0xba,
	0x32, 0x74, 0x88, 0x32, 0x74, 0xac, 0x67, 0x70, 0x6f, 0x25, 0x53, 0x8f, 0x72, 0xe7, 0x4c, 0x50,
	0xa9, 0x81, 0x16, 0xfb, 0x6e, 0xa4, 0xa3, 0x86, 0xba, 0xbc, 0x9b, 0xf0, 0x89, 0xb4, 0xd6, 0x2f,
	0x05, 0x0e, 0x36, 0xc5, 0xdd, 0x00, 0x94, 0xf7, 0x05, 0x14, 0xb5, 0x59, 0xed, 0x9c, 0xfc, 0x1d,
	0x4a, 0x21, 0x49, 0x92, 0x79, 0x3d, 0xe1, 0xd3, 0x8b, 0x35, 0x3c, 0x3e, 0x54, 0x8a, 0x45, 0xbc,
	0x0f, 0xea, 0x17, 0x76, 0x91, 0x09, 0x27, 0x62, 0x88, 0xfb, 0xf0, 0xdf, 0x8c, 0x8e, 0x62, 0x26,
	0xf5, 0x56, 0x3b, 0x8f, 0x77, 0x39, 0x8c, 0xe4, 0x5b, 0x3e, 0xf8, 0x11, 0x27, 0x59, 0xf8, 0x4b,
	0xe5, 0x05, 0x32, 0xba, 0x70, 0xeb, 0xfa, 0x92, 0x20, 0x11, 0xfb, 0x6e, 0x8e, 0x49, 0x92, 0x88,
	0x7d, 0x97, 0x08, 0x93, 0x17, 0x4b, 0x59, 0x2b, 0xd6, 0x53, 0xb8, 0x9f, 0x1f, 0xda, 0xe5, 0x9c,
	0x4d, 0x8a, 0x53, 0x58, 0xb8, 0x25, 0x9b, 0x95, 0x22, 0xd0, 0x37, 0x87, 0xdd, 0x40, 0xb5, 0xde,
	0xae, 0xb4, 0xf0, 0xa3, 0x4d, 0x00, 0xd7, 0x44, 0x6d, 0xee, 0xe4, 0xa3, 0xbc, 0x93, 0x6b, 0xa0,
	0x8d, 0xfc, 0x88, 0xcb, 0xc6, 0xac, 0x64, 0xbb, 0x84, 0x4f, 0xa4, 0xed, 0x5c, 0x2a, 0xa0, 0x89,
	0xbc, 0xf8, 0x1d, 0x54, 0x8a, 0xe2, 0xe0, 0x87, 0xdb, 0x9e, 0x4e, 0x68, 0x98, 0xdb, 0x5f, 0x16,
	0xfe, 0x04, 0x77, 0x56, 0x0b, 0x8d, 0xad, 0x7f, 0x76, 0x42, 0x68, 0x1c, 0xee, 0xd0, 0x2d, 0x98,
	0x02, 0xf6, 0x18, 0x3f, 0xa5, 0x4b, 0x06, 0xa7, 0xe2, 0x16, 0xf8, 0x68, 0x07, 0x4e, 0xa1, 0x71,
	0xbc, 0x13, 0xcd, 0x5e, 0xed, 0xdb, 0xdc, 0x44, 0x57, 0x73, 0x13, 0xfd, 0x9c, 0x9b, 0xe8, 0x72,
	0x61, 0x96, 0xae, 0x16, 0x66, 0xe9, 0xc7, 0xc2, 0x2c, 0x7d, 0x56, 0x66, 0xed, 0x41, 0x59, 0xfe,
	0x18, 0x9f, 0xfc, 0x0e, 0x00, 0x00, 0xff, 0xff, 0xe6, 0xeb, 0x77, 0xaf, 0x65, 0x05, 0x00, 0x00,
}
