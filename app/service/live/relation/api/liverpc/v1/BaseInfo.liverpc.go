// Code generated by protoc-gen-liverpc v0.1, DO NOT EDIT.
// source: v1/BaseInfo.proto

package v1

import context "context"

import proto "github.com/golang/protobuf/proto"
import "go-common/library/net/rpc/liverpc"

var _ proto.Message // generate to suppress unused imports

// ==================
// BaseInfo Interface
// ==================

type BaseInfo interface {
	// * uid获取关注列表和粉丝数
	//
	GetFollowType(context.Context, *BaseInfoGetFollowTypeReq) (*BaseInfoGetFollowTypeResp, error)

	// * uid获取最近30天送礼数据
	//
	GetGiftInfo(context.Context, *BaseInfoGetGiftInfoReq) (*BaseInfoGetGiftInfoResp, error)
}

// ========================
// BaseInfo Live Rpc Client
// ========================

type baseInfoRpcClient struct {
	client *liverpc.Client
}

// NewBaseInfoRpcClient creates a Rpc client that implements the BaseInfo interface.
// It communicates using Rpc and can be configured with a custom HTTPClient.
func NewBaseInfoRpcClient(client *liverpc.Client) BaseInfo {
	return &baseInfoRpcClient{
		client: client,
	}
}

func (c *baseInfoRpcClient) GetFollowType(ctx context.Context, in *BaseInfoGetFollowTypeReq) (*BaseInfoGetFollowTypeResp, error) {
	out := new(BaseInfoGetFollowTypeResp)
	err := doRpcRequest(ctx, c.client, 1, "BaseInfo.getFollowType", in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *baseInfoRpcClient) GetGiftInfo(ctx context.Context, in *BaseInfoGetGiftInfoReq) (*BaseInfoGetGiftInfoResp, error) {
	out := new(BaseInfoGetGiftInfoResp)
	err := doRpcRequest(ctx, c.client, 1, "BaseInfo.getGiftInfo", in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}
