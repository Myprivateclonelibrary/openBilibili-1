// Code generated by protoc-gen-liverpc v0.1, DO NOT EDIT.
// source: v2/Anchor.proto

/*
Package v2 is a generated liverpc stub package.
This code was generated with go-common/app/tool/liverpc/protoc-gen-liverpc v0.1.

It is generated from these files:
	v2/Anchor.proto
	v2/HighQps.proto
*/
package v2

import context "context"

import proto "github.com/golang/protobuf/proto"
import "go-common/library/net/rpc/liverpc"

var _ proto.Message // generate to suppress unused imports
// Imports only used by utility functions:

// ================
// Anchor Interface
// ================

type Anchor interface {
	// * 查看房管的勋章信息
	//
	QueryLiveWearing(context.Context, *AnchorQueryLiveWearingReq) (*AnchorQueryLiveWearingResp, error)
}

// ======================
// Anchor Live Rpc Client
// ======================

type anchorRpcClient struct {
	client *liverpc.Client
}

// NewAnchorRpcClient creates a Rpc client that implements the Anchor interface.
// It communicates using Rpc and can be configured with a custom HTTPClient.
func NewAnchorRpcClient(client *liverpc.Client) Anchor {
	return &anchorRpcClient{
		client: client,
	}
}

func (c *anchorRpcClient) QueryLiveWearing(ctx context.Context, in *AnchorQueryLiveWearingReq) (*AnchorQueryLiveWearingResp, error) {
	out := new(AnchorQueryLiveWearingResp)
	err := doRpcRequest(ctx, c.client, 2, "Anchor.query_live_wearing", in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// =====
// Utils
// =====

func doRpcRequest(ctx context.Context, client *liverpc.Client, version int, method string, in, out proto.Message) (err error) {
	err = client.Call(ctx, version, method, in, out)
	return
}
