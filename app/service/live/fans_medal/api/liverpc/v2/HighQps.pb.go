// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: v2/HighQps.proto

package v2

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type HighQpsReplyMedalsReq struct {
	//
	UpUid int64 `protobuf:"varint,1,opt,name=up_uid,json=upUid,proto3" json:"up_uid"`
	//
	UidList []*HighQpsReplyMedalsReq_UidList `protobuf:"bytes,2,rep,name=uid_list,json=uidList" json:"uid_list"`
}

func (m *HighQpsReplyMedalsReq) Reset()         { *m = HighQpsReplyMedalsReq{} }
func (m *HighQpsReplyMedalsReq) String() string { return proto.CompactTextString(m) }
func (*HighQpsReplyMedalsReq) ProtoMessage()    {}
func (*HighQpsReplyMedalsReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_HighQps_9fba97ef3ec619e6, []int{0}
}
func (m *HighQpsReplyMedalsReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HighQpsReplyMedalsReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HighQpsReplyMedalsReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *HighQpsReplyMedalsReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HighQpsReplyMedalsReq.Merge(dst, src)
}
func (m *HighQpsReplyMedalsReq) XXX_Size() int {
	return m.Size()
}
func (m *HighQpsReplyMedalsReq) XXX_DiscardUnknown() {
	xxx_messageInfo_HighQpsReplyMedalsReq.DiscardUnknown(m)
}

var xxx_messageInfo_HighQpsReplyMedalsReq proto.InternalMessageInfo

func (m *HighQpsReplyMedalsReq) GetUpUid() int64 {
	if m != nil {
		return m.UpUid
	}
	return 0
}

func (m *HighQpsReplyMedalsReq) GetUidList() []*HighQpsReplyMedalsReq_UidList {
	if m != nil {
		return m.UidList
	}
	return nil
}

type HighQpsReplyMedalsReq_UidList struct {
	//
	Uid int64 `protobuf:"varint,1,opt,name=uid,proto3" json:"uid"`
}

func (m *HighQpsReplyMedalsReq_UidList) Reset()         { *m = HighQpsReplyMedalsReq_UidList{} }
func (m *HighQpsReplyMedalsReq_UidList) String() string { return proto.CompactTextString(m) }
func (*HighQpsReplyMedalsReq_UidList) ProtoMessage()    {}
func (*HighQpsReplyMedalsReq_UidList) Descriptor() ([]byte, []int) {
	return fileDescriptor_HighQps_9fba97ef3ec619e6, []int{0, 0}
}
func (m *HighQpsReplyMedalsReq_UidList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HighQpsReplyMedalsReq_UidList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HighQpsReplyMedalsReq_UidList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *HighQpsReplyMedalsReq_UidList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HighQpsReplyMedalsReq_UidList.Merge(dst, src)
}
func (m *HighQpsReplyMedalsReq_UidList) XXX_Size() int {
	return m.Size()
}
func (m *HighQpsReplyMedalsReq_UidList) XXX_DiscardUnknown() {
	xxx_messageInfo_HighQpsReplyMedalsReq_UidList.DiscardUnknown(m)
}

var xxx_messageInfo_HighQpsReplyMedalsReq_UidList proto.InternalMessageInfo

func (m *HighQpsReplyMedalsReq_UidList) GetUid() int64 {
	if m != nil {
		return m.Uid
	}
	return 0
}

type HighQpsReplyMedalsResp struct {
	//
	Code int64 `protobuf:"varint,1,opt,name=code,proto3" json:"code"`
	//
	Msg string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg"`
	//
	Data []*HighQpsReplyMedalsResp_Data `protobuf:"bytes,3,rep,name=data" json:"data"`
}

func (m *HighQpsReplyMedalsResp) Reset()         { *m = HighQpsReplyMedalsResp{} }
func (m *HighQpsReplyMedalsResp) String() string { return proto.CompactTextString(m) }
func (*HighQpsReplyMedalsResp) ProtoMessage()    {}
func (*HighQpsReplyMedalsResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_HighQps_9fba97ef3ec619e6, []int{1}
}
func (m *HighQpsReplyMedalsResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HighQpsReplyMedalsResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HighQpsReplyMedalsResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *HighQpsReplyMedalsResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HighQpsReplyMedalsResp.Merge(dst, src)
}
func (m *HighQpsReplyMedalsResp) XXX_Size() int {
	return m.Size()
}
func (m *HighQpsReplyMedalsResp) XXX_DiscardUnknown() {
	xxx_messageInfo_HighQpsReplyMedalsResp.DiscardUnknown(m)
}

var xxx_messageInfo_HighQpsReplyMedalsResp proto.InternalMessageInfo

func (m *HighQpsReplyMedalsResp) GetCode() int64 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *HighQpsReplyMedalsResp) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func (m *HighQpsReplyMedalsResp) GetData() []*HighQpsReplyMedalsResp_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

type HighQpsReplyMedalsResp_Data struct {
	// 用户uid
	Uid int64 `protobuf:"varint,1,opt,name=uid,proto3" json:"uid"`
	// 粉丝勋章ID
	MedalId int64 `protobuf:"varint,2,opt,name=medal_id,json=medalId,proto3" json:"medal_id"`
	// 粉丝名称ID
	MedalName string `protobuf:"bytes,3,opt,name=medal_name,json=medalName,proto3" json:"medal_name"`
	// 粉丝勋章等级
	Level int64 `protobuf:"varint,4,opt,name=level,proto3" json:"level"`
}

func (m *HighQpsReplyMedalsResp_Data) Reset()         { *m = HighQpsReplyMedalsResp_Data{} }
func (m *HighQpsReplyMedalsResp_Data) String() string { return proto.CompactTextString(m) }
func (*HighQpsReplyMedalsResp_Data) ProtoMessage()    {}
func (*HighQpsReplyMedalsResp_Data) Descriptor() ([]byte, []int) {
	return fileDescriptor_HighQps_9fba97ef3ec619e6, []int{1, 0}
}
func (m *HighQpsReplyMedalsResp_Data) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HighQpsReplyMedalsResp_Data) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HighQpsReplyMedalsResp_Data.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *HighQpsReplyMedalsResp_Data) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HighQpsReplyMedalsResp_Data.Merge(dst, src)
}
func (m *HighQpsReplyMedalsResp_Data) XXX_Size() int {
	return m.Size()
}
func (m *HighQpsReplyMedalsResp_Data) XXX_DiscardUnknown() {
	xxx_messageInfo_HighQpsReplyMedalsResp_Data.DiscardUnknown(m)
}

var xxx_messageInfo_HighQpsReplyMedalsResp_Data proto.InternalMessageInfo

func (m *HighQpsReplyMedalsResp_Data) GetUid() int64 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *HighQpsReplyMedalsResp_Data) GetMedalId() int64 {
	if m != nil {
		return m.MedalId
	}
	return 0
}

func (m *HighQpsReplyMedalsResp_Data) GetMedalName() string {
	if m != nil {
		return m.MedalName
	}
	return ""
}

func (m *HighQpsReplyMedalsResp_Data) GetLevel() int64 {
	if m != nil {
		return m.Level
	}
	return 0
}

type HighQpsLiveWearedReq struct {
	//
	Uid int64 `protobuf:"varint,1,opt,name=uid,proto3" json:"uid"`
}

func (m *HighQpsLiveWearedReq) Reset()         { *m = HighQpsLiveWearedReq{} }
func (m *HighQpsLiveWearedReq) String() string { return proto.CompactTextString(m) }
func (*HighQpsLiveWearedReq) ProtoMessage()    {}
func (*HighQpsLiveWearedReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_HighQps_9fba97ef3ec619e6, []int{2}
}
func (m *HighQpsLiveWearedReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HighQpsLiveWearedReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HighQpsLiveWearedReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *HighQpsLiveWearedReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HighQpsLiveWearedReq.Merge(dst, src)
}
func (m *HighQpsLiveWearedReq) XXX_Size() int {
	return m.Size()
}
func (m *HighQpsLiveWearedReq) XXX_DiscardUnknown() {
	xxx_messageInfo_HighQpsLiveWearedReq.DiscardUnknown(m)
}

var xxx_messageInfo_HighQpsLiveWearedReq proto.InternalMessageInfo

func (m *HighQpsLiveWearedReq) GetUid() int64 {
	if m != nil {
		return m.Uid
	}
	return 0
}

type HighQpsLiveWearedResp struct {
	//
	Code int64 `protobuf:"varint,1,opt,name=code,proto3" json:"code"`
	//
	Msg string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg"`
	//
	Data *HighQpsLiveWearedResp_Data `protobuf:"bytes,3,opt,name=data" json:"data"`
}

func (m *HighQpsLiveWearedResp) Reset()         { *m = HighQpsLiveWearedResp{} }
func (m *HighQpsLiveWearedResp) String() string { return proto.CompactTextString(m) }
func (*HighQpsLiveWearedResp) ProtoMessage()    {}
func (*HighQpsLiveWearedResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_HighQps_9fba97ef3ec619e6, []int{3}
}
func (m *HighQpsLiveWearedResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HighQpsLiveWearedResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HighQpsLiveWearedResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *HighQpsLiveWearedResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HighQpsLiveWearedResp.Merge(dst, src)
}
func (m *HighQpsLiveWearedResp) XXX_Size() int {
	return m.Size()
}
func (m *HighQpsLiveWearedResp) XXX_DiscardUnknown() {
	xxx_messageInfo_HighQpsLiveWearedResp.DiscardUnknown(m)
}

var xxx_messageInfo_HighQpsLiveWearedResp proto.InternalMessageInfo

func (m *HighQpsLiveWearedResp) GetCode() int64 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *HighQpsLiveWearedResp) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func (m *HighQpsLiveWearedResp) GetData() *HighQpsLiveWearedResp_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

type HighQpsLiveWearedResp_Data struct {
	// 用户uid
	Uid int64 `protobuf:"varint,1,opt,name=uid,proto3" json:"uid"`
	// up主uid
	TargetId int64 `protobuf:"varint,2,opt,name=target_id,json=targetId,proto3" json:"target_id"`
	// 粉丝勋章id
	MedalId int64 `protobuf:"varint,3,opt,name=medal_id,json=medalId,proto3" json:"medal_id"`
	// 粉丝勋章等级
	Level int64 `protobuf:"varint,4,opt,name=level,proto3" json:"level"`
	// 粉丝勋章名称
	MedalName string `protobuf:"bytes,5,opt,name=medal_name,json=medalName,proto3" json:"medal_name"`
	// 粉丝勋章颜色，根据等级变色
	MedalColor int64 `protobuf:"varint,6,opt,name=medal_color,json=medalColor,proto3" json:"medal_color"`
}

func (m *HighQpsLiveWearedResp_Data) Reset()         { *m = HighQpsLiveWearedResp_Data{} }
func (m *HighQpsLiveWearedResp_Data) String() string { return proto.CompactTextString(m) }
func (*HighQpsLiveWearedResp_Data) ProtoMessage()    {}
func (*HighQpsLiveWearedResp_Data) Descriptor() ([]byte, []int) {
	return fileDescriptor_HighQps_9fba97ef3ec619e6, []int{3, 0}
}
func (m *HighQpsLiveWearedResp_Data) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HighQpsLiveWearedResp_Data) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HighQpsLiveWearedResp_Data.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *HighQpsLiveWearedResp_Data) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HighQpsLiveWearedResp_Data.Merge(dst, src)
}
func (m *HighQpsLiveWearedResp_Data) XXX_Size() int {
	return m.Size()
}
func (m *HighQpsLiveWearedResp_Data) XXX_DiscardUnknown() {
	xxx_messageInfo_HighQpsLiveWearedResp_Data.DiscardUnknown(m)
}

var xxx_messageInfo_HighQpsLiveWearedResp_Data proto.InternalMessageInfo

func (m *HighQpsLiveWearedResp_Data) GetUid() int64 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *HighQpsLiveWearedResp_Data) GetTargetId() int64 {
	if m != nil {
		return m.TargetId
	}
	return 0
}

func (m *HighQpsLiveWearedResp_Data) GetMedalId() int64 {
	if m != nil {
		return m.MedalId
	}
	return 0
}

func (m *HighQpsLiveWearedResp_Data) GetLevel() int64 {
	if m != nil {
		return m.Level
	}
	return 0
}

func (m *HighQpsLiveWearedResp_Data) GetMedalName() string {
	if m != nil {
		return m.MedalName
	}
	return ""
}

func (m *HighQpsLiveWearedResp_Data) GetMedalColor() int64 {
	if m != nil {
		return m.MedalColor
	}
	return 0
}

type HighQpsLiveReceivedReq struct {
	//
	Uid int64 `protobuf:"varint,1,opt,name=uid,proto3" json:"uid"`
}

func (m *HighQpsLiveReceivedReq) Reset()         { *m = HighQpsLiveReceivedReq{} }
func (m *HighQpsLiveReceivedReq) String() string { return proto.CompactTextString(m) }
func (*HighQpsLiveReceivedReq) ProtoMessage()    {}
func (*HighQpsLiveReceivedReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_HighQps_9fba97ef3ec619e6, []int{4}
}
func (m *HighQpsLiveReceivedReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HighQpsLiveReceivedReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HighQpsLiveReceivedReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *HighQpsLiveReceivedReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HighQpsLiveReceivedReq.Merge(dst, src)
}
func (m *HighQpsLiveReceivedReq) XXX_Size() int {
	return m.Size()
}
func (m *HighQpsLiveReceivedReq) XXX_DiscardUnknown() {
	xxx_messageInfo_HighQpsLiveReceivedReq.DiscardUnknown(m)
}

var xxx_messageInfo_HighQpsLiveReceivedReq proto.InternalMessageInfo

func (m *HighQpsLiveReceivedReq) GetUid() int64 {
	if m != nil {
		return m.Uid
	}
	return 0
}

type HighQpsLiveReceivedResp struct {
	//
	Code int64 `protobuf:"varint,1,opt,name=code,proto3" json:"code"`
	//
	Msg string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg"`
	//
	Data []*HighQpsLiveReceivedResp_Data `protobuf:"bytes,3,rep,name=data" json:"data"`
}

func (m *HighQpsLiveReceivedResp) Reset()         { *m = HighQpsLiveReceivedResp{} }
func (m *HighQpsLiveReceivedResp) String() string { return proto.CompactTextString(m) }
func (*HighQpsLiveReceivedResp) ProtoMessage()    {}
func (*HighQpsLiveReceivedResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_HighQps_9fba97ef3ec619e6, []int{5}
}
func (m *HighQpsLiveReceivedResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HighQpsLiveReceivedResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HighQpsLiveReceivedResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *HighQpsLiveReceivedResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HighQpsLiveReceivedResp.Merge(dst, src)
}
func (m *HighQpsLiveReceivedResp) XXX_Size() int {
	return m.Size()
}
func (m *HighQpsLiveReceivedResp) XXX_DiscardUnknown() {
	xxx_messageInfo_HighQpsLiveReceivedResp.DiscardUnknown(m)
}

var xxx_messageInfo_HighQpsLiveReceivedResp proto.InternalMessageInfo

func (m *HighQpsLiveReceivedResp) GetCode() int64 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *HighQpsLiveReceivedResp) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func (m *HighQpsLiveReceivedResp) GetData() []*HighQpsLiveReceivedResp_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

type HighQpsLiveReceivedResp_Data struct {
	// 用户uid
	Uid int64 `protobuf:"varint,1,opt,name=uid,proto3" json:"uid"`
	// up主uid
	TargetId int64 `protobuf:"varint,2,opt,name=target_id,json=targetId,proto3" json:"target_id"`
	// 粉丝勋章id
	MedalId int64 `protobuf:"varint,3,opt,name=medal_id,json=medalId,proto3" json:"medal_id"`
	// 粉丝勋章等级
	Level int64 `protobuf:"varint,4,opt,name=level,proto3" json:"level"`
	// 粉丝勋章名称
	MedalName string `protobuf:"bytes,5,opt,name=medal_name,json=medalName,proto3" json:"medal_name"`
}

func (m *HighQpsLiveReceivedResp_Data) Reset()         { *m = HighQpsLiveReceivedResp_Data{} }
func (m *HighQpsLiveReceivedResp_Data) String() string { return proto.CompactTextString(m) }
func (*HighQpsLiveReceivedResp_Data) ProtoMessage()    {}
func (*HighQpsLiveReceivedResp_Data) Descriptor() ([]byte, []int) {
	return fileDescriptor_HighQps_9fba97ef3ec619e6, []int{5, 0}
}
func (m *HighQpsLiveReceivedResp_Data) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HighQpsLiveReceivedResp_Data) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HighQpsLiveReceivedResp_Data.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *HighQpsLiveReceivedResp_Data) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HighQpsLiveReceivedResp_Data.Merge(dst, src)
}
func (m *HighQpsLiveReceivedResp_Data) XXX_Size() int {
	return m.Size()
}
func (m *HighQpsLiveReceivedResp_Data) XXX_DiscardUnknown() {
	xxx_messageInfo_HighQpsLiveReceivedResp_Data.DiscardUnknown(m)
}

var xxx_messageInfo_HighQpsLiveReceivedResp_Data proto.InternalMessageInfo

func (m *HighQpsLiveReceivedResp_Data) GetUid() int64 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *HighQpsLiveReceivedResp_Data) GetTargetId() int64 {
	if m != nil {
		return m.TargetId
	}
	return 0
}

func (m *HighQpsLiveReceivedResp_Data) GetMedalId() int64 {
	if m != nil {
		return m.MedalId
	}
	return 0
}

func (m *HighQpsLiveReceivedResp_Data) GetLevel() int64 {
	if m != nil {
		return m.Level
	}
	return 0
}

func (m *HighQpsLiveReceivedResp_Data) GetMedalName() string {
	if m != nil {
		return m.MedalName
	}
	return ""
}

type HighQpsUpMedalReq struct {
	// up主uid
	Uid int64 `protobuf:"varint,1,opt,name=uid,proto3" json:"uid"`
}

func (m *HighQpsUpMedalReq) Reset()         { *m = HighQpsUpMedalReq{} }
func (m *HighQpsUpMedalReq) String() string { return proto.CompactTextString(m) }
func (*HighQpsUpMedalReq) ProtoMessage()    {}
func (*HighQpsUpMedalReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_HighQps_9fba97ef3ec619e6, []int{6}
}
func (m *HighQpsUpMedalReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HighQpsUpMedalReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HighQpsUpMedalReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *HighQpsUpMedalReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HighQpsUpMedalReq.Merge(dst, src)
}
func (m *HighQpsUpMedalReq) XXX_Size() int {
	return m.Size()
}
func (m *HighQpsUpMedalReq) XXX_DiscardUnknown() {
	xxx_messageInfo_HighQpsUpMedalReq.DiscardUnknown(m)
}

var xxx_messageInfo_HighQpsUpMedalReq proto.InternalMessageInfo

func (m *HighQpsUpMedalReq) GetUid() int64 {
	if m != nil {
		return m.Uid
	}
	return 0
}

type HighQpsUpMedalResp struct {
	//
	Code int64 `protobuf:"varint,1,opt,name=code,proto3" json:"code"`
	//
	Msg string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg"`
	//
	Data *HighQpsUpMedalResp_Data `protobuf:"bytes,3,opt,name=data" json:"data"`
}

func (m *HighQpsUpMedalResp) Reset()         { *m = HighQpsUpMedalResp{} }
func (m *HighQpsUpMedalResp) String() string { return proto.CompactTextString(m) }
func (*HighQpsUpMedalResp) ProtoMessage()    {}
func (*HighQpsUpMedalResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_HighQps_9fba97ef3ec619e6, []int{7}
}
func (m *HighQpsUpMedalResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HighQpsUpMedalResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HighQpsUpMedalResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *HighQpsUpMedalResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HighQpsUpMedalResp.Merge(dst, src)
}
func (m *HighQpsUpMedalResp) XXX_Size() int {
	return m.Size()
}
func (m *HighQpsUpMedalResp) XXX_DiscardUnknown() {
	xxx_messageInfo_HighQpsUpMedalResp.DiscardUnknown(m)
}

var xxx_messageInfo_HighQpsUpMedalResp proto.InternalMessageInfo

func (m *HighQpsUpMedalResp) GetCode() int64 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *HighQpsUpMedalResp) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func (m *HighQpsUpMedalResp) GetData() *HighQpsUpMedalResp_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

type HighQpsUpMedalResp_Data struct {
	// 粉丝勋章id
	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id"`
	// up主uid
	Uid int64 `protobuf:"varint,2,opt,name=uid,proto3" json:"uid"`
	// 直播站状态
	LiveStatus int64 `protobuf:"varint,3,opt,name=live_status,json=liveStatus,proto3" json:"live_status"`
	// 主站佩戴状态 0:未佩戴 1:佩戴中
	MasterStatus int64 `protobuf:"varint,4,opt,name=master_status,json=masterStatus,proto3" json:"master_status"`
	// 佩戴状态  0:未佩戴 1:佩戴中
	Status int64 `protobuf:"varint,5,opt,name=status,proto3" json:"status"`
}

func (m *HighQpsUpMedalResp_Data) Reset()         { *m = HighQpsUpMedalResp_Data{} }
func (m *HighQpsUpMedalResp_Data) String() string { return proto.CompactTextString(m) }
func (*HighQpsUpMedalResp_Data) ProtoMessage()    {}
func (*HighQpsUpMedalResp_Data) Descriptor() ([]byte, []int) {
	return fileDescriptor_HighQps_9fba97ef3ec619e6, []int{7, 0}
}
func (m *HighQpsUpMedalResp_Data) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HighQpsUpMedalResp_Data) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HighQpsUpMedalResp_Data.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *HighQpsUpMedalResp_Data) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HighQpsUpMedalResp_Data.Merge(dst, src)
}
func (m *HighQpsUpMedalResp_Data) XXX_Size() int {
	return m.Size()
}
func (m *HighQpsUpMedalResp_Data) XXX_DiscardUnknown() {
	xxx_messageInfo_HighQpsUpMedalResp_Data.DiscardUnknown(m)
}

var xxx_messageInfo_HighQpsUpMedalResp_Data proto.InternalMessageInfo

func (m *HighQpsUpMedalResp_Data) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *HighQpsUpMedalResp_Data) GetUid() int64 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *HighQpsUpMedalResp_Data) GetLiveStatus() int64 {
	if m != nil {
		return m.LiveStatus
	}
	return 0
}

func (m *HighQpsUpMedalResp_Data) GetMasterStatus() int64 {
	if m != nil {
		return m.MasterStatus
	}
	return 0
}

func (m *HighQpsUpMedalResp_Data) GetStatus() int64 {
	if m != nil {
		return m.Status
	}
	return 0
}

func init() {
	proto.RegisterType((*HighQpsReplyMedalsReq)(nil), "fans_medal.v2.HighQpsReplyMedalsReq")
	proto.RegisterType((*HighQpsReplyMedalsReq_UidList)(nil), "fans_medal.v2.HighQpsReplyMedalsReq.UidList")
	proto.RegisterType((*HighQpsReplyMedalsResp)(nil), "fans_medal.v2.HighQpsReplyMedalsResp")
	proto.RegisterType((*HighQpsReplyMedalsResp_Data)(nil), "fans_medal.v2.HighQpsReplyMedalsResp.Data")
	proto.RegisterType((*HighQpsLiveWearedReq)(nil), "fans_medal.v2.HighQpsLiveWearedReq")
	proto.RegisterType((*HighQpsLiveWearedResp)(nil), "fans_medal.v2.HighQpsLiveWearedResp")
	proto.RegisterType((*HighQpsLiveWearedResp_Data)(nil), "fans_medal.v2.HighQpsLiveWearedResp.Data")
	proto.RegisterType((*HighQpsLiveReceivedReq)(nil), "fans_medal.v2.HighQpsLiveReceivedReq")
	proto.RegisterType((*HighQpsLiveReceivedResp)(nil), "fans_medal.v2.HighQpsLiveReceivedResp")
	proto.RegisterType((*HighQpsLiveReceivedResp_Data)(nil), "fans_medal.v2.HighQpsLiveReceivedResp.Data")
	proto.RegisterType((*HighQpsUpMedalReq)(nil), "fans_medal.v2.HighQpsUpMedalReq")
	proto.RegisterType((*HighQpsUpMedalResp)(nil), "fans_medal.v2.HighQpsUpMedalResp")
	proto.RegisterType((*HighQpsUpMedalResp_Data)(nil), "fans_medal.v2.HighQpsUpMedalResp.Data")
}
func (m *HighQpsReplyMedalsReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HighQpsReplyMedalsReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UpUid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintHighQps(dAtA, i, uint64(m.UpUid))
	}
	if len(m.UidList) > 0 {
		for _, msg := range m.UidList {
			dAtA[i] = 0x12
			i++
			i = encodeVarintHighQps(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *HighQpsReplyMedalsReq_UidList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HighQpsReplyMedalsReq_UidList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Uid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintHighQps(dAtA, i, uint64(m.Uid))
	}
	return i, nil
}

func (m *HighQpsReplyMedalsResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HighQpsReplyMedalsResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintHighQps(dAtA, i, uint64(m.Code))
	}
	if len(m.Msg) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintHighQps(dAtA, i, uint64(len(m.Msg)))
		i += copy(dAtA[i:], m.Msg)
	}
	if len(m.Data) > 0 {
		for _, msg := range m.Data {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintHighQps(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *HighQpsReplyMedalsResp_Data) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HighQpsReplyMedalsResp_Data) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Uid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintHighQps(dAtA, i, uint64(m.Uid))
	}
	if m.MedalId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintHighQps(dAtA, i, uint64(m.MedalId))
	}
	if len(m.MedalName) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintHighQps(dAtA, i, uint64(len(m.MedalName)))
		i += copy(dAtA[i:], m.MedalName)
	}
	if m.Level != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintHighQps(dAtA, i, uint64(m.Level))
	}
	return i, nil
}

func (m *HighQpsLiveWearedReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HighQpsLiveWearedReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Uid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintHighQps(dAtA, i, uint64(m.Uid))
	}
	return i, nil
}

func (m *HighQpsLiveWearedResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HighQpsLiveWearedResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintHighQps(dAtA, i, uint64(m.Code))
	}
	if len(m.Msg) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintHighQps(dAtA, i, uint64(len(m.Msg)))
		i += copy(dAtA[i:], m.Msg)
	}
	if m.Data != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintHighQps(dAtA, i, uint64(m.Data.Size()))
		n1, err := m.Data.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	return i, nil
}

func (m *HighQpsLiveWearedResp_Data) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HighQpsLiveWearedResp_Data) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Uid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintHighQps(dAtA, i, uint64(m.Uid))
	}
	if m.TargetId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintHighQps(dAtA, i, uint64(m.TargetId))
	}
	if m.MedalId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintHighQps(dAtA, i, uint64(m.MedalId))
	}
	if m.Level != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintHighQps(dAtA, i, uint64(m.Level))
	}
	if len(m.MedalName) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintHighQps(dAtA, i, uint64(len(m.MedalName)))
		i += copy(dAtA[i:], m.MedalName)
	}
	if m.MedalColor != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintHighQps(dAtA, i, uint64(m.MedalColor))
	}
	return i, nil
}

func (m *HighQpsLiveReceivedReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HighQpsLiveReceivedReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Uid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintHighQps(dAtA, i, uint64(m.Uid))
	}
	return i, nil
}

func (m *HighQpsLiveReceivedResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HighQpsLiveReceivedResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintHighQps(dAtA, i, uint64(m.Code))
	}
	if len(m.Msg) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintHighQps(dAtA, i, uint64(len(m.Msg)))
		i += copy(dAtA[i:], m.Msg)
	}
	if len(m.Data) > 0 {
		for _, msg := range m.Data {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintHighQps(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *HighQpsLiveReceivedResp_Data) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HighQpsLiveReceivedResp_Data) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Uid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintHighQps(dAtA, i, uint64(m.Uid))
	}
	if m.TargetId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintHighQps(dAtA, i, uint64(m.TargetId))
	}
	if m.MedalId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintHighQps(dAtA, i, uint64(m.MedalId))
	}
	if m.Level != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintHighQps(dAtA, i, uint64(m.Level))
	}
	if len(m.MedalName) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintHighQps(dAtA, i, uint64(len(m.MedalName)))
		i += copy(dAtA[i:], m.MedalName)
	}
	return i, nil
}

func (m *HighQpsUpMedalReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HighQpsUpMedalReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Uid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintHighQps(dAtA, i, uint64(m.Uid))
	}
	return i, nil
}

func (m *HighQpsUpMedalResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HighQpsUpMedalResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintHighQps(dAtA, i, uint64(m.Code))
	}
	if len(m.Msg) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintHighQps(dAtA, i, uint64(len(m.Msg)))
		i += copy(dAtA[i:], m.Msg)
	}
	if m.Data != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintHighQps(dAtA, i, uint64(m.Data.Size()))
		n2, err := m.Data.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	return i, nil
}

func (m *HighQpsUpMedalResp_Data) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HighQpsUpMedalResp_Data) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintHighQps(dAtA, i, uint64(m.Id))
	}
	if m.Uid != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintHighQps(dAtA, i, uint64(m.Uid))
	}
	if m.LiveStatus != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintHighQps(dAtA, i, uint64(m.LiveStatus))
	}
	if m.MasterStatus != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintHighQps(dAtA, i, uint64(m.MasterStatus))
	}
	if m.Status != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintHighQps(dAtA, i, uint64(m.Status))
	}
	return i, nil
}

func encodeVarintHighQps(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *HighQpsReplyMedalsReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UpUid != 0 {
		n += 1 + sovHighQps(uint64(m.UpUid))
	}
	if len(m.UidList) > 0 {
		for _, e := range m.UidList {
			l = e.Size()
			n += 1 + l + sovHighQps(uint64(l))
		}
	}
	return n
}

func (m *HighQpsReplyMedalsReq_UidList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Uid != 0 {
		n += 1 + sovHighQps(uint64(m.Uid))
	}
	return n
}

func (m *HighQpsReplyMedalsResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovHighQps(uint64(m.Code))
	}
	l = len(m.Msg)
	if l > 0 {
		n += 1 + l + sovHighQps(uint64(l))
	}
	if len(m.Data) > 0 {
		for _, e := range m.Data {
			l = e.Size()
			n += 1 + l + sovHighQps(uint64(l))
		}
	}
	return n
}

func (m *HighQpsReplyMedalsResp_Data) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Uid != 0 {
		n += 1 + sovHighQps(uint64(m.Uid))
	}
	if m.MedalId != 0 {
		n += 1 + sovHighQps(uint64(m.MedalId))
	}
	l = len(m.MedalName)
	if l > 0 {
		n += 1 + l + sovHighQps(uint64(l))
	}
	if m.Level != 0 {
		n += 1 + sovHighQps(uint64(m.Level))
	}
	return n
}

func (m *HighQpsLiveWearedReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Uid != 0 {
		n += 1 + sovHighQps(uint64(m.Uid))
	}
	return n
}

func (m *HighQpsLiveWearedResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovHighQps(uint64(m.Code))
	}
	l = len(m.Msg)
	if l > 0 {
		n += 1 + l + sovHighQps(uint64(l))
	}
	if m.Data != nil {
		l = m.Data.Size()
		n += 1 + l + sovHighQps(uint64(l))
	}
	return n
}

func (m *HighQpsLiveWearedResp_Data) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Uid != 0 {
		n += 1 + sovHighQps(uint64(m.Uid))
	}
	if m.TargetId != 0 {
		n += 1 + sovHighQps(uint64(m.TargetId))
	}
	if m.MedalId != 0 {
		n += 1 + sovHighQps(uint64(m.MedalId))
	}
	if m.Level != 0 {
		n += 1 + sovHighQps(uint64(m.Level))
	}
	l = len(m.MedalName)
	if l > 0 {
		n += 1 + l + sovHighQps(uint64(l))
	}
	if m.MedalColor != 0 {
		n += 1 + sovHighQps(uint64(m.MedalColor))
	}
	return n
}

func (m *HighQpsLiveReceivedReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Uid != 0 {
		n += 1 + sovHighQps(uint64(m.Uid))
	}
	return n
}

func (m *HighQpsLiveReceivedResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovHighQps(uint64(m.Code))
	}
	l = len(m.Msg)
	if l > 0 {
		n += 1 + l + sovHighQps(uint64(l))
	}
	if len(m.Data) > 0 {
		for _, e := range m.Data {
			l = e.Size()
			n += 1 + l + sovHighQps(uint64(l))
		}
	}
	return n
}

func (m *HighQpsLiveReceivedResp_Data) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Uid != 0 {
		n += 1 + sovHighQps(uint64(m.Uid))
	}
	if m.TargetId != 0 {
		n += 1 + sovHighQps(uint64(m.TargetId))
	}
	if m.MedalId != 0 {
		n += 1 + sovHighQps(uint64(m.MedalId))
	}
	if m.Level != 0 {
		n += 1 + sovHighQps(uint64(m.Level))
	}
	l = len(m.MedalName)
	if l > 0 {
		n += 1 + l + sovHighQps(uint64(l))
	}
	return n
}

func (m *HighQpsUpMedalReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Uid != 0 {
		n += 1 + sovHighQps(uint64(m.Uid))
	}
	return n
}

func (m *HighQpsUpMedalResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovHighQps(uint64(m.Code))
	}
	l = len(m.Msg)
	if l > 0 {
		n += 1 + l + sovHighQps(uint64(l))
	}
	if m.Data != nil {
		l = m.Data.Size()
		n += 1 + l + sovHighQps(uint64(l))
	}
	return n
}

func (m *HighQpsUpMedalResp_Data) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovHighQps(uint64(m.Id))
	}
	if m.Uid != 0 {
		n += 1 + sovHighQps(uint64(m.Uid))
	}
	if m.LiveStatus != 0 {
		n += 1 + sovHighQps(uint64(m.LiveStatus))
	}
	if m.MasterStatus != 0 {
		n += 1 + sovHighQps(uint64(m.MasterStatus))
	}
	if m.Status != 0 {
		n += 1 + sovHighQps(uint64(m.Status))
	}
	return n
}

func sovHighQps(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozHighQps(x uint64) (n int) {
	return sovHighQps(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *HighQpsReplyMedalsReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHighQps
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HighQpsReplyMedalsReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HighQpsReplyMedalsReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpUid", wireType)
			}
			m.UpUid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHighQps
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpUid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UidList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHighQps
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHighQps
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UidList = append(m.UidList, &HighQpsReplyMedalsReq_UidList{})
			if err := m.UidList[len(m.UidList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipHighQps(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHighQps
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HighQpsReplyMedalsReq_UidList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHighQps
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UidList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UidList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHighQps
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipHighQps(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHighQps
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HighQpsReplyMedalsResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHighQps
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HighQpsReplyMedalsResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HighQpsReplyMedalsResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHighQps
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHighQps
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHighQps
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHighQps
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHighQps
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data, &HighQpsReplyMedalsResp_Data{})
			if err := m.Data[len(m.Data)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipHighQps(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHighQps
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HighQpsReplyMedalsResp_Data) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHighQps
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Data: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Data: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHighQps
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MedalId", wireType)
			}
			m.MedalId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHighQps
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MedalId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MedalName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHighQps
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHighQps
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MedalName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			m.Level = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHighQps
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Level |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipHighQps(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHighQps
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HighQpsLiveWearedReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHighQps
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HighQpsLiveWearedReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HighQpsLiveWearedReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHighQps
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipHighQps(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHighQps
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HighQpsLiveWearedResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHighQps
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HighQpsLiveWearedResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HighQpsLiveWearedResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHighQps
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHighQps
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHighQps
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHighQps
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHighQps
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = &HighQpsLiveWearedResp_Data{}
			}
			if err := m.Data.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipHighQps(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHighQps
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HighQpsLiveWearedResp_Data) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHighQps
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Data: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Data: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHighQps
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetId", wireType)
			}
			m.TargetId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHighQps
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TargetId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MedalId", wireType)
			}
			m.MedalId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHighQps
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MedalId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			m.Level = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHighQps
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Level |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MedalName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHighQps
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHighQps
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MedalName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MedalColor", wireType)
			}
			m.MedalColor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHighQps
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MedalColor |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipHighQps(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHighQps
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HighQpsLiveReceivedReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHighQps
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HighQpsLiveReceivedReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HighQpsLiveReceivedReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHighQps
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipHighQps(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHighQps
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HighQpsLiveReceivedResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHighQps
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HighQpsLiveReceivedResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HighQpsLiveReceivedResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHighQps
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHighQps
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHighQps
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHighQps
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHighQps
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data, &HighQpsLiveReceivedResp_Data{})
			if err := m.Data[len(m.Data)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipHighQps(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHighQps
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HighQpsLiveReceivedResp_Data) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHighQps
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Data: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Data: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHighQps
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetId", wireType)
			}
			m.TargetId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHighQps
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TargetId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MedalId", wireType)
			}
			m.MedalId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHighQps
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MedalId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			m.Level = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHighQps
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Level |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MedalName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHighQps
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHighQps
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MedalName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipHighQps(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHighQps
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HighQpsUpMedalReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHighQps
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HighQpsUpMedalReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HighQpsUpMedalReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHighQps
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipHighQps(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHighQps
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HighQpsUpMedalResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHighQps
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HighQpsUpMedalResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HighQpsUpMedalResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHighQps
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHighQps
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHighQps
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHighQps
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHighQps
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = &HighQpsUpMedalResp_Data{}
			}
			if err := m.Data.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipHighQps(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHighQps
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HighQpsUpMedalResp_Data) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHighQps
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Data: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Data: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHighQps
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHighQps
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LiveStatus", wireType)
			}
			m.LiveStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHighQps
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LiveStatus |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MasterStatus", wireType)
			}
			m.MasterStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHighQps
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MasterStatus |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHighQps
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipHighQps(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthHighQps
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipHighQps(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowHighQps
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowHighQps
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowHighQps
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthHighQps
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowHighQps
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipHighQps(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthHighQps = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowHighQps   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("v2/HighQps.proto", fileDescriptor_HighQps_9fba97ef3ec619e6) }

var fileDescriptor_HighQps_9fba97ef3ec619e6 = []byte{
	// 734 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xdc, 0x56, 0xcd, 0x6e, 0xd3, 0x4a,
	0x14, 0xae, 0xed, 0xfc, 0x9e, 0x34, 0xf7, 0xde, 0x8e, 0xee, 0xed, 0x0d, 0x51, 0x15, 0xa7, 0xa1,
	0x2d, 0xa1, 0x50, 0xb7, 0xa4, 0x12, 0x0f, 0x50, 0x2a, 0xd1, 0x4a, 0x05, 0xc4, 0xa0, 0x08, 0x04,
	0x12, 0x91, 0x1b, 0x4f, 0xd3, 0x91, 0x92, 0xda, 0xf1, 0x1f, 0xe2, 0x2d, 0x58, 0xb0, 0xe2, 0x45,
	0xe0, 0x09, 0x80, 0x65, 0x97, 0x6c, 0xb0, 0x50, 0x2b, 0xb1, 0xf0, 0x8e, 0x1d, 0x4b, 0xe4, 0x99,
	0xc9, 0x5f, 0x65, 0x6a, 0x4b, 0xdd, 0xb1, 0x99, 0x9c, 0x73, 0x3c, 0xe7, 0x9b, 0x39, 0xdf, 0x37,
	0x67, 0x26, 0xf0, 0x8f, 0xdf, 0xda, 0xdc, 0xa3, 0xbd, 0xe3, 0xc7, 0x96, 0xa3, 0x59, 0xb6, 0xe9,
	0x9a, 0xa8, 0x7c, 0xa4, 0x9f, 0x38, 0x9d, 0x01, 0x31, 0xf4, 0xbe, 0xe6, 0xb7, 0xaa, 0x1b, 0x3d,
	0xea, 0x1e, 0x7b, 0x87, 0x5a, 0xd7, 0x1c, 0x6c, 0xf6, 0xcc, 0x9e, 0xb9, 0xc9, 0x66, 0x1d, 0x7a,
	0x47, 0xcc, 0x63, 0x0e, 0xb3, 0x78, 0x76, 0xe3, 0xbd, 0x04, 0xff, 0x09, 0x3c, 0x4c, 0xac, 0xfe,
	0xeb, 0x07, 0x11, 0x8e, 0x83, 0xc9, 0x10, 0x2d, 0x43, 0xce, 0xb3, 0x3a, 0x1e, 0x35, 0x2a, 0x52,
	0x5d, 0x6a, 0x2a, 0x3b, 0x10, 0x06, 0xaa, 0x88, 0xe0, 0xac, 0x67, 0xb5, 0xa9, 0x81, 0xda, 0x50,
	0xf0, 0xa8, 0xd1, 0xe9, 0x53, 0xc7, 0xad, 0xc8, 0x75, 0xa5, 0x59, 0x6a, 0xdd, 0xd6, 0x66, 0x76,
	0xa3, 0xc5, 0x42, 0x6b, 0x6d, 0x6a, 0x1c, 0x50, 0xc7, 0xdd, 0x99, 0x0f, 0x03, 0x75, 0x8c, 0x80,
	0xf3, 0x1e, 0x0f, 0x57, 0x57, 0x20, 0x2f, 0x66, 0xa0, 0x6b, 0xa0, 0x4c, 0x76, 0x90, 0x0f, 0x03,
	0x35, 0x72, 0x71, 0x34, 0x34, 0x3e, 0xc8, 0xb0, 0x18, 0x07, 0xef, 0x58, 0x68, 0x09, 0x32, 0x5d,
	0xd3, 0x20, 0x22, 0xad, 0x10, 0x06, 0x2a, 0xf3, 0x31, 0x1b, 0x23, 0xcc, 0x81, 0xd3, 0xab, 0xc8,
	0x75, 0xa9, 0x59, 0xe4, 0x98, 0x03, 0xa7, 0x87, 0xa3, 0x01, 0xed, 0x41, 0xc6, 0xd0, 0x5d, 0xbd,
	0xa2, 0xb0, 0x62, 0xd6, 0x53, 0x14, 0xe3, 0x58, 0xda, 0xae, 0xee, 0xea, 0x7c, 0x91, 0x28, 0x17,
	0xb3, 0xb1, 0xfa, 0x4e, 0x82, 0x4c, 0xf4, 0xe1, 0x92, 0x0a, 0xd0, 0x0d, 0x28, 0x30, 0xec, 0x0e,
	0x35, 0xd8, 0x6e, 0x14, 0x4e, 0xc8, 0x28, 0x86, 0xf3, 0xcc, 0xda, 0x37, 0xd0, 0x06, 0x00, 0x0f,
	0x9e, 0xe8, 0x03, 0x52, 0x51, 0xd8, 0xc6, 0xff, 0x0a, 0x03, 0x75, 0x2a, 0x8a, 0x8b, 0xcc, 0x7e,
	0xa8, 0x0f, 0x08, 0x52, 0x21, 0xdb, 0x27, 0x3e, 0xe9, 0x57, 0x32, 0x0c, 0xb4, 0x18, 0x06, 0x2a,
	0x0f, 0x60, 0xfe, 0xd3, 0xb8, 0x03, 0xff, 0x8a, 0x5a, 0x0e, 0xa8, 0x4f, 0x9e, 0x12, 0xdd, 0x26,
	0x46, 0x24, 0xf9, 0x25, 0x6c, 0xbf, 0x55, 0xc6, 0xe7, 0x64, 0x3a, 0xe7, 0x2a, 0x64, 0xdf, 0x1f,
	0x93, 0x2d, 0x35, 0x4b, 0xad, 0x9b, 0xf1, 0x64, 0xcf, 0x2e, 0x16, 0xcf, 0xf5, 0xcf, 0x14, 0x5c,
	0xaf, 0x43, 0xd1, 0xd5, 0xed, 0x1e, 0x71, 0x27, 0x64, 0x97, 0xc3, 0x40, 0x9d, 0x04, 0x71, 0x81,
	0x9b, 0xfb, 0xb3, 0xba, 0x28, 0x97, 0xe9, 0x92, 0x44, 0xf4, 0x05, 0xe1, 0xb2, 0x49, 0xc2, 0x6d,
	0x41, 0x89, 0x7f, 0xe8, 0x9a, 0x7d, 0xd3, 0xae, 0xe4, 0x18, 0xea, 0xdf, 0x61, 0xa0, 0x4e, 0x87,
	0x31, 0x4f, 0xbe, 0x17, 0xd9, 0x8d, 0xed, 0x71, 0x0f, 0x44, 0x44, 0x61, 0xd2, 0x25, 0xd4, 0x4f,
	0xd4, 0xf2, 0xbb, 0x0c, 0xff, 0xc7, 0x66, 0x5d, 0x45, 0xcd, 0xfd, 0x99, 0xd6, 0xb9, 0xf5, 0x7b,
	0x35, 0xa7, 0x97, 0x8b, 0xd7, 0xf3, 0xe3, 0x1f, 0xa2, 0x67, 0x43, 0x83, 0x05, 0x51, 0x78, 0xdb,
	0x62, 0x17, 0x46, 0x82, 0x30, 0x5f, 0x65, 0x40, 0x17, 0x13, 0xae, 0xa2, 0xc9, 0xee, 0x4c, 0x87,
	0xad, 0xc5, 0x6b, 0x32, 0xb5, 0x52, 0xbc, 0x1c, 0x9f, 0x46, 0x72, 0x2c, 0x82, 0x3c, 0xde, 0x78,
	0x2e, 0x0c, 0x54, 0x99, 0x1a, 0x58, 0xa6, 0xc6, 0xa8, 0x22, 0x39, 0x46, 0xa6, 0x2d, 0x28, 0xf5,
	0xa9, 0x4f, 0x3a, 0x8e, 0xab, 0xbb, 0x9e, 0x23, 0xd8, 0x67, 0x27, 0x7a, 0x2a, 0x8c, 0x21, 0x72,
	0x9e, 0x30, 0x1b, 0xdd, 0x85, 0xf2, 0x40, 0x77, 0x5c, 0x62, 0x8f, 0x72, 0xb8, 0x16, 0x0b, 0x61,
	0xa0, 0xce, 0x7e, 0xc0, 0xf3, 0xdc, 0x15, 0x79, 0x0d, 0xc8, 0x89, 0x84, 0xec, 0xe4, 0xb9, 0x12,
	0x33, 0xc5, 0x6f, 0xeb, 0x87, 0x0c, 0x79, 0x51, 0x35, 0x7a, 0x01, 0xf3, 0x76, 0x74, 0x91, 0x73,
	0x3e, 0x1c, 0xb4, 0x92, 0xe6, 0xe5, 0xaa, 0xae, 0xa6, 0x7a, 0x12, 0xd0, 0x33, 0x51, 0xf6, 0x2b,
	0x76, 0x73, 0xa1, 0xeb, 0xc9, 0x77, 0xdb, 0xb0, 0xba, 0x92, 0xe6, 0x02, 0x44, 0x2f, 0xa1, 0xcc,
	0x90, 0x6d, 0xd1, 0x45, 0x68, 0x35, 0x4d, 0xa7, 0x0d, 0xab, 0x6b, 0xe9, 0x1a, 0x12, 0x3d, 0x82,
	0x82, 0x67, 0xf1, 0x69, 0xa8, 0x9e, 0x70, 0x60, 0x86, 0xd5, 0xe5, 0xc4, 0x23, 0xb5, 0xb3, 0xf4,
	0xf9, 0xac, 0x26, 0x9d, 0x9e, 0xd5, 0xa4, 0x6f, 0x67, 0x35, 0xe9, 0xcd, 0x79, 0x6d, 0xee, 0xf4,
	0xbc, 0x36, 0xf7, 0xe5, 0xbc, 0x36, 0xf7, 0x5c, 0xf6, 0x5b, 0x87, 0x39, 0xf6, 0x2f, 0x64, 0xfb,
	0x57, 0x00, 0x00, 0x00, 0xff, 0xff, 0x03, 0x7f, 0x94, 0x97, 0xd7, 0x08, 0x00, 0x00,
}
