// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: app/service/live/xroom-feed/api/api.proto

package api

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type RecPoolReq struct {
	// 投放模块
	ModuleType int64 `protobuf:"varint,1,opt,name=module_type,json=moduleType,proto3" json:"module_type,omitempty" form:"module_type" validate:"required"`
	// 投放模块位置数
	PositionNum int64 `protobuf:"varint,2,opt,name=position_num,json=positionNum,proto3" json:"position_num,omitempty" form:"position_num" validate:"required"`
	// 投放模块页数 不传或传0、1都按一页算(暂时没用)
	PageNum int64 `protobuf:"varint,3,opt,name=page_num,json=pageNum,proto3" json:"page_num,omitempty" form:"page_num"`
	// 当前模块已存在的位置房间（逗号分隔、有序），1~position*N（内部去重,保证同一个房间优先出现在好位置）
	ModuleExistRooms string `protobuf:"bytes,4,opt,name=module_exist_rooms,json=moduleExistRooms,proto3" json:"module_exist_rooms,omitempty" form:"module_exist_rooms"`
	// 其它模块已存在的位置房间（逗号分隔、有序），1~position*N（内部去重,保证同一个房间优先出现在好位置）
	OtherExistRooms string `protobuf:"bytes,5,opt,name=other_exist_rooms,json=otherExistRooms,proto3" json:"other_exist_rooms,omitempty" form:"other_exist_rooms"`
	// 请求来源
	From                 string   `protobuf:"bytes,6,opt,name=from,proto3" json:"from,omitempty" form:"from"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RecPoolReq) Reset()         { *m = RecPoolReq{} }
func (m *RecPoolReq) String() string { return proto.CompactTextString(m) }
func (*RecPoolReq) ProtoMessage()    {}
func (*RecPoolReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_1c1f9f8a1548f1df, []int{0}
}
func (m *RecPoolReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RecPoolReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RecPoolReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *RecPoolReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RecPoolReq.Merge(dst, src)
}
func (m *RecPoolReq) XXX_Size() int {
	return m.Size()
}
func (m *RecPoolReq) XXX_DiscardUnknown() {
	xxx_messageInfo_RecPoolReq.DiscardUnknown(m)
}

var xxx_messageInfo_RecPoolReq proto.InternalMessageInfo

type RecPoolResp struct {
	// 主播position => 房间信息(依赖计算的)
	List                 map[int64]*RoomItem `protobuf:"bytes,1,rep,name=list" json:"list" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *RecPoolResp) Reset()         { *m = RecPoolResp{} }
func (m *RecPoolResp) String() string { return proto.CompactTextString(m) }
func (*RecPoolResp) ProtoMessage()    {}
func (*RecPoolResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_1c1f9f8a1548f1df, []int{1}
}
func (m *RecPoolResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RecPoolResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RecPoolResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *RecPoolResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RecPoolResp.Merge(dst, src)
}
func (m *RecPoolResp) XXX_Size() int {
	return m.Size()
}
func (m *RecPoolResp) XXX_DiscardUnknown() {
	xxx_messageInfo_RecPoolResp.DiscardUnknown(m)
}

var xxx_messageInfo_RecPoolResp proto.InternalMessageInfo

type RoomItem struct {
	// 房间id
	RoomId int64 `protobuf:"varint,1,opt,name=room_id,json=roomId,proto3" json:"room_id"`
	// 主播uid
	Uid int64 `protobuf:"varint,2,opt,name=uid,proto3" json:"uid"`
	// 房间标题
	Title string `protobuf:"bytes,3,opt,name=title,proto3" json:"title"`
	// 人气
	PopularityCount int64 `protobuf:"varint,4,opt,name=popularity_count,json=popularityCount,proto3" json:"popularity_count"`
	// 关键帧
	Keyframe string `protobuf:"bytes,5,opt,name=keyframe,proto3" json:"keyframe"`
	// 封面
	Cover string `protobuf:"bytes,6,opt,name=cover,proto3" json:"cover"`
	// 二级分区id
	AreaId int64 `protobuf:"varint,7,opt,name=area_id,json=areaId,proto3" json:"area_id"`
	// 一级分区id
	ParentAreaId int64 `protobuf:"varint,8,opt,name=parent_area_id,json=parentAreaId,proto3" json:"parent_area_id"`
	// 二级分区名称
	AreaName string `protobuf:"bytes,9,opt,name=area_name,json=areaName,proto3" json:"area_name"`
	// 一级分区名称
	ParentAreaName string `protobuf:"bytes,10,opt,name=parent_area_name,json=parentAreaName,proto3" json:"parent_area_name"`
	// 推荐规则 10000+rule_id
	RecType              int64    `protobuf:"varint,11,opt,name=rec_type,json=recType,proto3" json:"rec_type"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RoomItem) Reset()         { *m = RoomItem{} }
func (m *RoomItem) String() string { return proto.CompactTextString(m) }
func (*RoomItem) ProtoMessage()    {}
func (*RoomItem) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_1c1f9f8a1548f1df, []int{2}
}
func (m *RoomItem) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RoomItem) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RoomItem.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *RoomItem) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RoomItem.Merge(dst, src)
}
func (m *RoomItem) XXX_Size() int {
	return m.Size()
}
func (m *RoomItem) XXX_DiscardUnknown() {
	xxx_messageInfo_RoomItem.DiscardUnknown(m)
}

var xxx_messageInfo_RoomItem proto.InternalMessageInfo

func init() {
	proto.RegisterType((*RecPoolReq)(nil), "live.xroomfeed.v1.RecPoolReq")
	proto.RegisterType((*RecPoolResp)(nil), "live.xroomfeed.v1.RecPoolResp")
	proto.RegisterMapType((map[int64]*RoomItem)(nil), "live.xroomfeed.v1.RecPoolResp.ListEntry")
	proto.RegisterType((*RoomItem)(nil), "live.xroomfeed.v1.RoomItem")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// RecPoolClient is the client API for RecPool service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RecPoolClient interface {
	// 根据模块位置获取投放列表 position=>RoomItem
	GetList(ctx context.Context, in *RecPoolReq, opts ...grpc.CallOption) (*RecPoolResp, error)
}

type recPoolClient struct {
	cc *grpc.ClientConn
}

func NewRecPoolClient(cc *grpc.ClientConn) RecPoolClient {
	return &recPoolClient{cc}
}

func (c *recPoolClient) GetList(ctx context.Context, in *RecPoolReq, opts ...grpc.CallOption) (*RecPoolResp, error) {
	out := new(RecPoolResp)
	err := c.cc.Invoke(ctx, "/live.xroomfeed.v1.RecPool/GetList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RecPoolServer is the server API for RecPool service.
type RecPoolServer interface {
	// 根据模块位置获取投放列表 position=>RoomItem
	GetList(context.Context, *RecPoolReq) (*RecPoolResp, error)
}

func RegisterRecPoolServer(s *grpc.Server, srv RecPoolServer) {
	s.RegisterService(&_RecPool_serviceDesc, srv)
}

func _RecPool_GetList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecPoolReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecPoolServer).GetList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/live.xroomfeed.v1.RecPool/GetList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecPoolServer).GetList(ctx, req.(*RecPoolReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _RecPool_serviceDesc = grpc.ServiceDesc{
	ServiceName: "live.xroomfeed.v1.RecPool",
	HandlerType: (*RecPoolServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetList",
			Handler:    _RecPool_GetList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "app/service/live/xroom-feed/api/api.proto",
}

func (m *RecPoolReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RecPoolReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ModuleType != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.ModuleType))
	}
	if m.PositionNum != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.PositionNum))
	}
	if m.PageNum != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.PageNum))
	}
	if len(m.ModuleExistRooms) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.ModuleExistRooms)))
		i += copy(dAtA[i:], m.ModuleExistRooms)
	}
	if len(m.OtherExistRooms) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.OtherExistRooms)))
		i += copy(dAtA[i:], m.OtherExistRooms)
	}
	if len(m.From) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.From)))
		i += copy(dAtA[i:], m.From)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *RecPoolResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RecPoolResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.List) > 0 {
		for k, _ := range m.List {
			dAtA[i] = 0xa
			i++
			v := m.List[k]
			msgSize := 0
			if v != nil {
				msgSize = v.Size()
				msgSize += 1 + sovApi(uint64(msgSize))
			}
			mapSize := 1 + sovApi(uint64(k)) + msgSize
			i = encodeVarintApi(dAtA, i, uint64(mapSize))
			dAtA[i] = 0x8
			i++
			i = encodeVarintApi(dAtA, i, uint64(k))
			if v != nil {
				dAtA[i] = 0x12
				i++
				i = encodeVarintApi(dAtA, i, uint64(v.Size()))
				n1, err := v.MarshalTo(dAtA[i:])
				if err != nil {
					return 0, err
				}
				i += n1
			}
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *RoomItem) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RoomItem) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.RoomId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.RoomId))
	}
	if m.Uid != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Uid))
	}
	if len(m.Title) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Title)))
		i += copy(dAtA[i:], m.Title)
	}
	if m.PopularityCount != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.PopularityCount))
	}
	if len(m.Keyframe) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Keyframe)))
		i += copy(dAtA[i:], m.Keyframe)
	}
	if len(m.Cover) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Cover)))
		i += copy(dAtA[i:], m.Cover)
	}
	if m.AreaId != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.AreaId))
	}
	if m.ParentAreaId != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.ParentAreaId))
	}
	if len(m.AreaName) > 0 {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.AreaName)))
		i += copy(dAtA[i:], m.AreaName)
	}
	if len(m.ParentAreaName) > 0 {
		dAtA[i] = 0x52
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.ParentAreaName)))
		i += copy(dAtA[i:], m.ParentAreaName)
	}
	if m.RecType != 0 {
		dAtA[i] = 0x58
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.RecType))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintApi(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *RecPoolReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ModuleType != 0 {
		n += 1 + sovApi(uint64(m.ModuleType))
	}
	if m.PositionNum != 0 {
		n += 1 + sovApi(uint64(m.PositionNum))
	}
	if m.PageNum != 0 {
		n += 1 + sovApi(uint64(m.PageNum))
	}
	l = len(m.ModuleExistRooms)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.OtherExistRooms)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.From)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RecPoolResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.List) > 0 {
		for k, v := range m.List {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovApi(uint64(l))
			}
			mapEntrySize := 1 + sovApi(uint64(k)) + l
			n += mapEntrySize + 1 + sovApi(uint64(mapEntrySize))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RoomItem) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RoomId != 0 {
		n += 1 + sovApi(uint64(m.RoomId))
	}
	if m.Uid != 0 {
		n += 1 + sovApi(uint64(m.Uid))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.PopularityCount != 0 {
		n += 1 + sovApi(uint64(m.PopularityCount))
	}
	l = len(m.Keyframe)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Cover)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.AreaId != 0 {
		n += 1 + sovApi(uint64(m.AreaId))
	}
	if m.ParentAreaId != 0 {
		n += 1 + sovApi(uint64(m.ParentAreaId))
	}
	l = len(m.AreaName)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.ParentAreaName)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.RecType != 0 {
		n += 1 + sovApi(uint64(m.RecType))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovApi(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozApi(x uint64) (n int) {
	return sovApi(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *RecPoolReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RecPoolReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RecPoolReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ModuleType", wireType)
			}
			m.ModuleType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ModuleType |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PositionNum", wireType)
			}
			m.PositionNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PositionNum |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageNum", wireType)
			}
			m.PageNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PageNum |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ModuleExistRooms", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ModuleExistRooms = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OtherExistRooms", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OtherExistRooms = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.From = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RecPoolResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RecPoolResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RecPoolResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.List == nil {
				m.List = make(map[int64]*RoomItem)
			}
			var mapkey int64
			var mapvalue *RoomItem
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= (int64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= (int(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthApi
					}
					postmsgIndex := iNdEx + mapmsglen
					if mapmsglen < 0 {
						return ErrInvalidLengthApi
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &RoomItem{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipApi(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthApi
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.List[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RoomItem) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RoomItem: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RoomItem: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoomId", wireType)
			}
			m.RoomId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RoomId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PopularityCount", wireType)
			}
			m.PopularityCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PopularityCount |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Keyframe", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Keyframe = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cover", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cover = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AreaId", wireType)
			}
			m.AreaId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AreaId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParentAreaId", wireType)
			}
			m.ParentAreaId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ParentAreaId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AreaName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AreaName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParentAreaName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ParentAreaName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecType", wireType)
			}
			m.RecType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RecType |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipApi(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowApi
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowApi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowApi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthApi
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowApi
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipApi(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthApi = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowApi   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("app/service/live/xroom-feed/api/api.proto", fileDescriptor_api_1c1f9f8a1548f1df)
}

var fileDescriptor_api_1c1f9f8a1548f1df = []byte{
	// 703 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x54, 0xdd, 0x4e, 0xdb, 0x3c,
	0x18, 0xfe, 0x42, 0xa0, 0x3f, 0x0e, 0x1f, 0x2d, 0xfe, 0xbe, 0x49, 0x85, 0x8d, 0xba, 0xca, 0xa6,
	0xd1, 0x31, 0x91, 0x0a, 0x76, 0x82, 0x38, 0xd8, 0xb4, 0x4e, 0x6c, 0x20, 0x26, 0x34, 0x79, 0x1c,
	0xed, 0xa4, 0x0a, 0x8d, 0x5b, 0x2c, 0x92, 0x3a, 0x38, 0x4e, 0x45, 0x2f, 0x64, 0x57, 0xb1, 0x1b,
	0xe1, 0x70, 0x57, 0x60, 0x6d, 0x1c, 0x46, 0xda, 0x49, 0xaf, 0x60, 0xb2, 0x9d, 0xfe, 0xf0, 0x23,
	0x0e, 0x9a, 0xbc, 0x7e, 0x9e, 0xe7, 0x7d, 0xf2, 0xda, 0xef, 0xeb, 0x82, 0x57, 0x7e, 0x1c, 0xb7,
	0x12, 0xc2, 0x87, 0xb4, 0x4b, 0x5a, 0x21, 0x1d, 0x92, 0xd6, 0x15, 0x67, 0x2c, 0xda, 0xee, 0x11,
	0x12, 0xb4, 0xfc, 0x98, 0xaa, 0x9f, 0x17, 0x73, 0x26, 0x18, 0x5c, 0x55, 0xb4, 0xa7, 0x69, 0xc5,
	0x7a, 0xc3, 0x9d, 0xf5, 0xed, 0x3e, 0x15, 0xe7, 0xe9, 0x99, 0xd7, 0x65, 0x51, 0xab, 0xcf, 0xfa,
	0xac, 0xa5, 0x95, 0x67, 0x69, 0x4f, 0xaf, 0xf4, 0x42, 0x47, 0xc6, 0xc1, 0xfd, 0x6e, 0x03, 0x80,
	0x49, 0xf7, 0x0b, 0x63, 0x21, 0x26, 0x97, 0xf0, 0x18, 0x38, 0x11, 0x0b, 0xd2, 0x90, 0x74, 0xc4,
	0x28, 0x26, 0x35, 0xab, 0x61, 0x35, 0xed, 0xf6, 0xd6, 0x58, 0xa2, 0x97, 0x3d, 0xc6, 0xa3, 0x7d,
	0x77, 0x8e, 0x74, 0x1b, 0x43, 0x3f, 0xa4, 0x81, 0x2f, 0xc8, 0xbe, 0xcb, 0xc9, 0x65, 0x4a, 0x39,
	0x09, 0x5c, 0x0c, 0x8c, 0xe2, 0x74, 0x14, 0x13, 0x78, 0x02, 0x96, 0x63, 0x96, 0x50, 0x41, 0xd9,
	0xa0, 0x33, 0x48, 0xa3, 0xda, 0x82, 0x76, 0x7b, 0x3d, 0x96, 0x68, 0xd3, 0xb8, 0xcd, 0xb3, 0x0f,
	0xdb, 0x39, 0x13, 0xc9, 0x49, 0x1a, 0x41, 0x0f, 0x94, 0x62, 0xbf, 0x4f, 0xb4, 0x97, 0xad, 0xbd,
	0xfe, 0x1b, 0x4b, 0x54, 0xc9, 0xbd, 0x72, 0xc6, 0xc5, 0x45, 0x15, 0x2a, 0xfd, 0x31, 0x80, 0x79,
	0xbd, 0xe4, 0x8a, 0x26, 0xa2, 0xa3, 0x8e, 0x29, 0xa9, 0x2d, 0x36, 0xac, 0x66, 0xb9, 0xbd, 0x31,
	0x96, 0x68, 0xed, 0xd6, 0x9e, 0xe6, 0x34, 0x2e, 0xae, 0x1a, 0xf0, 0x40, 0x61, 0x58, 0x41, 0xf0,
	0x10, 0xac, 0x32, 0x71, 0x4e, 0xf8, 0x2d, 0xaf, 0x25, 0xed, 0xf5, 0x6c, 0x2c, 0x51, 0xcd, 0x78,
	0xdd, 0x93, 0xb8, 0xb8, 0xa2, 0xb1, 0x39, 0xa7, 0xe7, 0x60, 0xb1, 0xc7, 0x59, 0x54, 0x2b, 0xe8,
	0xe4, 0xca, 0x58, 0x22, 0xc7, 0x24, 0x2b, 0xd4, 0xc5, 0x9a, 0x74, 0x7f, 0x58, 0xc0, 0x99, 0xf6,
	0x25, 0x89, 0xe1, 0x47, 0xb0, 0x18, 0xd2, 0x44, 0xd4, 0xac, 0x86, 0xdd, 0x74, 0x76, 0x9b, 0xde,
	0xbd, 0xc6, 0x7b, 0x73, 0x6a, 0xef, 0x33, 0x4d, 0xc4, 0xc1, 0x40, 0xf0, 0x51, 0xbb, 0x94, 0x49,
	0xa4, 0x33, 0xb1, 0x7e, 0xae, 0x9f, 0x82, 0xf2, 0x94, 0x84, 0x55, 0x60, 0x5f, 0x90, 0x91, 0xe9,
	0x32, 0x56, 0x21, 0xdc, 0x01, 0x4b, 0x43, 0x3f, 0x4c, 0x89, 0xee, 0x95, 0xb3, 0xfb, 0xf4, 0xa1,
	0xef, 0x30, 0x16, 0x1d, 0x09, 0x12, 0x61, 0xa3, 0xdc, 0x5f, 0xd8, 0xb3, 0xdc, 0x3f, 0x36, 0x28,
	0x4d, 0x70, 0xf8, 0x02, 0x14, 0x95, 0xbe, 0x43, 0x83, 0x7c, 0x7e, 0x9c, 0x4c, 0xa2, 0x09, 0x84,
	0x0b, 0x2a, 0x38, 0x0a, 0xe0, 0x1a, 0xb0, 0x53, 0x1a, 0xe4, 0x33, 0x51, 0xcc, 0x24, 0x52, 0x4b,
	0xac, 0x1e, 0x10, 0x81, 0x25, 0x41, 0x45, 0x48, 0x74, 0x93, 0xcb, 0xed, 0x72, 0x26, 0x91, 0x01,
	0xb0, 0x79, 0xc1, 0x77, 0xa0, 0x1a, 0xb3, 0x38, 0x0d, 0x7d, 0x4e, 0xc5, 0xa8, 0xd3, 0x65, 0xe9,
	0x40, 0xe8, 0xb6, 0xda, 0xed, 0xff, 0x33, 0x89, 0xee, 0x71, 0xb8, 0x32, 0x43, 0x3e, 0x28, 0x00,
	0x36, 0x41, 0xe9, 0x82, 0x8c, 0x7a, 0xdc, 0x8f, 0x48, 0xde, 0xc3, 0xe5, 0x4c, 0xa2, 0x29, 0x86,
	0xa7, 0x91, 0xaa, 0xa5, 0xcb, 0x86, 0x84, 0xe7, 0xdd, 0xd2, 0xb5, 0x68, 0x00, 0x9b, 0x97, 0xda,
	0xad, 0xcf, 0x89, 0xaf, 0x76, 0x5b, 0x9c, 0xed, 0x36, 0x87, 0x70, 0x41, 0x05, 0x47, 0x01, 0xdc,
	0x03, 0x2b, 0xb1, 0xcf, 0xc9, 0x40, 0x74, 0x26, 0xe2, 0x92, 0x16, 0xc3, 0x4c, 0xa2, 0x3b, 0x0c,
	0x5e, 0x36, 0xeb, 0xf7, 0x26, 0x73, 0x0b, 0x94, 0x35, 0x31, 0x50, 0xb5, 0x96, 0x75, 0x11, 0xff,
	0x66, 0x12, 0xcd, 0x40, 0x5c, 0x52, 0xe1, 0x89, 0x2a, 0xf6, 0x2d, 0xa8, 0xce, 0x7b, 0xe9, 0x14,
	0xa0, 0x53, 0xcc, 0xb9, 0xdc, 0xe1, 0xf0, 0xca, 0xec, 0x4b, 0x3a, 0x7f, 0x13, 0x94, 0x38, 0xe9,
	0x9a, 0xab, 0xef, 0xe8, 0xfa, 0xf4, 0xb1, 0x4c, 0x30, 0x5c, 0xe4, 0xa4, 0xab, 0x6e, 0xf6, 0xee,
	0x57, 0x50, 0xcc, 0xc7, 0x0d, 0x1e, 0x82, 0xe2, 0x27, 0x22, 0xd4, 0x4c, 0xc1, 0x8d, 0xc7, 0xa6,
	0xf2, 0x72, 0xbd, 0xfe, 0xf8, 0xd0, 0xb6, 0x9f, 0x5c, 0xff, 0xae, 0xff, 0x73, 0x7d, 0x53, 0xb7,
	0x7e, 0xde, 0xd4, 0xad, 0x5f, 0x37, 0x75, 0xeb, 0x9b, 0xed, 0xc7, 0xf4, 0xac, 0xa0, 0xff, 0xa8,
	0xde, 0xfc, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x2e, 0x6b, 0x1b, 0x30, 0x17, 0x05, 0x00, 0x00,
}
