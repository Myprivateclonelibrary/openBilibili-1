// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: v1/Guard.proto

package v1

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type GuardGetByUidTargetIdReq struct {
	// uid
	Uid int64 `protobuf:"varint,1,opt,name=uid,proto3" json:"uid"`
	// 主播id
	TargetId int64 `protobuf:"varint,2,opt,name=target_id,json=targetId,proto3" json:"target_id"`
	// 是否只返回最高等级的守护，为1时会改变返回数据结构
	IsLimitOne int64 `protobuf:"varint,3,opt,name=is_limit_one,json=isLimitOne,proto3" json:"is_limit_one"`
}

func (m *GuardGetByUidTargetIdReq) Reset()         { *m = GuardGetByUidTargetIdReq{} }
func (m *GuardGetByUidTargetIdReq) String() string { return proto.CompactTextString(m) }
func (*GuardGetByUidTargetIdReq) ProtoMessage()    {}
func (*GuardGetByUidTargetIdReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_Guard_0e6e439e726db5d6, []int{0}
}
func (m *GuardGetByUidTargetIdReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GuardGetByUidTargetIdReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GuardGetByUidTargetIdReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *GuardGetByUidTargetIdReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GuardGetByUidTargetIdReq.Merge(dst, src)
}
func (m *GuardGetByUidTargetIdReq) XXX_Size() int {
	return m.Size()
}
func (m *GuardGetByUidTargetIdReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GuardGetByUidTargetIdReq.DiscardUnknown(m)
}

var xxx_messageInfo_GuardGetByUidTargetIdReq proto.InternalMessageInfo

func (m *GuardGetByUidTargetIdReq) GetUid() int64 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *GuardGetByUidTargetIdReq) GetTargetId() int64 {
	if m != nil {
		return m.TargetId
	}
	return 0
}

func (m *GuardGetByUidTargetIdReq) GetIsLimitOne() int64 {
	if m != nil {
		return m.IsLimitOne
	}
	return 0
}

type GuardGetByUidTargetIdResp struct {
	//
	Code int64 `protobuf:"varint,1,opt,name=code,proto3" json:"code"`
	//
	Msg string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg"`
	//
	Message string `protobuf:"bytes,3,opt,name=message,proto3" json:"message"`
	//
	Data []*GuardGetByUidTargetIdResp_Data `protobuf:"bytes,4,rep,name=data" json:"data"`
}

func (m *GuardGetByUidTargetIdResp) Reset()         { *m = GuardGetByUidTargetIdResp{} }
func (m *GuardGetByUidTargetIdResp) String() string { return proto.CompactTextString(m) }
func (*GuardGetByUidTargetIdResp) ProtoMessage()    {}
func (*GuardGetByUidTargetIdResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_Guard_0e6e439e726db5d6, []int{1}
}
func (m *GuardGetByUidTargetIdResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GuardGetByUidTargetIdResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GuardGetByUidTargetIdResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *GuardGetByUidTargetIdResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GuardGetByUidTargetIdResp.Merge(dst, src)
}
func (m *GuardGetByUidTargetIdResp) XXX_Size() int {
	return m.Size()
}
func (m *GuardGetByUidTargetIdResp) XXX_DiscardUnknown() {
	xxx_messageInfo_GuardGetByUidTargetIdResp.DiscardUnknown(m)
}

var xxx_messageInfo_GuardGetByUidTargetIdResp proto.InternalMessageInfo

func (m *GuardGetByUidTargetIdResp) GetCode() int64 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *GuardGetByUidTargetIdResp) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func (m *GuardGetByUidTargetIdResp) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *GuardGetByUidTargetIdResp) GetData() []*GuardGetByUidTargetIdResp_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

type GuardGetByUidTargetIdResp_Data struct {
	//
	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id"`
	//
	Uid int64 `protobuf:"varint,2,opt,name=uid,proto3" json:"uid"`
	// up主id
	TargetId int64 `protobuf:"varint,3,opt,name=target_id,json=targetId,proto3" json:"target_id"`
	// 1:总督,2:提督,3:舰长
	PrivilegeType int64 `protobuf:"varint,4,opt,name=privilege_type,json=privilegeType,proto3" json:"privilege_type"`
	// 开始时间
	StartTime string `protobuf:"bytes,5,opt,name=start_time,json=startTime,proto3" json:"start_time"`
	// 过期时间
	ExpiredTime string `protobuf:"bytes,6,opt,name=expired_time,json=expiredTime,proto3" json:"expired_time"`
	// 创建时间
	Ctime string `protobuf:"bytes,7,opt,name=ctime,proto3" json:"ctime"`
	// 修改时间
	Utime string `protobuf:"bytes,8,opt,name=utime,proto3" json:"utime"`
}

func (m *GuardGetByUidTargetIdResp_Data) Reset()         { *m = GuardGetByUidTargetIdResp_Data{} }
func (m *GuardGetByUidTargetIdResp_Data) String() string { return proto.CompactTextString(m) }
func (*GuardGetByUidTargetIdResp_Data) ProtoMessage()    {}
func (*GuardGetByUidTargetIdResp_Data) Descriptor() ([]byte, []int) {
	return fileDescriptor_Guard_0e6e439e726db5d6, []int{1, 0}
}
func (m *GuardGetByUidTargetIdResp_Data) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GuardGetByUidTargetIdResp_Data) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GuardGetByUidTargetIdResp_Data.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *GuardGetByUidTargetIdResp_Data) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GuardGetByUidTargetIdResp_Data.Merge(dst, src)
}
func (m *GuardGetByUidTargetIdResp_Data) XXX_Size() int {
	return m.Size()
}
func (m *GuardGetByUidTargetIdResp_Data) XXX_DiscardUnknown() {
	xxx_messageInfo_GuardGetByUidTargetIdResp_Data.DiscardUnknown(m)
}

var xxx_messageInfo_GuardGetByUidTargetIdResp_Data proto.InternalMessageInfo

func (m *GuardGetByUidTargetIdResp_Data) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *GuardGetByUidTargetIdResp_Data) GetUid() int64 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *GuardGetByUidTargetIdResp_Data) GetTargetId() int64 {
	if m != nil {
		return m.TargetId
	}
	return 0
}

func (m *GuardGetByUidTargetIdResp_Data) GetPrivilegeType() int64 {
	if m != nil {
		return m.PrivilegeType
	}
	return 0
}

func (m *GuardGetByUidTargetIdResp_Data) GetStartTime() string {
	if m != nil {
		return m.StartTime
	}
	return ""
}

func (m *GuardGetByUidTargetIdResp_Data) GetExpiredTime() string {
	if m != nil {
		return m.ExpiredTime
	}
	return ""
}

func (m *GuardGetByUidTargetIdResp_Data) GetCtime() string {
	if m != nil {
		return m.Ctime
	}
	return ""
}

func (m *GuardGetByUidTargetIdResp_Data) GetUtime() string {
	if m != nil {
		return m.Utime
	}
	return ""
}

type GuardGetByUidReq struct {
	// uid
	Uid int64 `protobuf:"varint,1,opt,name=uid,proto3" json:"uid"`
	// 是否包含过期的守护，默认包含
	IncExpire int64 `protobuf:"varint,2,opt,name=inc_expire,json=incExpire,proto3" json:"inc_expire"`
	// 是否只返回等级最高的一条,默认0
	IsLimitOne int64 `protobuf:"varint,3,opt,name=is_limit_one,json=isLimitOne,proto3" json:"is_limit_one"`
}

func (m *GuardGetByUidReq) Reset()         { *m = GuardGetByUidReq{} }
func (m *GuardGetByUidReq) String() string { return proto.CompactTextString(m) }
func (*GuardGetByUidReq) ProtoMessage()    {}
func (*GuardGetByUidReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_Guard_0e6e439e726db5d6, []int{2}
}
func (m *GuardGetByUidReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GuardGetByUidReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GuardGetByUidReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *GuardGetByUidReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GuardGetByUidReq.Merge(dst, src)
}
func (m *GuardGetByUidReq) XXX_Size() int {
	return m.Size()
}
func (m *GuardGetByUidReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GuardGetByUidReq.DiscardUnknown(m)
}

var xxx_messageInfo_GuardGetByUidReq proto.InternalMessageInfo

func (m *GuardGetByUidReq) GetUid() int64 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *GuardGetByUidReq) GetIncExpire() int64 {
	if m != nil {
		return m.IncExpire
	}
	return 0
}

func (m *GuardGetByUidReq) GetIsLimitOne() int64 {
	if m != nil {
		return m.IsLimitOne
	}
	return 0
}

type GuardGetByUidResp struct {
	//
	Code int64 `protobuf:"varint,1,opt,name=code,proto3" json:"code"`
	//
	Msg string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg"`
	//
	Message string `protobuf:"bytes,3,opt,name=message,proto3" json:"message"`
	//
	Data []*GuardGetByUidResp_Data `protobuf:"bytes,4,rep,name=data" json:"data"`
}

func (m *GuardGetByUidResp) Reset()         { *m = GuardGetByUidResp{} }
func (m *GuardGetByUidResp) String() string { return proto.CompactTextString(m) }
func (*GuardGetByUidResp) ProtoMessage()    {}
func (*GuardGetByUidResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_Guard_0e6e439e726db5d6, []int{3}
}
func (m *GuardGetByUidResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GuardGetByUidResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GuardGetByUidResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *GuardGetByUidResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GuardGetByUidResp.Merge(dst, src)
}
func (m *GuardGetByUidResp) XXX_Size() int {
	return m.Size()
}
func (m *GuardGetByUidResp) XXX_DiscardUnknown() {
	xxx_messageInfo_GuardGetByUidResp.DiscardUnknown(m)
}

var xxx_messageInfo_GuardGetByUidResp proto.InternalMessageInfo

func (m *GuardGetByUidResp) GetCode() int64 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *GuardGetByUidResp) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func (m *GuardGetByUidResp) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *GuardGetByUidResp) GetData() []*GuardGetByUidResp_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

type GuardGetByUidResp_Data struct {
	//
	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id"`
	//
	Uid int64 `protobuf:"varint,2,opt,name=uid,proto3" json:"uid"`
	// up主id
	TargetId int64 `protobuf:"varint,3,opt,name=target_id,json=targetId,proto3" json:"target_id"`
	// 1:总督,2:提督,3:舰长
	PrivilegeType int64 `protobuf:"varint,4,opt,name=privilege_type,json=privilegeType,proto3" json:"privilege_type"`
	// 开始时间
	StartTime string `protobuf:"bytes,5,opt,name=start_time,json=startTime,proto3" json:"start_time"`
	// 过期时间
	ExpiredTime string `protobuf:"bytes,6,opt,name=expired_time,json=expiredTime,proto3" json:"expired_time"`
	// 创建时间
	Ctime string `protobuf:"bytes,7,opt,name=ctime,proto3" json:"ctime"`
	// 修改时间
	Utime string `protobuf:"bytes,8,opt,name=utime,proto3" json:"utime"`
}

func (m *GuardGetByUidResp_Data) Reset()         { *m = GuardGetByUidResp_Data{} }
func (m *GuardGetByUidResp_Data) String() string { return proto.CompactTextString(m) }
func (*GuardGetByUidResp_Data) ProtoMessage()    {}
func (*GuardGetByUidResp_Data) Descriptor() ([]byte, []int) {
	return fileDescriptor_Guard_0e6e439e726db5d6, []int{3, 0}
}
func (m *GuardGetByUidResp_Data) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GuardGetByUidResp_Data) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GuardGetByUidResp_Data.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *GuardGetByUidResp_Data) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GuardGetByUidResp_Data.Merge(dst, src)
}
func (m *GuardGetByUidResp_Data) XXX_Size() int {
	return m.Size()
}
func (m *GuardGetByUidResp_Data) XXX_DiscardUnknown() {
	xxx_messageInfo_GuardGetByUidResp_Data.DiscardUnknown(m)
}

var xxx_messageInfo_GuardGetByUidResp_Data proto.InternalMessageInfo

func (m *GuardGetByUidResp_Data) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *GuardGetByUidResp_Data) GetUid() int64 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *GuardGetByUidResp_Data) GetTargetId() int64 {
	if m != nil {
		return m.TargetId
	}
	return 0
}

func (m *GuardGetByUidResp_Data) GetPrivilegeType() int64 {
	if m != nil {
		return m.PrivilegeType
	}
	return 0
}

func (m *GuardGetByUidResp_Data) GetStartTime() string {
	if m != nil {
		return m.StartTime
	}
	return ""
}

func (m *GuardGetByUidResp_Data) GetExpiredTime() string {
	if m != nil {
		return m.ExpiredTime
	}
	return ""
}

func (m *GuardGetByUidResp_Data) GetCtime() string {
	if m != nil {
		return m.Ctime
	}
	return ""
}

func (m *GuardGetByUidResp_Data) GetUtime() string {
	if m != nil {
		return m.Utime
	}
	return ""
}

func init() {
	proto.RegisterType((*GuardGetByUidTargetIdReq)(nil), "live_user.v1.GuardGetByUidTargetIdReq")
	proto.RegisterType((*GuardGetByUidTargetIdResp)(nil), "live_user.v1.GuardGetByUidTargetIdResp")
	proto.RegisterType((*GuardGetByUidTargetIdResp_Data)(nil), "live_user.v1.GuardGetByUidTargetIdResp.Data")
	proto.RegisterType((*GuardGetByUidReq)(nil), "live_user.v1.GuardGetByUidReq")
	proto.RegisterType((*GuardGetByUidResp)(nil), "live_user.v1.GuardGetByUidResp")
	proto.RegisterType((*GuardGetByUidResp_Data)(nil), "live_user.v1.GuardGetByUidResp.Data")
}
func (m *GuardGetByUidTargetIdReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GuardGetByUidTargetIdReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Uid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGuard(dAtA, i, uint64(m.Uid))
	}
	if m.TargetId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintGuard(dAtA, i, uint64(m.TargetId))
	}
	if m.IsLimitOne != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintGuard(dAtA, i, uint64(m.IsLimitOne))
	}
	return i, nil
}

func (m *GuardGetByUidTargetIdResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GuardGetByUidTargetIdResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGuard(dAtA, i, uint64(m.Code))
	}
	if len(m.Msg) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintGuard(dAtA, i, uint64(len(m.Msg)))
		i += copy(dAtA[i:], m.Msg)
	}
	if len(m.Message) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintGuard(dAtA, i, uint64(len(m.Message)))
		i += copy(dAtA[i:], m.Message)
	}
	if len(m.Data) > 0 {
		for _, msg := range m.Data {
			dAtA[i] = 0x22
			i++
			i = encodeVarintGuard(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *GuardGetByUidTargetIdResp_Data) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GuardGetByUidTargetIdResp_Data) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGuard(dAtA, i, uint64(m.Id))
	}
	if m.Uid != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintGuard(dAtA, i, uint64(m.Uid))
	}
	if m.TargetId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintGuard(dAtA, i, uint64(m.TargetId))
	}
	if m.PrivilegeType != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintGuard(dAtA, i, uint64(m.PrivilegeType))
	}
	if len(m.StartTime) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintGuard(dAtA, i, uint64(len(m.StartTime)))
		i += copy(dAtA[i:], m.StartTime)
	}
	if len(m.ExpiredTime) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintGuard(dAtA, i, uint64(len(m.ExpiredTime)))
		i += copy(dAtA[i:], m.ExpiredTime)
	}
	if len(m.Ctime) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintGuard(dAtA, i, uint64(len(m.Ctime)))
		i += copy(dAtA[i:], m.Ctime)
	}
	if len(m.Utime) > 0 {
		dAtA[i] = 0x42
		i++
		i = encodeVarintGuard(dAtA, i, uint64(len(m.Utime)))
		i += copy(dAtA[i:], m.Utime)
	}
	return i, nil
}

func (m *GuardGetByUidReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GuardGetByUidReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Uid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGuard(dAtA, i, uint64(m.Uid))
	}
	if m.IncExpire != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintGuard(dAtA, i, uint64(m.IncExpire))
	}
	if m.IsLimitOne != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintGuard(dAtA, i, uint64(m.IsLimitOne))
	}
	return i, nil
}

func (m *GuardGetByUidResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GuardGetByUidResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGuard(dAtA, i, uint64(m.Code))
	}
	if len(m.Msg) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintGuard(dAtA, i, uint64(len(m.Msg)))
		i += copy(dAtA[i:], m.Msg)
	}
	if len(m.Message) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintGuard(dAtA, i, uint64(len(m.Message)))
		i += copy(dAtA[i:], m.Message)
	}
	if len(m.Data) > 0 {
		for _, msg := range m.Data {
			dAtA[i] = 0x22
			i++
			i = encodeVarintGuard(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *GuardGetByUidResp_Data) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GuardGetByUidResp_Data) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGuard(dAtA, i, uint64(m.Id))
	}
	if m.Uid != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintGuard(dAtA, i, uint64(m.Uid))
	}
	if m.TargetId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintGuard(dAtA, i, uint64(m.TargetId))
	}
	if m.PrivilegeType != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintGuard(dAtA, i, uint64(m.PrivilegeType))
	}
	if len(m.StartTime) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintGuard(dAtA, i, uint64(len(m.StartTime)))
		i += copy(dAtA[i:], m.StartTime)
	}
	if len(m.ExpiredTime) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintGuard(dAtA, i, uint64(len(m.ExpiredTime)))
		i += copy(dAtA[i:], m.ExpiredTime)
	}
	if len(m.Ctime) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintGuard(dAtA, i, uint64(len(m.Ctime)))
		i += copy(dAtA[i:], m.Ctime)
	}
	if len(m.Utime) > 0 {
		dAtA[i] = 0x42
		i++
		i = encodeVarintGuard(dAtA, i, uint64(len(m.Utime)))
		i += copy(dAtA[i:], m.Utime)
	}
	return i, nil
}

func encodeVarintGuard(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *GuardGetByUidTargetIdReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Uid != 0 {
		n += 1 + sovGuard(uint64(m.Uid))
	}
	if m.TargetId != 0 {
		n += 1 + sovGuard(uint64(m.TargetId))
	}
	if m.IsLimitOne != 0 {
		n += 1 + sovGuard(uint64(m.IsLimitOne))
	}
	return n
}

func (m *GuardGetByUidTargetIdResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovGuard(uint64(m.Code))
	}
	l = len(m.Msg)
	if l > 0 {
		n += 1 + l + sovGuard(uint64(l))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovGuard(uint64(l))
	}
	if len(m.Data) > 0 {
		for _, e := range m.Data {
			l = e.Size()
			n += 1 + l + sovGuard(uint64(l))
		}
	}
	return n
}

func (m *GuardGetByUidTargetIdResp_Data) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovGuard(uint64(m.Id))
	}
	if m.Uid != 0 {
		n += 1 + sovGuard(uint64(m.Uid))
	}
	if m.TargetId != 0 {
		n += 1 + sovGuard(uint64(m.TargetId))
	}
	if m.PrivilegeType != 0 {
		n += 1 + sovGuard(uint64(m.PrivilegeType))
	}
	l = len(m.StartTime)
	if l > 0 {
		n += 1 + l + sovGuard(uint64(l))
	}
	l = len(m.ExpiredTime)
	if l > 0 {
		n += 1 + l + sovGuard(uint64(l))
	}
	l = len(m.Ctime)
	if l > 0 {
		n += 1 + l + sovGuard(uint64(l))
	}
	l = len(m.Utime)
	if l > 0 {
		n += 1 + l + sovGuard(uint64(l))
	}
	return n
}

func (m *GuardGetByUidReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Uid != 0 {
		n += 1 + sovGuard(uint64(m.Uid))
	}
	if m.IncExpire != 0 {
		n += 1 + sovGuard(uint64(m.IncExpire))
	}
	if m.IsLimitOne != 0 {
		n += 1 + sovGuard(uint64(m.IsLimitOne))
	}
	return n
}

func (m *GuardGetByUidResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovGuard(uint64(m.Code))
	}
	l = len(m.Msg)
	if l > 0 {
		n += 1 + l + sovGuard(uint64(l))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovGuard(uint64(l))
	}
	if len(m.Data) > 0 {
		for _, e := range m.Data {
			l = e.Size()
			n += 1 + l + sovGuard(uint64(l))
		}
	}
	return n
}

func (m *GuardGetByUidResp_Data) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovGuard(uint64(m.Id))
	}
	if m.Uid != 0 {
		n += 1 + sovGuard(uint64(m.Uid))
	}
	if m.TargetId != 0 {
		n += 1 + sovGuard(uint64(m.TargetId))
	}
	if m.PrivilegeType != 0 {
		n += 1 + sovGuard(uint64(m.PrivilegeType))
	}
	l = len(m.StartTime)
	if l > 0 {
		n += 1 + l + sovGuard(uint64(l))
	}
	l = len(m.ExpiredTime)
	if l > 0 {
		n += 1 + l + sovGuard(uint64(l))
	}
	l = len(m.Ctime)
	if l > 0 {
		n += 1 + l + sovGuard(uint64(l))
	}
	l = len(m.Utime)
	if l > 0 {
		n += 1 + l + sovGuard(uint64(l))
	}
	return n
}

func sovGuard(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozGuard(x uint64) (n int) {
	return sovGuard(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *GuardGetByUidTargetIdReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGuard
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GuardGetByUidTargetIdReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GuardGetByUidTargetIdReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuard
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetId", wireType)
			}
			m.TargetId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuard
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TargetId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsLimitOne", wireType)
			}
			m.IsLimitOne = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuard
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IsLimitOne |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGuard(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGuard
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GuardGetByUidTargetIdResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGuard
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GuardGetByUidTargetIdResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GuardGetByUidTargetIdResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuard
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuard
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGuard
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuard
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGuard
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuard
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGuard
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data, &GuardGetByUidTargetIdResp_Data{})
			if err := m.Data[len(m.Data)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGuard(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGuard
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GuardGetByUidTargetIdResp_Data) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGuard
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Data: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Data: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuard
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuard
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetId", wireType)
			}
			m.TargetId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuard
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TargetId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrivilegeType", wireType)
			}
			m.PrivilegeType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuard
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PrivilegeType |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuard
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGuard
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StartTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpiredTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuard
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGuard
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExpiredTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ctime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuard
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGuard
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ctime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Utime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuard
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGuard
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Utime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGuard(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGuard
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GuardGetByUidReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGuard
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GuardGetByUidReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GuardGetByUidReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuard
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IncExpire", wireType)
			}
			m.IncExpire = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuard
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IncExpire |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsLimitOne", wireType)
			}
			m.IsLimitOne = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuard
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IsLimitOne |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGuard(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGuard
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GuardGetByUidResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGuard
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GuardGetByUidResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GuardGetByUidResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuard
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuard
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGuard
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuard
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGuard
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuard
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGuard
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data, &GuardGetByUidResp_Data{})
			if err := m.Data[len(m.Data)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGuard(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGuard
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GuardGetByUidResp_Data) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGuard
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Data: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Data: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuard
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuard
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetId", wireType)
			}
			m.TargetId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuard
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TargetId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrivilegeType", wireType)
			}
			m.PrivilegeType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuard
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PrivilegeType |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuard
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGuard
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StartTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpiredTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuard
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGuard
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExpiredTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ctime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuard
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGuard
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ctime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Utime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuard
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGuard
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Utime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGuard(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGuard
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGuard(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGuard
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGuard
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGuard
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthGuard
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowGuard
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipGuard(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthGuard = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGuard   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("v1/Guard.proto", fileDescriptor_Guard_0e6e439e726db5d6) }

var fileDescriptor_Guard_0e6e439e726db5d6 = []byte{
	// 565 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x55, 0xcd, 0x6a, 0xdb, 0x4c,
	0x14, 0x8d, 0x64, 0x25, 0xb1, 0x6e, 0x1c, 0xe3, 0x6f, 0x16, 0x1f, 0x8a, 0x09, 0x52, 0x30, 0xfd,
	0x09, 0xa5, 0x96, 0xb1, 0xb3, 0xea, 0xd6, 0xb4, 0x84, 0xfe, 0x40, 0x61, 0x70, 0x37, 0xdd, 0x08,
	0x59, 0x9a, 0xaa, 0x03, 0x96, 0x25, 0x4b, 0x23, 0x53, 0xef, 0xfa, 0x08, 0xde, 0xf4, 0x61, 0xfa,
	0x02, 0xa5, 0xcb, 0x2c, 0xbb, 0x12, 0xc5, 0xde, 0xe9, 0x29, 0x8a, 0xae, 0xec, 0xf8, 0x07, 0x62,
	0x87, 0x42, 0xbb, 0xea, 0xe6, 0xce, 0xbd, 0x77, 0xce, 0x1d, 0x1f, 0x9f, 0x39, 0x8c, 0xa0, 0x3a,
	0x6e, 0xb7, 0xae, 0x13, 0x3b, 0x72, 0xcd, 0x30, 0x0a, 0x44, 0x40, 0x2a, 0x03, 0x3e, 0x66, 0x56,
	0x12, 0xb3, 0xc8, 0x1c, 0xb7, 0xeb, 0x4d, 0x8f, 0x8b, 0x8f, 0x49, 0xdf, 0x74, 0x02, 0xbf, 0xe5,
	0x05, 0x5e, 0xd0, 0x42, 0x50, 0x3f, 0xf9, 0x80, 0x15, 0x16, 0x98, 0x15, 0xc3, 0x8d, 0x2f, 0x12,
	0x68, 0x78, 0xd8, 0x35, 0x13, 0xdd, 0xc9, 0x3b, 0xee, 0xf6, 0xec, 0xc8, 0x63, 0xe2, 0xa5, 0x4b,
	0xd9, 0x88, 0x9c, 0x41, 0x29, 0xe1, 0xae, 0x26, 0x5d, 0x48, 0x97, 0xa5, 0xee, 0x71, 0x96, 0x1a,
	0x79, 0x49, 0xf3, 0x40, 0x9e, 0x80, 0x2a, 0x10, 0x69, 0x71, 0x57, 0x93, 0x11, 0x70, 0x9a, 0xa5,
	0xc6, 0xaa, 0x49, 0xcb, 0x62, 0x71, 0x12, 0xe9, 0x40, 0x85, 0xc7, 0xd6, 0x80, 0xfb, 0x5c, 0x58,
	0xc1, 0x90, 0x69, 0x25, 0x84, 0xd7, 0xb2, 0xd4, 0xd8, 0xe8, 0x53, 0xe0, 0xf1, 0x9b, 0xbc, 0x78,
	0x3b, 0x64, 0x8d, 0xa9, 0x02, 0x67, 0x77, 0xf0, 0x8a, 0x43, 0x72, 0x0e, 0x8a, 0x13, 0xb8, 0x6c,
	0xc1, 0xac, 0x9c, 0xa5, 0x06, 0xd6, 0x14, 0x63, 0x4e, 0xdb, 0x8f, 0x3d, 0x64, 0xa5, 0x16, 0xb4,
	0xfd, 0xd8, 0xa3, 0x79, 0x20, 0x0f, 0xe1, 0xd8, 0x67, 0x71, 0x6c, 0x7b, 0x05, 0x0b, 0xb5, 0x7b,
	0x92, 0xa5, 0xc6, 0xb2, 0x45, 0x97, 0x09, 0x79, 0x05, 0x8a, 0x6b, 0x0b, 0x5b, 0x53, 0x2e, 0x4a,
	0x97, 0x27, 0x9d, 0xa7, 0xe6, 0xba, 0xc2, 0xe6, 0x9d, 0xb4, 0xcc, 0xe7, 0xb6, 0xb0, 0x0b, 0x36,
	0xf9, 0x34, 0xc5, 0x58, 0xff, 0x26, 0x83, 0x92, 0x6f, 0x90, 0xff, 0x41, 0xbe, 0x15, 0xf3, 0x28,
	0x4b, 0x0d, 0x99, 0xbb, 0x54, 0xe6, 0xee, 0x52, 0x65, 0x79, 0x9f, 0xca, 0xa5, 0xdd, 0x2a, 0x3f,
	0x83, 0x6a, 0x18, 0xf1, 0x31, 0x1f, 0x30, 0x8f, 0x59, 0x62, 0x12, 0x32, 0x4d, 0xc1, 0x01, 0x92,
	0xa5, 0xc6, 0xd6, 0x0e, 0x3d, 0xbd, 0xad, 0x7b, 0x93, 0x90, 0x91, 0x26, 0x40, 0x2c, 0xec, 0x48,
	0x58, 0x82, 0xfb, 0x4c, 0x3b, 0x44, 0x61, 0xaa, 0x59, 0x6a, 0xac, 0x75, 0xa9, 0x8a, 0x79, 0x8f,
	0xfb, 0x8c, 0x5c, 0x41, 0x85, 0x7d, 0x0a, 0x79, 0xc4, 0xdc, 0x62, 0xe0, 0x08, 0x07, 0xf0, 0x3e,
	0xd7, 0xfb, 0xf4, 0x64, 0x51, 0xe1, 0x90, 0x01, 0x87, 0x0e, 0xa2, 0x8f, 0x11, 0xad, 0x66, 0xa9,
	0x51, 0x34, 0x68, 0xb1, 0xe4, 0x80, 0x04, 0x01, 0xe5, 0x15, 0x20, 0x29, 0x00, 0xb8, 0x34, 0xa6,
	0x12, 0xd4, 0x36, 0xb4, 0xdf, 0x63, 0xd1, 0x26, 0x00, 0x1f, 0x3a, 0x56, 0x41, 0x62, 0x21, 0x2f,
	0xfe, 0xab, 0x55, 0x97, 0xaa, 0x7c, 0xe8, 0xbc, 0xc0, 0xf4, 0xb7, 0x5c, 0xfa, 0x59, 0x81, 0xff,
	0xb6, 0x28, 0xfd, 0x05, 0x77, 0x76, 0x37, 0xdc, 0xf9, 0x60, 0x87, 0x3b, 0xff, 0xb9, 0xf2, 0x4f,
	0xbb, 0xb2, 0xf3, 0x55, 0x82, 0x43, 0xd4, 0x9c, 0x38, 0x50, 0xf3, 0xb6, 0x5e, 0x05, 0xf2, 0xe8,
	0x5e, 0x4f, 0xc7, 0xa8, 0xfe, 0xf8, 0x9e, 0x4f, 0x0c, 0x79, 0x0d, 0xe5, 0xe5, 0x8f, 0x10, 0x7d,
	0xe7, 0xcd, 0x8f, 0xea, 0xc6, 0x1e, 0x67, 0x74, 0xcf, 0xbf, 0xcf, 0x74, 0xe9, 0x66, 0xa6, 0x4b,
	0x3f, 0x67, 0xba, 0x34, 0x9d, 0xeb, 0x07, 0x37, 0x73, 0xfd, 0xe0, 0xc7, 0x5c, 0x3f, 0x78, 0x2f,
	0x8f, 0xdb, 0xfd, 0x23, 0xfc, 0x42, 0x5c, 0xfd, 0x0a, 0x00, 0x00, 0xff, 0xff, 0x76, 0x92, 0x12,
	0x6a, 0x70, 0x06, 0x00, 0x00,
}
