// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: app/service/live/xrewardcenter/api/grpc/v1/AnchorReward.proto

package v1

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type AnchorTaskAddRewardReq struct {
	// 奖励id, 1:任意门
	RewardId int64 `protobuf:"varint,4,opt,name=reward_id,json=rewardId,proto3" json:"reward_id,omitempty" form:"reward_id" validate:"required"`
	// 房间号
	Roomid int64 `protobuf:"varint,8,opt,name=roomid,proto3" json:"roomid,omitempty" form:"roomid" validate:"required"`
	// 来源,1:主播任务,2:小时榜,3:周星
	Source int64 `protobuf:"varint,9,opt,name=source,proto3" json:"source,omitempty" form:"source" validate:"required"`
	// 主播uid
	Uid int64 `protobuf:"varint,10,opt,name=uid,proto3" json:"uid,omitempty" form:"uid" validate:"required"`
	// 流水单号
	OrderId string `protobuf:"bytes,11,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty" form:"order_id" validate:"required"`
	// 礼物有效期小时数,默认24小时
	Lifespan             int64    `protobuf:"varint,12,opt,name=lifespan,proto3" json:"lifespan,omitempty" form:"lifespan" validate:"min=0"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AnchorTaskAddRewardReq) Reset()         { *m = AnchorTaskAddRewardReq{} }
func (m *AnchorTaskAddRewardReq) String() string { return proto.CompactTextString(m) }
func (*AnchorTaskAddRewardReq) ProtoMessage()    {}
func (*AnchorTaskAddRewardReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_AnchorReward_d2733c924ebe0ec6, []int{0}
}
func (m *AnchorTaskAddRewardReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AnchorTaskAddRewardReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AnchorTaskAddRewardReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *AnchorTaskAddRewardReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AnchorTaskAddRewardReq.Merge(dst, src)
}
func (m *AnchorTaskAddRewardReq) XXX_Size() int {
	return m.Size()
}
func (m *AnchorTaskAddRewardReq) XXX_DiscardUnknown() {
	xxx_messageInfo_AnchorTaskAddRewardReq.DiscardUnknown(m)
}

var xxx_messageInfo_AnchorTaskAddRewardReq proto.InternalMessageInfo

func (m *AnchorTaskAddRewardReq) GetRewardId() int64 {
	if m != nil {
		return m.RewardId
	}
	return 0
}

func (m *AnchorTaskAddRewardReq) GetRoomid() int64 {
	if m != nil {
		return m.Roomid
	}
	return 0
}

func (m *AnchorTaskAddRewardReq) GetSource() int64 {
	if m != nil {
		return m.Source
	}
	return 0
}

func (m *AnchorTaskAddRewardReq) GetUid() int64 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *AnchorTaskAddRewardReq) GetOrderId() string {
	if m != nil {
		return m.OrderId
	}
	return ""
}

func (m *AnchorTaskAddRewardReq) GetLifespan() int64 {
	if m != nil {
		return m.Lifespan
	}
	return 0
}

type AnchorTaskAddRewardResp struct {
	// 是否成功
	Result               int64    `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AnchorTaskAddRewardResp) Reset()         { *m = AnchorTaskAddRewardResp{} }
func (m *AnchorTaskAddRewardResp) String() string { return proto.CompactTextString(m) }
func (*AnchorTaskAddRewardResp) ProtoMessage()    {}
func (*AnchorTaskAddRewardResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_AnchorReward_d2733c924ebe0ec6, []int{1}
}
func (m *AnchorTaskAddRewardResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AnchorTaskAddRewardResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AnchorTaskAddRewardResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *AnchorTaskAddRewardResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AnchorTaskAddRewardResp.Merge(dst, src)
}
func (m *AnchorTaskAddRewardResp) XXX_Size() int {
	return m.Size()
}
func (m *AnchorTaskAddRewardResp) XXX_DiscardUnknown() {
	xxx_messageInfo_AnchorTaskAddRewardResp.DiscardUnknown(m)
}

var xxx_messageInfo_AnchorTaskAddRewardResp proto.InternalMessageInfo

func (m *AnchorTaskAddRewardResp) GetResult() int64 {
	if m != nil {
		return m.Result
	}
	return 0
}

type AnchorTaskMyRewardReq struct {
	// 页数
	Page int64 `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty" form:"page"`
	// 主播uid
	Uid                  int64    `protobuf:"varint,2,opt,name=uid,proto3" json:"uid,omitempty" form:"uid" validate:"required"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AnchorTaskMyRewardReq) Reset()         { *m = AnchorTaskMyRewardReq{} }
func (m *AnchorTaskMyRewardReq) String() string { return proto.CompactTextString(m) }
func (*AnchorTaskMyRewardReq) ProtoMessage()    {}
func (*AnchorTaskMyRewardReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_AnchorReward_d2733c924ebe0ec6, []int{2}
}
func (m *AnchorTaskMyRewardReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AnchorTaskMyRewardReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AnchorTaskMyRewardReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *AnchorTaskMyRewardReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AnchorTaskMyRewardReq.Merge(dst, src)
}
func (m *AnchorTaskMyRewardReq) XXX_Size() int {
	return m.Size()
}
func (m *AnchorTaskMyRewardReq) XXX_DiscardUnknown() {
	xxx_messageInfo_AnchorTaskMyRewardReq.DiscardUnknown(m)
}

var xxx_messageInfo_AnchorTaskMyRewardReq proto.InternalMessageInfo

func (m *AnchorTaskMyRewardReq) GetPage() int64 {
	if m != nil {
		return m.Page
	}
	return 0
}

func (m *AnchorTaskMyRewardReq) GetUid() int64 {
	if m != nil {
		return m.Uid
	}
	return 0
}

type AnchorTaskMyRewardResp struct {
	//
	Data []*AnchorTaskMyRewardResp_RewardObj `protobuf:"bytes,1,rep,name=data" json:"data,omitempty"`
	//
	Page *AnchorTaskMyRewardResp_Page `protobuf:"bytes,2,opt,name=page" json:"page,omitempty"`
	// 过期奖励数量
	ExpireCount          int64    `protobuf:"varint,3,opt,name=expire_count,json=expireCount,proto3" json:"expire_count,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AnchorTaskMyRewardResp) Reset()         { *m = AnchorTaskMyRewardResp{} }
func (m *AnchorTaskMyRewardResp) String() string { return proto.CompactTextString(m) }
func (*AnchorTaskMyRewardResp) ProtoMessage()    {}
func (*AnchorTaskMyRewardResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_AnchorReward_d2733c924ebe0ec6, []int{3}
}
func (m *AnchorTaskMyRewardResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AnchorTaskMyRewardResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AnchorTaskMyRewardResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *AnchorTaskMyRewardResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AnchorTaskMyRewardResp.Merge(dst, src)
}
func (m *AnchorTaskMyRewardResp) XXX_Size() int {
	return m.Size()
}
func (m *AnchorTaskMyRewardResp) XXX_DiscardUnknown() {
	xxx_messageInfo_AnchorTaskMyRewardResp.DiscardUnknown(m)
}

var xxx_messageInfo_AnchorTaskMyRewardResp proto.InternalMessageInfo

func (m *AnchorTaskMyRewardResp) GetData() []*AnchorTaskMyRewardResp_RewardObj {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *AnchorTaskMyRewardResp) GetPage() *AnchorTaskMyRewardResp_Page {
	if m != nil {
		return m.Page
	}
	return nil
}

func (m *AnchorTaskMyRewardResp) GetExpireCount() int64 {
	if m != nil {
		return m.ExpireCount
	}
	return 0
}

type AnchorTaskMyRewardResp_RewardObj struct {
	// id
	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// 奖励类型 1:ss推荐卡 2:s推荐卡、任意门
	RewardType int64 `protobuf:"varint,2,opt,name=reward_type,json=rewardType,proto3" json:"reward_type,omitempty"`
	// 1:未使用,3:已使用,5:已过期
	Status int64 `protobuf:"varint,3,opt,name=status,proto3" json:"status,omitempty"`
	// 奖励id
	RewardId int64 `protobuf:"varint,4,opt,name=reward_id,json=rewardId,proto3" json:"reward_id,omitempty"`
	// 奖励名称
	Name string `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`
	// 奖励图标
	Icon string `protobuf:"bytes,6,opt,name=icon,proto3" json:"icon,omitempty"`
	// 获得时间datetime
	AchieveTime string `protobuf:"bytes,7,opt,name=achieve_time,json=achieveTime,proto3" json:"achieve_time,omitempty"`
	// 过期时间datetime
	ExpireTime string `protobuf:"bytes,8,opt,name=expire_time,json=expireTime,proto3" json:"expire_time,omitempty"`
	// 来源,1:主播任务,2:小时榜
	Source int64 `protobuf:"varint,9,opt,name=source,proto3" json:"source,omitempty"`
	// 奖励简介
	RewardIntro          string   `protobuf:"bytes,10,opt,name=reward_intro,json=rewardIntro,proto3" json:"reward_intro,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AnchorTaskMyRewardResp_RewardObj) Reset()         { *m = AnchorTaskMyRewardResp_RewardObj{} }
func (m *AnchorTaskMyRewardResp_RewardObj) String() string { return proto.CompactTextString(m) }
func (*AnchorTaskMyRewardResp_RewardObj) ProtoMessage()    {}
func (*AnchorTaskMyRewardResp_RewardObj) Descriptor() ([]byte, []int) {
	return fileDescriptor_AnchorReward_d2733c924ebe0ec6, []int{3, 0}
}
func (m *AnchorTaskMyRewardResp_RewardObj) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AnchorTaskMyRewardResp_RewardObj) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AnchorTaskMyRewardResp_RewardObj.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *AnchorTaskMyRewardResp_RewardObj) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AnchorTaskMyRewardResp_RewardObj.Merge(dst, src)
}
func (m *AnchorTaskMyRewardResp_RewardObj) XXX_Size() int {
	return m.Size()
}
func (m *AnchorTaskMyRewardResp_RewardObj) XXX_DiscardUnknown() {
	xxx_messageInfo_AnchorTaskMyRewardResp_RewardObj.DiscardUnknown(m)
}

var xxx_messageInfo_AnchorTaskMyRewardResp_RewardObj proto.InternalMessageInfo

func (m *AnchorTaskMyRewardResp_RewardObj) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *AnchorTaskMyRewardResp_RewardObj) GetRewardType() int64 {
	if m != nil {
		return m.RewardType
	}
	return 0
}

func (m *AnchorTaskMyRewardResp_RewardObj) GetStatus() int64 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *AnchorTaskMyRewardResp_RewardObj) GetRewardId() int64 {
	if m != nil {
		return m.RewardId
	}
	return 0
}

func (m *AnchorTaskMyRewardResp_RewardObj) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *AnchorTaskMyRewardResp_RewardObj) GetIcon() string {
	if m != nil {
		return m.Icon
	}
	return ""
}

func (m *AnchorTaskMyRewardResp_RewardObj) GetAchieveTime() string {
	if m != nil {
		return m.AchieveTime
	}
	return ""
}

func (m *AnchorTaskMyRewardResp_RewardObj) GetExpireTime() string {
	if m != nil {
		return m.ExpireTime
	}
	return ""
}

func (m *AnchorTaskMyRewardResp_RewardObj) GetSource() int64 {
	if m != nil {
		return m.Source
	}
	return 0
}

func (m *AnchorTaskMyRewardResp_RewardObj) GetRewardIntro() string {
	if m != nil {
		return m.RewardIntro
	}
	return ""
}

type AnchorTaskMyRewardResp_Page struct {
	// 当前页码
	Page int64 `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`
	// 每页大小
	PageSize int64 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// 总页数
	TotalPage int64 `protobuf:"varint,3,opt,name=total_page,json=totalPage,proto3" json:"total_page,omitempty"`
	// 总记录数
	TotalCount           int64    `protobuf:"varint,4,opt,name=total_count,json=totalCount,proto3" json:"total_count,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AnchorTaskMyRewardResp_Page) Reset()         { *m = AnchorTaskMyRewardResp_Page{} }
func (m *AnchorTaskMyRewardResp_Page) String() string { return proto.CompactTextString(m) }
func (*AnchorTaskMyRewardResp_Page) ProtoMessage()    {}
func (*AnchorTaskMyRewardResp_Page) Descriptor() ([]byte, []int) {
	return fileDescriptor_AnchorReward_d2733c924ebe0ec6, []int{3, 1}
}
func (m *AnchorTaskMyRewardResp_Page) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AnchorTaskMyRewardResp_Page) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AnchorTaskMyRewardResp_Page.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *AnchorTaskMyRewardResp_Page) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AnchorTaskMyRewardResp_Page.Merge(dst, src)
}
func (m *AnchorTaskMyRewardResp_Page) XXX_Size() int {
	return m.Size()
}
func (m *AnchorTaskMyRewardResp_Page) XXX_DiscardUnknown() {
	xxx_messageInfo_AnchorTaskMyRewardResp_Page.DiscardUnknown(m)
}

var xxx_messageInfo_AnchorTaskMyRewardResp_Page proto.InternalMessageInfo

func (m *AnchorTaskMyRewardResp_Page) GetPage() int64 {
	if m != nil {
		return m.Page
	}
	return 0
}

func (m *AnchorTaskMyRewardResp_Page) GetPageSize() int64 {
	if m != nil {
		return m.PageSize
	}
	return 0
}

func (m *AnchorTaskMyRewardResp_Page) GetTotalPage() int64 {
	if m != nil {
		return m.TotalPage
	}
	return 0
}

func (m *AnchorTaskMyRewardResp_Page) GetTotalCount() int64 {
	if m != nil {
		return m.TotalCount
	}
	return 0
}

type AnchorTaskUseRecordReq struct {
	// 页数
	Page int64 `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty" form:"page"`
	// 主播uid
	Uid                  int64    `protobuf:"varint,2,opt,name=uid,proto3" json:"uid,omitempty" form:"uid" validate:"required"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AnchorTaskUseRecordReq) Reset()         { *m = AnchorTaskUseRecordReq{} }
func (m *AnchorTaskUseRecordReq) String() string { return proto.CompactTextString(m) }
func (*AnchorTaskUseRecordReq) ProtoMessage()    {}
func (*AnchorTaskUseRecordReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_AnchorReward_d2733c924ebe0ec6, []int{4}
}
func (m *AnchorTaskUseRecordReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AnchorTaskUseRecordReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AnchorTaskUseRecordReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *AnchorTaskUseRecordReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AnchorTaskUseRecordReq.Merge(dst, src)
}
func (m *AnchorTaskUseRecordReq) XXX_Size() int {
	return m.Size()
}
func (m *AnchorTaskUseRecordReq) XXX_DiscardUnknown() {
	xxx_messageInfo_AnchorTaskUseRecordReq.DiscardUnknown(m)
}

var xxx_messageInfo_AnchorTaskUseRecordReq proto.InternalMessageInfo

func (m *AnchorTaskUseRecordReq) GetPage() int64 {
	if m != nil {
		return m.Page
	}
	return 0
}

func (m *AnchorTaskUseRecordReq) GetUid() int64 {
	if m != nil {
		return m.Uid
	}
	return 0
}

type AnchorTaskUseRecordResp struct {
	//
	Data []*AnchorTaskUseRecordResp_RewardObj `protobuf:"bytes,1,rep,name=data" json:"data,omitempty"`
	//
	Page                 *AnchorTaskUseRecordResp_Page `protobuf:"bytes,2,opt,name=page" json:"page,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                      `json:"-"`
	XXX_unrecognized     []byte                        `json:"-"`
	XXX_sizecache        int32                         `json:"-"`
}

func (m *AnchorTaskUseRecordResp) Reset()         { *m = AnchorTaskUseRecordResp{} }
func (m *AnchorTaskUseRecordResp) String() string { return proto.CompactTextString(m) }
func (*AnchorTaskUseRecordResp) ProtoMessage()    {}
func (*AnchorTaskUseRecordResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_AnchorReward_d2733c924ebe0ec6, []int{5}
}
func (m *AnchorTaskUseRecordResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AnchorTaskUseRecordResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AnchorTaskUseRecordResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *AnchorTaskUseRecordResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AnchorTaskUseRecordResp.Merge(dst, src)
}
func (m *AnchorTaskUseRecordResp) XXX_Size() int {
	return m.Size()
}
func (m *AnchorTaskUseRecordResp) XXX_DiscardUnknown() {
	xxx_messageInfo_AnchorTaskUseRecordResp.DiscardUnknown(m)
}

var xxx_messageInfo_AnchorTaskUseRecordResp proto.InternalMessageInfo

func (m *AnchorTaskUseRecordResp) GetData() []*AnchorTaskUseRecordResp_RewardObj {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *AnchorTaskUseRecordResp) GetPage() *AnchorTaskUseRecordResp_Page {
	if m != nil {
		return m.Page
	}
	return nil
}

type AnchorTaskUseRecordResp_RewardObj struct {
	// id
	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// 奖励id
	RewardId int64 `protobuf:"varint,2,opt,name=reward_id,json=rewardId,proto3" json:"reward_id,omitempty"`
	// 1:未使用,3:已使用,5:已过期
	Status int64 `protobuf:"varint,3,opt,name=status,proto3" json:"status,omitempty"`
	// 奖励名称
	Name string `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	// 奖励图标
	Icon string `protobuf:"bytes,5,opt,name=icon,proto3" json:"icon,omitempty"`
	// 获得时间datetime
	AchieveTime string `protobuf:"bytes,6,opt,name=achieve_time,json=achieveTime,proto3" json:"achieve_time,omitempty"`
	// 获得时间datetime
	UseTime string `protobuf:"bytes,10,opt,name=use_time,json=useTime,proto3" json:"use_time,omitempty"`
	// 过期时间datetime
	ExpireTime string `protobuf:"bytes,7,opt,name=expire_time,json=expireTime,proto3" json:"expire_time,omitempty"`
	// 来源,1:主播任务,2:小时榜
	Source int64 `protobuf:"varint,8,opt,name=source,proto3" json:"source,omitempty"`
	// 奖励简介
	RewardIntro          string   `protobuf:"bytes,9,opt,name=reward_intro,json=rewardIntro,proto3" json:"reward_intro,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AnchorTaskUseRecordResp_RewardObj) Reset()         { *m = AnchorTaskUseRecordResp_RewardObj{} }
func (m *AnchorTaskUseRecordResp_RewardObj) String() string { return proto.CompactTextString(m) }
func (*AnchorTaskUseRecordResp_RewardObj) ProtoMessage()    {}
func (*AnchorTaskUseRecordResp_RewardObj) Descriptor() ([]byte, []int) {
	return fileDescriptor_AnchorReward_d2733c924ebe0ec6, []int{5, 0}
}
func (m *AnchorTaskUseRecordResp_RewardObj) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AnchorTaskUseRecordResp_RewardObj) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AnchorTaskUseRecordResp_RewardObj.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *AnchorTaskUseRecordResp_RewardObj) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AnchorTaskUseRecordResp_RewardObj.Merge(dst, src)
}
func (m *AnchorTaskUseRecordResp_RewardObj) XXX_Size() int {
	return m.Size()
}
func (m *AnchorTaskUseRecordResp_RewardObj) XXX_DiscardUnknown() {
	xxx_messageInfo_AnchorTaskUseRecordResp_RewardObj.DiscardUnknown(m)
}

var xxx_messageInfo_AnchorTaskUseRecordResp_RewardObj proto.InternalMessageInfo

func (m *AnchorTaskUseRecordResp_RewardObj) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *AnchorTaskUseRecordResp_RewardObj) GetRewardId() int64 {
	if m != nil {
		return m.RewardId
	}
	return 0
}

func (m *AnchorTaskUseRecordResp_RewardObj) GetStatus() int64 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *AnchorTaskUseRecordResp_RewardObj) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *AnchorTaskUseRecordResp_RewardObj) GetIcon() string {
	if m != nil {
		return m.Icon
	}
	return ""
}

func (m *AnchorTaskUseRecordResp_RewardObj) GetAchieveTime() string {
	if m != nil {
		return m.AchieveTime
	}
	return ""
}

func (m *AnchorTaskUseRecordResp_RewardObj) GetUseTime() string {
	if m != nil {
		return m.UseTime
	}
	return ""
}

func (m *AnchorTaskUseRecordResp_RewardObj) GetExpireTime() string {
	if m != nil {
		return m.ExpireTime
	}
	return ""
}

func (m *AnchorTaskUseRecordResp_RewardObj) GetSource() int64 {
	if m != nil {
		return m.Source
	}
	return 0
}

func (m *AnchorTaskUseRecordResp_RewardObj) GetRewardIntro() string {
	if m != nil {
		return m.RewardIntro
	}
	return ""
}

type AnchorTaskUseRecordResp_Page struct {
	// 当前页码
	Page int64 `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`
	// 每页大小
	PageSize int64 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// 总页数
	TotalPage int64 `protobuf:"varint,3,opt,name=total_page,json=totalPage,proto3" json:"total_page,omitempty"`
	// 总记录数
	TotalCount           int64    `protobuf:"varint,4,opt,name=total_count,json=totalCount,proto3" json:"total_count,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AnchorTaskUseRecordResp_Page) Reset()         { *m = AnchorTaskUseRecordResp_Page{} }
func (m *AnchorTaskUseRecordResp_Page) String() string { return proto.CompactTextString(m) }
func (*AnchorTaskUseRecordResp_Page) ProtoMessage()    {}
func (*AnchorTaskUseRecordResp_Page) Descriptor() ([]byte, []int) {
	return fileDescriptor_AnchorReward_d2733c924ebe0ec6, []int{5, 1}
}
func (m *AnchorTaskUseRecordResp_Page) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AnchorTaskUseRecordResp_Page) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AnchorTaskUseRecordResp_Page.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *AnchorTaskUseRecordResp_Page) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AnchorTaskUseRecordResp_Page.Merge(dst, src)
}
func (m *AnchorTaskUseRecordResp_Page) XXX_Size() int {
	return m.Size()
}
func (m *AnchorTaskUseRecordResp_Page) XXX_DiscardUnknown() {
	xxx_messageInfo_AnchorTaskUseRecordResp_Page.DiscardUnknown(m)
}

var xxx_messageInfo_AnchorTaskUseRecordResp_Page proto.InternalMessageInfo

func (m *AnchorTaskUseRecordResp_Page) GetPage() int64 {
	if m != nil {
		return m.Page
	}
	return 0
}

func (m *AnchorTaskUseRecordResp_Page) GetPageSize() int64 {
	if m != nil {
		return m.PageSize
	}
	return 0
}

func (m *AnchorTaskUseRecordResp_Page) GetTotalPage() int64 {
	if m != nil {
		return m.TotalPage
	}
	return 0
}

func (m *AnchorTaskUseRecordResp_Page) GetTotalCount() int64 {
	if m != nil {
		return m.TotalCount
	}
	return 0
}

type AnchorTaskUseRewardReq struct {
	// 奖励列表id
	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty" form:"id" validate:"required"`
	// 主播uid
	Uid int64 `protobuf:"varint,2,opt,name=uid,proto3" json:"uid,omitempty" form:"uid" validate:"required"`
	// 使用平台
	UsePlat              string   `protobuf:"bytes,3,opt,name=use_plat,json=usePlat,proto3" json:"use_plat,omitempty" form:"use_plat" validate:"required"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AnchorTaskUseRewardReq) Reset()         { *m = AnchorTaskUseRewardReq{} }
func (m *AnchorTaskUseRewardReq) String() string { return proto.CompactTextString(m) }
func (*AnchorTaskUseRewardReq) ProtoMessage()    {}
func (*AnchorTaskUseRewardReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_AnchorReward_d2733c924ebe0ec6, []int{6}
}
func (m *AnchorTaskUseRewardReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AnchorTaskUseRewardReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AnchorTaskUseRewardReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *AnchorTaskUseRewardReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AnchorTaskUseRewardReq.Merge(dst, src)
}
func (m *AnchorTaskUseRewardReq) XXX_Size() int {
	return m.Size()
}
func (m *AnchorTaskUseRewardReq) XXX_DiscardUnknown() {
	xxx_messageInfo_AnchorTaskUseRewardReq.DiscardUnknown(m)
}

var xxx_messageInfo_AnchorTaskUseRewardReq proto.InternalMessageInfo

func (m *AnchorTaskUseRewardReq) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *AnchorTaskUseRewardReq) GetUid() int64 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *AnchorTaskUseRewardReq) GetUsePlat() string {
	if m != nil {
		return m.UsePlat
	}
	return ""
}

type AnchorTaskUseRewardResp struct {
	Result               int64    `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AnchorTaskUseRewardResp) Reset()         { *m = AnchorTaskUseRewardResp{} }
func (m *AnchorTaskUseRewardResp) String() string { return proto.CompactTextString(m) }
func (*AnchorTaskUseRewardResp) ProtoMessage()    {}
func (*AnchorTaskUseRewardResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_AnchorReward_d2733c924ebe0ec6, []int{7}
}
func (m *AnchorTaskUseRewardResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AnchorTaskUseRewardResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AnchorTaskUseRewardResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *AnchorTaskUseRewardResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AnchorTaskUseRewardResp.Merge(dst, src)
}
func (m *AnchorTaskUseRewardResp) XXX_Size() int {
	return m.Size()
}
func (m *AnchorTaskUseRewardResp) XXX_DiscardUnknown() {
	xxx_messageInfo_AnchorTaskUseRewardResp.DiscardUnknown(m)
}

var xxx_messageInfo_AnchorTaskUseRewardResp proto.InternalMessageInfo

func (m *AnchorTaskUseRewardResp) GetResult() int64 {
	if m != nil {
		return m.Result
	}
	return 0
}

type AnchorTaskIsViewedReq struct {
	// 主播uid
	Uid                  int64    `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty" form:"uid" validate:"required"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AnchorTaskIsViewedReq) Reset()         { *m = AnchorTaskIsViewedReq{} }
func (m *AnchorTaskIsViewedReq) String() string { return proto.CompactTextString(m) }
func (*AnchorTaskIsViewedReq) ProtoMessage()    {}
func (*AnchorTaskIsViewedReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_AnchorReward_d2733c924ebe0ec6, []int{8}
}
func (m *AnchorTaskIsViewedReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AnchorTaskIsViewedReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AnchorTaskIsViewedReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *AnchorTaskIsViewedReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AnchorTaskIsViewedReq.Merge(dst, src)
}
func (m *AnchorTaskIsViewedReq) XXX_Size() int {
	return m.Size()
}
func (m *AnchorTaskIsViewedReq) XXX_DiscardUnknown() {
	xxx_messageInfo_AnchorTaskIsViewedReq.DiscardUnknown(m)
}

var xxx_messageInfo_AnchorTaskIsViewedReq proto.InternalMessageInfo

func (m *AnchorTaskIsViewedReq) GetUid() int64 {
	if m != nil {
		return m.Uid
	}
	return 0
}

type AnchorTaskIsViewedResp struct {
	// 是否展示任务红点
	TaskShouldNotice int64 `protobuf:"varint,1,opt,name=task_should_notice,json=taskShouldNotice,proto3" json:"task_should_notice,omitempty"`
	// 是否展示奖励入口
	ShowRewardEntry int64 `protobuf:"varint,5,opt,name=show_reward_entry,json=showRewardEntry,proto3" json:"show_reward_entry,omitempty"`
	// 是否展示奖励红点
	RewardShouldNotice int64 `protobuf:"varint,2,opt,name=reward_should_notice,json=rewardShouldNotice,proto3" json:"reward_should_notice,omitempty"`
	// 任务状态, 0:没有,1:领取, 5:完成
	TaskStatus int64 `protobuf:"varint,3,opt,name=task_status,json=taskStatus,proto3" json:"task_status,omitempty"`
	// 是否在首页黑名单中
	IsBlacked int64 `protobuf:"varint,4,opt,name=is_blacked,json=isBlacked,proto3" json:"is_blacked,omitempty"`
	// 点击跳转h5链接
	Url                  string   `protobuf:"bytes,6,opt,name=url,proto3" json:"url,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AnchorTaskIsViewedResp) Reset()         { *m = AnchorTaskIsViewedResp{} }
func (m *AnchorTaskIsViewedResp) String() string { return proto.CompactTextString(m) }
func (*AnchorTaskIsViewedResp) ProtoMessage()    {}
func (*AnchorTaskIsViewedResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_AnchorReward_d2733c924ebe0ec6, []int{9}
}
func (m *AnchorTaskIsViewedResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AnchorTaskIsViewedResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AnchorTaskIsViewedResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *AnchorTaskIsViewedResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AnchorTaskIsViewedResp.Merge(dst, src)
}
func (m *AnchorTaskIsViewedResp) XXX_Size() int {
	return m.Size()
}
func (m *AnchorTaskIsViewedResp) XXX_DiscardUnknown() {
	xxx_messageInfo_AnchorTaskIsViewedResp.DiscardUnknown(m)
}

var xxx_messageInfo_AnchorTaskIsViewedResp proto.InternalMessageInfo

func (m *AnchorTaskIsViewedResp) GetTaskShouldNotice() int64 {
	if m != nil {
		return m.TaskShouldNotice
	}
	return 0
}

func (m *AnchorTaskIsViewedResp) GetShowRewardEntry() int64 {
	if m != nil {
		return m.ShowRewardEntry
	}
	return 0
}

func (m *AnchorTaskIsViewedResp) GetRewardShouldNotice() int64 {
	if m != nil {
		return m.RewardShouldNotice
	}
	return 0
}

func (m *AnchorTaskIsViewedResp) GetTaskStatus() int64 {
	if m != nil {
		return m.TaskStatus
	}
	return 0
}

func (m *AnchorTaskIsViewedResp) GetIsBlacked() int64 {
	if m != nil {
		return m.IsBlacked
	}
	return 0
}

func (m *AnchorTaskIsViewedResp) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func init() {
	proto.RegisterType((*AnchorTaskAddRewardReq)(nil), "live.xrewardcenter.v1.AnchorTaskAddRewardReq")
	proto.RegisterType((*AnchorTaskAddRewardResp)(nil), "live.xrewardcenter.v1.AnchorTaskAddRewardResp")
	proto.RegisterType((*AnchorTaskMyRewardReq)(nil), "live.xrewardcenter.v1.AnchorTaskMyRewardReq")
	proto.RegisterType((*AnchorTaskMyRewardResp)(nil), "live.xrewardcenter.v1.AnchorTaskMyRewardResp")
	proto.RegisterType((*AnchorTaskMyRewardResp_RewardObj)(nil), "live.xrewardcenter.v1.AnchorTaskMyRewardResp.RewardObj")
	proto.RegisterType((*AnchorTaskMyRewardResp_Page)(nil), "live.xrewardcenter.v1.AnchorTaskMyRewardResp.Page")
	proto.RegisterType((*AnchorTaskUseRecordReq)(nil), "live.xrewardcenter.v1.AnchorTaskUseRecordReq")
	proto.RegisterType((*AnchorTaskUseRecordResp)(nil), "live.xrewardcenter.v1.AnchorTaskUseRecordResp")
	proto.RegisterType((*AnchorTaskUseRecordResp_RewardObj)(nil), "live.xrewardcenter.v1.AnchorTaskUseRecordResp.RewardObj")
	proto.RegisterType((*AnchorTaskUseRecordResp_Page)(nil), "live.xrewardcenter.v1.AnchorTaskUseRecordResp.Page")
	proto.RegisterType((*AnchorTaskUseRewardReq)(nil), "live.xrewardcenter.v1.AnchorTaskUseRewardReq")
	proto.RegisterType((*AnchorTaskUseRewardResp)(nil), "live.xrewardcenter.v1.AnchorTaskUseRewardResp")
	proto.RegisterType((*AnchorTaskIsViewedReq)(nil), "live.xrewardcenter.v1.AnchorTaskIsViewedReq")
	proto.RegisterType((*AnchorTaskIsViewedResp)(nil), "live.xrewardcenter.v1.AnchorTaskIsViewedResp")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// AnchorRewardClient is the client API for AnchorReward service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type AnchorRewardClient interface {
	// (主播侧)-我的主播奖励(登录态)
	// `method:"POST" internal:"true"`
	MyReward(ctx context.Context, in *AnchorTaskMyRewardReq, opts ...grpc.CallOption) (*AnchorTaskMyRewardResp, error)
	// * (主播侧)-奖励使用记录(登录态)
	//
	UseRecord(ctx context.Context, in *AnchorTaskUseRecordReq, opts ...grpc.CallOption) (*AnchorTaskUseRecordResp, error)
	// * (主播侧)-使用奖励(登录态)
	//
	UseReward(ctx context.Context, in *AnchorTaskUseRewardReq, opts ...grpc.CallOption) (*AnchorTaskUseRewardResp, error)
	// * (主播侧)-奖励和任务红点(登录态)
	//
	IsViewed(ctx context.Context, in *AnchorTaskIsViewedReq, opts ...grpc.CallOption) (*AnchorTaskIsViewedResp, error)
	// (主播侧)-添加主播奖励(内部接口)
	// `method:"POST" internal:"true"`
	AddReward(ctx context.Context, in *AnchorTaskAddRewardReq, opts ...grpc.CallOption) (*AnchorTaskAddRewardResp, error)
}

type anchorRewardClient struct {
	cc *grpc.ClientConn
}

func NewAnchorRewardClient(cc *grpc.ClientConn) AnchorRewardClient {
	return &anchorRewardClient{cc}
}

func (c *anchorRewardClient) MyReward(ctx context.Context, in *AnchorTaskMyRewardReq, opts ...grpc.CallOption) (*AnchorTaskMyRewardResp, error) {
	out := new(AnchorTaskMyRewardResp)
	err := c.cc.Invoke(ctx, "/live.xrewardcenter.v1.AnchorReward/myReward", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *anchorRewardClient) UseRecord(ctx context.Context, in *AnchorTaskUseRecordReq, opts ...grpc.CallOption) (*AnchorTaskUseRecordResp, error) {
	out := new(AnchorTaskUseRecordResp)
	err := c.cc.Invoke(ctx, "/live.xrewardcenter.v1.AnchorReward/useRecord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *anchorRewardClient) UseReward(ctx context.Context, in *AnchorTaskUseRewardReq, opts ...grpc.CallOption) (*AnchorTaskUseRewardResp, error) {
	out := new(AnchorTaskUseRewardResp)
	err := c.cc.Invoke(ctx, "/live.xrewardcenter.v1.AnchorReward/useReward", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *anchorRewardClient) IsViewed(ctx context.Context, in *AnchorTaskIsViewedReq, opts ...grpc.CallOption) (*AnchorTaskIsViewedResp, error) {
	out := new(AnchorTaskIsViewedResp)
	err := c.cc.Invoke(ctx, "/live.xrewardcenter.v1.AnchorReward/isViewed", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *anchorRewardClient) AddReward(ctx context.Context, in *AnchorTaskAddRewardReq, opts ...grpc.CallOption) (*AnchorTaskAddRewardResp, error) {
	out := new(AnchorTaskAddRewardResp)
	err := c.cc.Invoke(ctx, "/live.xrewardcenter.v1.AnchorReward/addReward", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AnchorRewardServer is the server API for AnchorReward service.
type AnchorRewardServer interface {
	// (主播侧)-我的主播奖励(登录态)
	// `method:"POST" internal:"true"`
	MyReward(context.Context, *AnchorTaskMyRewardReq) (*AnchorTaskMyRewardResp, error)
	// * (主播侧)-奖励使用记录(登录态)
	//
	UseRecord(context.Context, *AnchorTaskUseRecordReq) (*AnchorTaskUseRecordResp, error)
	// * (主播侧)-使用奖励(登录态)
	//
	UseReward(context.Context, *AnchorTaskUseRewardReq) (*AnchorTaskUseRewardResp, error)
	// * (主播侧)-奖励和任务红点(登录态)
	//
	IsViewed(context.Context, *AnchorTaskIsViewedReq) (*AnchorTaskIsViewedResp, error)
	// (主播侧)-添加主播奖励(内部接口)
	// `method:"POST" internal:"true"`
	AddReward(context.Context, *AnchorTaskAddRewardReq) (*AnchorTaskAddRewardResp, error)
}

func RegisterAnchorRewardServer(s *grpc.Server, srv AnchorRewardServer) {
	s.RegisterService(&_AnchorReward_serviceDesc, srv)
}

func _AnchorReward_MyReward_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AnchorTaskMyRewardReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnchorRewardServer).MyReward(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/live.xrewardcenter.v1.AnchorReward/MyReward",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnchorRewardServer).MyReward(ctx, req.(*AnchorTaskMyRewardReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AnchorReward_UseRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AnchorTaskUseRecordReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnchorRewardServer).UseRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/live.xrewardcenter.v1.AnchorReward/UseRecord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnchorRewardServer).UseRecord(ctx, req.(*AnchorTaskUseRecordReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AnchorReward_UseReward_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AnchorTaskUseRewardReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnchorRewardServer).UseReward(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/live.xrewardcenter.v1.AnchorReward/UseReward",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnchorRewardServer).UseReward(ctx, req.(*AnchorTaskUseRewardReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AnchorReward_IsViewed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AnchorTaskIsViewedReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnchorRewardServer).IsViewed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/live.xrewardcenter.v1.AnchorReward/IsViewed",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnchorRewardServer).IsViewed(ctx, req.(*AnchorTaskIsViewedReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AnchorReward_AddReward_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AnchorTaskAddRewardReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnchorRewardServer).AddReward(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/live.xrewardcenter.v1.AnchorReward/AddReward",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnchorRewardServer).AddReward(ctx, req.(*AnchorTaskAddRewardReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _AnchorReward_serviceDesc = grpc.ServiceDesc{
	ServiceName: "live.xrewardcenter.v1.AnchorReward",
	HandlerType: (*AnchorRewardServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "myReward",
			Handler:    _AnchorReward_MyReward_Handler,
		},
		{
			MethodName: "useRecord",
			Handler:    _AnchorReward_UseRecord_Handler,
		},
		{
			MethodName: "useReward",
			Handler:    _AnchorReward_UseReward_Handler,
		},
		{
			MethodName: "isViewed",
			Handler:    _AnchorReward_IsViewed_Handler,
		},
		{
			MethodName: "addReward",
			Handler:    _AnchorReward_AddReward_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "app/service/live/xrewardcenter/api/grpc/v1/AnchorReward.proto",
}

func (m *AnchorTaskAddRewardReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AnchorTaskAddRewardReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.RewardId != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintAnchorReward(dAtA, i, uint64(m.RewardId))
	}
	if m.Roomid != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintAnchorReward(dAtA, i, uint64(m.Roomid))
	}
	if m.Source != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintAnchorReward(dAtA, i, uint64(m.Source))
	}
	if m.Uid != 0 {
		dAtA[i] = 0x50
		i++
		i = encodeVarintAnchorReward(dAtA, i, uint64(m.Uid))
	}
	if len(m.OrderId) > 0 {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintAnchorReward(dAtA, i, uint64(len(m.OrderId)))
		i += copy(dAtA[i:], m.OrderId)
	}
	if m.Lifespan != 0 {
		dAtA[i] = 0x60
		i++
		i = encodeVarintAnchorReward(dAtA, i, uint64(m.Lifespan))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *AnchorTaskAddRewardResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AnchorTaskAddRewardResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Result != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintAnchorReward(dAtA, i, uint64(m.Result))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *AnchorTaskMyRewardReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AnchorTaskMyRewardReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Page != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintAnchorReward(dAtA, i, uint64(m.Page))
	}
	if m.Uid != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintAnchorReward(dAtA, i, uint64(m.Uid))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *AnchorTaskMyRewardResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AnchorTaskMyRewardResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Data) > 0 {
		for _, msg := range m.Data {
			dAtA[i] = 0xa
			i++
			i = encodeVarintAnchorReward(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Page != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintAnchorReward(dAtA, i, uint64(m.Page.Size()))
		n1, err := m.Page.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.ExpireCount != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintAnchorReward(dAtA, i, uint64(m.ExpireCount))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *AnchorTaskMyRewardResp_RewardObj) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AnchorTaskMyRewardResp_RewardObj) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintAnchorReward(dAtA, i, uint64(m.Id))
	}
	if m.RewardType != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintAnchorReward(dAtA, i, uint64(m.RewardType))
	}
	if m.Status != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintAnchorReward(dAtA, i, uint64(m.Status))
	}
	if m.RewardId != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintAnchorReward(dAtA, i, uint64(m.RewardId))
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintAnchorReward(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.Icon) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintAnchorReward(dAtA, i, uint64(len(m.Icon)))
		i += copy(dAtA[i:], m.Icon)
	}
	if len(m.AchieveTime) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintAnchorReward(dAtA, i, uint64(len(m.AchieveTime)))
		i += copy(dAtA[i:], m.AchieveTime)
	}
	if len(m.ExpireTime) > 0 {
		dAtA[i] = 0x42
		i++
		i = encodeVarintAnchorReward(dAtA, i, uint64(len(m.ExpireTime)))
		i += copy(dAtA[i:], m.ExpireTime)
	}
	if m.Source != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintAnchorReward(dAtA, i, uint64(m.Source))
	}
	if len(m.RewardIntro) > 0 {
		dAtA[i] = 0x52
		i++
		i = encodeVarintAnchorReward(dAtA, i, uint64(len(m.RewardIntro)))
		i += copy(dAtA[i:], m.RewardIntro)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *AnchorTaskMyRewardResp_Page) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AnchorTaskMyRewardResp_Page) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Page != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintAnchorReward(dAtA, i, uint64(m.Page))
	}
	if m.PageSize != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintAnchorReward(dAtA, i, uint64(m.PageSize))
	}
	if m.TotalPage != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintAnchorReward(dAtA, i, uint64(m.TotalPage))
	}
	if m.TotalCount != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintAnchorReward(dAtA, i, uint64(m.TotalCount))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *AnchorTaskUseRecordReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AnchorTaskUseRecordReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Page != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintAnchorReward(dAtA, i, uint64(m.Page))
	}
	if m.Uid != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintAnchorReward(dAtA, i, uint64(m.Uid))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *AnchorTaskUseRecordResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AnchorTaskUseRecordResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Data) > 0 {
		for _, msg := range m.Data {
			dAtA[i] = 0xa
			i++
			i = encodeVarintAnchorReward(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Page != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintAnchorReward(dAtA, i, uint64(m.Page.Size()))
		n2, err := m.Page.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *AnchorTaskUseRecordResp_RewardObj) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AnchorTaskUseRecordResp_RewardObj) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintAnchorReward(dAtA, i, uint64(m.Id))
	}
	if m.RewardId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintAnchorReward(dAtA, i, uint64(m.RewardId))
	}
	if m.Status != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintAnchorReward(dAtA, i, uint64(m.Status))
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintAnchorReward(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.Icon) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintAnchorReward(dAtA, i, uint64(len(m.Icon)))
		i += copy(dAtA[i:], m.Icon)
	}
	if len(m.AchieveTime) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintAnchorReward(dAtA, i, uint64(len(m.AchieveTime)))
		i += copy(dAtA[i:], m.AchieveTime)
	}
	if len(m.ExpireTime) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintAnchorReward(dAtA, i, uint64(len(m.ExpireTime)))
		i += copy(dAtA[i:], m.ExpireTime)
	}
	if m.Source != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintAnchorReward(dAtA, i, uint64(m.Source))
	}
	if len(m.RewardIntro) > 0 {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintAnchorReward(dAtA, i, uint64(len(m.RewardIntro)))
		i += copy(dAtA[i:], m.RewardIntro)
	}
	if len(m.UseTime) > 0 {
		dAtA[i] = 0x52
		i++
		i = encodeVarintAnchorReward(dAtA, i, uint64(len(m.UseTime)))
		i += copy(dAtA[i:], m.UseTime)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *AnchorTaskUseRecordResp_Page) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AnchorTaskUseRecordResp_Page) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Page != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintAnchorReward(dAtA, i, uint64(m.Page))
	}
	if m.PageSize != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintAnchorReward(dAtA, i, uint64(m.PageSize))
	}
	if m.TotalPage != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintAnchorReward(dAtA, i, uint64(m.TotalPage))
	}
	if m.TotalCount != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintAnchorReward(dAtA, i, uint64(m.TotalCount))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *AnchorTaskUseRewardReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AnchorTaskUseRewardReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintAnchorReward(dAtA, i, uint64(m.Id))
	}
	if m.Uid != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintAnchorReward(dAtA, i, uint64(m.Uid))
	}
	if len(m.UsePlat) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintAnchorReward(dAtA, i, uint64(len(m.UsePlat)))
		i += copy(dAtA[i:], m.UsePlat)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *AnchorTaskUseRewardResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AnchorTaskUseRewardResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Result != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintAnchorReward(dAtA, i, uint64(m.Result))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *AnchorTaskIsViewedReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AnchorTaskIsViewedReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Uid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintAnchorReward(dAtA, i, uint64(m.Uid))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *AnchorTaskIsViewedResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AnchorTaskIsViewedResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.TaskShouldNotice != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintAnchorReward(dAtA, i, uint64(m.TaskShouldNotice))
	}
	if m.RewardShouldNotice != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintAnchorReward(dAtA, i, uint64(m.RewardShouldNotice))
	}
	if m.TaskStatus != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintAnchorReward(dAtA, i, uint64(m.TaskStatus))
	}
	if m.IsBlacked != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintAnchorReward(dAtA, i, uint64(m.IsBlacked))
	}
	if m.ShowRewardEntry != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintAnchorReward(dAtA, i, uint64(m.ShowRewardEntry))
	}
	if len(m.Url) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintAnchorReward(dAtA, i, uint64(len(m.Url)))
		i += copy(dAtA[i:], m.Url)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintAnchorReward(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *AnchorTaskAddRewardReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RewardId != 0 {
		n += 1 + sovAnchorReward(uint64(m.RewardId))
	}
	if m.Roomid != 0 {
		n += 1 + sovAnchorReward(uint64(m.Roomid))
	}
	if m.Source != 0 {
		n += 1 + sovAnchorReward(uint64(m.Source))
	}
	if m.Uid != 0 {
		n += 1 + sovAnchorReward(uint64(m.Uid))
	}
	l = len(m.OrderId)
	if l > 0 {
		n += 1 + l + sovAnchorReward(uint64(l))
	}
	if m.Lifespan != 0 {
		n += 1 + sovAnchorReward(uint64(m.Lifespan))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AnchorTaskAddRewardResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Result != 0 {
		n += 1 + sovAnchorReward(uint64(m.Result))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AnchorTaskMyRewardReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Page != 0 {
		n += 1 + sovAnchorReward(uint64(m.Page))
	}
	if m.Uid != 0 {
		n += 1 + sovAnchorReward(uint64(m.Uid))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AnchorTaskMyRewardResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Data) > 0 {
		for _, e := range m.Data {
			l = e.Size()
			n += 1 + l + sovAnchorReward(uint64(l))
		}
	}
	if m.Page != nil {
		l = m.Page.Size()
		n += 1 + l + sovAnchorReward(uint64(l))
	}
	if m.ExpireCount != 0 {
		n += 1 + sovAnchorReward(uint64(m.ExpireCount))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AnchorTaskMyRewardResp_RewardObj) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovAnchorReward(uint64(m.Id))
	}
	if m.RewardType != 0 {
		n += 1 + sovAnchorReward(uint64(m.RewardType))
	}
	if m.Status != 0 {
		n += 1 + sovAnchorReward(uint64(m.Status))
	}
	if m.RewardId != 0 {
		n += 1 + sovAnchorReward(uint64(m.RewardId))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovAnchorReward(uint64(l))
	}
	l = len(m.Icon)
	if l > 0 {
		n += 1 + l + sovAnchorReward(uint64(l))
	}
	l = len(m.AchieveTime)
	if l > 0 {
		n += 1 + l + sovAnchorReward(uint64(l))
	}
	l = len(m.ExpireTime)
	if l > 0 {
		n += 1 + l + sovAnchorReward(uint64(l))
	}
	if m.Source != 0 {
		n += 1 + sovAnchorReward(uint64(m.Source))
	}
	l = len(m.RewardIntro)
	if l > 0 {
		n += 1 + l + sovAnchorReward(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AnchorTaskMyRewardResp_Page) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Page != 0 {
		n += 1 + sovAnchorReward(uint64(m.Page))
	}
	if m.PageSize != 0 {
		n += 1 + sovAnchorReward(uint64(m.PageSize))
	}
	if m.TotalPage != 0 {
		n += 1 + sovAnchorReward(uint64(m.TotalPage))
	}
	if m.TotalCount != 0 {
		n += 1 + sovAnchorReward(uint64(m.TotalCount))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AnchorTaskUseRecordReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Page != 0 {
		n += 1 + sovAnchorReward(uint64(m.Page))
	}
	if m.Uid != 0 {
		n += 1 + sovAnchorReward(uint64(m.Uid))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AnchorTaskUseRecordResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Data) > 0 {
		for _, e := range m.Data {
			l = e.Size()
			n += 1 + l + sovAnchorReward(uint64(l))
		}
	}
	if m.Page != nil {
		l = m.Page.Size()
		n += 1 + l + sovAnchorReward(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AnchorTaskUseRecordResp_RewardObj) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovAnchorReward(uint64(m.Id))
	}
	if m.RewardId != 0 {
		n += 1 + sovAnchorReward(uint64(m.RewardId))
	}
	if m.Status != 0 {
		n += 1 + sovAnchorReward(uint64(m.Status))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovAnchorReward(uint64(l))
	}
	l = len(m.Icon)
	if l > 0 {
		n += 1 + l + sovAnchorReward(uint64(l))
	}
	l = len(m.AchieveTime)
	if l > 0 {
		n += 1 + l + sovAnchorReward(uint64(l))
	}
	l = len(m.ExpireTime)
	if l > 0 {
		n += 1 + l + sovAnchorReward(uint64(l))
	}
	if m.Source != 0 {
		n += 1 + sovAnchorReward(uint64(m.Source))
	}
	l = len(m.RewardIntro)
	if l > 0 {
		n += 1 + l + sovAnchorReward(uint64(l))
	}
	l = len(m.UseTime)
	if l > 0 {
		n += 1 + l + sovAnchorReward(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AnchorTaskUseRecordResp_Page) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Page != 0 {
		n += 1 + sovAnchorReward(uint64(m.Page))
	}
	if m.PageSize != 0 {
		n += 1 + sovAnchorReward(uint64(m.PageSize))
	}
	if m.TotalPage != 0 {
		n += 1 + sovAnchorReward(uint64(m.TotalPage))
	}
	if m.TotalCount != 0 {
		n += 1 + sovAnchorReward(uint64(m.TotalCount))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AnchorTaskUseRewardReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovAnchorReward(uint64(m.Id))
	}
	if m.Uid != 0 {
		n += 1 + sovAnchorReward(uint64(m.Uid))
	}
	l = len(m.UsePlat)
	if l > 0 {
		n += 1 + l + sovAnchorReward(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AnchorTaskUseRewardResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Result != 0 {
		n += 1 + sovAnchorReward(uint64(m.Result))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AnchorTaskIsViewedReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Uid != 0 {
		n += 1 + sovAnchorReward(uint64(m.Uid))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AnchorTaskIsViewedResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TaskShouldNotice != 0 {
		n += 1 + sovAnchorReward(uint64(m.TaskShouldNotice))
	}
	if m.RewardShouldNotice != 0 {
		n += 1 + sovAnchorReward(uint64(m.RewardShouldNotice))
	}
	if m.TaskStatus != 0 {
		n += 1 + sovAnchorReward(uint64(m.TaskStatus))
	}
	if m.IsBlacked != 0 {
		n += 1 + sovAnchorReward(uint64(m.IsBlacked))
	}
	if m.ShowRewardEntry != 0 {
		n += 1 + sovAnchorReward(uint64(m.ShowRewardEntry))
	}
	l = len(m.Url)
	if l > 0 {
		n += 1 + l + sovAnchorReward(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovAnchorReward(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozAnchorReward(x uint64) (n int) {
	return sovAnchorReward(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *AnchorTaskAddRewardReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAnchorReward
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AnchorTaskAddRewardReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AnchorTaskAddRewardReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardId", wireType)
			}
			m.RewardId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAnchorReward
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RewardId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Roomid", wireType)
			}
			m.Roomid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAnchorReward
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Roomid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Source", wireType)
			}
			m.Source = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAnchorReward
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Source |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAnchorReward
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAnchorReward
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAnchorReward
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrderId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lifespan", wireType)
			}
			m.Lifespan = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAnchorReward
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Lifespan |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAnchorReward(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAnchorReward
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AnchorTaskAddRewardResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAnchorReward
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AnchorTaskAddRewardResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AnchorTaskAddRewardResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			m.Result = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAnchorReward
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Result |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAnchorReward(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAnchorReward
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AnchorTaskMyRewardReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAnchorReward
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AnchorTaskMyRewardReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AnchorTaskMyRewardReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Page", wireType)
			}
			m.Page = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAnchorReward
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Page |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAnchorReward
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAnchorReward(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAnchorReward
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AnchorTaskMyRewardResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAnchorReward
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AnchorTaskMyRewardResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AnchorTaskMyRewardResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAnchorReward
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAnchorReward
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data, &AnchorTaskMyRewardResp_RewardObj{})
			if err := m.Data[len(m.Data)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Page", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAnchorReward
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAnchorReward
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Page == nil {
				m.Page = &AnchorTaskMyRewardResp_Page{}
			}
			if err := m.Page.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpireCount", wireType)
			}
			m.ExpireCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAnchorReward
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExpireCount |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAnchorReward(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAnchorReward
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AnchorTaskMyRewardResp_RewardObj) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAnchorReward
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RewardObj: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RewardObj: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAnchorReward
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardType", wireType)
			}
			m.RewardType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAnchorReward
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RewardType |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAnchorReward
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardId", wireType)
			}
			m.RewardId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAnchorReward
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RewardId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAnchorReward
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAnchorReward
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Icon", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAnchorReward
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAnchorReward
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Icon = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AchieveTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAnchorReward
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAnchorReward
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AchieveTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpireTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAnchorReward
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAnchorReward
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExpireTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Source", wireType)
			}
			m.Source = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAnchorReward
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Source |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardIntro", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAnchorReward
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAnchorReward
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RewardIntro = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAnchorReward(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAnchorReward
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AnchorTaskMyRewardResp_Page) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAnchorReward
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Page: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Page: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Page", wireType)
			}
			m.Page = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAnchorReward
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Page |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageSize", wireType)
			}
			m.PageSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAnchorReward
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PageSize |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalPage", wireType)
			}
			m.TotalPage = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAnchorReward
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalPage |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalCount", wireType)
			}
			m.TotalCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAnchorReward
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalCount |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAnchorReward(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAnchorReward
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AnchorTaskUseRecordReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAnchorReward
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AnchorTaskUseRecordReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AnchorTaskUseRecordReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Page", wireType)
			}
			m.Page = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAnchorReward
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Page |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAnchorReward
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAnchorReward(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAnchorReward
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AnchorTaskUseRecordResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAnchorReward
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AnchorTaskUseRecordResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AnchorTaskUseRecordResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAnchorReward
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAnchorReward
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data, &AnchorTaskUseRecordResp_RewardObj{})
			if err := m.Data[len(m.Data)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Page", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAnchorReward
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAnchorReward
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Page == nil {
				m.Page = &AnchorTaskUseRecordResp_Page{}
			}
			if err := m.Page.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAnchorReward(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAnchorReward
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AnchorTaskUseRecordResp_RewardObj) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAnchorReward
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RewardObj: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RewardObj: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAnchorReward
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardId", wireType)
			}
			m.RewardId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAnchorReward
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RewardId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAnchorReward
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAnchorReward
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAnchorReward
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Icon", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAnchorReward
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAnchorReward
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Icon = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AchieveTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAnchorReward
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAnchorReward
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AchieveTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpireTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAnchorReward
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAnchorReward
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExpireTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Source", wireType)
			}
			m.Source = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAnchorReward
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Source |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardIntro", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAnchorReward
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAnchorReward
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RewardIntro = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UseTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAnchorReward
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAnchorReward
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UseTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAnchorReward(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAnchorReward
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AnchorTaskUseRecordResp_Page) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAnchorReward
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Page: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Page: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Page", wireType)
			}
			m.Page = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAnchorReward
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Page |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageSize", wireType)
			}
			m.PageSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAnchorReward
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PageSize |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalPage", wireType)
			}
			m.TotalPage = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAnchorReward
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalPage |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalCount", wireType)
			}
			m.TotalCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAnchorReward
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalCount |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAnchorReward(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAnchorReward
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AnchorTaskUseRewardReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAnchorReward
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AnchorTaskUseRewardReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AnchorTaskUseRewardReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAnchorReward
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAnchorReward
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UsePlat", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAnchorReward
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAnchorReward
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UsePlat = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAnchorReward(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAnchorReward
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AnchorTaskUseRewardResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAnchorReward
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AnchorTaskUseRewardResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AnchorTaskUseRewardResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			m.Result = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAnchorReward
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Result |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAnchorReward(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAnchorReward
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AnchorTaskIsViewedReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAnchorReward
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AnchorTaskIsViewedReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AnchorTaskIsViewedReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAnchorReward
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAnchorReward(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAnchorReward
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AnchorTaskIsViewedResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAnchorReward
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AnchorTaskIsViewedResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AnchorTaskIsViewedResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskShouldNotice", wireType)
			}
			m.TaskShouldNotice = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAnchorReward
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TaskShouldNotice |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardShouldNotice", wireType)
			}
			m.RewardShouldNotice = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAnchorReward
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RewardShouldNotice |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskStatus", wireType)
			}
			m.TaskStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAnchorReward
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TaskStatus |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsBlacked", wireType)
			}
			m.IsBlacked = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAnchorReward
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IsBlacked |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShowRewardEntry", wireType)
			}
			m.ShowRewardEntry = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAnchorReward
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ShowRewardEntry |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Url", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAnchorReward
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAnchorReward
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Url = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAnchorReward(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAnchorReward
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipAnchorReward(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowAnchorReward
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAnchorReward
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAnchorReward
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthAnchorReward
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowAnchorReward
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipAnchorReward(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthAnchorReward = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowAnchorReward   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("app/service/live/xrewardcenter/api/grpc/v1/AnchorReward.proto", fileDescriptor_AnchorReward_d2733c924ebe0ec6)
}

var fileDescriptor_AnchorReward_d2733c924ebe0ec6 = []byte{
	// 1039 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x56, 0x4f, 0x6f, 0x1b, 0x45,
	0x14, 0x97, 0xff, 0xd4, 0xf1, 0x3e, 0x47, 0x34, 0x8c, 0x68, 0x58, 0x5c, 0x25, 0x76, 0xb6, 0x45,
	0x44, 0xa8, 0xb1, 0xeb, 0x14, 0x09, 0x84, 0x14, 0x89, 0x1a, 0x15, 0x14, 0x41, 0xa1, 0xda, 0x06,
	0x0e, 0x5c, 0xac, 0xf1, 0xee, 0xc4, 0x9e, 0xc4, 0xde, 0xd9, 0xcc, 0xec, 0x3a, 0x4d, 0x3f, 0x06,
	0x27, 0xb8, 0xf3, 0x39, 0xb8, 0x21, 0x71, 0xe4, 0x13, 0x58, 0x28, 0xe2, 0x13, 0xf8, 0xc0, 0x19,
	0xcd, 0x9f, 0xb5, 0x77, 0x6b, 0x3b, 0xb1, 0x91, 0x10, 0xa7, 0x9d, 0x7d, 0x6f, 0x7e, 0xbf, 0x99,
	0xf7, 0xde, 0xef, 0xcd, 0x0c, 0x1c, 0xe1, 0x30, 0x6c, 0x0a, 0xc2, 0x47, 0xd4, 0x23, 0xcd, 0x01,
	0x1d, 0x91, 0xe6, 0x2b, 0x4e, 0x2e, 0x31, 0xf7, 0x3d, 0x12, 0x44, 0x84, 0x37, 0x71, 0x48, 0x9b,
	0x3d, 0x1e, 0x7a, 0xcd, 0x51, 0xab, 0xf9, 0x34, 0xf0, 0xfa, 0x8c, 0xbb, 0xca, 0xdd, 0x08, 0x39,
	0x8b, 0x18, 0xba, 0x27, 0x21, 0x8d, 0x0c, 0xa4, 0x31, 0x6a, 0x55, 0x0f, 0x7a, 0x34, 0xea, 0xc7,
	0xdd, 0x86, 0xc7, 0x86, 0xcd, 0x1e, 0xeb, 0xb1, 0xa6, 0x9a, 0xdd, 0x8d, 0x4f, 0xd5, 0x9f, 0xfa,
	0x51, 0x23, 0xcd, 0xe2, 0xfc, 0x5c, 0x80, 0x6d, 0x4d, 0x7e, 0x82, 0xc5, 0xf9, 0x53, 0xdf, 0xd7,
	0x6b, 0xb8, 0xe4, 0x02, 0x3d, 0x03, 0x4b, 0x93, 0x77, 0xa8, 0x6f, 0x17, 0xeb, 0xb9, 0xfd, 0x42,
	0x7b, 0x7f, 0x32, 0xae, 0x3d, 0x3c, 0x65, 0x7c, 0xf8, 0xa9, 0x33, 0x75, 0x39, 0xf5, 0x11, 0x1e,
	0x50, 0x1f, 0x47, 0x44, 0x1a, 0x2f, 0x62, 0xca, 0x89, 0xef, 0xb8, 0x65, 0xed, 0x3f, 0xf6, 0xd1,
	0x11, 0x94, 0x38, 0x63, 0x43, 0xea, 0xdb, 0x65, 0xc5, 0xf1, 0xfe, 0x64, 0x5c, 0xdb, 0x33, 0x1c,
	0xca, 0xbe, 0x98, 0xc0, 0x80, 0x24, 0x5c, 0xb0, 0x98, 0x7b, 0xc4, 0xb6, 0xde, 0x84, 0x6b, 0xfb,
	0x12, 0xb8, 0x76, 0xa2, 0x8f, 0xa0, 0x10, 0x53, 0xdf, 0x06, 0x85, 0x75, 0x26, 0xe3, 0xda, 0xae,
	0xc6, 0xc6, 0xcb, 0xd6, 0x95, 0xd3, 0x51, 0x1b, 0xca, 0x8c, 0xfb, 0x84, 0xcb, 0xc8, 0x2b, 0xf5,
	0xdc, 0xbe, 0xd5, 0xfe, 0x60, 0x32, 0xae, 0x3d, 0xd0, 0xd0, 0xc4, 0xb3, 0x18, 0xbf, 0xa1, 0xdc,
	0xc7, 0x3e, 0xfa, 0x0c, 0xca, 0x03, 0x7a, 0x4a, 0x44, 0x88, 0x03, 0x7b, 0x53, 0x2d, 0xff, 0x70,
	0x32, 0xae, 0xd5, 0x35, 0x47, 0xe2, 0x49, 0x73, 0x0c, 0x69, 0x70, 0xf4, 0xd8, 0x71, 0xa7, 0x28,
	0xa7, 0x05, 0xef, 0x2e, 0x2c, 0x8d, 0x08, 0xd1, 0x36, 0x94, 0x38, 0x11, 0xf1, 0x20, 0xb2, 0x73,
	0x92, 0xda, 0x35, 0x7f, 0x0e, 0x87, 0x7b, 0x33, 0xc8, 0xf3, 0xab, 0x59, 0x31, 0x1f, 0x40, 0x31,
	0xc4, 0x3d, 0xa2, 0xa7, 0xb7, 0xef, 0x4e, 0xc6, 0xb5, 0x8a, 0xde, 0x89, 0xb4, 0x3a, 0xae, 0x72,
	0x26, 0xc9, 0xca, 0xaf, 0x95, 0x2c, 0xe7, 0xaf, 0x62, 0x5a, 0x42, 0xb3, 0x45, 0x45, 0x88, 0xbe,
	0x82, 0xa2, 0x8f, 0x23, 0x6c, 0xe7, 0xea, 0x85, 0xfd, 0xca, 0xe1, 0xc7, 0x8d, 0x85, 0x92, 0x6d,
	0x2c, 0x06, 0x37, 0xf4, 0xf0, 0xdb, 0xee, 0x99, 0xab, 0x48, 0xd0, 0x17, 0x26, 0x04, 0xb9, 0xbd,
	0xca, 0xe1, 0xe1, 0x7a, 0x64, 0x2f, 0x70, 0x8f, 0x98, 0x28, 0xf7, 0x60, 0x93, 0xbc, 0x0a, 0x29,
	0x27, 0x1d, 0x8f, 0xc5, 0x41, 0x64, 0x17, 0x54, 0x06, 0x2b, 0xda, 0xf6, 0xb9, 0x34, 0x55, 0x7f,
	0xca, 0x83, 0x35, 0x5d, 0x1e, 0xbd, 0x05, 0x79, 0xea, 0x9b, 0x44, 0xe7, 0xa9, 0x8f, 0x6a, 0x50,
	0x31, 0xea, 0x8f, 0xae, 0x42, 0xbd, 0x9f, 0x82, 0x0b, 0xda, 0x74, 0x72, 0x15, 0x12, 0x59, 0x1d,
	0x11, 0xe1, 0x28, 0x16, 0x86, 0xdb, 0xfc, 0xa1, 0xfb, 0x73, 0x1d, 0x95, 0xea, 0x13, 0x04, 0xc5,
	0x00, 0x0f, 0x89, 0x7d, 0x47, 0xea, 0xcd, 0x55, 0x63, 0x69, 0xa3, 0x1e, 0x0b, 0xec, 0x92, 0xb6,
	0xc9, 0xb1, 0xdc, 0x3e, 0xf6, 0xfa, 0x94, 0x8c, 0x48, 0x27, 0xa2, 0x43, 0x62, 0x6f, 0x28, 0x5f,
	0xc5, 0xd8, 0x4e, 0xe8, 0x90, 0xc8, 0x0d, 0x9a, 0x08, 0xd5, 0x8c, 0xb2, 0x9a, 0x01, 0xda, 0xa4,
	0x26, 0x6c, 0x67, 0x9b, 0x6a, 0xda, 0x2d, 0x7b, 0xb0, 0x99, 0x6c, 0x30, 0x88, 0x38, 0x53, 0x6d,
	0x63, 0xb9, 0x26, 0xda, 0x63, 0x69, 0xaa, 0x5e, 0x42, 0x51, 0xe6, 0x52, 0x6e, 0x6d, 0x26, 0x28,
	0x93, 0xd9, 0xfb, 0x60, 0xc9, 0x6f, 0x47, 0xd0, 0xd7, 0x49, 0x5a, 0xca, 0xd2, 0xf0, 0x92, 0xbe,
	0x26, 0x68, 0x07, 0x20, 0x62, 0x11, 0x1e, 0x74, 0x14, 0x4c, 0x27, 0xc6, 0x52, 0x16, 0xc5, 0x57,
	0x83, 0x8a, 0x76, 0xeb, 0xa2, 0xe8, 0xec, 0x68, 0x84, 0xaa, 0x89, 0x23, 0xd2, 0x2a, 0xfb, 0x4e,
	0x10, 0x97, 0x78, 0xec, 0x3f, 0xd7, 0xf6, 0xaf, 0xc5, 0x74, 0x0f, 0xa6, 0x56, 0x15, 0x21, 0xfa,
	0x3a, 0x23, 0xee, 0x4f, 0x6e, 0xd5, 0x63, 0x06, 0x3d, 0xa7, 0xee, 0x2f, 0x33, 0xea, 0x7e, 0xb2,
	0x26, 0xdb, 0x4c, 0xde, 0xd5, 0x1f, 0x6f, 0xd4, 0x6e, 0x46, 0x82, 0xf9, 0x37, 0x24, 0xb8, 0x4c,
	0xb7, 0x89, 0x34, 0x8b, 0x0b, 0xa4, 0x79, 0xe7, 0x06, 0x69, 0x96, 0x6e, 0x95, 0xe6, 0xc6, 0x0d,
	0xd2, 0x2c, 0xdf, 0x28, 0x4d, 0x6b, 0x4e, 0x9a, 0xe8, 0x3d, 0x28, 0xc7, 0xc2, 0x10, 0x6b, 0xe5,
	0x6e, 0xc4, 0x42, 0xb1, 0xfe, 0x7f, 0xaa, 0xfd, 0x2d, 0x37, 0x27, 0xdb, 0xe4, 0x48, 0x6e, 0xcd,
	0x4a, 0xd3, 0xde, 0x9b, 0x8c, 0x6b, 0x3b, 0x5a, 0x90, 0xcb, 0xf4, 0x28, 0xab, 0xf7, 0xaf, 0x44,
	0x2c, 0x6f, 0x33, 0x99, 0x97, 0x70, 0x80, 0xf5, 0x61, 0x97, 0xb9, 0xcd, 0x12, 0xcf, 0x92, 0xdb,
	0x2c, 0x16, 0xe4, 0x85, 0xf4, 0xb6, 0xe6, 0xfa, 0xe0, 0xd6, 0xbb, 0xe8, 0x79, 0xfa, 0x2e, 0x3a,
	0x16, 0xdf, 0x53, 0x72, 0x49, 0x54, 0xe0, 0x26, 0x8a, 0xdc, 0x7a, 0xad, 0xf8, 0x77, 0x26, 0x93,
	0x33, 0x3e, 0x11, 0xa2, 0x47, 0x80, 0x22, 0x2c, 0xce, 0x3b, 0xa2, 0xcf, 0xe2, 0x81, 0xdf, 0x09,
	0x58, 0x44, 0xbd, 0xa4, 0xc6, 0x5b, 0xd2, 0xf3, 0x52, 0x39, 0xbe, 0x51, 0x76, 0xf4, 0x18, 0xde,
	0x31, 0x4a, 0xca, 0xce, 0xd7, 0xa5, 0x47, 0xda, 0x97, 0x41, 0xc8, 0x2a, 0x2b, 0xfe, 0x74, 0x73,
	0x80, 0x22, 0xd6, 0x0d, 0xb2, 0x03, 0x40, 0x45, 0xa7, 0x3b, 0xc0, 0xde, 0x39, 0x49, 0x4e, 0x76,
	0x8b, 0x8a, 0xb6, 0x36, 0xa0, 0x0f, 0xe1, 0x6d, 0xd1, 0x67, 0x97, 0x1d, 0xb3, 0x2c, 0x09, 0x22,
	0x7e, 0xa5, 0x1a, 0xa7, 0xe0, 0xde, 0x95, 0x0e, 0x9d, 0xcc, 0x67, 0xd2, 0x8c, 0xb6, 0xa0, 0x10,
	0xf3, 0x81, 0x69, 0x1d, 0x39, 0x3c, 0xfc, 0xa5, 0x08, 0x9b, 0xe9, 0xf7, 0x1f, 0xea, 0x41, 0x79,
	0x68, 0xee, 0x36, 0xf4, 0x68, 0x8d, 0x6b, 0xf0, 0xa2, 0x7a, 0xb0, 0xd6, 0xa5, 0x89, 0xce, 0xc0,
	0x8a, 0x93, 0x63, 0x06, 0x1d, 0xac, 0x73, 0x24, 0x5d, 0x54, 0x1b, 0xeb, 0x9d, 0x60, 0xd3, 0xb5,
	0x54, 0x54, 0x2b, 0xae, 0x95, 0x84, 0xd5, 0x58, 0x67, 0xba, 0x08, 0x65, 0x02, 0xa9, 0xd1, 0xcf,
	0x0a, 0x09, 0x4c, 0x49, 0x77, 0x85, 0x04, 0x66, 0x84, 0x79, 0x06, 0x16, 0x4e, 0xde, 0x6d, 0x2b,
	0x04, 0x95, 0x7e, 0x7e, 0xaf, 0x10, 0x54, 0xe6, 0x49, 0xd8, 0xde, 0xfa, 0xfd, 0x7a, 0x37, 0xf7,
	0xc7, 0xf5, 0x6e, 0xee, 0xcf, 0xeb, 0xdd, 0xdc, 0x0f, 0xf9, 0x51, 0xab, 0x5b, 0x52, 0x4f, 0xfc,
	0x27, 0xff, 0x04, 0x00, 0x00, 0xff, 0xff, 0xc1, 0x4a, 0x47, 0xa5, 0x69, 0x0c, 0x00, 0x00,
}
