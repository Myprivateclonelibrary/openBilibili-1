// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: v1/Achv.proto

package v1

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type AchvUserstatusReq struct {
}

func (m *AchvUserstatusReq) Reset()         { *m = AchvUserstatusReq{} }
func (m *AchvUserstatusReq) String() string { return proto.CompactTextString(m) }
func (*AchvUserstatusReq) ProtoMessage()    {}
func (*AchvUserstatusReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_Achv_f6f14f04d47f39df, []int{0}
}
func (m *AchvUserstatusReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AchvUserstatusReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AchvUserstatusReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *AchvUserstatusReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AchvUserstatusReq.Merge(dst, src)
}
func (m *AchvUserstatusReq) XXX_Size() int {
	return m.Size()
}
func (m *AchvUserstatusReq) XXX_DiscardUnknown() {
	xxx_messageInfo_AchvUserstatusReq.DiscardUnknown(m)
}

var xxx_messageInfo_AchvUserstatusReq proto.InternalMessageInfo

type AchvUserstatusResp struct {
	//
	Code int64 `protobuf:"varint,1,opt,name=code,proto3" json:"code"`
	//
	Msg string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg"`
	//
	Message string `protobuf:"bytes,3,opt,name=message,proto3" json:"message"`
	//
	Data *AchvUserstatusResp_Data `protobuf:"bytes,4,opt,name=data" json:"data"`
}

func (m *AchvUserstatusResp) Reset()         { *m = AchvUserstatusResp{} }
func (m *AchvUserstatusResp) String() string { return proto.CompactTextString(m) }
func (*AchvUserstatusResp) ProtoMessage()    {}
func (*AchvUserstatusResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_Achv_f6f14f04d47f39df, []int{1}
}
func (m *AchvUserstatusResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AchvUserstatusResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AchvUserstatusResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *AchvUserstatusResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AchvUserstatusResp.Merge(dst, src)
}
func (m *AchvUserstatusResp) XXX_Size() int {
	return m.Size()
}
func (m *AchvUserstatusResp) XXX_DiscardUnknown() {
	xxx_messageInfo_AchvUserstatusResp.DiscardUnknown(m)
}

var xxx_messageInfo_AchvUserstatusResp proto.InternalMessageInfo

func (m *AchvUserstatusResp) GetCode() int64 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *AchvUserstatusResp) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func (m *AchvUserstatusResp) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *AchvUserstatusResp) GetData() *AchvUserstatusResp_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

type AchvUserstatusResp_Data struct {
	// 已经领取的
	Point int64 `protobuf:"varint,1,opt,name=point,proto3" json:"point"`
	// 已经完成
	Complete int64 `protobuf:"varint,2,opt,name=complete,proto3" json:"complete"`
	// 完成但未领取
	UnreceivedNormal int64 `protobuf:"varint,3,opt,name=unreceived_normal,json=unreceivedNormal,proto3" json:"unreceived_normal"`
}

func (m *AchvUserstatusResp_Data) Reset()         { *m = AchvUserstatusResp_Data{} }
func (m *AchvUserstatusResp_Data) String() string { return proto.CompactTextString(m) }
func (*AchvUserstatusResp_Data) ProtoMessage()    {}
func (*AchvUserstatusResp_Data) Descriptor() ([]byte, []int) {
	return fileDescriptor_Achv_f6f14f04d47f39df, []int{1, 0}
}
func (m *AchvUserstatusResp_Data) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AchvUserstatusResp_Data) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AchvUserstatusResp_Data.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *AchvUserstatusResp_Data) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AchvUserstatusResp_Data.Merge(dst, src)
}
func (m *AchvUserstatusResp_Data) XXX_Size() int {
	return m.Size()
}
func (m *AchvUserstatusResp_Data) XXX_DiscardUnknown() {
	xxx_messageInfo_AchvUserstatusResp_Data.DiscardUnknown(m)
}

var xxx_messageInfo_AchvUserstatusResp_Data proto.InternalMessageInfo

func (m *AchvUserstatusResp_Data) GetPoint() int64 {
	if m != nil {
		return m.Point
	}
	return 0
}

func (m *AchvUserstatusResp_Data) GetComplete() int64 {
	if m != nil {
		return m.Complete
	}
	return 0
}

func (m *AchvUserstatusResp_Data) GetUnreceivedNormal() int64 {
	if m != nil {
		return m.UnreceivedNormal
	}
	return 0
}

func init() {
	proto.RegisterType((*AchvUserstatusReq)(nil), "rc.v1.AchvUserstatusReq")
	proto.RegisterType((*AchvUserstatusResp)(nil), "rc.v1.AchvUserstatusResp")
	proto.RegisterType((*AchvUserstatusResp_Data)(nil), "rc.v1.AchvUserstatusResp.Data")
}
func (m *AchvUserstatusReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AchvUserstatusReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *AchvUserstatusResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AchvUserstatusResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintAchv(dAtA, i, uint64(m.Code))
	}
	if len(m.Msg) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintAchv(dAtA, i, uint64(len(m.Msg)))
		i += copy(dAtA[i:], m.Msg)
	}
	if len(m.Message) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintAchv(dAtA, i, uint64(len(m.Message)))
		i += copy(dAtA[i:], m.Message)
	}
	if m.Data != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintAchv(dAtA, i, uint64(m.Data.Size()))
		n1, err := m.Data.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	return i, nil
}

func (m *AchvUserstatusResp_Data) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AchvUserstatusResp_Data) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Point != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintAchv(dAtA, i, uint64(m.Point))
	}
	if m.Complete != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintAchv(dAtA, i, uint64(m.Complete))
	}
	if m.UnreceivedNormal != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintAchv(dAtA, i, uint64(m.UnreceivedNormal))
	}
	return i, nil
}

func encodeVarintAchv(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *AchvUserstatusReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *AchvUserstatusResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovAchv(uint64(m.Code))
	}
	l = len(m.Msg)
	if l > 0 {
		n += 1 + l + sovAchv(uint64(l))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovAchv(uint64(l))
	}
	if m.Data != nil {
		l = m.Data.Size()
		n += 1 + l + sovAchv(uint64(l))
	}
	return n
}

func (m *AchvUserstatusResp_Data) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Point != 0 {
		n += 1 + sovAchv(uint64(m.Point))
	}
	if m.Complete != 0 {
		n += 1 + sovAchv(uint64(m.Complete))
	}
	if m.UnreceivedNormal != 0 {
		n += 1 + sovAchv(uint64(m.UnreceivedNormal))
	}
	return n
}

func sovAchv(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozAchv(x uint64) (n int) {
	return sovAchv(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *AchvUserstatusReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAchv
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AchvUserstatusReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AchvUserstatusReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipAchv(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAchv
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AchvUserstatusResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAchv
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AchvUserstatusResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AchvUserstatusResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAchv
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAchv
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAchv
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAchv
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAchv
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAchv
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAchv
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = &AchvUserstatusResp_Data{}
			}
			if err := m.Data.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAchv(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAchv
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AchvUserstatusResp_Data) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAchv
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Data: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Data: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Point", wireType)
			}
			m.Point = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAchv
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Point |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Complete", wireType)
			}
			m.Complete = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAchv
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Complete |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnreceivedNormal", wireType)
			}
			m.UnreceivedNormal = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAchv
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UnreceivedNormal |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAchv(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAchv
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipAchv(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowAchv
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAchv
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAchv
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthAchv
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowAchv
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipAchv(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthAchv = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowAchv   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("v1/Achv.proto", fileDescriptor_Achv_f6f14f04d47f39df) }

var fileDescriptor_Achv_f6f14f04d47f39df = []byte{
	// 351 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x91, 0xcf, 0x6a, 0xf2, 0x40,
	0x14, 0xc5, 0x1d, 0x13, 0x3f, 0xf5, 0xfa, 0x15, 0xea, 0x94, 0x42, 0x14, 0xc9, 0x88, 0x50, 0xc8,
	0xa6, 0x11, 0xed, 0xb6, 0x1b, 0x43, 0x37, 0xdd, 0x74, 0x31, 0xd0, 0x4d, 0x37, 0x65, 0x8c, 0xd3,
	0x28, 0x18, 0x27, 0x66, 0x26, 0x79, 0x8e, 0x6e, 0xfa, 0x4e, 0xa5, 0x2b, 0x97, 0x5d, 0x85, 0xa2,
	0xbb, 0x3c, 0x45, 0xc9, 0xa4, 0x5a, 0xa8, 0xb8, 0xb9, 0x73, 0xcf, 0x39, 0xf3, 0xe7, 0xfe, 0x18,
	0x38, 0x4b, 0x47, 0xc3, 0x89, 0x3f, 0x4f, 0xdd, 0x28, 0x16, 0x4a, 0xe0, 0x5a, 0xec, 0xbb, 0xe9,
	0xa8, 0x7b, 0x1d, 0x2c, 0xd4, 0x3c, 0x99, 0xba, 0xbe, 0x08, 0x87, 0x81, 0x08, 0xc4, 0x50, 0xa7,
	0xd3, 0xe4, 0x45, 0x2b, 0x2d, 0x74, 0x57, 0x9e, 0x1a, 0x5c, 0x40, 0xbb, 0xb8, 0xe3, 0x51, 0xf2,
	0x58, 0x2a, 0xa6, 0x12, 0x49, 0xf9, 0x7a, 0xf0, 0x51, 0x05, 0xfc, 0xd7, 0x95, 0x11, 0xee, 0x81,
	0xe9, 0x8b, 0x19, 0xb7, 0x50, 0x1f, 0x39, 0x86, 0xd7, 0xc8, 0x33, 0xa2, 0x35, 0xd5, 0x15, 0x77,
	0xc0, 0x08, 0x65, 0x60, 0x55, 0xfb, 0xc8, 0x69, 0x7a, 0xf5, 0x3c, 0x23, 0x85, 0xa4, 0x45, 0xc1,
	0x57, 0x50, 0x0f, 0xb9, 0x94, 0x2c, 0xe0, 0x96, 0xa1, 0xe3, 0x56, 0x9e, 0x91, 0xbd, 0x45, 0xf7,
	0x0d, 0xbe, 0x05, 0x73, 0xc6, 0x14, 0xb3, 0xcc, 0x3e, 0x72, 0x5a, 0x63, 0xdb, 0xd5, 0x40, 0xee,
	0xf1, 0x20, 0xee, 0x1d, 0x53, 0xac, 0x7c, 0xbf, 0xd8, 0x4f, 0x75, 0xed, 0xbe, 0x21, 0x30, 0x8b,
	0x00, 0x13, 0xa8, 0x45, 0x62, 0xb1, 0x52, 0x3f, 0x73, 0x36, 0xf3, 0x8c, 0x94, 0x06, 0x2d, 0x17,
	0xec, 0x40, 0xc3, 0x17, 0x61, 0xb4, 0xe4, 0x8a, 0xeb, 0x71, 0x0d, 0xef, 0x7f, 0x9e, 0x91, 0x83,
	0x47, 0x0f, 0x1d, 0xf6, 0xa0, 0x9d, 0xac, 0x62, 0xee, 0xf3, 0x45, 0xca, 0x67, 0xcf, 0x2b, 0x11,
	0x87, 0x6c, 0xa9, 0x11, 0x0c, 0xef, 0x32, 0xcf, 0xc8, 0x71, 0x48, 0xcf, 0x7f, 0xad, 0x07, 0xed,
	0x8c, 0xef, 0xc1, 0x2c, 0x10, 0xf0, 0x04, 0x20, 0x39, 0x60, 0x60, 0xeb, 0x04, 0xdd, 0xba, 0xdb,
	0x39, 0xc9, 0xed, 0xf5, 0xde, 0xb7, 0x36, 0xda, 0x6c, 0x6d, 0xf4, 0xb5, 0xb5, 0xd1, 0xeb, 0xce,
	0xae, 0x6c, 0x76, 0x76, 0xe5, 0x73, 0x67, 0x57, 0x9e, 0xaa, 0xe9, 0x68, 0xfa, 0x4f, 0xff, 0xe8,
	0xcd, 0x77, 0x00, 0x00, 0x00, 0xff, 0xff, 0x09, 0x64, 0xdf, 0xf8, 0x18, 0x02, 0x00, 0x00,
}
