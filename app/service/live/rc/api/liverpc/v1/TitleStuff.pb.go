// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: v1/TitleStuff.proto

package v1

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type TitleStuffAddReq struct {
	// UID
	Uid int64 `protobuf:"varint,1,opt,name=uid,proto3" json:"uid"`
	// 原石id
	Sid int64 `protobuf:"varint,2,opt,name=sid,proto3" json:"sid"`
	// 原石数量
	Num int64 `protobuf:"varint,3,opt,name=num,proto3" json:"num"`
}

func (m *TitleStuffAddReq) Reset()         { *m = TitleStuffAddReq{} }
func (m *TitleStuffAddReq) String() string { return proto.CompactTextString(m) }
func (*TitleStuffAddReq) ProtoMessage()    {}
func (*TitleStuffAddReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_TitleStuff_c6a97f7480779908, []int{0}
}
func (m *TitleStuffAddReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TitleStuffAddReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TitleStuffAddReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *TitleStuffAddReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TitleStuffAddReq.Merge(dst, src)
}
func (m *TitleStuffAddReq) XXX_Size() int {
	return m.Size()
}
func (m *TitleStuffAddReq) XXX_DiscardUnknown() {
	xxx_messageInfo_TitleStuffAddReq.DiscardUnknown(m)
}

var xxx_messageInfo_TitleStuffAddReq proto.InternalMessageInfo

func (m *TitleStuffAddReq) GetUid() int64 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *TitleStuffAddReq) GetSid() int64 {
	if m != nil {
		return m.Sid
	}
	return 0
}

func (m *TitleStuffAddReq) GetNum() int64 {
	if m != nil {
		return m.Num
	}
	return 0
}

type TitleStuffAddResp struct {
	// code
	Code int64 `protobuf:"varint,1,opt,name=code,proto3" json:"code"`
	// msg
	Msg string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg"`
	//
	Data *TitleStuffAddResp_Data `protobuf:"bytes,3,opt,name=data" json:"data"`
}

func (m *TitleStuffAddResp) Reset()         { *m = TitleStuffAddResp{} }
func (m *TitleStuffAddResp) String() string { return proto.CompactTextString(m) }
func (*TitleStuffAddResp) ProtoMessage()    {}
func (*TitleStuffAddResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_TitleStuff_c6a97f7480779908, []int{1}
}
func (m *TitleStuffAddResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TitleStuffAddResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TitleStuffAddResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *TitleStuffAddResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TitleStuffAddResp.Merge(dst, src)
}
func (m *TitleStuffAddResp) XXX_Size() int {
	return m.Size()
}
func (m *TitleStuffAddResp) XXX_DiscardUnknown() {
	xxx_messageInfo_TitleStuffAddResp.DiscardUnknown(m)
}

var xxx_messageInfo_TitleStuffAddResp proto.InternalMessageInfo

func (m *TitleStuffAddResp) GetCode() int64 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *TitleStuffAddResp) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func (m *TitleStuffAddResp) GetData() *TitleStuffAddResp_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

type TitleStuffAddResp_Data struct {
}

func (m *TitleStuffAddResp_Data) Reset()         { *m = TitleStuffAddResp_Data{} }
func (m *TitleStuffAddResp_Data) String() string { return proto.CompactTextString(m) }
func (*TitleStuffAddResp_Data) ProtoMessage()    {}
func (*TitleStuffAddResp_Data) Descriptor() ([]byte, []int) {
	return fileDescriptor_TitleStuff_c6a97f7480779908, []int{1, 0}
}
func (m *TitleStuffAddResp_Data) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TitleStuffAddResp_Data) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TitleStuffAddResp_Data.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *TitleStuffAddResp_Data) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TitleStuffAddResp_Data.Merge(dst, src)
}
func (m *TitleStuffAddResp_Data) XXX_Size() int {
	return m.Size()
}
func (m *TitleStuffAddResp_Data) XXX_DiscardUnknown() {
	xxx_messageInfo_TitleStuffAddResp_Data.DiscardUnknown(m)
}

var xxx_messageInfo_TitleStuffAddResp_Data proto.InternalMessageInfo

func init() {
	proto.RegisterType((*TitleStuffAddReq)(nil), "rc.v1.TitleStuffAddReq")
	proto.RegisterType((*TitleStuffAddResp)(nil), "rc.v1.TitleStuffAddResp")
	proto.RegisterType((*TitleStuffAddResp_Data)(nil), "rc.v1.TitleStuffAddResp.Data")
}
func (m *TitleStuffAddReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TitleStuffAddReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Uid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTitleStuff(dAtA, i, uint64(m.Uid))
	}
	if m.Sid != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTitleStuff(dAtA, i, uint64(m.Sid))
	}
	if m.Num != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintTitleStuff(dAtA, i, uint64(m.Num))
	}
	return i, nil
}

func (m *TitleStuffAddResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TitleStuffAddResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTitleStuff(dAtA, i, uint64(m.Code))
	}
	if len(m.Msg) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTitleStuff(dAtA, i, uint64(len(m.Msg)))
		i += copy(dAtA[i:], m.Msg)
	}
	if m.Data != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTitleStuff(dAtA, i, uint64(m.Data.Size()))
		n1, err := m.Data.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	return i, nil
}

func (m *TitleStuffAddResp_Data) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TitleStuffAddResp_Data) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func encodeVarintTitleStuff(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *TitleStuffAddReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Uid != 0 {
		n += 1 + sovTitleStuff(uint64(m.Uid))
	}
	if m.Sid != 0 {
		n += 1 + sovTitleStuff(uint64(m.Sid))
	}
	if m.Num != 0 {
		n += 1 + sovTitleStuff(uint64(m.Num))
	}
	return n
}

func (m *TitleStuffAddResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovTitleStuff(uint64(m.Code))
	}
	l = len(m.Msg)
	if l > 0 {
		n += 1 + l + sovTitleStuff(uint64(l))
	}
	if m.Data != nil {
		l = m.Data.Size()
		n += 1 + l + sovTitleStuff(uint64(l))
	}
	return n
}

func (m *TitleStuffAddResp_Data) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovTitleStuff(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozTitleStuff(x uint64) (n int) {
	return sovTitleStuff(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *TitleStuffAddReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTitleStuff
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TitleStuffAddReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TitleStuffAddReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTitleStuff
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sid", wireType)
			}
			m.Sid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTitleStuff
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Num", wireType)
			}
			m.Num = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTitleStuff
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Num |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTitleStuff(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTitleStuff
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TitleStuffAddResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTitleStuff
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TitleStuffAddResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TitleStuffAddResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTitleStuff
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTitleStuff
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTitleStuff
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTitleStuff
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTitleStuff
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = &TitleStuffAddResp_Data{}
			}
			if err := m.Data.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTitleStuff(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTitleStuff
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TitleStuffAddResp_Data) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTitleStuff
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Data: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Data: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTitleStuff(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTitleStuff
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTitleStuff(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTitleStuff
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTitleStuff
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTitleStuff
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthTitleStuff
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowTitleStuff
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipTitleStuff(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthTitleStuff = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTitleStuff   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("v1/TitleStuff.proto", fileDescriptor_TitleStuff_c6a97f7480779908) }

var fileDescriptor_TitleStuff_c6a97f7480779908 = []byte{
	// 285 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x2e, 0x33, 0xd4, 0x0f,
	0xc9, 0x2c, 0xc9, 0x49, 0x0d, 0x2e, 0x29, 0x4d, 0x4b, 0xd3, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17,
	0x62, 0x2d, 0x4a, 0xd6, 0x2b, 0x33, 0x94, 0xd2, 0x4d, 0xcf, 0x2c, 0xc9, 0x28, 0x4d, 0xd2, 0x4b,
	0xce, 0xcf, 0xd5, 0x4f, 0xcf, 0x4f, 0xcf, 0xd7, 0x07, 0xcb, 0x26, 0x95, 0xa6, 0x81, 0x79, 0x60,
	0x0e, 0x98, 0x05, 0xd1, 0xa5, 0x94, 0xcc, 0x25, 0x80, 0x30, 0xc9, 0x31, 0x25, 0x25, 0x28, 0xb5,
	0x50, 0x48, 0x92, 0x8b, 0xb9, 0x34, 0x33, 0x45, 0x82, 0x51, 0x81, 0x51, 0x83, 0xd9, 0x89, 0xfd,
	0xd5, 0x3d, 0x79, 0x10, 0x37, 0x08, 0x44, 0x80, 0xa4, 0x8a, 0x33, 0x53, 0x24, 0x98, 0x10, 0x52,
	0xc5, 0x20, 0xa9, 0x62, 0x88, 0x54, 0x5e, 0x69, 0xae, 0x04, 0x33, 0x42, 0x2a, 0xaf, 0x34, 0x37,
	0x08, 0x44, 0x28, 0x4d, 0x64, 0xe4, 0x12, 0x44, 0xb3, 0xa5, 0xb8, 0x40, 0x48, 0x86, 0x8b, 0x25,
	0x39, 0x3f, 0x25, 0x15, 0x6a, 0x0f, 0xc7, 0xab, 0x7b, 0xf2, 0x60, 0x7e, 0x10, 0x98, 0x04, 0x19,
	0x97, 0x5b, 0x9c, 0x0e, 0xb6, 0x89, 0x13, 0x62, 0x5c, 0x6e, 0x71, 0x7a, 0x10, 0x88, 0x10, 0xb2,
	0xe6, 0x62, 0x49, 0x49, 0x2c, 0x49, 0x04, 0x5b, 0xc5, 0x6d, 0x24, 0xab, 0x07, 0xf6, 0xb8, 0x1e,
	0x86, 0x05, 0x7a, 0x2e, 0x89, 0x25, 0x89, 0x10, 0x73, 0x41, 0xca, 0x83, 0xc0, 0xa4, 0x14, 0x1b,
	0x17, 0x0b, 0x48, 0xdc, 0xc8, 0x8d, 0x8b, 0x0b, 0xa1, 0x43, 0xc8, 0x82, 0x8b, 0x39, 0x31, 0x25,
	0x45, 0x48, 0x1c, 0xbb, 0x59, 0x85, 0x52, 0x12, 0xb8, 0x2c, 0x71, 0x92, 0x39, 0xf1, 0x48, 0x8e,
	0xf1, 0xc2, 0x23, 0x39, 0xc6, 0x07, 0x8f, 0xe4, 0x18, 0x27, 0x3c, 0x96, 0x63, 0xb8, 0xf0, 0x58,
	0x8e, 0xe1, 0xc6, 0x63, 0x39, 0x86, 0x28, 0xa6, 0x32, 0xc3, 0x24, 0x36, 0x70, 0x28, 0x1b, 0x03,
	0x02, 0x00, 0x00, 0xff, 0xff, 0xe1, 0x61, 0x02, 0x28, 0xb2, 0x01, 0x00, 0x00,
}
