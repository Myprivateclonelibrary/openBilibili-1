// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: api/grpc/v1/livecheck.proto

package v1

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// LiveCheck 移动端请求接口
type LiveCheckReq struct {
	// 平台
	Platform string `protobuf:"bytes,1,opt,name=platform,proto3" json:"platform,omitempty" form:"platform" validate:"required"`
	// 操作系统
	System string `protobuf:"bytes,2,opt,name=system,proto3" json:"system,omitempty" form:"system" validate:"required"`
	// 设备
	Mobile               string   `protobuf:"bytes,3,opt,name=mobile,proto3" json:"mobile,omitempty" form:"mobile" validate:"required"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LiveCheckReq) Reset()         { *m = LiveCheckReq{} }
func (m *LiveCheckReq) String() string { return proto.CompactTextString(m) }
func (*LiveCheckReq) ProtoMessage()    {}
func (*LiveCheckReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_livecheck_926d699b974ee39d, []int{0}
}
func (m *LiveCheckReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LiveCheckReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LiveCheckReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *LiveCheckReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LiveCheckReq.Merge(dst, src)
}
func (m *LiveCheckReq) XXX_Size() int {
	return m.Size()
}
func (m *LiveCheckReq) XXX_DiscardUnknown() {
	xxx_messageInfo_LiveCheckReq.DiscardUnknown(m)
}

var xxx_messageInfo_LiveCheckReq proto.InternalMessageInfo

func (m *LiveCheckReq) GetPlatform() string {
	if m != nil {
		return m.Platform
	}
	return ""
}

func (m *LiveCheckReq) GetSystem() string {
	if m != nil {
		return m.System
	}
	return ""
}

func (m *LiveCheckReq) GetMobile() string {
	if m != nil {
		return m.Mobile
	}
	return ""
}

type LiveCheckResp struct {
	IsLive               int64    `protobuf:"varint,1,opt,name=is_live,json=isLive,proto3" json:"is_live"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LiveCheckResp) Reset()         { *m = LiveCheckResp{} }
func (m *LiveCheckResp) String() string { return proto.CompactTextString(m) }
func (*LiveCheckResp) ProtoMessage()    {}
func (*LiveCheckResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_livecheck_926d699b974ee39d, []int{1}
}
func (m *LiveCheckResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LiveCheckResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LiveCheckResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *LiveCheckResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LiveCheckResp.Merge(dst, src)
}
func (m *LiveCheckResp) XXX_Size() int {
	return m.Size()
}
func (m *LiveCheckResp) XXX_DiscardUnknown() {
	xxx_messageInfo_LiveCheckResp.DiscardUnknown(m)
}

var xxx_messageInfo_LiveCheckResp proto.InternalMessageInfo

func (m *LiveCheckResp) GetIsLive() int64 {
	if m != nil {
		return m.IsLive
	}
	return 0
}

// 提供给后台查询开播设备黑名单
type GetLiveCheckListReq struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetLiveCheckListReq) Reset()         { *m = GetLiveCheckListReq{} }
func (m *GetLiveCheckListReq) String() string { return proto.CompactTextString(m) }
func (*GetLiveCheckListReq) ProtoMessage()    {}
func (*GetLiveCheckListReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_livecheck_926d699b974ee39d, []int{2}
}
func (m *GetLiveCheckListReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetLiveCheckListReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetLiveCheckListReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *GetLiveCheckListReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetLiveCheckListReq.Merge(dst, src)
}
func (m *GetLiveCheckListReq) XXX_Size() int {
	return m.Size()
}
func (m *GetLiveCheckListReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GetLiveCheckListReq.DiscardUnknown(m)
}

var xxx_messageInfo_GetLiveCheckListReq proto.InternalMessageInfo

type GetLiveCheckListResp struct {
	// android
	Android []*GetLiveCheckListResp_Platform `protobuf:"bytes,1,rep,name=android" json:"android"`
	// ios
	Ios                  []*GetLiveCheckListResp_Platform `protobuf:"bytes,2,rep,name=ios" json:"ios"`
	XXX_NoUnkeyedLiteral struct{}                         `json:"-"`
	XXX_unrecognized     []byte                           `json:"-"`
	XXX_sizecache        int32                            `json:"-"`
}

func (m *GetLiveCheckListResp) Reset()         { *m = GetLiveCheckListResp{} }
func (m *GetLiveCheckListResp) String() string { return proto.CompactTextString(m) }
func (*GetLiveCheckListResp) ProtoMessage()    {}
func (*GetLiveCheckListResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_livecheck_926d699b974ee39d, []int{3}
}
func (m *GetLiveCheckListResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetLiveCheckListResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetLiveCheckListResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *GetLiveCheckListResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetLiveCheckListResp.Merge(dst, src)
}
func (m *GetLiveCheckListResp) XXX_Size() int {
	return m.Size()
}
func (m *GetLiveCheckListResp) XXX_DiscardUnknown() {
	xxx_messageInfo_GetLiveCheckListResp.DiscardUnknown(m)
}

var xxx_messageInfo_GetLiveCheckListResp proto.InternalMessageInfo

func (m *GetLiveCheckListResp) GetAndroid() []*GetLiveCheckListResp_Platform {
	if m != nil {
		return m.Android
	}
	return nil
}

func (m *GetLiveCheckListResp) GetIos() []*GetLiveCheckListResp_Platform {
	if m != nil {
		return m.Ios
	}
	return nil
}

type GetLiveCheckListResp_Platform struct {
	// os
	System string `protobuf:"bytes,1,opt,name=system,proto3" json:"system"`
	// device
	Mobile               []string `protobuf:"bytes,2,rep,name=mobile" json:"mobile"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetLiveCheckListResp_Platform) Reset()         { *m = GetLiveCheckListResp_Platform{} }
func (m *GetLiveCheckListResp_Platform) String() string { return proto.CompactTextString(m) }
func (*GetLiveCheckListResp_Platform) ProtoMessage()    {}
func (*GetLiveCheckListResp_Platform) Descriptor() ([]byte, []int) {
	return fileDescriptor_livecheck_926d699b974ee39d, []int{3, 0}
}
func (m *GetLiveCheckListResp_Platform) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetLiveCheckListResp_Platform) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetLiveCheckListResp_Platform.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *GetLiveCheckListResp_Platform) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetLiveCheckListResp_Platform.Merge(dst, src)
}
func (m *GetLiveCheckListResp_Platform) XXX_Size() int {
	return m.Size()
}
func (m *GetLiveCheckListResp_Platform) XXX_DiscardUnknown() {
	xxx_messageInfo_GetLiveCheckListResp_Platform.DiscardUnknown(m)
}

var xxx_messageInfo_GetLiveCheckListResp_Platform proto.InternalMessageInfo

func (m *GetLiveCheckListResp_Platform) GetSystem() string {
	if m != nil {
		return m.System
	}
	return ""
}

func (m *GetLiveCheckListResp_Platform) GetMobile() []string {
	if m != nil {
		return m.Mobile
	}
	return nil
}

// 提供给后台新增live_check添加黑名单
type AddLiveCheckReq struct {
	LiveCheck            string   `protobuf:"bytes,1,opt,name=live_check,json=liveCheck,proto3" json:"live_check,omitempty" form:"live_check" validate:"required"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AddLiveCheckReq) Reset()         { *m = AddLiveCheckReq{} }
func (m *AddLiveCheckReq) String() string { return proto.CompactTextString(m) }
func (*AddLiveCheckReq) ProtoMessage()    {}
func (*AddLiveCheckReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_livecheck_926d699b974ee39d, []int{4}
}
func (m *AddLiveCheckReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddLiveCheckReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AddLiveCheckReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *AddLiveCheckReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddLiveCheckReq.Merge(dst, src)
}
func (m *AddLiveCheckReq) XXX_Size() int {
	return m.Size()
}
func (m *AddLiveCheckReq) XXX_DiscardUnknown() {
	xxx_messageInfo_AddLiveCheckReq.DiscardUnknown(m)
}

var xxx_messageInfo_AddLiveCheckReq proto.InternalMessageInfo

func (m *AddLiveCheckReq) GetLiveCheck() string {
	if m != nil {
		return m.LiveCheck
	}
	return ""
}

type AddLiveCheckResp struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AddLiveCheckResp) Reset()         { *m = AddLiveCheckResp{} }
func (m *AddLiveCheckResp) String() string { return proto.CompactTextString(m) }
func (*AddLiveCheckResp) ProtoMessage()    {}
func (*AddLiveCheckResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_livecheck_926d699b974ee39d, []int{5}
}
func (m *AddLiveCheckResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddLiveCheckResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AddLiveCheckResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *AddLiveCheckResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddLiveCheckResp.Merge(dst, src)
}
func (m *AddLiveCheckResp) XXX_Size() int {
	return m.Size()
}
func (m *AddLiveCheckResp) XXX_DiscardUnknown() {
	xxx_messageInfo_AddLiveCheckResp.DiscardUnknown(m)
}

var xxx_messageInfo_AddLiveCheckResp proto.InternalMessageInfo

func init() {
	proto.RegisterType((*LiveCheckReq)(nil), "live.resource.v1.LiveCheckReq")
	proto.RegisterType((*LiveCheckResp)(nil), "live.resource.v1.LiveCheckResp")
	proto.RegisterType((*GetLiveCheckListReq)(nil), "live.resource.v1.GetLiveCheckListReq")
	proto.RegisterType((*GetLiveCheckListResp)(nil), "live.resource.v1.GetLiveCheckListResp")
	proto.RegisterType((*GetLiveCheckListResp_Platform)(nil), "live.resource.v1.GetLiveCheckListResp.Platform")
	proto.RegisterType((*AddLiveCheckReq)(nil), "live.resource.v1.AddLiveCheckReq")
	proto.RegisterType((*AddLiveCheckResp)(nil), "live.resource.v1.AddLiveCheckResp")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// LiveCheckClient is the client API for LiveCheck service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type LiveCheckClient interface {
	// 客户端获取能否直播接口
	LiveCheck(ctx context.Context, in *LiveCheckReq, opts ...grpc.CallOption) (*LiveCheckResp, error)
	// 后台查询所有配置设备黑名单
	GetLiveCheckList(ctx context.Context, in *GetLiveCheckListReq, opts ...grpc.CallOption) (*GetLiveCheckListResp, error)
	// 后台添加能否直播设备黑名单
	AddLiveCheck(ctx context.Context, in *AddLiveCheckReq, opts ...grpc.CallOption) (*AddLiveCheckResp, error)
}

type liveCheckClient struct {
	cc *grpc.ClientConn
}

func NewLiveCheckClient(cc *grpc.ClientConn) LiveCheckClient {
	return &liveCheckClient{cc}
}

func (c *liveCheckClient) LiveCheck(ctx context.Context, in *LiveCheckReq, opts ...grpc.CallOption) (*LiveCheckResp, error) {
	out := new(LiveCheckResp)
	err := c.cc.Invoke(ctx, "/live.resource.v1.LiveCheck/LiveCheck", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *liveCheckClient) GetLiveCheckList(ctx context.Context, in *GetLiveCheckListReq, opts ...grpc.CallOption) (*GetLiveCheckListResp, error) {
	out := new(GetLiveCheckListResp)
	err := c.cc.Invoke(ctx, "/live.resource.v1.LiveCheck/GetLiveCheckList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *liveCheckClient) AddLiveCheck(ctx context.Context, in *AddLiveCheckReq, opts ...grpc.CallOption) (*AddLiveCheckResp, error) {
	out := new(AddLiveCheckResp)
	err := c.cc.Invoke(ctx, "/live.resource.v1.LiveCheck/AddLiveCheck", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LiveCheckServer is the server API for LiveCheck service.
type LiveCheckServer interface {
	// 客户端获取能否直播接口
	LiveCheck(context.Context, *LiveCheckReq) (*LiveCheckResp, error)
	// 后台查询所有配置设备黑名单
	GetLiveCheckList(context.Context, *GetLiveCheckListReq) (*GetLiveCheckListResp, error)
	// 后台添加能否直播设备黑名单
	AddLiveCheck(context.Context, *AddLiveCheckReq) (*AddLiveCheckResp, error)
}

func RegisterLiveCheckServer(s *grpc.Server, srv LiveCheckServer) {
	s.RegisterService(&_LiveCheck_serviceDesc, srv)
}

func _LiveCheck_LiveCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LiveCheckReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LiveCheckServer).LiveCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/live.resource.v1.LiveCheck/LiveCheck",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LiveCheckServer).LiveCheck(ctx, req.(*LiveCheckReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _LiveCheck_GetLiveCheckList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLiveCheckListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LiveCheckServer).GetLiveCheckList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/live.resource.v1.LiveCheck/GetLiveCheckList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LiveCheckServer).GetLiveCheckList(ctx, req.(*GetLiveCheckListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _LiveCheck_AddLiveCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddLiveCheckReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LiveCheckServer).AddLiveCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/live.resource.v1.LiveCheck/AddLiveCheck",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LiveCheckServer).AddLiveCheck(ctx, req.(*AddLiveCheckReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _LiveCheck_serviceDesc = grpc.ServiceDesc{
	ServiceName: "live.resource.v1.LiveCheck",
	HandlerType: (*LiveCheckServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "LiveCheck",
			Handler:    _LiveCheck_LiveCheck_Handler,
		},
		{
			MethodName: "GetLiveCheckList",
			Handler:    _LiveCheck_GetLiveCheckList_Handler,
		},
		{
			MethodName: "AddLiveCheck",
			Handler:    _LiveCheck_AddLiveCheck_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/grpc/v1/livecheck.proto",
}

func (m *LiveCheckReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LiveCheckReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Platform) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintLivecheck(dAtA, i, uint64(len(m.Platform)))
		i += copy(dAtA[i:], m.Platform)
	}
	if len(m.System) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintLivecheck(dAtA, i, uint64(len(m.System)))
		i += copy(dAtA[i:], m.System)
	}
	if len(m.Mobile) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintLivecheck(dAtA, i, uint64(len(m.Mobile)))
		i += copy(dAtA[i:], m.Mobile)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *LiveCheckResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LiveCheckResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.IsLive != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintLivecheck(dAtA, i, uint64(m.IsLive))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GetLiveCheckListReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetLiveCheckListReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GetLiveCheckListResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetLiveCheckListResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Android) > 0 {
		for _, msg := range m.Android {
			dAtA[i] = 0xa
			i++
			i = encodeVarintLivecheck(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Ios) > 0 {
		for _, msg := range m.Ios {
			dAtA[i] = 0x12
			i++
			i = encodeVarintLivecheck(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GetLiveCheckListResp_Platform) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetLiveCheckListResp_Platform) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.System) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintLivecheck(dAtA, i, uint64(len(m.System)))
		i += copy(dAtA[i:], m.System)
	}
	if len(m.Mobile) > 0 {
		for _, s := range m.Mobile {
			dAtA[i] = 0x12
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *AddLiveCheckReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddLiveCheckReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.LiveCheck) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintLivecheck(dAtA, i, uint64(len(m.LiveCheck)))
		i += copy(dAtA[i:], m.LiveCheck)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *AddLiveCheckResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddLiveCheckResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintLivecheck(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *LiveCheckReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Platform)
	if l > 0 {
		n += 1 + l + sovLivecheck(uint64(l))
	}
	l = len(m.System)
	if l > 0 {
		n += 1 + l + sovLivecheck(uint64(l))
	}
	l = len(m.Mobile)
	if l > 0 {
		n += 1 + l + sovLivecheck(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *LiveCheckResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IsLive != 0 {
		n += 1 + sovLivecheck(uint64(m.IsLive))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetLiveCheckListReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetLiveCheckListResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Android) > 0 {
		for _, e := range m.Android {
			l = e.Size()
			n += 1 + l + sovLivecheck(uint64(l))
		}
	}
	if len(m.Ios) > 0 {
		for _, e := range m.Ios {
			l = e.Size()
			n += 1 + l + sovLivecheck(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetLiveCheckListResp_Platform) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.System)
	if l > 0 {
		n += 1 + l + sovLivecheck(uint64(l))
	}
	if len(m.Mobile) > 0 {
		for _, s := range m.Mobile {
			l = len(s)
			n += 1 + l + sovLivecheck(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AddLiveCheckReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.LiveCheck)
	if l > 0 {
		n += 1 + l + sovLivecheck(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AddLiveCheckResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovLivecheck(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozLivecheck(x uint64) (n int) {
	return sovLivecheck(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *LiveCheckReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLivecheck
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LiveCheckReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LiveCheckReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Platform", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLivecheck
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLivecheck
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Platform = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field System", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLivecheck
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLivecheck
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.System = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mobile", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLivecheck
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLivecheck
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Mobile = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLivecheck(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLivecheck
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LiveCheckResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLivecheck
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LiveCheckResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LiveCheckResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsLive", wireType)
			}
			m.IsLive = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLivecheck
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IsLive |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLivecheck(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLivecheck
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetLiveCheckListReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLivecheck
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetLiveCheckListReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetLiveCheckListReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipLivecheck(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLivecheck
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetLiveCheckListResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLivecheck
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetLiveCheckListResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetLiveCheckListResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Android", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLivecheck
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLivecheck
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Android = append(m.Android, &GetLiveCheckListResp_Platform{})
			if err := m.Android[len(m.Android)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ios", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLivecheck
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLivecheck
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ios = append(m.Ios, &GetLiveCheckListResp_Platform{})
			if err := m.Ios[len(m.Ios)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLivecheck(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLivecheck
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetLiveCheckListResp_Platform) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLivecheck
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Platform: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Platform: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field System", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLivecheck
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLivecheck
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.System = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mobile", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLivecheck
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLivecheck
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Mobile = append(m.Mobile, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLivecheck(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLivecheck
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddLiveCheckReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLivecheck
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddLiveCheckReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddLiveCheckReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LiveCheck", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLivecheck
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLivecheck
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LiveCheck = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLivecheck(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLivecheck
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddLiveCheckResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLivecheck
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddLiveCheckResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddLiveCheckResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipLivecheck(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthLivecheck
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipLivecheck(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowLivecheck
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLivecheck
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLivecheck
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthLivecheck
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowLivecheck
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipLivecheck(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthLivecheck = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowLivecheck   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("api/grpc/v1/livecheck.proto", fileDescriptor_livecheck_926d699b974ee39d)
}

var fileDescriptor_livecheck_926d699b974ee39d = []byte{
	// 477 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x53, 0x41, 0x8b, 0xd3, 0x40,
	0x14, 0x26, 0x29, 0xb4, 0xdb, 0xb7, 0x2b, 0x96, 0x51, 0x21, 0x44, 0x68, 0xba, 0xa3, 0xd5, 0xf5,
	0x60, 0x42, 0x57, 0xbc, 0x2c, 0x78, 0xb0, 0x7b, 0x50, 0xa4, 0x07, 0x09, 0xe8, 0x41, 0x0f, 0x4b,
	0x9a, 0xcc, 0x76, 0x07, 0x53, 0x67, 0x3a, 0x93, 0x06, 0xfc, 0x13, 0x5e, 0xfc, 0x53, 0x1e, 0xf5,
	0x0f, 0x04, 0xe9, 0xb1, 0xc7, 0xfe, 0x02, 0x99, 0x99, 0x24, 0x76, 0xdb, 0xaa, 0x65, 0x2f, 0x65,
	0xde, 0xf7, 0xde, 0xf7, 0x75, 0xde, 0xf7, 0x4d, 0xe0, 0x7e, 0xc4, 0x69, 0x30, 0x11, 0x3c, 0x0e,
	0xf2, 0x41, 0x90, 0xd2, 0x9c, 0xc4, 0x57, 0x24, 0xfe, 0xe4, 0x73, 0xc1, 0x32, 0x86, 0x3a, 0x0a,
	0xf0, 0x05, 0x91, 0x6c, 0x2e, 0x62, 0xe2, 0xe7, 0x03, 0xf7, 0xe9, 0x84, 0x66, 0x57, 0xf3, 0xb1,
	0x1f, 0xb3, 0x69, 0x30, 0x61, 0x13, 0x16, 0xe8, 0xc1, 0xf1, 0xfc, 0x52, 0x57, 0xba, 0xd0, 0x27,
	0x23, 0x80, 0x7f, 0x5a, 0x70, 0x34, 0xa2, 0x39, 0x39, 0x57, 0xa2, 0x21, 0x99, 0xa1, 0x73, 0x38,
	0xe0, 0x69, 0x94, 0x5d, 0x32, 0x31, 0x75, 0xac, 0x9e, 0x75, 0xd2, 0x1e, 0x3e, 0x5e, 0x15, 0xde,
	0x03, 0x55, 0x9f, 0xe1, 0xaa, 0x83, 0x7b, 0x79, 0x94, 0xd2, 0x24, 0xca, 0xc8, 0x19, 0x16, 0x64,
	0x36, 0xa7, 0x82, 0x24, 0x38, 0xac, 0x89, 0xe8, 0x05, 0x34, 0xe5, 0x17, 0x99, 0x91, 0xa9, 0x63,
	0x6b, 0x89, 0xfe, 0xaa, 0xf0, 0x8e, 0x8d, 0x84, 0xc1, 0x77, 0x0b, 0x94, 0x24, 0x45, 0x9f, 0xb2,
	0x31, 0x4d, 0x89, 0xd3, 0xd8, 0xa4, 0x1b, 0xfc, 0x2f, 0xf4, 0xb2, 0xf9, 0x1c, 0x6e, 0xad, 0xad,
	0x24, 0x39, 0x7a, 0x08, 0x2d, 0x2a, 0x2f, 0x94, 0x55, 0x7a, 0xa5, 0xc6, 0xf0, 0x70, 0x59, 0x78,
	0x15, 0x14, 0x36, 0xa9, 0x54, 0xe3, 0xf8, 0x1e, 0xdc, 0x79, 0x45, 0xb2, 0x9a, 0x39, 0xa2, 0x32,
	0x0b, 0xc9, 0x0c, 0x7f, 0xb5, 0xe1, 0xee, 0x36, 0x2e, 0x39, 0x7a, 0x0f, 0xad, 0xe8, 0x73, 0x22,
	0x18, 0x4d, 0x1c, 0xab, 0xd7, 0x38, 0x39, 0x3c, 0x0d, 0xfc, 0xcd, 0x34, 0xfc, 0x5d, 0x44, 0xff,
	0x6d, 0x69, 0x93, 0xb9, 0x46, 0xa9, 0x11, 0x56, 0x07, 0xf4, 0x06, 0x1a, 0x94, 0x49, 0xc7, 0xbe,
	0x99, 0x66, 0x6b, 0x59, 0x78, 0x8a, 0x1f, 0xaa, 0x1f, 0x37, 0x84, 0x83, 0xaa, 0x83, 0x70, 0x1d,
	0x8a, 0xc9, 0x15, 0x96, 0x85, 0x57, 0x22, 0xb5, 0xf3, 0xb8, 0x76, 0x5e, 0xfd, 0x7d, 0x39, 0x63,
	0x90, 0xda, 0xde, 0x8f, 0x70, 0xfb, 0x65, 0x92, 0x5c, 0x7b, 0x34, 0xaf, 0x01, 0xd4, 0x35, 0x2f,
	0xf4, 0xd3, 0x2c, 0xe5, 0x9f, 0xac, 0x0a, 0xaf, 0x6f, 0x42, 0xfb, 0xd3, 0xdb, 0x1d, 0x5c, 0x3b,
	0xad, 0xc4, 0x30, 0x82, 0xce, 0x75, 0x71, 0xc9, 0x4f, 0xbf, 0xd9, 0xd0, 0xae, 0x11, 0x34, 0x5a,
	0x2f, 0xba, 0xdb, 0xf6, 0xac, 0x5f, 0xcc, 0xf5, 0xfe, 0xd9, 0x97, 0x1c, 0x45, 0xd0, 0xd9, 0xf4,
	0x13, 0xf5, 0xf7, 0xf1, 0x7c, 0xe6, 0x3e, 0xda, 0x2f, 0x1a, 0xf4, 0x0e, 0x8e, 0xd6, 0x57, 0x42,
	0xc7, 0xdb, 0xbc, 0x0d, 0x3f, 0x5d, 0xfc, 0xbf, 0x11, 0xc9, 0x87, 0x9d, 0xef, 0x8b, 0xae, 0xf5,
	0x63, 0xd1, 0xb5, 0x7e, 0x2d, 0xba, 0xd6, 0x07, 0x3b, 0x1f, 0x8c, 0x9b, 0xfa, 0x93, 0x7e, 0xf6,
	0x3b, 0x00, 0x00, 0xff, 0xff, 0x46, 0x71, 0xad, 0x98, 0x32, 0x04, 0x00, 0x00,
}
