// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: api/grpc/v1/titans.proto

package v1

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type GetConfigReq struct {
	// team
	Team int64 `protobuf:"varint,1,opt,name=team,proto3" json:"team,omitempty" form:"team"`
	// 索引名称
	Keyword string `protobuf:"bytes,2,opt,name=keyword,proto3" json:"keyword,omitempty" form:"keyword"`
	// id
	Id                   int64    `protobuf:"varint,3,opt,name=id,proto3" json:"id,omitempty" form:"id"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetConfigReq) Reset()         { *m = GetConfigReq{} }
func (m *GetConfigReq) String() string { return proto.CompactTextString(m) }
func (*GetConfigReq) ProtoMessage()    {}
func (*GetConfigReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_titans_dfea6aed93e768d7, []int{0}
}
func (m *GetConfigReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetConfigReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetConfigReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *GetConfigReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetConfigReq.Merge(dst, src)
}
func (m *GetConfigReq) XXX_Size() int {
	return m.Size()
}
func (m *GetConfigReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GetConfigReq.DiscardUnknown(m)
}

var xxx_messageInfo_GetConfigReq proto.InternalMessageInfo

func (m *GetConfigReq) GetTeam() int64 {
	if m != nil {
		return m.Team
	}
	return 0
}

func (m *GetConfigReq) GetKeyword() string {
	if m != nil {
		return m.Keyword
	}
	return ""
}

func (m *GetConfigReq) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type GetConfigResp struct {
	// team
	Team int64 `protobuf:"varint,1,opt,name=team,proto3" json:"team"`
	// 索引名称
	Keyword string `protobuf:"bytes,2,opt,name=keyword,proto3" json:"keyword"`
	// 配置值
	Value string `protobuf:"bytes,3,opt,name=value,proto3" json:"value"`
	// 配置解释
	Name string `protobuf:"bytes,4,opt,name=name,proto3" json:"name"`
	// 创建时间
	Ctime string `protobuf:"bytes,5,opt,name=ctime,proto3" json:"ctime"`
	// 最近更新时间
	Mtime string `protobuf:"bytes,6,opt,name=mtime,proto3" json:"mtime"`
	// 状态
	Status int64 `protobuf:"varint,7,opt,name=status,proto3" json:"status"`
	// 状态
	Id                   int64    `protobuf:"varint,8,opt,name=id,proto3" json:"id"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetConfigResp) Reset()         { *m = GetConfigResp{} }
func (m *GetConfigResp) String() string { return proto.CompactTextString(m) }
func (*GetConfigResp) ProtoMessage()    {}
func (*GetConfigResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_titans_dfea6aed93e768d7, []int{1}
}
func (m *GetConfigResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetConfigResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetConfigResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *GetConfigResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetConfigResp.Merge(dst, src)
}
func (m *GetConfigResp) XXX_Size() int {
	return m.Size()
}
func (m *GetConfigResp) XXX_DiscardUnknown() {
	xxx_messageInfo_GetConfigResp.DiscardUnknown(m)
}

var xxx_messageInfo_GetConfigResp proto.InternalMessageInfo

func (m *GetConfigResp) GetTeam() int64 {
	if m != nil {
		return m.Team
	}
	return 0
}

func (m *GetConfigResp) GetKeyword() string {
	if m != nil {
		return m.Keyword
	}
	return ""
}

func (m *GetConfigResp) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func (m *GetConfigResp) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *GetConfigResp) GetCtime() string {
	if m != nil {
		return m.Ctime
	}
	return ""
}

func (m *GetConfigResp) GetMtime() string {
	if m != nil {
		return m.Mtime
	}
	return ""
}

func (m *GetConfigResp) GetStatus() int64 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *GetConfigResp) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type SetConfigReq struct {
	// team
	Team int64 `protobuf:"varint,1,opt,name=team,proto3" json:"team,omitempty" form:"team"`
	// 索引名称
	Keyword string `protobuf:"bytes,2,opt,name=keyword,proto3" json:"keyword,omitempty" form:"keyword" validate:"required"`
	// 配置值
	Value string `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty" form:"value" validate:"required"`
	// 配置解释
	Name string `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty" form:"name"`
	// 编辑时id
	Id int64 `protobuf:"varint,5,opt,name=id,proto3" json:"id,omitempty" form:"id"`
	// 记录状态 新增时默认为0
	Status               int64    `protobuf:"varint,6,opt,name=status,proto3" json:"status,omitempty" form:"status"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SetConfigReq) Reset()         { *m = SetConfigReq{} }
func (m *SetConfigReq) String() string { return proto.CompactTextString(m) }
func (*SetConfigReq) ProtoMessage()    {}
func (*SetConfigReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_titans_dfea6aed93e768d7, []int{2}
}
func (m *SetConfigReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SetConfigReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SetConfigReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *SetConfigReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetConfigReq.Merge(dst, src)
}
func (m *SetConfigReq) XXX_Size() int {
	return m.Size()
}
func (m *SetConfigReq) XXX_DiscardUnknown() {
	xxx_messageInfo_SetConfigReq.DiscardUnknown(m)
}

var xxx_messageInfo_SetConfigReq proto.InternalMessageInfo

func (m *SetConfigReq) GetTeam() int64 {
	if m != nil {
		return m.Team
	}
	return 0
}

func (m *SetConfigReq) GetKeyword() string {
	if m != nil {
		return m.Keyword
	}
	return ""
}

func (m *SetConfigReq) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func (m *SetConfigReq) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *SetConfigReq) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *SetConfigReq) GetStatus() int64 {
	if m != nil {
		return m.Status
	}
	return 0
}

type SetConfigResp struct {
	Id                   int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SetConfigResp) Reset()         { *m = SetConfigResp{} }
func (m *SetConfigResp) String() string { return proto.CompactTextString(m) }
func (*SetConfigResp) ProtoMessage()    {}
func (*SetConfigResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_titans_dfea6aed93e768d7, []int{3}
}
func (m *SetConfigResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SetConfigResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SetConfigResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *SetConfigResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetConfigResp.Merge(dst, src)
}
func (m *SetConfigResp) XXX_Size() int {
	return m.Size()
}
func (m *SetConfigResp) XXX_DiscardUnknown() {
	xxx_messageInfo_SetConfigResp.DiscardUnknown(m)
}

var xxx_messageInfo_SetConfigResp proto.InternalMessageInfo

func (m *SetConfigResp) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type ParamsConfigReq struct {
	Team    int64  `protobuf:"varint,1,opt,name=team,proto3" json:"team,omitempty" form:"team"`
	Keyword string `protobuf:"bytes,2,opt,name=keyword,proto3" json:"keyword,omitempty" form:"keyword"`
	Name    string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty" form:"name"`
	Status  int64  `protobuf:"varint,4,opt,name=status,proto3" json:"status,omitempty" form:"status"`
	Page    int64  `protobuf:"varint,5,opt,name=page,proto3" json:"page,omitempty" form:"page" validate:"required"`
	// 页量
	PageSize int64 `protobuf:"varint,6,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty" form:"page_size" validate:"required"`
	// id
	Id                   int64    `protobuf:"varint,7,opt,name=id,proto3" json:"id,omitempty" form:"id"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ParamsConfigReq) Reset()         { *m = ParamsConfigReq{} }
func (m *ParamsConfigReq) String() string { return proto.CompactTextString(m) }
func (*ParamsConfigReq) ProtoMessage()    {}
func (*ParamsConfigReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_titans_dfea6aed93e768d7, []int{4}
}
func (m *ParamsConfigReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ParamsConfigReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ParamsConfigReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ParamsConfigReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ParamsConfigReq.Merge(dst, src)
}
func (m *ParamsConfigReq) XXX_Size() int {
	return m.Size()
}
func (m *ParamsConfigReq) XXX_DiscardUnknown() {
	xxx_messageInfo_ParamsConfigReq.DiscardUnknown(m)
}

var xxx_messageInfo_ParamsConfigReq proto.InternalMessageInfo

func (m *ParamsConfigReq) GetTeam() int64 {
	if m != nil {
		return m.Team
	}
	return 0
}

func (m *ParamsConfigReq) GetKeyword() string {
	if m != nil {
		return m.Keyword
	}
	return ""
}

func (m *ParamsConfigReq) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ParamsConfigReq) GetStatus() int64 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *ParamsConfigReq) GetPage() int64 {
	if m != nil {
		return m.Page
	}
	return 0
}

func (m *ParamsConfigReq) GetPageSize() int64 {
	if m != nil {
		return m.PageSize
	}
	return 0
}

func (m *ParamsConfigReq) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type ParamsConfigResp struct {
	// 数据列表
	List []*List `protobuf:"bytes,1,rep,name=list" json:"list"`
	// 记录总数
	TotalNum             int64    `protobuf:"varint,2,opt,name=total_num,json=totalNum,proto3" json:"total_num"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ParamsConfigResp) Reset()         { *m = ParamsConfigResp{} }
func (m *ParamsConfigResp) String() string { return proto.CompactTextString(m) }
func (*ParamsConfigResp) ProtoMessage()    {}
func (*ParamsConfigResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_titans_dfea6aed93e768d7, []int{5}
}
func (m *ParamsConfigResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ParamsConfigResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ParamsConfigResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ParamsConfigResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ParamsConfigResp.Merge(dst, src)
}
func (m *ParamsConfigResp) XXX_Size() int {
	return m.Size()
}
func (m *ParamsConfigResp) XXX_DiscardUnknown() {
	xxx_messageInfo_ParamsConfigResp.DiscardUnknown(m)
}

var xxx_messageInfo_ParamsConfigResp proto.InternalMessageInfo

func (m *ParamsConfigResp) GetList() []*List {
	if m != nil {
		return m.List
	}
	return nil
}

func (m *ParamsConfigResp) GetTotalNum() int64 {
	if m != nil {
		return m.TotalNum
	}
	return 0
}

type List struct {
	// Id
	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id"`
	// team
	Team int64 `protobuf:"varint,2,opt,name=team,proto3" json:"team"`
	// 索引名称
	Keyword string `protobuf:"bytes,3,opt,name=keyword,proto3" json:"keyword"`
	// 配置值
	Value string `protobuf:"bytes,4,opt,name=value,proto3" json:"value"`
	// 配置解释
	Name string `protobuf:"bytes,5,opt,name=name,proto3" json:"name"`
	// 创建时间
	Ctime string `protobuf:"bytes,6,opt,name=ctime,proto3" json:"ctime"`
	// 最近更新时间
	Mtime string `protobuf:"bytes,7,opt,name=mtime,proto3" json:"mtime"`
	// 状态
	Status               int64    `protobuf:"varint,8,opt,name=status,proto3" json:"status"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *List) Reset()         { *m = List{} }
func (m *List) String() string { return proto.CompactTextString(m) }
func (*List) ProtoMessage()    {}
func (*List) Descriptor() ([]byte, []int) {
	return fileDescriptor_titans_dfea6aed93e768d7, []int{6}
}
func (m *List) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *List) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_List.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *List) XXX_Merge(src proto.Message) {
	xxx_messageInfo_List.Merge(dst, src)
}
func (m *List) XXX_Size() int {
	return m.Size()
}
func (m *List) XXX_DiscardUnknown() {
	xxx_messageInfo_List.DiscardUnknown(m)
}

var xxx_messageInfo_List proto.InternalMessageInfo

func (m *List) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *List) GetTeam() int64 {
	if m != nil {
		return m.Team
	}
	return 0
}

func (m *List) GetKeyword() string {
	if m != nil {
		return m.Keyword
	}
	return ""
}

func (m *List) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func (m *List) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *List) GetCtime() string {
	if m != nil {
		return m.Ctime
	}
	return ""
}

func (m *List) GetMtime() string {
	if m != nil {
		return m.Mtime
	}
	return ""
}

func (m *List) GetStatus() int64 {
	if m != nil {
		return m.Status
	}
	return 0
}

type LikesConfigReq struct {
	Params               []string `protobuf:"bytes,1,rep,name=params" json:"params,omitempty" form:"params" validate:"required"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LikesConfigReq) Reset()         { *m = LikesConfigReq{} }
func (m *LikesConfigReq) String() string { return proto.CompactTextString(m) }
func (*LikesConfigReq) ProtoMessage()    {}
func (*LikesConfigReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_titans_dfea6aed93e768d7, []int{7}
}
func (m *LikesConfigReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LikesConfigReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LikesConfigReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *LikesConfigReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LikesConfigReq.Merge(dst, src)
}
func (m *LikesConfigReq) XXX_Size() int {
	return m.Size()
}
func (m *LikesConfigReq) XXX_DiscardUnknown() {
	xxx_messageInfo_LikesConfigReq.DiscardUnknown(m)
}

var xxx_messageInfo_LikesConfigReq proto.InternalMessageInfo

func (m *LikesConfigReq) GetParams() []string {
	if m != nil {
		return m.Params
	}
	return nil
}

type LikesConfigResp struct {
	List                 map[int64]*Child `protobuf:"bytes,1,rep,name=list" json:"list" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *LikesConfigResp) Reset()         { *m = LikesConfigResp{} }
func (m *LikesConfigResp) String() string { return proto.CompactTextString(m) }
func (*LikesConfigResp) ProtoMessage()    {}
func (*LikesConfigResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_titans_dfea6aed93e768d7, []int{8}
}
func (m *LikesConfigResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LikesConfigResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LikesConfigResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *LikesConfigResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LikesConfigResp.Merge(dst, src)
}
func (m *LikesConfigResp) XXX_Size() int {
	return m.Size()
}
func (m *LikesConfigResp) XXX_DiscardUnknown() {
	xxx_messageInfo_LikesConfigResp.DiscardUnknown(m)
}

var xxx_messageInfo_LikesConfigResp proto.InternalMessageInfo

func (m *LikesConfigResp) GetList() map[int64]*Child {
	if m != nil {
		return m.List
	}
	return nil
}

type Child struct {
	Keys                 map[string]string `protobuf:"bytes,1,rep,name=keys" json:"keys" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *Child) Reset()         { *m = Child{} }
func (m *Child) String() string { return proto.CompactTextString(m) }
func (*Child) ProtoMessage()    {}
func (*Child) Descriptor() ([]byte, []int) {
	return fileDescriptor_titans_dfea6aed93e768d7, []int{9}
}
func (m *Child) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Child) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Child.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Child) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Child.Merge(dst, src)
}
func (m *Child) XXX_Size() int {
	return m.Size()
}
func (m *Child) XXX_DiscardUnknown() {
	xxx_messageInfo_Child.DiscardUnknown(m)
}

var xxx_messageInfo_Child proto.InternalMessageInfo

func (m *Child) GetKeys() map[string]string {
	if m != nil {
		return m.Keys
	}
	return nil
}

type TreeIdReq struct {
	TreeId               int64    `protobuf:"varint,1,opt,name=tree_id,json=treeId,proto3" json:"tree_id,omitempty" form:"tree_id" validate:"required"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TreeIdReq) Reset()         { *m = TreeIdReq{} }
func (m *TreeIdReq) String() string { return proto.CompactTextString(m) }
func (*TreeIdReq) ProtoMessage()    {}
func (*TreeIdReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_titans_dfea6aed93e768d7, []int{10}
}
func (m *TreeIdReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TreeIdReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TreeIdReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *TreeIdReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TreeIdReq.Merge(dst, src)
}
func (m *TreeIdReq) XXX_Size() int {
	return m.Size()
}
func (m *TreeIdReq) XXX_DiscardUnknown() {
	xxx_messageInfo_TreeIdReq.DiscardUnknown(m)
}

var xxx_messageInfo_TreeIdReq proto.InternalMessageInfo

func (m *TreeIdReq) GetTreeId() int64 {
	if m != nil {
		return m.TreeId
	}
	return 0
}

type TreeIdResp struct {
	List                 map[string]string `protobuf:"bytes,1,rep,name=list" json:"list" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *TreeIdResp) Reset()         { *m = TreeIdResp{} }
func (m *TreeIdResp) String() string { return proto.CompactTextString(m) }
func (*TreeIdResp) ProtoMessage()    {}
func (*TreeIdResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_titans_dfea6aed93e768d7, []int{11}
}
func (m *TreeIdResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TreeIdResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TreeIdResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *TreeIdResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TreeIdResp.Merge(dst, src)
}
func (m *TreeIdResp) XXX_Size() int {
	return m.Size()
}
func (m *TreeIdResp) XXX_DiscardUnknown() {
	xxx_messageInfo_TreeIdResp.DiscardUnknown(m)
}

var xxx_messageInfo_TreeIdResp proto.InternalMessageInfo

func (m *TreeIdResp) GetList() map[string]string {
	if m != nil {
		return m.List
	}
	return nil
}

func init() {
	proto.RegisterType((*GetConfigReq)(nil), "live.resource.v1.GetConfigReq")
	proto.RegisterType((*GetConfigResp)(nil), "live.resource.v1.GetConfigResp")
	proto.RegisterType((*SetConfigReq)(nil), "live.resource.v1.SetConfigReq")
	proto.RegisterType((*SetConfigResp)(nil), "live.resource.v1.SetConfigResp")
	proto.RegisterType((*ParamsConfigReq)(nil), "live.resource.v1.ParamsConfigReq")
	proto.RegisterType((*ParamsConfigResp)(nil), "live.resource.v1.ParamsConfigResp")
	proto.RegisterType((*List)(nil), "live.resource.v1.List")
	proto.RegisterType((*LikesConfigReq)(nil), "live.resource.v1.LikesConfigReq")
	proto.RegisterType((*LikesConfigResp)(nil), "live.resource.v1.LikesConfigResp")
	proto.RegisterMapType((map[int64]*Child)(nil), "live.resource.v1.LikesConfigResp.ListEntry")
	proto.RegisterType((*Child)(nil), "live.resource.v1.Child")
	proto.RegisterMapType((map[string]string)(nil), "live.resource.v1.Child.KeysEntry")
	proto.RegisterType((*TreeIdReq)(nil), "live.resource.v1.TreeIdReq")
	proto.RegisterType((*TreeIdResp)(nil), "live.resource.v1.TreeIdResp")
	proto.RegisterMapType((map[string]string)(nil), "live.resource.v1.TreeIdResp.ListEntry")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// TitansClient is the client API for Titans service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TitansClient interface {
	// 获取team下某个keyword的配置 `internal:"true"`
	GetConfigByKeyword(ctx context.Context, in *GetConfigReq, opts ...grpc.CallOption) (*GetConfigResp, error)
	// 设置team下某个keyword配置 `internal:"true"`
	SetConfigByKeyword(ctx context.Context, in *SetConfigReq, opts ...grpc.CallOption) (*SetConfigResp, error)
	// 管理后台根据条件获取配置 `internal:"true"`
	GetConfigsByParams(ctx context.Context, in *ParamsConfigReq, opts ...grpc.CallOption) (*ParamsConfigResp, error)
	// 获取discover_id对应的全部配置 `internal:"true"`
	GetByTreeId(ctx context.Context, in *TreeIdReq, opts ...grpc.CallOption) (*TreeIdResp, error)
	// 获取多个team或索引的的全部配置 `internal:"true"`
	GetConfigsByLikes(ctx context.Context, in *LikesConfigReq, opts ...grpc.CallOption) (*LikesConfigResp, error)
}

type titansClient struct {
	cc *grpc.ClientConn
}

func NewTitansClient(cc *grpc.ClientConn) TitansClient {
	return &titansClient{cc}
}

func (c *titansClient) GetConfigByKeyword(ctx context.Context, in *GetConfigReq, opts ...grpc.CallOption) (*GetConfigResp, error) {
	out := new(GetConfigResp)
	err := c.cc.Invoke(ctx, "/live.resource.v1.titans/get_config_by_keyword", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *titansClient) SetConfigByKeyword(ctx context.Context, in *SetConfigReq, opts ...grpc.CallOption) (*SetConfigResp, error) {
	out := new(SetConfigResp)
	err := c.cc.Invoke(ctx, "/live.resource.v1.titans/set_config_by_keyword", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *titansClient) GetConfigsByParams(ctx context.Context, in *ParamsConfigReq, opts ...grpc.CallOption) (*ParamsConfigResp, error) {
	out := new(ParamsConfigResp)
	err := c.cc.Invoke(ctx, "/live.resource.v1.titans/get_configs_by_params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *titansClient) GetByTreeId(ctx context.Context, in *TreeIdReq, opts ...grpc.CallOption) (*TreeIdResp, error) {
	out := new(TreeIdResp)
	err := c.cc.Invoke(ctx, "/live.resource.v1.titans/getByTreeId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *titansClient) GetConfigsByLikes(ctx context.Context, in *LikesConfigReq, opts ...grpc.CallOption) (*LikesConfigResp, error) {
	out := new(LikesConfigResp)
	err := c.cc.Invoke(ctx, "/live.resource.v1.titans/get_configs_by_likes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TitansServer is the server API for Titans service.
type TitansServer interface {
	// 获取team下某个keyword的配置 `internal:"true"`
	GetConfigByKeyword(context.Context, *GetConfigReq) (*GetConfigResp, error)
	// 设置team下某个keyword配置 `internal:"true"`
	SetConfigByKeyword(context.Context, *SetConfigReq) (*SetConfigResp, error)
	// 管理后台根据条件获取配置 `internal:"true"`
	GetConfigsByParams(context.Context, *ParamsConfigReq) (*ParamsConfigResp, error)
	// 获取discover_id对应的全部配置 `internal:"true"`
	GetByTreeId(context.Context, *TreeIdReq) (*TreeIdResp, error)
	// 获取多个team或索引的的全部配置 `internal:"true"`
	GetConfigsByLikes(context.Context, *LikesConfigReq) (*LikesConfigResp, error)
}

func RegisterTitansServer(s *grpc.Server, srv TitansServer) {
	s.RegisterService(&_Titans_serviceDesc, srv)
}

func _Titans_GetConfigByKeyword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetConfigReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TitansServer).GetConfigByKeyword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/live.resource.v1.titans/GetConfigByKeyword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TitansServer).GetConfigByKeyword(ctx, req.(*GetConfigReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Titans_SetConfigByKeyword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetConfigReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TitansServer).SetConfigByKeyword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/live.resource.v1.titans/SetConfigByKeyword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TitansServer).SetConfigByKeyword(ctx, req.(*SetConfigReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Titans_GetConfigsByParams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ParamsConfigReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TitansServer).GetConfigsByParams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/live.resource.v1.titans/GetConfigsByParams",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TitansServer).GetConfigsByParams(ctx, req.(*ParamsConfigReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Titans_GetByTreeId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TreeIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TitansServer).GetByTreeId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/live.resource.v1.titans/GetByTreeId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TitansServer).GetByTreeId(ctx, req.(*TreeIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Titans_GetConfigsByLikes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LikesConfigReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TitansServer).GetConfigsByLikes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/live.resource.v1.titans/GetConfigsByLikes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TitansServer).GetConfigsByLikes(ctx, req.(*LikesConfigReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _Titans_serviceDesc = grpc.ServiceDesc{
	ServiceName: "live.resource.v1.titans",
	HandlerType: (*TitansServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "get_config_by_keyword",
			Handler:    _Titans_GetConfigByKeyword_Handler,
		},
		{
			MethodName: "set_config_by_keyword",
			Handler:    _Titans_SetConfigByKeyword_Handler,
		},
		{
			MethodName: "get_configs_by_params",
			Handler:    _Titans_GetConfigsByParams_Handler,
		},
		{
			MethodName: "getByTreeId",
			Handler:    _Titans_GetByTreeId_Handler,
		},
		{
			MethodName: "get_configs_by_likes",
			Handler:    _Titans_GetConfigsByLikes_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/grpc/v1/titans.proto",
}

func (m *GetConfigReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetConfigReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Team != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTitans(dAtA, i, uint64(m.Team))
	}
	if len(m.Keyword) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTitans(dAtA, i, uint64(len(m.Keyword)))
		i += copy(dAtA[i:], m.Keyword)
	}
	if m.Id != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintTitans(dAtA, i, uint64(m.Id))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GetConfigResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetConfigResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Team != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTitans(dAtA, i, uint64(m.Team))
	}
	if len(m.Keyword) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTitans(dAtA, i, uint64(len(m.Keyword)))
		i += copy(dAtA[i:], m.Keyword)
	}
	if len(m.Value) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTitans(dAtA, i, uint64(len(m.Value)))
		i += copy(dAtA[i:], m.Value)
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintTitans(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.Ctime) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintTitans(dAtA, i, uint64(len(m.Ctime)))
		i += copy(dAtA[i:], m.Ctime)
	}
	if len(m.Mtime) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintTitans(dAtA, i, uint64(len(m.Mtime)))
		i += copy(dAtA[i:], m.Mtime)
	}
	if m.Status != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintTitans(dAtA, i, uint64(m.Status))
	}
	if m.Id != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintTitans(dAtA, i, uint64(m.Id))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *SetConfigReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SetConfigReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Team != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTitans(dAtA, i, uint64(m.Team))
	}
	if len(m.Keyword) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTitans(dAtA, i, uint64(len(m.Keyword)))
		i += copy(dAtA[i:], m.Keyword)
	}
	if len(m.Value) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTitans(dAtA, i, uint64(len(m.Value)))
		i += copy(dAtA[i:], m.Value)
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintTitans(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if m.Id != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintTitans(dAtA, i, uint64(m.Id))
	}
	if m.Status != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintTitans(dAtA, i, uint64(m.Status))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *SetConfigResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SetConfigResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTitans(dAtA, i, uint64(m.Id))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ParamsConfigReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ParamsConfigReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Team != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTitans(dAtA, i, uint64(m.Team))
	}
	if len(m.Keyword) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTitans(dAtA, i, uint64(len(m.Keyword)))
		i += copy(dAtA[i:], m.Keyword)
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTitans(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if m.Status != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintTitans(dAtA, i, uint64(m.Status))
	}
	if m.Page != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintTitans(dAtA, i, uint64(m.Page))
	}
	if m.PageSize != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintTitans(dAtA, i, uint64(m.PageSize))
	}
	if m.Id != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintTitans(dAtA, i, uint64(m.Id))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ParamsConfigResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ParamsConfigResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, msg := range m.List {
			dAtA[i] = 0xa
			i++
			i = encodeVarintTitans(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.TotalNum != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTitans(dAtA, i, uint64(m.TotalNum))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *List) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *List) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTitans(dAtA, i, uint64(m.Id))
	}
	if m.Team != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTitans(dAtA, i, uint64(m.Team))
	}
	if len(m.Keyword) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTitans(dAtA, i, uint64(len(m.Keyword)))
		i += copy(dAtA[i:], m.Keyword)
	}
	if len(m.Value) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintTitans(dAtA, i, uint64(len(m.Value)))
		i += copy(dAtA[i:], m.Value)
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintTitans(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.Ctime) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintTitans(dAtA, i, uint64(len(m.Ctime)))
		i += copy(dAtA[i:], m.Ctime)
	}
	if len(m.Mtime) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintTitans(dAtA, i, uint64(len(m.Mtime)))
		i += copy(dAtA[i:], m.Mtime)
	}
	if m.Status != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintTitans(dAtA, i, uint64(m.Status))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *LikesConfigReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LikesConfigReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Params) > 0 {
		for _, s := range m.Params {
			dAtA[i] = 0xa
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *LikesConfigResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LikesConfigResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.List) > 0 {
		for k, _ := range m.List {
			dAtA[i] = 0xa
			i++
			v := m.List[k]
			msgSize := 0
			if v != nil {
				msgSize = v.Size()
				msgSize += 1 + sovTitans(uint64(msgSize))
			}
			mapSize := 1 + sovTitans(uint64(k)) + msgSize
			i = encodeVarintTitans(dAtA, i, uint64(mapSize))
			dAtA[i] = 0x8
			i++
			i = encodeVarintTitans(dAtA, i, uint64(k))
			if v != nil {
				dAtA[i] = 0x12
				i++
				i = encodeVarintTitans(dAtA, i, uint64(v.Size()))
				n1, err := v.MarshalTo(dAtA[i:])
				if err != nil {
					return 0, err
				}
				i += n1
			}
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Child) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Child) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Keys) > 0 {
		for k, _ := range m.Keys {
			dAtA[i] = 0xa
			i++
			v := m.Keys[k]
			mapSize := 1 + len(k) + sovTitans(uint64(len(k))) + 1 + len(v) + sovTitans(uint64(len(v)))
			i = encodeVarintTitans(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintTitans(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			dAtA[i] = 0x12
			i++
			i = encodeVarintTitans(dAtA, i, uint64(len(v)))
			i += copy(dAtA[i:], v)
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *TreeIdReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TreeIdReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.TreeId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTitans(dAtA, i, uint64(m.TreeId))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *TreeIdResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TreeIdResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.List) > 0 {
		for k, _ := range m.List {
			dAtA[i] = 0xa
			i++
			v := m.List[k]
			mapSize := 1 + len(k) + sovTitans(uint64(len(k))) + 1 + len(v) + sovTitans(uint64(len(v)))
			i = encodeVarintTitans(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintTitans(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			dAtA[i] = 0x12
			i++
			i = encodeVarintTitans(dAtA, i, uint64(len(v)))
			i += copy(dAtA[i:], v)
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintTitans(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *GetConfigReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Team != 0 {
		n += 1 + sovTitans(uint64(m.Team))
	}
	l = len(m.Keyword)
	if l > 0 {
		n += 1 + l + sovTitans(uint64(l))
	}
	if m.Id != 0 {
		n += 1 + sovTitans(uint64(m.Id))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetConfigResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Team != 0 {
		n += 1 + sovTitans(uint64(m.Team))
	}
	l = len(m.Keyword)
	if l > 0 {
		n += 1 + l + sovTitans(uint64(l))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovTitans(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovTitans(uint64(l))
	}
	l = len(m.Ctime)
	if l > 0 {
		n += 1 + l + sovTitans(uint64(l))
	}
	l = len(m.Mtime)
	if l > 0 {
		n += 1 + l + sovTitans(uint64(l))
	}
	if m.Status != 0 {
		n += 1 + sovTitans(uint64(m.Status))
	}
	if m.Id != 0 {
		n += 1 + sovTitans(uint64(m.Id))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SetConfigReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Team != 0 {
		n += 1 + sovTitans(uint64(m.Team))
	}
	l = len(m.Keyword)
	if l > 0 {
		n += 1 + l + sovTitans(uint64(l))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovTitans(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovTitans(uint64(l))
	}
	if m.Id != 0 {
		n += 1 + sovTitans(uint64(m.Id))
	}
	if m.Status != 0 {
		n += 1 + sovTitans(uint64(m.Status))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SetConfigResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovTitans(uint64(m.Id))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ParamsConfigReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Team != 0 {
		n += 1 + sovTitans(uint64(m.Team))
	}
	l = len(m.Keyword)
	if l > 0 {
		n += 1 + l + sovTitans(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovTitans(uint64(l))
	}
	if m.Status != 0 {
		n += 1 + sovTitans(uint64(m.Status))
	}
	if m.Page != 0 {
		n += 1 + sovTitans(uint64(m.Page))
	}
	if m.PageSize != 0 {
		n += 1 + sovTitans(uint64(m.PageSize))
	}
	if m.Id != 0 {
		n += 1 + sovTitans(uint64(m.Id))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ParamsConfigResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovTitans(uint64(l))
		}
	}
	if m.TotalNum != 0 {
		n += 1 + sovTitans(uint64(m.TotalNum))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *List) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovTitans(uint64(m.Id))
	}
	if m.Team != 0 {
		n += 1 + sovTitans(uint64(m.Team))
	}
	l = len(m.Keyword)
	if l > 0 {
		n += 1 + l + sovTitans(uint64(l))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovTitans(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovTitans(uint64(l))
	}
	l = len(m.Ctime)
	if l > 0 {
		n += 1 + l + sovTitans(uint64(l))
	}
	l = len(m.Mtime)
	if l > 0 {
		n += 1 + l + sovTitans(uint64(l))
	}
	if m.Status != 0 {
		n += 1 + sovTitans(uint64(m.Status))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *LikesConfigReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Params) > 0 {
		for _, s := range m.Params {
			l = len(s)
			n += 1 + l + sovTitans(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *LikesConfigResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.List) > 0 {
		for k, v := range m.List {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovTitans(uint64(l))
			}
			mapEntrySize := 1 + sovTitans(uint64(k)) + l
			n += mapEntrySize + 1 + sovTitans(uint64(mapEntrySize))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Child) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Keys) > 0 {
		for k, v := range m.Keys {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovTitans(uint64(len(k))) + 1 + len(v) + sovTitans(uint64(len(v)))
			n += mapEntrySize + 1 + sovTitans(uint64(mapEntrySize))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TreeIdReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TreeId != 0 {
		n += 1 + sovTitans(uint64(m.TreeId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TreeIdResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.List) > 0 {
		for k, v := range m.List {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovTitans(uint64(len(k))) + 1 + len(v) + sovTitans(uint64(len(v)))
			n += mapEntrySize + 1 + sovTitans(uint64(mapEntrySize))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovTitans(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozTitans(x uint64) (n int) {
	return sovTitans(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *GetConfigReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTitans
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetConfigReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetConfigReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Team", wireType)
			}
			m.Team = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTitans
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Team |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Keyword", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTitans
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTitans
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Keyword = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTitans
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTitans(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTitans
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetConfigResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTitans
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetConfigResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetConfigResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Team", wireType)
			}
			m.Team = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTitans
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Team |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Keyword", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTitans
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTitans
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Keyword = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTitans
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTitans
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTitans
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTitans
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ctime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTitans
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTitans
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ctime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mtime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTitans
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTitans
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Mtime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTitans
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTitans
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTitans(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTitans
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SetConfigReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTitans
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SetConfigReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SetConfigReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Team", wireType)
			}
			m.Team = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTitans
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Team |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Keyword", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTitans
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTitans
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Keyword = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTitans
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTitans
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTitans
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTitans
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTitans
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTitans
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTitans(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTitans
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SetConfigResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTitans
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SetConfigResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SetConfigResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTitans
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTitans(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTitans
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ParamsConfigReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTitans
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ParamsConfigReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ParamsConfigReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Team", wireType)
			}
			m.Team = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTitans
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Team |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Keyword", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTitans
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTitans
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Keyword = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTitans
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTitans
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTitans
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Page", wireType)
			}
			m.Page = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTitans
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Page |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageSize", wireType)
			}
			m.PageSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTitans
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PageSize |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTitans
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTitans(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTitans
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ParamsConfigResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTitans
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ParamsConfigResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ParamsConfigResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTitans
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTitans
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &List{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalNum", wireType)
			}
			m.TotalNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTitans
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalNum |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTitans(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTitans
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *List) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTitans
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: List: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: List: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTitans
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Team", wireType)
			}
			m.Team = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTitans
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Team |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Keyword", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTitans
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTitans
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Keyword = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTitans
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTitans
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTitans
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTitans
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ctime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTitans
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTitans
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ctime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mtime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTitans
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTitans
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Mtime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTitans
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTitans(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTitans
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LikesConfigReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTitans
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LikesConfigReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LikesConfigReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTitans
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTitans
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Params = append(m.Params, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTitans(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTitans
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LikesConfigResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTitans
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LikesConfigResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LikesConfigResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTitans
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTitans
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.List == nil {
				m.List = make(map[int64]*Child)
			}
			var mapkey int64
			var mapvalue *Child
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTitans
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTitans
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= (int64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTitans
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= (int(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthTitans
					}
					postmsgIndex := iNdEx + mapmsglen
					if mapmsglen < 0 {
						return ErrInvalidLengthTitans
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &Child{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipTitans(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthTitans
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.List[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTitans(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTitans
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Child) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTitans
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Child: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Child: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Keys", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTitans
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTitans
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Keys == nil {
				m.Keys = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTitans
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTitans
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthTitans
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTitans
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthTitans
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipTitans(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthTitans
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Keys[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTitans(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTitans
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TreeIdReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTitans
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TreeIdReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TreeIdReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TreeId", wireType)
			}
			m.TreeId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTitans
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TreeId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTitans(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTitans
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TreeIdResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTitans
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TreeIdResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TreeIdResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTitans
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTitans
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.List == nil {
				m.List = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTitans
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTitans
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthTitans
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTitans
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthTitans
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipTitans(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthTitans
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.List[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTitans(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTitans
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTitans(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTitans
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTitans
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTitans
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthTitans
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowTitans
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipTitans(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthTitans = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTitans   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("api/grpc/v1/titans.proto", fileDescriptor_titans_dfea6aed93e768d7) }

var fileDescriptor_titans_dfea6aed93e768d7 = []byte{
	// 936 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x56, 0x4f, 0x6f, 0xe3, 0x44,
	0x14, 0x97, 0x9d, 0x34, 0x89, 0x5f, 0x36, 0xdb, 0x32, 0x5a, 0x96, 0x28, 0x2c, 0x9d, 0x74, 0xba,
	0xbb, 0x94, 0x3f, 0x9b, 0xa8, 0x05, 0xa9, 0xa8, 0x12, 0x5a, 0x94, 0x65, 0x05, 0x2b, 0x2a, 0x58,
	0xb9, 0x1c, 0x10, 0x48, 0x44, 0x6e, 0x32, 0xcd, 0x8e, 0x1a, 0xc7, 0xae, 0x67, 0x12, 0x94, 0x3d,
	0xc1, 0x0d, 0x89, 0x13, 0xdf, 0x80, 0x4f, 0xc0, 0x97, 0xe0, 0xc2, 0x11, 0x89, 0xbb, 0x85, 0x7a,
	0xcc, 0xd1, 0x9f, 0x00, 0xcd, 0x8c, 0x9d, 0xd8, 0x69, 0x12, 0x2f, 0x07, 0x2e, 0x1e, 0xcf, 0xfb,
	0x37, 0xef, 0xfd, 0x7e, 0x6f, 0x9e, 0x0d, 0x75, 0xc7, 0x67, 0xed, 0x41, 0xe0, 0xf7, 0xda, 0x93,
	0xc3, 0xb6, 0x60, 0xc2, 0x19, 0xf1, 0x96, 0x1f, 0x78, 0xc2, 0x43, 0x3b, 0x43, 0x36, 0xa1, 0xad,
	0x80, 0x72, 0x6f, 0x1c, 0xf4, 0x68, 0x6b, 0x72, 0xd8, 0x78, 0x34, 0x60, 0xe2, 0xc5, 0xf8, 0xbc,
	0xd5, 0xf3, 0xdc, 0xf6, 0xc0, 0x1b, 0x78, 0x6d, 0x65, 0x78, 0x3e, 0xbe, 0x50, 0x3b, 0xb5, 0x51,
	0x6f, 0x3a, 0x00, 0xf9, 0xd1, 0x80, 0x5b, 0x9f, 0x51, 0xf1, 0xc4, 0x1b, 0x5d, 0xb0, 0x81, 0x4d,
	0xaf, 0xd0, 0x3e, 0x14, 0x05, 0x75, 0xdc, 0xba, 0xd1, 0x34, 0x0e, 0x0a, 0x9d, 0xed, 0x28, 0xc4,
	0xd5, 0x0b, 0x2f, 0x70, 0x4f, 0x88, 0x94, 0x12, 0x5b, 0x29, 0xd1, 0xfb, 0x50, 0xbe, 0xa4, 0xd3,
	0x1f, 0xbc, 0xa0, 0x5f, 0x37, 0x9b, 0xc6, 0x81, 0xd5, 0x41, 0x51, 0x88, 0x6f, 0x6b, 0xbb, 0x58,
	0x41, 0xec, 0xc4, 0x04, 0xbd, 0x05, 0x26, 0xeb, 0xd7, 0x0b, 0x2a, 0x60, 0x2d, 0x0a, 0xb1, 0xa5,
	0x0d, 0x59, 0x9f, 0xd8, 0x26, 0xeb, 0x93, 0x5f, 0x4d, 0xa8, 0xa5, 0x52, 0xe0, 0x3e, 0xba, 0x97,
	0xc9, 0xa1, 0x32, 0x0b, 0xb1, 0xda, 0xc7, 0x87, 0x3f, 0x58, 0x3e, 0xbc, 0x3a, 0x0b, 0x71, 0x22,
	0x5a, 0x9c, 0x8a, 0x61, 0x6b, 0xe2, 0x0c, 0xc7, 0x54, 0x1d, 0x6c, 0x75, 0xac, 0x59, 0x88, 0xb5,
	0xc0, 0xd6, 0x8b, 0x3c, 0x65, 0xe4, 0xb8, 0xb4, 0x5e, 0x54, 0x7a, 0x75, 0x8a, 0xdc, 0xdb, 0xea,
	0x29, 0xdd, 0x7b, 0x82, 0xb9, 0xb4, 0xbe, 0xb5, 0x70, 0x57, 0x02, 0x5b, 0x2f, 0xd2, 0xc0, 0x55,
	0x06, 0xa5, 0x85, 0x81, 0xab, 0x0d, 0xd4, 0x82, 0x08, 0x94, 0xb8, 0x70, 0xc4, 0x98, 0xd7, 0xcb,
	0xaa, 0x0e, 0x98, 0x85, 0x38, 0x96, 0xd8, 0xf1, 0x8a, 0xee, 0x2a, 0x68, 0x2a, 0x4a, 0x5f, 0x9a,
	0x85, 0xd8, 0x64, 0x7d, 0x85, 0xc9, 0x6f, 0x26, 0xdc, 0x3a, 0xfb, 0xcf, 0xb4, 0x7c, 0xb2, 0x8c,
	0xcc, 0xc3, 0x28, 0xc4, 0x24, 0x4b, 0x4b, 0x73, 0xe2, 0x0c, 0x59, 0xdf, 0x11, 0xf4, 0x84, 0x04,
	0xf4, 0x6a, 0xcc, 0x02, 0x9a, 0xa6, 0xea, 0x24, 0x0b, 0xda, 0xfd, 0x28, 0xc4, 0x4d, 0xed, 0xaf,
	0xc4, 0xab, 0xbd, 0x63, 0x3c, 0xf7, 0x33, 0x78, 0xa6, 0x52, 0x94, 0x52, 0x12, 0xc3, 0xaa, 0x7b,
	0x61, 0x6b, 0x4d, 0x2f, 0xa0, 0x77, 0xe6, 0x98, 0x95, 0x94, 0xc9, 0x6b, 0x51, 0x88, 0x6b, 0xda,
	0x44, 0xcb, 0x49, 0x02, 0x1d, 0x79, 0x1b, 0x6a, 0x67, 0x99, 0xae, 0xd1, 0x58, 0x1a, 0x37, 0xb0,
	0xfc, 0xdb, 0x84, 0xed, 0xe7, 0x4e, 0xe0, 0xb8, 0xfc, 0x7f, 0xed, 0xf2, 0xa4, 0xfc, 0xc2, 0xa6,
	0xf2, 0x17, 0xf5, 0x15, 0x73, 0xea, 0x43, 0xc7, 0x50, 0xf4, 0x9d, 0x01, 0x8d, 0xb1, 0xda, 0x8f,
	0x42, 0x8c, 0xb5, 0xa1, 0x94, 0xae, 0x26, 0x42, 0x39, 0xa0, 0xa7, 0x60, 0xc9, 0xb5, 0xcb, 0xd9,
	0x4b, 0x1a, 0xc3, 0x78, 0x10, 0x85, 0xf8, 0xfe, 0xc2, 0x5b, 0xa9, 0x56, 0x87, 0xa8, 0x48, 0xfd,
	0x19, 0x7b, 0x99, 0x30, 0x55, 0x5e, 0x77, 0x6b, 0x05, 0xec, 0x64, 0x41, 0xe5, 0x3e, 0xfa, 0x10,
	0x8a, 0x43, 0xc6, 0x45, 0xdd, 0x68, 0x16, 0x0e, 0xaa, 0x47, 0x77, 0x5b, 0xcb, 0xc3, 0xa9, 0x75,
	0xca, 0xb8, 0xd0, 0x37, 0x4d, 0xda, 0xd9, 0xea, 0x89, 0xde, 0x05, 0x4b, 0x78, 0xc2, 0x19, 0x76,
	0x47, 0x63, 0x57, 0x01, 0x5d, 0xe8, 0xd4, 0x66, 0x21, 0x5e, 0x08, 0xed, 0x8a, 0x7a, 0xfd, 0x72,
	0xec, 0x92, 0x9f, 0x4d, 0x28, 0xca, 0x20, 0xeb, 0xc8, 0x9e, 0x8f, 0x0e, 0x33, 0x6f, 0x74, 0x14,
	0x5e, 0x65, 0x74, 0x14, 0x73, 0x46, 0xc7, 0xd6, 0xe6, 0xd1, 0x51, 0xca, 0x1b, 0x1d, 0xe5, 0xdc,
	0xd1, 0x51, 0x59, 0x37, 0x3a, 0xc8, 0x57, 0x70, 0xfb, 0x94, 0x5d, 0xd2, 0x54, 0x53, 0x7f, 0x0c,
	0x25, 0x5f, 0x51, 0xa2, 0x08, 0xb0, 0x3a, 0x0f, 0xa2, 0x10, 0xef, 0x25, 0xac, 0x4b, 0xf9, 0x6a,
	0xca, 0x63, 0x27, 0xf2, 0xbb, 0x01, 0xdb, 0x99, 0x88, 0xdc, 0x47, 0xcf, 0x32, 0x8c, 0xbe, 0xb7,
	0x8a, 0xd1, 0x8c, 0x83, 0x62, 0xf8, 0xe9, 0x48, 0x04, 0xd3, 0x65, 0x9a, 0x1b, 0xcf, 0xc1, 0x9a,
	0x2b, 0xd1, 0x0e, 0x14, 0x2e, 0xe9, 0x54, 0xf3, 0x67, 0xcb, 0x57, 0xf4, 0x28, 0xc1, 0x5c, 0x32,
	0x57, 0x3d, 0x7a, 0xe3, 0xe6, 0x51, 0x4f, 0x5e, 0xb0, 0x61, 0x3f, 0x66, 0xe0, 0xc4, 0xfc, 0xc8,
	0x20, 0x3f, 0x19, 0xb0, 0xa5, 0x84, 0xe8, 0x31, 0x14, 0x2f, 0xe9, 0x94, 0xc7, 0x69, 0xee, 0xad,
	0xf1, 0x6d, 0x7d, 0x41, 0xa7, 0x3c, 0x95, 0x9c, 0x74, 0xb1, 0xd5, 0xb3, 0x71, 0x0c, 0xd6, 0x5c,
	0x99, 0x4e, 0xce, 0xd2, 0xc9, 0xdd, 0x49, 0x27, 0x67, 0xa5, 0x73, 0x38, 0x05, 0xeb, 0xeb, 0x80,
	0xd2, 0x67, 0x7d, 0x49, 0xc0, 0x63, 0x28, 0x8b, 0x80, 0xd2, 0xee, 0xbc, 0x33, 0x53, 0xf3, 0x37,
	0x56, 0xac, 0xa1, 0x40, 0xa8, 0x18, 0xe4, 0x17, 0x03, 0x20, 0x09, 0xc7, 0x7d, 0xf4, 0x69, 0x06,
	0xfd, 0x87, 0x37, 0xcb, 0x5a, 0xd8, 0x6e, 0x00, 0xfe, 0x78, 0x0d, 0xf0, 0x79, 0xb5, 0x1d, 0xfd,
	0x51, 0x80, 0x92, 0xfe, 0xdb, 0x40, 0xdf, 0xc0, 0xeb, 0x03, 0x2a, 0xba, 0x3d, 0x45, 0x74, 0xf7,
	0x7c, 0xda, 0x4d, 0xae, 0xca, 0xee, 0xcd, 0xa4, 0xd2, 0xbf, 0x13, 0x0d, 0xbc, 0x51, 0xcf, 0x7d,
	0x19, 0x99, 0xbf, 0x6a, 0xe4, 0xb3, 0x9c, 0xc8, 0xd9, 0xef, 0xc1, 0xf7, 0xe9, 0x9c, 0xb9, 0x0c,
	0xad, 0x1b, 0x1d, 0xad, 0xe8, 0x8f, 0xa5, 0xef, 0x43, 0x83, 0xe4, 0x99, 0x70, 0x1f, 0x7d, 0x0e,
	0xd5, 0x01, 0x15, 0x9d, 0xa9, 0x26, 0x01, 0xbd, 0xb9, 0x9e, 0x9e, 0xab, 0xc6, 0xbd, 0x4d, 0xdc,
	0xa1, 0xef, 0xe0, 0xce, 0x52, 0xa6, 0x43, 0x79, 0xad, 0x50, 0x33, 0xe7, 0xbe, 0x5d, 0x35, 0xf6,
	0x72, 0x6f, 0x64, 0x67, 0xe7, 0xcf, 0xeb, 0x5d, 0xe3, 0xaf, 0xeb, 0x5d, 0xe3, 0x9f, 0xeb, 0x5d,
	0xe3, 0x5b, 0x73, 0x72, 0x78, 0x5e, 0x52, 0xbf, 0x7e, 0x1f, 0xfc, 0x1b, 0x00, 0x00, 0xff, 0xff,
	0xe3, 0x1a, 0x85, 0x5e, 0x57, 0x0a, 0x00, 0x00,
}
