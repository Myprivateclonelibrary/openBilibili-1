// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: titans.proto

package model

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type SundryConfig struct {
	Id                   int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id"`
	Team                 int64    `protobuf:"varint,2,opt,name=team,proto3" json:"team"`
	Keyword              string   `protobuf:"bytes,3,opt,name=keyword,proto3" json:"keyword"`
	Value                string   `protobuf:"bytes,4,opt,name=value,proto3" json:"value"`
	Name                 string   `protobuf:"bytes,5,opt,name=name,proto3" json:"name"`
	Status               int64    `protobuf:"varint,6,opt,name=status,proto3" json:"status"`
	Ctime                string   `protobuf:"bytes,7,opt,name=ctime,proto3" json:"ctime"`
	Mtime                string   `protobuf:"bytes,8,opt,name=mtime,proto3" json:"mtime"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SundryConfig) Reset()         { *m = SundryConfig{} }
func (m *SundryConfig) String() string { return proto.CompactTextString(m) }
func (*SundryConfig) ProtoMessage()    {}
func (*SundryConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_titans_9a51a64647432228, []int{0}
}
func (m *SundryConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SundryConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SundryConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *SundryConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SundryConfig.Merge(dst, src)
}
func (m *SundryConfig) XXX_Size() int {
	return m.Size()
}
func (m *SundryConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_SundryConfig.DiscardUnknown(m)
}

var xxx_messageInfo_SundryConfig proto.InternalMessageInfo

func (m *SundryConfig) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *SundryConfig) GetTeam() int64 {
	if m != nil {
		return m.Team
	}
	return 0
}

func (m *SundryConfig) GetKeyword() string {
	if m != nil {
		return m.Keyword
	}
	return ""
}

func (m *SundryConfig) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func (m *SundryConfig) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *SundryConfig) GetStatus() int64 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *SundryConfig) GetCtime() string {
	if m != nil {
		return m.Ctime
	}
	return ""
}

func (m *SundryConfig) GetMtime() string {
	if m != nil {
		return m.Mtime
	}
	return ""
}

type ServiceModel struct {
	Id                   int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id"`
	TreeName             string   `protobuf:"bytes,2,opt,name=tree_name,json=treeName,proto3" json:"tree_name"`
	TreePath             string   `protobuf:"bytes,3,opt,name=tree_path,json=treePath,proto3" json:"tree_path"`
	TreeId               int64    `protobuf:"varint,4,opt,name=tree_id,json=treeId,proto3" json:"tree_id"`
	Service              string   `protobuf:"bytes,5,opt,name=service,proto3" json:"service"`
	Keyword              string   `protobuf:"bytes,6,opt,name=keyword,proto3" json:"keyword"`
	Template             int64    `protobuf:"varint,7,opt,name=template,proto3" json:"template"`
	Value                string   `protobuf:"bytes,8,opt,name=value,proto3" json:"value"`
	Name                 string   `protobuf:"bytes,9,opt,name=name,proto3" json:"name"`
	Status               int64    `protobuf:"varint,10,opt,name=status,proto3" json:"status"`
	Ctime                string   `protobuf:"bytes,11,opt,name=ctime,proto3" json:"ctime"`
	Mtime                string   `protobuf:"bytes,12,opt,name=mtime,proto3" json:"mtime"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ServiceModel) Reset()         { *m = ServiceModel{} }
func (m *ServiceModel) String() string { return proto.CompactTextString(m) }
func (*ServiceModel) ProtoMessage()    {}
func (*ServiceModel) Descriptor() ([]byte, []int) {
	return fileDescriptor_titans_9a51a64647432228, []int{1}
}
func (m *ServiceModel) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ServiceModel) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ServiceModel.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ServiceModel) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServiceModel.Merge(dst, src)
}
func (m *ServiceModel) XXX_Size() int {
	return m.Size()
}
func (m *ServiceModel) XXX_DiscardUnknown() {
	xxx_messageInfo_ServiceModel.DiscardUnknown(m)
}

var xxx_messageInfo_ServiceModel proto.InternalMessageInfo

func (m *ServiceModel) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *ServiceModel) GetTreeName() string {
	if m != nil {
		return m.TreeName
	}
	return ""
}

func (m *ServiceModel) GetTreePath() string {
	if m != nil {
		return m.TreePath
	}
	return ""
}

func (m *ServiceModel) GetTreeId() int64 {
	if m != nil {
		return m.TreeId
	}
	return 0
}

func (m *ServiceModel) GetService() string {
	if m != nil {
		return m.Service
	}
	return ""
}

func (m *ServiceModel) GetKeyword() string {
	if m != nil {
		return m.Keyword
	}
	return ""
}

func (m *ServiceModel) GetTemplate() int64 {
	if m != nil {
		return m.Template
	}
	return 0
}

func (m *ServiceModel) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func (m *ServiceModel) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ServiceModel) GetStatus() int64 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *ServiceModel) GetCtime() string {
	if m != nil {
		return m.Ctime
	}
	return ""
}

func (m *ServiceModel) GetMtime() string {
	if m != nil {
		return m.Mtime
	}
	return ""
}

func init() {
	proto.RegisterType((*SundryConfig)(nil), "model.SundryConfig")
	proto.RegisterType((*ServiceModel)(nil), "model.ServiceModel")
}
func (m *SundryConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SundryConfig) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTitans(dAtA, i, uint64(m.Id))
	}
	if m.Team != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTitans(dAtA, i, uint64(m.Team))
	}
	if len(m.Keyword) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTitans(dAtA, i, uint64(len(m.Keyword)))
		i += copy(dAtA[i:], m.Keyword)
	}
	if len(m.Value) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintTitans(dAtA, i, uint64(len(m.Value)))
		i += copy(dAtA[i:], m.Value)
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintTitans(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if m.Status != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintTitans(dAtA, i, uint64(m.Status))
	}
	if len(m.Ctime) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintTitans(dAtA, i, uint64(len(m.Ctime)))
		i += copy(dAtA[i:], m.Ctime)
	}
	if len(m.Mtime) > 0 {
		dAtA[i] = 0x42
		i++
		i = encodeVarintTitans(dAtA, i, uint64(len(m.Mtime)))
		i += copy(dAtA[i:], m.Mtime)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ServiceModel) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ServiceModel) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTitans(dAtA, i, uint64(m.Id))
	}
	if len(m.TreeName) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTitans(dAtA, i, uint64(len(m.TreeName)))
		i += copy(dAtA[i:], m.TreeName)
	}
	if len(m.TreePath) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTitans(dAtA, i, uint64(len(m.TreePath)))
		i += copy(dAtA[i:], m.TreePath)
	}
	if m.TreeId != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintTitans(dAtA, i, uint64(m.TreeId))
	}
	if len(m.Service) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintTitans(dAtA, i, uint64(len(m.Service)))
		i += copy(dAtA[i:], m.Service)
	}
	if len(m.Keyword) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintTitans(dAtA, i, uint64(len(m.Keyword)))
		i += copy(dAtA[i:], m.Keyword)
	}
	if m.Template != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintTitans(dAtA, i, uint64(m.Template))
	}
	if len(m.Value) > 0 {
		dAtA[i] = 0x42
		i++
		i = encodeVarintTitans(dAtA, i, uint64(len(m.Value)))
		i += copy(dAtA[i:], m.Value)
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintTitans(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if m.Status != 0 {
		dAtA[i] = 0x50
		i++
		i = encodeVarintTitans(dAtA, i, uint64(m.Status))
	}
	if len(m.Ctime) > 0 {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintTitans(dAtA, i, uint64(len(m.Ctime)))
		i += copy(dAtA[i:], m.Ctime)
	}
	if len(m.Mtime) > 0 {
		dAtA[i] = 0x62
		i++
		i = encodeVarintTitans(dAtA, i, uint64(len(m.Mtime)))
		i += copy(dAtA[i:], m.Mtime)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintTitans(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *SundryConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovTitans(uint64(m.Id))
	}
	if m.Team != 0 {
		n += 1 + sovTitans(uint64(m.Team))
	}
	l = len(m.Keyword)
	if l > 0 {
		n += 1 + l + sovTitans(uint64(l))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovTitans(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovTitans(uint64(l))
	}
	if m.Status != 0 {
		n += 1 + sovTitans(uint64(m.Status))
	}
	l = len(m.Ctime)
	if l > 0 {
		n += 1 + l + sovTitans(uint64(l))
	}
	l = len(m.Mtime)
	if l > 0 {
		n += 1 + l + sovTitans(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ServiceModel) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovTitans(uint64(m.Id))
	}
	l = len(m.TreeName)
	if l > 0 {
		n += 1 + l + sovTitans(uint64(l))
	}
	l = len(m.TreePath)
	if l > 0 {
		n += 1 + l + sovTitans(uint64(l))
	}
	if m.TreeId != 0 {
		n += 1 + sovTitans(uint64(m.TreeId))
	}
	l = len(m.Service)
	if l > 0 {
		n += 1 + l + sovTitans(uint64(l))
	}
	l = len(m.Keyword)
	if l > 0 {
		n += 1 + l + sovTitans(uint64(l))
	}
	if m.Template != 0 {
		n += 1 + sovTitans(uint64(m.Template))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovTitans(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovTitans(uint64(l))
	}
	if m.Status != 0 {
		n += 1 + sovTitans(uint64(m.Status))
	}
	l = len(m.Ctime)
	if l > 0 {
		n += 1 + l + sovTitans(uint64(l))
	}
	l = len(m.Mtime)
	if l > 0 {
		n += 1 + l + sovTitans(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovTitans(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozTitans(x uint64) (n int) {
	return sovTitans(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *SundryConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTitans
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SundryConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SundryConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTitans
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Team", wireType)
			}
			m.Team = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTitans
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Team |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Keyword", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTitans
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTitans
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Keyword = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTitans
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTitans
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTitans
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTitans
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTitans
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ctime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTitans
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTitans
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ctime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mtime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTitans
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTitans
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Mtime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTitans(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTitans
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ServiceModel) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTitans
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ServiceModel: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ServiceModel: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTitans
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TreeName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTitans
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTitans
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TreeName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TreePath", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTitans
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTitans
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TreePath = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TreeId", wireType)
			}
			m.TreeId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTitans
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TreeId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Service", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTitans
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTitans
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Service = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Keyword", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTitans
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTitans
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Keyword = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Template", wireType)
			}
			m.Template = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTitans
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Template |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTitans
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTitans
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTitans
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTitans
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTitans
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ctime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTitans
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTitans
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ctime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mtime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTitans
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTitans
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Mtime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTitans(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTitans
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTitans(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTitans
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTitans
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTitans
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthTitans
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowTitans
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipTitans(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthTitans = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTitans   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("titans.proto", fileDescriptor_titans_9a51a64647432228) }

var fileDescriptor_titans_9a51a64647432228 = []byte{
	// 399 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x52, 0x41, 0x8e, 0xda, 0x30,
	0x14, 0x55, 0x12, 0x08, 0x89, 0x49, 0x37, 0x59, 0x54, 0x51, 0x55, 0x61, 0x84, 0x5a, 0x09, 0x55,
	0x2a, 0x2c, 0x7a, 0x83, 0x74, 0xd5, 0x45, 0xab, 0xca, 0x1c, 0xa0, 0x32, 0xd8, 0x04, 0xab, 0x38,
	0x46, 0x89, 0x43, 0xc5, 0x2d, 0x7a, 0xa5, 0xd9, 0xcd, 0x72, 0x4e, 0x10, 0x8d, 0x58, 0xe6, 0x14,
	0x23, 0x7f, 0x27, 0x64, 0x16, 0x33, 0x93, 0x8d, 0xff, 0xfb, 0xef, 0x3f, 0xf8, 0x5f, 0xef, 0x05,
	0x45, 0x5a, 0x68, 0x9a, 0x97, 0xab, 0x53, 0xa1, 0xb4, 0x8a, 0xc7, 0x52, 0x31, 0x7e, 0xfc, 0xf0,
	0x35, 0x13, 0xfa, 0x50, 0x6d, 0x57, 0x3b, 0x25, 0xd7, 0x99, 0xca, 0xd4, 0x1a, 0xa6, 0xdb, 0x6a,
	0x0f, 0x1d, 0x34, 0x80, 0xec, 0xaf, 0x16, 0xff, 0x5d, 0x14, 0x6d, 0xaa, 0x9c, 0x15, 0x97, 0xef,
	0x2a, 0xdf, 0x8b, 0x2c, 0x7e, 0x8f, 0x5c, 0xc1, 0x12, 0x67, 0xee, 0x2c, 0xbd, 0xd4, 0x6f, 0x6a,
	0xec, 0x0a, 0x46, 0x5c, 0xc1, 0xe2, 0x8f, 0x68, 0xa4, 0x39, 0x95, 0x89, 0x0b, 0x93, 0xa0, 0xa9,
	0x31, 0xf4, 0x04, 0xde, 0xf8, 0x33, 0x9a, 0xfc, 0xe5, 0x97, 0x7f, 0xaa, 0x60, 0x89, 0x37, 0x77,
	0x96, 0x61, 0x3a, 0x6d, 0x6a, 0xdc, 0x51, 0xa4, 0x03, 0x31, 0x46, 0xe3, 0x33, 0x3d, 0x56, 0x3c,
	0x19, 0x81, 0x28, 0x6c, 0x6a, 0x6c, 0x09, 0x62, 0x8b, 0xd9, 0x92, 0x53, 0xc9, 0x93, 0x31, 0xcc,
	0x61, 0x8b, 0xe9, 0x09, 0xbc, 0xf1, 0x02, 0xf9, 0xa5, 0xa6, 0xba, 0x2a, 0x13, 0x1f, 0xae, 0x40,
	0x4d, 0x8d, 0x5b, 0x86, 0xb4, 0xd5, 0xac, 0xd8, 0x69, 0x21, 0x79, 0x32, 0xe9, 0x57, 0x00, 0x41,
	0x6c, 0x31, 0x02, 0x09, 0x82, 0xa0, 0x17, 0x48, 0x2b, 0x80, 0xb2, 0xb8, 0xf3, 0x50, 0xb4, 0xe1,
	0xc5, 0x59, 0xec, 0xf8, 0x4f, 0x63, 0xe9, 0xab, 0x96, 0x7c, 0x41, 0xa1, 0x2e, 0x38, 0xff, 0x03,
	0x17, 0xbb, 0xf0, 0x6f, 0xef, 0x9a, 0x1a, 0xf7, 0x24, 0x09, 0x0c, 0xfc, 0x65, 0x4e, 0xef, 0xb4,
	0x27, 0xaa, 0x0f, 0xad, 0x45, 0xbd, 0xd6, 0x90, 0x56, 0xfb, 0x9b, 0xea, 0x43, 0xfc, 0x09, 0x4d,
	0x80, 0x16, 0x0c, 0x7c, 0xf2, 0xac, 0x99, 0x2d, 0x45, 0x7c, 0x03, 0x7e, 0x30, 0x63, 0x79, 0x69,
	0xaf, 0x6c, 0xdd, 0x02, 0x55, 0x4b, 0x91, 0x0e, 0x3c, 0x4f, 0xc6, 0x7f, 0x23, 0x99, 0x25, 0x0a,
	0x34, 0x97, 0xa7, 0x23, 0xd5, 0xd6, 0x39, 0x2f, 0x8d, 0x9a, 0x1a, 0xdf, 0x38, 0x72, 0x43, 0x7d,
	0x86, 0xc1, 0x40, 0x86, 0xe1, 0x40, 0x86, 0x68, 0x38, 0xc3, 0xe9, 0x50, 0x86, 0xd1, 0xcb, 0x19,
	0xa6, 0xd1, 0xfd, 0x75, 0xe6, 0x3c, 0x5c, 0x67, 0xce, 0xe3, 0x75, 0xe6, 0x6c, 0x7d, 0xf8, 0xd6,
	0xbf, 0x3d, 0x05, 0x00, 0x00, 0xff, 0xff, 0x66, 0x72, 0xb9, 0xa9, 0x31, 0x03, 0x00, 0x00,
}
