// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: app/service/live/xlottery/api/grpc/v1/api.proto

package v1

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type CapsuleGetDetailReq struct {
	// 用户uid
	Uid int64 `protobuf:"varint,1,opt,name=uid,proto3" json:"uid"`
	// 来源 h5 web room
	From                 string   `protobuf:"bytes,2,opt,name=from,proto3" json:"from"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CapsuleGetDetailReq) Reset()         { *m = CapsuleGetDetailReq{} }
func (m *CapsuleGetDetailReq) String() string { return proto.CompactTextString(m) }
func (*CapsuleGetDetailReq) ProtoMessage()    {}
func (*CapsuleGetDetailReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_9467f450102a207d, []int{0}
}
func (m *CapsuleGetDetailReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CapsuleGetDetailReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CapsuleGetDetailReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *CapsuleGetDetailReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CapsuleGetDetailReq.Merge(dst, src)
}
func (m *CapsuleGetDetailReq) XXX_Size() int {
	return m.Size()
}
func (m *CapsuleGetDetailReq) XXX_DiscardUnknown() {
	xxx_messageInfo_CapsuleGetDetailReq.DiscardUnknown(m)
}

var xxx_messageInfo_CapsuleGetDetailReq proto.InternalMessageInfo

func (m *CapsuleGetDetailReq) GetUid() int64 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *CapsuleGetDetailReq) GetFrom() string {
	if m != nil {
		return m.From
	}
	return ""
}

type Usage struct {
	// 用法描述
	Text string `protobuf:"bytes,1,opt,name=text,proto3" json:"text"`
	// 跳转链接
	Url                  string   `protobuf:"bytes,2,opt,name=url,proto3" json:"url"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Usage) Reset()         { *m = Usage{} }
func (m *Usage) String() string { return proto.CompactTextString(m) }
func (*Usage) ProtoMessage()    {}
func (*Usage) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_9467f450102a207d, []int{1}
}
func (m *Usage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Usage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Usage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Usage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Usage.Merge(dst, src)
}
func (m *Usage) XXX_Size() int {
	return m.Size()
}
func (m *Usage) XXX_DiscardUnknown() {
	xxx_messageInfo_Usage.DiscardUnknown(m)
}

var xxx_messageInfo_Usage proto.InternalMessageInfo

func (m *Usage) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

func (m *Usage) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

type Progress struct {
	// 当前进度
	Now int64 `protobuf:"varint,1,opt,name=now,proto3" json:"now"`
	// 最大进度
	Max                  int64    `protobuf:"varint,2,opt,name=max,proto3" json:"max"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Progress) Reset()         { *m = Progress{} }
func (m *Progress) String() string { return proto.CompactTextString(m) }
func (*Progress) ProtoMessage()    {}
func (*Progress) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_9467f450102a207d, []int{2}
}
func (m *Progress) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Progress) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Progress.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Progress) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Progress.Merge(dst, src)
}
func (m *Progress) XXX_Size() int {
	return m.Size()
}
func (m *Progress) XXX_DiscardUnknown() {
	xxx_messageInfo_Progress.DiscardUnknown(m)
}

var xxx_messageInfo_Progress proto.InternalMessageInfo

func (m *Progress) GetNow() int64 {
	if m != nil {
		return m.Now
	}
	return 0
}

func (m *Progress) GetMax() int64 {
	if m != nil {
		return m.Max
	}
	return 0
}

type CapsuleGetDetailResp struct {
	// 普通扭蛋信息
	Normal *CapsuleGetDetailResp_CapsuleInfo `protobuf:"bytes,1,opt,name=normal" json:"normal"`
	// 梦幻扭蛋信息，若梦幻扭蛋status=false，则无coin、change、process、gift、list字段
	Colorful             *CapsuleGetDetailResp_CapsuleInfo `protobuf:"bytes,2,opt,name=colorful" json:"colorful"`
	XXX_NoUnkeyedLiteral struct{}                          `json:"-"`
	XXX_unrecognized     []byte                            `json:"-"`
	XXX_sizecache        int32                             `json:"-"`
}

func (m *CapsuleGetDetailResp) Reset()         { *m = CapsuleGetDetailResp{} }
func (m *CapsuleGetDetailResp) String() string { return proto.CompactTextString(m) }
func (*CapsuleGetDetailResp) ProtoMessage()    {}
func (*CapsuleGetDetailResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_9467f450102a207d, []int{3}
}
func (m *CapsuleGetDetailResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CapsuleGetDetailResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CapsuleGetDetailResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *CapsuleGetDetailResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CapsuleGetDetailResp.Merge(dst, src)
}
func (m *CapsuleGetDetailResp) XXX_Size() int {
	return m.Size()
}
func (m *CapsuleGetDetailResp) XXX_DiscardUnknown() {
	xxx_messageInfo_CapsuleGetDetailResp.DiscardUnknown(m)
}

var xxx_messageInfo_CapsuleGetDetailResp proto.InternalMessageInfo

func (m *CapsuleGetDetailResp) GetNormal() *CapsuleGetDetailResp_CapsuleInfo {
	if m != nil {
		return m.Normal
	}
	return nil
}

func (m *CapsuleGetDetailResp) GetColorful() *CapsuleGetDetailResp_CapsuleInfo {
	if m != nil {
		return m.Colorful
	}
	return nil
}

type CapsuleGetDetailResp_Gift struct {
	// 礼物名称
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name"`
	// 礼物图片
	Image string `protobuf:"bytes,3,opt,name=image,proto3" json:"image"`
	// 用法
	Usage *Usage `protobuf:"bytes,4,opt,name=usage" json:"usage"`
	// web礼物图片
	WebImage string `protobuf:"bytes,5,opt,name=web_image,json=webImage,proto3" json:"web_image"`
	// mobile礼物图片
	MobileImage          string   `protobuf:"bytes,6,opt,name=mobile_image,json=mobileImage,proto3" json:"mobile_image"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CapsuleGetDetailResp_Gift) Reset()         { *m = CapsuleGetDetailResp_Gift{} }
func (m *CapsuleGetDetailResp_Gift) String() string { return proto.CompactTextString(m) }
func (*CapsuleGetDetailResp_Gift) ProtoMessage()    {}
func (*CapsuleGetDetailResp_Gift) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_9467f450102a207d, []int{3, 0}
}
func (m *CapsuleGetDetailResp_Gift) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CapsuleGetDetailResp_Gift) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CapsuleGetDetailResp_Gift.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *CapsuleGetDetailResp_Gift) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CapsuleGetDetailResp_Gift.Merge(dst, src)
}
func (m *CapsuleGetDetailResp_Gift) XXX_Size() int {
	return m.Size()
}
func (m *CapsuleGetDetailResp_Gift) XXX_DiscardUnknown() {
	xxx_messageInfo_CapsuleGetDetailResp_Gift.DiscardUnknown(m)
}

var xxx_messageInfo_CapsuleGetDetailResp_Gift proto.InternalMessageInfo

func (m *CapsuleGetDetailResp_Gift) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CapsuleGetDetailResp_Gift) GetImage() string {
	if m != nil {
		return m.Image
	}
	return ""
}

func (m *CapsuleGetDetailResp_Gift) GetUsage() *Usage {
	if m != nil {
		return m.Usage
	}
	return nil
}

func (m *CapsuleGetDetailResp_Gift) GetWebImage() string {
	if m != nil {
		return m.WebImage
	}
	return ""
}

func (m *CapsuleGetDetailResp_Gift) GetMobileImage() string {
	if m != nil {
		return m.MobileImage
	}
	return ""
}

type CapsuleGetDetailResp_List struct {
	// 数量
	Num int64 `protobuf:"varint,1,opt,name=num,proto3" json:"num"`
	// 礼物名称
	Gift string `protobuf:"bytes,2,opt,name=gift,proto3" json:"gift"`
	// 时间
	Date string `protobuf:"bytes,3,opt,name=date,proto3" json:"date"`
	// 用户名
	Name                 string   `protobuf:"bytes,4,opt,name=name,proto3" json:"name"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CapsuleGetDetailResp_List) Reset()         { *m = CapsuleGetDetailResp_List{} }
func (m *CapsuleGetDetailResp_List) String() string { return proto.CompactTextString(m) }
func (*CapsuleGetDetailResp_List) ProtoMessage()    {}
func (*CapsuleGetDetailResp_List) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_9467f450102a207d, []int{3, 1}
}
func (m *CapsuleGetDetailResp_List) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CapsuleGetDetailResp_List) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CapsuleGetDetailResp_List.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *CapsuleGetDetailResp_List) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CapsuleGetDetailResp_List.Merge(dst, src)
}
func (m *CapsuleGetDetailResp_List) XXX_Size() int {
	return m.Size()
}
func (m *CapsuleGetDetailResp_List) XXX_DiscardUnknown() {
	xxx_messageInfo_CapsuleGetDetailResp_List.DiscardUnknown(m)
}

var xxx_messageInfo_CapsuleGetDetailResp_List proto.InternalMessageInfo

func (m *CapsuleGetDetailResp_List) GetNum() int64 {
	if m != nil {
		return m.Num
	}
	return 0
}

func (m *CapsuleGetDetailResp_List) GetGift() string {
	if m != nil {
		return m.Gift
	}
	return ""
}

func (m *CapsuleGetDetailResp_List) GetDate() string {
	if m != nil {
		return m.Date
	}
	return ""
}

func (m *CapsuleGetDetailResp_List) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type CapsuleGetDetailResp_CapsuleInfo struct {
	//
	Status bool `protobuf:"varint,1,opt,name=status,proto3" json:"status"`
	// 扭蛋数量
	Coin int64 `protobuf:"varint,2,opt,name=coin,proto3" json:"coin"`
	// 变化值
	Change int64 `protobuf:"varint,3,opt,name=change,proto3" json:"change"`
	// 进度
	Progress *Progress `protobuf:"bytes,4,opt,name=progress" json:"progress"`
	// 规则
	Rule string `protobuf:"bytes,5,opt,name=rule,proto3" json:"rule"`
	// 奖品列表
	Gift []*CapsuleGetDetailResp_Gift `protobuf:"bytes,6,rep,name=gift" json:"gift"`
	// 历史获奖列表
	List                 []*CapsuleGetDetailResp_List `protobuf:"bytes,7,rep,name=list" json:"list"`
	XXX_NoUnkeyedLiteral struct{}                     `json:"-"`
	XXX_unrecognized     []byte                       `json:"-"`
	XXX_sizecache        int32                        `json:"-"`
}

func (m *CapsuleGetDetailResp_CapsuleInfo) Reset()         { *m = CapsuleGetDetailResp_CapsuleInfo{} }
func (m *CapsuleGetDetailResp_CapsuleInfo) String() string { return proto.CompactTextString(m) }
func (*CapsuleGetDetailResp_CapsuleInfo) ProtoMessage()    {}
func (*CapsuleGetDetailResp_CapsuleInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_9467f450102a207d, []int{3, 2}
}
func (m *CapsuleGetDetailResp_CapsuleInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CapsuleGetDetailResp_CapsuleInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CapsuleGetDetailResp_CapsuleInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *CapsuleGetDetailResp_CapsuleInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CapsuleGetDetailResp_CapsuleInfo.Merge(dst, src)
}
func (m *CapsuleGetDetailResp_CapsuleInfo) XXX_Size() int {
	return m.Size()
}
func (m *CapsuleGetDetailResp_CapsuleInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_CapsuleGetDetailResp_CapsuleInfo.DiscardUnknown(m)
}

var xxx_messageInfo_CapsuleGetDetailResp_CapsuleInfo proto.InternalMessageInfo

func (m *CapsuleGetDetailResp_CapsuleInfo) GetStatus() bool {
	if m != nil {
		return m.Status
	}
	return false
}

func (m *CapsuleGetDetailResp_CapsuleInfo) GetCoin() int64 {
	if m != nil {
		return m.Coin
	}
	return 0
}

func (m *CapsuleGetDetailResp_CapsuleInfo) GetChange() int64 {
	if m != nil {
		return m.Change
	}
	return 0
}

func (m *CapsuleGetDetailResp_CapsuleInfo) GetProgress() *Progress {
	if m != nil {
		return m.Progress
	}
	return nil
}

func (m *CapsuleGetDetailResp_CapsuleInfo) GetRule() string {
	if m != nil {
		return m.Rule
	}
	return ""
}

func (m *CapsuleGetDetailResp_CapsuleInfo) GetGift() []*CapsuleGetDetailResp_Gift {
	if m != nil {
		return m.Gift
	}
	return nil
}

func (m *CapsuleGetDetailResp_CapsuleInfo) GetList() []*CapsuleGetDetailResp_List {
	if m != nil {
		return m.List
	}
	return nil
}

type CapsuleOpenCapsuleReq struct {
	// 用户uid
	Uid int64 `protobuf:"varint,1,opt,name=uid,proto3" json:"uid"`
	// 扭蛋类型
	Type string `protobuf:"bytes,2,opt,name=type,proto3" json:"type"`
	// 扭的个数
	Count                int64    `protobuf:"varint,3,opt,name=count,proto3" json:"count"`
	Platform             string   `protobuf:"bytes,4,opt,name=platform,proto3" json:"platform"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CapsuleOpenCapsuleReq) Reset()         { *m = CapsuleOpenCapsuleReq{} }
func (m *CapsuleOpenCapsuleReq) String() string { return proto.CompactTextString(m) }
func (*CapsuleOpenCapsuleReq) ProtoMessage()    {}
func (*CapsuleOpenCapsuleReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_9467f450102a207d, []int{4}
}
func (m *CapsuleOpenCapsuleReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CapsuleOpenCapsuleReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CapsuleOpenCapsuleReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *CapsuleOpenCapsuleReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CapsuleOpenCapsuleReq.Merge(dst, src)
}
func (m *CapsuleOpenCapsuleReq) XXX_Size() int {
	return m.Size()
}
func (m *CapsuleOpenCapsuleReq) XXX_DiscardUnknown() {
	xxx_messageInfo_CapsuleOpenCapsuleReq.DiscardUnknown(m)
}

var xxx_messageInfo_CapsuleOpenCapsuleReq proto.InternalMessageInfo

func (m *CapsuleOpenCapsuleReq) GetUid() int64 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *CapsuleOpenCapsuleReq) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *CapsuleOpenCapsuleReq) GetCount() int64 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *CapsuleOpenCapsuleReq) GetPlatform() string {
	if m != nil {
		return m.Platform
	}
	return ""
}

type CapsuleOpenCapsuleResp struct {
	// 扭蛋币扣除状态
	Status bool `protobuf:"varint,1,opt,name=status,proto3" json:"status"`
	// 奖品文案
	Text []string `protobuf:"bytes,2,rep,name=text" json:"text"`
	// 是否包含实物奖品
	IsEntity bool `protobuf:"varint,3,opt,name=isEntity,proto3" json:"isEntity"`
	// 用户扭蛋币拥有状态
	Info *CapsuleOpenCapsuleResp_Info `protobuf:"bytes,4,opt,name=info" json:"info"`
	// 头衔? 恒为空字符串, 忽略之
	ShowTitle string `protobuf:"bytes,5,opt,name=showTitle,proto3" json:"showTitle"`
	// 奖品列表
	Awards               []*CapsuleOpenCapsuleResp_Award `protobuf:"bytes,6,rep,name=awards" json:"awards"`
	XXX_NoUnkeyedLiteral struct{}                        `json:"-"`
	XXX_unrecognized     []byte                          `json:"-"`
	XXX_sizecache        int32                           `json:"-"`
}

func (m *CapsuleOpenCapsuleResp) Reset()         { *m = CapsuleOpenCapsuleResp{} }
func (m *CapsuleOpenCapsuleResp) String() string { return proto.CompactTextString(m) }
func (*CapsuleOpenCapsuleResp) ProtoMessage()    {}
func (*CapsuleOpenCapsuleResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_9467f450102a207d, []int{5}
}
func (m *CapsuleOpenCapsuleResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CapsuleOpenCapsuleResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CapsuleOpenCapsuleResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *CapsuleOpenCapsuleResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CapsuleOpenCapsuleResp.Merge(dst, src)
}
func (m *CapsuleOpenCapsuleResp) XXX_Size() int {
	return m.Size()
}
func (m *CapsuleOpenCapsuleResp) XXX_DiscardUnknown() {
	xxx_messageInfo_CapsuleOpenCapsuleResp.DiscardUnknown(m)
}

var xxx_messageInfo_CapsuleOpenCapsuleResp proto.InternalMessageInfo

func (m *CapsuleOpenCapsuleResp) GetStatus() bool {
	if m != nil {
		return m.Status
	}
	return false
}

func (m *CapsuleOpenCapsuleResp) GetText() []string {
	if m != nil {
		return m.Text
	}
	return nil
}

func (m *CapsuleOpenCapsuleResp) GetIsEntity() bool {
	if m != nil {
		return m.IsEntity
	}
	return false
}

func (m *CapsuleOpenCapsuleResp) GetInfo() *CapsuleOpenCapsuleResp_Info {
	if m != nil {
		return m.Info
	}
	return nil
}

func (m *CapsuleOpenCapsuleResp) GetShowTitle() string {
	if m != nil {
		return m.ShowTitle
	}
	return ""
}

func (m *CapsuleOpenCapsuleResp) GetAwards() []*CapsuleOpenCapsuleResp_Award {
	if m != nil {
		return m.Awards
	}
	return nil
}

type CapsuleOpenCapsuleResp_CapsuleInfo struct {
	// 拥有的币
	Coin int64 `protobuf:"varint,1,opt,name=coin,proto3" json:"coin"`
	// 变化值
	Change int64 `protobuf:"varint,2,opt,name=change,proto3" json:"change"`
	// 进度
	Progress             *Progress `protobuf:"bytes,3,opt,name=progress" json:"progress"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *CapsuleOpenCapsuleResp_CapsuleInfo) Reset()         { *m = CapsuleOpenCapsuleResp_CapsuleInfo{} }
func (m *CapsuleOpenCapsuleResp_CapsuleInfo) String() string { return proto.CompactTextString(m) }
func (*CapsuleOpenCapsuleResp_CapsuleInfo) ProtoMessage()    {}
func (*CapsuleOpenCapsuleResp_CapsuleInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_9467f450102a207d, []int{5, 0}
}
func (m *CapsuleOpenCapsuleResp_CapsuleInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CapsuleOpenCapsuleResp_CapsuleInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CapsuleOpenCapsuleResp_CapsuleInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *CapsuleOpenCapsuleResp_CapsuleInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CapsuleOpenCapsuleResp_CapsuleInfo.Merge(dst, src)
}
func (m *CapsuleOpenCapsuleResp_CapsuleInfo) XXX_Size() int {
	return m.Size()
}
func (m *CapsuleOpenCapsuleResp_CapsuleInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_CapsuleOpenCapsuleResp_CapsuleInfo.DiscardUnknown(m)
}

var xxx_messageInfo_CapsuleOpenCapsuleResp_CapsuleInfo proto.InternalMessageInfo

func (m *CapsuleOpenCapsuleResp_CapsuleInfo) GetCoin() int64 {
	if m != nil {
		return m.Coin
	}
	return 0
}

func (m *CapsuleOpenCapsuleResp_CapsuleInfo) GetChange() int64 {
	if m != nil {
		return m.Change
	}
	return 0
}

func (m *CapsuleOpenCapsuleResp_CapsuleInfo) GetProgress() *Progress {
	if m != nil {
		return m.Progress
	}
	return nil
}

type CapsuleOpenCapsuleResp_Info struct {
	// 普通扭蛋币
	Normal *CapsuleOpenCapsuleResp_CapsuleInfo `protobuf:"bytes,1,opt,name=normal" json:"normal"`
	// 梦幻扭蛋币
	Colorful             *CapsuleOpenCapsuleResp_CapsuleInfo `protobuf:"bytes,2,opt,name=colorful" json:"colorful"`
	XXX_NoUnkeyedLiteral struct{}                            `json:"-"`
	XXX_unrecognized     []byte                              `json:"-"`
	XXX_sizecache        int32                               `json:"-"`
}

func (m *CapsuleOpenCapsuleResp_Info) Reset()         { *m = CapsuleOpenCapsuleResp_Info{} }
func (m *CapsuleOpenCapsuleResp_Info) String() string { return proto.CompactTextString(m) }
func (*CapsuleOpenCapsuleResp_Info) ProtoMessage()    {}
func (*CapsuleOpenCapsuleResp_Info) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_9467f450102a207d, []int{5, 1}
}
func (m *CapsuleOpenCapsuleResp_Info) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CapsuleOpenCapsuleResp_Info) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CapsuleOpenCapsuleResp_Info.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *CapsuleOpenCapsuleResp_Info) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CapsuleOpenCapsuleResp_Info.Merge(dst, src)
}
func (m *CapsuleOpenCapsuleResp_Info) XXX_Size() int {
	return m.Size()
}
func (m *CapsuleOpenCapsuleResp_Info) XXX_DiscardUnknown() {
	xxx_messageInfo_CapsuleOpenCapsuleResp_Info.DiscardUnknown(m)
}

var xxx_messageInfo_CapsuleOpenCapsuleResp_Info proto.InternalMessageInfo

func (m *CapsuleOpenCapsuleResp_Info) GetNormal() *CapsuleOpenCapsuleResp_CapsuleInfo {
	if m != nil {
		return m.Normal
	}
	return nil
}

func (m *CapsuleOpenCapsuleResp_Info) GetColorful() *CapsuleOpenCapsuleResp_CapsuleInfo {
	if m != nil {
		return m.Colorful
	}
	return nil
}

type CapsuleOpenCapsuleResp_Award struct {
	// 奖品名字
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name"`
	// 奖品数量
	Num int64 `protobuf:"varint,3,opt,name=num,proto3" json:"num"`
	// 奖品 X 数量
	Text string `protobuf:"bytes,4,opt,name=text,proto3" json:"text"`
	// 奖品图片
	Img string `protobuf:"bytes,5,opt,name=img,proto3" json:"img"`
	// 奖品用法说明
	Usage *Usage `protobuf:"bytes,6,opt,name=usage" json:"usage"`
	// web礼物图片
	WebImage string `protobuf:"bytes,7,opt,name=web_image,json=webImage,proto3" json:"web_image"`
	// mobile礼物图片
	MobileImage          string   `protobuf:"bytes,8,opt,name=mobile_image,json=mobileImage,proto3" json:"mobile_image"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CapsuleOpenCapsuleResp_Award) Reset()         { *m = CapsuleOpenCapsuleResp_Award{} }
func (m *CapsuleOpenCapsuleResp_Award) String() string { return proto.CompactTextString(m) }
func (*CapsuleOpenCapsuleResp_Award) ProtoMessage()    {}
func (*CapsuleOpenCapsuleResp_Award) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_9467f450102a207d, []int{5, 2}
}
func (m *CapsuleOpenCapsuleResp_Award) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CapsuleOpenCapsuleResp_Award) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CapsuleOpenCapsuleResp_Award.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *CapsuleOpenCapsuleResp_Award) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CapsuleOpenCapsuleResp_Award.Merge(dst, src)
}
func (m *CapsuleOpenCapsuleResp_Award) XXX_Size() int {
	return m.Size()
}
func (m *CapsuleOpenCapsuleResp_Award) XXX_DiscardUnknown() {
	xxx_messageInfo_CapsuleOpenCapsuleResp_Award.DiscardUnknown(m)
}

var xxx_messageInfo_CapsuleOpenCapsuleResp_Award proto.InternalMessageInfo

func (m *CapsuleOpenCapsuleResp_Award) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CapsuleOpenCapsuleResp_Award) GetNum() int64 {
	if m != nil {
		return m.Num
	}
	return 0
}

func (m *CapsuleOpenCapsuleResp_Award) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

func (m *CapsuleOpenCapsuleResp_Award) GetImg() string {
	if m != nil {
		return m.Img
	}
	return ""
}

func (m *CapsuleOpenCapsuleResp_Award) GetUsage() *Usage {
	if m != nil {
		return m.Usage
	}
	return nil
}

func (m *CapsuleOpenCapsuleResp_Award) GetWebImage() string {
	if m != nil {
		return m.WebImage
	}
	return ""
}

func (m *CapsuleOpenCapsuleResp_Award) GetMobileImage() string {
	if m != nil {
		return m.MobileImage
	}
	return ""
}

type CapsuleGetCapsuleInfoReq struct {
	// 用户uid
	Uid int64 `protobuf:"varint,1,opt,name=uid,proto3" json:"uid"`
	// 类型
	Type string `protobuf:"bytes,2,opt,name=type,proto3" json:"type"`
	// 来源 h5 web room
	From                 string   `protobuf:"bytes,3,opt,name=from,proto3" json:"from"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CapsuleGetCapsuleInfoReq) Reset()         { *m = CapsuleGetCapsuleInfoReq{} }
func (m *CapsuleGetCapsuleInfoReq) String() string { return proto.CompactTextString(m) }
func (*CapsuleGetCapsuleInfoReq) ProtoMessage()    {}
func (*CapsuleGetCapsuleInfoReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_9467f450102a207d, []int{6}
}
func (m *CapsuleGetCapsuleInfoReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CapsuleGetCapsuleInfoReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CapsuleGetCapsuleInfoReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *CapsuleGetCapsuleInfoReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CapsuleGetCapsuleInfoReq.Merge(dst, src)
}
func (m *CapsuleGetCapsuleInfoReq) XXX_Size() int {
	return m.Size()
}
func (m *CapsuleGetCapsuleInfoReq) XXX_DiscardUnknown() {
	xxx_messageInfo_CapsuleGetCapsuleInfoReq.DiscardUnknown(m)
}

var xxx_messageInfo_CapsuleGetCapsuleInfoReq proto.InternalMessageInfo

func (m *CapsuleGetCapsuleInfoReq) GetUid() int64 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *CapsuleGetCapsuleInfoReq) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *CapsuleGetCapsuleInfoReq) GetFrom() string {
	if m != nil {
		return m.From
	}
	return ""
}

type CapsuleGetCapsuleInfoResp struct {
	// 扭蛋数量
	Coin int64 `protobuf:"varint,1,opt,name=coin,proto3" json:"coin"`
	// 规则
	Rule string `protobuf:"bytes,2,opt,name=rule,proto3" json:"rule"`
	// 奖品列表，包含数量
	GiftList []*CapsuleGetCapsuleInfoResp_GiftList `protobuf:"bytes,3,rep,name=gift_list,json=giftList" json:"gift_list"`
	// 奖品列表，不包含数量，同一类别只有一条
	GiftFilter           []*CapsuleGetCapsuleInfoResp_GiftFilter `protobuf:"bytes,4,rep,name=gift_filter,json=giftFilter" json:"gift_filter"`
	XXX_NoUnkeyedLiteral struct{}                                `json:"-"`
	XXX_unrecognized     []byte                                  `json:"-"`
	XXX_sizecache        int32                                   `json:"-"`
}

func (m *CapsuleGetCapsuleInfoResp) Reset()         { *m = CapsuleGetCapsuleInfoResp{} }
func (m *CapsuleGetCapsuleInfoResp) String() string { return proto.CompactTextString(m) }
func (*CapsuleGetCapsuleInfoResp) ProtoMessage()    {}
func (*CapsuleGetCapsuleInfoResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_9467f450102a207d, []int{7}
}
func (m *CapsuleGetCapsuleInfoResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CapsuleGetCapsuleInfoResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CapsuleGetCapsuleInfoResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *CapsuleGetCapsuleInfoResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CapsuleGetCapsuleInfoResp.Merge(dst, src)
}
func (m *CapsuleGetCapsuleInfoResp) XXX_Size() int {
	return m.Size()
}
func (m *CapsuleGetCapsuleInfoResp) XXX_DiscardUnknown() {
	xxx_messageInfo_CapsuleGetCapsuleInfoResp.DiscardUnknown(m)
}

var xxx_messageInfo_CapsuleGetCapsuleInfoResp proto.InternalMessageInfo

func (m *CapsuleGetCapsuleInfoResp) GetCoin() int64 {
	if m != nil {
		return m.Coin
	}
	return 0
}

func (m *CapsuleGetCapsuleInfoResp) GetRule() string {
	if m != nil {
		return m.Rule
	}
	return ""
}

func (m *CapsuleGetCapsuleInfoResp) GetGiftList() []*CapsuleGetCapsuleInfoResp_GiftList {
	if m != nil {
		return m.GiftList
	}
	return nil
}

func (m *CapsuleGetCapsuleInfoResp) GetGiftFilter() []*CapsuleGetCapsuleInfoResp_GiftFilter {
	if m != nil {
		return m.GiftFilter
	}
	return nil
}

type CapsuleGetCapsuleInfoResp_GiftList struct {
	// 礼物id
	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id"`
	// 礼物名称
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name"`
	// 礼物数量
	Num int64 `protobuf:"varint,3,opt,name=num,proto3" json:"num"`
	// 权重
	Weight int64 `protobuf:"varint,4,opt,name=weight,proto3" json:"weight"`
	// 礼物图片
	WebUrl string `protobuf:"bytes,5,opt,name=web_url,json=webUrl,proto3" json:"web_url"`
	// 礼物图片
	MobileUrl string `protobuf:"bytes,6,opt,name=mobile_url,json=mobileUrl,proto3" json:"mobile_url"`
	// 用法
	Usage *Usage `protobuf:"bytes,7,opt,name=usage" json:"usage"`
	// 奖品类型 2 头衔
	Type int64 `protobuf:"varint,8,opt,name=type,proto3" json:"type"`
	// 过期时间
	Expire               string   `protobuf:"bytes,9,opt,name=expire,proto3" json:"expire"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CapsuleGetCapsuleInfoResp_GiftList) Reset()         { *m = CapsuleGetCapsuleInfoResp_GiftList{} }
func (m *CapsuleGetCapsuleInfoResp_GiftList) String() string { return proto.CompactTextString(m) }
func (*CapsuleGetCapsuleInfoResp_GiftList) ProtoMessage()    {}
func (*CapsuleGetCapsuleInfoResp_GiftList) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_9467f450102a207d, []int{7, 0}
}
func (m *CapsuleGetCapsuleInfoResp_GiftList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CapsuleGetCapsuleInfoResp_GiftList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CapsuleGetCapsuleInfoResp_GiftList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *CapsuleGetCapsuleInfoResp_GiftList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CapsuleGetCapsuleInfoResp_GiftList.Merge(dst, src)
}
func (m *CapsuleGetCapsuleInfoResp_GiftList) XXX_Size() int {
	return m.Size()
}
func (m *CapsuleGetCapsuleInfoResp_GiftList) XXX_DiscardUnknown() {
	xxx_messageInfo_CapsuleGetCapsuleInfoResp_GiftList.DiscardUnknown(m)
}

var xxx_messageInfo_CapsuleGetCapsuleInfoResp_GiftList proto.InternalMessageInfo

func (m *CapsuleGetCapsuleInfoResp_GiftList) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *CapsuleGetCapsuleInfoResp_GiftList) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CapsuleGetCapsuleInfoResp_GiftList) GetNum() int64 {
	if m != nil {
		return m.Num
	}
	return 0
}

func (m *CapsuleGetCapsuleInfoResp_GiftList) GetWeight() int64 {
	if m != nil {
		return m.Weight
	}
	return 0
}

func (m *CapsuleGetCapsuleInfoResp_GiftList) GetWebUrl() string {
	if m != nil {
		return m.WebUrl
	}
	return ""
}

func (m *CapsuleGetCapsuleInfoResp_GiftList) GetMobileUrl() string {
	if m != nil {
		return m.MobileUrl
	}
	return ""
}

func (m *CapsuleGetCapsuleInfoResp_GiftList) GetUsage() *Usage {
	if m != nil {
		return m.Usage
	}
	return nil
}

func (m *CapsuleGetCapsuleInfoResp_GiftList) GetType() int64 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *CapsuleGetCapsuleInfoResp_GiftList) GetExpire() string {
	if m != nil {
		return m.Expire
	}
	return ""
}

type CapsuleGetCapsuleInfoResp_GiftFilter struct {
	// 礼物id
	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id"`
	// 礼物名称
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name"`
	// 礼物图片
	WebUrl string `protobuf:"bytes,3,opt,name=web_url,json=webUrl,proto3" json:"web_url"`
	// 礼物图片
	MobileUrl string `protobuf:"bytes,4,opt,name=mobile_url,json=mobileUrl,proto3" json:"mobile_url"`
	// 用法
	Usage                *Usage   `protobuf:"bytes,5,opt,name=usage" json:"usage"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CapsuleGetCapsuleInfoResp_GiftFilter) Reset()         { *m = CapsuleGetCapsuleInfoResp_GiftFilter{} }
func (m *CapsuleGetCapsuleInfoResp_GiftFilter) String() string { return proto.CompactTextString(m) }
func (*CapsuleGetCapsuleInfoResp_GiftFilter) ProtoMessage()    {}
func (*CapsuleGetCapsuleInfoResp_GiftFilter) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_9467f450102a207d, []int{7, 1}
}
func (m *CapsuleGetCapsuleInfoResp_GiftFilter) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CapsuleGetCapsuleInfoResp_GiftFilter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CapsuleGetCapsuleInfoResp_GiftFilter.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *CapsuleGetCapsuleInfoResp_GiftFilter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CapsuleGetCapsuleInfoResp_GiftFilter.Merge(dst, src)
}
func (m *CapsuleGetCapsuleInfoResp_GiftFilter) XXX_Size() int {
	return m.Size()
}
func (m *CapsuleGetCapsuleInfoResp_GiftFilter) XXX_DiscardUnknown() {
	xxx_messageInfo_CapsuleGetCapsuleInfoResp_GiftFilter.DiscardUnknown(m)
}

var xxx_messageInfo_CapsuleGetCapsuleInfoResp_GiftFilter proto.InternalMessageInfo

func (m *CapsuleGetCapsuleInfoResp_GiftFilter) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *CapsuleGetCapsuleInfoResp_GiftFilter) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CapsuleGetCapsuleInfoResp_GiftFilter) GetWebUrl() string {
	if m != nil {
		return m.WebUrl
	}
	return ""
}

func (m *CapsuleGetCapsuleInfoResp_GiftFilter) GetMobileUrl() string {
	if m != nil {
		return m.MobileUrl
	}
	return ""
}

func (m *CapsuleGetCapsuleInfoResp_GiftFilter) GetUsage() *Usage {
	if m != nil {
		return m.Usage
	}
	return nil
}

type CapsuleOpenCapsuleByTypeReq struct {
	// 用户uid
	Uid int64 `protobuf:"varint,1,opt,name=uid,proto3" json:"uid"`
	// 扭蛋类型，week：周星
	Type string `protobuf:"bytes,2,opt,name=type,proto3" json:"type"`
	// 扭的个数 1 10 100
	Count int64 `protobuf:"varint,3,opt,name=count,proto3" json:"count"`
	// 平台
	Platform             string   `protobuf:"bytes,4,opt,name=platform,proto3" json:"platform"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CapsuleOpenCapsuleByTypeReq) Reset()         { *m = CapsuleOpenCapsuleByTypeReq{} }
func (m *CapsuleOpenCapsuleByTypeReq) String() string { return proto.CompactTextString(m) }
func (*CapsuleOpenCapsuleByTypeReq) ProtoMessage()    {}
func (*CapsuleOpenCapsuleByTypeReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_9467f450102a207d, []int{8}
}
func (m *CapsuleOpenCapsuleByTypeReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CapsuleOpenCapsuleByTypeReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CapsuleOpenCapsuleByTypeReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *CapsuleOpenCapsuleByTypeReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CapsuleOpenCapsuleByTypeReq.Merge(dst, src)
}
func (m *CapsuleOpenCapsuleByTypeReq) XXX_Size() int {
	return m.Size()
}
func (m *CapsuleOpenCapsuleByTypeReq) XXX_DiscardUnknown() {
	xxx_messageInfo_CapsuleOpenCapsuleByTypeReq.DiscardUnknown(m)
}

var xxx_messageInfo_CapsuleOpenCapsuleByTypeReq proto.InternalMessageInfo

func (m *CapsuleOpenCapsuleByTypeReq) GetUid() int64 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *CapsuleOpenCapsuleByTypeReq) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *CapsuleOpenCapsuleByTypeReq) GetCount() int64 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *CapsuleOpenCapsuleByTypeReq) GetPlatform() string {
	if m != nil {
		return m.Platform
	}
	return ""
}

type CapsuleOpenCapsuleByTypeResp struct {
	// 扭蛋币扣除状态
	Status bool `protobuf:"varint,1,opt,name=status,proto3" json:"status"`
	// 是否包含实物奖品
	IsEntity bool `protobuf:"varint,2,opt,name=isEntity,proto3" json:"isEntity"`
	// 用户扭蛋币拥有状态
	Info *CapsuleOpenCapsuleByTypeResp_CapsuleInfo `protobuf:"bytes,3,opt,name=info" json:"info"`
	// 奖品列表
	Awards []*CapsuleOpenCapsuleByTypeResp_Award `protobuf:"bytes,4,rep,name=awards" json:"awards"`
	// 奖品列表
	Text                 []string `protobuf:"bytes,5,rep,name=text" json:"text"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CapsuleOpenCapsuleByTypeResp) Reset()         { *m = CapsuleOpenCapsuleByTypeResp{} }
func (m *CapsuleOpenCapsuleByTypeResp) String() string { return proto.CompactTextString(m) }
func (*CapsuleOpenCapsuleByTypeResp) ProtoMessage()    {}
func (*CapsuleOpenCapsuleByTypeResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_9467f450102a207d, []int{9}
}
func (m *CapsuleOpenCapsuleByTypeResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CapsuleOpenCapsuleByTypeResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CapsuleOpenCapsuleByTypeResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *CapsuleOpenCapsuleByTypeResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CapsuleOpenCapsuleByTypeResp.Merge(dst, src)
}
func (m *CapsuleOpenCapsuleByTypeResp) XXX_Size() int {
	return m.Size()
}
func (m *CapsuleOpenCapsuleByTypeResp) XXX_DiscardUnknown() {
	xxx_messageInfo_CapsuleOpenCapsuleByTypeResp.DiscardUnknown(m)
}

var xxx_messageInfo_CapsuleOpenCapsuleByTypeResp proto.InternalMessageInfo

func (m *CapsuleOpenCapsuleByTypeResp) GetStatus() bool {
	if m != nil {
		return m.Status
	}
	return false
}

func (m *CapsuleOpenCapsuleByTypeResp) GetIsEntity() bool {
	if m != nil {
		return m.IsEntity
	}
	return false
}

func (m *CapsuleOpenCapsuleByTypeResp) GetInfo() *CapsuleOpenCapsuleByTypeResp_CapsuleInfo {
	if m != nil {
		return m.Info
	}
	return nil
}

func (m *CapsuleOpenCapsuleByTypeResp) GetAwards() []*CapsuleOpenCapsuleByTypeResp_Award {
	if m != nil {
		return m.Awards
	}
	return nil
}

func (m *CapsuleOpenCapsuleByTypeResp) GetText() []string {
	if m != nil {
		return m.Text
	}
	return nil
}

type CapsuleOpenCapsuleByTypeResp_CapsuleInfo struct {
	// 拥有的币
	Coin                 int64    `protobuf:"varint,1,opt,name=coin,proto3" json:"coin"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CapsuleOpenCapsuleByTypeResp_CapsuleInfo) Reset() {
	*m = CapsuleOpenCapsuleByTypeResp_CapsuleInfo{}
}
func (m *CapsuleOpenCapsuleByTypeResp_CapsuleInfo) String() string { return proto.CompactTextString(m) }
func (*CapsuleOpenCapsuleByTypeResp_CapsuleInfo) ProtoMessage()    {}
func (*CapsuleOpenCapsuleByTypeResp_CapsuleInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_9467f450102a207d, []int{9, 0}
}
func (m *CapsuleOpenCapsuleByTypeResp_CapsuleInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CapsuleOpenCapsuleByTypeResp_CapsuleInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CapsuleOpenCapsuleByTypeResp_CapsuleInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *CapsuleOpenCapsuleByTypeResp_CapsuleInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CapsuleOpenCapsuleByTypeResp_CapsuleInfo.Merge(dst, src)
}
func (m *CapsuleOpenCapsuleByTypeResp_CapsuleInfo) XXX_Size() int {
	return m.Size()
}
func (m *CapsuleOpenCapsuleByTypeResp_CapsuleInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_CapsuleOpenCapsuleByTypeResp_CapsuleInfo.DiscardUnknown(m)
}

var xxx_messageInfo_CapsuleOpenCapsuleByTypeResp_CapsuleInfo proto.InternalMessageInfo

func (m *CapsuleOpenCapsuleByTypeResp_CapsuleInfo) GetCoin() int64 {
	if m != nil {
		return m.Coin
	}
	return 0
}

type CapsuleOpenCapsuleByTypeResp_Award struct {
	// 奖品id
	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id"`
	// 奖品名字
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name"`
	// 奖品数量
	Num int64 `protobuf:"varint,3,opt,name=num,proto3" json:"num"`
	// 奖品 X 数量
	Text string `protobuf:"bytes,4,opt,name=text,proto3" json:"text"`
	// 礼物图片
	WebUrl string `protobuf:"bytes,5,opt,name=web_url,json=webUrl,proto3" json:"web_url"`
	// 礼物图片
	MobileUrl string `protobuf:"bytes,6,opt,name=mobile_url,json=mobileUrl,proto3" json:"mobile_url"`
	// 奖品用法说明
	Usage *Usage `protobuf:"bytes,7,opt,name=usage" json:"usage"`
	// 奖品权重
	Weight int64 `protobuf:"varint,8,opt,name=weight,proto3" json:"weight"`
	// 奖品类型 2 头衔
	Type int64 `protobuf:"varint,9,opt,name=type,proto3" json:"type"`
	// 过期时间
	Expire               string   `protobuf:"bytes,10,opt,name=expire,proto3" json:"expire"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CapsuleOpenCapsuleByTypeResp_Award) Reset()         { *m = CapsuleOpenCapsuleByTypeResp_Award{} }
func (m *CapsuleOpenCapsuleByTypeResp_Award) String() string { return proto.CompactTextString(m) }
func (*CapsuleOpenCapsuleByTypeResp_Award) ProtoMessage()    {}
func (*CapsuleOpenCapsuleByTypeResp_Award) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_9467f450102a207d, []int{9, 1}
}
func (m *CapsuleOpenCapsuleByTypeResp_Award) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CapsuleOpenCapsuleByTypeResp_Award) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CapsuleOpenCapsuleByTypeResp_Award.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *CapsuleOpenCapsuleByTypeResp_Award) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CapsuleOpenCapsuleByTypeResp_Award.Merge(dst, src)
}
func (m *CapsuleOpenCapsuleByTypeResp_Award) XXX_Size() int {
	return m.Size()
}
func (m *CapsuleOpenCapsuleByTypeResp_Award) XXX_DiscardUnknown() {
	xxx_messageInfo_CapsuleOpenCapsuleByTypeResp_Award.DiscardUnknown(m)
}

var xxx_messageInfo_CapsuleOpenCapsuleByTypeResp_Award proto.InternalMessageInfo

func (m *CapsuleOpenCapsuleByTypeResp_Award) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *CapsuleOpenCapsuleByTypeResp_Award) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CapsuleOpenCapsuleByTypeResp_Award) GetNum() int64 {
	if m != nil {
		return m.Num
	}
	return 0
}

func (m *CapsuleOpenCapsuleByTypeResp_Award) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

func (m *CapsuleOpenCapsuleByTypeResp_Award) GetWebUrl() string {
	if m != nil {
		return m.WebUrl
	}
	return ""
}

func (m *CapsuleOpenCapsuleByTypeResp_Award) GetMobileUrl() string {
	if m != nil {
		return m.MobileUrl
	}
	return ""
}

func (m *CapsuleOpenCapsuleByTypeResp_Award) GetUsage() *Usage {
	if m != nil {
		return m.Usage
	}
	return nil
}

func (m *CapsuleOpenCapsuleByTypeResp_Award) GetWeight() int64 {
	if m != nil {
		return m.Weight
	}
	return 0
}

func (m *CapsuleOpenCapsuleByTypeResp_Award) GetType() int64 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *CapsuleOpenCapsuleByTypeResp_Award) GetExpire() string {
	if m != nil {
		return m.Expire
	}
	return ""
}

type GetCoinListReq struct {
	Page                 int64    `protobuf:"varint,1,opt,name=page,proto3" json:"page" form:"page" validate:"required"`
	PageSize             int64    `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size" form:"page_size" validate:"required"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetCoinListReq) Reset()         { *m = GetCoinListReq{} }
func (m *GetCoinListReq) String() string { return proto.CompactTextString(m) }
func (*GetCoinListReq) ProtoMessage()    {}
func (*GetCoinListReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_9467f450102a207d, []int{10}
}
func (m *GetCoinListReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetCoinListReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetCoinListReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *GetCoinListReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetCoinListReq.Merge(dst, src)
}
func (m *GetCoinListReq) XXX_Size() int {
	return m.Size()
}
func (m *GetCoinListReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GetCoinListReq.DiscardUnknown(m)
}

var xxx_messageInfo_GetCoinListReq proto.InternalMessageInfo

func (m *GetCoinListReq) GetPage() int64 {
	if m != nil {
		return m.Page
	}
	return 0
}

func (m *GetCoinListReq) GetPageSize() int64 {
	if m != nil {
		return m.PageSize
	}
	return 0
}

type GetCoinListResp struct {
	Total                int64                   `protobuf:"varint,1,opt,name=total,proto3" json:"total"`
	TotalPage            int64                   `protobuf:"varint,2,opt,name=total_page,json=totalPage,proto3" json:"total_page"`
	List                 []*GetCoinListResp_List `protobuf:"bytes,3,rep,name=list" json:"list"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *GetCoinListResp) Reset()         { *m = GetCoinListResp{} }
func (m *GetCoinListResp) String() string { return proto.CompactTextString(m) }
func (*GetCoinListResp) ProtoMessage()    {}
func (*GetCoinListResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_9467f450102a207d, []int{11}
}
func (m *GetCoinListResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetCoinListResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetCoinListResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *GetCoinListResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetCoinListResp.Merge(dst, src)
}
func (m *GetCoinListResp) XXX_Size() int {
	return m.Size()
}
func (m *GetCoinListResp) XXX_DiscardUnknown() {
	xxx_messageInfo_GetCoinListResp.DiscardUnknown(m)
}

var xxx_messageInfo_GetCoinListResp proto.InternalMessageInfo

func (m *GetCoinListResp) GetTotal() int64 {
	if m != nil {
		return m.Total
	}
	return 0
}

func (m *GetCoinListResp) GetTotalPage() int64 {
	if m != nil {
		return m.TotalPage
	}
	return 0
}

func (m *GetCoinListResp) GetList() []*GetCoinListResp_List {
	if m != nil {
		return m.List
	}
	return nil
}

type GetCoinListResp_List struct {
	Id                   int64                           `protobuf:"varint,1,opt,name=id,proto3" json:"id"`
	Title                string                          `protobuf:"bytes,2,opt,name=title,proto3" json:"title"`
	ChangeNum            int64                           `protobuf:"varint,3,opt,name=change_num,json=changeNum,proto3" json:"change_num"`
	StartTime            int64                           `protobuf:"varint,4,opt,name=start_time,json=startTime,proto3" json:"start_time"`
	EndTime              int64                           `protobuf:"varint,5,opt,name=end_time,json=endTime,proto3" json:"end_time"`
	Status               int64                           `protobuf:"varint,6,opt,name=status,proto3" json:"status"`
	GiftType             int64                           `protobuf:"varint,7,opt,name=gift_type,json=giftType,proto3" json:"gift_type"`
	GiftConfig           string                          `protobuf:"bytes,8,opt,name=gift_config,json=giftConfig,proto3" json:"gift_config"`
	AreaIds              []*GetCoinListResp_List_AreaIds `protobuf:"bytes,9,rep,name=area_ids,json=areaIds" json:"area_ids"`
	XXX_NoUnkeyedLiteral struct{}                        `json:"-"`
	XXX_unrecognized     []byte                          `json:"-"`
	XXX_sizecache        int32                           `json:"-"`
}

func (m *GetCoinListResp_List) Reset()         { *m = GetCoinListResp_List{} }
func (m *GetCoinListResp_List) String() string { return proto.CompactTextString(m) }
func (*GetCoinListResp_List) ProtoMessage()    {}
func (*GetCoinListResp_List) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_9467f450102a207d, []int{11, 0}
}
func (m *GetCoinListResp_List) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetCoinListResp_List) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetCoinListResp_List.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *GetCoinListResp_List) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetCoinListResp_List.Merge(dst, src)
}
func (m *GetCoinListResp_List) XXX_Size() int {
	return m.Size()
}
func (m *GetCoinListResp_List) XXX_DiscardUnknown() {
	xxx_messageInfo_GetCoinListResp_List.DiscardUnknown(m)
}

var xxx_messageInfo_GetCoinListResp_List proto.InternalMessageInfo

func (m *GetCoinListResp_List) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *GetCoinListResp_List) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *GetCoinListResp_List) GetChangeNum() int64 {
	if m != nil {
		return m.ChangeNum
	}
	return 0
}

func (m *GetCoinListResp_List) GetStartTime() int64 {
	if m != nil {
		return m.StartTime
	}
	return 0
}

func (m *GetCoinListResp_List) GetEndTime() int64 {
	if m != nil {
		return m.EndTime
	}
	return 0
}

func (m *GetCoinListResp_List) GetStatus() int64 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *GetCoinListResp_List) GetGiftType() int64 {
	if m != nil {
		return m.GiftType
	}
	return 0
}

func (m *GetCoinListResp_List) GetGiftConfig() string {
	if m != nil {
		return m.GiftConfig
	}
	return ""
}

func (m *GetCoinListResp_List) GetAreaIds() []*GetCoinListResp_List_AreaIds {
	if m != nil {
		return m.AreaIds
	}
	return nil
}

type GetCoinListResp_List_AreaIds struct {
	ParentId             int64    `protobuf:"varint,1,opt,name=parent_id,json=parentId,proto3" json:"parent_id"`
	IsAll                int64    `protobuf:"varint,2,opt,name=is_all,json=isAll,proto3" json:"is_all"`
	List                 []int64  `protobuf:"varint,3,rep,packed,name=list" json:"list"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetCoinListResp_List_AreaIds) Reset()         { *m = GetCoinListResp_List_AreaIds{} }
func (m *GetCoinListResp_List_AreaIds) String() string { return proto.CompactTextString(m) }
func (*GetCoinListResp_List_AreaIds) ProtoMessage()    {}
func (*GetCoinListResp_List_AreaIds) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_9467f450102a207d, []int{11, 0, 0}
}
func (m *GetCoinListResp_List_AreaIds) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetCoinListResp_List_AreaIds) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetCoinListResp_List_AreaIds.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *GetCoinListResp_List_AreaIds) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetCoinListResp_List_AreaIds.Merge(dst, src)
}
func (m *GetCoinListResp_List_AreaIds) XXX_Size() int {
	return m.Size()
}
func (m *GetCoinListResp_List_AreaIds) XXX_DiscardUnknown() {
	xxx_messageInfo_GetCoinListResp_List_AreaIds.DiscardUnknown(m)
}

var xxx_messageInfo_GetCoinListResp_List_AreaIds proto.InternalMessageInfo

func (m *GetCoinListResp_List_AreaIds) GetParentId() int64 {
	if m != nil {
		return m.ParentId
	}
	return 0
}

func (m *GetCoinListResp_List_AreaIds) GetIsAll() int64 {
	if m != nil {
		return m.IsAll
	}
	return 0
}

func (m *GetCoinListResp_List_AreaIds) GetList() []int64 {
	if m != nil {
		return m.List
	}
	return nil
}

type UpdateCoinConfigReq struct {
	Id                   int64                          `protobuf:"varint,1,opt,name=id,proto3" json:"id" form:"id"`
	Title                string                         `protobuf:"bytes,2,opt,name=title,proto3" json:"title" form:"title" validate:"required"`
	ChangeNum            int64                          `protobuf:"varint,3,opt,name=change_num,json=changeNum,proto3" json:"change_num" form:"change_num" validate:"required"`
	StartTime            int64                          `protobuf:"varint,4,opt,name=start_time,json=startTime,proto3" json:"start_time" form:"start_time" validate:"required"`
	EndTime              int64                          `protobuf:"varint,5,opt,name=end_time,json=endTime,proto3" json:"end_time" form:"end_time" validate:"required"`
	Status               int64                          `protobuf:"varint,6,opt,name=status,proto3" json:"status" form:"status" validate:"required"`
	GiftType             int64                          `protobuf:"varint,7,opt,name=gift_type,json=giftType,proto3" json:"gift_type" form:"gift_type" validate:"required"`
	GiftIds              []int64                        `protobuf:"varint,8,rep,packed,name=gift_ids,json=giftIds" json:"gift_ids" form:"gift_ids"`
	AreaIds              []*UpdateCoinConfigReq_AreaIds `protobuf:"bytes,9,rep,name=area_ids,json=areaIds" json:"area_ids" form:"area_ids" validate:"required"`
	XXX_NoUnkeyedLiteral struct{}                       `json:"-"`
	XXX_unrecognized     []byte                         `json:"-"`
	XXX_sizecache        int32                          `json:"-"`
}

func (m *UpdateCoinConfigReq) Reset()         { *m = UpdateCoinConfigReq{} }
func (m *UpdateCoinConfigReq) String() string { return proto.CompactTextString(m) }
func (*UpdateCoinConfigReq) ProtoMessage()    {}
func (*UpdateCoinConfigReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_9467f450102a207d, []int{12}
}
func (m *UpdateCoinConfigReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateCoinConfigReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateCoinConfigReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *UpdateCoinConfigReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateCoinConfigReq.Merge(dst, src)
}
func (m *UpdateCoinConfigReq) XXX_Size() int {
	return m.Size()
}
func (m *UpdateCoinConfigReq) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateCoinConfigReq.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateCoinConfigReq proto.InternalMessageInfo

func (m *UpdateCoinConfigReq) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *UpdateCoinConfigReq) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *UpdateCoinConfigReq) GetChangeNum() int64 {
	if m != nil {
		return m.ChangeNum
	}
	return 0
}

func (m *UpdateCoinConfigReq) GetStartTime() int64 {
	if m != nil {
		return m.StartTime
	}
	return 0
}

func (m *UpdateCoinConfigReq) GetEndTime() int64 {
	if m != nil {
		return m.EndTime
	}
	return 0
}

func (m *UpdateCoinConfigReq) GetStatus() int64 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *UpdateCoinConfigReq) GetGiftType() int64 {
	if m != nil {
		return m.GiftType
	}
	return 0
}

func (m *UpdateCoinConfigReq) GetGiftIds() []int64 {
	if m != nil {
		return m.GiftIds
	}
	return nil
}

func (m *UpdateCoinConfigReq) GetAreaIds() []*UpdateCoinConfigReq_AreaIds {
	if m != nil {
		return m.AreaIds
	}
	return nil
}

type UpdateCoinConfigReq_AreaIds struct {
	ParentId             int64    `protobuf:"varint,1,opt,name=parent_id,json=parentId,proto3" json:"parent_id" form:"parent_id" validate:"required"`
	IsAll                int64    `protobuf:"varint,2,opt,name=is_all,json=isAll,proto3" json:"is_all" form:"is_all"`
	List                 []int64  `protobuf:"varint,3,rep,packed,name=list" json:"list" form:"list" validate:"required"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpdateCoinConfigReq_AreaIds) Reset()         { *m = UpdateCoinConfigReq_AreaIds{} }
func (m *UpdateCoinConfigReq_AreaIds) String() string { return proto.CompactTextString(m) }
func (*UpdateCoinConfigReq_AreaIds) ProtoMessage()    {}
func (*UpdateCoinConfigReq_AreaIds) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_9467f450102a207d, []int{12, 0}
}
func (m *UpdateCoinConfigReq_AreaIds) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateCoinConfigReq_AreaIds) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateCoinConfigReq_AreaIds.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *UpdateCoinConfigReq_AreaIds) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateCoinConfigReq_AreaIds.Merge(dst, src)
}
func (m *UpdateCoinConfigReq_AreaIds) XXX_Size() int {
	return m.Size()
}
func (m *UpdateCoinConfigReq_AreaIds) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateCoinConfigReq_AreaIds.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateCoinConfigReq_AreaIds proto.InternalMessageInfo

func (m *UpdateCoinConfigReq_AreaIds) GetParentId() int64 {
	if m != nil {
		return m.ParentId
	}
	return 0
}

func (m *UpdateCoinConfigReq_AreaIds) GetIsAll() int64 {
	if m != nil {
		return m.IsAll
	}
	return 0
}

func (m *UpdateCoinConfigReq_AreaIds) GetList() []int64 {
	if m != nil {
		return m.List
	}
	return nil
}

type UpdateCoinConfigResp struct {
	Status               bool     `protobuf:"varint,1,opt,name=status,proto3" json:"status"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpdateCoinConfigResp) Reset()         { *m = UpdateCoinConfigResp{} }
func (m *UpdateCoinConfigResp) String() string { return proto.CompactTextString(m) }
func (*UpdateCoinConfigResp) ProtoMessage()    {}
func (*UpdateCoinConfigResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_9467f450102a207d, []int{13}
}
func (m *UpdateCoinConfigResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateCoinConfigResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateCoinConfigResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *UpdateCoinConfigResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateCoinConfigResp.Merge(dst, src)
}
func (m *UpdateCoinConfigResp) XXX_Size() int {
	return m.Size()
}
func (m *UpdateCoinConfigResp) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateCoinConfigResp.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateCoinConfigResp proto.InternalMessageInfo

func (m *UpdateCoinConfigResp) GetStatus() bool {
	if m != nil {
		return m.Status
	}
	return false
}

type UpdateCoinStatusReq struct {
	Id                   int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id" form:"id" validate:"required"`
	Status               int64    `protobuf:"varint,2,opt,name=status,proto3" json:"status" form:"status"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpdateCoinStatusReq) Reset()         { *m = UpdateCoinStatusReq{} }
func (m *UpdateCoinStatusReq) String() string { return proto.CompactTextString(m) }
func (*UpdateCoinStatusReq) ProtoMessage()    {}
func (*UpdateCoinStatusReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_9467f450102a207d, []int{14}
}
func (m *UpdateCoinStatusReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateCoinStatusReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateCoinStatusReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *UpdateCoinStatusReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateCoinStatusReq.Merge(dst, src)
}
func (m *UpdateCoinStatusReq) XXX_Size() int {
	return m.Size()
}
func (m *UpdateCoinStatusReq) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateCoinStatusReq.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateCoinStatusReq proto.InternalMessageInfo

func (m *UpdateCoinStatusReq) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *UpdateCoinStatusReq) GetStatus() int64 {
	if m != nil {
		return m.Status
	}
	return 0
}

type UpdateCoinStatusResp struct {
	Status               bool     `protobuf:"varint,1,opt,name=status,proto3" json:"status"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpdateCoinStatusResp) Reset()         { *m = UpdateCoinStatusResp{} }
func (m *UpdateCoinStatusResp) String() string { return proto.CompactTextString(m) }
func (*UpdateCoinStatusResp) ProtoMessage()    {}
func (*UpdateCoinStatusResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_9467f450102a207d, []int{15}
}
func (m *UpdateCoinStatusResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateCoinStatusResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateCoinStatusResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *UpdateCoinStatusResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateCoinStatusResp.Merge(dst, src)
}
func (m *UpdateCoinStatusResp) XXX_Size() int {
	return m.Size()
}
func (m *UpdateCoinStatusResp) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateCoinStatusResp.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateCoinStatusResp proto.InternalMessageInfo

func (m *UpdateCoinStatusResp) GetStatus() bool {
	if m != nil {
		return m.Status
	}
	return false
}

type DeleteCoinReq struct {
	Id                   int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id" form:"id" validate:"required"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteCoinReq) Reset()         { *m = DeleteCoinReq{} }
func (m *DeleteCoinReq) String() string { return proto.CompactTextString(m) }
func (*DeleteCoinReq) ProtoMessage()    {}
func (*DeleteCoinReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_9467f450102a207d, []int{16}
}
func (m *DeleteCoinReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeleteCoinReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeleteCoinReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *DeleteCoinReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteCoinReq.Merge(dst, src)
}
func (m *DeleteCoinReq) XXX_Size() int {
	return m.Size()
}
func (m *DeleteCoinReq) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteCoinReq.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteCoinReq proto.InternalMessageInfo

func (m *DeleteCoinReq) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type DeleteCoinResp struct {
	Status               bool     `protobuf:"varint,1,opt,name=status,proto3" json:"status"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteCoinResp) Reset()         { *m = DeleteCoinResp{} }
func (m *DeleteCoinResp) String() string { return proto.CompactTextString(m) }
func (*DeleteCoinResp) ProtoMessage()    {}
func (*DeleteCoinResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_9467f450102a207d, []int{17}
}
func (m *DeleteCoinResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeleteCoinResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeleteCoinResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *DeleteCoinResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteCoinResp.Merge(dst, src)
}
func (m *DeleteCoinResp) XXX_Size() int {
	return m.Size()
}
func (m *DeleteCoinResp) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteCoinResp.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteCoinResp proto.InternalMessageInfo

func (m *DeleteCoinResp) GetStatus() bool {
	if m != nil {
		return m.Status
	}
	return false
}

type GetPoolListReq struct {
	Page                 int64    `protobuf:"varint,1,opt,name=page,proto3" json:"page" form:"page" validate:"required"`
	PageSize             int64    `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size" form:"page_size" validate:"required"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetPoolListReq) Reset()         { *m = GetPoolListReq{} }
func (m *GetPoolListReq) String() string { return proto.CompactTextString(m) }
func (*GetPoolListReq) ProtoMessage()    {}
func (*GetPoolListReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_9467f450102a207d, []int{18}
}
func (m *GetPoolListReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetPoolListReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetPoolListReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *GetPoolListReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetPoolListReq.Merge(dst, src)
}
func (m *GetPoolListReq) XXX_Size() int {
	return m.Size()
}
func (m *GetPoolListReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GetPoolListReq.DiscardUnknown(m)
}

var xxx_messageInfo_GetPoolListReq proto.InternalMessageInfo

func (m *GetPoolListReq) GetPage() int64 {
	if m != nil {
		return m.Page
	}
	return 0
}

func (m *GetPoolListReq) GetPageSize() int64 {
	if m != nil {
		return m.PageSize
	}
	return 0
}

type GetPoolListResp struct {
	Total                int64                   `protobuf:"varint,1,opt,name=total,proto3" json:"total"`
	TotalPage            int64                   `protobuf:"varint,2,opt,name=total_page,json=totalPage,proto3" json:"total_page"`
	List                 []*GetPoolListResp_List `protobuf:"bytes,3,rep,name=list" json:"list"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *GetPoolListResp) Reset()         { *m = GetPoolListResp{} }
func (m *GetPoolListResp) String() string { return proto.CompactTextString(m) }
func (*GetPoolListResp) ProtoMessage()    {}
func (*GetPoolListResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_9467f450102a207d, []int{19}
}
func (m *GetPoolListResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetPoolListResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetPoolListResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *GetPoolListResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetPoolListResp.Merge(dst, src)
}
func (m *GetPoolListResp) XXX_Size() int {
	return m.Size()
}
func (m *GetPoolListResp) XXX_DiscardUnknown() {
	xxx_messageInfo_GetPoolListResp.DiscardUnknown(m)
}

var xxx_messageInfo_GetPoolListResp proto.InternalMessageInfo

func (m *GetPoolListResp) GetTotal() int64 {
	if m != nil {
		return m.Total
	}
	return 0
}

func (m *GetPoolListResp) GetTotalPage() int64 {
	if m != nil {
		return m.TotalPage
	}
	return 0
}

func (m *GetPoolListResp) GetList() []*GetPoolListResp_List {
	if m != nil {
		return m.List
	}
	return nil
}

type GetPoolListResp_List struct {
	Id                   int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id"`
	CoinId               int64    `protobuf:"varint,2,opt,name=coin_id,json=coinId,proto3" json:"coin_id"`
	Title                string   `protobuf:"bytes,3,opt,name=title,proto3" json:"title"`
	CoinTitle            string   `protobuf:"bytes,8,opt,name=coin_title,json=coinTitle,proto3" json:"coin_title"`
	StartTime            int64    `protobuf:"varint,4,opt,name=start_time,json=startTime,proto3" json:"start_time"`
	EndTime              int64    `protobuf:"varint,5,opt,name=end_time,json=endTime,proto3" json:"end_time"`
	Status               int64    `protobuf:"varint,6,opt,name=status,proto3" json:"status"`
	Rule                 string   `protobuf:"bytes,7,opt,name=rule,proto3" json:"rule"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetPoolListResp_List) Reset()         { *m = GetPoolListResp_List{} }
func (m *GetPoolListResp_List) String() string { return proto.CompactTextString(m) }
func (*GetPoolListResp_List) ProtoMessage()    {}
func (*GetPoolListResp_List) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_9467f450102a207d, []int{19, 0}
}
func (m *GetPoolListResp_List) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetPoolListResp_List) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetPoolListResp_List.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *GetPoolListResp_List) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetPoolListResp_List.Merge(dst, src)
}
func (m *GetPoolListResp_List) XXX_Size() int {
	return m.Size()
}
func (m *GetPoolListResp_List) XXX_DiscardUnknown() {
	xxx_messageInfo_GetPoolListResp_List.DiscardUnknown(m)
}

var xxx_messageInfo_GetPoolListResp_List proto.InternalMessageInfo

func (m *GetPoolListResp_List) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *GetPoolListResp_List) GetCoinId() int64 {
	if m != nil {
		return m.CoinId
	}
	return 0
}

func (m *GetPoolListResp_List) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *GetPoolListResp_List) GetCoinTitle() string {
	if m != nil {
		return m.CoinTitle
	}
	return ""
}

func (m *GetPoolListResp_List) GetStartTime() int64 {
	if m != nil {
		return m.StartTime
	}
	return 0
}

func (m *GetPoolListResp_List) GetEndTime() int64 {
	if m != nil {
		return m.EndTime
	}
	return 0
}

func (m *GetPoolListResp_List) GetStatus() int64 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *GetPoolListResp_List) GetRule() string {
	if m != nil {
		return m.Rule
	}
	return ""
}

type UpdatePoolReq struct {
	Id                   int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id" form:"id"`
	CoinId               int64    `protobuf:"varint,2,opt,name=coin_id,json=coinId,proto3" json:"coin_id" form:"coin_id" validate:"required"`
	Title                string   `protobuf:"bytes,3,opt,name=title,proto3" json:"title" form:"title" validate:"required"`
	StartTime            int64    `protobuf:"varint,4,opt,name=start_time,json=startTime,proto3" json:"start_time" form:"start_time" validate:"required"`
	EndTime              int64    `protobuf:"varint,5,opt,name=end_time,json=endTime,proto3" json:"end_time" form:"end_time" validate:"required"`
	Rule                 string   `protobuf:"bytes,6,opt,name=rule,proto3" json:"rule" form:"rule" validate:"required"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpdatePoolReq) Reset()         { *m = UpdatePoolReq{} }
func (m *UpdatePoolReq) String() string { return proto.CompactTextString(m) }
func (*UpdatePoolReq) ProtoMessage()    {}
func (*UpdatePoolReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_9467f450102a207d, []int{20}
}
func (m *UpdatePoolReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdatePoolReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdatePoolReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *UpdatePoolReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdatePoolReq.Merge(dst, src)
}
func (m *UpdatePoolReq) XXX_Size() int {
	return m.Size()
}
func (m *UpdatePoolReq) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdatePoolReq.DiscardUnknown(m)
}

var xxx_messageInfo_UpdatePoolReq proto.InternalMessageInfo

func (m *UpdatePoolReq) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *UpdatePoolReq) GetCoinId() int64 {
	if m != nil {
		return m.CoinId
	}
	return 0
}

func (m *UpdatePoolReq) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *UpdatePoolReq) GetStartTime() int64 {
	if m != nil {
		return m.StartTime
	}
	return 0
}

func (m *UpdatePoolReq) GetEndTime() int64 {
	if m != nil {
		return m.EndTime
	}
	return 0
}

func (m *UpdatePoolReq) GetRule() string {
	if m != nil {
		return m.Rule
	}
	return ""
}

type UpdatePoolResp struct {
	Status               bool     `protobuf:"varint,1,opt,name=status,proto3" json:"status"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpdatePoolResp) Reset()         { *m = UpdatePoolResp{} }
func (m *UpdatePoolResp) String() string { return proto.CompactTextString(m) }
func (*UpdatePoolResp) ProtoMessage()    {}
func (*UpdatePoolResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_9467f450102a207d, []int{21}
}
func (m *UpdatePoolResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdatePoolResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdatePoolResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *UpdatePoolResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdatePoolResp.Merge(dst, src)
}
func (m *UpdatePoolResp) XXX_Size() int {
	return m.Size()
}
func (m *UpdatePoolResp) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdatePoolResp.DiscardUnknown(m)
}

var xxx_messageInfo_UpdatePoolResp proto.InternalMessageInfo

func (m *UpdatePoolResp) GetStatus() bool {
	if m != nil {
		return m.Status
	}
	return false
}

type DeletePoolReq struct {
	Id                   int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id" form:"id" validate:"required"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeletePoolReq) Reset()         { *m = DeletePoolReq{} }
func (m *DeletePoolReq) String() string { return proto.CompactTextString(m) }
func (*DeletePoolReq) ProtoMessage()    {}
func (*DeletePoolReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_9467f450102a207d, []int{22}
}
func (m *DeletePoolReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeletePoolReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeletePoolReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *DeletePoolReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeletePoolReq.Merge(dst, src)
}
func (m *DeletePoolReq) XXX_Size() int {
	return m.Size()
}
func (m *DeletePoolReq) XXX_DiscardUnknown() {
	xxx_messageInfo_DeletePoolReq.DiscardUnknown(m)
}

var xxx_messageInfo_DeletePoolReq proto.InternalMessageInfo

func (m *DeletePoolReq) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type DeletePoolResp struct {
	Status               bool     `protobuf:"varint,1,opt,name=status,proto3" json:"status"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeletePoolResp) Reset()         { *m = DeletePoolResp{} }
func (m *DeletePoolResp) String() string { return proto.CompactTextString(m) }
func (*DeletePoolResp) ProtoMessage()    {}
func (*DeletePoolResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_9467f450102a207d, []int{23}
}
func (m *DeletePoolResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeletePoolResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeletePoolResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *DeletePoolResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeletePoolResp.Merge(dst, src)
}
func (m *DeletePoolResp) XXX_Size() int {
	return m.Size()
}
func (m *DeletePoolResp) XXX_DiscardUnknown() {
	xxx_messageInfo_DeletePoolResp.DiscardUnknown(m)
}

var xxx_messageInfo_DeletePoolResp proto.InternalMessageInfo

func (m *DeletePoolResp) GetStatus() bool {
	if m != nil {
		return m.Status
	}
	return false
}

type UpdatePoolStatusReq struct {
	Id                   int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id" form:"id" validate:"required"`
	Status               int64    `protobuf:"varint,2,opt,name=status,proto3" json:"status" form:"status"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpdatePoolStatusReq) Reset()         { *m = UpdatePoolStatusReq{} }
func (m *UpdatePoolStatusReq) String() string { return proto.CompactTextString(m) }
func (*UpdatePoolStatusReq) ProtoMessage()    {}
func (*UpdatePoolStatusReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_9467f450102a207d, []int{24}
}
func (m *UpdatePoolStatusReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdatePoolStatusReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdatePoolStatusReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *UpdatePoolStatusReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdatePoolStatusReq.Merge(dst, src)
}
func (m *UpdatePoolStatusReq) XXX_Size() int {
	return m.Size()
}
func (m *UpdatePoolStatusReq) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdatePoolStatusReq.DiscardUnknown(m)
}

var xxx_messageInfo_UpdatePoolStatusReq proto.InternalMessageInfo

func (m *UpdatePoolStatusReq) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *UpdatePoolStatusReq) GetStatus() int64 {
	if m != nil {
		return m.Status
	}
	return 0
}

type UpdatePoolStatusResp struct {
	Status               bool     `protobuf:"varint,1,opt,name=status,proto3" json:"status"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpdatePoolStatusResp) Reset()         { *m = UpdatePoolStatusResp{} }
func (m *UpdatePoolStatusResp) String() string { return proto.CompactTextString(m) }
func (*UpdatePoolStatusResp) ProtoMessage()    {}
func (*UpdatePoolStatusResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_9467f450102a207d, []int{25}
}
func (m *UpdatePoolStatusResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdatePoolStatusResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdatePoolStatusResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *UpdatePoolStatusResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdatePoolStatusResp.Merge(dst, src)
}
func (m *UpdatePoolStatusResp) XXX_Size() int {
	return m.Size()
}
func (m *UpdatePoolStatusResp) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdatePoolStatusResp.DiscardUnknown(m)
}

var xxx_messageInfo_UpdatePoolStatusResp proto.InternalMessageInfo

func (m *UpdatePoolStatusResp) GetStatus() bool {
	if m != nil {
		return m.Status
	}
	return false
}

type GetPoolPrizeReq struct {
	PoolId               int64    `protobuf:"varint,1,opt,name=pool_id,json=poolId,proto3" json:"pool_id" form:"pool_id" validate:"required"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetPoolPrizeReq) Reset()         { *m = GetPoolPrizeReq{} }
func (m *GetPoolPrizeReq) String() string { return proto.CompactTextString(m) }
func (*GetPoolPrizeReq) ProtoMessage()    {}
func (*GetPoolPrizeReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_9467f450102a207d, []int{26}
}
func (m *GetPoolPrizeReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetPoolPrizeReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetPoolPrizeReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *GetPoolPrizeReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetPoolPrizeReq.Merge(dst, src)
}
func (m *GetPoolPrizeReq) XXX_Size() int {
	return m.Size()
}
func (m *GetPoolPrizeReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GetPoolPrizeReq.DiscardUnknown(m)
}

var xxx_messageInfo_GetPoolPrizeReq proto.InternalMessageInfo

func (m *GetPoolPrizeReq) GetPoolId() int64 {
	if m != nil {
		return m.PoolId
	}
	return 0
}

type GetPoolPrizeResp struct {
	List                 []*GetPoolPrizeResp_List `protobuf:"bytes,1,rep,name=list" json:"list"`
	XXX_NoUnkeyedLiteral struct{}                 `json:"-"`
	XXX_unrecognized     []byte                   `json:"-"`
	XXX_sizecache        int32                    `json:"-"`
}

func (m *GetPoolPrizeResp) Reset()         { *m = GetPoolPrizeResp{} }
func (m *GetPoolPrizeResp) String() string { return proto.CompactTextString(m) }
func (*GetPoolPrizeResp) ProtoMessage()    {}
func (*GetPoolPrizeResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_9467f450102a207d, []int{27}
}
func (m *GetPoolPrizeResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetPoolPrizeResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetPoolPrizeResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *GetPoolPrizeResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetPoolPrizeResp.Merge(dst, src)
}
func (m *GetPoolPrizeResp) XXX_Size() int {
	return m.Size()
}
func (m *GetPoolPrizeResp) XXX_DiscardUnknown() {
	xxx_messageInfo_GetPoolPrizeResp.DiscardUnknown(m)
}

var xxx_messageInfo_GetPoolPrizeResp proto.InternalMessageInfo

func (m *GetPoolPrizeResp) GetList() []*GetPoolPrizeResp_List {
	if m != nil {
		return m.List
	}
	return nil
}

type GetPoolPrizeResp_List struct {
	Id                   int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id"`
	PoolId               int64    `protobuf:"varint,2,opt,name=pool_id,json=poolId,proto3" json:"pool_id"`
	Type                 int64    `protobuf:"varint,3,opt,name=type,proto3" json:"type"`
	Num                  int64    `protobuf:"varint,4,opt,name=num,proto3" json:"num"`
	ObjectId             int64    `protobuf:"varint,5,opt,name=object_id,json=objectId,proto3" json:"object_id"`
	WebUrl               string   `protobuf:"bytes,6,opt,name=web_url,json=webUrl,proto3" json:"web_url"`
	MobileUrl            string   `protobuf:"bytes,7,opt,name=mobile_url,json=mobileUrl,proto3" json:"mobile_url"`
	Description          string   `protobuf:"bytes,8,opt,name=description,proto3" json:"description"`
	JumpUrl              string   `protobuf:"bytes,9,opt,name=jump_url,json=jumpUrl,proto3" json:"jump_url"`
	ProType              int64    `protobuf:"varint,10,opt,name=pro_type,json=proType,proto3" json:"pro_type"`
	Chance               string   `protobuf:"bytes,11,opt,name=chance,proto3" json:"chance"`
	Loop                 int64    `protobuf:"varint,12,opt,name=loop,proto3" json:"loop"`
	Limit                int64    `protobuf:"varint,13,opt,name=limit,proto3" json:"limit"`
	Name                 string   `protobuf:"bytes,14,opt,name=name,proto3" json:"name"`
	Weight               int64    `protobuf:"varint,15,opt,name=weight,proto3" json:"weight"`
	WhiteUids            []int64  `protobuf:"varint,16,rep,packed,name=white_uids,json=whiteUids" json:"white_uids"`
	Expire               int64    `protobuf:"varint,17,opt,name=expire,proto3" json:"expire"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetPoolPrizeResp_List) Reset()         { *m = GetPoolPrizeResp_List{} }
func (m *GetPoolPrizeResp_List) String() string { return proto.CompactTextString(m) }
func (*GetPoolPrizeResp_List) ProtoMessage()    {}
func (*GetPoolPrizeResp_List) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_9467f450102a207d, []int{27, 0}
}
func (m *GetPoolPrizeResp_List) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetPoolPrizeResp_List) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetPoolPrizeResp_List.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *GetPoolPrizeResp_List) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetPoolPrizeResp_List.Merge(dst, src)
}
func (m *GetPoolPrizeResp_List) XXX_Size() int {
	return m.Size()
}
func (m *GetPoolPrizeResp_List) XXX_DiscardUnknown() {
	xxx_messageInfo_GetPoolPrizeResp_List.DiscardUnknown(m)
}

var xxx_messageInfo_GetPoolPrizeResp_List proto.InternalMessageInfo

func (m *GetPoolPrizeResp_List) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *GetPoolPrizeResp_List) GetPoolId() int64 {
	if m != nil {
		return m.PoolId
	}
	return 0
}

func (m *GetPoolPrizeResp_List) GetType() int64 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *GetPoolPrizeResp_List) GetNum() int64 {
	if m != nil {
		return m.Num
	}
	return 0
}

func (m *GetPoolPrizeResp_List) GetObjectId() int64 {
	if m != nil {
		return m.ObjectId
	}
	return 0
}

func (m *GetPoolPrizeResp_List) GetWebUrl() string {
	if m != nil {
		return m.WebUrl
	}
	return ""
}

func (m *GetPoolPrizeResp_List) GetMobileUrl() string {
	if m != nil {
		return m.MobileUrl
	}
	return ""
}

func (m *GetPoolPrizeResp_List) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *GetPoolPrizeResp_List) GetJumpUrl() string {
	if m != nil {
		return m.JumpUrl
	}
	return ""
}

func (m *GetPoolPrizeResp_List) GetProType() int64 {
	if m != nil {
		return m.ProType
	}
	return 0
}

func (m *GetPoolPrizeResp_List) GetChance() string {
	if m != nil {
		return m.Chance
	}
	return ""
}

func (m *GetPoolPrizeResp_List) GetLoop() int64 {
	if m != nil {
		return m.Loop
	}
	return 0
}

func (m *GetPoolPrizeResp_List) GetLimit() int64 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *GetPoolPrizeResp_List) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *GetPoolPrizeResp_List) GetWeight() int64 {
	if m != nil {
		return m.Weight
	}
	return 0
}

func (m *GetPoolPrizeResp_List) GetWhiteUids() []int64 {
	if m != nil {
		return m.WhiteUids
	}
	return nil
}

func (m *GetPoolPrizeResp_List) GetExpire() int64 {
	if m != nil {
		return m.Expire
	}
	return 0
}

type UpdatePoolPrizeReq struct {
	Id                   int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id" form:"id"`
	PoolId               int64    `protobuf:"varint,2,opt,name=pool_id,json=poolId,proto3" json:"pool_id" form:"pool_id"`
	Type                 int64    `protobuf:"varint,3,opt,name=type,proto3" json:"type" form:"type" validate:"required"`
	Num                  int64    `protobuf:"varint,4,opt,name=num,proto3" json:"num" form:"num" validate:"required"`
	ObjectId             int64    `protobuf:"varint,5,opt,name=object_id,json=objectId,proto3" json:"object_id" form:"object_id"`
	Expire               int64    `protobuf:"varint,6,opt,name=expire,proto3" json:"expire" form:"expire"`
	WebUrl               string   `protobuf:"bytes,7,opt,name=web_url,json=webUrl,proto3" json:"web_url" form:"web_url" validate:"required"`
	MobileUrl            string   `protobuf:"bytes,8,opt,name=mobile_url,json=mobileUrl,proto3" json:"mobile_url" form:"mobile_url" validate:"required"`
	Description          string   `protobuf:"bytes,9,opt,name=description,proto3" json:"description" form:"description" validate:"required"`
	JumpUrl              string   `protobuf:"bytes,10,opt,name=jump_url,json=jumpUrl,proto3" json:"jump_url" form:"jump_url"`
	ProType              int64    `protobuf:"varint,11,opt,name=pro_type,json=proType,proto3" json:"pro_type" form:"pro_type" validate:"required"`
	Chance               int64    `protobuf:"varint,12,opt,name=chance,proto3" json:"chance" form:"chance"`
	Loop                 int64    `protobuf:"varint,13,opt,name=loop,proto3" json:"loop" form:"loop"`
	Limit                int64    `protobuf:"varint,14,opt,name=limit,proto3" json:"limit" form:"limit"`
	Weight               int64    `protobuf:"varint,15,opt,name=weight,proto3" json:"weight"`
	WhiteUids            []int64  `protobuf:"varint,16,rep,packed,name=white_uids,json=whiteUids" json:"white_uids"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpdatePoolPrizeReq) Reset()         { *m = UpdatePoolPrizeReq{} }
func (m *UpdatePoolPrizeReq) String() string { return proto.CompactTextString(m) }
func (*UpdatePoolPrizeReq) ProtoMessage()    {}
func (*UpdatePoolPrizeReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_9467f450102a207d, []int{28}
}
func (m *UpdatePoolPrizeReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdatePoolPrizeReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdatePoolPrizeReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *UpdatePoolPrizeReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdatePoolPrizeReq.Merge(dst, src)
}
func (m *UpdatePoolPrizeReq) XXX_Size() int {
	return m.Size()
}
func (m *UpdatePoolPrizeReq) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdatePoolPrizeReq.DiscardUnknown(m)
}

var xxx_messageInfo_UpdatePoolPrizeReq proto.InternalMessageInfo

func (m *UpdatePoolPrizeReq) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *UpdatePoolPrizeReq) GetPoolId() int64 {
	if m != nil {
		return m.PoolId
	}
	return 0
}

func (m *UpdatePoolPrizeReq) GetType() int64 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *UpdatePoolPrizeReq) GetNum() int64 {
	if m != nil {
		return m.Num
	}
	return 0
}

func (m *UpdatePoolPrizeReq) GetObjectId() int64 {
	if m != nil {
		return m.ObjectId
	}
	return 0
}

func (m *UpdatePoolPrizeReq) GetExpire() int64 {
	if m != nil {
		return m.Expire
	}
	return 0
}

func (m *UpdatePoolPrizeReq) GetWebUrl() string {
	if m != nil {
		return m.WebUrl
	}
	return ""
}

func (m *UpdatePoolPrizeReq) GetMobileUrl() string {
	if m != nil {
		return m.MobileUrl
	}
	return ""
}

func (m *UpdatePoolPrizeReq) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *UpdatePoolPrizeReq) GetJumpUrl() string {
	if m != nil {
		return m.JumpUrl
	}
	return ""
}

func (m *UpdatePoolPrizeReq) GetProType() int64 {
	if m != nil {
		return m.ProType
	}
	return 0
}

func (m *UpdatePoolPrizeReq) GetChance() int64 {
	if m != nil {
		return m.Chance
	}
	return 0
}

func (m *UpdatePoolPrizeReq) GetLoop() int64 {
	if m != nil {
		return m.Loop
	}
	return 0
}

func (m *UpdatePoolPrizeReq) GetLimit() int64 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *UpdatePoolPrizeReq) GetWeight() int64 {
	if m != nil {
		return m.Weight
	}
	return 0
}

func (m *UpdatePoolPrizeReq) GetWhiteUids() []int64 {
	if m != nil {
		return m.WhiteUids
	}
	return nil
}

type UpdatePoolPrizeResp struct {
	Status               bool     `protobuf:"varint,1,opt,name=status,proto3" json:"status"`
	PrizeId              int64    `protobuf:"varint,2,opt,name=prize_id,json=prizeId,proto3" json:"prize_id"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpdatePoolPrizeResp) Reset()         { *m = UpdatePoolPrizeResp{} }
func (m *UpdatePoolPrizeResp) String() string { return proto.CompactTextString(m) }
func (*UpdatePoolPrizeResp) ProtoMessage()    {}
func (*UpdatePoolPrizeResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_9467f450102a207d, []int{29}
}
func (m *UpdatePoolPrizeResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdatePoolPrizeResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdatePoolPrizeResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *UpdatePoolPrizeResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdatePoolPrizeResp.Merge(dst, src)
}
func (m *UpdatePoolPrizeResp) XXX_Size() int {
	return m.Size()
}
func (m *UpdatePoolPrizeResp) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdatePoolPrizeResp.DiscardUnknown(m)
}

var xxx_messageInfo_UpdatePoolPrizeResp proto.InternalMessageInfo

func (m *UpdatePoolPrizeResp) GetStatus() bool {
	if m != nil {
		return m.Status
	}
	return false
}

func (m *UpdatePoolPrizeResp) GetPrizeId() int64 {
	if m != nil {
		return m.PrizeId
	}
	return 0
}

type DeletePoolPrizeReq struct {
	Id                   int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id" form:"id" validate:"required"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeletePoolPrizeReq) Reset()         { *m = DeletePoolPrizeReq{} }
func (m *DeletePoolPrizeReq) String() string { return proto.CompactTextString(m) }
func (*DeletePoolPrizeReq) ProtoMessage()    {}
func (*DeletePoolPrizeReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_9467f450102a207d, []int{30}
}
func (m *DeletePoolPrizeReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeletePoolPrizeReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeletePoolPrizeReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *DeletePoolPrizeReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeletePoolPrizeReq.Merge(dst, src)
}
func (m *DeletePoolPrizeReq) XXX_Size() int {
	return m.Size()
}
func (m *DeletePoolPrizeReq) XXX_DiscardUnknown() {
	xxx_messageInfo_DeletePoolPrizeReq.DiscardUnknown(m)
}

var xxx_messageInfo_DeletePoolPrizeReq proto.InternalMessageInfo

func (m *DeletePoolPrizeReq) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type DeletePoolPrizeResp struct {
	Status               bool     `protobuf:"varint,1,opt,name=status,proto3" json:"status"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeletePoolPrizeResp) Reset()         { *m = DeletePoolPrizeResp{} }
func (m *DeletePoolPrizeResp) String() string { return proto.CompactTextString(m) }
func (*DeletePoolPrizeResp) ProtoMessage()    {}
func (*DeletePoolPrizeResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_9467f450102a207d, []int{31}
}
func (m *DeletePoolPrizeResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeletePoolPrizeResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeletePoolPrizeResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *DeletePoolPrizeResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeletePoolPrizeResp.Merge(dst, src)
}
func (m *DeletePoolPrizeResp) XXX_Size() int {
	return m.Size()
}
func (m *DeletePoolPrizeResp) XXX_DiscardUnknown() {
	xxx_messageInfo_DeletePoolPrizeResp.DiscardUnknown(m)
}

var xxx_messageInfo_DeletePoolPrizeResp proto.InternalMessageInfo

func (m *DeletePoolPrizeResp) GetStatus() bool {
	if m != nil {
		return m.Status
	}
	return false
}

type GetPrizeTypeReq struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetPrizeTypeReq) Reset()         { *m = GetPrizeTypeReq{} }
func (m *GetPrizeTypeReq) String() string { return proto.CompactTextString(m) }
func (*GetPrizeTypeReq) ProtoMessage()    {}
func (*GetPrizeTypeReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_9467f450102a207d, []int{32}
}
func (m *GetPrizeTypeReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetPrizeTypeReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetPrizeTypeReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *GetPrizeTypeReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetPrizeTypeReq.Merge(dst, src)
}
func (m *GetPrizeTypeReq) XXX_Size() int {
	return m.Size()
}
func (m *GetPrizeTypeReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GetPrizeTypeReq.DiscardUnknown(m)
}

var xxx_messageInfo_GetPrizeTypeReq proto.InternalMessageInfo

type GetPrizeTypeResp struct {
	List                 []*GetPrizeTypeResp_List `protobuf:"bytes,3,rep,name=list" json:"list"`
	XXX_NoUnkeyedLiteral struct{}                 `json:"-"`
	XXX_unrecognized     []byte                   `json:"-"`
	XXX_sizecache        int32                    `json:"-"`
}

func (m *GetPrizeTypeResp) Reset()         { *m = GetPrizeTypeResp{} }
func (m *GetPrizeTypeResp) String() string { return proto.CompactTextString(m) }
func (*GetPrizeTypeResp) ProtoMessage()    {}
func (*GetPrizeTypeResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_9467f450102a207d, []int{33}
}
func (m *GetPrizeTypeResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetPrizeTypeResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetPrizeTypeResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *GetPrizeTypeResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetPrizeTypeResp.Merge(dst, src)
}
func (m *GetPrizeTypeResp) XXX_Size() int {
	return m.Size()
}
func (m *GetPrizeTypeResp) XXX_DiscardUnknown() {
	xxx_messageInfo_GetPrizeTypeResp.DiscardUnknown(m)
}

var xxx_messageInfo_GetPrizeTypeResp proto.InternalMessageInfo

func (m *GetPrizeTypeResp) GetList() []*GetPrizeTypeResp_List {
	if m != nil {
		return m.List
	}
	return nil
}

type GetPrizeTypeResp_List struct {
	//
	Type int64 `protobuf:"varint,1,opt,name=type,proto3" json:"type"`
	//
	Name                 string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetPrizeTypeResp_List) Reset()         { *m = GetPrizeTypeResp_List{} }
func (m *GetPrizeTypeResp_List) String() string { return proto.CompactTextString(m) }
func (*GetPrizeTypeResp_List) ProtoMessage()    {}
func (*GetPrizeTypeResp_List) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_9467f450102a207d, []int{33, 0}
}
func (m *GetPrizeTypeResp_List) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetPrizeTypeResp_List) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetPrizeTypeResp_List.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *GetPrizeTypeResp_List) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetPrizeTypeResp_List.Merge(dst, src)
}
func (m *GetPrizeTypeResp_List) XXX_Size() int {
	return m.Size()
}
func (m *GetPrizeTypeResp_List) XXX_DiscardUnknown() {
	xxx_messageInfo_GetPrizeTypeResp_List.DiscardUnknown(m)
}

var xxx_messageInfo_GetPrizeTypeResp_List proto.InternalMessageInfo

func (m *GetPrizeTypeResp_List) GetType() int64 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *GetPrizeTypeResp_List) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type GetPrizeExpireReq struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetPrizeExpireReq) Reset()         { *m = GetPrizeExpireReq{} }
func (m *GetPrizeExpireReq) String() string { return proto.CompactTextString(m) }
func (*GetPrizeExpireReq) ProtoMessage()    {}
func (*GetPrizeExpireReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_9467f450102a207d, []int{34}
}
func (m *GetPrizeExpireReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetPrizeExpireReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetPrizeExpireReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *GetPrizeExpireReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetPrizeExpireReq.Merge(dst, src)
}
func (m *GetPrizeExpireReq) XXX_Size() int {
	return m.Size()
}
func (m *GetPrizeExpireReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GetPrizeExpireReq.DiscardUnknown(m)
}

var xxx_messageInfo_GetPrizeExpireReq proto.InternalMessageInfo

type GetPrizeExpireResp struct {
	List                 []*GetPrizeExpireResp_List `protobuf:"bytes,3,rep,name=list" json:"list"`
	XXX_NoUnkeyedLiteral struct{}                   `json:"-"`
	XXX_unrecognized     []byte                     `json:"-"`
	XXX_sizecache        int32                      `json:"-"`
}

func (m *GetPrizeExpireResp) Reset()         { *m = GetPrizeExpireResp{} }
func (m *GetPrizeExpireResp) String() string { return proto.CompactTextString(m) }
func (*GetPrizeExpireResp) ProtoMessage()    {}
func (*GetPrizeExpireResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_9467f450102a207d, []int{35}
}
func (m *GetPrizeExpireResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetPrizeExpireResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetPrizeExpireResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *GetPrizeExpireResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetPrizeExpireResp.Merge(dst, src)
}
func (m *GetPrizeExpireResp) XXX_Size() int {
	return m.Size()
}
func (m *GetPrizeExpireResp) XXX_DiscardUnknown() {
	xxx_messageInfo_GetPrizeExpireResp.DiscardUnknown(m)
}

var xxx_messageInfo_GetPrizeExpireResp proto.InternalMessageInfo

func (m *GetPrizeExpireResp) GetList() []*GetPrizeExpireResp_List {
	if m != nil {
		return m.List
	}
	return nil
}

type GetPrizeExpireResp_List struct {
	//
	Expire int64 `protobuf:"varint,1,opt,name=expire,proto3" json:"expire"`
	//
	Name                 string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetPrizeExpireResp_List) Reset()         { *m = GetPrizeExpireResp_List{} }
func (m *GetPrizeExpireResp_List) String() string { return proto.CompactTextString(m) }
func (*GetPrizeExpireResp_List) ProtoMessage()    {}
func (*GetPrizeExpireResp_List) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_9467f450102a207d, []int{35, 0}
}
func (m *GetPrizeExpireResp_List) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetPrizeExpireResp_List) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetPrizeExpireResp_List.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *GetPrizeExpireResp_List) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetPrizeExpireResp_List.Merge(dst, src)
}
func (m *GetPrizeExpireResp_List) XXX_Size() int {
	return m.Size()
}
func (m *GetPrizeExpireResp_List) XXX_DiscardUnknown() {
	xxx_messageInfo_GetPrizeExpireResp_List.DiscardUnknown(m)
}

var xxx_messageInfo_GetPrizeExpireResp_List proto.InternalMessageInfo

func (m *GetPrizeExpireResp_List) GetExpire() int64 {
	if m != nil {
		return m.Expire
	}
	return 0
}

func (m *GetPrizeExpireResp_List) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type StartStormReq struct {
	// 用户id
	Uid int64 `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	// 主播id
	Ruid int64 `protobuf:"varint,2,opt,name=ruid,proto3" json:"ruid,omitempty"`
	// 房间号
	Roomid int64 `protobuf:"varint,3,opt,name=roomid,proto3" json:"roomid,omitempty"`
	// 是否开启敏感词过滤
	UseShield bool `protobuf:"varint,4,opt,name=useShield,proto3" json:"useShield,omitempty"`
	// 道具数量
	Num int64 `protobuf:"varint,5,opt,name=num,proto3" json:"num,omitempty"`
	// 节奏内容id
	Beatid int64 `protobuf:"varint,6,opt,name=beatid,proto3" json:"beatid,omitempty"`
	//
	SkipExternalCheck    int64    `protobuf:"varint,7,opt,name=skipExternalCheck,proto3" json:"skipExternalCheck,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StartStormReq) Reset()         { *m = StartStormReq{} }
func (m *StartStormReq) String() string { return proto.CompactTextString(m) }
func (*StartStormReq) ProtoMessage()    {}
func (*StartStormReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_9467f450102a207d, []int{36}
}
func (m *StartStormReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StartStormReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StartStormReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *StartStormReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StartStormReq.Merge(dst, src)
}
func (m *StartStormReq) XXX_Size() int {
	return m.Size()
}
func (m *StartStormReq) XXX_DiscardUnknown() {
	xxx_messageInfo_StartStormReq.DiscardUnknown(m)
}

var xxx_messageInfo_StartStormReq proto.InternalMessageInfo

func (m *StartStormReq) GetUid() int64 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *StartStormReq) GetRuid() int64 {
	if m != nil {
		return m.Ruid
	}
	return 0
}

func (m *StartStormReq) GetRoomid() int64 {
	if m != nil {
		return m.Roomid
	}
	return 0
}

func (m *StartStormReq) GetUseShield() bool {
	if m != nil {
		return m.UseShield
	}
	return false
}

func (m *StartStormReq) GetNum() int64 {
	if m != nil {
		return m.Num
	}
	return 0
}

func (m *StartStormReq) GetBeatid() int64 {
	if m != nil {
		return m.Beatid
	}
	return 0
}

func (m *StartStormReq) GetSkipExternalCheck() int64 {
	if m != nil {
		return m.SkipExternalCheck
	}
	return 0
}

type StartStormResp struct {
	// 错误码
	Code int32 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	// 错误信息
	Msg                  string     `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Start                *StartData `protobuf:"bytes,3,opt,name=start" json:"start,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *StartStormResp) Reset()         { *m = StartStormResp{} }
func (m *StartStormResp) String() string { return proto.CompactTextString(m) }
func (*StartStormResp) ProtoMessage()    {}
func (*StartStormResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_9467f450102a207d, []int{37}
}
func (m *StartStormResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StartStormResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StartStormResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *StartStormResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StartStormResp.Merge(dst, src)
}
func (m *StartStormResp) XXX_Size() int {
	return m.Size()
}
func (m *StartStormResp) XXX_DiscardUnknown() {
	xxx_messageInfo_StartStormResp.DiscardUnknown(m)
}

var xxx_messageInfo_StartStormResp proto.InternalMessageInfo

func (m *StartStormResp) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *StartStormResp) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func (m *StartStormResp) GetStart() *StartData {
	if m != nil {
		return m.Start
	}
	return nil
}

type StartData struct {
	// 倒计时,秒
	Time int32 `protobuf:"varint,1,opt,name=time,proto3" json:"time,omitempty"`
	// 抽奖标识
	Id                   int64    `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StartData) Reset()         { *m = StartData{} }
func (m *StartData) String() string { return proto.CompactTextString(m) }
func (*StartData) ProtoMessage()    {}
func (*StartData) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_9467f450102a207d, []int{38}
}
func (m *StartData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StartData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StartData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *StartData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StartData.Merge(dst, src)
}
func (m *StartData) XXX_Size() int {
	return m.Size()
}
func (m *StartData) XXX_DiscardUnknown() {
	xxx_messageInfo_StartData.DiscardUnknown(m)
}

var xxx_messageInfo_StartData proto.InternalMessageInfo

func (m *StartData) GetTime() int32 {
	if m != nil {
		return m.Time
	}
	return 0
}

func (m *StartData) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type CanStartStormResp struct {
	// 错误码
	Code int32 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	// 错误信息
	Msg string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	// 是否能开启节奏风暴
	RetStatus            bool     `protobuf:"varint,3,opt,name=ret_status,json=retStatus,proto3" json:"ret_status,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CanStartStormResp) Reset()         { *m = CanStartStormResp{} }
func (m *CanStartStormResp) String() string { return proto.CompactTextString(m) }
func (*CanStartStormResp) ProtoMessage()    {}
func (*CanStartStormResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_9467f450102a207d, []int{39}
}
func (m *CanStartStormResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CanStartStormResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CanStartStormResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *CanStartStormResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CanStartStormResp.Merge(dst, src)
}
func (m *CanStartStormResp) XXX_Size() int {
	return m.Size()
}
func (m *CanStartStormResp) XXX_DiscardUnknown() {
	xxx_messageInfo_CanStartStormResp.DiscardUnknown(m)
}

var xxx_messageInfo_CanStartStormResp proto.InternalMessageInfo

func (m *CanStartStormResp) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *CanStartStormResp) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func (m *CanStartStormResp) GetRetStatus() bool {
	if m != nil {
		return m.RetStatus
	}
	return false
}

type JoinStormReq struct {
	// 抽奖id
	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty" form:"id"`
	// 房间id
	Roomid int64 `protobuf:"varint,2,opt,name=roomid,proto3" json:"roomid,omitempty" form:"roomid" `
	// 弹幕颜色
	Color string `protobuf:"bytes,3,opt,name=color,proto3" json:"color,omitempty" form:"color"`
	// userid
	Mid int64 `protobuf:"varint,4,opt,name=mid,proto3" json:"mid,omitempty" form:"mid"`
	// 平台 web，ios，android
	Platform string `protobuf:"bytes,5,opt,name=platform,proto3" json:"platform,omitempty" form:"platform"`
	// 验证码标识
	CaptchaToken string `protobuf:"bytes,6,opt,name=captcha_token,json=captchaToken,proto3" json:"captcha_token,omitempty" form:"captcha_token"`
	// 验证码明文
	CaptchaPhrase        string   `protobuf:"bytes,7,opt,name=captcha_phrase,json=captchaPhrase,proto3" json:"captcha_phrase,omitempty" form:"captcha_phrase"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *JoinStormReq) Reset()         { *m = JoinStormReq{} }
func (m *JoinStormReq) String() string { return proto.CompactTextString(m) }
func (*JoinStormReq) ProtoMessage()    {}
func (*JoinStormReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_9467f450102a207d, []int{40}
}
func (m *JoinStormReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *JoinStormReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_JoinStormReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *JoinStormReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JoinStormReq.Merge(dst, src)
}
func (m *JoinStormReq) XXX_Size() int {
	return m.Size()
}
func (m *JoinStormReq) XXX_DiscardUnknown() {
	xxx_messageInfo_JoinStormReq.DiscardUnknown(m)
}

var xxx_messageInfo_JoinStormReq proto.InternalMessageInfo

func (m *JoinStormReq) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *JoinStormReq) GetRoomid() int64 {
	if m != nil {
		return m.Roomid
	}
	return 0
}

func (m *JoinStormReq) GetColor() string {
	if m != nil {
		return m.Color
	}
	return ""
}

func (m *JoinStormReq) GetMid() int64 {
	if m != nil {
		return m.Mid
	}
	return 0
}

func (m *JoinStormReq) GetPlatform() string {
	if m != nil {
		return m.Platform
	}
	return ""
}

func (m *JoinStormReq) GetCaptchaToken() string {
	if m != nil {
		return m.CaptchaToken
	}
	return ""
}

func (m *JoinStormReq) GetCaptchaPhrase() string {
	if m != nil {
		return m.CaptchaPhrase
	}
	return ""
}

type JoinStormResp struct {
	// 错误码
	Code int32 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	// 错误信息
	Msg string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	// 加入成功返回数据
	Join                 *JoinData `protobuf:"bytes,3,opt,name=join" json:"join,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *JoinStormResp) Reset()         { *m = JoinStormResp{} }
func (m *JoinStormResp) String() string { return proto.CompactTextString(m) }
func (*JoinStormResp) ProtoMessage()    {}
func (*JoinStormResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_9467f450102a207d, []int{41}
}
func (m *JoinStormResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *JoinStormResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_JoinStormResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *JoinStormResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JoinStormResp.Merge(dst, src)
}
func (m *JoinStormResp) XXX_Size() int {
	return m.Size()
}
func (m *JoinStormResp) XXX_DiscardUnknown() {
	xxx_messageInfo_JoinStormResp.DiscardUnknown(m)
}

var xxx_messageInfo_JoinStormResp proto.InternalMessageInfo

func (m *JoinStormResp) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *JoinStormResp) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func (m *JoinStormResp) GetJoin() *JoinData {
	if m != nil {
		return m.Join
	}
	return nil
}

type JoinData struct {
	// 礼物id
	GiftId int64 `protobuf:"varint,1,opt,name=gift_id,json=giftId,proto3" json:"gift_id"`
	// 标题
	Title string `protobuf:"bytes,2,opt,name=title,proto3" json:"title"`
	// 礼物web内容
	Content string `protobuf:"bytes,3,opt,name=content,proto3" json:"content"`
	// 礼物移动端内容
	MobileContent string `protobuf:"bytes,4,opt,name=mobile_content,json=mobileContent,proto3" json:"mobile_content"`
	// 礼物图片
	GiftImg string `protobuf:"bytes,5,opt,name=gift_img,json=giftImg,proto3" json:"gift_img"`
	// 礼物数量
	GiftNum int64 `protobuf:"varint,6,opt,name=gift_num,json=giftNum,proto3" json:"gift_num"`
	// 礼物名字
	GiftName             string   `protobuf:"bytes,7,opt,name=gift_name,json=giftName,proto3" json:"gift_name"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *JoinData) Reset()         { *m = JoinData{} }
func (m *JoinData) String() string { return proto.CompactTextString(m) }
func (*JoinData) ProtoMessage()    {}
func (*JoinData) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_9467f450102a207d, []int{42}
}
func (m *JoinData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *JoinData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_JoinData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *JoinData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JoinData.Merge(dst, src)
}
func (m *JoinData) XXX_Size() int {
	return m.Size()
}
func (m *JoinData) XXX_DiscardUnknown() {
	xxx_messageInfo_JoinData.DiscardUnknown(m)
}

var xxx_messageInfo_JoinData proto.InternalMessageInfo

func (m *JoinData) GetGiftId() int64 {
	if m != nil {
		return m.GiftId
	}
	return 0
}

func (m *JoinData) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *JoinData) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

func (m *JoinData) GetMobileContent() string {
	if m != nil {
		return m.MobileContent
	}
	return ""
}

func (m *JoinData) GetGiftImg() string {
	if m != nil {
		return m.GiftImg
	}
	return ""
}

func (m *JoinData) GetGiftNum() int64 {
	if m != nil {
		return m.GiftNum
	}
	return 0
}

func (m *JoinData) GetGiftName() string {
	if m != nil {
		return m.GiftName
	}
	return ""
}

type CheckStormReq struct {
	// 房间号
	Roomid int64 `protobuf:"varint,1,opt,name=roomid,proto3" json:"roomid,omitempty" form:"roomid" validate:"required"`
	// 用户id
	Uid                  int64    `protobuf:"varint,2,opt,name=uid,proto3" json:"uid,omitempty" form:"uid" `
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CheckStormReq) Reset()         { *m = CheckStormReq{} }
func (m *CheckStormReq) String() string { return proto.CompactTextString(m) }
func (*CheckStormReq) ProtoMessage()    {}
func (*CheckStormReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_9467f450102a207d, []int{43}
}
func (m *CheckStormReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CheckStormReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CheckStormReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *CheckStormReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CheckStormReq.Merge(dst, src)
}
func (m *CheckStormReq) XXX_Size() int {
	return m.Size()
}
func (m *CheckStormReq) XXX_DiscardUnknown() {
	xxx_messageInfo_CheckStormReq.DiscardUnknown(m)
}

var xxx_messageInfo_CheckStormReq proto.InternalMessageInfo

func (m *CheckStormReq) GetRoomid() int64 {
	if m != nil {
		return m.Roomid
	}
	return 0
}

func (m *CheckStormReq) GetUid() int64 {
	if m != nil {
		return m.Uid
	}
	return 0
}

type CheckStormResp struct {
	// 错误码
	Code int32 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	// 错误信息
	Msg                  string     `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Check                *CheckData `protobuf:"bytes,3,opt,name=check" json:"check,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *CheckStormResp) Reset()         { *m = CheckStormResp{} }
func (m *CheckStormResp) String() string { return proto.CompactTextString(m) }
func (*CheckStormResp) ProtoMessage()    {}
func (*CheckStormResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_9467f450102a207d, []int{44}
}
func (m *CheckStormResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CheckStormResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CheckStormResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *CheckStormResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CheckStormResp.Merge(dst, src)
}
func (m *CheckStormResp) XXX_Size() int {
	return m.Size()
}
func (m *CheckStormResp) XXX_DiscardUnknown() {
	xxx_messageInfo_CheckStormResp.DiscardUnknown(m)
}

var xxx_messageInfo_CheckStormResp proto.InternalMessageInfo

func (m *CheckStormResp) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *CheckStormResp) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func (m *CheckStormResp) GetCheck() *CheckData {
	if m != nil {
		return m.Check
	}
	return nil
}

type CheckData struct {
	// 用户id
	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id"`
	// 房间号
	Roomid int64 `protobuf:"varint,2,opt,name=roomid,proto3" json:"roomid"`
	// 数量
	Num int64 `protobuf:"varint,3,opt,name=num,proto3" json:"num"`
	// 发送数量
	SendNum string `protobuf:"bytes,4,opt,name=send_num,json=sendNum,proto3" json:"send_num"`
	// 结束时间戳
	Time int64 `protobuf:"varint,5,opt,name=time,proto3" json:"time"`
	// 内容
	Content string `protobuf:"bytes,6,opt,name=content,proto3" json:"content"`
	// 是否已经加入
	HasJoin int32 `protobuf:"varint,7,opt,name=hasJoin,proto3" json:"hasJoin"`
	// 图片链接
	StormGif             string   `protobuf:"bytes,8,opt,name=storm_gif,json=stormGif,proto3" json:"storm_gif"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CheckData) Reset()         { *m = CheckData{} }
func (m *CheckData) String() string { return proto.CompactTextString(m) }
func (*CheckData) ProtoMessage()    {}
func (*CheckData) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_9467f450102a207d, []int{45}
}
func (m *CheckData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CheckData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CheckData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *CheckData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CheckData.Merge(dst, src)
}
func (m *CheckData) XXX_Size() int {
	return m.Size()
}
func (m *CheckData) XXX_DiscardUnknown() {
	xxx_messageInfo_CheckData.DiscardUnknown(m)
}

var xxx_messageInfo_CheckData proto.InternalMessageInfo

func (m *CheckData) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *CheckData) GetRoomid() int64 {
	if m != nil {
		return m.Roomid
	}
	return 0
}

func (m *CheckData) GetNum() int64 {
	if m != nil {
		return m.Num
	}
	return 0
}

func (m *CheckData) GetSendNum() string {
	if m != nil {
		return m.SendNum
	}
	return ""
}

func (m *CheckData) GetTime() int64 {
	if m != nil {
		return m.Time
	}
	return 0
}

func (m *CheckData) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

func (m *CheckData) GetHasJoin() int32 {
	if m != nil {
		return m.HasJoin
	}
	return 0
}

func (m *CheckData) GetStormGif() string {
	if m != nil {
		return m.StormGif
	}
	return ""
}

type CapsuleGetCouponListReq struct {
	//
	Uid                  int64    `protobuf:"varint,1,opt,name=uid,proto3" json:"uid"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CapsuleGetCouponListReq) Reset()         { *m = CapsuleGetCouponListReq{} }
func (m *CapsuleGetCouponListReq) String() string { return proto.CompactTextString(m) }
func (*CapsuleGetCouponListReq) ProtoMessage()    {}
func (*CapsuleGetCouponListReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_9467f450102a207d, []int{46}
}
func (m *CapsuleGetCouponListReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CapsuleGetCouponListReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CapsuleGetCouponListReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *CapsuleGetCouponListReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CapsuleGetCouponListReq.Merge(dst, src)
}
func (m *CapsuleGetCouponListReq) XXX_Size() int {
	return m.Size()
}
func (m *CapsuleGetCouponListReq) XXX_DiscardUnknown() {
	xxx_messageInfo_CapsuleGetCouponListReq.DiscardUnknown(m)
}

var xxx_messageInfo_CapsuleGetCouponListReq proto.InternalMessageInfo

func (m *CapsuleGetCouponListReq) GetUid() int64 {
	if m != nil {
		return m.Uid
	}
	return 0
}

type CapsuleGetCouponListResp struct {
	List                 []*CapsuleGetCouponListResp_List `protobuf:"bytes,1,rep,name=list" json:"list"`
	XXX_NoUnkeyedLiteral struct{}                         `json:"-"`
	XXX_unrecognized     []byte                           `json:"-"`
	XXX_sizecache        int32                            `json:"-"`
}

func (m *CapsuleGetCouponListResp) Reset()         { *m = CapsuleGetCouponListResp{} }
func (m *CapsuleGetCouponListResp) String() string { return proto.CompactTextString(m) }
func (*CapsuleGetCouponListResp) ProtoMessage()    {}
func (*CapsuleGetCouponListResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_9467f450102a207d, []int{47}
}
func (m *CapsuleGetCouponListResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CapsuleGetCouponListResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CapsuleGetCouponListResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *CapsuleGetCouponListResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CapsuleGetCouponListResp.Merge(dst, src)
}
func (m *CapsuleGetCouponListResp) XXX_Size() int {
	return m.Size()
}
func (m *CapsuleGetCouponListResp) XXX_DiscardUnknown() {
	xxx_messageInfo_CapsuleGetCouponListResp.DiscardUnknown(m)
}

var xxx_messageInfo_CapsuleGetCouponListResp proto.InternalMessageInfo

func (m *CapsuleGetCouponListResp) GetList() []*CapsuleGetCouponListResp_List {
	if m != nil {
		return m.List
	}
	return nil
}

type CapsuleGetCouponListResp_List struct {
	//
	Uid int64 `protobuf:"varint,1,opt,name=uid,proto3" json:"uid"`
	// 中奖时间
	AwardTime string `protobuf:"bytes,2,opt,name=award_time,json=awardTime,proto3" json:"award_time"`
	// 奖品名称
	AwardName string `protobuf:"bytes,3,opt,name=award_name,json=awardName,proto3" json:"award_name"`
	// 券码
	AwardCode string `protobuf:"bytes,4,opt,name=award_code,json=awardCode,proto3" json:"award_code"`
	// 0 重试 1 成功
	Status int64 `protobuf:"varint,5,opt,name=status,proto3" json:"status"`
	// 上次重试时间
	RetryTime            string   `protobuf:"bytes,6,opt,name=retry_time,json=retryTime,proto3" json:"retry_time"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CapsuleGetCouponListResp_List) Reset()         { *m = CapsuleGetCouponListResp_List{} }
func (m *CapsuleGetCouponListResp_List) String() string { return proto.CompactTextString(m) }
func (*CapsuleGetCouponListResp_List) ProtoMessage()    {}
func (*CapsuleGetCouponListResp_List) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_9467f450102a207d, []int{47, 0}
}
func (m *CapsuleGetCouponListResp_List) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CapsuleGetCouponListResp_List) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CapsuleGetCouponListResp_List.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *CapsuleGetCouponListResp_List) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CapsuleGetCouponListResp_List.Merge(dst, src)
}
func (m *CapsuleGetCouponListResp_List) XXX_Size() int {
	return m.Size()
}
func (m *CapsuleGetCouponListResp_List) XXX_DiscardUnknown() {
	xxx_messageInfo_CapsuleGetCouponListResp_List.DiscardUnknown(m)
}

var xxx_messageInfo_CapsuleGetCouponListResp_List proto.InternalMessageInfo

func (m *CapsuleGetCouponListResp_List) GetUid() int64 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *CapsuleGetCouponListResp_List) GetAwardTime() string {
	if m != nil {
		return m.AwardTime
	}
	return ""
}

func (m *CapsuleGetCouponListResp_List) GetAwardName() string {
	if m != nil {
		return m.AwardName
	}
	return ""
}

func (m *CapsuleGetCouponListResp_List) GetAwardCode() string {
	if m != nil {
		return m.AwardCode
	}
	return ""
}

func (m *CapsuleGetCouponListResp_List) GetStatus() int64 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *CapsuleGetCouponListResp_List) GetRetryTime() string {
	if m != nil {
		return m.RetryTime
	}
	return ""
}

func init() {
	proto.RegisterType((*CapsuleGetDetailReq)(nil), "live.xlottery.v1.CapsuleGetDetailReq")
	proto.RegisterType((*Usage)(nil), "live.xlottery.v1.Usage")
	proto.RegisterType((*Progress)(nil), "live.xlottery.v1.Progress")
	proto.RegisterType((*CapsuleGetDetailResp)(nil), "live.xlottery.v1.CapsuleGetDetailResp")
	proto.RegisterType((*CapsuleGetDetailResp_Gift)(nil), "live.xlottery.v1.CapsuleGetDetailResp.Gift")
	proto.RegisterType((*CapsuleGetDetailResp_List)(nil), "live.xlottery.v1.CapsuleGetDetailResp.List")
	proto.RegisterType((*CapsuleGetDetailResp_CapsuleInfo)(nil), "live.xlottery.v1.CapsuleGetDetailResp.CapsuleInfo")
	proto.RegisterType((*CapsuleOpenCapsuleReq)(nil), "live.xlottery.v1.CapsuleOpenCapsuleReq")
	proto.RegisterType((*CapsuleOpenCapsuleResp)(nil), "live.xlottery.v1.CapsuleOpenCapsuleResp")
	proto.RegisterType((*CapsuleOpenCapsuleResp_CapsuleInfo)(nil), "live.xlottery.v1.CapsuleOpenCapsuleResp.CapsuleInfo")
	proto.RegisterType((*CapsuleOpenCapsuleResp_Info)(nil), "live.xlottery.v1.CapsuleOpenCapsuleResp.Info")
	proto.RegisterType((*CapsuleOpenCapsuleResp_Award)(nil), "live.xlottery.v1.CapsuleOpenCapsuleResp.Award")
	proto.RegisterType((*CapsuleGetCapsuleInfoReq)(nil), "live.xlottery.v1.CapsuleGetCapsuleInfoReq")
	proto.RegisterType((*CapsuleGetCapsuleInfoResp)(nil), "live.xlottery.v1.CapsuleGetCapsuleInfoResp")
	proto.RegisterType((*CapsuleGetCapsuleInfoResp_GiftList)(nil), "live.xlottery.v1.CapsuleGetCapsuleInfoResp.GiftList")
	proto.RegisterType((*CapsuleGetCapsuleInfoResp_GiftFilter)(nil), "live.xlottery.v1.CapsuleGetCapsuleInfoResp.GiftFilter")
	proto.RegisterType((*CapsuleOpenCapsuleByTypeReq)(nil), "live.xlottery.v1.CapsuleOpenCapsuleByTypeReq")
	proto.RegisterType((*CapsuleOpenCapsuleByTypeResp)(nil), "live.xlottery.v1.CapsuleOpenCapsuleByTypeResp")
	proto.RegisterType((*CapsuleOpenCapsuleByTypeResp_CapsuleInfo)(nil), "live.xlottery.v1.CapsuleOpenCapsuleByTypeResp.CapsuleInfo")
	proto.RegisterType((*CapsuleOpenCapsuleByTypeResp_Award)(nil), "live.xlottery.v1.CapsuleOpenCapsuleByTypeResp.Award")
	proto.RegisterType((*GetCoinListReq)(nil), "live.xlottery.v1.GetCoinListReq")
	proto.RegisterType((*GetCoinListResp)(nil), "live.xlottery.v1.GetCoinListResp")
	proto.RegisterType((*GetCoinListResp_List)(nil), "live.xlottery.v1.GetCoinListResp.List")
	proto.RegisterType((*GetCoinListResp_List_AreaIds)(nil), "live.xlottery.v1.GetCoinListResp.List.AreaIds")
	proto.RegisterType((*UpdateCoinConfigReq)(nil), "live.xlottery.v1.UpdateCoinConfigReq")
	proto.RegisterType((*UpdateCoinConfigReq_AreaIds)(nil), "live.xlottery.v1.UpdateCoinConfigReq.AreaIds")
	proto.RegisterType((*UpdateCoinConfigResp)(nil), "live.xlottery.v1.UpdateCoinConfigResp")
	proto.RegisterType((*UpdateCoinStatusReq)(nil), "live.xlottery.v1.UpdateCoinStatusReq")
	proto.RegisterType((*UpdateCoinStatusResp)(nil), "live.xlottery.v1.UpdateCoinStatusResp")
	proto.RegisterType((*DeleteCoinReq)(nil), "live.xlottery.v1.DeleteCoinReq")
	proto.RegisterType((*DeleteCoinResp)(nil), "live.xlottery.v1.DeleteCoinResp")
	proto.RegisterType((*GetPoolListReq)(nil), "live.xlottery.v1.GetPoolListReq")
	proto.RegisterType((*GetPoolListResp)(nil), "live.xlottery.v1.GetPoolListResp")
	proto.RegisterType((*GetPoolListResp_List)(nil), "live.xlottery.v1.GetPoolListResp.List")
	proto.RegisterType((*UpdatePoolReq)(nil), "live.xlottery.v1.UpdatePoolReq")
	proto.RegisterType((*UpdatePoolResp)(nil), "live.xlottery.v1.UpdatePoolResp")
	proto.RegisterType((*DeletePoolReq)(nil), "live.xlottery.v1.DeletePoolReq")
	proto.RegisterType((*DeletePoolResp)(nil), "live.xlottery.v1.DeletePoolResp")
	proto.RegisterType((*UpdatePoolStatusReq)(nil), "live.xlottery.v1.UpdatePoolStatusReq")
	proto.RegisterType((*UpdatePoolStatusResp)(nil), "live.xlottery.v1.UpdatePoolStatusResp")
	proto.RegisterType((*GetPoolPrizeReq)(nil), "live.xlottery.v1.GetPoolPrizeReq")
	proto.RegisterType((*GetPoolPrizeResp)(nil), "live.xlottery.v1.GetPoolPrizeResp")
	proto.RegisterType((*GetPoolPrizeResp_List)(nil), "live.xlottery.v1.GetPoolPrizeResp.List")
	proto.RegisterType((*UpdatePoolPrizeReq)(nil), "live.xlottery.v1.UpdatePoolPrizeReq")
	proto.RegisterType((*UpdatePoolPrizeResp)(nil), "live.xlottery.v1.UpdatePoolPrizeResp")
	proto.RegisterType((*DeletePoolPrizeReq)(nil), "live.xlottery.v1.DeletePoolPrizeReq")
	proto.RegisterType((*DeletePoolPrizeResp)(nil), "live.xlottery.v1.DeletePoolPrizeResp")
	proto.RegisterType((*GetPrizeTypeReq)(nil), "live.xlottery.v1.GetPrizeTypeReq")
	proto.RegisterType((*GetPrizeTypeResp)(nil), "live.xlottery.v1.GetPrizeTypeResp")
	proto.RegisterType((*GetPrizeTypeResp_List)(nil), "live.xlottery.v1.GetPrizeTypeResp.List")
	proto.RegisterType((*GetPrizeExpireReq)(nil), "live.xlottery.v1.GetPrizeExpireReq")
	proto.RegisterType((*GetPrizeExpireResp)(nil), "live.xlottery.v1.GetPrizeExpireResp")
	proto.RegisterType((*GetPrizeExpireResp_List)(nil), "live.xlottery.v1.GetPrizeExpireResp.List")
	proto.RegisterType((*StartStormReq)(nil), "live.xlottery.v1.StartStormReq")
	proto.RegisterType((*StartStormResp)(nil), "live.xlottery.v1.StartStormResp")
	proto.RegisterType((*StartData)(nil), "live.xlottery.v1.StartData")
	proto.RegisterType((*CanStartStormResp)(nil), "live.xlottery.v1.CanStartStormResp")
	proto.RegisterType((*JoinStormReq)(nil), "live.xlottery.v1.JoinStormReq")
	proto.RegisterType((*JoinStormResp)(nil), "live.xlottery.v1.JoinStormResp")
	proto.RegisterType((*JoinData)(nil), "live.xlottery.v1.JoinData")
	proto.RegisterType((*CheckStormReq)(nil), "live.xlottery.v1.CheckStormReq")
	proto.RegisterType((*CheckStormResp)(nil), "live.xlottery.v1.CheckStormResp")
	proto.RegisterType((*CheckData)(nil), "live.xlottery.v1.CheckData")
	proto.RegisterType((*CapsuleGetCouponListReq)(nil), "live.xlottery.v1.CapsuleGetCouponListReq")
	proto.RegisterType((*CapsuleGetCouponListResp)(nil), "live.xlottery.v1.CapsuleGetCouponListResp")
	proto.RegisterType((*CapsuleGetCouponListResp_List)(nil), "live.xlottery.v1.CapsuleGetCouponListResp.List")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// CapsuleClient is the client API for Capsule service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CapsuleClient interface {
	GetDetail(ctx context.Context, in *CapsuleGetDetailReq, opts ...grpc.CallOption) (*CapsuleGetDetailResp, error)
	OpenCapsule(ctx context.Context, in *CapsuleOpenCapsuleReq, opts ...grpc.CallOption) (*CapsuleOpenCapsuleResp, error)
	GetCoinList(ctx context.Context, in *GetCoinListReq, opts ...grpc.CallOption) (*GetCoinListResp, error)
	UpdateCoinConfig(ctx context.Context, in *UpdateCoinConfigReq, opts ...grpc.CallOption) (*UpdateCoinConfigResp, error)
	UpdateCoinStatus(ctx context.Context, in *UpdateCoinStatusReq, opts ...grpc.CallOption) (*UpdateCoinStatusResp, error)
	DeleteCoin(ctx context.Context, in *DeleteCoinReq, opts ...grpc.CallOption) (*DeleteCoinResp, error)
	GetPoolList(ctx context.Context, in *GetPoolListReq, opts ...grpc.CallOption) (*GetPoolListResp, error)
	UpdatePool(ctx context.Context, in *UpdatePoolReq, opts ...grpc.CallOption) (*UpdatePoolResp, error)
	DeletePool(ctx context.Context, in *DeletePoolReq, opts ...grpc.CallOption) (*DeletePoolResp, error)
	UpdatePoolStatus(ctx context.Context, in *UpdatePoolStatusReq, opts ...grpc.CallOption) (*UpdatePoolStatusResp, error)
	GetPoolPrize(ctx context.Context, in *GetPoolPrizeReq, opts ...grpc.CallOption) (*GetPoolPrizeResp, error)
	GetPrizeType(ctx context.Context, in *GetPrizeTypeReq, opts ...grpc.CallOption) (*GetPrizeTypeResp, error)
	GetPrizeExpire(ctx context.Context, in *GetPrizeExpireReq, opts ...grpc.CallOption) (*GetPrizeExpireResp, error)
	UpdatePoolPrize(ctx context.Context, in *UpdatePoolPrizeReq, opts ...grpc.CallOption) (*UpdatePoolPrizeResp, error)
	DeletePoolPrize(ctx context.Context, in *DeletePoolPrizeReq, opts ...grpc.CallOption) (*DeletePoolPrizeResp, error)
	GetCapsuleInfo(ctx context.Context, in *CapsuleGetCapsuleInfoReq, opts ...grpc.CallOption) (*CapsuleGetCapsuleInfoResp, error)
	OpenCapsuleByType(ctx context.Context, in *CapsuleOpenCapsuleByTypeReq, opts ...grpc.CallOption) (*CapsuleOpenCapsuleByTypeResp, error)
	GetCouponList(ctx context.Context, in *CapsuleGetCouponListReq, opts ...grpc.CallOption) (*CapsuleGetCouponListResp, error)
}

type capsuleClient struct {
	cc *grpc.ClientConn
}

func NewCapsuleClient(cc *grpc.ClientConn) CapsuleClient {
	return &capsuleClient{cc}
}

func (c *capsuleClient) GetDetail(ctx context.Context, in *CapsuleGetDetailReq, opts ...grpc.CallOption) (*CapsuleGetDetailResp, error) {
	out := new(CapsuleGetDetailResp)
	err := c.cc.Invoke(ctx, "/live.xlottery.v1.Capsule/get_detail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *capsuleClient) OpenCapsule(ctx context.Context, in *CapsuleOpenCapsuleReq, opts ...grpc.CallOption) (*CapsuleOpenCapsuleResp, error) {
	out := new(CapsuleOpenCapsuleResp)
	err := c.cc.Invoke(ctx, "/live.xlottery.v1.Capsule/open_capsule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *capsuleClient) GetCoinList(ctx context.Context, in *GetCoinListReq, opts ...grpc.CallOption) (*GetCoinListResp, error) {
	out := new(GetCoinListResp)
	err := c.cc.Invoke(ctx, "/live.xlottery.v1.Capsule/get_coin_list", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *capsuleClient) UpdateCoinConfig(ctx context.Context, in *UpdateCoinConfigReq, opts ...grpc.CallOption) (*UpdateCoinConfigResp, error) {
	out := new(UpdateCoinConfigResp)
	err := c.cc.Invoke(ctx, "/live.xlottery.v1.Capsule/update_coin_config", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *capsuleClient) UpdateCoinStatus(ctx context.Context, in *UpdateCoinStatusReq, opts ...grpc.CallOption) (*UpdateCoinStatusResp, error) {
	out := new(UpdateCoinStatusResp)
	err := c.cc.Invoke(ctx, "/live.xlottery.v1.Capsule/update_coin_status", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *capsuleClient) DeleteCoin(ctx context.Context, in *DeleteCoinReq, opts ...grpc.CallOption) (*DeleteCoinResp, error) {
	out := new(DeleteCoinResp)
	err := c.cc.Invoke(ctx, "/live.xlottery.v1.Capsule/delete_coin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *capsuleClient) GetPoolList(ctx context.Context, in *GetPoolListReq, opts ...grpc.CallOption) (*GetPoolListResp, error) {
	out := new(GetPoolListResp)
	err := c.cc.Invoke(ctx, "/live.xlottery.v1.Capsule/get_pool_list", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *capsuleClient) UpdatePool(ctx context.Context, in *UpdatePoolReq, opts ...grpc.CallOption) (*UpdatePoolResp, error) {
	out := new(UpdatePoolResp)
	err := c.cc.Invoke(ctx, "/live.xlottery.v1.Capsule/update_pool", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *capsuleClient) DeletePool(ctx context.Context, in *DeletePoolReq, opts ...grpc.CallOption) (*DeletePoolResp, error) {
	out := new(DeletePoolResp)
	err := c.cc.Invoke(ctx, "/live.xlottery.v1.Capsule/delete_pool", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *capsuleClient) UpdatePoolStatus(ctx context.Context, in *UpdatePoolStatusReq, opts ...grpc.CallOption) (*UpdatePoolStatusResp, error) {
	out := new(UpdatePoolStatusResp)
	err := c.cc.Invoke(ctx, "/live.xlottery.v1.Capsule/update_pool_status", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *capsuleClient) GetPoolPrize(ctx context.Context, in *GetPoolPrizeReq, opts ...grpc.CallOption) (*GetPoolPrizeResp, error) {
	out := new(GetPoolPrizeResp)
	err := c.cc.Invoke(ctx, "/live.xlottery.v1.Capsule/get_pool_prize", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *capsuleClient) GetPrizeType(ctx context.Context, in *GetPrizeTypeReq, opts ...grpc.CallOption) (*GetPrizeTypeResp, error) {
	out := new(GetPrizeTypeResp)
	err := c.cc.Invoke(ctx, "/live.xlottery.v1.Capsule/get_prize_type", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *capsuleClient) GetPrizeExpire(ctx context.Context, in *GetPrizeExpireReq, opts ...grpc.CallOption) (*GetPrizeExpireResp, error) {
	out := new(GetPrizeExpireResp)
	err := c.cc.Invoke(ctx, "/live.xlottery.v1.Capsule/get_prize_expire", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *capsuleClient) UpdatePoolPrize(ctx context.Context, in *UpdatePoolPrizeReq, opts ...grpc.CallOption) (*UpdatePoolPrizeResp, error) {
	out := new(UpdatePoolPrizeResp)
	err := c.cc.Invoke(ctx, "/live.xlottery.v1.Capsule/update_pool_prize", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *capsuleClient) DeletePoolPrize(ctx context.Context, in *DeletePoolPrizeReq, opts ...grpc.CallOption) (*DeletePoolPrizeResp, error) {
	out := new(DeletePoolPrizeResp)
	err := c.cc.Invoke(ctx, "/live.xlottery.v1.Capsule/delete_pool_prize", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *capsuleClient) GetCapsuleInfo(ctx context.Context, in *CapsuleGetCapsuleInfoReq, opts ...grpc.CallOption) (*CapsuleGetCapsuleInfoResp, error) {
	out := new(CapsuleGetCapsuleInfoResp)
	err := c.cc.Invoke(ctx, "/live.xlottery.v1.Capsule/get_capsule_info", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *capsuleClient) OpenCapsuleByType(ctx context.Context, in *CapsuleOpenCapsuleByTypeReq, opts ...grpc.CallOption) (*CapsuleOpenCapsuleByTypeResp, error) {
	out := new(CapsuleOpenCapsuleByTypeResp)
	err := c.cc.Invoke(ctx, "/live.xlottery.v1.Capsule/open_capsule_by_type", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *capsuleClient) GetCouponList(ctx context.Context, in *CapsuleGetCouponListReq, opts ...grpc.CallOption) (*CapsuleGetCouponListResp, error) {
	out := new(CapsuleGetCouponListResp)
	err := c.cc.Invoke(ctx, "/live.xlottery.v1.Capsule/get_coupon_list", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CapsuleServer is the server API for Capsule service.
type CapsuleServer interface {
	GetDetail(context.Context, *CapsuleGetDetailReq) (*CapsuleGetDetailResp, error)
	OpenCapsule(context.Context, *CapsuleOpenCapsuleReq) (*CapsuleOpenCapsuleResp, error)
	GetCoinList(context.Context, *GetCoinListReq) (*GetCoinListResp, error)
	UpdateCoinConfig(context.Context, *UpdateCoinConfigReq) (*UpdateCoinConfigResp, error)
	UpdateCoinStatus(context.Context, *UpdateCoinStatusReq) (*UpdateCoinStatusResp, error)
	DeleteCoin(context.Context, *DeleteCoinReq) (*DeleteCoinResp, error)
	GetPoolList(context.Context, *GetPoolListReq) (*GetPoolListResp, error)
	UpdatePool(context.Context, *UpdatePoolReq) (*UpdatePoolResp, error)
	DeletePool(context.Context, *DeletePoolReq) (*DeletePoolResp, error)
	UpdatePoolStatus(context.Context, *UpdatePoolStatusReq) (*UpdatePoolStatusResp, error)
	GetPoolPrize(context.Context, *GetPoolPrizeReq) (*GetPoolPrizeResp, error)
	GetPrizeType(context.Context, *GetPrizeTypeReq) (*GetPrizeTypeResp, error)
	GetPrizeExpire(context.Context, *GetPrizeExpireReq) (*GetPrizeExpireResp, error)
	UpdatePoolPrize(context.Context, *UpdatePoolPrizeReq) (*UpdatePoolPrizeResp, error)
	DeletePoolPrize(context.Context, *DeletePoolPrizeReq) (*DeletePoolPrizeResp, error)
	GetCapsuleInfo(context.Context, *CapsuleGetCapsuleInfoReq) (*CapsuleGetCapsuleInfoResp, error)
	OpenCapsuleByType(context.Context, *CapsuleOpenCapsuleByTypeReq) (*CapsuleOpenCapsuleByTypeResp, error)
	GetCouponList(context.Context, *CapsuleGetCouponListReq) (*CapsuleGetCouponListResp, error)
}

func RegisterCapsuleServer(s *grpc.Server, srv CapsuleServer) {
	s.RegisterService(&_Capsule_serviceDesc, srv)
}

func _Capsule_GetDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CapsuleGetDetailReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CapsuleServer).GetDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/live.xlottery.v1.Capsule/GetDetail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CapsuleServer).GetDetail(ctx, req.(*CapsuleGetDetailReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Capsule_OpenCapsule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CapsuleOpenCapsuleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CapsuleServer).OpenCapsule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/live.xlottery.v1.Capsule/OpenCapsule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CapsuleServer).OpenCapsule(ctx, req.(*CapsuleOpenCapsuleReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Capsule_GetCoinList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCoinListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CapsuleServer).GetCoinList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/live.xlottery.v1.Capsule/GetCoinList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CapsuleServer).GetCoinList(ctx, req.(*GetCoinListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Capsule_UpdateCoinConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCoinConfigReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CapsuleServer).UpdateCoinConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/live.xlottery.v1.Capsule/UpdateCoinConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CapsuleServer).UpdateCoinConfig(ctx, req.(*UpdateCoinConfigReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Capsule_UpdateCoinStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCoinStatusReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CapsuleServer).UpdateCoinStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/live.xlottery.v1.Capsule/UpdateCoinStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CapsuleServer).UpdateCoinStatus(ctx, req.(*UpdateCoinStatusReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Capsule_DeleteCoin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCoinReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CapsuleServer).DeleteCoin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/live.xlottery.v1.Capsule/DeleteCoin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CapsuleServer).DeleteCoin(ctx, req.(*DeleteCoinReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Capsule_GetPoolList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPoolListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CapsuleServer).GetPoolList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/live.xlottery.v1.Capsule/GetPoolList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CapsuleServer).GetPoolList(ctx, req.(*GetPoolListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Capsule_UpdatePool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePoolReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CapsuleServer).UpdatePool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/live.xlottery.v1.Capsule/UpdatePool",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CapsuleServer).UpdatePool(ctx, req.(*UpdatePoolReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Capsule_DeletePool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePoolReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CapsuleServer).DeletePool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/live.xlottery.v1.Capsule/DeletePool",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CapsuleServer).DeletePool(ctx, req.(*DeletePoolReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Capsule_UpdatePoolStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePoolStatusReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CapsuleServer).UpdatePoolStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/live.xlottery.v1.Capsule/UpdatePoolStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CapsuleServer).UpdatePoolStatus(ctx, req.(*UpdatePoolStatusReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Capsule_GetPoolPrize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPoolPrizeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CapsuleServer).GetPoolPrize(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/live.xlottery.v1.Capsule/GetPoolPrize",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CapsuleServer).GetPoolPrize(ctx, req.(*GetPoolPrizeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Capsule_GetPrizeType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPrizeTypeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CapsuleServer).GetPrizeType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/live.xlottery.v1.Capsule/GetPrizeType",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CapsuleServer).GetPrizeType(ctx, req.(*GetPrizeTypeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Capsule_GetPrizeExpire_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPrizeExpireReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CapsuleServer).GetPrizeExpire(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/live.xlottery.v1.Capsule/GetPrizeExpire",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CapsuleServer).GetPrizeExpire(ctx, req.(*GetPrizeExpireReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Capsule_UpdatePoolPrize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePoolPrizeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CapsuleServer).UpdatePoolPrize(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/live.xlottery.v1.Capsule/UpdatePoolPrize",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CapsuleServer).UpdatePoolPrize(ctx, req.(*UpdatePoolPrizeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Capsule_DeletePoolPrize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePoolPrizeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CapsuleServer).DeletePoolPrize(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/live.xlottery.v1.Capsule/DeletePoolPrize",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CapsuleServer).DeletePoolPrize(ctx, req.(*DeletePoolPrizeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Capsule_GetCapsuleInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CapsuleGetCapsuleInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CapsuleServer).GetCapsuleInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/live.xlottery.v1.Capsule/GetCapsuleInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CapsuleServer).GetCapsuleInfo(ctx, req.(*CapsuleGetCapsuleInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Capsule_OpenCapsuleByType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CapsuleOpenCapsuleByTypeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CapsuleServer).OpenCapsuleByType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/live.xlottery.v1.Capsule/OpenCapsuleByType",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CapsuleServer).OpenCapsuleByType(ctx, req.(*CapsuleOpenCapsuleByTypeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Capsule_GetCouponList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CapsuleGetCouponListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CapsuleServer).GetCouponList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/live.xlottery.v1.Capsule/GetCouponList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CapsuleServer).GetCouponList(ctx, req.(*CapsuleGetCouponListReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _Capsule_serviceDesc = grpc.ServiceDesc{
	ServiceName: "live.xlottery.v1.Capsule",
	HandlerType: (*CapsuleServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "get_detail",
			Handler:    _Capsule_GetDetail_Handler,
		},
		{
			MethodName: "open_capsule",
			Handler:    _Capsule_OpenCapsule_Handler,
		},
		{
			MethodName: "get_coin_list",
			Handler:    _Capsule_GetCoinList_Handler,
		},
		{
			MethodName: "update_coin_config",
			Handler:    _Capsule_UpdateCoinConfig_Handler,
		},
		{
			MethodName: "update_coin_status",
			Handler:    _Capsule_UpdateCoinStatus_Handler,
		},
		{
			MethodName: "delete_coin",
			Handler:    _Capsule_DeleteCoin_Handler,
		},
		{
			MethodName: "get_pool_list",
			Handler:    _Capsule_GetPoolList_Handler,
		},
		{
			MethodName: "update_pool",
			Handler:    _Capsule_UpdatePool_Handler,
		},
		{
			MethodName: "delete_pool",
			Handler:    _Capsule_DeletePool_Handler,
		},
		{
			MethodName: "update_pool_status",
			Handler:    _Capsule_UpdatePoolStatus_Handler,
		},
		{
			MethodName: "get_pool_prize",
			Handler:    _Capsule_GetPoolPrize_Handler,
		},
		{
			MethodName: "get_prize_type",
			Handler:    _Capsule_GetPrizeType_Handler,
		},
		{
			MethodName: "get_prize_expire",
			Handler:    _Capsule_GetPrizeExpire_Handler,
		},
		{
			MethodName: "update_pool_prize",
			Handler:    _Capsule_UpdatePoolPrize_Handler,
		},
		{
			MethodName: "delete_pool_prize",
			Handler:    _Capsule_DeletePoolPrize_Handler,
		},
		{
			MethodName: "get_capsule_info",
			Handler:    _Capsule_GetCapsuleInfo_Handler,
		},
		{
			MethodName: "open_capsule_by_type",
			Handler:    _Capsule_OpenCapsuleByType_Handler,
		},
		{
			MethodName: "get_coupon_list",
			Handler:    _Capsule_GetCouponList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "app/service/live/xlottery/api/grpc/v1/api.proto",
}

// StormClient is the client API for Storm service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type StormClient interface {
	// 开启节奏风暴
	Start(ctx context.Context, in *StartStormReq, opts ...grpc.CallOption) (*StartStormResp, error)
	// 节奏风暴是否能开启
	CanStart(ctx context.Context, in *StartStormReq, opts ...grpc.CallOption) (*CanStartStormResp, error)
	// 加入节奏风暴
	Join(ctx context.Context, in *JoinStormReq, opts ...grpc.CallOption) (*JoinStormResp, error)
	// 检查是否加入节奏风暴
	Check(ctx context.Context, in *CheckStormReq, opts ...grpc.CallOption) (*CheckStormResp, error)
}

type stormClient struct {
	cc *grpc.ClientConn
}

func NewStormClient(cc *grpc.ClientConn) StormClient {
	return &stormClient{cc}
}

func (c *stormClient) Start(ctx context.Context, in *StartStormReq, opts ...grpc.CallOption) (*StartStormResp, error) {
	out := new(StartStormResp)
	err := c.cc.Invoke(ctx, "/live.xlottery.v1.Storm/Start", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stormClient) CanStart(ctx context.Context, in *StartStormReq, opts ...grpc.CallOption) (*CanStartStormResp, error) {
	out := new(CanStartStormResp)
	err := c.cc.Invoke(ctx, "/live.xlottery.v1.Storm/CanStart", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stormClient) Join(ctx context.Context, in *JoinStormReq, opts ...grpc.CallOption) (*JoinStormResp, error) {
	out := new(JoinStormResp)
	err := c.cc.Invoke(ctx, "/live.xlottery.v1.Storm/Join", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stormClient) Check(ctx context.Context, in *CheckStormReq, opts ...grpc.CallOption) (*CheckStormResp, error) {
	out := new(CheckStormResp)
	err := c.cc.Invoke(ctx, "/live.xlottery.v1.Storm/Check", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StormServer is the server API for Storm service.
type StormServer interface {
	// 开启节奏风暴
	Start(context.Context, *StartStormReq) (*StartStormResp, error)
	// 节奏风暴是否能开启
	CanStart(context.Context, *StartStormReq) (*CanStartStormResp, error)
	// 加入节奏风暴
	Join(context.Context, *JoinStormReq) (*JoinStormResp, error)
	// 检查是否加入节奏风暴
	Check(context.Context, *CheckStormReq) (*CheckStormResp, error)
}

func RegisterStormServer(s *grpc.Server, srv StormServer) {
	s.RegisterService(&_Storm_serviceDesc, srv)
}

func _Storm_Start_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartStormReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StormServer).Start(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/live.xlottery.v1.Storm/Start",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StormServer).Start(ctx, req.(*StartStormReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Storm_CanStart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartStormReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StormServer).CanStart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/live.xlottery.v1.Storm/CanStart",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StormServer).CanStart(ctx, req.(*StartStormReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Storm_Join_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JoinStormReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StormServer).Join(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/live.xlottery.v1.Storm/Join",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StormServer).Join(ctx, req.(*JoinStormReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Storm_Check_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckStormReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StormServer).Check(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/live.xlottery.v1.Storm/Check",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StormServer).Check(ctx, req.(*CheckStormReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _Storm_serviceDesc = grpc.ServiceDesc{
	ServiceName: "live.xlottery.v1.Storm",
	HandlerType: (*StormServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Start",
			Handler:    _Storm_Start_Handler,
		},
		{
			MethodName: "CanStart",
			Handler:    _Storm_CanStart_Handler,
		},
		{
			MethodName: "Join",
			Handler:    _Storm_Join_Handler,
		},
		{
			MethodName: "Check",
			Handler:    _Storm_Check_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "app/service/live/xlottery/api/grpc/v1/api.proto",
}

func (m *CapsuleGetDetailReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CapsuleGetDetailReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Uid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Uid))
	}
	if len(m.From) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.From)))
		i += copy(dAtA[i:], m.From)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Usage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Usage) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Text) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Text)))
		i += copy(dAtA[i:], m.Text)
	}
	if len(m.Url) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Url)))
		i += copy(dAtA[i:], m.Url)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Progress) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Progress) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Now != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Now))
	}
	if m.Max != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Max))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *CapsuleGetDetailResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CapsuleGetDetailResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Normal != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Normal.Size()))
		n1, err := m.Normal.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.Colorful != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Colorful.Size()))
		n2, err := m.Colorful.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *CapsuleGetDetailResp_Gift) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CapsuleGetDetailResp_Gift) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.Image) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Image)))
		i += copy(dAtA[i:], m.Image)
	}
	if m.Usage != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Usage.Size()))
		n3, err := m.Usage.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	if len(m.WebImage) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.WebImage)))
		i += copy(dAtA[i:], m.WebImage)
	}
	if len(m.MobileImage) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.MobileImage)))
		i += copy(dAtA[i:], m.MobileImage)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *CapsuleGetDetailResp_List) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CapsuleGetDetailResp_List) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Num != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Num))
	}
	if len(m.Gift) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Gift)))
		i += copy(dAtA[i:], m.Gift)
	}
	if len(m.Date) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Date)))
		i += copy(dAtA[i:], m.Date)
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *CapsuleGetDetailResp_CapsuleInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CapsuleGetDetailResp_CapsuleInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Status {
		dAtA[i] = 0x8
		i++
		if m.Status {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Coin != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Coin))
	}
	if m.Change != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Change))
	}
	if m.Progress != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Progress.Size()))
		n4, err := m.Progress.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	if len(m.Rule) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Rule)))
		i += copy(dAtA[i:], m.Rule)
	}
	if len(m.Gift) > 0 {
		for _, msg := range m.Gift {
			dAtA[i] = 0x32
			i++
			i = encodeVarintApi(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.List) > 0 {
		for _, msg := range m.List {
			dAtA[i] = 0x3a
			i++
			i = encodeVarintApi(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *CapsuleOpenCapsuleReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CapsuleOpenCapsuleReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Uid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Uid))
	}
	if len(m.Type) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Type)))
		i += copy(dAtA[i:], m.Type)
	}
	if m.Count != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Count))
	}
	if len(m.Platform) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Platform)))
		i += copy(dAtA[i:], m.Platform)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *CapsuleOpenCapsuleResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CapsuleOpenCapsuleResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Status {
		dAtA[i] = 0x8
		i++
		if m.Status {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.Text) > 0 {
		for _, s := range m.Text {
			dAtA[i] = 0x12
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if m.IsEntity {
		dAtA[i] = 0x18
		i++
		if m.IsEntity {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Info != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Info.Size()))
		n5, err := m.Info.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	if len(m.ShowTitle) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.ShowTitle)))
		i += copy(dAtA[i:], m.ShowTitle)
	}
	if len(m.Awards) > 0 {
		for _, msg := range m.Awards {
			dAtA[i] = 0x32
			i++
			i = encodeVarintApi(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *CapsuleOpenCapsuleResp_CapsuleInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CapsuleOpenCapsuleResp_CapsuleInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Coin != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Coin))
	}
	if m.Change != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Change))
	}
	if m.Progress != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Progress.Size()))
		n6, err := m.Progress.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *CapsuleOpenCapsuleResp_Info) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CapsuleOpenCapsuleResp_Info) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Normal != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Normal.Size()))
		n7, err := m.Normal.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	if m.Colorful != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Colorful.Size()))
		n8, err := m.Colorful.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n8
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *CapsuleOpenCapsuleResp_Award) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CapsuleOpenCapsuleResp_Award) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if m.Num != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Num))
	}
	if len(m.Text) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Text)))
		i += copy(dAtA[i:], m.Text)
	}
	if len(m.Img) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Img)))
		i += copy(dAtA[i:], m.Img)
	}
	if m.Usage != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Usage.Size()))
		n9, err := m.Usage.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n9
	}
	if len(m.WebImage) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.WebImage)))
		i += copy(dAtA[i:], m.WebImage)
	}
	if len(m.MobileImage) > 0 {
		dAtA[i] = 0x42
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.MobileImage)))
		i += copy(dAtA[i:], m.MobileImage)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *CapsuleGetCapsuleInfoReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CapsuleGetCapsuleInfoReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Uid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Uid))
	}
	if len(m.Type) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Type)))
		i += copy(dAtA[i:], m.Type)
	}
	if len(m.From) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.From)))
		i += copy(dAtA[i:], m.From)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *CapsuleGetCapsuleInfoResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CapsuleGetCapsuleInfoResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Coin != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Coin))
	}
	if len(m.Rule) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Rule)))
		i += copy(dAtA[i:], m.Rule)
	}
	if len(m.GiftList) > 0 {
		for _, msg := range m.GiftList {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintApi(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.GiftFilter) > 0 {
		for _, msg := range m.GiftFilter {
			dAtA[i] = 0x22
			i++
			i = encodeVarintApi(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *CapsuleGetCapsuleInfoResp_GiftList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CapsuleGetCapsuleInfoResp_GiftList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Id))
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if m.Num != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Num))
	}
	if m.Weight != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Weight))
	}
	if len(m.WebUrl) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.WebUrl)))
		i += copy(dAtA[i:], m.WebUrl)
	}
	if len(m.MobileUrl) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.MobileUrl)))
		i += copy(dAtA[i:], m.MobileUrl)
	}
	if m.Usage != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Usage.Size()))
		n10, err := m.Usage.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n10
	}
	if m.Type != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Type))
	}
	if len(m.Expire) > 0 {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Expire)))
		i += copy(dAtA[i:], m.Expire)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *CapsuleGetCapsuleInfoResp_GiftFilter) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CapsuleGetCapsuleInfoResp_GiftFilter) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Id))
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.WebUrl) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.WebUrl)))
		i += copy(dAtA[i:], m.WebUrl)
	}
	if len(m.MobileUrl) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.MobileUrl)))
		i += copy(dAtA[i:], m.MobileUrl)
	}
	if m.Usage != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Usage.Size()))
		n11, err := m.Usage.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n11
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *CapsuleOpenCapsuleByTypeReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CapsuleOpenCapsuleByTypeReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Uid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Uid))
	}
	if len(m.Type) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Type)))
		i += copy(dAtA[i:], m.Type)
	}
	if m.Count != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Count))
	}
	if len(m.Platform) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Platform)))
		i += copy(dAtA[i:], m.Platform)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *CapsuleOpenCapsuleByTypeResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CapsuleOpenCapsuleByTypeResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Status {
		dAtA[i] = 0x8
		i++
		if m.Status {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.IsEntity {
		dAtA[i] = 0x10
		i++
		if m.IsEntity {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Info != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Info.Size()))
		n12, err := m.Info.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n12
	}
	if len(m.Awards) > 0 {
		for _, msg := range m.Awards {
			dAtA[i] = 0x22
			i++
			i = encodeVarintApi(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Text) > 0 {
		for _, s := range m.Text {
			dAtA[i] = 0x2a
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *CapsuleOpenCapsuleByTypeResp_CapsuleInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CapsuleOpenCapsuleByTypeResp_CapsuleInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Coin != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Coin))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *CapsuleOpenCapsuleByTypeResp_Award) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CapsuleOpenCapsuleByTypeResp_Award) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Id))
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if m.Num != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Num))
	}
	if len(m.Text) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Text)))
		i += copy(dAtA[i:], m.Text)
	}
	if len(m.WebUrl) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.WebUrl)))
		i += copy(dAtA[i:], m.WebUrl)
	}
	if len(m.MobileUrl) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.MobileUrl)))
		i += copy(dAtA[i:], m.MobileUrl)
	}
	if m.Usage != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Usage.Size()))
		n13, err := m.Usage.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n13
	}
	if m.Weight != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Weight))
	}
	if m.Type != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Type))
	}
	if len(m.Expire) > 0 {
		dAtA[i] = 0x52
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Expire)))
		i += copy(dAtA[i:], m.Expire)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GetCoinListReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetCoinListReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Page != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Page))
	}
	if m.PageSize != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.PageSize))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GetCoinListResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetCoinListResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Total != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Total))
	}
	if m.TotalPage != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.TotalPage))
	}
	if len(m.List) > 0 {
		for _, msg := range m.List {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintApi(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GetCoinListResp_List) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetCoinListResp_List) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Id))
	}
	if len(m.Title) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Title)))
		i += copy(dAtA[i:], m.Title)
	}
	if m.ChangeNum != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.ChangeNum))
	}
	if m.StartTime != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.StartTime))
	}
	if m.EndTime != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.EndTime))
	}
	if m.Status != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Status))
	}
	if m.GiftType != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.GiftType))
	}
	if len(m.GiftConfig) > 0 {
		dAtA[i] = 0x42
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.GiftConfig)))
		i += copy(dAtA[i:], m.GiftConfig)
	}
	if len(m.AreaIds) > 0 {
		for _, msg := range m.AreaIds {
			dAtA[i] = 0x4a
			i++
			i = encodeVarintApi(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GetCoinListResp_List_AreaIds) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetCoinListResp_List_AreaIds) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ParentId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.ParentId))
	}
	if m.IsAll != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.IsAll))
	}
	if len(m.List) > 0 {
		dAtA15 := make([]byte, len(m.List)*10)
		var j14 int
		for _, num1 := range m.List {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA15[j14] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j14++
			}
			dAtA15[j14] = uint8(num)
			j14++
		}
		dAtA[i] = 0x1a
		i++
		i = encodeVarintApi(dAtA, i, uint64(j14))
		i += copy(dAtA[i:], dAtA15[:j14])
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *UpdateCoinConfigReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateCoinConfigReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Id))
	}
	if len(m.Title) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Title)))
		i += copy(dAtA[i:], m.Title)
	}
	if m.ChangeNum != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.ChangeNum))
	}
	if m.StartTime != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.StartTime))
	}
	if m.EndTime != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.EndTime))
	}
	if m.Status != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Status))
	}
	if m.GiftType != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.GiftType))
	}
	if len(m.GiftIds) > 0 {
		dAtA17 := make([]byte, len(m.GiftIds)*10)
		var j16 int
		for _, num1 := range m.GiftIds {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA17[j16] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j16++
			}
			dAtA17[j16] = uint8(num)
			j16++
		}
		dAtA[i] = 0x42
		i++
		i = encodeVarintApi(dAtA, i, uint64(j16))
		i += copy(dAtA[i:], dAtA17[:j16])
	}
	if len(m.AreaIds) > 0 {
		for _, msg := range m.AreaIds {
			dAtA[i] = 0x4a
			i++
			i = encodeVarintApi(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *UpdateCoinConfigReq_AreaIds) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateCoinConfigReq_AreaIds) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ParentId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.ParentId))
	}
	if m.IsAll != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.IsAll))
	}
	if len(m.List) > 0 {
		dAtA19 := make([]byte, len(m.List)*10)
		var j18 int
		for _, num1 := range m.List {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA19[j18] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j18++
			}
			dAtA19[j18] = uint8(num)
			j18++
		}
		dAtA[i] = 0x1a
		i++
		i = encodeVarintApi(dAtA, i, uint64(j18))
		i += copy(dAtA[i:], dAtA19[:j18])
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *UpdateCoinConfigResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateCoinConfigResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Status {
		dAtA[i] = 0x8
		i++
		if m.Status {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *UpdateCoinStatusReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateCoinStatusReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Id))
	}
	if m.Status != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Status))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *UpdateCoinStatusResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateCoinStatusResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Status {
		dAtA[i] = 0x8
		i++
		if m.Status {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *DeleteCoinReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteCoinReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Id))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *DeleteCoinResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteCoinResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Status {
		dAtA[i] = 0x8
		i++
		if m.Status {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GetPoolListReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetPoolListReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Page != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Page))
	}
	if m.PageSize != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.PageSize))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GetPoolListResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetPoolListResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Total != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Total))
	}
	if m.TotalPage != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.TotalPage))
	}
	if len(m.List) > 0 {
		for _, msg := range m.List {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintApi(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GetPoolListResp_List) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetPoolListResp_List) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Id))
	}
	if m.CoinId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.CoinId))
	}
	if len(m.Title) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Title)))
		i += copy(dAtA[i:], m.Title)
	}
	if m.StartTime != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.StartTime))
	}
	if m.EndTime != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.EndTime))
	}
	if m.Status != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Status))
	}
	if len(m.Rule) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Rule)))
		i += copy(dAtA[i:], m.Rule)
	}
	if len(m.CoinTitle) > 0 {
		dAtA[i] = 0x42
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.CoinTitle)))
		i += copy(dAtA[i:], m.CoinTitle)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *UpdatePoolReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdatePoolReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Id))
	}
	if m.CoinId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.CoinId))
	}
	if len(m.Title) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Title)))
		i += copy(dAtA[i:], m.Title)
	}
	if m.StartTime != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.StartTime))
	}
	if m.EndTime != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.EndTime))
	}
	if len(m.Rule) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Rule)))
		i += copy(dAtA[i:], m.Rule)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *UpdatePoolResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdatePoolResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Status {
		dAtA[i] = 0x8
		i++
		if m.Status {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *DeletePoolReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeletePoolReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Id))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *DeletePoolResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeletePoolResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Status {
		dAtA[i] = 0x8
		i++
		if m.Status {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *UpdatePoolStatusReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdatePoolStatusReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Id))
	}
	if m.Status != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Status))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *UpdatePoolStatusResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdatePoolStatusResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Status {
		dAtA[i] = 0x8
		i++
		if m.Status {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GetPoolPrizeReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetPoolPrizeReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.PoolId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.PoolId))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GetPoolPrizeResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetPoolPrizeResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, msg := range m.List {
			dAtA[i] = 0xa
			i++
			i = encodeVarintApi(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GetPoolPrizeResp_List) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetPoolPrizeResp_List) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Id))
	}
	if m.PoolId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.PoolId))
	}
	if m.Type != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Type))
	}
	if m.Num != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Num))
	}
	if m.ObjectId != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.ObjectId))
	}
	if len(m.WebUrl) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.WebUrl)))
		i += copy(dAtA[i:], m.WebUrl)
	}
	if len(m.MobileUrl) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.MobileUrl)))
		i += copy(dAtA[i:], m.MobileUrl)
	}
	if len(m.Description) > 0 {
		dAtA[i] = 0x42
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Description)))
		i += copy(dAtA[i:], m.Description)
	}
	if len(m.JumpUrl) > 0 {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.JumpUrl)))
		i += copy(dAtA[i:], m.JumpUrl)
	}
	if m.ProType != 0 {
		dAtA[i] = 0x50
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.ProType))
	}
	if len(m.Chance) > 0 {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Chance)))
		i += copy(dAtA[i:], m.Chance)
	}
	if m.Loop != 0 {
		dAtA[i] = 0x60
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Loop))
	}
	if m.Limit != 0 {
		dAtA[i] = 0x68
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Limit))
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x72
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if m.Weight != 0 {
		dAtA[i] = 0x78
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Weight))
	}
	if len(m.WhiteUids) > 0 {
		dAtA21 := make([]byte, len(m.WhiteUids)*10)
		var j20 int
		for _, num1 := range m.WhiteUids {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA21[j20] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j20++
			}
			dAtA21[j20] = uint8(num)
			j20++
		}
		dAtA[i] = 0x82
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintApi(dAtA, i, uint64(j20))
		i += copy(dAtA[i:], dAtA21[:j20])
	}
	if m.Expire != 0 {
		dAtA[i] = 0x88
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Expire))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *UpdatePoolPrizeReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdatePoolPrizeReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Id))
	}
	if m.PoolId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.PoolId))
	}
	if m.Type != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Type))
	}
	if m.Num != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Num))
	}
	if m.ObjectId != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.ObjectId))
	}
	if m.Expire != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Expire))
	}
	if len(m.WebUrl) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.WebUrl)))
		i += copy(dAtA[i:], m.WebUrl)
	}
	if len(m.MobileUrl) > 0 {
		dAtA[i] = 0x42
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.MobileUrl)))
		i += copy(dAtA[i:], m.MobileUrl)
	}
	if len(m.Description) > 0 {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Description)))
		i += copy(dAtA[i:], m.Description)
	}
	if len(m.JumpUrl) > 0 {
		dAtA[i] = 0x52
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.JumpUrl)))
		i += copy(dAtA[i:], m.JumpUrl)
	}
	if m.ProType != 0 {
		dAtA[i] = 0x58
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.ProType))
	}
	if m.Chance != 0 {
		dAtA[i] = 0x60
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Chance))
	}
	if m.Loop != 0 {
		dAtA[i] = 0x68
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Loop))
	}
	if m.Limit != 0 {
		dAtA[i] = 0x70
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Limit))
	}
	if m.Weight != 0 {
		dAtA[i] = 0x78
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Weight))
	}
	if len(m.WhiteUids) > 0 {
		dAtA23 := make([]byte, len(m.WhiteUids)*10)
		var j22 int
		for _, num1 := range m.WhiteUids {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA23[j22] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j22++
			}
			dAtA23[j22] = uint8(num)
			j22++
		}
		dAtA[i] = 0x82
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintApi(dAtA, i, uint64(j22))
		i += copy(dAtA[i:], dAtA23[:j22])
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *UpdatePoolPrizeResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdatePoolPrizeResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Status {
		dAtA[i] = 0x8
		i++
		if m.Status {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.PrizeId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.PrizeId))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *DeletePoolPrizeReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeletePoolPrizeReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Id))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *DeletePoolPrizeResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeletePoolPrizeResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Status {
		dAtA[i] = 0x8
		i++
		if m.Status {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GetPrizeTypeReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetPrizeTypeReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GetPrizeTypeResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetPrizeTypeResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, msg := range m.List {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintApi(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GetPrizeTypeResp_List) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetPrizeTypeResp_List) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Type != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Type))
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GetPrizeExpireReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetPrizeExpireReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GetPrizeExpireResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetPrizeExpireResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, msg := range m.List {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintApi(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GetPrizeExpireResp_List) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetPrizeExpireResp_List) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Expire != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Expire))
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *StartStormReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StartStormReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Uid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Uid))
	}
	if m.Ruid != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Ruid))
	}
	if m.Roomid != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Roomid))
	}
	if m.UseShield {
		dAtA[i] = 0x20
		i++
		if m.UseShield {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Num != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Num))
	}
	if m.Beatid != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Beatid))
	}
	if m.SkipExternalCheck != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.SkipExternalCheck))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *StartStormResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StartStormResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Code))
	}
	if len(m.Msg) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Msg)))
		i += copy(dAtA[i:], m.Msg)
	}
	if m.Start != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Start.Size()))
		n24, err := m.Start.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n24
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *StartData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StartData) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Time != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Time))
	}
	if m.Id != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Id))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *CanStartStormResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CanStartStormResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Code))
	}
	if len(m.Msg) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Msg)))
		i += copy(dAtA[i:], m.Msg)
	}
	if m.RetStatus {
		dAtA[i] = 0x18
		i++
		if m.RetStatus {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *JoinStormReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *JoinStormReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Id))
	}
	if m.Roomid != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Roomid))
	}
	if len(m.Color) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Color)))
		i += copy(dAtA[i:], m.Color)
	}
	if m.Mid != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Mid))
	}
	if len(m.Platform) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Platform)))
		i += copy(dAtA[i:], m.Platform)
	}
	if len(m.CaptchaToken) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.CaptchaToken)))
		i += copy(dAtA[i:], m.CaptchaToken)
	}
	if len(m.CaptchaPhrase) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.CaptchaPhrase)))
		i += copy(dAtA[i:], m.CaptchaPhrase)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *JoinStormResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *JoinStormResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Code))
	}
	if len(m.Msg) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Msg)))
		i += copy(dAtA[i:], m.Msg)
	}
	if m.Join != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Join.Size()))
		n25, err := m.Join.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n25
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *JoinData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *JoinData) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.GiftId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.GiftId))
	}
	if len(m.Title) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Title)))
		i += copy(dAtA[i:], m.Title)
	}
	if len(m.Content) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Content)))
		i += copy(dAtA[i:], m.Content)
	}
	if len(m.MobileContent) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.MobileContent)))
		i += copy(dAtA[i:], m.MobileContent)
	}
	if len(m.GiftImg) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.GiftImg)))
		i += copy(dAtA[i:], m.GiftImg)
	}
	if m.GiftNum != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.GiftNum))
	}
	if len(m.GiftName) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.GiftName)))
		i += copy(dAtA[i:], m.GiftName)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *CheckStormReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CheckStormReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Roomid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Roomid))
	}
	if m.Uid != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Uid))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *CheckStormResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CheckStormResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Code))
	}
	if len(m.Msg) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Msg)))
		i += copy(dAtA[i:], m.Msg)
	}
	if m.Check != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Check.Size()))
		n26, err := m.Check.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n26
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *CheckData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CheckData) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Id))
	}
	if m.Roomid != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Roomid))
	}
	if m.Num != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Num))
	}
	if len(m.SendNum) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.SendNum)))
		i += copy(dAtA[i:], m.SendNum)
	}
	if m.Time != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Time))
	}
	if len(m.Content) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Content)))
		i += copy(dAtA[i:], m.Content)
	}
	if m.HasJoin != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.HasJoin))
	}
	if len(m.StormGif) > 0 {
		dAtA[i] = 0x42
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.StormGif)))
		i += copy(dAtA[i:], m.StormGif)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *CapsuleGetCouponListReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CapsuleGetCouponListReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Uid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Uid))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *CapsuleGetCouponListResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CapsuleGetCouponListResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, msg := range m.List {
			dAtA[i] = 0xa
			i++
			i = encodeVarintApi(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *CapsuleGetCouponListResp_List) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CapsuleGetCouponListResp_List) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Uid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Uid))
	}
	if len(m.AwardTime) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.AwardTime)))
		i += copy(dAtA[i:], m.AwardTime)
	}
	if len(m.AwardName) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.AwardName)))
		i += copy(dAtA[i:], m.AwardName)
	}
	if len(m.AwardCode) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.AwardCode)))
		i += copy(dAtA[i:], m.AwardCode)
	}
	if m.Status != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Status))
	}
	if len(m.RetryTime) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.RetryTime)))
		i += copy(dAtA[i:], m.RetryTime)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintApi(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *CapsuleGetDetailReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Uid != 0 {
		n += 1 + sovApi(uint64(m.Uid))
	}
	l = len(m.From)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Usage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Text)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Url)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Progress) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Now != 0 {
		n += 1 + sovApi(uint64(m.Now))
	}
	if m.Max != 0 {
		n += 1 + sovApi(uint64(m.Max))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CapsuleGetDetailResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Normal != nil {
		l = m.Normal.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Colorful != nil {
		l = m.Colorful.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CapsuleGetDetailResp_Gift) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Image)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Usage != nil {
		l = m.Usage.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.WebImage)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.MobileImage)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CapsuleGetDetailResp_List) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Num != 0 {
		n += 1 + sovApi(uint64(m.Num))
	}
	l = len(m.Gift)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Date)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CapsuleGetDetailResp_CapsuleInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Status {
		n += 2
	}
	if m.Coin != 0 {
		n += 1 + sovApi(uint64(m.Coin))
	}
	if m.Change != 0 {
		n += 1 + sovApi(uint64(m.Change))
	}
	if m.Progress != nil {
		l = m.Progress.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Rule)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if len(m.Gift) > 0 {
		for _, e := range m.Gift {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CapsuleOpenCapsuleReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Uid != 0 {
		n += 1 + sovApi(uint64(m.Uid))
	}
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Count != 0 {
		n += 1 + sovApi(uint64(m.Count))
	}
	l = len(m.Platform)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CapsuleOpenCapsuleResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Status {
		n += 2
	}
	if len(m.Text) > 0 {
		for _, s := range m.Text {
			l = len(s)
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.IsEntity {
		n += 2
	}
	if m.Info != nil {
		l = m.Info.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.ShowTitle)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if len(m.Awards) > 0 {
		for _, e := range m.Awards {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CapsuleOpenCapsuleResp_CapsuleInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Coin != 0 {
		n += 1 + sovApi(uint64(m.Coin))
	}
	if m.Change != 0 {
		n += 1 + sovApi(uint64(m.Change))
	}
	if m.Progress != nil {
		l = m.Progress.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CapsuleOpenCapsuleResp_Info) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Normal != nil {
		l = m.Normal.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Colorful != nil {
		l = m.Colorful.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CapsuleOpenCapsuleResp_Award) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Num != 0 {
		n += 1 + sovApi(uint64(m.Num))
	}
	l = len(m.Text)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Img)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Usage != nil {
		l = m.Usage.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.WebImage)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.MobileImage)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CapsuleGetCapsuleInfoReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Uid != 0 {
		n += 1 + sovApi(uint64(m.Uid))
	}
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.From)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CapsuleGetCapsuleInfoResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Coin != 0 {
		n += 1 + sovApi(uint64(m.Coin))
	}
	l = len(m.Rule)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if len(m.GiftList) > 0 {
		for _, e := range m.GiftList {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if len(m.GiftFilter) > 0 {
		for _, e := range m.GiftFilter {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CapsuleGetCapsuleInfoResp_GiftList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovApi(uint64(m.Id))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Num != 0 {
		n += 1 + sovApi(uint64(m.Num))
	}
	if m.Weight != 0 {
		n += 1 + sovApi(uint64(m.Weight))
	}
	l = len(m.WebUrl)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.MobileUrl)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Usage != nil {
		l = m.Usage.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Type != 0 {
		n += 1 + sovApi(uint64(m.Type))
	}
	l = len(m.Expire)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CapsuleGetCapsuleInfoResp_GiftFilter) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovApi(uint64(m.Id))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.WebUrl)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.MobileUrl)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Usage != nil {
		l = m.Usage.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CapsuleOpenCapsuleByTypeReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Uid != 0 {
		n += 1 + sovApi(uint64(m.Uid))
	}
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Count != 0 {
		n += 1 + sovApi(uint64(m.Count))
	}
	l = len(m.Platform)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CapsuleOpenCapsuleByTypeResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Status {
		n += 2
	}
	if m.IsEntity {
		n += 2
	}
	if m.Info != nil {
		l = m.Info.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if len(m.Awards) > 0 {
		for _, e := range m.Awards {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if len(m.Text) > 0 {
		for _, s := range m.Text {
			l = len(s)
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CapsuleOpenCapsuleByTypeResp_CapsuleInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Coin != 0 {
		n += 1 + sovApi(uint64(m.Coin))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CapsuleOpenCapsuleByTypeResp_Award) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovApi(uint64(m.Id))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Num != 0 {
		n += 1 + sovApi(uint64(m.Num))
	}
	l = len(m.Text)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.WebUrl)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.MobileUrl)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Usage != nil {
		l = m.Usage.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Weight != 0 {
		n += 1 + sovApi(uint64(m.Weight))
	}
	if m.Type != 0 {
		n += 1 + sovApi(uint64(m.Type))
	}
	l = len(m.Expire)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetCoinListReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Page != 0 {
		n += 1 + sovApi(uint64(m.Page))
	}
	if m.PageSize != 0 {
		n += 1 + sovApi(uint64(m.PageSize))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetCoinListResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Total != 0 {
		n += 1 + sovApi(uint64(m.Total))
	}
	if m.TotalPage != 0 {
		n += 1 + sovApi(uint64(m.TotalPage))
	}
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetCoinListResp_List) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovApi(uint64(m.Id))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.ChangeNum != 0 {
		n += 1 + sovApi(uint64(m.ChangeNum))
	}
	if m.StartTime != 0 {
		n += 1 + sovApi(uint64(m.StartTime))
	}
	if m.EndTime != 0 {
		n += 1 + sovApi(uint64(m.EndTime))
	}
	if m.Status != 0 {
		n += 1 + sovApi(uint64(m.Status))
	}
	if m.GiftType != 0 {
		n += 1 + sovApi(uint64(m.GiftType))
	}
	l = len(m.GiftConfig)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if len(m.AreaIds) > 0 {
		for _, e := range m.AreaIds {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetCoinListResp_List_AreaIds) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ParentId != 0 {
		n += 1 + sovApi(uint64(m.ParentId))
	}
	if m.IsAll != 0 {
		n += 1 + sovApi(uint64(m.IsAll))
	}
	if len(m.List) > 0 {
		l = 0
		for _, e := range m.List {
			l += sovApi(uint64(e))
		}
		n += 1 + sovApi(uint64(l)) + l
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpdateCoinConfigReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovApi(uint64(m.Id))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.ChangeNum != 0 {
		n += 1 + sovApi(uint64(m.ChangeNum))
	}
	if m.StartTime != 0 {
		n += 1 + sovApi(uint64(m.StartTime))
	}
	if m.EndTime != 0 {
		n += 1 + sovApi(uint64(m.EndTime))
	}
	if m.Status != 0 {
		n += 1 + sovApi(uint64(m.Status))
	}
	if m.GiftType != 0 {
		n += 1 + sovApi(uint64(m.GiftType))
	}
	if len(m.GiftIds) > 0 {
		l = 0
		for _, e := range m.GiftIds {
			l += sovApi(uint64(e))
		}
		n += 1 + sovApi(uint64(l)) + l
	}
	if len(m.AreaIds) > 0 {
		for _, e := range m.AreaIds {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpdateCoinConfigReq_AreaIds) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ParentId != 0 {
		n += 1 + sovApi(uint64(m.ParentId))
	}
	if m.IsAll != 0 {
		n += 1 + sovApi(uint64(m.IsAll))
	}
	if len(m.List) > 0 {
		l = 0
		for _, e := range m.List {
			l += sovApi(uint64(e))
		}
		n += 1 + sovApi(uint64(l)) + l
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpdateCoinConfigResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Status {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpdateCoinStatusReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovApi(uint64(m.Id))
	}
	if m.Status != 0 {
		n += 1 + sovApi(uint64(m.Status))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpdateCoinStatusResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Status {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DeleteCoinReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovApi(uint64(m.Id))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DeleteCoinResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Status {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetPoolListReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Page != 0 {
		n += 1 + sovApi(uint64(m.Page))
	}
	if m.PageSize != 0 {
		n += 1 + sovApi(uint64(m.PageSize))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetPoolListResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Total != 0 {
		n += 1 + sovApi(uint64(m.Total))
	}
	if m.TotalPage != 0 {
		n += 1 + sovApi(uint64(m.TotalPage))
	}
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetPoolListResp_List) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovApi(uint64(m.Id))
	}
	if m.CoinId != 0 {
		n += 1 + sovApi(uint64(m.CoinId))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.StartTime != 0 {
		n += 1 + sovApi(uint64(m.StartTime))
	}
	if m.EndTime != 0 {
		n += 1 + sovApi(uint64(m.EndTime))
	}
	if m.Status != 0 {
		n += 1 + sovApi(uint64(m.Status))
	}
	l = len(m.Rule)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.CoinTitle)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpdatePoolReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovApi(uint64(m.Id))
	}
	if m.CoinId != 0 {
		n += 1 + sovApi(uint64(m.CoinId))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.StartTime != 0 {
		n += 1 + sovApi(uint64(m.StartTime))
	}
	if m.EndTime != 0 {
		n += 1 + sovApi(uint64(m.EndTime))
	}
	l = len(m.Rule)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpdatePoolResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Status {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DeletePoolReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovApi(uint64(m.Id))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DeletePoolResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Status {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpdatePoolStatusReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovApi(uint64(m.Id))
	}
	if m.Status != 0 {
		n += 1 + sovApi(uint64(m.Status))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpdatePoolStatusResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Status {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetPoolPrizeReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PoolId != 0 {
		n += 1 + sovApi(uint64(m.PoolId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetPoolPrizeResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetPoolPrizeResp_List) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovApi(uint64(m.Id))
	}
	if m.PoolId != 0 {
		n += 1 + sovApi(uint64(m.PoolId))
	}
	if m.Type != 0 {
		n += 1 + sovApi(uint64(m.Type))
	}
	if m.Num != 0 {
		n += 1 + sovApi(uint64(m.Num))
	}
	if m.ObjectId != 0 {
		n += 1 + sovApi(uint64(m.ObjectId))
	}
	l = len(m.WebUrl)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.MobileUrl)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.JumpUrl)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.ProType != 0 {
		n += 1 + sovApi(uint64(m.ProType))
	}
	l = len(m.Chance)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Loop != 0 {
		n += 1 + sovApi(uint64(m.Loop))
	}
	if m.Limit != 0 {
		n += 1 + sovApi(uint64(m.Limit))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Weight != 0 {
		n += 1 + sovApi(uint64(m.Weight))
	}
	if len(m.WhiteUids) > 0 {
		l = 0
		for _, e := range m.WhiteUids {
			l += sovApi(uint64(e))
		}
		n += 2 + sovApi(uint64(l)) + l
	}
	if m.Expire != 0 {
		n += 2 + sovApi(uint64(m.Expire))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpdatePoolPrizeReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovApi(uint64(m.Id))
	}
	if m.PoolId != 0 {
		n += 1 + sovApi(uint64(m.PoolId))
	}
	if m.Type != 0 {
		n += 1 + sovApi(uint64(m.Type))
	}
	if m.Num != 0 {
		n += 1 + sovApi(uint64(m.Num))
	}
	if m.ObjectId != 0 {
		n += 1 + sovApi(uint64(m.ObjectId))
	}
	if m.Expire != 0 {
		n += 1 + sovApi(uint64(m.Expire))
	}
	l = len(m.WebUrl)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.MobileUrl)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.JumpUrl)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.ProType != 0 {
		n += 1 + sovApi(uint64(m.ProType))
	}
	if m.Chance != 0 {
		n += 1 + sovApi(uint64(m.Chance))
	}
	if m.Loop != 0 {
		n += 1 + sovApi(uint64(m.Loop))
	}
	if m.Limit != 0 {
		n += 1 + sovApi(uint64(m.Limit))
	}
	if m.Weight != 0 {
		n += 1 + sovApi(uint64(m.Weight))
	}
	if len(m.WhiteUids) > 0 {
		l = 0
		for _, e := range m.WhiteUids {
			l += sovApi(uint64(e))
		}
		n += 2 + sovApi(uint64(l)) + l
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpdatePoolPrizeResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Status {
		n += 2
	}
	if m.PrizeId != 0 {
		n += 1 + sovApi(uint64(m.PrizeId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DeletePoolPrizeReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovApi(uint64(m.Id))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DeletePoolPrizeResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Status {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetPrizeTypeReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetPrizeTypeResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetPrizeTypeResp_List) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovApi(uint64(m.Type))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetPrizeExpireReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetPrizeExpireResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetPrizeExpireResp_List) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Expire != 0 {
		n += 1 + sovApi(uint64(m.Expire))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *StartStormReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Uid != 0 {
		n += 1 + sovApi(uint64(m.Uid))
	}
	if m.Ruid != 0 {
		n += 1 + sovApi(uint64(m.Ruid))
	}
	if m.Roomid != 0 {
		n += 1 + sovApi(uint64(m.Roomid))
	}
	if m.UseShield {
		n += 2
	}
	if m.Num != 0 {
		n += 1 + sovApi(uint64(m.Num))
	}
	if m.Beatid != 0 {
		n += 1 + sovApi(uint64(m.Beatid))
	}
	if m.SkipExternalCheck != 0 {
		n += 1 + sovApi(uint64(m.SkipExternalCheck))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *StartStormResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovApi(uint64(m.Code))
	}
	l = len(m.Msg)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Start != nil {
		l = m.Start.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *StartData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Time != 0 {
		n += 1 + sovApi(uint64(m.Time))
	}
	if m.Id != 0 {
		n += 1 + sovApi(uint64(m.Id))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CanStartStormResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovApi(uint64(m.Code))
	}
	l = len(m.Msg)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.RetStatus {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *JoinStormReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovApi(uint64(m.Id))
	}
	if m.Roomid != 0 {
		n += 1 + sovApi(uint64(m.Roomid))
	}
	l = len(m.Color)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Mid != 0 {
		n += 1 + sovApi(uint64(m.Mid))
	}
	l = len(m.Platform)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.CaptchaToken)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.CaptchaPhrase)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *JoinStormResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovApi(uint64(m.Code))
	}
	l = len(m.Msg)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Join != nil {
		l = m.Join.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *JoinData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GiftId != 0 {
		n += 1 + sovApi(uint64(m.GiftId))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Content)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.MobileContent)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.GiftImg)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.GiftNum != 0 {
		n += 1 + sovApi(uint64(m.GiftNum))
	}
	l = len(m.GiftName)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CheckStormReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Roomid != 0 {
		n += 1 + sovApi(uint64(m.Roomid))
	}
	if m.Uid != 0 {
		n += 1 + sovApi(uint64(m.Uid))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CheckStormResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovApi(uint64(m.Code))
	}
	l = len(m.Msg)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Check != nil {
		l = m.Check.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CheckData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovApi(uint64(m.Id))
	}
	if m.Roomid != 0 {
		n += 1 + sovApi(uint64(m.Roomid))
	}
	if m.Num != 0 {
		n += 1 + sovApi(uint64(m.Num))
	}
	l = len(m.SendNum)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Time != 0 {
		n += 1 + sovApi(uint64(m.Time))
	}
	l = len(m.Content)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.HasJoin != 0 {
		n += 1 + sovApi(uint64(m.HasJoin))
	}
	l = len(m.StormGif)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CapsuleGetCouponListReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Uid != 0 {
		n += 1 + sovApi(uint64(m.Uid))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CapsuleGetCouponListResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CapsuleGetCouponListResp_List) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Uid != 0 {
		n += 1 + sovApi(uint64(m.Uid))
	}
	l = len(m.AwardTime)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.AwardName)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.AwardCode)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Status != 0 {
		n += 1 + sovApi(uint64(m.Status))
	}
	l = len(m.RetryTime)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovApi(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozApi(x uint64) (n int) {
	return sovApi(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *CapsuleGetDetailReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CapsuleGetDetailReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CapsuleGetDetailReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.From = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Usage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Usage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Usage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Text", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Text = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Url", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Url = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Progress) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Progress: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Progress: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Now", wireType)
			}
			m.Now = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Now |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Max", wireType)
			}
			m.Max = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Max |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CapsuleGetDetailResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CapsuleGetDetailResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CapsuleGetDetailResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Normal", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Normal == nil {
				m.Normal = &CapsuleGetDetailResp_CapsuleInfo{}
			}
			if err := m.Normal.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Colorful", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Colorful == nil {
				m.Colorful = &CapsuleGetDetailResp_CapsuleInfo{}
			}
			if err := m.Colorful.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CapsuleGetDetailResp_Gift) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Gift: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Gift: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Image", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Image = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Usage", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Usage == nil {
				m.Usage = &Usage{}
			}
			if err := m.Usage.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WebImage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WebImage = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MobileImage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MobileImage = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CapsuleGetDetailResp_List) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: List: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: List: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Num", wireType)
			}
			m.Num = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Num |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gift", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Gift = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Date", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Date = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CapsuleGetDetailResp_CapsuleInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CapsuleInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CapsuleInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Status = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Coin", wireType)
			}
			m.Coin = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Coin |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Change", wireType)
			}
			m.Change = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Change |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Progress", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Progress == nil {
				m.Progress = &Progress{}
			}
			if err := m.Progress.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rule", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Rule = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gift", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Gift = append(m.Gift, &CapsuleGetDetailResp_Gift{})
			if err := m.Gift[len(m.Gift)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &CapsuleGetDetailResp_List{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CapsuleOpenCapsuleReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CapsuleOpenCapsuleReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CapsuleOpenCapsuleReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Platform", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Platform = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CapsuleOpenCapsuleResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CapsuleOpenCapsuleResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CapsuleOpenCapsuleResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Status = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Text", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Text = append(m.Text, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsEntity", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsEntity = bool(v != 0)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Info", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Info == nil {
				m.Info = &CapsuleOpenCapsuleResp_Info{}
			}
			if err := m.Info.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShowTitle", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ShowTitle = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Awards", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Awards = append(m.Awards, &CapsuleOpenCapsuleResp_Award{})
			if err := m.Awards[len(m.Awards)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CapsuleOpenCapsuleResp_CapsuleInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CapsuleInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CapsuleInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Coin", wireType)
			}
			m.Coin = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Coin |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Change", wireType)
			}
			m.Change = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Change |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Progress", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Progress == nil {
				m.Progress = &Progress{}
			}
			if err := m.Progress.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CapsuleOpenCapsuleResp_Info) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Info: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Info: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Normal", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Normal == nil {
				m.Normal = &CapsuleOpenCapsuleResp_CapsuleInfo{}
			}
			if err := m.Normal.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Colorful", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Colorful == nil {
				m.Colorful = &CapsuleOpenCapsuleResp_CapsuleInfo{}
			}
			if err := m.Colorful.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CapsuleOpenCapsuleResp_Award) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Award: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Award: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Num", wireType)
			}
			m.Num = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Num |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Text", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Text = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Img", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Img = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Usage", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Usage == nil {
				m.Usage = &Usage{}
			}
			if err := m.Usage.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WebImage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WebImage = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MobileImage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MobileImage = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CapsuleGetCapsuleInfoReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CapsuleGetCapsuleInfoReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CapsuleGetCapsuleInfoReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.From = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CapsuleGetCapsuleInfoResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CapsuleGetCapsuleInfoResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CapsuleGetCapsuleInfoResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Coin", wireType)
			}
			m.Coin = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Coin |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rule", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Rule = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GiftList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GiftList = append(m.GiftList, &CapsuleGetCapsuleInfoResp_GiftList{})
			if err := m.GiftList[len(m.GiftList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GiftFilter", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GiftFilter = append(m.GiftFilter, &CapsuleGetCapsuleInfoResp_GiftFilter{})
			if err := m.GiftFilter[len(m.GiftFilter)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CapsuleGetCapsuleInfoResp_GiftList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GiftList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GiftList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Num", wireType)
			}
			m.Num = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Num |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Weight", wireType)
			}
			m.Weight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Weight |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WebUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WebUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MobileUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MobileUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Usage", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Usage == nil {
				m.Usage = &Usage{}
			}
			if err := m.Usage.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Expire", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Expire = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CapsuleGetCapsuleInfoResp_GiftFilter) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GiftFilter: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GiftFilter: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WebUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WebUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MobileUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MobileUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Usage", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Usage == nil {
				m.Usage = &Usage{}
			}
			if err := m.Usage.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CapsuleOpenCapsuleByTypeReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CapsuleOpenCapsuleByTypeReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CapsuleOpenCapsuleByTypeReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Platform", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Platform = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CapsuleOpenCapsuleByTypeResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CapsuleOpenCapsuleByTypeResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CapsuleOpenCapsuleByTypeResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Status = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsEntity", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsEntity = bool(v != 0)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Info", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Info == nil {
				m.Info = &CapsuleOpenCapsuleByTypeResp_CapsuleInfo{}
			}
			if err := m.Info.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Awards", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Awards = append(m.Awards, &CapsuleOpenCapsuleByTypeResp_Award{})
			if err := m.Awards[len(m.Awards)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Text", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Text = append(m.Text, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CapsuleOpenCapsuleByTypeResp_CapsuleInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CapsuleInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CapsuleInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Coin", wireType)
			}
			m.Coin = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Coin |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CapsuleOpenCapsuleByTypeResp_Award) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Award: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Award: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Num", wireType)
			}
			m.Num = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Num |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Text", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Text = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WebUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WebUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MobileUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MobileUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Usage", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Usage == nil {
				m.Usage = &Usage{}
			}
			if err := m.Usage.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Weight", wireType)
			}
			m.Weight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Weight |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Expire", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Expire = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetCoinListReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetCoinListReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetCoinListReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Page", wireType)
			}
			m.Page = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Page |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageSize", wireType)
			}
			m.PageSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PageSize |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetCoinListResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetCoinListResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetCoinListResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Total", wireType)
			}
			m.Total = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Total |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalPage", wireType)
			}
			m.TotalPage = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalPage |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &GetCoinListResp_List{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetCoinListResp_List) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: List: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: List: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChangeNum", wireType)
			}
			m.ChangeNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChangeNum |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTime", wireType)
			}
			m.StartTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartTime |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndTime", wireType)
			}
			m.EndTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EndTime |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GiftType", wireType)
			}
			m.GiftType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GiftType |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GiftConfig", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GiftConfig = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AreaIds", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AreaIds = append(m.AreaIds, &GetCoinListResp_List_AreaIds{})
			if err := m.AreaIds[len(m.AreaIds)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetCoinListResp_List_AreaIds) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AreaIds: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AreaIds: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParentId", wireType)
			}
			m.ParentId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ParentId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsAll", wireType)
			}
			m.IsAll = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IsAll |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.List = append(m.List, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthApi
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.List) == 0 {
					m.List = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.List = append(m.List, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateCoinConfigReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateCoinConfigReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateCoinConfigReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChangeNum", wireType)
			}
			m.ChangeNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChangeNum |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTime", wireType)
			}
			m.StartTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartTime |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndTime", wireType)
			}
			m.EndTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EndTime |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GiftType", wireType)
			}
			m.GiftType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GiftType |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.GiftIds = append(m.GiftIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthApi
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.GiftIds) == 0 {
					m.GiftIds = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.GiftIds = append(m.GiftIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field GiftIds", wireType)
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AreaIds", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AreaIds = append(m.AreaIds, &UpdateCoinConfigReq_AreaIds{})
			if err := m.AreaIds[len(m.AreaIds)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateCoinConfigReq_AreaIds) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AreaIds: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AreaIds: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParentId", wireType)
			}
			m.ParentId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ParentId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsAll", wireType)
			}
			m.IsAll = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IsAll |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.List = append(m.List, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthApi
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.List) == 0 {
					m.List = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.List = append(m.List, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateCoinConfigResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateCoinConfigResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateCoinConfigResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Status = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateCoinStatusReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateCoinStatusReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateCoinStatusReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateCoinStatusResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateCoinStatusResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateCoinStatusResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Status = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteCoinReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteCoinReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteCoinReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteCoinResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteCoinResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteCoinResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Status = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetPoolListReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetPoolListReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetPoolListReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Page", wireType)
			}
			m.Page = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Page |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageSize", wireType)
			}
			m.PageSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PageSize |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetPoolListResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetPoolListResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetPoolListResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Total", wireType)
			}
			m.Total = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Total |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalPage", wireType)
			}
			m.TotalPage = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalPage |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &GetPoolListResp_List{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetPoolListResp_List) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: List: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: List: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoinId", wireType)
			}
			m.CoinId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CoinId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTime", wireType)
			}
			m.StartTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartTime |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndTime", wireType)
			}
			m.EndTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EndTime |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rule", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Rule = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoinTitle", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CoinTitle = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdatePoolReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdatePoolReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdatePoolReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoinId", wireType)
			}
			m.CoinId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CoinId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTime", wireType)
			}
			m.StartTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartTime |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndTime", wireType)
			}
			m.EndTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EndTime |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rule", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Rule = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdatePoolResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdatePoolResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdatePoolResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Status = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeletePoolReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeletePoolReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeletePoolReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeletePoolResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeletePoolResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeletePoolResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Status = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdatePoolStatusReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdatePoolStatusReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdatePoolStatusReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdatePoolStatusResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdatePoolStatusResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdatePoolStatusResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Status = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetPoolPrizeReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetPoolPrizeReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetPoolPrizeReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolId", wireType)
			}
			m.PoolId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PoolId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetPoolPrizeResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetPoolPrizeResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetPoolPrizeResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &GetPoolPrizeResp_List{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetPoolPrizeResp_List) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: List: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: List: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolId", wireType)
			}
			m.PoolId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PoolId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Num", wireType)
			}
			m.Num = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Num |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjectId", wireType)
			}
			m.ObjectId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ObjectId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WebUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WebUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MobileUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MobileUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JumpUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.JumpUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProType", wireType)
			}
			m.ProType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ProType |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Chance", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Chance = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Loop", wireType)
			}
			m.Loop = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Loop |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Weight", wireType)
			}
			m.Weight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Weight |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 16:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.WhiteUids = append(m.WhiteUids, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthApi
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.WhiteUids) == 0 {
					m.WhiteUids = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.WhiteUids = append(m.WhiteUids, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field WhiteUids", wireType)
			}
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Expire", wireType)
			}
			m.Expire = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Expire |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdatePoolPrizeReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdatePoolPrizeReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdatePoolPrizeReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolId", wireType)
			}
			m.PoolId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PoolId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Num", wireType)
			}
			m.Num = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Num |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObjectId", wireType)
			}
			m.ObjectId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ObjectId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Expire", wireType)
			}
			m.Expire = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Expire |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WebUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WebUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MobileUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MobileUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JumpUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.JumpUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProType", wireType)
			}
			m.ProType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ProType |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Chance", wireType)
			}
			m.Chance = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Chance |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Loop", wireType)
			}
			m.Loop = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Loop |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Weight", wireType)
			}
			m.Weight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Weight |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 16:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.WhiteUids = append(m.WhiteUids, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthApi
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.WhiteUids) == 0 {
					m.WhiteUids = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.WhiteUids = append(m.WhiteUids, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field WhiteUids", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdatePoolPrizeResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdatePoolPrizeResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdatePoolPrizeResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Status = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrizeId", wireType)
			}
			m.PrizeId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PrizeId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeletePoolPrizeReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeletePoolPrizeReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeletePoolPrizeReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeletePoolPrizeResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeletePoolPrizeResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeletePoolPrizeResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Status = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetPrizeTypeReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetPrizeTypeReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetPrizeTypeReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetPrizeTypeResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetPrizeTypeResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetPrizeTypeResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &GetPrizeTypeResp_List{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetPrizeTypeResp_List) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: List: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: List: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetPrizeExpireReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetPrizeExpireReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetPrizeExpireReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetPrizeExpireResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetPrizeExpireResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetPrizeExpireResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &GetPrizeExpireResp_List{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetPrizeExpireResp_List) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: List: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: List: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Expire", wireType)
			}
			m.Expire = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Expire |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StartStormReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StartStormReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StartStormReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ruid", wireType)
			}
			m.Ruid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ruid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Roomid", wireType)
			}
			m.Roomid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Roomid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UseShield", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UseShield = bool(v != 0)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Num", wireType)
			}
			m.Num = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Num |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Beatid", wireType)
			}
			m.Beatid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Beatid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SkipExternalCheck", wireType)
			}
			m.SkipExternalCheck = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SkipExternalCheck |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StartStormResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StartStormResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StartStormResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Start", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Start == nil {
				m.Start = &StartData{}
			}
			if err := m.Start.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StartData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StartData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StartData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Time", wireType)
			}
			m.Time = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Time |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CanStartStormResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CanStartStormResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CanStartStormResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetStatus", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RetStatus = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *JoinStormReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: JoinStormReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: JoinStormReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Roomid", wireType)
			}
			m.Roomid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Roomid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Color", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Color = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mid", wireType)
			}
			m.Mid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Platform", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Platform = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CaptchaToken", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CaptchaToken = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CaptchaPhrase", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CaptchaPhrase = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *JoinStormResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: JoinStormResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: JoinStormResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Join", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Join == nil {
				m.Join = &JoinData{}
			}
			if err := m.Join.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *JoinData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: JoinData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: JoinData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GiftId", wireType)
			}
			m.GiftId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GiftId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Content = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MobileContent", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MobileContent = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GiftImg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GiftImg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GiftNum", wireType)
			}
			m.GiftNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GiftNum |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GiftName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GiftName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CheckStormReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CheckStormReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CheckStormReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Roomid", wireType)
			}
			m.Roomid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Roomid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CheckStormResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CheckStormResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CheckStormResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Check", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Check == nil {
				m.Check = &CheckData{}
			}
			if err := m.Check.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CheckData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CheckData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CheckData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Roomid", wireType)
			}
			m.Roomid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Roomid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Num", wireType)
			}
			m.Num = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Num |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SendNum", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SendNum = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Time", wireType)
			}
			m.Time = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Time |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Content = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HasJoin", wireType)
			}
			m.HasJoin = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HasJoin |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StormGif", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StormGif = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CapsuleGetCouponListReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CapsuleGetCouponListReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CapsuleGetCouponListReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CapsuleGetCouponListResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CapsuleGetCouponListResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CapsuleGetCouponListResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &CapsuleGetCouponListResp_List{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CapsuleGetCouponListResp_List) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: List: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: List: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AwardTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AwardTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AwardName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AwardName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AwardCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AwardCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetryTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RetryTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipApi(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowApi
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowApi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowApi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthApi
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowApi
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipApi(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthApi = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowApi   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("app/service/live/xlottery/api/grpc/v1/api.proto", fileDescriptor_api_9467f450102a207d)
}

var fileDescriptor_api_9467f450102a207d = []byte{
	// 3747 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xd4, 0x3b, 0x4b, 0x6f, 0x1c, 0xc7,
	0x99, 0x98, 0xf7, 0x4c, 0xf1, 0x21, 0xaa, 0x25, 0xcb, 0xd4, 0xd8, 0x52, 0x53, 0xad, 0xa7, 0xc5,
	0x25, 0xb9, 0x7a, 0xd8, 0x5a, 0x6b, 0xe1, 0x95, 0x2d, 0x4a, 0x2b, 0x53, 0xbb, 0xd6, 0x12, 0xa5,
	0x87, 0x85, 0xf5, 0x7a, 0xc7, 0xcd, 0x99, 0xe6, 0xb0, 0xad, 0x99, 0xe9, 0x66, 0x77, 0x8f, 0x28,
	0x69, 0xb1, 0x87, 0x20, 0x7f, 0x21, 0x39, 0x04, 0x49, 0x0e, 0x41, 0x10, 0xe4, 0x12, 0x18, 0xc8,
	0x35, 0x40, 0x80, 0x00, 0xce, 0x21, 0xc8, 0xc9, 0x09, 0x10, 0x38, 0xb9, 0x34, 0x0c, 0x1f, 0x19,
	0xf8, 0x32, 0xd7, 0x5c, 0x82, 0xef, 0xab, 0x67, 0xcf, 0x74, 0x73, 0x86, 0x92, 0x01, 0x3b, 0x97,
	0x9e, 0xaa, 0xaf, 0xab, 0xbf, 0xfa, 0xea, 0xab, 0xef, 0x5d, 0x35, 0x64, 0xc5, 0xf6, 0xfd, 0x95,
	0xd0, 0x09, 0x1e, 0xbb, 0x4d, 0x67, 0xa5, 0xe3, 0x3e, 0x76, 0x56, 0x9e, 0x74, 0xbc, 0x28, 0x72,
	0x82, 0xa7, 0x2b, 0xb6, 0xef, 0xae, 0xb4, 0x03, 0xbf, 0xb9, 0xf2, 0xf8, 0x02, 0xb4, 0x97, 0xfd,
	0xc0, 0x8b, 0x3c, 0x63, 0x0e, 0x06, 0x2d, 0x8b, 0x41, 0xcb, 0x8f, 0x2f, 0xd4, 0x97, 0xda, 0x6e,
	0xb4, 0xd5, 0xdf, 0x58, 0x6e, 0x7a, 0xdd, 0x95, 0xb6, 0xd7, 0xf6, 0x56, 0x70, 0xe0, 0x46, 0x7f,
	0x13, 0x7b, 0xd8, 0xc1, 0x16, 0x43, 0x60, 0xdd, 0x21, 0x87, 0x56, 0x6d, 0x3f, 0xec, 0x77, 0x9c,
	0x5b, 0x4e, 0x74, 0xc3, 0x89, 0x6c, 0xb7, 0x43, 0x9d, 0x6d, 0xe3, 0x28, 0x29, 0xf4, 0xdd, 0xd6,
	0x7c, 0x6e, 0x21, 0x77, 0xae, 0x70, 0xbd, 0xb2, 0x1b, 0x9b, 0xd0, 0xa5, 0xf0, 0x30, 0x5e, 0x25,
	0xc5, 0xcd, 0xc0, 0xeb, 0xce, 0xe7, 0x17, 0x72, 0xe7, 0x6a, 0xd7, 0xab, 0xbb, 0xb1, 0x89, 0x7d,
	0x8a, 0x4f, 0xeb, 0x6d, 0x52, 0xba, 0x1f, 0xda, 0x6d, 0x07, 0x86, 0x45, 0xce, 0x93, 0x08, 0x51,
	0xf0, 0x61, 0xd0, 0xa7, 0xf8, 0x44, 0xfc, 0x41, 0x87, 0xe3, 0x60, 0xf8, 0x83, 0x0e, 0x85, 0x87,
	0xf5, 0x36, 0xa9, 0xae, 0x07, 0x5e, 0x3b, 0x70, 0xc2, 0x10, 0x86, 0xf5, 0xbc, 0x1d, 0x9d, 0x8c,
	0x9e, 0xb7, 0x43, 0xe1, 0x01, 0xaf, 0xba, 0xf6, 0x13, 0xc4, 0xc0, 0x5f, 0x75, 0xed, 0x27, 0x14,
	0x1e, 0xd6, 0x8f, 0x2a, 0xe4, 0xf0, 0xe8, 0xa2, 0x42, 0xdf, 0x78, 0x40, 0xca, 0x3d, 0x2f, 0xe8,
	0xda, 0x1d, 0xc4, 0x38, 0x75, 0xf1, 0xe2, 0xf2, 0x30, 0xfb, 0x96, 0xd3, 0xbe, 0x13, 0xc0, 0xb5,
	0xde, 0xa6, 0x77, 0x9d, 0xec, 0xc6, 0x26, 0xc7, 0x42, 0xf9, 0xaf, 0xf1, 0x3f, 0xa4, 0xda, 0xf4,
	0x3a, 0x5e, 0xb0, 0xd9, 0x67, 0x4b, 0x7a, 0x3e, 0xcc, 0xd3, 0xbb, 0xb1, 0x29, 0xf1, 0x50, 0xd9,
	0xaa, 0x7f, 0x91, 0x23, 0xc5, 0x5b, 0xee, 0x66, 0x04, 0x2c, 0xed, 0xd9, 0x5d, 0x47, 0xe7, 0x3c,
	0xf4, 0x29, 0x3e, 0x0d, 0x93, 0x94, 0xdc, 0xae, 0xdd, 0x76, 0xe6, 0x0b, 0xf8, 0xba, 0xb6, 0x1b,
	0x9b, 0x0c, 0x40, 0xd9, 0x8f, 0xf1, 0x2f, 0xa4, 0xd4, 0x87, 0xad, 0x99, 0x2f, 0x22, 0x89, 0x2f,
	0x8f, 0x92, 0x88, 0x3b, 0xc7, 0xbe, 0xc4, 0x91, 0x94, 0xfd, 0x18, 0xe7, 0x49, 0x6d, 0xc7, 0xd9,
	0x68, 0x30, 0xf4, 0x25, 0x44, 0x3f, 0xb3, 0x1b, 0x9b, 0x0a, 0x48, 0xab, 0x3b, 0xce, 0xc6, 0x1a,
	0xce, 0x72, 0x89, 0x4c, 0x77, 0xbd, 0x0d, 0xb7, 0xe3, 0xf0, 0xe1, 0x65, 0x1c, 0x3e, 0xb7, 0x1b,
	0x9b, 0x09, 0x38, 0x9d, 0x62, 0x3d, 0xfc, 0xa8, 0xfe, 0x7f, 0xa4, 0xf8, 0x9f, 0x6e, 0x88, 0x62,
	0xd1, 0xeb, 0x77, 0x13, 0xfb, 0xdd, 0xef, 0x52, 0x78, 0xc0, 0xe2, 0xdb, 0xee, 0x66, 0xa4, 0x2f,
	0x1e, 0xfa, 0x14, 0x9f, 0xf0, 0xb6, 0x65, 0x47, 0x62, 0xed, 0xf8, 0x16, 0xfa, 0x14, 0x9f, 0x92,
	0x71, 0xc5, 0x34, 0xc6, 0xd5, 0xbf, 0xca, 0x93, 0x29, 0x6d, 0x1f, 0x0c, 0x8b, 0x94, 0xc3, 0xc8,
	0x8e, 0xfa, 0x21, 0xd2, 0x51, 0x65, 0x3b, 0xce, 0x20, 0x94, 0xff, 0x02, 0xc6, 0xa6, 0xe7, 0xf6,
	0xb8, 0xf8, 0x21, 0x46, 0xe8, 0x53, 0x7c, 0x02, 0x86, 0xe6, 0x96, 0xdd, 0xe3, 0x7b, 0x51, 0x60,
	0x18, 0x18, 0x84, 0xf2, 0x5f, 0xe3, 0x06, 0xa9, 0xfa, 0x5c, 0xcc, 0xf9, 0x86, 0xd4, 0x47, 0x37,
	0x44, 0x28, 0x02, 0x93, 0x0d, 0x31, 0x9e, 0xca, 0x16, 0xd0, 0x11, 0xf4, 0x3b, 0x62, 0x53, 0x90,
	0x0e, 0xe8, 0x53, 0x7c, 0x1a, 0x6b, 0x9c, 0x67, 0xe5, 0x85, 0xc2, 0xb9, 0xa9, 0x8b, 0x8b, 0x13,
	0xca, 0x24, 0xc8, 0xda, 0x08, 0x83, 0xd7, 0x48, 0xb1, 0xe3, 0x86, 0xd1, 0x7c, 0x65, 0x5f, 0xa8,
	0x60, 0x53, 0x19, 0x2a, 0xf8, 0x98, 0xe2, 0xd3, 0xfa, 0x61, 0x8e, 0xbc, 0xc4, 0x47, 0xff, 0x97,
	0xef, 0xf4, 0x78, 0x73, 0xbc, 0xd5, 0x89, 0x9e, 0xfa, 0x09, 0xd9, 0x87, 0x3e, 0xc5, 0x27, 0xc8,
	0x7e, 0xd3, 0xeb, 0xf7, 0x22, 0xce, 0x6f, 0x94, 0x60, 0x04, 0x50, 0xf6, 0x63, 0x9c, 0x23, 0x55,
	0xbf, 0x63, 0x47, 0x9b, 0x5e, 0xd0, 0xe5, 0x52, 0xc0, 0x38, 0xca, 0x61, 0x54, 0xb6, 0xac, 0xdf,
	0x56, 0xc8, 0x91, 0x34, 0xea, 0x42, 0x7f, 0x52, 0xc1, 0x40, 0xb3, 0x97, 0x5f, 0x28, 0xa4, 0x98,
	0xbd, 0x73, 0xa4, 0xea, 0x86, 0x37, 0x7b, 0x91, 0x1b, 0x3d, 0x45, 0x52, 0xab, 0x8c, 0x0c, 0x01,
	0xa3, 0xb2, 0x65, 0xfc, 0x07, 0x29, 0xba, 0xbd, 0x4d, 0x8f, 0x8b, 0xc6, 0x52, 0x26, 0xbf, 0x87,
	0x68, 0x5c, 0x46, 0x4b, 0x82, 0xd3, 0xc2, 0xe7, 0x14, 0x9f, 0xc6, 0x22, 0xa9, 0x85, 0x5b, 0xde,
	0xce, 0x3d, 0x37, 0xea, 0x24, 0xf4, 0x57, 0x02, 0xa9, 0x6a, 0x1a, 0x94, 0x94, 0xed, 0x1d, 0x3b,
	0x68, 0x85, 0x5c, 0x6c, 0x96, 0x27, 0x9e, 0xfb, 0x1d, 0xf8, 0x8c, 0x71, 0x85, 0x61, 0xa0, 0xfc,
	0xb7, 0xfe, 0xfd, 0x5c, 0x52, 0xc5, 0x84, 0xfa, 0xe4, 0xc6, 0xa8, 0x4f, 0x7e, 0x22, 0xf5, 0x29,
	0x3c, 0xaf, 0xfa, 0xd4, 0x7f, 0x93, 0x23, 0x45, 0x24, 0xe8, 0xe1, 0x90, 0x67, 0xb8, 0x3c, 0xf1,
	0xa2, 0xc7, 0xf9, 0x86, 0xff, 0x1d, 0xf1, 0x0d, 0xcf, 0x87, 0x3b, 0xcb, 0x3b, 0x7c, 0x2f, 0x4f,
	0x4a, 0xc8, 0xf8, 0x31, 0xee, 0x81, 0x9b, 0xd6, 0x42, 0xba, 0x69, 0x45, 0x99, 0x2d, 0x66, 0xb9,
	0x6a, 0xb7, 0xdb, 0xe6, 0x62, 0x83, 0x1f, 0xba, 0xdd, 0x36, 0x85, 0x87, 0xf2, 0x28, 0xe5, 0x17,
	0xf2, 0x28, 0x95, 0xfd, 0x79, 0x94, 0xea, 0x04, 0x1e, 0xc5, 0xda, 0x26, 0xf3, 0xca, 0x22, 0x69,
	0x7c, 0x7c, 0x21, 0x33, 0x23, 0x42, 0x9f, 0x42, 0x6a, 0xe8, 0xf3, 0xfb, 0x32, 0x39, 0x9a, 0x31,
	0x67, 0xe8, 0x8f, 0x11, 0x79, 0x61, 0xc7, 0xf3, 0xa9, 0x76, 0xfc, 0x23, 0x52, 0x03, 0x23, 0xdc,
	0x40, 0x0b, 0x5c, 0x40, 0xad, 0xbc, 0xbc, 0x97, 0x05, 0x1e, 0x9a, 0x1b, 0x2d, 0x3a, 0x9a, 0x62,
	0xe4, 0xb1, 0x44, 0x45, 0xab, 0x6d, 0xfe, 0xc2, 0xd8, 0x22, 0x53, 0x08, 0xde, 0x74, 0x3b, 0x91,
	0x13, 0xcc, 0x17, 0x71, 0x8e, 0x37, 0xf6, 0x3b, 0xc7, 0xbf, 0xe3, 0xd7, 0xd7, 0x0f, 0xec, 0xc6,
	0xa6, 0x8e, 0x8e, 0x92, 0xb6, 0x7c, 0x59, 0xff, 0x2c, 0x4f, 0xaa, 0x82, 0x1e, 0xe3, 0x08, 0xc9,
	0xcb, 0x8d, 0x28, 0xef, 0xc6, 0x66, 0xde, 0x6d, 0xd1, 0xbc, 0xfb, 0x02, 0xa2, 0x6c, 0x91, 0xf2,
	0x8e, 0xe3, 0xb6, 0xb7, 0x98, 0x30, 0x73, 0xd3, 0xc1, 0x20, 0x94, 0xff, 0x1a, 0xa7, 0x48, 0x05,
	0xc4, 0x0c, 0xe2, 0x4f, 0x26, 0xd4, 0x53, 0xbb, 0xb1, 0x29, 0x40, 0x30, 0x6a, 0xe3, 0x7e, 0xd0,
	0x31, 0x96, 0x08, 0xe1, 0xd2, 0x05, 0x03, 0x59, 0x14, 0x33, 0xbb, 0x1b, 0x9b, 0x1a, 0x94, 0xd6,
	0x58, 0x1b, 0x86, 0x4b, 0x55, 0xa8, 0xec, 0x57, 0x15, 0x84, 0xc8, 0x55, 0x95, 0x60, 0x68, 0x22,
	0x67, 0x91, 0xb2, 0xf3, 0xc4, 0x77, 0x03, 0x67, 0xbe, 0x86, 0x24, 0xe0, 0x82, 0x18, 0x84, 0xf2,
	0xdf, 0xfa, 0x1f, 0x72, 0x84, 0x28, 0xf6, 0x3f, 0x27, 0x53, 0x35, 0xae, 0x14, 0x26, 0xe5, 0x4a,
	0x71, 0x62, 0xae, 0x94, 0xf6, 0xc9, 0x15, 0xeb, 0x27, 0x39, 0xf2, 0xca, 0xa8, 0x55, 0xbc, 0xfe,
	0xf4, 0x1e, 0xb0, 0xe6, 0x5b, 0x12, 0x2a, 0xfc, 0xa5, 0x44, 0x5e, 0xcd, 0xa6, 0x71, 0xc2, 0x80,
	0x41, 0x0f, 0x09, 0xf2, 0x7b, 0x86, 0x04, 0x0f, 0x79, 0x48, 0xc0, 0xdc, 0xdd, 0xd5, 0x49, 0xbc,
	0x88, 0xa2, 0x25, 0xe1, 0x4b, 0x86, 0xe3, 0x83, 0x87, 0xd2, 0xe5, 0x17, 0xc7, 0x18, 0x97, 0x74,
	0xdc, 0x99, 0x8e, 0x5f, 0xba, 0x96, 0x52, 0x5a, 0x38, 0x54, 0x5f, 0xdc, 0x47, 0x54, 0x50, 0xff,
	0xab, 0x74, 0x74, 0x5f, 0xbb, 0xd5, 0xd8, 0xdb, 0x01, 0x7e, 0xcb, 0xec, 0x85, 0x32, 0x71, 0xd5,
	0x4c, 0x13, 0x27, 0x54, 0xa0, 0x36, 0xc6, 0xa6, 0x90, 0x2c, 0x9b, 0x62, 0xfd, 0x2c, 0x47, 0x66,
	0xc1, 0xca, 0x7b, 0x6e, 0x0f, 0x2c, 0x35, 0xa8, 0xdc, 0x35, 0x52, 0xf4, 0x81, 0x62, 0xc6, 0xf8,
	0x45, 0x40, 0x0a, 0xfd, 0x41, 0x6c, 0x9a, 0xa0, 0x0e, 0x57, 0x2d, 0xe8, 0x59, 0x0b, 0x8f, 0xed,
	0x8e, 0x0b, 0x59, 0xd7, 0x55, 0x2b, 0x70, 0xb6, 0xfb, 0x6e, 0xe0, 0xb4, 0x2c, 0x8a, 0x03, 0x0d,
	0x4a, 0x6a, 0xf0, 0xdb, 0x08, 0xdd, 0x67, 0x22, 0xb4, 0x7b, 0x1d, 0x1c, 0x92, 0x04, 0x0e, 0x62,
	0xf3, 0x94, 0x42, 0x85, 0xa0, 0x74, 0x7c, 0x55, 0x78, 0x7f, 0x17, 0x5e, 0x7f, 0x5a, 0x22, 0x07,
	0x12, 0x74, 0x86, 0x3e, 0xa8, 0x78, 0xe4, 0x45, 0x3c, 0x96, 0xe3, 0x2a, 0x8e, 0x00, 0xca, 0x7e,
	0x60, 0xaf, 0xb0, 0xd1, 0xc0, 0xf5, 0x30, 0x4a, 0x70, 0xaf, 0x14, 0x94, 0xd6, 0xb0, 0xbd, 0x6e,
	0x63, 0xac, 0x59, 0xd4, 0x3c, 0xef, 0x99, 0xd1, 0xad, 0x1a, 0x22, 0x20, 0x35, 0xed, 0xa9, 0xff,
	0xa0, 0xc8, 0x93, 0xdc, 0x2c, 0xf1, 0x05, 0xb2, 0x31, 0x42, 0xcf, 0xab, 0x04, 0x1e, 0x01, 0x94,
	0xfd, 0x00, 0xd9, 0x2c, 0xfa, 0x6d, 0x28, 0x41, 0x46, 0xb2, 0x15, 0x94, 0xd6, 0x58, 0xfb, 0x4e,
	0xbf, 0x0b, 0xc3, 0xc3, 0xc8, 0x0e, 0xa2, 0x46, 0xe4, 0xf2, 0xdc, 0x97, 0x0f, 0x57, 0x50, 0x5a,
	0xc3, 0xf6, 0x3d, 0xb7, 0xeb, 0x18, 0x67, 0x49, 0xd5, 0xe9, 0xb5, 0xd8, 0xe0, 0x12, 0x0e, 0x46,
	0x43, 0x24, 0x60, 0xb4, 0xe2, 0xf4, 0x5a, 0x38, 0x50, 0x59, 0xb5, 0xb2, 0x12, 0xc0, 0x21, 0xab,
	0x76, 0x9e, 0x47, 0x2c, 0x28, 0x85, 0x15, 0x1c, 0xa6, 0x62, 0x0f, 0x14, 0x45, 0x8c, 0x3d, 0xc0,
	0x82, 0x18, 0xff, 0xcc, 0x63, 0x8f, 0xa6, 0xd7, 0xdb, 0x74, 0xdb, 0x3c, 0xbc, 0x53, 0x31, 0x04,
	0x03, 0xb3, 0x18, 0x62, 0x15, 0xdb, 0xc6, 0xfb, 0xa4, 0x6a, 0x07, 0x8e, 0xdd, 0x70, 0x5b, 0xe1,
	0x7c, 0x2d, 0x2b, 0x49, 0x49, 0xdb, 0x94, 0xe5, 0x77, 0x02, 0xc7, 0x5e, 0x6b, 0xf1, 0x84, 0x40,
	0xe0, 0xa0, 0x15, 0x9b, 0x81, 0xeb, 0x8f, 0x49, 0x85, 0x8f, 0x80, 0x15, 0xf8, 0x76, 0xe0, 0xf4,
	0xa2, 0x86, 0xdc, 0xac, 0x19, 0x26, 0xac, 0x1c, 0x08, 0x42, 0x08, 0xcd, 0xb5, 0x96, 0x71, 0x82,
	0x94, 0xdd, 0xb0, 0x61, 0x77, 0x3a, 0x7a, 0xc2, 0xc2, 0x20, 0xb4, 0xe4, 0x86, 0xef, 0x74, 0x3a,
	0xa0, 0x91, 0x52, 0x86, 0x0a, 0x23, 0x29, 0xf1, 0x2f, 0x2a, 0xe4, 0xd0, 0x7d, 0x1f, 0xa4, 0x1c,
	0x48, 0x66, 0xab, 0x04, 0x95, 0x3b, 0xa9, 0x89, 0xca, 0x21, 0x26, 0x2a, 0x83, 0xd8, 0xac, 0x31,
	0x1d, 0x71, 0x5b, 0x16, 0xca, 0xcd, 0x6a, 0x52, 0x6e, 0x96, 0xa4, 0xdc, 0x0c, 0x62, 0x73, 0x81,
	0x0d, 0xc5, 0x6e, 0xba, 0x2a, 0x71, 0xd9, 0x7a, 0x90, 0x22, 0x5b, 0x57, 0x92, 0xb2, 0x35, 0x88,
	0xcd, 0xd3, 0x0c, 0x9d, 0x82, 0xa5, 0xe3, 0xd4, 0x84, 0xf0, 0x41, 0x8a, 0x10, 0x5e, 0x49, 0x0a,
	0xa1, 0xc2, 0xab, 0x60, 0x19, 0x78, 0x95, 0xb4, 0xde, 0x19, 0x91, 0xd6, 0x4b, 0xba, 0xb4, 0x0e,
	0x62, 0xf3, 0x24, 0xc3, 0x29, 0x20, 0xe9, 0x18, 0xa5, 0x50, 0xdf, 0x1a, 0x12, 0xea, 0x15, 0x25,
	0xd4, 0x83, 0xd8, 0x3c, 0x21, 0xe9, 0x8b, 0xfa, 0x61, 0x3a, 0x26, 0x21, 0xf9, 0x74, 0x54, 0xf2,
	0x5f, 0x4f, 0x48, 0xbe, 0x32, 0x72, 0x12, 0x94, 0x61, 0xe4, 0xa4, 0x86, 0x5c, 0x25, 0xd8, 0x46,
	0x79, 0xaf, 0xa2, 0x00, 0x99, 0xb0, 0x58, 0x01, 0x1b, 0xc4, 0xe6, 0x01, 0x0d, 0xa3, 0xdb, 0x0a,
	0x2d, 0x5a, 0x81, 0x26, 0xc8, 0xf1, 0xff, 0x8f, 0xe8, 0x4a, 0x4a, 0x31, 0x21, 0x45, 0xf6, 0xa4,
	0xaa, 0x5c, 0xd2, 0x55, 0x45, 0xf1, 0x55, 0x40, 0x32, 0xf8, 0x2a, 0x34, 0xea, 0x8f, 0x39, 0xa5,
	0x52, 0x74, 0x54, 0xa5, 0x5e, 0x4f, 0xa8, 0x94, 0x6e, 0xff, 0x39, 0x28, 0xd3, 0xfe, 0x73, 0xd5,
	0xbb, 0x38, 0xa4, 0x7a, 0xaf, 0x28, 0xd5, 0x1b, 0xc4, 0xe6, 0x0c, 0xd7, 0x14, 0xec, 0x5b, 0x42,
	0x17, 0xaf, 0x25, 0x74, 0x71, 0x51, 0xe8, 0xa2, 0x72, 0x64, 0xa8, 0x93, 0xe9, 0x8e, 0x0c, 0x5f,
	0x5d, 0x25, 0x87, 0x47, 0x39, 0x36, 0x59, 0xbc, 0x67, 0x7d, 0x37, 0xa7, 0xab, 0xfa, 0x5d, 0xf6,
	0xd2, 0xd9, 0x36, 0xae, 0x68, 0xaa, 0x7e, 0x56, 0xaa, 0xfa, 0x31, 0xa9, 0xea, 0xa9, 0xe4, 0x80,
	0xfa, 0x5f, 0x92, 0x93, 0x6a, 0x1c, 0x90, 0x92, 0x3b, 0x93, 0x90, 0x5c, 0x49, 0x45, 0x62, 0x05,
	0x82, 0x88, 0x09, 0x57, 0xf0, 0x2e, 0x99, 0xb9, 0xe1, 0x74, 0x1c, 0xf6, 0xed, 0x8b, 0x90, 0x6e,
	0x5d, 0x26, 0xb3, 0x3a, 0xa6, 0x09, 0xe7, 0xe7, 0xa1, 0xc9, 0xba, 0xe7, 0x75, 0xbe, 0xd5, 0xa1,
	0xc9, 0x9f, 0x0b, 0x18, 0x9a, 0x28, 0x3a, 0xbf, 0xa1, 0xd0, 0x44, 0x27, 0x20, 0x3d, 0x34, 0xf9,
	0x24, 0x3f, 0x26, 0x34, 0x39, 0x45, 0x2a, 0x10, 0x83, 0x83, 0xde, 0x32, 0x92, 0x30, 0x04, 0xe6,
	0x20, 0x5a, 0x86, 0xc6, 0x9a, 0x16, 0xc0, 0x14, 0xb2, 0x03, 0x98, 0x6f, 0x2c, 0x22, 0x11, 0x15,
	0x96, 0x4a, 0x6a, 0x85, 0x05, 0x42, 0x2b, 0x58, 0x0d, 0xa3, 0xbf, 0xaa, 0xa2, 0x77, 0x05, 0xa5,
	0x35, 0x68, 0x63, 0x8d, 0xd4, 0xfa, 0xa4, 0x40, 0x66, 0x98, 0xfe, 0x00, 0x73, 0x27, 0xf6, 0xd4,
	0xb7, 0x87, 0xd9, 0x78, 0x41, 0x63, 0xe3, 0x20, 0x36, 0x2d, 0xee, 0x5e, 0x19, 0x20, 0xc3, 0xcf,
	0x70, 0x66, 0xaf, 0x26, 0x99, 0xfd, 0xdc, 0x5e, 0xff, 0x1f, 0xc2, 0x3b, 0x5f, 0xe3, 0x9b, 0xc7,
	0xd2, 0xaa, 0x45, 0xb1, 0x79, 0x4a, 0xbf, 0xa1, 0x97, 0xa1, 0xdf, 0xf8, 0xea, 0x32, 0x99, 0xd5,
	0xf7, 0x6b, 0xbf, 0x96, 0x4e, 0xec, 0xf2, 0x8b, 0x5b, 0xba, 0x7d, 0xcd, 0xaf, 0x7c, 0x05, 0x7c,
	0xf6, 0x8d, 0xfb, 0x0a, 0x9d, 0x88, 0x09, 0x57, 0xf0, 0xa1, 0x34, 0x81, 0xeb, 0x81, 0xfb, 0x0c,
	0x2b, 0x37, 0xb7, 0x49, 0xc5, 0xf7, 0xbc, 0x8e, 0x8a, 0x01, 0x50, 0x09, 0x38, 0x48, 0x29, 0x01,
	0x07, 0x64, 0x28, 0x01, 0xbc, 0x5d, 0x6b, 0x59, 0x9f, 0x97, 0xc8, 0x5c, 0x12, 0x7f, 0xe8, 0x1b,
	0x37, 0xb9, 0x4d, 0xcc, 0xa1, 0x4d, 0x3c, 0x9b, 0x69, 0x13, 0xe5, 0x17, 0xe9, 0x46, 0xf1, 0x6f,
	0xc5, 0xf1, 0x46, 0x51, 0x2c, 0x44, 0x33, 0x8a, 0x1c, 0x24, 0x48, 0x94, 0xa9, 0x78, 0x21, 0x35,
	0x15, 0xe7, 0x45, 0x89, 0x62, 0x4a, 0x51, 0xe2, 0x3c, 0xa9, 0x79, 0x1b, 0x1f, 0x3b, 0x4d, 0x8c,
	0x96, 0x4a, 0x2a, 0x01, 0x91, 0x40, 0x5a, 0x65, 0xcd, 0xb5, 0x96, 0x5e, 0xa2, 0x28, 0x4f, 0x5a,
	0xa2, 0xa8, 0x8c, 0x2b, 0x51, 0x5c, 0x20, 0x53, 0x2d, 0x27, 0x6c, 0x06, 0xae, 0x1f, 0xb9, 0x5e,
	0x4f, 0xcf, 0xcb, 0x34, 0x30, 0xd5, 0x3b, 0x60, 0xb1, 0x3f, 0xee, 0x77, 0x7d, 0xc4, 0x5f, 0x53,
	0xb5, 0x33, 0x01, 0xa3, 0x15, 0x68, 0x01, 0xee, 0xb3, 0x78, 0x7c, 0xc3, 0x82, 0x64, 0xa2, 0x4c,
	0xbb, 0x80, 0xd1, 0x8a, 0x1f, 0x78, 0xf7, 0x78, 0xad, 0x02, 0x92, 0x89, 0xa6, 0x33, 0x3f, 0xa5,
	0x6a, 0x15, 0x0c, 0x42, 0xf9, 0x2f, 0xe6, 0x56, 0x9e, 0xe7, 0xcf, 0x4f, 0x2b, 0x16, 0x43, 0x9f,
	0xe2, 0x13, 0xbc, 0x52, 0xc7, 0xed, 0xba, 0xd1, 0xfc, 0x8c, 0x72, 0xb9, 0x08, 0xa0, 0xec, 0x47,
	0x96, 0x8d, 0x66, 0x53, 0xcb, 0x46, 0xaa, 0xdc, 0x72, 0x20, 0xb3, 0xdc, 0xb2, 0x44, 0xc8, 0xce,
	0x96, 0x1b, 0x39, 0x8d, 0x3e, 0x44, 0xd9, 0x73, 0x18, 0x56, 0x22, 0x63, 0x15, 0x94, 0xd6, 0xb0,
	0x7d, 0xdf, 0x6d, 0x85, 0x5a, 0xfd, 0xe5, 0xa0, 0x42, 0x39, 0x54, 0x7f, 0xf9, 0xbc, 0x42, 0x0c,
	0xa5, 0x75, 0x52, 0x79, 0x26, 0x72, 0x33, 0x6f, 0x0c, 0x0b, 0xe6, 0xb1, 0xa4, 0x86, 0xcd, 0x26,
	0x35, 0x4c, 0x8a, 0xea, 0xb5, 0x84, 0xa8, 0x2e, 0x0a, 0x51, 0x55, 0x56, 0x36, 0x3b, 0x57, 0x61,
	0xd2, 0xfc, 0xaf, 0xba, 0x34, 0xbf, 0xc6, 0xa5, 0x79, 0x10, 0x9b, 0xc7, 0xd9, 0xe7, 0x99, 0xf9,
	0x22, 0xca, 0xfb, 0xbf, 0x8d, 0xca, 0xfb, 0x89, 0x84, 0xbc, 0x0f, 0x62, 0x73, 0x8e, 0x21, 0x92,
	0x20, 0x4b, 0xd3, 0x81, 0x4b, 0x92, 0xab, 0x65, 0x65, 0xdb, 0x18, 0x44, 0xd9, 0x36, 0xce, 0x5d,
	0xc1, 0x66, 0x30, 0x46, 0x42, 0x71, 0x98, 0x3e, 0x5c, 0xd0, 0x14, 0x47, 0x19, 0x23, 0x0e, 0xc8,
	0x30, 0x46, 0x5c, 0xbd, 0x1e, 0x24, 0xd4, 0x8b, 0xa9, 0xcb, 0x95, 0xa4, 0x7a, 0x29, 0x67, 0xaa,
	0x60, 0x19, 0xce, 0x54, 0xe9, 0xe1, 0x07, 0x49, 0x3d, 0x64, 0x7a, 0xf5, 0xe6, 0x90, 0x1e, 0x0e,
	0x62, 0xf3, 0x0c, 0xc3, 0xac, 0x01, 0xd3, 0x51, 0x27, 0x34, 0xf6, 0xaa, 0xa6, 0xb1, 0xac, 0x1a,
	0x68, 0xea, 0x1a, 0xab, 0x52, 0x4b, 0x01, 0xb1, 0x94, 0x12, 0xdf, 0xd1, 0x94, 0x78, 0x4a, 0x79,
	0x79, 0x01, 0x53, 0x5e, 0x5e, 0x40, 0x32, 0xbc, 0xbc, 0xd0, 0xf5, 0x4b, 0x52, 0xd7, 0xa7, 0xd5,
	0x0e, 0x32, 0x88, 0xda, 0x41, 0xd6, 0xb7, 0xa4, 0xf2, 0x2f, 0x72, 0xe5, 0x67, 0xda, 0xfd, 0xb2,
	0x50, 0xfe, 0x41, 0x6c, 0x4e, 0xf1, 0x64, 0xce, 0xf3, 0x7c, 0x8b, 0xdb, 0x82, 0x15, 0x61, 0x0b,
	0x66, 0x71, 0xf4, 0x51, 0x69, 0x0b, 0x06, 0xb1, 0x39, 0x2d, 0x72, 0xbf, 0xae, 0x1b, 0x59, 0xc2,
	0x36, 0x7c, 0xfd, 0xda, 0x6f, 0x6d, 0xe8, 0x3e, 0x5d, 0x79, 0xad, 0x49, 0xce, 0x0a, 0xd0, 0x6a,
	0xba, 0xcf, 0x1c, 0xa5, 0xd9, 0xdc, 0x6a, 0x32, 0x18, 0x70, 0xd2, 0x7d, 0xe6, 0xac, 0xb5, 0xac,
	0xf7, 0x88, 0xa1, 0xc2, 0x0d, 0x69, 0x3c, 0x9e, 0x3b, 0x7a, 0x79, 0x93, 0x1c, 0x1a, 0x41, 0x37,
	0x61, 0x00, 0x70, 0x90, 0x05, 0x00, 0xf0, 0x0d, 0x3f, 0xba, 0xb1, 0x7e, 0x9c, 0x63, 0x4e, 0x5b,
	0xc1, 0x34, 0xa7, 0x5d, 0xd8, 0xcb, 0x69, 0xeb, 0x5f, 0xa4, 0x3b, 0xed, 0xeb, 0xdc, 0x67, 0x0b,
	0xaf, 0x9b, 0x4b, 0xf5, 0xba, 0x7b, 0x1e, 0x14, 0x58, 0x87, 0xc8, 0x41, 0x31, 0xd9, 0x4d, 0x66,
	0x94, 0x9d, 0x6d, 0xeb, 0xe7, 0x39, 0x62, 0x0c, 0x43, 0x43, 0xdf, 0xb8, 0x95, 0x20, 0xfb, 0xb5,
	0x6c, 0xb2, 0xd5, 0x37, 0xe9, 0x84, 0xbf, 0xcb, 0x09, 0x57, 0xbe, 0x21, 0x97, 0xe5, 0x1b, 0xc6,
	0x90, 0xff, 0x69, 0x8e, 0xcc, 0xdc, 0x85, 0x48, 0xfc, 0x6e, 0xe4, 0x05, 0x5d, 0xd8, 0xf7, 0x39,
	0xed, 0xac, 0x8c, 0x1d, 0x91, 0x19, 0x10, 0x4f, 0x0b, 0x21, 0xa2, 0xd8, 0x36, 0x8e, 0x90, 0x72,
	0xe0, 0x79, 0x5d, 0xb7, 0xc5, 0xec, 0x3f, 0xe5, 0x3d, 0xe3, 0x55, 0x52, 0xeb, 0x87, 0xce, 0xdd,
	0x2d, 0xd7, 0xe9, 0xb4, 0xd0, 0xb4, 0x57, 0xa9, 0x02, 0x00, 0x6e, 0x30, 0xf9, 0x25, 0x86, 0x1b,
	0xec, 0xf8, 0x11, 0x52, 0xde, 0x70, 0xec, 0xc8, 0x6d, 0x31, 0x3b, 0x4c, 0x79, 0xcf, 0xf8, 0x27,
	0x72, 0x30, 0x7c, 0xe4, 0xfa, 0x37, 0x9f, 0x44, 0x4e, 0xd0, 0xb3, 0x3b, 0xab, 0x5b, 0x4e, 0xf3,
	0x11, 0x2b, 0x90, 0xd1, 0xd1, 0x17, 0x96, 0x4b, 0x66, 0xf5, 0x45, 0x84, 0x3e, 0xd0, 0xdc, 0xf4,
	0x5a, 0x8c, 0x2f, 0x25, 0x8a, 0x6d, 0x98, 0xbd, 0x1b, 0xb6, 0x19, 0x23, 0x28, 0x34, 0x8d, 0x0b,
	0xa4, 0x84, 0x69, 0x08, 0x3f, 0x25, 0x7b, 0x65, 0x74, 0x47, 0x10, 0xed, 0x0d, 0x3b, 0xb2, 0x29,
	0x1b, 0x69, 0xad, 0x90, 0x9a, 0x84, 0xc1, 0x2c, 0x98, 0xb5, 0xf0, 0x59, 0xa0, 0x6d, 0xcc, 0xa2,
	0xde, 0x30, 0x5e, 0x81, 0x3a, 0x3c, 0x24, 0x07, 0x57, 0xed, 0xde, 0x73, 0x91, 0x77, 0x8c, 0x90,
	0xc0, 0x89, 0x1a, 0x5c, 0x6d, 0x0a, 0x8c, 0x9b, 0x81, 0x13, 0xb1, 0xb0, 0xda, 0xfa, 0x53, 0x9e,
	0x4c, 0xdf, 0xc6, 0x8a, 0x0c, 0xdf, 0xba, 0x63, 0x9a, 0xca, 0xce, 0x8c, 0x7a, 0xfa, 0xf3, 0x72,
	0xcf, 0x98, 0x39, 0x30, 0x94, 0x77, 0x67, 0x70, 0x6b, 0x41, 0xee, 0xe3, 0x19, 0x52, 0xc2, 0x4b,
	0x23, 0x3c, 0x61, 0x9c, 0x53, 0x26, 0x0f, 0xc1, 0x16, 0x65, 0xaf, 0x8d, 0x05, 0x52, 0x00, 0x84,
	0x3c, 0x3b, 0x1f, 0xc4, 0x26, 0xe1, 0x1e, 0x0b, 0x26, 0x85, 0x57, 0xc6, 0x8a, 0x76, 0x42, 0xca,
	0x4e, 0xc4, 0x0e, 0x29, 0x3f, 0x21, 0x4f, 0x47, 0xd5, 0x41, 0xa9, 0xf1, 0x16, 0x99, 0x69, 0xda,
	0x7e, 0xd4, 0xdc, 0xb2, 0x1b, 0x91, 0xf7, 0xc8, 0xe9, 0xf1, 0x20, 0x75, 0x7e, 0x10, 0x9b, 0x87,
	0x39, 0x09, 0xfa, 0x6b, 0x8b, 0x4e, 0xf3, 0xfe, 0x3d, 0xe8, 0x1a, 0x6f, 0x93, 0x59, 0xf1, 0xde,
	0xdf, 0x0a, 0xec, 0x50, 0x24, 0xf1, 0x47, 0x07, 0xb1, 0xf9, 0x52, 0xf2, 0x7b, 0xf6, 0xde, 0xa2,
	0x62, 0xbe, 0x75, 0xd6, 0x77, 0xc8, 0x8c, 0xc6, 0xd6, 0x89, 0x77, 0x6b, 0x99, 0x14, 0x3f, 0xf6,
	0xdc, 0x5e, 0xf6, 0x05, 0x23, 0x40, 0x8a, 0xa2, 0x84, 0xe3, 0xac, 0x5f, 0xe6, 0x49, 0x55, 0x80,
	0x20, 0x26, 0xe7, 0xe5, 0x58, 0xbe, 0x7f, 0x18, 0x93, 0x73, 0x10, 0x2d, 0xb3, 0xfa, 0xec, 0xf8,
	0x43, 0x9f, 0xd3, 0xa4, 0xd2, 0xf4, 0x7a, 0x91, 0xc3, 0x4f, 0xac, 0x6b, 0xa2, 0xf4, 0x82, 0x20,
	0x2a, 0x1a, 0xc6, 0x9b, 0x64, 0x96, 0x87, 0x14, 0x62, 0x34, 0x3b, 0xcc, 0x34, 0x76, 0x63, 0x73,
	0xe8, 0x0d, 0x9d, 0x61, 0xfd, 0x55, 0xfe, 0xe9, 0x59, 0x51, 0x5d, 0x96, 0xb7, 0x7c, 0xa6, 0x55,
	0x75, 0xb9, 0xdb, 0xe6, 0xa5, 0xe4, 0x6e, 0x5b, 0x0e, 0x04, 0x85, 0x2f, 0x2b, 0xf7, 0x23, 0x60,
	0x6c, 0xe0, 0x1d, 0x96, 0xba, 0x30, 0x20, 0x58, 0x29, 0xed, 0x76, 0x8f, 0x04, 0xb2, 0xda, 0xf6,
	0x1d, 0x30, 0x57, 0xdb, 0x64, 0x06, 0x35, 0x5e, 0x8a, 0xfc, 0x5b, 0x52, 0xa6, 0x19, 0xdb, 0x4e,
	0xab, 0xfa, 0xbb, 0x90, 0xe9, 0xd4, 0x28, 0x8c, 0x8b, 0xf9, 0x09, 0x66, 0xec, 0x98, 0x3e, 0x1c,
	0x50, 0x61, 0x40, 0x1f, 0x95, 0x01, 0xde, 0x81, 0x6d, 0xd1, 0xa7, 0xdc, 0x8f, 0x6d, 0x69, 0xa2,
	0xd5, 0xca, 0xb4, 0x2d, 0x88, 0x96, 0xd9, 0x16, 0x1c, 0x69, 0xfd, 0x34, 0x4f, 0x6a, 0x12, 0x98,
	0x99, 0x49, 0x5a, 0x43, 0x6a, 0x8c, 0x46, 0x9f, 0x41, 0xe4, 0xba, 0xf6, 0x38, 0xbe, 0x3e, 0x4b,
	0xaa, 0xa1, 0xd3, 0x6b, 0x35, 0x44, 0xec, 0xcd, 0x37, 0x50, 0xc0, 0x68, 0x05, 0x5a, 0x77, 0xf8,
	0x39, 0xb7, 0x2a, 0xc9, 0x30, 0xaf, 0xe8, 0x82, 0xe3, 0x40, 0x33, 0xa7, 0x49, 0x5a, 0x79, 0x0f,
	0x49, 0x3b, 0x4d, 0x2a, 0x5b, 0x76, 0x08, 0x62, 0x8e, 0x5b, 0x5b, 0x62, 0xc3, 0x38, 0x88, 0x8a,
	0x06, 0xc8, 0x40, 0x08, 0xfc, 0x6d, 0xb4, 0xdd, 0x4d, 0x1e, 0x0c, 0xb3, 0x3b, 0x87, 0x02, 0x48,
	0xab, 0xd8, 0xbc, 0xe5, 0x6e, 0x5a, 0x97, 0xc9, 0xcb, 0xda, 0xc5, 0x22, 0xaf, 0xef, 0x7b, 0xf2,
	0xd0, 0x39, 0xfb, 0x9e, 0x87, 0xf5, 0x55, 0x3e, 0x71, 0xc7, 0x4b, 0xfb, 0x2c, 0xf4, 0x8d, 0xf7,
	0x12, 0x45, 0x80, 0x95, 0x3d, 0x6f, 0x32, 0x25, 0xbe, 0x4c, 0x77, 0xcf, 0xdf, 0xc9, 0xab, 0x1b,
	0xca, 0x59, 0xf7, 0x4e, 0x96, 0x08, 0xc1, 0x5b, 0x0f, 0xac, 0xec, 0x95, 0x57, 0xe9, 0xb5, 0x82,
	0xd2, 0x1a, 0xb6, 0xb1, 0xa6, 0x25, 0x87, 0xa3, 0x96, 0x14, 0x86, 0x87, 0xa3, 0x9a, 0xb0, 0xe1,
	0xa0, 0x27, 0x6a, 0x38, 0x0a, 0x6a, 0x71, 0x78, 0x38, 0x40, 0xf9, 0xf0, 0x55, 0x90, 0x5e, 0x15,
	0x9b, 0x95, 0x32, 0x4b, 0xa2, 0x4b, 0xe8, 0x8c, 0x82, 0xa7, 0x8c, 0x60, 0xed, 0xca, 0x82, 0x82,
	0xa2, 0x73, 0x0a, 0x9e, 0x02, 0xc1, 0x17, 0x7f, 0x3d, 0x43, 0x2a, 0x9c, 0x6b, 0xc6, 0x07, 0x84,
	0xb4, 0x9d, 0xa8, 0xd1, 0xc2, 0xab, 0xbe, 0xc6, 0xe9, 0x49, 0xae, 0x03, 0x6f, 0xd7, 0xcf, 0x4c,
	0x76, 0x6b, 0xd8, 0xb0, 0xc9, 0xb4, 0xe7, 0x3b, 0xbd, 0x46, 0x93, 0x4f, 0x76, 0x76, 0xb2, 0x0b,
	0x93, 0xdb, 0xf5, 0x73, 0x93, 0xde, 0xac, 0x34, 0xee, 0x91, 0x19, 0xa0, 0x1f, 0x2b, 0xad, 0xb0,
	0xc1, 0xc6, 0xc2, 0x98, 0x03, 0xe4, 0xed, 0xfa, 0x89, 0xb1, 0x47, 0xcc, 0x46, 0x93, 0x18, 0x7d,
	0x0c, 0xed, 0x19, 0x62, 0x76, 0x72, 0x9d, 0xc6, 0x9d, 0x94, 0xf3, 0xb6, 0x34, 0xee, 0xa4, 0x1e,
	0x32, 0x0d, 0x4d, 0xc2, 0xf7, 0x72, 0xcf, 0x49, 0x64, 0xe5, 0x70, 0xef, 0x49, 0xb4, 0xda, 0xde,
	0x3a, 0xe4, 0x9c, 0x10, 0xf1, 0xe3, 0x24, 0x86, 0x39, 0xfa, 0x59, 0xe2, 0x08, 0xa8, 0xbe, 0xb0,
	0xf7, 0x00, 0xc5, 0x71, 0x2c, 0x3a, 0xec, 0xc1, 0x71, 0xed, 0x54, 0x27, 0x83, 0xe3, 0x89, 0xf3,
	0x94, 0x75, 0x32, 0xc5, 0x99, 0x01, 0x88, 0xd3, 0xe8, 0x4c, 0x94, 0xe9, 0xd3, 0xe8, 0x1c, 0xaa,
	0x0b, 0xab, 0x95, 0x67, 0x61, 0x4c, 0x94, 0x84, 0xb3, 0x57, 0x2e, 0x31, 0xaa, 0x0d, 0xc3, 0xc5,
	0x8f, 0xdb, 0xb0, 0x44, 0xa9, 0x37, 0x7b, 0xc3, 0x86, 0x8a, 0xb1, 0xef, 0x93, 0x59, 0xc9, 0x5e,
	0xcc, 0x02, 0x8d, 0x13, 0xe3, 0x0a, 0x9f, 0xdb, 0x75, 0x6b, 0x7c, 0x6d, 0x54, 0x22, 0xc6, 0x1c,
	0x13, 0xb3, 0xa7, 0x13, 0xe3, 0x92, 0xb3, 0x4c, 0xc4, 0x89, 0x8c, 0xef, 0x43, 0x32, 0xa7, 0x10,
	0xf3, 0xcc, 0xe6, 0xe4, 0xf8, 0x04, 0x6a, 0xbb, 0x7e, 0x6a, 0x92, 0x2c, 0xcb, 0xf8, 0x88, 0x1c,
	0xd4, 0xb9, 0xce, 0x78, 0x72, 0x6a, 0x2f, 0x6e, 0x4a, 0xb6, 0x9c, 0x9e, 0x60, 0x14, 0x9b, 0x41,
	0x93, 0x94, 0xec, 0x19, 0x46, 0x33, 0xf1, 0xb4, 0x19, 0xd2, 0x12, 0xec, 0x47, 0x8c, 0x45, 0xdc,
	0x0e, 0x36, 0xf0, 0xae, 0xde, 0xf9, 0x89, 0x2f, 0xe5, 0x6e, 0xd7, 0x17, 0xf7, 0x71, 0x81, 0xd7,
	0xe8, 0x93, 0xc3, 0xba, 0xd5, 0x6d, 0x6c, 0x3c, 0x65, 0xdb, 0xbd, 0xb4, 0x9f, 0xcb, 0x80, 0xdb,
	0xf5, 0xe5, 0xfd, 0xdd, 0x1d, 0x34, 0xb6, 0xc8, 0x01, 0x66, 0x89, 0xc1, 0x09, 0x33, 0xcb, 0xf0,
	0xda, 0xa4, 0xde, 0x7a, 0xbb, 0x7e, 0x7e, 0x72, 0xc7, 0x7e, 0xf1, 0x57, 0x79, 0x52, 0xc2, 0x90,
	0xcf, 0xb8, 0x0d, 0x0d, 0x3b, 0x88, 0xd2, 0xb4, 0x3b, 0x91, 0x3a, 0xa7, 0x69, 0xf7, 0x50, 0xde,
	0xb7, 0x4e, 0xaa, 0x22, 0x19, 0x1c, 0x8f, 0xee, 0x64, 0x1a, 0xb9, 0xc3, 0x99, 0xe4, 0x2d, 0x52,
	0xc4, 0x08, 0xea, 0x78, 0x7a, 0xbe, 0x21, 0x91, 0x99, 0x7b, 0xbe, 0x0f, 0x7d, 0x58, 0x26, 0xc6,
	0x9e, 0x69, 0x74, 0x25, 0x62, 0xee, 0xb4, 0x65, 0x26, 0x23, 0xe4, 0xeb, 0x73, 0xbf, 0xfb, 0xf2,
	0x78, 0xee, 0xb3, 0x2f, 0x8f, 0xe7, 0xbe, 0xf8, 0xf2, 0x78, 0xee, 0xbf, 0xf3, 0x8f, 0x2f, 0x6c,
	0x94, 0xf1, 0x0f, 0x84, 0x97, 0xfe, 0x1e, 0x00, 0x00, 0xff, 0xff, 0xb5, 0x07, 0xc3, 0x8d, 0xb4,
	0x38, 0x00, 0x00,
}
