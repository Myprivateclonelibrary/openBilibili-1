// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: app/service/live/xroom/api/api.proto

package api

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type RoomIDsReq struct {
	// room_ids数组，长号
	RoomIds []int64 `protobuf:"varint,1,rep,packed,name=room_ids,json=roomIds" json:"room_ids,omitempty" form:"room_ids" validate:"required,gt=0,dive,gt=0"`
	// 要获取的房间信息维度 status:状态相关 show:展示相关 area:分区相关 anchor:主播相关
	Attrs                []string `protobuf:"bytes,2,rep,name=attrs" json:"attrs,omitempty" form:"attrs" validate:"required,gt=0,dive,gt=0"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RoomIDsReq) Reset()         { *m = RoomIDsReq{} }
func (m *RoomIDsReq) String() string { return proto.CompactTextString(m) }
func (*RoomIDsReq) ProtoMessage()    {}
func (*RoomIDsReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_38d5f750b789d347, []int{0}
}
func (m *RoomIDsReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RoomIDsReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RoomIDsReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *RoomIDsReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RoomIDsReq.Merge(dst, src)
}
func (m *RoomIDsReq) XXX_Size() int {
	return m.Size()
}
func (m *RoomIDsReq) XXX_DiscardUnknown() {
	xxx_messageInfo_RoomIDsReq.DiscardUnknown(m)
}

var xxx_messageInfo_RoomIDsReq proto.InternalMessageInfo

type UIDsReq struct {
	// 主播uids
	Uids []int64 `protobuf:"varint,1,rep,packed,name=uids" json:"uids,omitempty" form:"uids" validate:"required,gt=0,dive,gt=0"`
	// 要获取的房间信息维度 status:状态相关 show:展示相关 area:分区相关 anchor:主播相关
	Attrs                []string `protobuf:"bytes,2,rep,name=attrs" json:"attrs,omitempty" form:"attrs" validate:"required,gt=0,dive,gt=0"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UIDsReq) Reset()         { *m = UIDsReq{} }
func (m *UIDsReq) String() string { return proto.CompactTextString(m) }
func (*UIDsReq) ProtoMessage()    {}
func (*UIDsReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_38d5f750b789d347, []int{1}
}
func (m *UIDsReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UIDsReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UIDsReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *UIDsReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UIDsReq.Merge(dst, src)
}
func (m *UIDsReq) XXX_Size() int {
	return m.Size()
}
func (m *UIDsReq) XXX_DiscardUnknown() {
	xxx_messageInfo_UIDsReq.DiscardUnknown(m)
}

var xxx_messageInfo_UIDsReq proto.InternalMessageInfo

type IsAnchorUIDsReq struct {
	// 主播uids
	Uids                 []int64  `protobuf:"varint,1,rep,packed,name=uids" json:"uids,omitempty" form:"uids" validate:"required,gt=0,dive,gt=0"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *IsAnchorUIDsReq) Reset()         { *m = IsAnchorUIDsReq{} }
func (m *IsAnchorUIDsReq) String() string { return proto.CompactTextString(m) }
func (*IsAnchorUIDsReq) ProtoMessage()    {}
func (*IsAnchorUIDsReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_38d5f750b789d347, []int{2}
}
func (m *IsAnchorUIDsReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IsAnchorUIDsReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IsAnchorUIDsReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *IsAnchorUIDsReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IsAnchorUIDsReq.Merge(dst, src)
}
func (m *IsAnchorUIDsReq) XXX_Size() int {
	return m.Size()
}
func (m *IsAnchorUIDsReq) XXX_DiscardUnknown() {
	xxx_messageInfo_IsAnchorUIDsReq.DiscardUnknown(m)
}

var xxx_messageInfo_IsAnchorUIDsReq proto.InternalMessageInfo

type IsAnchorUIDsResp struct {
	// uid => room_id(长号)，room_id=0表示没有创建房间
	List                 map[int64]int64 `protobuf:"bytes,1,rep,name=list" json:"list" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *IsAnchorUIDsResp) Reset()         { *m = IsAnchorUIDsResp{} }
func (m *IsAnchorUIDsResp) String() string { return proto.CompactTextString(m) }
func (*IsAnchorUIDsResp) ProtoMessage()    {}
func (*IsAnchorUIDsResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_38d5f750b789d347, []int{3}
}
func (m *IsAnchorUIDsResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IsAnchorUIDsResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IsAnchorUIDsResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *IsAnchorUIDsResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IsAnchorUIDsResp.Merge(dst, src)
}
func (m *IsAnchorUIDsResp) XXX_Size() int {
	return m.Size()
}
func (m *IsAnchorUIDsResp) XXX_DiscardUnknown() {
	xxx_messageInfo_IsAnchorUIDsResp.DiscardUnknown(m)
}

var xxx_messageInfo_IsAnchorUIDsResp proto.InternalMessageInfo

// 批量根据room_ids获取房间信息
type RoomIDsInfosResp struct {
	// 主播room_id => 房间维度信息
	List                 map[int64]*Infos `protobuf:"bytes,1,rep,name=list" json:"list" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *RoomIDsInfosResp) Reset()         { *m = RoomIDsInfosResp{} }
func (m *RoomIDsInfosResp) String() string { return proto.CompactTextString(m) }
func (*RoomIDsInfosResp) ProtoMessage()    {}
func (*RoomIDsInfosResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_38d5f750b789d347, []int{4}
}
func (m *RoomIDsInfosResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RoomIDsInfosResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RoomIDsInfosResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *RoomIDsInfosResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RoomIDsInfosResp.Merge(dst, src)
}
func (m *RoomIDsInfosResp) XXX_Size() int {
	return m.Size()
}
func (m *RoomIDsInfosResp) XXX_DiscardUnknown() {
	xxx_messageInfo_RoomIDsInfosResp.DiscardUnknown(m)
}

var xxx_messageInfo_RoomIDsInfosResp proto.InternalMessageInfo

// 批量根据uids获取房间信息
type UIDsInfosResp struct {
	// 主播UID => 房间维度信息
	List                 map[int64]*Infos `protobuf:"bytes,1,rep,name=list" json:"list" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *UIDsInfosResp) Reset()         { *m = UIDsInfosResp{} }
func (m *UIDsInfosResp) String() string { return proto.CompactTextString(m) }
func (*UIDsInfosResp) ProtoMessage()    {}
func (*UIDsInfosResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_38d5f750b789d347, []int{5}
}
func (m *UIDsInfosResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UIDsInfosResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UIDsInfosResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *UIDsInfosResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UIDsInfosResp.Merge(dst, src)
}
func (m *UIDsInfosResp) XXX_Size() int {
	return m.Size()
}
func (m *UIDsInfosResp) XXX_DiscardUnknown() {
	xxx_messageInfo_UIDsInfosResp.DiscardUnknown(m)
}

var xxx_messageInfo_UIDsInfosResp proto.InternalMessageInfo

type Infos struct {
	// room_id 房间长号
	RoomId int64 `protobuf:"varint,1,opt,name=room_id,json=roomId,proto3" json:"room_id"`
	// uid 主播uid
	Uid int64 `protobuf:"varint,2,opt,name=uid,proto3" json:"uid"`
	// Model1：房间信息（状态相关）
	Status *RoomStatusInfo `protobuf:"bytes,3,opt,name=status" json:"status"`
	// Model2：房间信息（展示相关）
	Show *RoomShowInfo `protobuf:"bytes,4,opt,name=show" json:"show"`
	// Model3：房间信息（分区相关）
	Area *RoomAreaInfo `protobuf:"bytes,5,opt,name=area" json:"area"`
	// Model4：房间信息（主播相关）
	Anchor               *RoomAnchorInfo `protobuf:"bytes,6,opt,name=anchor" json:"anchor"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *Infos) Reset()         { *m = Infos{} }
func (m *Infos) String() string { return proto.CompactTextString(m) }
func (*Infos) ProtoMessage()    {}
func (*Infos) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_38d5f750b789d347, []int{6}
}
func (m *Infos) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Infos) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Infos.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Infos) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Infos.Merge(dst, src)
}
func (m *Infos) XXX_Size() int {
	return m.Size()
}
func (m *Infos) XXX_DiscardUnknown() {
	xxx_messageInfo_Infos.DiscardUnknown(m)
}

var xxx_messageInfo_Infos proto.InternalMessageInfo

// 房间信息(状态）
type RoomStatusInfo struct {
	// 直播间状态 0未开播，1直播中；2轮播中；
	LiveStatus int64 `protobuf:"varint,1,opt,name=live_status,json=liveStatus,proto3" json:"live_status"`
	// 横竖屏方向 0横屏，1竖屏
	LiveScreenType int64 `protobuf:"varint,2,opt,name=live_screen_type,json=liveScreenType,proto3" json:"live_screen_type"`
	// 是否开播过标识
	LiveMark int64 `protobuf:"varint,3,opt,name=live_mark,json=liveMark,proto3" json:"live_mark"`
	// 封禁状态：0未封禁；1审核封禁; 2全网封禁
	LockStatus int64 `protobuf:"varint,4,opt,name=lock_status,json=lockStatus,proto3" json:"lock_status"`
	// 封禁时间戳
	LockTime int64 `protobuf:"varint,5,opt,name=lock_time,json=lockTime,proto3" json:"lock_time"`
	// 隐藏状态 0不隐藏，1隐藏
	HiddenStatus int64 `protobuf:"varint,6,opt,name=hidden_status,json=hiddenStatus,proto3" json:"hidden_status"`
	// 隐藏时间戳
	HiddenTime int64 `protobuf:"varint,7,opt,name=hidden_time,json=hiddenTime,proto3" json:"hidden_time"`
	// 直播类型 0默认 1摄像头直播 2录屏直播 3语音直播
	LiveType             int64    `protobuf:"varint,8,opt,name=live_type,json=liveType,proto3" json:"live_type"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RoomStatusInfo) Reset()         { *m = RoomStatusInfo{} }
func (m *RoomStatusInfo) String() string { return proto.CompactTextString(m) }
func (*RoomStatusInfo) ProtoMessage()    {}
func (*RoomStatusInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_38d5f750b789d347, []int{7}
}
func (m *RoomStatusInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RoomStatusInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RoomStatusInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *RoomStatusInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RoomStatusInfo.Merge(dst, src)
}
func (m *RoomStatusInfo) XXX_Size() int {
	return m.Size()
}
func (m *RoomStatusInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_RoomStatusInfo.DiscardUnknown(m)
}

var xxx_messageInfo_RoomStatusInfo proto.InternalMessageInfo

// 房间信息(展示)
type RoomShowInfo struct {
	// short_id 短号
	ShortId int64 `protobuf:"varint,1,opt,name=short_id,json=shortId,proto3" json:"short_id"`
	// 直播间标题
	Title string `protobuf:"bytes,2,opt,name=title,proto3" json:"title"`
	// 直播间封面
	Cover string `protobuf:"bytes,3,opt,name=cover,proto3" json:"cover"`
	// 直播间标签
	Tags string `protobuf:"bytes,4,opt,name=tags,proto3" json:"tags"`
	// 直播间背景图
	Background string `protobuf:"bytes,5,opt,name=background,proto3" json:"background"`
	// 直播间简介
	Description string `protobuf:"bytes,6,opt,name=description,proto3" json:"description"`
	// 关键帧
	Keyframe string `protobuf:"bytes,7,opt,name=keyframe,proto3" json:"keyframe"`
	// 人气值
	PopularityCount int64 `protobuf:"varint,8,opt,name=popularity_count,json=popularityCount,proto3" json:"popularity_count"`
	// 房间tag（角标）
	TagList []*TagData `protobuf:"bytes,9,rep,name=tag_list,json=tagList" json:"tag_list"`
	// 最近一次开播时间戳
	LiveStartTime        int64    `protobuf:"varint,10,opt,name=live_start_time,json=liveStartTime,proto3" json:"live_start_time"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RoomShowInfo) Reset()         { *m = RoomShowInfo{} }
func (m *RoomShowInfo) String() string { return proto.CompactTextString(m) }
func (*RoomShowInfo) ProtoMessage()    {}
func (*RoomShowInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_38d5f750b789d347, []int{8}
}
func (m *RoomShowInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RoomShowInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RoomShowInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *RoomShowInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RoomShowInfo.Merge(dst, src)
}
func (m *RoomShowInfo) XXX_Size() int {
	return m.Size()
}
func (m *RoomShowInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_RoomShowInfo.DiscardUnknown(m)
}

var xxx_messageInfo_RoomShowInfo proto.InternalMessageInfo

// 房间信息(分区)
type RoomAreaInfo struct {
	// 直播间分区id
	AreaId int64 `protobuf:"varint,1,opt,name=area_id,json=areaId,proto3" json:"area_id"`
	// 直播间分区名称
	AreaName string `protobuf:"bytes,2,opt,name=area_name,json=areaName,proto3" json:"area_name"`
	// 直播间父分区id
	ParentAreaId int64 `protobuf:"varint,3,opt,name=parent_area_id,json=parentAreaId,proto3" json:"parent_area_id"`
	// 直播间父分区名称
	ParentAreaName       string   `protobuf:"bytes,4,opt,name=parent_area_name,json=parentAreaName,proto3" json:"parent_area_name"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RoomAreaInfo) Reset()         { *m = RoomAreaInfo{} }
func (m *RoomAreaInfo) String() string { return proto.CompactTextString(m) }
func (*RoomAreaInfo) ProtoMessage()    {}
func (*RoomAreaInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_38d5f750b789d347, []int{9}
}
func (m *RoomAreaInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RoomAreaInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RoomAreaInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *RoomAreaInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RoomAreaInfo.Merge(dst, src)
}
func (m *RoomAreaInfo) XXX_Size() int {
	return m.Size()
}
func (m *RoomAreaInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_RoomAreaInfo.DiscardUnknown(m)
}

var xxx_messageInfo_RoomAreaInfo proto.InternalMessageInfo

// 主播信息(展示)
type RoomAnchorInfo struct {
	// 主播类型
	AnchorProfileType int64 `protobuf:"varint,1,opt,name=anchor_profile_type,json=anchorProfileType,proto3" json:"anchor_profile_type"`
	// 主播等级
	AnchorLevel          *AnchorLevel `protobuf:"bytes,2,opt,name=anchor_level,json=anchorLevel" json:"anchor_level"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *RoomAnchorInfo) Reset()         { *m = RoomAnchorInfo{} }
func (m *RoomAnchorInfo) String() string { return proto.CompactTextString(m) }
func (*RoomAnchorInfo) ProtoMessage()    {}
func (*RoomAnchorInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_38d5f750b789d347, []int{10}
}
func (m *RoomAnchorInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RoomAnchorInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RoomAnchorInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *RoomAnchorInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RoomAnchorInfo.Merge(dst, src)
}
func (m *RoomAnchorInfo) XXX_Size() int {
	return m.Size()
}
func (m *RoomAnchorInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_RoomAnchorInfo.DiscardUnknown(m)
}

var xxx_messageInfo_RoomAnchorInfo proto.InternalMessageInfo

// 房间角标、tag
type TagData struct {
	TagId                int64    `protobuf:"varint,1,opt,name=tag_id,json=tagId,proto3" json:"tag_id"`
	TagSubId             int64    `protobuf:"varint,2,opt,name=tag_sub_id,json=tagSubId,proto3" json:"tag_sub_id"`
	TagValue             int64    `protobuf:"varint,3,opt,name=tag_value,json=tagValue,proto3" json:"tag_value"`
	TagExt               string   `protobuf:"bytes,4,opt,name=tag_ext,json=tagExt,proto3" json:"tag_ext"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TagData) Reset()         { *m = TagData{} }
func (m *TagData) String() string { return proto.CompactTextString(m) }
func (*TagData) ProtoMessage()    {}
func (*TagData) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_38d5f750b789d347, []int{11}
}
func (m *TagData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TagData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TagData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *TagData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TagData.Merge(dst, src)
}
func (m *TagData) XXX_Size() int {
	return m.Size()
}
func (m *TagData) XXX_DiscardUnknown() {
	xxx_messageInfo_TagData.DiscardUnknown(m)
}

var xxx_messageInfo_TagData proto.InternalMessageInfo

// 主播经验定义
type AnchorLevel struct {
	// 等级
	Level int64 `protobuf:"varint,1,opt,name=level,proto3" json:"level"`
	// 当前等级颜色
	Color int64 `protobuf:"varint,2,opt,name=color,proto3" json:"color"`
	// 当前积分
	Score int64 `protobuf:"varint,3,opt,name=score,proto3" json:"score"`
	// 当前等级最小积分
	Left int64 `protobuf:"varint,4,opt,name=left,proto3" json:"left"`
	// 下一等级起始积分
	Right int64 `protobuf:"varint,5,opt,name=right,proto3" json:"right"`
	// 下一个经验值
	MaxLevel             int64    `protobuf:"varint,6,opt,name=max_level,json=maxLevel,proto3" json:"max_level"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AnchorLevel) Reset()         { *m = AnchorLevel{} }
func (m *AnchorLevel) String() string { return proto.CompactTextString(m) }
func (*AnchorLevel) ProtoMessage()    {}
func (*AnchorLevel) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_38d5f750b789d347, []int{12}
}
func (m *AnchorLevel) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AnchorLevel) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AnchorLevel.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *AnchorLevel) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AnchorLevel.Merge(dst, src)
}
func (m *AnchorLevel) XXX_Size() int {
	return m.Size()
}
func (m *AnchorLevel) XXX_DiscardUnknown() {
	xxx_messageInfo_AnchorLevel.DiscardUnknown(m)
}

var xxx_messageInfo_AnchorLevel proto.InternalMessageInfo

func init() {
	proto.RegisterType((*RoomIDsReq)(nil), "live.xroom.v1.RoomIDsReq")
	proto.RegisterType((*UIDsReq)(nil), "live.xroom.v1.UIDsReq")
	proto.RegisterType((*IsAnchorUIDsReq)(nil), "live.xroom.v1.IsAnchorUIDsReq")
	proto.RegisterType((*IsAnchorUIDsResp)(nil), "live.xroom.v1.IsAnchorUIDsResp")
	proto.RegisterMapType((map[int64]int64)(nil), "live.xroom.v1.IsAnchorUIDsResp.ListEntry")
	proto.RegisterType((*RoomIDsInfosResp)(nil), "live.xroom.v1.RoomIDsInfosResp")
	proto.RegisterMapType((map[int64]*Infos)(nil), "live.xroom.v1.RoomIDsInfosResp.ListEntry")
	proto.RegisterType((*UIDsInfosResp)(nil), "live.xroom.v1.UIDsInfosResp")
	proto.RegisterMapType((map[int64]*Infos)(nil), "live.xroom.v1.UIDsInfosResp.ListEntry")
	proto.RegisterType((*Infos)(nil), "live.xroom.v1.Infos")
	proto.RegisterType((*RoomStatusInfo)(nil), "live.xroom.v1.RoomStatusInfo")
	proto.RegisterType((*RoomShowInfo)(nil), "live.xroom.v1.RoomShowInfo")
	proto.RegisterType((*RoomAreaInfo)(nil), "live.xroom.v1.RoomAreaInfo")
	proto.RegisterType((*RoomAnchorInfo)(nil), "live.xroom.v1.RoomAnchorInfo")
	proto.RegisterType((*TagData)(nil), "live.xroom.v1.TagData")
	proto.RegisterType((*AnchorLevel)(nil), "live.xroom.v1.AnchorLevel")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// RoomClient is the client API for Room service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RoomClient interface {
	// 批量根据room_ids获取房间信息
	GetMultiple(ctx context.Context, in *RoomIDsReq, opts ...grpc.CallOption) (*RoomIDsInfosResp, error)
	// 批量根据uids获取房间信息
	GetMultipleByUids(ctx context.Context, in *UIDsReq, opts ...grpc.CallOption) (*UIDsInfosResp, error)
	// 批量根据uids判断是否是主播，如果是返回主播的room_id，否则返回0
	IsAnchor(ctx context.Context, in *IsAnchorUIDsReq, opts ...grpc.CallOption) (*IsAnchorUIDsResp, error)
}

type roomClient struct {
	cc *grpc.ClientConn
}

func NewRoomClient(cc *grpc.ClientConn) RoomClient {
	return &roomClient{cc}
}

func (c *roomClient) GetMultiple(ctx context.Context, in *RoomIDsReq, opts ...grpc.CallOption) (*RoomIDsInfosResp, error) {
	out := new(RoomIDsInfosResp)
	err := c.cc.Invoke(ctx, "/live.xroom.v1.Room/getMultiple", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roomClient) GetMultipleByUids(ctx context.Context, in *UIDsReq, opts ...grpc.CallOption) (*UIDsInfosResp, error) {
	out := new(UIDsInfosResp)
	err := c.cc.Invoke(ctx, "/live.xroom.v1.Room/getMultipleByUids", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roomClient) IsAnchor(ctx context.Context, in *IsAnchorUIDsReq, opts ...grpc.CallOption) (*IsAnchorUIDsResp, error) {
	out := new(IsAnchorUIDsResp)
	err := c.cc.Invoke(ctx, "/live.xroom.v1.Room/isAnchor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RoomServer is the server API for Room service.
type RoomServer interface {
	// 批量根据room_ids获取房间信息
	GetMultiple(context.Context, *RoomIDsReq) (*RoomIDsInfosResp, error)
	// 批量根据uids获取房间信息
	GetMultipleByUids(context.Context, *UIDsReq) (*UIDsInfosResp, error)
	// 批量根据uids判断是否是主播，如果是返回主播的room_id，否则返回0
	IsAnchor(context.Context, *IsAnchorUIDsReq) (*IsAnchorUIDsResp, error)
}

func RegisterRoomServer(s *grpc.Server, srv RoomServer) {
	s.RegisterService(&_Room_serviceDesc, srv)
}

func _Room_GetMultiple_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoomIDsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoomServer).GetMultiple(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/live.xroom.v1.Room/GetMultiple",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoomServer).GetMultiple(ctx, req.(*RoomIDsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Room_GetMultipleByUids_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UIDsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoomServer).GetMultipleByUids(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/live.xroom.v1.Room/GetMultipleByUids",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoomServer).GetMultipleByUids(ctx, req.(*UIDsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Room_IsAnchor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IsAnchorUIDsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoomServer).IsAnchor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/live.xroom.v1.Room/IsAnchor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoomServer).IsAnchor(ctx, req.(*IsAnchorUIDsReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _Room_serviceDesc = grpc.ServiceDesc{
	ServiceName: "live.xroom.v1.Room",
	HandlerType: (*RoomServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "getMultiple",
			Handler:    _Room_GetMultiple_Handler,
		},
		{
			MethodName: "getMultipleByUids",
			Handler:    _Room_GetMultipleByUids_Handler,
		},
		{
			MethodName: "isAnchor",
			Handler:    _Room_IsAnchor_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "app/service/live/xroom/api/api.proto",
}

func (m *RoomIDsReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RoomIDsReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.RoomIds) > 0 {
		dAtA2 := make([]byte, len(m.RoomIds)*10)
		var j1 int
		for _, num1 := range m.RoomIds {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		dAtA[i] = 0xa
		i++
		i = encodeVarintApi(dAtA, i, uint64(j1))
		i += copy(dAtA[i:], dAtA2[:j1])
	}
	if len(m.Attrs) > 0 {
		for _, s := range m.Attrs {
			dAtA[i] = 0x12
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *UIDsReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UIDsReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Uids) > 0 {
		dAtA4 := make([]byte, len(m.Uids)*10)
		var j3 int
		for _, num1 := range m.Uids {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA4[j3] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j3++
			}
			dAtA4[j3] = uint8(num)
			j3++
		}
		dAtA[i] = 0xa
		i++
		i = encodeVarintApi(dAtA, i, uint64(j3))
		i += copy(dAtA[i:], dAtA4[:j3])
	}
	if len(m.Attrs) > 0 {
		for _, s := range m.Attrs {
			dAtA[i] = 0x12
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *IsAnchorUIDsReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IsAnchorUIDsReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Uids) > 0 {
		dAtA6 := make([]byte, len(m.Uids)*10)
		var j5 int
		for _, num1 := range m.Uids {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA6[j5] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j5++
			}
			dAtA6[j5] = uint8(num)
			j5++
		}
		dAtA[i] = 0xa
		i++
		i = encodeVarintApi(dAtA, i, uint64(j5))
		i += copy(dAtA[i:], dAtA6[:j5])
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *IsAnchorUIDsResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IsAnchorUIDsResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.List) > 0 {
		for k, _ := range m.List {
			dAtA[i] = 0xa
			i++
			v := m.List[k]
			mapSize := 1 + sovApi(uint64(k)) + 1 + sovApi(uint64(v))
			i = encodeVarintApi(dAtA, i, uint64(mapSize))
			dAtA[i] = 0x8
			i++
			i = encodeVarintApi(dAtA, i, uint64(k))
			dAtA[i] = 0x10
			i++
			i = encodeVarintApi(dAtA, i, uint64(v))
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *RoomIDsInfosResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RoomIDsInfosResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.List) > 0 {
		for k, _ := range m.List {
			dAtA[i] = 0xa
			i++
			v := m.List[k]
			msgSize := 0
			if v != nil {
				msgSize = v.Size()
				msgSize += 1 + sovApi(uint64(msgSize))
			}
			mapSize := 1 + sovApi(uint64(k)) + msgSize
			i = encodeVarintApi(dAtA, i, uint64(mapSize))
			dAtA[i] = 0x8
			i++
			i = encodeVarintApi(dAtA, i, uint64(k))
			if v != nil {
				dAtA[i] = 0x12
				i++
				i = encodeVarintApi(dAtA, i, uint64(v.Size()))
				n7, err := v.MarshalTo(dAtA[i:])
				if err != nil {
					return 0, err
				}
				i += n7
			}
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *UIDsInfosResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UIDsInfosResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.List) > 0 {
		for k, _ := range m.List {
			dAtA[i] = 0xa
			i++
			v := m.List[k]
			msgSize := 0
			if v != nil {
				msgSize = v.Size()
				msgSize += 1 + sovApi(uint64(msgSize))
			}
			mapSize := 1 + sovApi(uint64(k)) + msgSize
			i = encodeVarintApi(dAtA, i, uint64(mapSize))
			dAtA[i] = 0x8
			i++
			i = encodeVarintApi(dAtA, i, uint64(k))
			if v != nil {
				dAtA[i] = 0x12
				i++
				i = encodeVarintApi(dAtA, i, uint64(v.Size()))
				n8, err := v.MarshalTo(dAtA[i:])
				if err != nil {
					return 0, err
				}
				i += n8
			}
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Infos) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Infos) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.RoomId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.RoomId))
	}
	if m.Uid != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Uid))
	}
	if m.Status != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Status.Size()))
		n9, err := m.Status.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n9
	}
	if m.Show != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Show.Size()))
		n10, err := m.Show.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n10
	}
	if m.Area != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Area.Size()))
		n11, err := m.Area.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n11
	}
	if m.Anchor != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Anchor.Size()))
		n12, err := m.Anchor.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n12
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *RoomStatusInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RoomStatusInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.LiveStatus != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.LiveStatus))
	}
	if m.LiveScreenType != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.LiveScreenType))
	}
	if m.LiveMark != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.LiveMark))
	}
	if m.LockStatus != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.LockStatus))
	}
	if m.LockTime != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.LockTime))
	}
	if m.HiddenStatus != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.HiddenStatus))
	}
	if m.HiddenTime != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.HiddenTime))
	}
	if m.LiveType != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.LiveType))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *RoomShowInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RoomShowInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ShortId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.ShortId))
	}
	if len(m.Title) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Title)))
		i += copy(dAtA[i:], m.Title)
	}
	if len(m.Cover) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Cover)))
		i += copy(dAtA[i:], m.Cover)
	}
	if len(m.Tags) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Tags)))
		i += copy(dAtA[i:], m.Tags)
	}
	if len(m.Background) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Background)))
		i += copy(dAtA[i:], m.Background)
	}
	if len(m.Description) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Description)))
		i += copy(dAtA[i:], m.Description)
	}
	if len(m.Keyframe) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Keyframe)))
		i += copy(dAtA[i:], m.Keyframe)
	}
	if m.PopularityCount != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.PopularityCount))
	}
	if len(m.TagList) > 0 {
		for _, msg := range m.TagList {
			dAtA[i] = 0x4a
			i++
			i = encodeVarintApi(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.LiveStartTime != 0 {
		dAtA[i] = 0x50
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.LiveStartTime))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *RoomAreaInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RoomAreaInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.AreaId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.AreaId))
	}
	if len(m.AreaName) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.AreaName)))
		i += copy(dAtA[i:], m.AreaName)
	}
	if m.ParentAreaId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.ParentAreaId))
	}
	if len(m.ParentAreaName) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.ParentAreaName)))
		i += copy(dAtA[i:], m.ParentAreaName)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *RoomAnchorInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RoomAnchorInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.AnchorProfileType != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.AnchorProfileType))
	}
	if m.AnchorLevel != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.AnchorLevel.Size()))
		n13, err := m.AnchorLevel.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n13
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *TagData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TagData) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.TagId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.TagId))
	}
	if m.TagSubId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.TagSubId))
	}
	if m.TagValue != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.TagValue))
	}
	if len(m.TagExt) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.TagExt)))
		i += copy(dAtA[i:], m.TagExt)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *AnchorLevel) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AnchorLevel) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Level != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Level))
	}
	if m.Color != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Color))
	}
	if m.Score != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Score))
	}
	if m.Left != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Left))
	}
	if m.Right != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Right))
	}
	if m.MaxLevel != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.MaxLevel))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintApi(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *RoomIDsReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.RoomIds) > 0 {
		l = 0
		for _, e := range m.RoomIds {
			l += sovApi(uint64(e))
		}
		n += 1 + sovApi(uint64(l)) + l
	}
	if len(m.Attrs) > 0 {
		for _, s := range m.Attrs {
			l = len(s)
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UIDsReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Uids) > 0 {
		l = 0
		for _, e := range m.Uids {
			l += sovApi(uint64(e))
		}
		n += 1 + sovApi(uint64(l)) + l
	}
	if len(m.Attrs) > 0 {
		for _, s := range m.Attrs {
			l = len(s)
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *IsAnchorUIDsReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Uids) > 0 {
		l = 0
		for _, e := range m.Uids {
			l += sovApi(uint64(e))
		}
		n += 1 + sovApi(uint64(l)) + l
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *IsAnchorUIDsResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.List) > 0 {
		for k, v := range m.List {
			_ = k
			_ = v
			mapEntrySize := 1 + sovApi(uint64(k)) + 1 + sovApi(uint64(v))
			n += mapEntrySize + 1 + sovApi(uint64(mapEntrySize))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RoomIDsInfosResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.List) > 0 {
		for k, v := range m.List {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovApi(uint64(l))
			}
			mapEntrySize := 1 + sovApi(uint64(k)) + l
			n += mapEntrySize + 1 + sovApi(uint64(mapEntrySize))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UIDsInfosResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.List) > 0 {
		for k, v := range m.List {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovApi(uint64(l))
			}
			mapEntrySize := 1 + sovApi(uint64(k)) + l
			n += mapEntrySize + 1 + sovApi(uint64(mapEntrySize))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Infos) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RoomId != 0 {
		n += 1 + sovApi(uint64(m.RoomId))
	}
	if m.Uid != 0 {
		n += 1 + sovApi(uint64(m.Uid))
	}
	if m.Status != nil {
		l = m.Status.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Show != nil {
		l = m.Show.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Area != nil {
		l = m.Area.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Anchor != nil {
		l = m.Anchor.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RoomStatusInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LiveStatus != 0 {
		n += 1 + sovApi(uint64(m.LiveStatus))
	}
	if m.LiveScreenType != 0 {
		n += 1 + sovApi(uint64(m.LiveScreenType))
	}
	if m.LiveMark != 0 {
		n += 1 + sovApi(uint64(m.LiveMark))
	}
	if m.LockStatus != 0 {
		n += 1 + sovApi(uint64(m.LockStatus))
	}
	if m.LockTime != 0 {
		n += 1 + sovApi(uint64(m.LockTime))
	}
	if m.HiddenStatus != 0 {
		n += 1 + sovApi(uint64(m.HiddenStatus))
	}
	if m.HiddenTime != 0 {
		n += 1 + sovApi(uint64(m.HiddenTime))
	}
	if m.LiveType != 0 {
		n += 1 + sovApi(uint64(m.LiveType))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RoomShowInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ShortId != 0 {
		n += 1 + sovApi(uint64(m.ShortId))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Cover)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Tags)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Background)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Keyframe)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.PopularityCount != 0 {
		n += 1 + sovApi(uint64(m.PopularityCount))
	}
	if len(m.TagList) > 0 {
		for _, e := range m.TagList {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.LiveStartTime != 0 {
		n += 1 + sovApi(uint64(m.LiveStartTime))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RoomAreaInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AreaId != 0 {
		n += 1 + sovApi(uint64(m.AreaId))
	}
	l = len(m.AreaName)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.ParentAreaId != 0 {
		n += 1 + sovApi(uint64(m.ParentAreaId))
	}
	l = len(m.ParentAreaName)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RoomAnchorInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AnchorProfileType != 0 {
		n += 1 + sovApi(uint64(m.AnchorProfileType))
	}
	if m.AnchorLevel != nil {
		l = m.AnchorLevel.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TagData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TagId != 0 {
		n += 1 + sovApi(uint64(m.TagId))
	}
	if m.TagSubId != 0 {
		n += 1 + sovApi(uint64(m.TagSubId))
	}
	if m.TagValue != 0 {
		n += 1 + sovApi(uint64(m.TagValue))
	}
	l = len(m.TagExt)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AnchorLevel) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Level != 0 {
		n += 1 + sovApi(uint64(m.Level))
	}
	if m.Color != 0 {
		n += 1 + sovApi(uint64(m.Color))
	}
	if m.Score != 0 {
		n += 1 + sovApi(uint64(m.Score))
	}
	if m.Left != 0 {
		n += 1 + sovApi(uint64(m.Left))
	}
	if m.Right != 0 {
		n += 1 + sovApi(uint64(m.Right))
	}
	if m.MaxLevel != 0 {
		n += 1 + sovApi(uint64(m.MaxLevel))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovApi(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozApi(x uint64) (n int) {
	return sovApi(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *RoomIDsReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RoomIDsReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RoomIDsReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.RoomIds = append(m.RoomIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthApi
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.RoomIds) == 0 {
					m.RoomIds = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.RoomIds = append(m.RoomIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field RoomIds", wireType)
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attrs", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Attrs = append(m.Attrs, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UIDsReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UIDsReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UIDsReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Uids = append(m.Uids, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthApi
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Uids) == 0 {
					m.Uids = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Uids = append(m.Uids, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Uids", wireType)
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attrs", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Attrs = append(m.Attrs, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IsAnchorUIDsReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IsAnchorUIDsReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IsAnchorUIDsReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Uids = append(m.Uids, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthApi
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Uids) == 0 {
					m.Uids = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Uids = append(m.Uids, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Uids", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IsAnchorUIDsResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IsAnchorUIDsResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IsAnchorUIDsResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.List == nil {
				m.List = make(map[int64]int64)
			}
			var mapkey int64
			var mapvalue int64
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= (int64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvalue |= (int64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipApi(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthApi
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.List[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RoomIDsInfosResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RoomIDsInfosResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RoomIDsInfosResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.List == nil {
				m.List = make(map[int64]*Infos)
			}
			var mapkey int64
			var mapvalue *Infos
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= (int64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= (int(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthApi
					}
					postmsgIndex := iNdEx + mapmsglen
					if mapmsglen < 0 {
						return ErrInvalidLengthApi
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &Infos{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipApi(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthApi
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.List[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UIDsInfosResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UIDsInfosResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UIDsInfosResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.List == nil {
				m.List = make(map[int64]*Infos)
			}
			var mapkey int64
			var mapvalue *Infos
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= (int64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= (int(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthApi
					}
					postmsgIndex := iNdEx + mapmsglen
					if mapmsglen < 0 {
						return ErrInvalidLengthApi
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &Infos{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipApi(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthApi
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.List[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Infos) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Infos: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Infos: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoomId", wireType)
			}
			m.RoomId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RoomId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Status == nil {
				m.Status = &RoomStatusInfo{}
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Show", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Show == nil {
				m.Show = &RoomShowInfo{}
			}
			if err := m.Show.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Area", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Area == nil {
				m.Area = &RoomAreaInfo{}
			}
			if err := m.Area.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Anchor", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Anchor == nil {
				m.Anchor = &RoomAnchorInfo{}
			}
			if err := m.Anchor.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RoomStatusInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RoomStatusInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RoomStatusInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LiveStatus", wireType)
			}
			m.LiveStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LiveStatus |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LiveScreenType", wireType)
			}
			m.LiveScreenType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LiveScreenType |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LiveMark", wireType)
			}
			m.LiveMark = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LiveMark |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LockStatus", wireType)
			}
			m.LockStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LockStatus |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LockTime", wireType)
			}
			m.LockTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LockTime |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HiddenStatus", wireType)
			}
			m.HiddenStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HiddenStatus |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HiddenTime", wireType)
			}
			m.HiddenTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HiddenTime |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LiveType", wireType)
			}
			m.LiveType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LiveType |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RoomShowInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RoomShowInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RoomShowInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShortId", wireType)
			}
			m.ShortId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ShortId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cover", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cover = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tags", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tags = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Background", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Background = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Keyframe", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Keyframe = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PopularityCount", wireType)
			}
			m.PopularityCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PopularityCount |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TagList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TagList = append(m.TagList, &TagData{})
			if err := m.TagList[len(m.TagList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LiveStartTime", wireType)
			}
			m.LiveStartTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LiveStartTime |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RoomAreaInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RoomAreaInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RoomAreaInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AreaId", wireType)
			}
			m.AreaId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AreaId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AreaName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AreaName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParentAreaId", wireType)
			}
			m.ParentAreaId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ParentAreaId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParentAreaName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ParentAreaName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RoomAnchorInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RoomAnchorInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RoomAnchorInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AnchorProfileType", wireType)
			}
			m.AnchorProfileType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AnchorProfileType |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AnchorLevel", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AnchorLevel == nil {
				m.AnchorLevel = &AnchorLevel{}
			}
			if err := m.AnchorLevel.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TagData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TagData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TagData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TagId", wireType)
			}
			m.TagId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TagId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TagSubId", wireType)
			}
			m.TagSubId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TagSubId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TagValue", wireType)
			}
			m.TagValue = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TagValue |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TagExt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TagExt = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AnchorLevel) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AnchorLevel: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AnchorLevel: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			m.Level = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Level |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Color", wireType)
			}
			m.Color = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Color |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Score", wireType)
			}
			m.Score = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Score |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Left", wireType)
			}
			m.Left = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Left |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Right", wireType)
			}
			m.Right = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Right |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxLevel", wireType)
			}
			m.MaxLevel = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxLevel |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipApi(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowApi
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowApi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowApi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthApi
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowApi
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipApi(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthApi = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowApi   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("app/service/live/xroom/api/api.proto", fileDescriptor_api_38d5f750b789d347)
}

var fileDescriptor_api_38d5f750b789d347 = []byte{
	// 1319 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x57, 0x4b, 0x8f, 0x13, 0xc7,
	0x16, 0xbe, 0x3d, 0x9e, 0xf1, 0xe3, 0x78, 0x5e, 0x14, 0x5c, 0xae, 0x99, 0xcb, 0x9d, 0x9e, 0x6b,
	0xa1, 0x64, 0x82, 0x88, 0x0d, 0x83, 0x44, 0x08, 0x51, 0x40, 0xe3, 0x40, 0x90, 0x15, 0xc8, 0xa3,
	0x60, 0x22, 0x25, 0x1b, 0xab, 0xc6, 0x2e, 0xdb, 0xad, 0x69, 0xbb, 0x9b, 0xea, 0x6a, 0x33, 0xfe,
	0x1f, 0x59, 0x66, 0x15, 0x65, 0x15, 0xe5, 0x67, 0x64, 0xc1, 0x32, 0xeb, 0x44, 0x6a, 0x25, 0x64,
	0x95, 0x5e, 0xf2, 0x0b, 0xa2, 0x73, 0xaa, 0x6c, 0xb7, 0xcd, 0x30, 0x61, 0x81, 0x94, 0xc5, 0xb8,
	0xaa, 0xbe, 0xf3, 0xa8, 0xaf, 0x4e, 0x9d, 0x73, 0xba, 0x06, 0x2e, 0x89, 0x30, 0xac, 0x47, 0x52,
	0x8d, 0xbc, 0xb6, 0xac, 0xfb, 0xde, 0x48, 0xd6, 0x8f, 0x55, 0x10, 0x0c, 0xea, 0x22, 0xf4, 0xf0,
	0xaf, 0x16, 0xaa, 0x40, 0x07, 0x6c, 0x0d, 0x25, 0x35, 0x92, 0xd4, 0x46, 0xd7, 0xb6, 0xde, 0xed,
	0x79, 0xba, 0x1f, 0x1f, 0xd6, 0xda, 0xc1, 0xa0, 0xde, 0x0b, 0x7a, 0x41, 0x9d, 0xb4, 0x0e, 0xe3,
	0x2e, 0xad, 0x68, 0x41, 0x33, 0x63, 0x5d, 0xfd, 0xc1, 0x01, 0xe0, 0x41, 0x30, 0x68, 0xde, 0x8d,
	0xb8, 0x7c, 0xc2, 0xbe, 0x80, 0x22, 0x3a, 0x6a, 0x79, 0x9d, 0xa8, 0xe2, 0xec, 0xe4, 0x76, 0x73,
	0x8d, 0x1b, 0x2f, 0x12, 0x77, 0xaf, 0x1b, 0xa8, 0xc1, 0xad, 0xea, 0x44, 0x52, 0xdd, 0x19, 0x09,
	0xdf, 0xeb, 0x08, 0x2d, 0x6f, 0x55, 0x95, 0x7c, 0x12, 0x7b, 0x4a, 0x76, 0xae, 0xf4, 0xf4, 0x87,
	0x57, 0xaf, 0x74, 0xbc, 0x91, 0xa4, 0x59, 0x95, 0x17, 0x50, 0xbb, 0xd9, 0x89, 0x58, 0x13, 0x56,
	0x84, 0xd6, 0x2a, 0xaa, 0x2c, 0xed, 0xe4, 0x76, 0x4b, 0x8d, 0xeb, 0x2f, 0x12, 0xb7, 0x6e, 0xfc,
	0x11, 0xfc, 0x5a, 0xce, 0x8c, 0x87, 0xea, 0xb7, 0x0e, 0x14, 0x0e, 0x2c, 0xd3, 0x8f, 0x61, 0x39,
	0x9e, 0xb1, 0xdc, 0x7b, 0x91, 0xb8, 0x35, 0xe3, 0x35, 0x7e, 0x5d, 0x86, 0x64, 0xff, 0x26, 0xe9,
	0x7d, 0x05, 0x1b, 0xcd, 0x68, 0x7f, 0xd8, 0xee, 0x07, 0xea, 0x0d, 0xb3, 0xac, 0x7e, 0xe3, 0xc0,
	0xe6, 0xbc, 0xef, 0x28, 0x64, 0xf7, 0x61, 0xd9, 0xf7, 0x22, 0x4d, 0xce, 0xcb, 0x7b, 0xef, 0xd4,
	0xe6, 0x12, 0xa1, 0xb6, 0xa8, 0x5e, 0x7b, 0xe0, 0x45, 0xfa, 0xde, 0x50, 0xab, 0x71, 0xa3, 0x98,
	0x26, 0x2e, 0x99, 0x72, 0xfa, 0xdd, 0x7a, 0x0f, 0x4a, 0x53, 0x21, 0xdb, 0x84, 0xdc, 0x91, 0x1c,
	0x57, 0x9c, 0x1d, 0x67, 0x37, 0xc7, 0x71, 0xca, 0xce, 0xc1, 0xca, 0x48, 0xf8, 0xb1, 0xac, 0x2c,
	0x11, 0x66, 0x16, 0xb7, 0x96, 0x6e, 0x3a, 0x98, 0x3d, 0x9b, 0x36, 0x7b, 0x9a, 0xc3, 0x6e, 0xf0,
	0x3a, 0xb4, 0x16, 0xd5, 0x4f, 0xa1, 0xf5, 0xf0, 0x74, 0x5a, 0x97, 0xb3, 0xb4, 0xca, 0x7b, 0xe7,
	0x16, 0xcf, 0x4f, 0x3b, 0x64, 0xc8, 0x7e, 0xef, 0xc0, 0xda, 0xc1, 0x1c, 0xd3, 0xbb, 0x73, 0x4c,
	0xdf, 0x5a, 0x70, 0x70, 0xf0, 0xcf, 0xd0, 0xfc, 0x69, 0x09, 0x56, 0x08, 0x64, 0x97, 0xa0, 0x60,
	0x4b, 0xce, 0xf8, 0x6b, 0x94, 0xd3, 0xc4, 0x9d, 0x40, 0x3c, 0x6f, 0x0a, 0x8c, 0x5d, 0x80, 0x5c,
	0xec, 0x75, 0xcc, 0xdd, 0x34, 0x0a, 0x69, 0xe2, 0xe2, 0x92, 0xe3, 0x0f, 0xdb, 0x87, 0x7c, 0xa4,
	0x85, 0x8e, 0xa3, 0x4a, 0x8e, 0xf6, 0xfe, 0xdf, 0x09, 0x77, 0xf1, 0x88, 0x14, 0x70, 0xc3, 0x06,
	0xa4, 0x89, 0x6b, 0x0d, 0xb8, 0x1d, 0xd9, 0xfb, 0xb0, 0x1c, 0xf5, 0x83, 0xa7, 0x95, 0x65, 0x72,
	0xf0, 0xdf, 0x93, 0x1c, 0xf4, 0x83, 0xa7, 0x64, 0x4e, 0x71, 0x41, 0x65, 0x4e, 0xbf, 0x68, 0x2a,
	0x94, 0x14, 0x95, 0x95, 0x57, 0x9a, 0xee, 0x2b, 0x29, 0x66, 0xa6, 0xa8, 0xcc, 0xe9, 0x17, 0x89,
	0x0b, 0x4a, 0xde, 0x4a, 0xfe, 0x95, 0xc4, 0x4d, 0x76, 0xcf, 0x88, 0x1b, 0x03, 0x6e, 0xc7, 0xea,
	0x77, 0x39, 0x58, 0x9f, 0x3f, 0x1f, 0xbb, 0x0a, 0x65, 0x74, 0xd3, 0xb2, 0x31, 0x31, 0x31, 0xdd,
	0x48, 0x13, 0x37, 0x0b, 0x73, 0xc0, 0x85, 0xb1, 0x62, 0xb7, 0x61, 0xd3, 0x88, 0xda, 0x4a, 0xca,
	0x61, 0x4b, 0x8f, 0x43, 0x5b, 0x04, 0x8d, 0x73, 0x69, 0xe2, 0xbe, 0x24, 0xe3, 0xeb, 0x64, 0x4b,
	0xc0, 0xe3, 0x71, 0x28, 0xd9, 0x65, 0x28, 0x91, 0xce, 0x40, 0xa8, 0x23, 0xba, 0x83, 0x5c, 0x63,
	0x2d, 0x4d, 0xdc, 0x19, 0xc8, 0x8b, 0x38, 0x7d, 0x28, 0xd4, 0x11, 0xb1, 0x0b, 0xda, 0x47, 0x13,
	0x76, 0xcb, 0x19, 0x76, 0x33, 0x98, 0x03, 0x2e, 0x2c, 0x3b, 0xf4, 0x8e, 0x22, 0xed, 0x0d, 0x24,
	0x45, 0x79, 0xe2, 0x7d, 0x02, 0xf2, 0x22, 0x4e, 0x1f, 0x7b, 0x03, 0xc9, 0x6e, 0xc0, 0x5a, 0xdf,
	0xeb, 0x74, 0xe4, 0x70, 0xe2, 0x3f, 0x4f, 0xfa, 0x67, 0xd2, 0xc4, 0x9d, 0x17, 0xf0, 0x55, 0xb3,
	0xb4, 0x7b, 0x5c, 0x85, 0xb2, 0x15, 0xd3, 0x2e, 0x85, 0x19, 0xab, 0x0c, 0xcc, 0xc1, 0x2c, 0x68,
	0xa7, 0xc9, 0x99, 0x29, 0x58, 0xc5, 0x85, 0x33, 0x53, 0x94, 0xe8, 0xcc, 0x18, 0x9f, 0xea, 0x1f,
	0x39, 0x58, 0xcd, 0xe6, 0x10, 0x7b, 0x1b, 0x8a, 0x51, 0x3f, 0x50, 0x7a, 0x96, 0xf3, 0xab, 0x69,
	0xe2, 0x4e, 0x31, 0x5e, 0xa0, 0x59, 0xb3, 0xc3, 0x5c, 0x58, 0xd1, 0x9e, 0xf6, 0xcd, 0x75, 0x94,
	0x1a, 0xa5, 0x34, 0x71, 0x0d, 0xc0, 0xcd, 0x80, 0x0a, 0xed, 0x60, 0x24, 0x15, 0x85, 0xdd, 0x2a,
	0x10, 0xc0, 0xcd, 0xc0, 0x2e, 0xc2, 0xb2, 0x16, 0x3d, 0x13, 0xe8, 0x92, 0xc9, 0x40, 0x5c, 0x73,
	0xfa, 0x65, 0x35, 0x80, 0x43, 0xd1, 0x3e, 0xea, 0xa9, 0x20, 0x1e, 0x76, 0x28, 0xb8, 0xa5, 0xc6,
	0x7a, 0x9a, 0xb8, 0x19, 0x94, 0x67, 0xe6, 0xec, 0x1a, 0x94, 0x3b, 0x32, 0x6a, 0x2b, 0x2f, 0xd4,
	0x5e, 0x30, 0xa4, 0xe8, 0x96, 0x4c, 0x9c, 0x32, 0x30, 0xcf, 0x2e, 0xd8, 0x2e, 0x14, 0x8f, 0xe4,
	0xb8, 0xab, 0x84, 0x8d, 0x6b, 0xc9, 0x9c, 0x75, 0x82, 0xf1, 0xe9, 0x8c, 0xdd, 0x81, 0xcd, 0x30,
	0x08, 0x63, 0x5f, 0x28, 0x4f, 0x8f, 0x5b, 0xed, 0x20, 0x1e, 0x6a, 0x1b, 0x59, 0x4a, 0xc3, 0x45,
	0x19, 0xdf, 0x98, 0x21, 0x1f, 0x21, 0xc0, 0xee, 0x40, 0x51, 0x8b, 0x5e, 0x8b, 0x9a, 0x5d, 0x89,
	0x9a, 0xdd, 0xf9, 0x85, 0x8a, 0x7a, 0x2c, 0x7a, 0x77, 0x85, 0x16, 0x86, 0xc2, 0x44, 0x97, 0x17,
	0xb4, 0xe8, 0x61, 0x6f, 0x63, 0x1f, 0xc0, 0xc6, 0xa4, 0x46, 0x94, 0x36, 0xa9, 0x00, 0x44, 0xe0,
	0x6c, 0x9a, 0xb8, 0x8b, 0x22, 0xbe, 0x66, 0x4b, 0x48, 0x69, 0xcc, 0x88, 0xea, 0x2f, 0x8e, 0xb9,
	0xe5, 0x49, 0xb9, 0x63, 0x63, 0xc3, 0x32, 0x5f, 0x68, 0x6c, 0x16, 0xe2, 0x79, 0x9c, 0x34, 0x3b,
	0x98, 0x48, 0x04, 0x0d, 0x31, 0x40, 0xe6, 0x9a, 0x29, 0x91, 0xa6, 0x20, 0x2f, 0xe2, 0xf4, 0x53,
	0x8c, 0xd0, 0x4d, 0x58, 0x0f, 0x85, 0x92, 0x43, 0xdd, 0x9a, 0x38, 0x36, 0xd5, 0xc6, 0xd2, 0xc4,
	0x5d, 0x90, 0xf0, 0x55, 0xb3, 0xde, 0x37, 0xbb, 0xdc, 0x86, 0xcd, 0xac, 0x9c, 0x36, 0x33, 0x29,
	0x61, 0x62, 0xbb, 0x20, 0xe3, 0xeb, 0x33, 0x6b, 0xdc, 0x19, 0x3f, 0x81, 0xeb, 0xf3, 0xed, 0x88,
	0xdd, 0x87, 0xb3, 0xa6, 0x09, 0xb5, 0x42, 0x15, 0x74, 0x3d, 0xdf, 0xd6, 0x82, 0x39, 0xea, 0x7f,
	0xd2, 0xc4, 0x3d, 0x49, 0xcc, 0xcf, 0x18, 0xf0, 0x73, 0x83, 0x51, 0xfb, 0xf8, 0x0c, 0x56, 0xad,
	0xa6, 0x2f, 0x47, 0xd2, 0xb7, 0x5f, 0x90, 0xad, 0x85, 0xab, 0x33, 0x3b, 0x3f, 0x40, 0x8d, 0xc6,
	0x66, 0x9a, 0xb8, 0x73, 0x36, 0xbc, 0x2c, 0x66, 0xe2, 0xea, 0x8f, 0x0e, 0x14, 0xec, 0x4d, 0xb3,
	0xff, 0x43, 0x1e, 0xef, 0x79, 0x7a, 0x07, 0xd4, 0x44, 0x0d, 0xc2, 0x57, 0xb4, 0xe8, 0x35, 0x3b,
	0xec, 0x0a, 0x00, 0x02, 0x51, 0x7c, 0xd8, 0x9a, 0x7e, 0x61, 0xa8, 0x08, 0x66, 0x28, 0xc7, 0x64,
	0x79, 0x14, 0x1f, 0x9a, 0xfb, 0x42, 0xdc, 0x7c, 0xec, 0x32, 0xcd, 0x6e, 0x0a, 0x92, 0xee, 0x97,
	0x38, 0xc3, 0x0c, 0x40, 0x58, 0x1e, 0x6b, 0x1b, 0x6c, 0xca, 0x00, 0x0b, 0x71, 0xa4, 0x71, 0xef,
	0x58, 0x57, 0x7f, 0x75, 0xa0, 0x9c, 0x39, 0x1d, 0xd6, 0xb4, 0x09, 0x84, 0x61, 0x4c, 0x35, 0x6d,
	0x4e, 0x69, 0x06, 0x53, 0xf4, 0x7e, 0xa0, 0x2c, 0x57, 0x5b, 0xf4, 0x7e, 0x40, 0x45, 0xef, 0x07,
	0x0a, 0x15, 0xa2, 0x76, 0xa0, 0x26, 0xfc, 0x48, 0x81, 0x00, 0x6e, 0x06, 0xec, 0x0a, 0xbe, 0xec,
	0x6a, 0xdb, 0x7e, 0xcd, 0xa7, 0x5e, 0x76, 0xf1, 0x53, 0x2f, 0xbb, 0x1a, 0xcd, 0x95, 0xd7, 0xeb,
	0x6b, 0xdb, 0x6d, 0xc9, 0x9c, 0x00, 0x6e, 0x06, 0x8c, 0xc1, 0x40, 0x1c, 0xdb, 0xeb, 0xca, 0xcf,
	0x62, 0x30, 0x05, 0x79, 0x71, 0x20, 0x8e, 0xe9, 0x34, 0x7b, 0x7f, 0x3a, 0xb0, 0x8c, 0x99, 0xc3,
	0x9a, 0x50, 0xee, 0x49, 0xfd, 0x30, 0xf6, 0xb5, 0x17, 0xfa, 0x92, 0x5d, 0x38, 0xf9, 0xc5, 0xc4,
	0xe5, 0x93, 0x2d, 0xf7, 0x6f, 0x1e, 0x53, 0xac, 0x09, 0x67, 0x32, 0xae, 0x1a, 0xe3, 0x03, 0x7c,
	0xe2, 0x9e, 0x3f, 0xe1, 0x61, 0x83, 0xde, 0x2e, 0x9e, 0xf6, 0xe0, 0x61, 0x9f, 0x40, 0xd1, 0xb3,
	0x4f, 0x48, 0xb6, 0x7d, 0xea, 0xdb, 0xf2, 0x65, 0x5e, 0x8b, 0x6f, 0xcf, 0xc6, 0xbf, 0x9f, 0xfd,
	0xbe, 0xfd, 0xaf, 0x67, 0xcf, 0xb7, 0x9d, 0x9f, 0x9f, 0x6f, 0x3b, 0xbf, 0x3d, 0xdf, 0x76, 0xbe,
	0xce, 0x89, 0xd0, 0x3b, 0xcc, 0xd3, 0x3f, 0x21, 0xd7, 0xff, 0x0a, 0x00, 0x00, 0xff, 0xff, 0xe9,
	0x96, 0x8c, 0x99, 0xea, 0x0c, 0x00, 0x00,
}
