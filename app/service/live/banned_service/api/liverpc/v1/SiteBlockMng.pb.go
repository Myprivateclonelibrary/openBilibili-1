// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: v1/SiteBlockMng.proto

package v1

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type SiteBlockMngIsBlockUserReq struct {
	//
	Tuid int64 `protobuf:"varint,1,opt,name=tuid,proto3" json:"tuid"`
}

func (m *SiteBlockMngIsBlockUserReq) Reset()         { *m = SiteBlockMngIsBlockUserReq{} }
func (m *SiteBlockMngIsBlockUserReq) String() string { return proto.CompactTextString(m) }
func (*SiteBlockMngIsBlockUserReq) ProtoMessage()    {}
func (*SiteBlockMngIsBlockUserReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_SiteBlockMng_7cdfb51c66347671, []int{0}
}
func (m *SiteBlockMngIsBlockUserReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SiteBlockMngIsBlockUserReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SiteBlockMngIsBlockUserReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *SiteBlockMngIsBlockUserReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SiteBlockMngIsBlockUserReq.Merge(dst, src)
}
func (m *SiteBlockMngIsBlockUserReq) XXX_Size() int {
	return m.Size()
}
func (m *SiteBlockMngIsBlockUserReq) XXX_DiscardUnknown() {
	xxx_messageInfo_SiteBlockMngIsBlockUserReq.DiscardUnknown(m)
}

var xxx_messageInfo_SiteBlockMngIsBlockUserReq proto.InternalMessageInfo

func (m *SiteBlockMngIsBlockUserReq) GetTuid() int64 {
	if m != nil {
		return m.Tuid
	}
	return 0
}

type SiteBlockMngIsBlockUserResp struct {
	// code
	Code int64 `protobuf:"varint,1,opt,name=code,proto3" json:"code"`
	// msg
	Msg string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg"`
	//
	Data *SiteBlockMngIsBlockUserResp_Data `protobuf:"bytes,3,opt,name=data" json:"data"`
}

func (m *SiteBlockMngIsBlockUserResp) Reset()         { *m = SiteBlockMngIsBlockUserResp{} }
func (m *SiteBlockMngIsBlockUserResp) String() string { return proto.CompactTextString(m) }
func (*SiteBlockMngIsBlockUserResp) ProtoMessage()    {}
func (*SiteBlockMngIsBlockUserResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_SiteBlockMng_7cdfb51c66347671, []int{1}
}
func (m *SiteBlockMngIsBlockUserResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SiteBlockMngIsBlockUserResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SiteBlockMngIsBlockUserResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *SiteBlockMngIsBlockUserResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SiteBlockMngIsBlockUserResp.Merge(dst, src)
}
func (m *SiteBlockMngIsBlockUserResp) XXX_Size() int {
	return m.Size()
}
func (m *SiteBlockMngIsBlockUserResp) XXX_DiscardUnknown() {
	xxx_messageInfo_SiteBlockMngIsBlockUserResp.DiscardUnknown(m)
}

var xxx_messageInfo_SiteBlockMngIsBlockUserResp proto.InternalMessageInfo

func (m *SiteBlockMngIsBlockUserResp) GetCode() int64 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *SiteBlockMngIsBlockUserResp) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func (m *SiteBlockMngIsBlockUserResp) GetData() *SiteBlockMngIsBlockUserResp_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

type SiteBlockMngIsBlockUserResp_Data struct {
	//
	IsBlock bool `protobuf:"varint,1,opt,name=is_block,json=isBlock,proto3" json:"is_block"`
}

func (m *SiteBlockMngIsBlockUserResp_Data) Reset()         { *m = SiteBlockMngIsBlockUserResp_Data{} }
func (m *SiteBlockMngIsBlockUserResp_Data) String() string { return proto.CompactTextString(m) }
func (*SiteBlockMngIsBlockUserResp_Data) ProtoMessage()    {}
func (*SiteBlockMngIsBlockUserResp_Data) Descriptor() ([]byte, []int) {
	return fileDescriptor_SiteBlockMng_7cdfb51c66347671, []int{1, 0}
}
func (m *SiteBlockMngIsBlockUserResp_Data) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SiteBlockMngIsBlockUserResp_Data) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SiteBlockMngIsBlockUserResp_Data.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *SiteBlockMngIsBlockUserResp_Data) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SiteBlockMngIsBlockUserResp_Data.Merge(dst, src)
}
func (m *SiteBlockMngIsBlockUserResp_Data) XXX_Size() int {
	return m.Size()
}
func (m *SiteBlockMngIsBlockUserResp_Data) XXX_DiscardUnknown() {
	xxx_messageInfo_SiteBlockMngIsBlockUserResp_Data.DiscardUnknown(m)
}

var xxx_messageInfo_SiteBlockMngIsBlockUserResp_Data proto.InternalMessageInfo

func (m *SiteBlockMngIsBlockUserResp_Data) GetIsBlock() bool {
	if m != nil {
		return m.IsBlock
	}
	return false
}

func init() {
	proto.RegisterType((*SiteBlockMngIsBlockUserReq)(nil), "banned_service.v1.SiteBlockMngIsBlockUserReq")
	proto.RegisterType((*SiteBlockMngIsBlockUserResp)(nil), "banned_service.v1.SiteBlockMngIsBlockUserResp")
	proto.RegisterType((*SiteBlockMngIsBlockUserResp_Data)(nil), "banned_service.v1.SiteBlockMngIsBlockUserResp.Data")
}
func (m *SiteBlockMngIsBlockUserReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SiteBlockMngIsBlockUserReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Tuid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSiteBlockMng(dAtA, i, uint64(m.Tuid))
	}
	return i, nil
}

func (m *SiteBlockMngIsBlockUserResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SiteBlockMngIsBlockUserResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSiteBlockMng(dAtA, i, uint64(m.Code))
	}
	if len(m.Msg) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSiteBlockMng(dAtA, i, uint64(len(m.Msg)))
		i += copy(dAtA[i:], m.Msg)
	}
	if m.Data != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintSiteBlockMng(dAtA, i, uint64(m.Data.Size()))
		n1, err := m.Data.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	return i, nil
}

func (m *SiteBlockMngIsBlockUserResp_Data) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SiteBlockMngIsBlockUserResp_Data) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.IsBlock {
		dAtA[i] = 0x8
		i++
		if m.IsBlock {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func encodeVarintSiteBlockMng(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *SiteBlockMngIsBlockUserReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Tuid != 0 {
		n += 1 + sovSiteBlockMng(uint64(m.Tuid))
	}
	return n
}

func (m *SiteBlockMngIsBlockUserResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovSiteBlockMng(uint64(m.Code))
	}
	l = len(m.Msg)
	if l > 0 {
		n += 1 + l + sovSiteBlockMng(uint64(l))
	}
	if m.Data != nil {
		l = m.Data.Size()
		n += 1 + l + sovSiteBlockMng(uint64(l))
	}
	return n
}

func (m *SiteBlockMngIsBlockUserResp_Data) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IsBlock {
		n += 2
	}
	return n
}

func sovSiteBlockMng(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozSiteBlockMng(x uint64) (n int) {
	return sovSiteBlockMng(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *SiteBlockMngIsBlockUserReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSiteBlockMng
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SiteBlockMngIsBlockUserReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SiteBlockMngIsBlockUserReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tuid", wireType)
			}
			m.Tuid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSiteBlockMng
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Tuid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSiteBlockMng(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSiteBlockMng
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SiteBlockMngIsBlockUserResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSiteBlockMng
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SiteBlockMngIsBlockUserResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SiteBlockMngIsBlockUserResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSiteBlockMng
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSiteBlockMng
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSiteBlockMng
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSiteBlockMng
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSiteBlockMng
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = &SiteBlockMngIsBlockUserResp_Data{}
			}
			if err := m.Data.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSiteBlockMng(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSiteBlockMng
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SiteBlockMngIsBlockUserResp_Data) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSiteBlockMng
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Data: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Data: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsBlock", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSiteBlockMng
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsBlock = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipSiteBlockMng(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSiteBlockMng
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSiteBlockMng(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSiteBlockMng
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSiteBlockMng
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSiteBlockMng
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthSiteBlockMng
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowSiteBlockMng
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipSiteBlockMng(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthSiteBlockMng = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSiteBlockMng   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("v1/SiteBlockMng.proto", fileDescriptor_SiteBlockMng_7cdfb51c66347671) }

var fileDescriptor_SiteBlockMng_7cdfb51c66347671 = []byte{
	// 308 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x2d, 0x33, 0xd4, 0x0f,
	0xce, 0x2c, 0x49, 0x75, 0xca, 0xc9, 0x4f, 0xce, 0xf6, 0xcd, 0x4b, 0xd7, 0x2b, 0x28, 0xca, 0x2f,
	0xc9, 0x17, 0x12, 0x4c, 0x4a, 0xcc, 0xcb, 0x4b, 0x4d, 0x89, 0x2f, 0x4e, 0x2d, 0x2a, 0xcb, 0x4c,
	0x4e, 0xd5, 0x2b, 0x33, 0x94, 0xd2, 0x4d, 0xcf, 0x2c, 0xc9, 0x28, 0x4d, 0xd2, 0x4b, 0xce, 0xcf,
	0xd5, 0x4f, 0xcf, 0x4f, 0xcf, 0xd7, 0x07, 0xab, 0x4c, 0x2a, 0x4d, 0x03, 0xf3, 0xc0, 0x1c, 0x30,
	0x0b, 0x62, 0x82, 0x92, 0x15, 0x97, 0x14, 0xb2, 0xb9, 0x9e, 0xc5, 0x60, 0x56, 0x68, 0x71, 0x6a,
	0x51, 0x50, 0x6a, 0xa1, 0x90, 0x0c, 0x17, 0x4b, 0x49, 0x69, 0x66, 0x8a, 0x04, 0xa3, 0x02, 0xa3,
	0x06, 0xb3, 0x13, 0xc7, 0xab, 0x7b, 0xf2, 0x60, 0x7e, 0x10, 0x98, 0x54, 0xba, 0xc5, 0xc8, 0x25,
	0x8d, 0x53, 0x73, 0x71, 0x01, 0x48, 0x77, 0x72, 0x7e, 0x4a, 0x2a, 0xb2, 0x6e, 0x10, 0x3f, 0x08,
	0x4c, 0x0a, 0x49, 0x72, 0x31, 0xe7, 0x16, 0xa7, 0x4b, 0x30, 0x29, 0x30, 0x6a, 0x70, 0x3a, 0xb1,
	0xbf, 0xba, 0x27, 0x0f, 0xe2, 0x06, 0x81, 0x08, 0xa1, 0x40, 0x2e, 0x96, 0x94, 0xc4, 0x92, 0x44,
	0x09, 0x66, 0x05, 0x46, 0x0d, 0x6e, 0x23, 0x63, 0x3d, 0x0c, 0x5f, 0xea, 0xe1, 0xb1, 0x56, 0xcf,
	0x25, 0xb1, 0x24, 0x11, 0x62, 0x1b, 0xc8, 0x90, 0x20, 0x30, 0x29, 0xa5, 0xcf, 0xc5, 0x02, 0x12,
	0x17, 0x52, 0xe7, 0xe2, 0xc8, 0x2c, 0x8e, 0x4f, 0x02, 0x69, 0x00, 0xbb, 0x8b, 0xc3, 0x89, 0xe7,
	0xd5, 0x3d, 0x79, 0xb8, 0x58, 0x10, 0x7b, 0x26, 0xc4, 0x34, 0xa3, 0x1a, 0x2e, 0x1e, 0x64, 0x4b,
	0x84, 0x72, 0xb8, 0xb8, 0x33, 0x11, 0x16, 0x09, 0xe9, 0x92, 0xe2, 0xa8, 0x42, 0x29, 0x3d, 0xd2,
	0xfc, 0xe0, 0x24, 0x73, 0xe2, 0x91, 0x1c, 0xe3, 0x85, 0x47, 0x72, 0x8c, 0x0f, 0x1e, 0xc9, 0x31,
	0x4e, 0x78, 0x2c, 0xc7, 0x70, 0xe1, 0xb1, 0x1c, 0xc3, 0x8d, 0xc7, 0x72, 0x0c, 0x51, 0x4c, 0x65,
	0x86, 0x49, 0x6c, 0xe0, 0xb8, 0x33, 0x06, 0x04, 0x00, 0x00, 0xff, 0xff, 0x00, 0x1b, 0x90, 0xa5,
	0x16, 0x02, 0x00, 0x00,
}
