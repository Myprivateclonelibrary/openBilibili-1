// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: v1/AdminSilent.proto

package v1

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type AdminSilentGetShieldRuleReq struct {
	//
	Roomid int64 `protobuf:"varint,1,opt,name=roomid,proto3" json:"roomid"`
}

func (m *AdminSilentGetShieldRuleReq) Reset()         { *m = AdminSilentGetShieldRuleReq{} }
func (m *AdminSilentGetShieldRuleReq) String() string { return proto.CompactTextString(m) }
func (*AdminSilentGetShieldRuleReq) ProtoMessage()    {}
func (*AdminSilentGetShieldRuleReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_AdminSilent_417b426140a13835, []int{0}
}
func (m *AdminSilentGetShieldRuleReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AdminSilentGetShieldRuleReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AdminSilentGetShieldRuleReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *AdminSilentGetShieldRuleReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AdminSilentGetShieldRuleReq.Merge(dst, src)
}
func (m *AdminSilentGetShieldRuleReq) XXX_Size() int {
	return m.Size()
}
func (m *AdminSilentGetShieldRuleReq) XXX_DiscardUnknown() {
	xxx_messageInfo_AdminSilentGetShieldRuleReq.DiscardUnknown(m)
}

var xxx_messageInfo_AdminSilentGetShieldRuleReq proto.InternalMessageInfo

func (m *AdminSilentGetShieldRuleReq) GetRoomid() int64 {
	if m != nil {
		return m.Roomid
	}
	return 0
}

type AdminSilentGetShieldRuleResp struct {
	//
	Code int64 `protobuf:"varint,1,opt,name=code,proto3" json:"code"`
	//
	Msg string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg"`
	//
	Data *AdminSilentGetShieldRuleResp_Data `protobuf:"bytes,3,opt,name=data" json:"data"`
}

func (m *AdminSilentGetShieldRuleResp) Reset()         { *m = AdminSilentGetShieldRuleResp{} }
func (m *AdminSilentGetShieldRuleResp) String() string { return proto.CompactTextString(m) }
func (*AdminSilentGetShieldRuleResp) ProtoMessage()    {}
func (*AdminSilentGetShieldRuleResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_AdminSilent_417b426140a13835, []int{1}
}
func (m *AdminSilentGetShieldRuleResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AdminSilentGetShieldRuleResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AdminSilentGetShieldRuleResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *AdminSilentGetShieldRuleResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AdminSilentGetShieldRuleResp.Merge(dst, src)
}
func (m *AdminSilentGetShieldRuleResp) XXX_Size() int {
	return m.Size()
}
func (m *AdminSilentGetShieldRuleResp) XXX_DiscardUnknown() {
	xxx_messageInfo_AdminSilentGetShieldRuleResp.DiscardUnknown(m)
}

var xxx_messageInfo_AdminSilentGetShieldRuleResp proto.InternalMessageInfo

func (m *AdminSilentGetShieldRuleResp) GetCode() int64 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *AdminSilentGetShieldRuleResp) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func (m *AdminSilentGetShieldRuleResp) GetData() *AdminSilentGetShieldRuleResp_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

type AdminSilentGetShieldRuleResp_Data struct {
	//
	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id"`
	// 为0表示全局规则
	Roomid int64 `protobuf:"varint,2,opt,name=roomid,proto3" json:"roomid"`
	// 房间真实分要求
	RealScore int64 `protobuf:"varint,3,opt,name=real_score,json=realScore,proto3" json:"real_score"`
	// 范围0~10, 乘以了10
	AiScore int64 `protobuf:"varint,4,opt,name=ai_score,json=aiScore,proto3" json:"ai_score"`
}

func (m *AdminSilentGetShieldRuleResp_Data) Reset()         { *m = AdminSilentGetShieldRuleResp_Data{} }
func (m *AdminSilentGetShieldRuleResp_Data) String() string { return proto.CompactTextString(m) }
func (*AdminSilentGetShieldRuleResp_Data) ProtoMessage()    {}
func (*AdminSilentGetShieldRuleResp_Data) Descriptor() ([]byte, []int) {
	return fileDescriptor_AdminSilent_417b426140a13835, []int{1, 0}
}
func (m *AdminSilentGetShieldRuleResp_Data) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AdminSilentGetShieldRuleResp_Data) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AdminSilentGetShieldRuleResp_Data.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *AdminSilentGetShieldRuleResp_Data) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AdminSilentGetShieldRuleResp_Data.Merge(dst, src)
}
func (m *AdminSilentGetShieldRuleResp_Data) XXX_Size() int {
	return m.Size()
}
func (m *AdminSilentGetShieldRuleResp_Data) XXX_DiscardUnknown() {
	xxx_messageInfo_AdminSilentGetShieldRuleResp_Data.DiscardUnknown(m)
}

var xxx_messageInfo_AdminSilentGetShieldRuleResp_Data proto.InternalMessageInfo

func (m *AdminSilentGetShieldRuleResp_Data) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *AdminSilentGetShieldRuleResp_Data) GetRoomid() int64 {
	if m != nil {
		return m.Roomid
	}
	return 0
}

func (m *AdminSilentGetShieldRuleResp_Data) GetRealScore() int64 {
	if m != nil {
		return m.RealScore
	}
	return 0
}

func (m *AdminSilentGetShieldRuleResp_Data) GetAiScore() int64 {
	if m != nil {
		return m.AiScore
	}
	return 0
}

func init() {
	proto.RegisterType((*AdminSilentGetShieldRuleReq)(nil), "banned_service.v1.AdminSilentGetShieldRuleReq")
	proto.RegisterType((*AdminSilentGetShieldRuleResp)(nil), "banned_service.v1.AdminSilentGetShieldRuleResp")
	proto.RegisterType((*AdminSilentGetShieldRuleResp_Data)(nil), "banned_service.v1.AdminSilentGetShieldRuleResp.Data")
}
func (m *AdminSilentGetShieldRuleReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AdminSilentGetShieldRuleReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Roomid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintAdminSilent(dAtA, i, uint64(m.Roomid))
	}
	return i, nil
}

func (m *AdminSilentGetShieldRuleResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AdminSilentGetShieldRuleResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintAdminSilent(dAtA, i, uint64(m.Code))
	}
	if len(m.Msg) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintAdminSilent(dAtA, i, uint64(len(m.Msg)))
		i += copy(dAtA[i:], m.Msg)
	}
	if m.Data != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintAdminSilent(dAtA, i, uint64(m.Data.Size()))
		n1, err := m.Data.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	return i, nil
}

func (m *AdminSilentGetShieldRuleResp_Data) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AdminSilentGetShieldRuleResp_Data) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintAdminSilent(dAtA, i, uint64(m.Id))
	}
	if m.Roomid != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintAdminSilent(dAtA, i, uint64(m.Roomid))
	}
	if m.RealScore != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintAdminSilent(dAtA, i, uint64(m.RealScore))
	}
	if m.AiScore != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintAdminSilent(dAtA, i, uint64(m.AiScore))
	}
	return i, nil
}

func encodeVarintAdminSilent(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *AdminSilentGetShieldRuleReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Roomid != 0 {
		n += 1 + sovAdminSilent(uint64(m.Roomid))
	}
	return n
}

func (m *AdminSilentGetShieldRuleResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovAdminSilent(uint64(m.Code))
	}
	l = len(m.Msg)
	if l > 0 {
		n += 1 + l + sovAdminSilent(uint64(l))
	}
	if m.Data != nil {
		l = m.Data.Size()
		n += 1 + l + sovAdminSilent(uint64(l))
	}
	return n
}

func (m *AdminSilentGetShieldRuleResp_Data) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovAdminSilent(uint64(m.Id))
	}
	if m.Roomid != 0 {
		n += 1 + sovAdminSilent(uint64(m.Roomid))
	}
	if m.RealScore != 0 {
		n += 1 + sovAdminSilent(uint64(m.RealScore))
	}
	if m.AiScore != 0 {
		n += 1 + sovAdminSilent(uint64(m.AiScore))
	}
	return n
}

func sovAdminSilent(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozAdminSilent(x uint64) (n int) {
	return sovAdminSilent(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *AdminSilentGetShieldRuleReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAdminSilent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AdminSilentGetShieldRuleReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AdminSilentGetShieldRuleReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Roomid", wireType)
			}
			m.Roomid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdminSilent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Roomid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAdminSilent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAdminSilent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AdminSilentGetShieldRuleResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAdminSilent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AdminSilentGetShieldRuleResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AdminSilentGetShieldRuleResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdminSilent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdminSilent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAdminSilent
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdminSilent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAdminSilent
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = &AdminSilentGetShieldRuleResp_Data{}
			}
			if err := m.Data.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAdminSilent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAdminSilent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AdminSilentGetShieldRuleResp_Data) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAdminSilent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Data: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Data: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdminSilent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Roomid", wireType)
			}
			m.Roomid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdminSilent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Roomid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RealScore", wireType)
			}
			m.RealScore = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdminSilent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RealScore |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AiScore", wireType)
			}
			m.AiScore = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdminSilent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AiScore |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAdminSilent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAdminSilent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipAdminSilent(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowAdminSilent
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAdminSilent
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAdminSilent
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthAdminSilent
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowAdminSilent
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipAdminSilent(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthAdminSilent = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowAdminSilent   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("v1/AdminSilent.proto", fileDescriptor_AdminSilent_417b426140a13835) }

var fileDescriptor_AdminSilent_417b426140a13835 = []byte{
	// 371 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x52, 0xbd, 0x6a, 0xeb, 0x30,
	0x18, 0x8d, 0x6c, 0x93, 0x1f, 0xe5, 0x72, 0x2f, 0x57, 0x5c, 0x2e, 0x69, 0x1a, 0xec, 0x90, 0xa5,
	0x59, 0x62, 0x93, 0xb4, 0x2f, 0x10, 0x53, 0xe8, 0xae, 0x6c, 0x5d, 0x8c, 0x6c, 0xa9, 0x8e, 0xc0,
	0xb6, 0x12, 0xff, 0xed, 0x7d, 0x83, 0xce, 0x7d, 0xa2, 0x8c, 0x19, 0x3b, 0x99, 0x92, 0x6c, 0x7e,
	0x8a, 0x62, 0xc5, 0x04, 0x43, 0x49, 0x21, 0xcb, 0xa7, 0xef, 0x1c, 0x1d, 0xce, 0xa7, 0xf3, 0x21,
	0xf8, 0x2f, 0x9f, 0x5b, 0x4b, 0x1a, 0xf2, 0x68, 0xc5, 0x03, 0x16, 0xa5, 0xe6, 0x26, 0x16, 0xa9,
	0x40, 0x7f, 0x5d, 0x12, 0x45, 0x8c, 0x3a, 0x09, 0x8b, 0x73, 0xee, 0x31, 0x33, 0x9f, 0x0f, 0x67,
	0x3e, 0x4f, 0xd7, 0x99, 0x6b, 0x7a, 0x22, 0xb4, 0x7c, 0xe1, 0x0b, 0x4b, 0x2a, 0xdd, 0xec, 0x45,
	0x22, 0x09, 0x64, 0x77, 0x72, 0x98, 0x2c, 0xe1, 0x6d, 0xc3, 0xf6, 0x89, 0xa5, 0xab, 0x35, 0x67,
	0x01, 0xc5, 0x59, 0xc0, 0x30, 0xdb, 0xa2, 0x09, 0x6c, 0xc7, 0x42, 0x84, 0x9c, 0x0e, 0xc0, 0x18,
	0x4c, 0x55, 0x1b, 0x96, 0x85, 0x51, 0x33, 0xb8, 0x3e, 0x27, 0x3b, 0x05, 0x8e, 0x2e, 0x7b, 0x24,
	0x1b, 0x34, 0x82, 0x9a, 0x27, 0x28, 0xab, 0x2d, 0xba, 0x65, 0x61, 0x48, 0x8c, 0x65, 0x45, 0x37,
	0x50, 0x0d, 0x13, 0x7f, 0xa0, 0x8c, 0xc1, 0xb4, 0x67, 0x77, 0xca, 0xc2, 0xa8, 0x20, 0xae, 0x0a,
	0xc2, 0x50, 0xa3, 0x24, 0x25, 0x03, 0x75, 0x0c, 0xa6, 0xfd, 0xc5, 0x83, 0xf9, 0x2d, 0xad, 0xf9,
	0xd3, 0x5c, 0xf3, 0x91, 0xa4, 0xe4, 0x34, 0xae, 0x72, 0xc1, 0xb2, 0x0e, 0xdf, 0x01, 0xd4, 0xaa,
	0x0b, 0xf4, 0x1f, 0x2a, 0xe7, 0x58, 0xed, 0xb2, 0x30, 0x14, 0x4e, 0xb1, 0xc2, 0x69, 0x23, 0xb2,
	0x72, 0x29, 0x32, 0x9a, 0x41, 0x18, 0x33, 0x12, 0x38, 0x89, 0x27, 0x62, 0x26, 0x9f, 0xa7, 0xda,
	0xbf, 0xcb, 0xc2, 0x68, 0xb0, 0xb8, 0x57, 0xf5, 0xab, 0xaa, 0x45, 0x77, 0xb0, 0x4b, 0x78, 0x2d,
	0xd6, 0xa4, 0xf8, 0x57, 0x59, 0x18, 0x67, 0x0e, 0x77, 0x08, 0x97, 0xc2, 0xc5, 0x2b, 0x80, 0xfd,
	0x46, 0x24, 0x14, 0xc3, 0x3f, 0x3e, 0x4b, 0x9d, 0x44, 0xe6, 0x72, 0xe2, 0x2c, 0x60, 0xc8, 0xbc,
	0x6a, 0x0b, 0xdb, 0xa1, 0x75, 0xe5, 0xd6, 0xec, 0xd1, 0xee, 0xa0, 0x83, 0xfd, 0x41, 0x07, 0x9f,
	0x07, 0x1d, 0xbc, 0x1d, 0xf5, 0xd6, 0xfe, 0xa8, 0xb7, 0x3e, 0x8e, 0x7a, 0xeb, 0x59, 0xc9, 0xe7,
	0x6e, 0x5b, 0x7e, 0x9b, 0xfb, 0xaf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x64, 0x72, 0xc0, 0x5a, 0x90,
	0x02, 0x00, 0x00,
}
