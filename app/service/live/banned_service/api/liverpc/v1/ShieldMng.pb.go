// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: v1/ShieldMng.proto

package v1

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type ShieldMngIsShieldUserReq struct {
	//
	Uid int64 `protobuf:"varint,1,opt,name=uid,proto3" json:"uid"`
	//
	ShieldUid int64 `protobuf:"varint,2,opt,name=shield_uid,json=shieldUid,proto3" json:"shield_uid"`
}

func (m *ShieldMngIsShieldUserReq) Reset()         { *m = ShieldMngIsShieldUserReq{} }
func (m *ShieldMngIsShieldUserReq) String() string { return proto.CompactTextString(m) }
func (*ShieldMngIsShieldUserReq) ProtoMessage()    {}
func (*ShieldMngIsShieldUserReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_ShieldMng_c683407439c9b594, []int{0}
}
func (m *ShieldMngIsShieldUserReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ShieldMngIsShieldUserReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ShieldMngIsShieldUserReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ShieldMngIsShieldUserReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ShieldMngIsShieldUserReq.Merge(dst, src)
}
func (m *ShieldMngIsShieldUserReq) XXX_Size() int {
	return m.Size()
}
func (m *ShieldMngIsShieldUserReq) XXX_DiscardUnknown() {
	xxx_messageInfo_ShieldMngIsShieldUserReq.DiscardUnknown(m)
}

var xxx_messageInfo_ShieldMngIsShieldUserReq proto.InternalMessageInfo

func (m *ShieldMngIsShieldUserReq) GetUid() int64 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *ShieldMngIsShieldUserReq) GetShieldUid() int64 {
	if m != nil {
		return m.ShieldUid
	}
	return 0
}

type ShieldMngIsShieldUserResp struct {
	//
	Code int64 `protobuf:"varint,1,opt,name=code,proto3" json:"code"`
	//
	Msg string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg"`
	//
	Data *ShieldMngIsShieldUserResp_Data `protobuf:"bytes,3,opt,name=data" json:"data"`
}

func (m *ShieldMngIsShieldUserResp) Reset()         { *m = ShieldMngIsShieldUserResp{} }
func (m *ShieldMngIsShieldUserResp) String() string { return proto.CompactTextString(m) }
func (*ShieldMngIsShieldUserResp) ProtoMessage()    {}
func (*ShieldMngIsShieldUserResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_ShieldMng_c683407439c9b594, []int{1}
}
func (m *ShieldMngIsShieldUserResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ShieldMngIsShieldUserResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ShieldMngIsShieldUserResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ShieldMngIsShieldUserResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ShieldMngIsShieldUserResp.Merge(dst, src)
}
func (m *ShieldMngIsShieldUserResp) XXX_Size() int {
	return m.Size()
}
func (m *ShieldMngIsShieldUserResp) XXX_DiscardUnknown() {
	xxx_messageInfo_ShieldMngIsShieldUserResp.DiscardUnknown(m)
}

var xxx_messageInfo_ShieldMngIsShieldUserResp proto.InternalMessageInfo

func (m *ShieldMngIsShieldUserResp) GetCode() int64 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *ShieldMngIsShieldUserResp) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func (m *ShieldMngIsShieldUserResp) GetData() *ShieldMngIsShieldUserResp_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

type ShieldMngIsShieldUserResp_Data struct {
	//
	Uid int64 `protobuf:"varint,1,opt,name=uid,proto3" json:"uid"`
	//
	ShieldUid int64 `protobuf:"varint,2,opt,name=shield_uid,json=shieldUid,proto3" json:"shield_uid"`
	//
	IsShieldUser bool `protobuf:"varint,3,opt,name=is_shield_user,json=isShieldUser,proto3" json:"is_shield_user"`
}

func (m *ShieldMngIsShieldUserResp_Data) Reset()         { *m = ShieldMngIsShieldUserResp_Data{} }
func (m *ShieldMngIsShieldUserResp_Data) String() string { return proto.CompactTextString(m) }
func (*ShieldMngIsShieldUserResp_Data) ProtoMessage()    {}
func (*ShieldMngIsShieldUserResp_Data) Descriptor() ([]byte, []int) {
	return fileDescriptor_ShieldMng_c683407439c9b594, []int{1, 0}
}
func (m *ShieldMngIsShieldUserResp_Data) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ShieldMngIsShieldUserResp_Data) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ShieldMngIsShieldUserResp_Data.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ShieldMngIsShieldUserResp_Data) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ShieldMngIsShieldUserResp_Data.Merge(dst, src)
}
func (m *ShieldMngIsShieldUserResp_Data) XXX_Size() int {
	return m.Size()
}
func (m *ShieldMngIsShieldUserResp_Data) XXX_DiscardUnknown() {
	xxx_messageInfo_ShieldMngIsShieldUserResp_Data.DiscardUnknown(m)
}

var xxx_messageInfo_ShieldMngIsShieldUserResp_Data proto.InternalMessageInfo

func (m *ShieldMngIsShieldUserResp_Data) GetUid() int64 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *ShieldMngIsShieldUserResp_Data) GetShieldUid() int64 {
	if m != nil {
		return m.ShieldUid
	}
	return 0
}

func (m *ShieldMngIsShieldUserResp_Data) GetIsShieldUser() bool {
	if m != nil {
		return m.IsShieldUser
	}
	return false
}

func init() {
	proto.RegisterType((*ShieldMngIsShieldUserReq)(nil), "banned_service.v1.ShieldMngIsShieldUserReq")
	proto.RegisterType((*ShieldMngIsShieldUserResp)(nil), "banned_service.v1.ShieldMngIsShieldUserResp")
	proto.RegisterType((*ShieldMngIsShieldUserResp_Data)(nil), "banned_service.v1.ShieldMngIsShieldUserResp.Data")
}
func (m *ShieldMngIsShieldUserReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ShieldMngIsShieldUserReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Uid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintShieldMng(dAtA, i, uint64(m.Uid))
	}
	if m.ShieldUid != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintShieldMng(dAtA, i, uint64(m.ShieldUid))
	}
	return i, nil
}

func (m *ShieldMngIsShieldUserResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ShieldMngIsShieldUserResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintShieldMng(dAtA, i, uint64(m.Code))
	}
	if len(m.Msg) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintShieldMng(dAtA, i, uint64(len(m.Msg)))
		i += copy(dAtA[i:], m.Msg)
	}
	if m.Data != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintShieldMng(dAtA, i, uint64(m.Data.Size()))
		n1, err := m.Data.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	return i, nil
}

func (m *ShieldMngIsShieldUserResp_Data) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ShieldMngIsShieldUserResp_Data) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Uid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintShieldMng(dAtA, i, uint64(m.Uid))
	}
	if m.ShieldUid != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintShieldMng(dAtA, i, uint64(m.ShieldUid))
	}
	if m.IsShieldUser {
		dAtA[i] = 0x18
		i++
		if m.IsShieldUser {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func encodeVarintShieldMng(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *ShieldMngIsShieldUserReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Uid != 0 {
		n += 1 + sovShieldMng(uint64(m.Uid))
	}
	if m.ShieldUid != 0 {
		n += 1 + sovShieldMng(uint64(m.ShieldUid))
	}
	return n
}

func (m *ShieldMngIsShieldUserResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovShieldMng(uint64(m.Code))
	}
	l = len(m.Msg)
	if l > 0 {
		n += 1 + l + sovShieldMng(uint64(l))
	}
	if m.Data != nil {
		l = m.Data.Size()
		n += 1 + l + sovShieldMng(uint64(l))
	}
	return n
}

func (m *ShieldMngIsShieldUserResp_Data) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Uid != 0 {
		n += 1 + sovShieldMng(uint64(m.Uid))
	}
	if m.ShieldUid != 0 {
		n += 1 + sovShieldMng(uint64(m.ShieldUid))
	}
	if m.IsShieldUser {
		n += 2
	}
	return n
}

func sovShieldMng(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozShieldMng(x uint64) (n int) {
	return sovShieldMng(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ShieldMngIsShieldUserReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowShieldMng
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ShieldMngIsShieldUserReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ShieldMngIsShieldUserReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShieldMng
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShieldUid", wireType)
			}
			m.ShieldUid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShieldMng
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ShieldUid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipShieldMng(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthShieldMng
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ShieldMngIsShieldUserResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowShieldMng
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ShieldMngIsShieldUserResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ShieldMngIsShieldUserResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShieldMng
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShieldMng
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthShieldMng
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShieldMng
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthShieldMng
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = &ShieldMngIsShieldUserResp_Data{}
			}
			if err := m.Data.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipShieldMng(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthShieldMng
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ShieldMngIsShieldUserResp_Data) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowShieldMng
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Data: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Data: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShieldMng
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShieldUid", wireType)
			}
			m.ShieldUid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShieldMng
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ShieldUid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsShieldUser", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowShieldMng
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsShieldUser = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipShieldMng(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthShieldMng
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipShieldMng(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowShieldMng
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowShieldMng
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowShieldMng
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthShieldMng
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowShieldMng
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipShieldMng(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthShieldMng = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowShieldMng   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("v1/ShieldMng.proto", fileDescriptor_ShieldMng_c683407439c9b594) }

var fileDescriptor_ShieldMng_c683407439c9b594 = []byte{
	// 333 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x2a, 0x33, 0xd4, 0x0f,
	0xce, 0xc8, 0x4c, 0xcd, 0x49, 0xf1, 0xcd, 0x4b, 0xd7, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x12,
	0x4c, 0x4a, 0xcc, 0xcb, 0x4b, 0x4d, 0x89, 0x2f, 0x4e, 0x2d, 0x2a, 0xcb, 0x4c, 0x4e, 0xd5, 0x2b,
	0x33, 0x94, 0xd2, 0x4d, 0xcf, 0x2c, 0xc9, 0x28, 0x4d, 0xd2, 0x4b, 0xce, 0xcf, 0xd5, 0x4f, 0xcf,
	0x4f, 0xcf, 0xd7, 0x07, 0xab, 0x4c, 0x2a, 0x4d, 0x03, 0xf3, 0xc0, 0x1c, 0x30, 0x0b, 0x62, 0x82,
	0x52, 0x0a, 0x97, 0x04, 0xdc, 0x50, 0xcf, 0x62, 0x08, 0x33, 0xb4, 0x38, 0xb5, 0x28, 0x28, 0xb5,
	0x50, 0x48, 0x92, 0x8b, 0xb9, 0x34, 0x33, 0x45, 0x82, 0x51, 0x81, 0x51, 0x83, 0xd9, 0x89, 0xfd,
	0xd5, 0x3d, 0x79, 0x10, 0x37, 0x08, 0x44, 0x08, 0xe9, 0x72, 0x71, 0x15, 0x83, 0xd5, 0xc6, 0x83,
	0x54, 0x30, 0x81, 0x55, 0xf0, 0xbd, 0xba, 0x27, 0x8f, 0x24, 0x1a, 0xc4, 0x09, 0x61, 0x87, 0x66,
	0xa6, 0x28, 0x6d, 0x62, 0xe2, 0x92, 0xc4, 0x61, 0x4d, 0x71, 0x81, 0x90, 0x0c, 0x17, 0x4b, 0x72,
	0x7e, 0x4a, 0x2a, 0xd4, 0x22, 0x8e, 0x57, 0xf7, 0xe4, 0xc1, 0xfc, 0x20, 0x30, 0x09, 0x72, 0x45,
	0x6e, 0x71, 0x3a, 0xd8, 0x0e, 0x4e, 0x88, 0x2b, 0x72, 0x8b, 0xd3, 0x83, 0x40, 0x84, 0x90, 0x3f,
	0x17, 0x4b, 0x4a, 0x62, 0x49, 0xa2, 0x04, 0xb3, 0x02, 0xa3, 0x06, 0xb7, 0x91, 0xa1, 0x1e, 0x46,
	0x68, 0xe8, 0xe1, 0xb4, 0x54, 0xcf, 0x25, 0xb1, 0x24, 0x11, 0x62, 0x17, 0xc8, 0x88, 0x20, 0x30,
	0x29, 0xd5, 0xc5, 0xc8, 0xc5, 0x02, 0x92, 0xa0, 0x9e, 0xd7, 0x85, 0x2c, 0xb8, 0xf8, 0x32, 0x8b,
	0xe3, 0x61, 0x72, 0xc5, 0xa9, 0x45, 0x60, 0xd7, 0x72, 0x38, 0x09, 0xbd, 0xba, 0x27, 0x8f, 0x26,
	0x13, 0xc4, 0x93, 0x89, 0xe4, 0x4a, 0xa3, 0x0a, 0x2e, 0x4e, 0xb8, 0xf3, 0x85, 0xb2, 0xd1, 0x8d,
	0x11, 0xd2, 0x26, 0xde, 0xbb, 0x85, 0x52, 0x3a, 0xa4, 0x84, 0x8d, 0x93, 0xcc, 0x89, 0x47, 0x72,
	0x8c, 0x17, 0x1e, 0xc9, 0x31, 0x3e, 0x78, 0x24, 0xc7, 0x38, 0xe1, 0xb1, 0x1c, 0xc3, 0x85, 0xc7,
	0x72, 0x0c, 0x37, 0x1e, 0xcb, 0x31, 0x44, 0x31, 0x95, 0x19, 0x26, 0xb1, 0x81, 0x53, 0x8e, 0x31,
	0x20, 0x00, 0x00, 0xff, 0xff, 0x0a, 0xf8, 0x63, 0x71, 0x91, 0x02, 0x00, 0x00,
}
