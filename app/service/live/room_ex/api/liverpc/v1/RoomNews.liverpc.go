// Code generated by protoc-gen-liverpc v0.1, DO NOT EDIT.
// source: v1/RoomNews.proto

package v1

import context "context"

import proto "github.com/golang/protobuf/proto"
import "go-common/library/net/rpc/liverpc"

var _ proto.Message // generate to suppress unused imports

// ==================
// RoomNews Interface
// ==================

type RoomNews interface {
	// * 批量获取直播公告
	//
	MultiGet(context.Context, *RoomNewsMultiGetReq) (*RoomNewsMultiGetResp, error)
}

// ========================
// RoomNews Live Rpc Client
// ========================

type roomNewsRpcClient struct {
	client *liverpc.Client
}

// NewRoomNewsRpcClient creates a Rpc client that implements the RoomNews interface.
// It communicates using Rpc and can be configured with a custom HTTPClient.
func NewRoomNewsRpcClient(client *liverpc.Client) RoomNews {
	return &roomNewsRpcClient{
		client: client,
	}
}

func (c *roomNewsRpcClient) MultiGet(ctx context.Context, in *RoomNewsMultiGetReq) (*RoomNewsMultiGetResp, error) {
	out := new(RoomNewsMultiGetResp)
	err := doRpcRequest(ctx, c.client, 1, "RoomNews.multiGet", in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}
