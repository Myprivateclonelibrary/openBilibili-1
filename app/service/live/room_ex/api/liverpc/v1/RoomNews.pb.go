// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: v1/RoomNews.proto

package v1

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type RoomNewsMultiGetReq struct {
	// 房间id组成的数组
	RoomIds []int64 `protobuf:"varint,1,rep,packed,name=room_ids,json=roomIds" json:"room_ids"`
	// 是否需要转码1是0否，默认0
	IsDecoded int64 `protobuf:"varint,2,opt,name=is_decoded,json=isDecoded,proto3" json:"is_decoded"`
}

func (m *RoomNewsMultiGetReq) Reset()         { *m = RoomNewsMultiGetReq{} }
func (m *RoomNewsMultiGetReq) String() string { return proto.CompactTextString(m) }
func (*RoomNewsMultiGetReq) ProtoMessage()    {}
func (*RoomNewsMultiGetReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_RoomNews_fffa54a153257f78, []int{0}
}
func (m *RoomNewsMultiGetReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RoomNewsMultiGetReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RoomNewsMultiGetReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *RoomNewsMultiGetReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RoomNewsMultiGetReq.Merge(dst, src)
}
func (m *RoomNewsMultiGetReq) XXX_Size() int {
	return m.Size()
}
func (m *RoomNewsMultiGetReq) XXX_DiscardUnknown() {
	xxx_messageInfo_RoomNewsMultiGetReq.DiscardUnknown(m)
}

var xxx_messageInfo_RoomNewsMultiGetReq proto.InternalMessageInfo

func (m *RoomNewsMultiGetReq) GetRoomIds() []int64 {
	if m != nil {
		return m.RoomIds
	}
	return nil
}

func (m *RoomNewsMultiGetReq) GetIsDecoded() int64 {
	if m != nil {
		return m.IsDecoded
	}
	return 0
}

type RoomNewsMultiGetResp struct {
	// 返回code
	Code int64 `protobuf:"varint,1,opt,name=code,proto3" json:"code"`
	// 返回msg
	Msg string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg"`
	//
	Data []*RoomNewsMultiGetResp_Data `protobuf:"bytes,3,rep,name=data" json:"data"`
}

func (m *RoomNewsMultiGetResp) Reset()         { *m = RoomNewsMultiGetResp{} }
func (m *RoomNewsMultiGetResp) String() string { return proto.CompactTextString(m) }
func (*RoomNewsMultiGetResp) ProtoMessage()    {}
func (*RoomNewsMultiGetResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_RoomNews_fffa54a153257f78, []int{1}
}
func (m *RoomNewsMultiGetResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RoomNewsMultiGetResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RoomNewsMultiGetResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *RoomNewsMultiGetResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RoomNewsMultiGetResp.Merge(dst, src)
}
func (m *RoomNewsMultiGetResp) XXX_Size() int {
	return m.Size()
}
func (m *RoomNewsMultiGetResp) XXX_DiscardUnknown() {
	xxx_messageInfo_RoomNewsMultiGetResp.DiscardUnknown(m)
}

var xxx_messageInfo_RoomNewsMultiGetResp proto.InternalMessageInfo

func (m *RoomNewsMultiGetResp) GetCode() int64 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *RoomNewsMultiGetResp) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func (m *RoomNewsMultiGetResp) GetData() []*RoomNewsMultiGetResp_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

type RoomNewsMultiGetResp_Data struct {
	// 房间id
	Roomid string `protobuf:"bytes,1,opt,name=roomid,proto3" json:"roomid"`
	// 主播id
	Uid string `protobuf:"bytes,2,opt,name=uid,proto3" json:"uid"`
	// 公告内容
	NewsContent string `protobuf:"bytes,3,opt,name=news_content,json=newsContent,proto3" json:"news_content"`
	// 更新时间
	Ctime string `protobuf:"bytes,4,opt,name=ctime,proto3" json:"ctime"`
}

func (m *RoomNewsMultiGetResp_Data) Reset()         { *m = RoomNewsMultiGetResp_Data{} }
func (m *RoomNewsMultiGetResp_Data) String() string { return proto.CompactTextString(m) }
func (*RoomNewsMultiGetResp_Data) ProtoMessage()    {}
func (*RoomNewsMultiGetResp_Data) Descriptor() ([]byte, []int) {
	return fileDescriptor_RoomNews_fffa54a153257f78, []int{1, 0}
}
func (m *RoomNewsMultiGetResp_Data) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RoomNewsMultiGetResp_Data) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RoomNewsMultiGetResp_Data.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *RoomNewsMultiGetResp_Data) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RoomNewsMultiGetResp_Data.Merge(dst, src)
}
func (m *RoomNewsMultiGetResp_Data) XXX_Size() int {
	return m.Size()
}
func (m *RoomNewsMultiGetResp_Data) XXX_DiscardUnknown() {
	xxx_messageInfo_RoomNewsMultiGetResp_Data.DiscardUnknown(m)
}

var xxx_messageInfo_RoomNewsMultiGetResp_Data proto.InternalMessageInfo

func (m *RoomNewsMultiGetResp_Data) GetRoomid() string {
	if m != nil {
		return m.Roomid
	}
	return ""
}

func (m *RoomNewsMultiGetResp_Data) GetUid() string {
	if m != nil {
		return m.Uid
	}
	return ""
}

func (m *RoomNewsMultiGetResp_Data) GetNewsContent() string {
	if m != nil {
		return m.NewsContent
	}
	return ""
}

func (m *RoomNewsMultiGetResp_Data) GetCtime() string {
	if m != nil {
		return m.Ctime
	}
	return ""
}

func init() {
	proto.RegisterType((*RoomNewsMultiGetReq)(nil), "room_ex.v1.RoomNewsMultiGetReq")
	proto.RegisterType((*RoomNewsMultiGetResp)(nil), "room_ex.v1.RoomNewsMultiGetResp")
	proto.RegisterType((*RoomNewsMultiGetResp_Data)(nil), "room_ex.v1.RoomNewsMultiGetResp.Data")
}
func (m *RoomNewsMultiGetReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RoomNewsMultiGetReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.RoomIds) > 0 {
		dAtA2 := make([]byte, len(m.RoomIds)*10)
		var j1 int
		for _, num1 := range m.RoomIds {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		dAtA[i] = 0xa
		i++
		i = encodeVarintRoomNews(dAtA, i, uint64(j1))
		i += copy(dAtA[i:], dAtA2[:j1])
	}
	if m.IsDecoded != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintRoomNews(dAtA, i, uint64(m.IsDecoded))
	}
	return i, nil
}

func (m *RoomNewsMultiGetResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RoomNewsMultiGetResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintRoomNews(dAtA, i, uint64(m.Code))
	}
	if len(m.Msg) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintRoomNews(dAtA, i, uint64(len(m.Msg)))
		i += copy(dAtA[i:], m.Msg)
	}
	if len(m.Data) > 0 {
		for _, msg := range m.Data {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintRoomNews(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *RoomNewsMultiGetResp_Data) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RoomNewsMultiGetResp_Data) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Roomid) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintRoomNews(dAtA, i, uint64(len(m.Roomid)))
		i += copy(dAtA[i:], m.Roomid)
	}
	if len(m.Uid) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintRoomNews(dAtA, i, uint64(len(m.Uid)))
		i += copy(dAtA[i:], m.Uid)
	}
	if len(m.NewsContent) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintRoomNews(dAtA, i, uint64(len(m.NewsContent)))
		i += copy(dAtA[i:], m.NewsContent)
	}
	if len(m.Ctime) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintRoomNews(dAtA, i, uint64(len(m.Ctime)))
		i += copy(dAtA[i:], m.Ctime)
	}
	return i, nil
}

func encodeVarintRoomNews(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *RoomNewsMultiGetReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.RoomIds) > 0 {
		l = 0
		for _, e := range m.RoomIds {
			l += sovRoomNews(uint64(e))
		}
		n += 1 + sovRoomNews(uint64(l)) + l
	}
	if m.IsDecoded != 0 {
		n += 1 + sovRoomNews(uint64(m.IsDecoded))
	}
	return n
}

func (m *RoomNewsMultiGetResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovRoomNews(uint64(m.Code))
	}
	l = len(m.Msg)
	if l > 0 {
		n += 1 + l + sovRoomNews(uint64(l))
	}
	if len(m.Data) > 0 {
		for _, e := range m.Data {
			l = e.Size()
			n += 1 + l + sovRoomNews(uint64(l))
		}
	}
	return n
}

func (m *RoomNewsMultiGetResp_Data) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Roomid)
	if l > 0 {
		n += 1 + l + sovRoomNews(uint64(l))
	}
	l = len(m.Uid)
	if l > 0 {
		n += 1 + l + sovRoomNews(uint64(l))
	}
	l = len(m.NewsContent)
	if l > 0 {
		n += 1 + l + sovRoomNews(uint64(l))
	}
	l = len(m.Ctime)
	if l > 0 {
		n += 1 + l + sovRoomNews(uint64(l))
	}
	return n
}

func sovRoomNews(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozRoomNews(x uint64) (n int) {
	return sovRoomNews(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *RoomNewsMultiGetReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRoomNews
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RoomNewsMultiGetReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RoomNewsMultiGetReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowRoomNews
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.RoomIds = append(m.RoomIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowRoomNews
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthRoomNews
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.RoomIds) == 0 {
					m.RoomIds = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowRoomNews
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.RoomIds = append(m.RoomIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field RoomIds", wireType)
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsDecoded", wireType)
			}
			m.IsDecoded = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoomNews
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IsDecoded |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRoomNews(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRoomNews
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RoomNewsMultiGetResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRoomNews
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RoomNewsMultiGetResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RoomNewsMultiGetResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoomNews
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoomNews
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRoomNews
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoomNews
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRoomNews
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data, &RoomNewsMultiGetResp_Data{})
			if err := m.Data[len(m.Data)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRoomNews(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRoomNews
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RoomNewsMultiGetResp_Data) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRoomNews
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Data: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Data: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Roomid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoomNews
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRoomNews
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Roomid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoomNews
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRoomNews
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Uid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewsContent", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoomNews
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRoomNews
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NewsContent = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ctime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoomNews
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRoomNews
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ctime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRoomNews(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRoomNews
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipRoomNews(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowRoomNews
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRoomNews
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRoomNews
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthRoomNews
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowRoomNews
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipRoomNews(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthRoomNews = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowRoomNews   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("v1/RoomNews.proto", fileDescriptor_RoomNews_fffa54a153257f78) }

var fileDescriptor_RoomNews_fffa54a153257f78 = []byte{
	// 388 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x52, 0x41, 0x0e, 0xd2, 0x40,
	0x14, 0xa5, 0xb4, 0x42, 0xfb, 0x21, 0x46, 0x47, 0x17, 0x95, 0x90, 0x4e, 0x43, 0x62, 0x64, 0x43,
	0x09, 0x70, 0x83, 0x42, 0x62, 0x5c, 0xe0, 0x62, 0x76, 0xba, 0x21, 0xa5, 0x33, 0xd6, 0x49, 0x2c,
	0x03, 0xcc, 0x14, 0x3c, 0x86, 0x7b, 0x6f, 0xe1, 0x29, 0x5c, 0xb2, 0x74, 0xd5, 0x18, 0xd8, 0xf5,
	0x14, 0x66, 0xa6, 0xa0, 0x18, 0x8d, 0x6e, 0xde, 0xfc, 0xf7, 0xfa, 0xe6, 0xcd, 0xff, 0x3f, 0x85,
	0xc7, 0x87, 0xc9, 0x98, 0x08, 0x91, 0xbf, 0x66, 0x47, 0x19, 0x6d, 0xf7, 0x42, 0x09, 0x04, 0x7b,
	0x21, 0xf2, 0x15, 0xfb, 0x18, 0x1d, 0x26, 0xbd, 0x51, 0xc6, 0xd5, 0xfb, 0x62, 0x1d, 0xa5, 0x22,
	0x1f, 0x67, 0x22, 0x13, 0x63, 0x63, 0x59, 0x17, 0xef, 0x0c, 0x33, 0xc4, 0x54, 0xf5, 0xd5, 0x41,
	0x0e, 0x4f, 0x6e, 0x61, 0xcb, 0xe2, 0x83, 0xe2, 0x2f, 0x99, 0x22, 0x6c, 0x87, 0x5e, 0x80, 0x6b,
	0x32, 0x39, 0x95, 0xbe, 0x15, 0xda, 0x43, 0x3b, 0xee, 0x56, 0x25, 0xfe, 0xa9, 0x91, 0xb6, 0xae,
	0x5e, 0x51, 0x89, 0x46, 0x00, 0x5c, 0xae, 0x28, 0x4b, 0x05, 0x65, 0xd4, 0x6f, 0x86, 0xd6, 0xd0,
	0x8e, 0x1f, 0x56, 0x25, 0xbe, 0x53, 0x89, 0xc7, 0xe5, 0xa2, 0x2e, 0x07, 0x5f, 0x9a, 0xf0, 0xf4,
	0xcf, 0xf7, 0xe4, 0x16, 0xf5, 0xc1, 0xd1, 0x0e, 0xdf, 0x32, 0x09, 0x6e, 0x55, 0x62, 0xc3, 0x89,
	0x41, 0xf4, 0x0c, 0xec, 0x5c, 0x66, 0x26, 0xde, 0x8b, 0xdb, 0x55, 0x89, 0x35, 0x25, 0x1a, 0xd0,
	0x1c, 0x1c, 0x9a, 0xa8, 0xc4, 0xb7, 0x43, 0x7b, 0xd8, 0x99, 0x3e, 0x8f, 0x7e, 0xad, 0x22, 0xfa,
	0xdb, 0x43, 0xd1, 0x22, 0x51, 0x49, 0x9d, 0xaf, 0xaf, 0x11, 0x83, 0xbd, 0xcf, 0x16, 0x38, 0xfa,
	0x03, 0x1a, 0x40, 0x4b, 0x07, 0x70, 0x6a, 0x1a, 0xf1, 0x62, 0xa8, 0x4a, 0x7c, 0x55, 0xc8, 0xf5,
	0xd4, 0xcd, 0x14, 0x9c, 0xde, 0x37, 0x53, 0x70, 0x4a, 0x34, 0xa0, 0x19, 0x74, 0x37, 0xec, 0x28,
	0x57, 0xa9, 0xd8, 0x28, 0xb6, 0x51, 0xbe, 0x6d, 0x3c, 0x8f, 0xaa, 0x12, 0xff, 0xa6, 0x93, 0x8e,
	0x66, 0xf3, 0x9a, 0x20, 0x0c, 0x0f, 0x52, 0xc5, 0x73, 0xe6, 0x3b, 0xc6, 0xed, 0x55, 0x25, 0xae,
	0x05, 0x52, 0x1f, 0xd3, 0x37, 0xe0, 0xde, 0x46, 0x41, 0x4b, 0x70, 0xf3, 0xeb, 0x38, 0x08, 0xff,
	0x7b, 0xd8, 0x5d, 0x2f, 0xfc, 0xdf, 0x36, 0xe2, 0xfe, 0xd7, 0x73, 0x60, 0x9d, 0xce, 0x81, 0xf5,
	0xfd, 0x1c, 0x58, 0x9f, 0x2e, 0x41, 0xe3, 0x74, 0x09, 0x1a, 0xdf, 0x2e, 0x41, 0xe3, 0x6d, 0xf3,
	0x30, 0x59, 0xb7, 0xcc, 0x3f, 0x32, 0xfb, 0x11, 0x00, 0x00, 0xff, 0xff, 0xde, 0x9d, 0xd8, 0x02,
	0x73, 0x02, 0x00, 0x00,
}
