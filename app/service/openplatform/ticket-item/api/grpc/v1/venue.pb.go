// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: app/service/openplatform/ticket-item/api/grpc/v1/venue.proto

package v1

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import context "golang.org/x/net/context"
import grpc "google.golang.org/grpc"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// The response message containing the VenueInfo
type VenueInfo struct {
	ID        int64          `protobuf:"varint,1,opt,name=id,proto3" json:"id"`
	Name      string         `protobuf:"bytes,2,opt,name=name,proto3" json:"name"`
	Status    int32          `protobuf:"varint,3,opt,name=status,proto3" json:"status"`
	AddrInfo  *VenueAddrInfo `protobuf:"bytes,4,opt,name=addrInfo" json:"addr"`
	PlaceInfo *PlaceInfo     `protobuf:"bytes,5,opt,name=place_info,json=placeInfo" json:"place"`
}

func (m *VenueInfo) Reset()                    { *m = VenueInfo{} }
func (m *VenueInfo) String() string            { return proto.CompactTextString(m) }
func (*VenueInfo) ProtoMessage()               {}
func (*VenueInfo) Descriptor() ([]byte, []int) { return fileDescriptorVenue, []int{0} }

// The response message containing the Venue location info
type VenueAddrInfo struct {
	Province      int64  `protobuf:"varint,1,opt,name=province,proto3" json:"provid"`
	City          int64  `protobuf:"varint,2,opt,name=city,proto3" json:"cityid"`
	District      int64  `protobuf:"varint,3,opt,name=district,proto3" json:"distid"`
	AddressDetail string `protobuf:"bytes,4,opt,name=addressDetail,proto3" json:"addr"`
	Traffic       string `protobuf:"bytes,5,opt,name=traffic,proto3" json:"traff"`
	LonLatType    string `protobuf:"bytes,6,opt,name=lon_lat_type,json=lonLatType,proto3" json:"lonlat_type"`
	LonLat        string `protobuf:"bytes,7,opt,name=lonLat,proto3" json:"lonlat"`
}

func (m *VenueAddrInfo) Reset()                    { *m = VenueAddrInfo{} }
func (m *VenueAddrInfo) String() string            { return proto.CompactTextString(m) }
func (*VenueAddrInfo) ProtoMessage()               {}
func (*VenueAddrInfo) Descriptor() ([]byte, []int) { return fileDescriptorVenue, []int{1} }

// venueInfo接口请求
type VenueInfoRequest struct {
	// 待修改场馆的ID（为0表示创建）
	ID int64 `protobuf:"varint,1,opt,name=ID,proto3" json:"id" validate:"min=0"`
	// 场馆名
	Name string `protobuf:"bytes,2,opt,name=Name,proto3" json:"name" validate:"max=25"`
	// 状态 1-启用 0-停用
	Status int32 `protobuf:"varint,3,opt,name=Status,proto3" json:"status" validate:"min=0,max=1"`
	// 省份ID
	Province int64 `protobuf:"varint,4,opt,name=Province,proto3" json:"provid" validate:"min=0"`
	// 城市ID
	City int64 `protobuf:"varint,5,opt,name=City,proto3" json:"cityid" validate:"min=0"`
	// 区县ID
	District int64 `protobuf:"varint,6,opt,name=District,proto3" json:"distid" validate:"min=0"`
	// 详细地址
	AddressDetail string `protobuf:"bytes,7,opt,name=AddressDetail,proto3" json:"addr" validate:"min=0,max=60"`
	// 交通信息
	Traffic string `protobuf:"bytes,8,opt,name=Traffic,proto3" json:"traff" validate:"min=0,max=100"`
}

func (m *VenueInfoRequest) Reset()                    { *m = VenueInfoRequest{} }
func (m *VenueInfoRequest) String() string            { return proto.CompactTextString(m) }
func (*VenueInfoRequest) ProtoMessage()               {}
func (*VenueInfoRequest) Descriptor() ([]byte, []int) { return fileDescriptorVenue, []int{2} }

// venue接口返回
type VenueInfoReply struct {
	// 操作结果
	Success bool `protobuf:"varint,1,opt,name=Success,proto3" json:"success"`
	// 操作场馆ID
	ID int64 `protobuf:"varint,2,opt,name=ID,proto3" json:"id"`
}

func (m *VenueInfoReply) Reset()                    { *m = VenueInfoReply{} }
func (m *VenueInfoReply) String() string            { return proto.CompactTextString(m) }
func (*VenueInfoReply) ProtoMessage()               {}
func (*VenueInfoReply) Descriptor() ([]byte, []int) { return fileDescriptorVenue, []int{3} }

func init() {
	proto.RegisterType((*VenueInfo)(nil), "ticket.service.item.v1.VenueInfo")
	proto.RegisterType((*VenueAddrInfo)(nil), "ticket.service.item.v1.VenueAddrInfo")
	proto.RegisterType((*VenueInfoRequest)(nil), "ticket.service.item.v1.VenueInfoRequest")
	proto.RegisterType((*VenueInfoReply)(nil), "ticket.service.item.v1.VenueInfoReply")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Venue service

type VenueClient interface {
	VenueInfo(ctx context.Context, in *VenueInfoRequest, opts ...grpc.CallOption) (*VenueInfoReply, error)
}

type venueClient struct {
	cc *grpc.ClientConn
}

func NewVenueClient(cc *grpc.ClientConn) VenueClient {
	return &venueClient{cc}
}

func (c *venueClient) VenueInfo(ctx context.Context, in *VenueInfoRequest, opts ...grpc.CallOption) (*VenueInfoReply, error) {
	out := new(VenueInfoReply)
	err := grpc.Invoke(ctx, "/ticket.service.item.v1.Venue/VenueInfo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Venue service

type VenueServer interface {
	VenueInfo(context.Context, *VenueInfoRequest) (*VenueInfoReply, error)
}

func RegisterVenueServer(s *grpc.Server, srv VenueServer) {
	s.RegisterService(&_Venue_serviceDesc, srv)
}

func _Venue_VenueInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VenueInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VenueServer).VenueInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ticket.service.item.v1.Venue/VenueInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VenueServer).VenueInfo(ctx, req.(*VenueInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Venue_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ticket.service.item.v1.Venue",
	HandlerType: (*VenueServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "VenueInfo",
			Handler:    _Venue_VenueInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "app/service/openplatform/ticket-item/api/grpc/v1/venue.proto",
}

func (m *VenueInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VenueInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintVenue(dAtA, i, uint64(m.ID))
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintVenue(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if m.Status != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintVenue(dAtA, i, uint64(m.Status))
	}
	if m.AddrInfo != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintVenue(dAtA, i, uint64(m.AddrInfo.Size()))
		n1, err := m.AddrInfo.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.PlaceInfo != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintVenue(dAtA, i, uint64(m.PlaceInfo.Size()))
		n2, err := m.PlaceInfo.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	return i, nil
}

func (m *VenueAddrInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VenueAddrInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Province != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintVenue(dAtA, i, uint64(m.Province))
	}
	if m.City != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintVenue(dAtA, i, uint64(m.City))
	}
	if m.District != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintVenue(dAtA, i, uint64(m.District))
	}
	if len(m.AddressDetail) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintVenue(dAtA, i, uint64(len(m.AddressDetail)))
		i += copy(dAtA[i:], m.AddressDetail)
	}
	if len(m.Traffic) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintVenue(dAtA, i, uint64(len(m.Traffic)))
		i += copy(dAtA[i:], m.Traffic)
	}
	if len(m.LonLatType) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintVenue(dAtA, i, uint64(len(m.LonLatType)))
		i += copy(dAtA[i:], m.LonLatType)
	}
	if len(m.LonLat) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintVenue(dAtA, i, uint64(len(m.LonLat)))
		i += copy(dAtA[i:], m.LonLat)
	}
	return i, nil
}

func (m *VenueInfoRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VenueInfoRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintVenue(dAtA, i, uint64(m.ID))
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintVenue(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if m.Status != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintVenue(dAtA, i, uint64(m.Status))
	}
	if m.Province != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintVenue(dAtA, i, uint64(m.Province))
	}
	if m.City != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintVenue(dAtA, i, uint64(m.City))
	}
	if m.District != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintVenue(dAtA, i, uint64(m.District))
	}
	if len(m.AddressDetail) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintVenue(dAtA, i, uint64(len(m.AddressDetail)))
		i += copy(dAtA[i:], m.AddressDetail)
	}
	if len(m.Traffic) > 0 {
		dAtA[i] = 0x42
		i++
		i = encodeVarintVenue(dAtA, i, uint64(len(m.Traffic)))
		i += copy(dAtA[i:], m.Traffic)
	}
	return i, nil
}

func (m *VenueInfoReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VenueInfoReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Success {
		dAtA[i] = 0x8
		i++
		if m.Success {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.ID != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintVenue(dAtA, i, uint64(m.ID))
	}
	return i, nil
}

func encodeVarintVenue(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *VenueInfo) Size() (n int) {
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovVenue(uint64(m.ID))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovVenue(uint64(l))
	}
	if m.Status != 0 {
		n += 1 + sovVenue(uint64(m.Status))
	}
	if m.AddrInfo != nil {
		l = m.AddrInfo.Size()
		n += 1 + l + sovVenue(uint64(l))
	}
	if m.PlaceInfo != nil {
		l = m.PlaceInfo.Size()
		n += 1 + l + sovVenue(uint64(l))
	}
	return n
}

func (m *VenueAddrInfo) Size() (n int) {
	var l int
	_ = l
	if m.Province != 0 {
		n += 1 + sovVenue(uint64(m.Province))
	}
	if m.City != 0 {
		n += 1 + sovVenue(uint64(m.City))
	}
	if m.District != 0 {
		n += 1 + sovVenue(uint64(m.District))
	}
	l = len(m.AddressDetail)
	if l > 0 {
		n += 1 + l + sovVenue(uint64(l))
	}
	l = len(m.Traffic)
	if l > 0 {
		n += 1 + l + sovVenue(uint64(l))
	}
	l = len(m.LonLatType)
	if l > 0 {
		n += 1 + l + sovVenue(uint64(l))
	}
	l = len(m.LonLat)
	if l > 0 {
		n += 1 + l + sovVenue(uint64(l))
	}
	return n
}

func (m *VenueInfoRequest) Size() (n int) {
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovVenue(uint64(m.ID))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovVenue(uint64(l))
	}
	if m.Status != 0 {
		n += 1 + sovVenue(uint64(m.Status))
	}
	if m.Province != 0 {
		n += 1 + sovVenue(uint64(m.Province))
	}
	if m.City != 0 {
		n += 1 + sovVenue(uint64(m.City))
	}
	if m.District != 0 {
		n += 1 + sovVenue(uint64(m.District))
	}
	l = len(m.AddressDetail)
	if l > 0 {
		n += 1 + l + sovVenue(uint64(l))
	}
	l = len(m.Traffic)
	if l > 0 {
		n += 1 + l + sovVenue(uint64(l))
	}
	return n
}

func (m *VenueInfoReply) Size() (n int) {
	var l int
	_ = l
	if m.Success {
		n += 2
	}
	if m.ID != 0 {
		n += 1 + sovVenue(uint64(m.ID))
	}
	return n
}

func sovVenue(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozVenue(x uint64) (n int) {
	return sovVenue(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *VenueInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVenue
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VenueInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VenueInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVenue
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVenue
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVenue
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVenue
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddrInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVenue
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVenue
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AddrInfo == nil {
				m.AddrInfo = &VenueAddrInfo{}
			}
			if err := m.AddrInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlaceInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVenue
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVenue
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PlaceInfo == nil {
				m.PlaceInfo = &PlaceInfo{}
			}
			if err := m.PlaceInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVenue(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVenue
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VenueAddrInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVenue
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VenueAddrInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VenueAddrInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Province", wireType)
			}
			m.Province = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVenue
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Province |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field City", wireType)
			}
			m.City = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVenue
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.City |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field District", wireType)
			}
			m.District = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVenue
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.District |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddressDetail", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVenue
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVenue
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AddressDetail = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Traffic", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVenue
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVenue
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Traffic = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LonLatType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVenue
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVenue
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LonLatType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LonLat", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVenue
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVenue
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LonLat = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVenue(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVenue
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VenueInfoRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVenue
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VenueInfoRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VenueInfoRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVenue
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVenue
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVenue
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVenue
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Province", wireType)
			}
			m.Province = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVenue
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Province |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field City", wireType)
			}
			m.City = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVenue
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.City |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field District", wireType)
			}
			m.District = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVenue
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.District |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddressDetail", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVenue
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVenue
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AddressDetail = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Traffic", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVenue
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVenue
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Traffic = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVenue(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVenue
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VenueInfoReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVenue
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VenueInfoReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VenueInfoReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Success", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVenue
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Success = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVenue
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipVenue(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVenue
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipVenue(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowVenue
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowVenue
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowVenue
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthVenue
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowVenue
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipVenue(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthVenue = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowVenue   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("app/service/openplatform/ticket-item/api/grpc/v1/venue.proto", fileDescriptorVenue)
}

var fileDescriptorVenue = []byte{
	// 724 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x54, 0xcd, 0x6e, 0xd3, 0x4a,
	0x14, 0xae, 0xdd, 0xfc, 0x4e, 0xdb, 0x7b, 0x7b, 0x67, 0xd1, 0x6b, 0x45, 0x25, 0x0e, 0x2e, 0xad,
	0x22, 0x44, 0xed, 0x24, 0x08, 0x16, 0x55, 0x2b, 0xd4, 0x90, 0x4d, 0x54, 0x04, 0xd5, 0xb4, 0x62,
	0xc1, 0x26, 0x72, 0xed, 0x49, 0x3a, 0xc2, 0xb1, 0x8d, 0x3d, 0xb1, 0xc8, 0x03, 0xf0, 0x34, 0xbc,
	0x48, 0x97, 0x7d, 0x02, 0x8b, 0x66, 0x83, 0x94, 0x65, 0x9e, 0x00, 0xcd, 0xb1, 0x9d, 0x1f, 0x14,
	0x10, 0x6c, 0x92, 0x9c, 0x73, 0xbe, 0xf3, 0x9d, 0xbf, 0x2f, 0x83, 0x4e, 0x4d, 0xdf, 0x37, 0x42,
	0x1a, 0x44, 0xcc, 0xa2, 0x86, 0xe7, 0x53, 0xd7, 0x77, 0x4c, 0xde, 0xf7, 0x82, 0xa1, 0xc1, 0x99,
	0xf5, 0x91, 0xf2, 0x63, 0xc6, 0xe9, 0xd0, 0x30, 0x7d, 0x66, 0x0c, 0x02, 0xdf, 0x32, 0xa2, 0xa6,
	0x11, 0x51, 0x77, 0x44, 0x75, 0x3f, 0xf0, 0xb8, 0x87, 0xf7, 0x12, 0x90, 0x9e, 0x12, 0xe8, 0x02,
	0xac, 0x47, 0xcd, 0xca, 0xf1, 0x80, 0xf1, 0xdb, 0xd1, 0x8d, 0x6e, 0x79, 0x43, 0x63, 0xe0, 0x0d,
	0x3c, 0x03, 0xe0, 0x37, 0xa3, 0x3e, 0x58, 0x60, 0xc0, 0xaf, 0x84, 0xa6, 0xf2, 0xf7, 0x4d, 0xf8,
	0x8e, 0x69, 0xa5, 0x4d, 0x68, 0x5f, 0x64, 0x54, 0x7e, 0x2f, 0x9a, 0xea, 0xba, 0x7d, 0x0f, 0xef,
	0x23, 0x99, 0xd9, 0x8a, 0x54, 0x93, 0xea, 0x9b, 0xed, 0xed, 0x49, 0xac, 0xca, 0xdd, 0xce, 0x34,
	0x56, 0x65, 0x66, 0x13, 0x99, 0xd9, 0x78, 0x1f, 0xe5, 0x5c, 0x73, 0x48, 0x15, 0xb9, 0x26, 0xd5,
	0xcb, 0xed, 0xd2, 0x34, 0x56, 0xc1, 0x26, 0xf0, 0x89, 0x35, 0x54, 0x08, 0xb9, 0xc9, 0x47, 0xa1,
	0xb2, 0x59, 0x93, 0xea, 0xf9, 0x36, 0x9a, 0xc6, 0x6a, 0xea, 0x21, 0xe9, 0x37, 0xbe, 0x40, 0x25,
	0xd3, 0xb6, 0x03, 0x51, 0x4b, 0xc9, 0xd5, 0xa4, 0xfa, 0x56, 0xeb, 0x50, 0x5f, 0xbf, 0x05, 0x1d,
	0x9a, 0x3a, 0x4f, 0xc1, 0x49, 0x31, 0x91, 0x4a, 0xe6, 0x04, 0xf8, 0x02, 0x21, 0x98, 0xa4, 0xc7,
	0x04, 0x5d, 0x1e, 0xe8, 0x1e, 0xff, 0x8a, 0xee, 0x52, 0x20, 0x81, 0xaa, 0x3c, 0x8d, 0xd5, 0x3c,
	0x24, 0x92, 0xb2, 0x9f, 0x79, 0xb5, 0xaf, 0x32, 0xda, 0x59, 0x29, 0x89, 0x8f, 0x50, 0xc9, 0x0f,
	0xbc, 0x88, 0xb9, 0x16, 0x4d, 0x37, 0x02, 0x13, 0x81, 0xcf, 0x26, 0xf3, 0x18, 0xae, 0xa2, 0x9c,
	0xc5, 0xf8, 0x18, 0xb6, 0x92, 0x62, 0x84, 0xcd, 0x6c, 0x02, 0x7e, 0xc1, 0x63, 0xb3, 0x90, 0x07,
	0xcc, 0xe2, 0xb0, 0x99, 0x14, 0x23, 0x7c, 0x82, 0x27, 0x8b, 0x61, 0x1d, 0xed, 0x88, 0xd1, 0x68,
	0x18, 0x76, 0x28, 0x37, 0x99, 0x03, 0x0b, 0x2a, 0x2f, 0x4d, 0xbe, 0x1a, 0xc6, 0x07, 0xa8, 0xc8,
	0x03, 0xb3, 0xdf, 0x67, 0x16, 0xcc, 0x5e, 0x4e, 0x06, 0x03, 0x17, 0xc9, 0x22, 0xb8, 0x89, 0xb6,
	0x1d, 0xcf, 0xed, 0x39, 0x26, 0xef, 0xf1, 0xb1, 0x4f, 0x95, 0x02, 0x20, 0xff, 0x9d, 0xc6, 0xea,
	0x96, 0xe3, 0xb9, 0x99, 0x9b, 0x20, 0xc7, 0x73, 0xdf, 0x98, 0xfc, 0x7a, 0xec, 0xc3, 0x1d, 0x13,
	0x4b, 0x29, 0x02, 0x18, 0xba, 0x4d, 0xc0, 0x24, 0x8d, 0x68, 0xdf, 0x37, 0xd1, 0xee, 0x5c, 0x35,
	0x84, 0x7e, 0x1a, 0xd1, 0x90, 0xe3, 0xa7, 0x48, 0xee, 0x76, 0xd2, 0x55, 0x55, 0x12, 0xd9, 0xcc,
	0x62, 0x75, 0x37, 0x32, 0x1d, 0x66, 0x9b, 0x9c, 0x9e, 0x68, 0x43, 0xe6, 0x9e, 0x35, 0x34, 0x22,
	0x77, 0x3b, 0xb8, 0x89, 0x72, 0x6f, 0x17, 0x52, 0x7a, 0x94, 0x49, 0x69, 0x16, 0xab, 0xff, 0x2d,
	0xe1, 0xcd, 0xcf, 0x67, 0xad, 0x17, 0x1a, 0x01, 0x28, 0x3e, 0x45, 0x85, 0xab, 0x65, 0x7d, 0x3d,
	0x59, 0xe8, 0x6b, 0x16, 0xab, 0x7b, 0x3f, 0x95, 0x79, 0x26, 0x92, 0x9b, 0x1a, 0x49, 0x73, 0xf0,
	0x09, 0x2a, 0x5d, 0x66, 0xd7, 0xcc, 0x41, 0x8b, 0xd5, 0xc5, 0x35, 0xd7, 0xb6, 0x39, 0xc7, 0xe3,
	0x16, 0xca, 0xbd, 0x16, 0x17, 0xce, 0x2f, 0xf2, 0x92, 0x0b, 0xaf, 0xcd, 0x03, 0xac, 0xa8, 0xd7,
	0xc9, 0xae, 0x5e, 0x58, 0xe4, 0x25, 0x57, 0x5f, 0x5f, 0x2f, 0xc3, 0xe3, 0x2e, 0xda, 0x39, 0x5f,
	0x51, 0x42, 0x72, 0x88, 0x83, 0x4c, 0x09, 0xb3, 0x58, 0xfd, 0x7f, 0xdd, 0xb8, 0x2f, 0x1b, 0x1a,
	0x59, 0xcd, 0xc4, 0xaf, 0x50, 0xf1, 0x3a, 0x15, 0x49, 0x09, 0x48, 0x0e, 0xe7, 0x22, 0x99, 0xc5,
	0xaa, 0xb2, 0x76, 0x69, 0x8d, 0x86, 0x46, 0xb2, 0x2c, 0xed, 0x1d, 0xfa, 0x67, 0xe9, 0xd0, 0xbe,
	0x33, 0xc6, 0x87, 0xa8, 0x78, 0x35, 0xb2, 0x2c, 0x1a, 0x86, 0x70, 0xeb, 0x52, 0x7b, 0x6b, 0x1a,
	0xab, 0xc5, 0x30, 0x71, 0x91, 0x2c, 0x86, 0xf7, 0x40, 0x0d, 0xc9, 0x9f, 0xa2, 0x90, 0x3d, 0x22,
	0xdd, 0x4e, 0xeb, 0x16, 0xe5, 0x81, 0x10, 0xf7, 0x96, 0x1f, 0x9e, 0xfa, 0x6f, 0x9f, 0x81, 0x25,
	0x95, 0x55, 0x8e, 0xfe, 0x00, 0xe9, 0x3b, 0x63, 0x6d, 0xa3, 0xad, 0xdc, 0x3d, 0x54, 0x37, 0xee,
	0x1f, 0xaa, 0x1b, 0x77, 0x93, 0xaa, 0x74, 0x3f, 0xa9, 0x4a, 0xdf, 0x26, 0x55, 0xe9, 0x83, 0x1c,
	0x35, 0x6f, 0x0a, 0xf0, 0xf6, 0x3d, 0xff, 0x11, 0x00, 0x00, 0xff, 0xff, 0x98, 0xa3, 0xd3, 0x93,
	0xc0, 0x05, 0x00, 0x00,
}
