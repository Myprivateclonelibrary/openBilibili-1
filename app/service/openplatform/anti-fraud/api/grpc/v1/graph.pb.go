// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: app/service/openplatform/anti-fraud/api/grpc/v1/graph.proto

package v1

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import strings "strings"
import reflect "reflect"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type GraphPrepareRequest struct {
	MID                  int64    `protobuf:"varint,1,opt,name=mid,proto3" json:"mid" form:"mid" validate:"required"`
	IP                   string   `protobuf:"bytes,2,opt,name=ip,proto3" json:"ip" form:"ip" validate:"required"`
	Customer             int64    `protobuf:"varint,3,opt,name=customer,proto3" json:"customer" form:"customer" validate:"required"`
	ItemID               int64    `protobuf:"varint,4,opt,name=item_id,json=itemId,proto3" json:"item_id" form:"item_id" validate:"required"`
	ClientType           string   `protobuf:"bytes,5,opt,name=client_type,json=clientType,proto3" json:"client_type" form:"client_type" validate:"required"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GraphPrepareRequest) Reset()      { *m = GraphPrepareRequest{} }
func (*GraphPrepareRequest) ProtoMessage() {}
func (*GraphPrepareRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_graph_68b3f0bc01c1e456, []int{0}
}
func (m *GraphPrepareRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GraphPrepareRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GraphPrepareRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *GraphPrepareRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GraphPrepareRequest.Merge(dst, src)
}
func (m *GraphPrepareRequest) XXX_Size() int {
	return m.Size()
}
func (m *GraphPrepareRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GraphPrepareRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GraphPrepareRequest proto.InternalMessageInfo

type GraphPrepareResponse struct {
	Success              int64    `protobuf:"varint,1,opt,name=success,proto3" json:"success"`
	CaptchaID            string   `protobuf:"bytes,2,opt,name=captcha_id,json=captchaId,proto3" json:"captcha_id"`
	Challenge            string   `protobuf:"bytes,3,opt,name=challenge,proto3" json:"challenge"`
	NewCaptcha           int64    `protobuf:"varint,4,opt,name=new_captcha,json=newCaptcha,proto3" json:"new_captcha"`
	Voucher              string   `protobuf:"bytes,5,opt,name=voucher,proto3" json:"voucher"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GraphPrepareResponse) Reset()      { *m = GraphPrepareResponse{} }
func (*GraphPrepareResponse) ProtoMessage() {}
func (*GraphPrepareResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_graph_68b3f0bc01c1e456, []int{1}
}
func (m *GraphPrepareResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GraphPrepareResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GraphPrepareResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *GraphPrepareResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GraphPrepareResponse.Merge(dst, src)
}
func (m *GraphPrepareResponse) XXX_Size() int {
	return m.Size()
}
func (m *GraphPrepareResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GraphPrepareResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GraphPrepareResponse proto.InternalMessageInfo

type GraphCheckRequest struct {
	MID                  int64    `protobuf:"varint,1,opt,name=mid,proto3" json:"mid" form:"mid" validate:"required"`
	IP                   string   `protobuf:"bytes,2,opt,name=ip,proto3" json:"ip" form:"ip" validate:"required"`
	Customer             int64    `protobuf:"varint,3,opt,name=customer,proto3" json:"customer" form:"customer" validate:"required"`
	ItemID               int64    `protobuf:"varint,4,opt,name=item_id,json=itemId,proto3" json:"item_id" form:"item_id" validate:"required"`
	Voucher              string   `protobuf:"bytes,5,opt,name=voucher,proto3" json:"voucher" form:"voucher" validate:"required"`
	Challenge            string   `protobuf:"bytes,6,opt,name=challenge,proto3" json:"challenge" form:"challenge" validate:"required"`
	Validate             string   `protobuf:"bytes,7,opt,name=validate,proto3" json:"validate" form:"validate" validate:"required"`
	Seccode              string   `protobuf:"bytes,8,opt,name=seccode,proto3" json:"seccode" form:"seccode" validate:"required"`
	ClientType           string   `protobuf:"bytes,9,opt,name=client_type,json=clientType,proto3" json:"client_type" form:"client_type" validate:"required"`
	Success              int64    `protobuf:"varint,10,opt,name=success,proto3" json:"success" form:"success" validate:"required"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GraphCheckRequest) Reset()      { *m = GraphCheckRequest{} }
func (*GraphCheckRequest) ProtoMessage() {}
func (*GraphCheckRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_graph_68b3f0bc01c1e456, []int{2}
}
func (m *GraphCheckRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GraphCheckRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GraphCheckRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *GraphCheckRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GraphCheckRequest.Merge(dst, src)
}
func (m *GraphCheckRequest) XXX_Size() int {
	return m.Size()
}
func (m *GraphCheckRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GraphCheckRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GraphCheckRequest proto.InternalMessageInfo

type GraphCheckResponse struct {
	NewVoucher           string   `protobuf:"bytes,1,opt,name=new_voucher,json=newVoucher,proto3" json:"new_voucher"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GraphCheckResponse) Reset()      { *m = GraphCheckResponse{} }
func (*GraphCheckResponse) ProtoMessage() {}
func (*GraphCheckResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_graph_68b3f0bc01c1e456, []int{3}
}
func (m *GraphCheckResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GraphCheckResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GraphCheckResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *GraphCheckResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GraphCheckResponse.Merge(dst, src)
}
func (m *GraphCheckResponse) XXX_Size() int {
	return m.Size()
}
func (m *GraphCheckResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GraphCheckResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GraphCheckResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*GraphPrepareRequest)(nil), "open.service.antifraud.v1.GraphPrepareRequest")
	proto.RegisterType((*GraphPrepareResponse)(nil), "open.service.antifraud.v1.GraphPrepareResponse")
	proto.RegisterType((*GraphCheckRequest)(nil), "open.service.antifraud.v1.GraphCheckRequest")
	proto.RegisterType((*GraphCheckResponse)(nil), "open.service.antifraud.v1.GraphCheckResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// GraphClient is the client API for Graph service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type GraphClient interface {
	// 拉起极验
	GraphPrepare(ctx context.Context, in *GraphPrepareRequest, opts ...grpc.CallOption) (*GraphPrepareResponse, error)
	// 极验验证
	GraphCheck(ctx context.Context, in *GraphCheckRequest, opts ...grpc.CallOption) (*GraphCheckResponse, error)
}

type graphClient struct {
	cc *grpc.ClientConn
}

func NewGraphClient(cc *grpc.ClientConn) GraphClient {
	return &graphClient{cc}
}

func (c *graphClient) GraphPrepare(ctx context.Context, in *GraphPrepareRequest, opts ...grpc.CallOption) (*GraphPrepareResponse, error) {
	out := new(GraphPrepareResponse)
	err := c.cc.Invoke(ctx, "/open.service.antifraud.v1.Graph/GraphPrepare", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *graphClient) GraphCheck(ctx context.Context, in *GraphCheckRequest, opts ...grpc.CallOption) (*GraphCheckResponse, error) {
	out := new(GraphCheckResponse)
	err := c.cc.Invoke(ctx, "/open.service.antifraud.v1.Graph/GraphCheck", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GraphServer is the server API for Graph service.
type GraphServer interface {
	// 拉起极验
	GraphPrepare(context.Context, *GraphPrepareRequest) (*GraphPrepareResponse, error)
	// 极验验证
	GraphCheck(context.Context, *GraphCheckRequest) (*GraphCheckResponse, error)
}

func RegisterGraphServer(s *grpc.Server, srv GraphServer) {
	s.RegisterService(&_Graph_serviceDesc, srv)
}

func _Graph_GraphPrepare_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GraphPrepareRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GraphServer).GraphPrepare(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/open.service.antifraud.v1.Graph/GraphPrepare",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GraphServer).GraphPrepare(ctx, req.(*GraphPrepareRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Graph_GraphCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GraphCheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GraphServer).GraphCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/open.service.antifraud.v1.Graph/GraphCheck",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GraphServer).GraphCheck(ctx, req.(*GraphCheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Graph_serviceDesc = grpc.ServiceDesc{
	ServiceName: "open.service.antifraud.v1.Graph",
	HandlerType: (*GraphServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GraphPrepare",
			Handler:    _Graph_GraphPrepare_Handler,
		},
		{
			MethodName: "GraphCheck",
			Handler:    _Graph_GraphCheck_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "app/service/openplatform/anti-fraud/api/grpc/v1/graph.proto",
}

func (m *GraphPrepareRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GraphPrepareRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.MID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGraph(dAtA, i, uint64(m.MID))
	}
	if len(m.IP) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintGraph(dAtA, i, uint64(len(m.IP)))
		i += copy(dAtA[i:], m.IP)
	}
	if m.Customer != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintGraph(dAtA, i, uint64(m.Customer))
	}
	if m.ItemID != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintGraph(dAtA, i, uint64(m.ItemID))
	}
	if len(m.ClientType) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintGraph(dAtA, i, uint64(len(m.ClientType)))
		i += copy(dAtA[i:], m.ClientType)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GraphPrepareResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GraphPrepareResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Success != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGraph(dAtA, i, uint64(m.Success))
	}
	if len(m.CaptchaID) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintGraph(dAtA, i, uint64(len(m.CaptchaID)))
		i += copy(dAtA[i:], m.CaptchaID)
	}
	if len(m.Challenge) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintGraph(dAtA, i, uint64(len(m.Challenge)))
		i += copy(dAtA[i:], m.Challenge)
	}
	if m.NewCaptcha != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintGraph(dAtA, i, uint64(m.NewCaptcha))
	}
	if len(m.Voucher) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintGraph(dAtA, i, uint64(len(m.Voucher)))
		i += copy(dAtA[i:], m.Voucher)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GraphCheckRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GraphCheckRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.MID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGraph(dAtA, i, uint64(m.MID))
	}
	if len(m.IP) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintGraph(dAtA, i, uint64(len(m.IP)))
		i += copy(dAtA[i:], m.IP)
	}
	if m.Customer != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintGraph(dAtA, i, uint64(m.Customer))
	}
	if m.ItemID != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintGraph(dAtA, i, uint64(m.ItemID))
	}
	if len(m.Voucher) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintGraph(dAtA, i, uint64(len(m.Voucher)))
		i += copy(dAtA[i:], m.Voucher)
	}
	if len(m.Challenge) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintGraph(dAtA, i, uint64(len(m.Challenge)))
		i += copy(dAtA[i:], m.Challenge)
	}
	if len(m.Validate) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintGraph(dAtA, i, uint64(len(m.Validate)))
		i += copy(dAtA[i:], m.Validate)
	}
	if len(m.Seccode) > 0 {
		dAtA[i] = 0x42
		i++
		i = encodeVarintGraph(dAtA, i, uint64(len(m.Seccode)))
		i += copy(dAtA[i:], m.Seccode)
	}
	if len(m.ClientType) > 0 {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintGraph(dAtA, i, uint64(len(m.ClientType)))
		i += copy(dAtA[i:], m.ClientType)
	}
	if m.Success != 0 {
		dAtA[i] = 0x50
		i++
		i = encodeVarintGraph(dAtA, i, uint64(m.Success))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GraphCheckResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GraphCheckResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.NewVoucher) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintGraph(dAtA, i, uint64(len(m.NewVoucher)))
		i += copy(dAtA[i:], m.NewVoucher)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintGraph(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *GraphPrepareRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MID != 0 {
		n += 1 + sovGraph(uint64(m.MID))
	}
	l = len(m.IP)
	if l > 0 {
		n += 1 + l + sovGraph(uint64(l))
	}
	if m.Customer != 0 {
		n += 1 + sovGraph(uint64(m.Customer))
	}
	if m.ItemID != 0 {
		n += 1 + sovGraph(uint64(m.ItemID))
	}
	l = len(m.ClientType)
	if l > 0 {
		n += 1 + l + sovGraph(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GraphPrepareResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Success != 0 {
		n += 1 + sovGraph(uint64(m.Success))
	}
	l = len(m.CaptchaID)
	if l > 0 {
		n += 1 + l + sovGraph(uint64(l))
	}
	l = len(m.Challenge)
	if l > 0 {
		n += 1 + l + sovGraph(uint64(l))
	}
	if m.NewCaptcha != 0 {
		n += 1 + sovGraph(uint64(m.NewCaptcha))
	}
	l = len(m.Voucher)
	if l > 0 {
		n += 1 + l + sovGraph(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GraphCheckRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MID != 0 {
		n += 1 + sovGraph(uint64(m.MID))
	}
	l = len(m.IP)
	if l > 0 {
		n += 1 + l + sovGraph(uint64(l))
	}
	if m.Customer != 0 {
		n += 1 + sovGraph(uint64(m.Customer))
	}
	if m.ItemID != 0 {
		n += 1 + sovGraph(uint64(m.ItemID))
	}
	l = len(m.Voucher)
	if l > 0 {
		n += 1 + l + sovGraph(uint64(l))
	}
	l = len(m.Challenge)
	if l > 0 {
		n += 1 + l + sovGraph(uint64(l))
	}
	l = len(m.Validate)
	if l > 0 {
		n += 1 + l + sovGraph(uint64(l))
	}
	l = len(m.Seccode)
	if l > 0 {
		n += 1 + l + sovGraph(uint64(l))
	}
	l = len(m.ClientType)
	if l > 0 {
		n += 1 + l + sovGraph(uint64(l))
	}
	if m.Success != 0 {
		n += 1 + sovGraph(uint64(m.Success))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GraphCheckResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.NewVoucher)
	if l > 0 {
		n += 1 + l + sovGraph(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovGraph(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozGraph(x uint64) (n int) {
	return sovGraph(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *GraphPrepareRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GraphPrepareRequest{`,
		`MID:` + fmt.Sprintf("%v", this.MID) + `,`,
		`IP:` + fmt.Sprintf("%v", this.IP) + `,`,
		`Customer:` + fmt.Sprintf("%v", this.Customer) + `,`,
		`ItemID:` + fmt.Sprintf("%v", this.ItemID) + `,`,
		`ClientType:` + fmt.Sprintf("%v", this.ClientType) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GraphPrepareResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GraphPrepareResponse{`,
		`Success:` + fmt.Sprintf("%v", this.Success) + `,`,
		`CaptchaID:` + fmt.Sprintf("%v", this.CaptchaID) + `,`,
		`Challenge:` + fmt.Sprintf("%v", this.Challenge) + `,`,
		`NewCaptcha:` + fmt.Sprintf("%v", this.NewCaptcha) + `,`,
		`Voucher:` + fmt.Sprintf("%v", this.Voucher) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GraphCheckRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GraphCheckRequest{`,
		`MID:` + fmt.Sprintf("%v", this.MID) + `,`,
		`IP:` + fmt.Sprintf("%v", this.IP) + `,`,
		`Customer:` + fmt.Sprintf("%v", this.Customer) + `,`,
		`ItemID:` + fmt.Sprintf("%v", this.ItemID) + `,`,
		`Voucher:` + fmt.Sprintf("%v", this.Voucher) + `,`,
		`Challenge:` + fmt.Sprintf("%v", this.Challenge) + `,`,
		`Validate:` + fmt.Sprintf("%v", this.Validate) + `,`,
		`Seccode:` + fmt.Sprintf("%v", this.Seccode) + `,`,
		`ClientType:` + fmt.Sprintf("%v", this.ClientType) + `,`,
		`Success:` + fmt.Sprintf("%v", this.Success) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GraphCheckResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GraphCheckResponse{`,
		`NewVoucher:` + fmt.Sprintf("%v", this.NewVoucher) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringGraph(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *GraphPrepareRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGraph
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GraphPrepareRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GraphPrepareRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MID", wireType)
			}
			m.MID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGraph
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MID |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IP", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGraph
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGraph
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IP = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Customer", wireType)
			}
			m.Customer = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGraph
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Customer |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ItemID", wireType)
			}
			m.ItemID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGraph
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ItemID |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGraph
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGraph
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClientType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGraph(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGraph
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GraphPrepareResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGraph
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GraphPrepareResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GraphPrepareResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Success", wireType)
			}
			m.Success = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGraph
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Success |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CaptchaID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGraph
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGraph
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CaptchaID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Challenge", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGraph
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGraph
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Challenge = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewCaptcha", wireType)
			}
			m.NewCaptcha = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGraph
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NewCaptcha |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Voucher", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGraph
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGraph
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Voucher = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGraph(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGraph
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GraphCheckRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGraph
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GraphCheckRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GraphCheckRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MID", wireType)
			}
			m.MID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGraph
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MID |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IP", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGraph
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGraph
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IP = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Customer", wireType)
			}
			m.Customer = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGraph
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Customer |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ItemID", wireType)
			}
			m.ItemID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGraph
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ItemID |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Voucher", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGraph
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGraph
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Voucher = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Challenge", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGraph
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGraph
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Challenge = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Validate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGraph
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGraph
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Validate = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seccode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGraph
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGraph
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Seccode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGraph
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGraph
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClientType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Success", wireType)
			}
			m.Success = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGraph
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Success |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGraph(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGraph
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GraphCheckResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGraph
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GraphCheckResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GraphCheckResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewVoucher", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGraph
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGraph
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NewVoucher = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGraph(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGraph
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGraph(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGraph
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGraph
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGraph
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthGraph
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowGraph
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipGraph(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthGraph = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGraph   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("app/service/openplatform/anti-fraud/api/grpc/v1/graph.proto", fileDescriptor_graph_68b3f0bc01c1e456)
}

var fileDescriptor_graph_68b3f0bc01c1e456 = []byte{
	// 705 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x55, 0xcd, 0x6e, 0xd3, 0x4c,
	0x14, 0xad, 0x93, 0xaf, 0x69, 0x33, 0xfd, 0x10, 0x62, 0x60, 0x61, 0x0a, 0x78, 0x2a, 0xf3, 0xa3,
	0x4a, 0x10, 0xbb, 0xa1, 0x62, 0x41, 0x2b, 0x36, 0x29, 0x02, 0x45, 0x08, 0xb5, 0x32, 0x15, 0x8b,
	0x6e, 0x2a, 0x77, 0x3c, 0x4d, 0x46, 0xc4, 0xf6, 0xd4, 0x3f, 0xa9, 0xd8, 0xf1, 0x1e, 0xec, 0x79,
	0x96, 0x2e, 0x59, 0xb2, 0x1a, 0x51, 0xb3, 0xcb, 0x32, 0x2f, 0x00, 0x9a, 0xf1, 0x38, 0x76, 0x2b,
	0x47, 0x14, 0x89, 0x25, 0xbb, 0xeb, 0x33, 0xf7, 0x1e, 0xdf, 0x73, 0xe6, 0x5e, 0x1b, 0x6c, 0xbb,
	0x8c, 0xd9, 0x31, 0x89, 0xc6, 0x14, 0x13, 0x3b, 0x64, 0x24, 0x60, 0x23, 0x37, 0x39, 0x0e, 0x23,
	0xdf, 0x76, 0x83, 0x84, 0x76, 0x8e, 0x23, 0x37, 0xf5, 0x6c, 0x97, 0x51, 0x7b, 0x10, 0x31, 0x6c,
	0x8f, 0xbb, 0xf6, 0x20, 0x72, 0xd9, 0xd0, 0x62, 0x51, 0x98, 0x84, 0xf0, 0xb6, 0x28, 0xb0, 0x54,
	0xb5, 0x25, 0x0a, 0x64, 0xbe, 0x35, 0xee, 0xae, 0x76, 0x06, 0x34, 0x19, 0xa6, 0x47, 0x16, 0x0e,
	0x7d, 0x7b, 0x10, 0x0e, 0x42, 0x5b, 0x56, 0x1c, 0xa5, 0xc7, 0xf2, 0x49, 0x3e, 0xc8, 0x28, 0x67,
	0x32, 0x3f, 0x37, 0xc1, 0xcd, 0xd7, 0x82, 0x79, 0x2f, 0x22, 0xcc, 0x8d, 0x88, 0x43, 0x4e, 0x52,
	0x12, 0x27, 0xb0, 0x07, 0x9a, 0x3e, 0xf5, 0x74, 0x6d, 0x4d, 0x5b, 0x6f, 0xf6, 0x36, 0x32, 0x8e,
	0x9a, 0x6f, 0xfb, 0x2f, 0x27, 0x1c, 0x09, 0x74, 0xca, 0x91, 0x21, 0x3a, 0xdd, 0x32, 0x7d, 0xea,
	0x99, 0x6b, 0x63, 0x77, 0x44, 0x3d, 0x37, 0x21, 0x5b, 0x66, 0x44, 0x4e, 0x52, 0x1a, 0x11, 0xcf,
	0x74, 0x44, 0x1a, 0x7c, 0x01, 0x1a, 0x94, 0xe9, 0x8d, 0x35, 0x6d, 0xbd, 0xdd, 0xeb, 0x64, 0x1c,
	0x35, 0xfa, 0x7b, 0x13, 0x8e, 0x1a, 0x94, 0x4d, 0x39, 0xba, 0x97, 0x13, 0x50, 0x56, 0x5f, 0xdf,
	0xa0, 0x0c, 0xee, 0x82, 0x65, 0x9c, 0xc6, 0x49, 0xe8, 0x93, 0x48, 0x6f, 0xca, 0x3e, 0x36, 0x27,
	0x1c, 0xcd, 0xb0, 0x29, 0x47, 0xf7, 0x73, 0x92, 0x02, 0xa9, 0xa7, 0x9a, 0x15, 0xc0, 0x7d, 0xb0,
	0x44, 0x13, 0xe2, 0x1f, 0x52, 0x4f, 0xff, 0x4f, 0xf2, 0x6d, 0x67, 0x1c, 0xb5, 0xfa, 0x09, 0xf1,
	0xa5, 0xb4, 0xe2, 0x70, 0xca, 0x91, 0xa9, 0xba, 0xcb, 0x81, 0x7a, 0xde, 0x96, 0x38, 0xed, 0x7b,
	0xf0, 0x00, 0xac, 0xe0, 0x11, 0x25, 0x41, 0x72, 0x98, 0x7c, 0x64, 0x44, 0x5f, 0x94, 0x72, 0x9f,
	0x4f, 0x38, 0xaa, 0xc2, 0x53, 0x8e, 0x1e, 0xa9, 0x66, 0x4b, 0xb0, 0x9e, 0x17, 0xe4, 0x19, 0xfb,
	0x22, 0xe1, 0xa7, 0x06, 0x6e, 0x5d, 0xbc, 0x9d, 0x98, 0x85, 0x41, 0x4c, 0xe0, 0x43, 0xb0, 0x14,
	0xa7, 0x18, 0x93, 0x38, 0x56, 0x57, 0xb4, 0x22, 0x04, 0x28, 0xc8, 0x29, 0x02, 0xb8, 0x05, 0x00,
	0x76, 0x59, 0x82, 0x87, 0xae, 0x10, 0x9d, 0xdf, 0xc4, 0x9d, 0x8c, 0xa3, 0xf6, 0x4e, 0x8e, 0x4a,
	0xdd, 0x95, 0x14, 0xa7, 0xad, 0xe2, 0xbe, 0x07, 0x1f, 0x83, 0x36, 0x1e, 0xba, 0xa3, 0x11, 0x09,
	0x06, 0x44, 0xfa, 0xdf, 0xee, 0x5d, 0x9b, 0x70, 0x54, 0x82, 0x4e, 0x19, 0xc2, 0x0d, 0xb0, 0x12,
	0x90, 0xd3, 0x43, 0x55, 0xad, 0xec, 0xbd, 0x2e, 0x4c, 0xa8, 0xc0, 0x0e, 0x08, 0xc8, 0xa9, 0x7a,
	0xb3, 0x50, 0x30, 0x0e, 0x53, 0x3c, 0x24, 0x91, 0xb2, 0x4c, 0x2a, 0x50, 0x90, 0x53, 0x04, 0xe6,
	0x97, 0x16, 0xb8, 0x21, 0x1d, 0xd8, 0x19, 0x12, 0xfc, 0xe1, 0xdf, 0x74, 0xfe, 0xe9, 0x74, 0xbe,
	0xb9, 0x6c, 0x73, 0xb7, 0x62, 0x73, 0xc9, 0x55, 0xd8, 0x5d, 0xcb, 0x55, 0xa4, 0xc3, 0x77, 0xd5,
	0x91, 0x68, 0x49, 0xba, 0x67, 0x17, 0x46, 0x62, 0xca, 0xd1, 0x03, 0xa5, 0xba, 0x80, 0xea, 0x29,
	0x2b, 0xa3, 0xb3, 0x0b, 0x96, 0x8b, 0x0c, 0x7d, 0x49, 0x72, 0x4a, 0x23, 0x0b, 0xac, 0x34, 0xb2,
	0x40, 0xe6, 0x18, 0x59, 0x80, 0x42, 0x72, 0x4c, 0x30, 0x0e, 0x3d, 0xa2, 0x2f, 0x97, 0x92, 0x15,
	0x54, 0x4a, 0x56, 0xc0, 0x1c, 0xc9, 0xea, 0xf4, 0xf2, 0x76, 0xb7, 0xff, 0xe2, 0x76, 0xcb, 0x46,
	0xd5, 0x12, 0x03, 0x79, 0xe3, 0xdd, 0xca, 0x12, 0x57, 0x1a, 0xcd, 0x81, 0x79, 0x8d, 0xaa, 0xd3,
	0x57, 0x00, 0x56, 0xf7, 0x44, 0x7d, 0x27, 0xd4, 0x5e, 0x16, 0x23, 0xa0, 0xc9, 0xf6, 0x67, 0x7b,
	0x59, 0x6c, 0x9b, 0xd8, 0xcb, 0xf7, 0x79, 0xfc, 0xf4, 0x87, 0x06, 0x16, 0x25, 0x11, 0x0c, 0xc1,
	0xff, 0xd5, 0x6f, 0x0f, 0xb4, 0xac, 0xb9, 0x7f, 0x1d, 0xab, 0xe6, 0x17, 0xb2, 0x6a, 0x5f, 0x39,
	0x5f, 0x35, 0x4b, 0x01, 0x28, 0x25, 0xc0, 0x27, 0xbf, 0x2b, 0xaf, 0x7e, 0x11, 0x56, 0x3b, 0x57,
	0xcc, 0xce, 0x5f, 0xd5, 0xbb, 0x7b, 0x76, 0x6e, 0x2c, 0x7c, 0x3b, 0x37, 0x16, 0x3e, 0x65, 0x86,
	0x76, 0x96, 0x19, 0xda, 0xd7, 0xcc, 0xd0, 0xbe, 0x67, 0x86, 0x76, 0xd0, 0x18, 0x77, 0x8f, 0x5a,
	0xf2, 0xdf, 0xb8, 0xf9, 0x2b, 0x00, 0x00, 0xff, 0xff, 0xce, 0x11, 0xf3, 0xf2, 0xa4, 0x07, 0x00,
	0x00,
}
