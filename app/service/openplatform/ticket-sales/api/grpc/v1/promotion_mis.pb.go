// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: app/service/openplatform/ticket-sales/api/grpc/v1/promotion_mis.proto

package v1

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import context "golang.org/x/net/context"
import grpc "google.golang.org/grpc"

import strings "strings"
import reflect "reflect"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type PromoOrderMis struct {
	PromoID  int64 `protobuf:"varint,1,opt,name=promo_id,json=promoId,proto3" json:"promo_id"`
	GroupID  int64 `protobuf:"varint,2,opt,name=group_id,json=groupId,proto3" json:"group_id"`
	OrderID  int64 `protobuf:"varint,3,opt,name=order_id,json=orderId,proto3" json:"order_id"`
	IsMaster int16 `protobuf:"varint,4,opt,name=is_master,json=isMaster,proto3,casttype=int16" json:"is_master"`
	UID      int64 `protobuf:"varint,5,opt,name=uid,proto3" json:"uid"`
	Status   int16 `protobuf:"varint,6,opt,name=status,proto3,casttype=int16" json:"status"`
	PayTime  int64 `protobuf:"varint,7,opt,name=pay_time,json=payTime,proto3" json:"pay_time"`
	Ctime    int64 `protobuf:"varint,8,opt,name=ctime,proto3" json:"ctime"`
	SKUID    int64 `protobuf:"varint,9,opt,name=sku_id,json=skuId,proto3" json:"sku_id"`
}

func (m *PromoOrderMis) Reset()                    { *m = PromoOrderMis{} }
func (*PromoOrderMis) ProtoMessage()               {}
func (*PromoOrderMis) Descriptor() ([]byte, []int) { return fileDescriptorPromotionMis, []int{0} }

type GetGroupOrdersMisRequest struct {
	OrderID int64 `protobuf:"varint,1,opt,name=order_id,json=orderId,proto3" json:"order_id" form:"order_id"`
	GroupID int64 `protobuf:"varint,2,opt,name=group_id,json=groupId,proto3" json:"group_id" form:"group_id"`
}

func (m *GetGroupOrdersMisRequest) Reset()      { *m = GetGroupOrdersMisRequest{} }
func (*GetGroupOrdersMisRequest) ProtoMessage() {}
func (*GetGroupOrdersMisRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorPromotionMis, []int{1}
}

type GetGroupOrdersMisResponse struct {
	Orders []*PromoOrderMis `protobuf:"bytes,2,rep,name=orders" json:"orders"`
}

func (m *GetGroupOrdersMisResponse) Reset()      { *m = GetGroupOrdersMisResponse{} }
func (*GetGroupOrdersMisResponse) ProtoMessage() {}
func (*GetGroupOrdersMisResponse) Descriptor() ([]byte, []int) {
	return fileDescriptorPromotionMis, []int{2}
}

func init() {
	proto.RegisterType((*PromoOrderMis)(nil), "ticket.service.sales.v1.PromoOrderMis")
	proto.RegisterType((*GetGroupOrdersMisRequest)(nil), "ticket.service.sales.v1.GetGroupOrdersMisRequest")
	proto.RegisterType((*GetGroupOrdersMisResponse)(nil), "ticket.service.sales.v1.GetGroupOrdersMisResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for PromotionMis service

type PromotionMisClient interface {
	GetGroupOrdersMis(ctx context.Context, in *GetGroupOrdersMisRequest, opts ...grpc.CallOption) (*GetGroupOrdersMisResponse, error)
}

type promotionMisClient struct {
	cc *grpc.ClientConn
}

func NewPromotionMisClient(cc *grpc.ClientConn) PromotionMisClient {
	return &promotionMisClient{cc}
}

func (c *promotionMisClient) GetGroupOrdersMis(ctx context.Context, in *GetGroupOrdersMisRequest, opts ...grpc.CallOption) (*GetGroupOrdersMisResponse, error) {
	out := new(GetGroupOrdersMisResponse)
	err := grpc.Invoke(ctx, "/ticket.service.sales.v1.PromotionMis/GetGroupOrdersMis", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for PromotionMis service

type PromotionMisServer interface {
	GetGroupOrdersMis(context.Context, *GetGroupOrdersMisRequest) (*GetGroupOrdersMisResponse, error)
}

func RegisterPromotionMisServer(s *grpc.Server, srv PromotionMisServer) {
	s.RegisterService(&_PromotionMis_serviceDesc, srv)
}

func _PromotionMis_GetGroupOrdersMis_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGroupOrdersMisRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PromotionMisServer).GetGroupOrdersMis(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ticket.service.sales.v1.PromotionMis/GetGroupOrdersMis",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PromotionMisServer).GetGroupOrdersMis(ctx, req.(*GetGroupOrdersMisRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _PromotionMis_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ticket.service.sales.v1.PromotionMis",
	HandlerType: (*PromotionMisServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetGroupOrdersMis",
			Handler:    _PromotionMis_GetGroupOrdersMis_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "app/service/openplatform/ticket-sales/api/grpc/v1/promotion_mis.proto",
}

func (m *PromoOrderMis) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PromoOrderMis) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.PromoID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPromotionMis(dAtA, i, uint64(m.PromoID))
	}
	if m.GroupID != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPromotionMis(dAtA, i, uint64(m.GroupID))
	}
	if m.OrderID != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintPromotionMis(dAtA, i, uint64(m.OrderID))
	}
	if m.IsMaster != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintPromotionMis(dAtA, i, uint64(m.IsMaster))
	}
	if m.UID != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintPromotionMis(dAtA, i, uint64(m.UID))
	}
	if m.Status != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintPromotionMis(dAtA, i, uint64(m.Status))
	}
	if m.PayTime != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintPromotionMis(dAtA, i, uint64(m.PayTime))
	}
	if m.Ctime != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintPromotionMis(dAtA, i, uint64(m.Ctime))
	}
	if m.SKUID != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintPromotionMis(dAtA, i, uint64(m.SKUID))
	}
	return i, nil
}

func (m *GetGroupOrdersMisRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetGroupOrdersMisRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.OrderID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPromotionMis(dAtA, i, uint64(m.OrderID))
	}
	if m.GroupID != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPromotionMis(dAtA, i, uint64(m.GroupID))
	}
	return i, nil
}

func (m *GetGroupOrdersMisResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetGroupOrdersMisResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Orders) > 0 {
		for _, msg := range m.Orders {
			dAtA[i] = 0x12
			i++
			i = encodeVarintPromotionMis(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func encodeVarintPromotionMis(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *PromoOrderMis) Size() (n int) {
	var l int
	_ = l
	if m.PromoID != 0 {
		n += 1 + sovPromotionMis(uint64(m.PromoID))
	}
	if m.GroupID != 0 {
		n += 1 + sovPromotionMis(uint64(m.GroupID))
	}
	if m.OrderID != 0 {
		n += 1 + sovPromotionMis(uint64(m.OrderID))
	}
	if m.IsMaster != 0 {
		n += 1 + sovPromotionMis(uint64(m.IsMaster))
	}
	if m.UID != 0 {
		n += 1 + sovPromotionMis(uint64(m.UID))
	}
	if m.Status != 0 {
		n += 1 + sovPromotionMis(uint64(m.Status))
	}
	if m.PayTime != 0 {
		n += 1 + sovPromotionMis(uint64(m.PayTime))
	}
	if m.Ctime != 0 {
		n += 1 + sovPromotionMis(uint64(m.Ctime))
	}
	if m.SKUID != 0 {
		n += 1 + sovPromotionMis(uint64(m.SKUID))
	}
	return n
}

func (m *GetGroupOrdersMisRequest) Size() (n int) {
	var l int
	_ = l
	if m.OrderID != 0 {
		n += 1 + sovPromotionMis(uint64(m.OrderID))
	}
	if m.GroupID != 0 {
		n += 1 + sovPromotionMis(uint64(m.GroupID))
	}
	return n
}

func (m *GetGroupOrdersMisResponse) Size() (n int) {
	var l int
	_ = l
	if len(m.Orders) > 0 {
		for _, e := range m.Orders {
			l = e.Size()
			n += 1 + l + sovPromotionMis(uint64(l))
		}
	}
	return n
}

func sovPromotionMis(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozPromotionMis(x uint64) (n int) {
	return sovPromotionMis(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *PromoOrderMis) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PromoOrderMis{`,
		`PromoID:` + fmt.Sprintf("%v", this.PromoID) + `,`,
		`GroupID:` + fmt.Sprintf("%v", this.GroupID) + `,`,
		`OrderID:` + fmt.Sprintf("%v", this.OrderID) + `,`,
		`IsMaster:` + fmt.Sprintf("%v", this.IsMaster) + `,`,
		`UID:` + fmt.Sprintf("%v", this.UID) + `,`,
		`Status:` + fmt.Sprintf("%v", this.Status) + `,`,
		`PayTime:` + fmt.Sprintf("%v", this.PayTime) + `,`,
		`Ctime:` + fmt.Sprintf("%v", this.Ctime) + `,`,
		`SKUID:` + fmt.Sprintf("%v", this.SKUID) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetGroupOrdersMisRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetGroupOrdersMisRequest{`,
		`OrderID:` + fmt.Sprintf("%v", this.OrderID) + `,`,
		`GroupID:` + fmt.Sprintf("%v", this.GroupID) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetGroupOrdersMisResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetGroupOrdersMisResponse{`,
		`Orders:` + strings.Replace(fmt.Sprintf("%v", this.Orders), "PromoOrderMis", "PromoOrderMis", 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringPromotionMis(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *PromoOrderMis) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPromotionMis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PromoOrderMis: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PromoOrderMis: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PromoID", wireType)
			}
			m.PromoID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPromotionMis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PromoID |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupID", wireType)
			}
			m.GroupID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPromotionMis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GroupID |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderID", wireType)
			}
			m.OrderID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPromotionMis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OrderID |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsMaster", wireType)
			}
			m.IsMaster = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPromotionMis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IsMaster |= (int16(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UID", wireType)
			}
			m.UID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPromotionMis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UID |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPromotionMis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= (int16(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PayTime", wireType)
			}
			m.PayTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPromotionMis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PayTime |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ctime", wireType)
			}
			m.Ctime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPromotionMis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ctime |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SKUID", wireType)
			}
			m.SKUID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPromotionMis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SKUID |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPromotionMis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPromotionMis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetGroupOrdersMisRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPromotionMis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetGroupOrdersMisRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetGroupOrdersMisRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderID", wireType)
			}
			m.OrderID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPromotionMis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OrderID |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupID", wireType)
			}
			m.GroupID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPromotionMis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GroupID |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPromotionMis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPromotionMis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetGroupOrdersMisResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPromotionMis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetGroupOrdersMisResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetGroupOrdersMisResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Orders", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPromotionMis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPromotionMis
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Orders = append(m.Orders, &PromoOrderMis{})
			if err := m.Orders[len(m.Orders)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPromotionMis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPromotionMis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPromotionMis(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPromotionMis
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPromotionMis
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPromotionMis
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthPromotionMis
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowPromotionMis
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipPromotionMis(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthPromotionMis = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPromotionMis   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("app/service/openplatform/ticket-sales/api/grpc/v1/promotion_mis.proto", fileDescriptorPromotionMis)
}

var fileDescriptorPromotionMis = []byte{
	// 552 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x53, 0x31, 0x8f, 0xd3, 0x4c,
	0x10, 0x8d, 0xe3, 0xcf, 0x71, 0xb2, 0xdf, 0x01, 0xc2, 0x27, 0x71, 0xe6, 0x84, 0xec, 0xc8, 0x05,
	0x44, 0x41, 0x67, 0x2b, 0x39, 0x89, 0x82, 0x32, 0x22, 0x3a, 0x05, 0x14, 0x71, 0x32, 0xd0, 0xd0,
	0x44, 0x4e, 0xbc, 0x67, 0x56, 0x39, 0x67, 0x17, 0xef, 0x3a, 0xd2, 0x49, 0x14, 0xfc, 0x00, 0xfe,
	0x06, 0x12, 0x3f, 0xe5, 0x4a, 0x4a, 0x2a, 0x8b, 0x73, 0x99, 0x92, 0x92, 0x0a, 0xed, 0xac, 0x73,
	0x06, 0x1d, 0x29, 0x68, 0xec, 0xf1, 0x9b, 0x79, 0x6f, 0xd6, 0x6f, 0x66, 0xd1, 0x38, 0x62, 0x2c,
	0xe0, 0x38, 0x5b, 0x93, 0x05, 0x0e, 0x28, 0xc3, 0x2b, 0x76, 0x1e, 0x89, 0x33, 0x9a, 0xa5, 0x81,
	0x20, 0x8b, 0x25, 0x16, 0x47, 0x3c, 0x3a, 0xc7, 0x3c, 0x88, 0x18, 0x09, 0x92, 0x8c, 0x2d, 0x82,
	0xf5, 0x20, 0x60, 0x19, 0x4d, 0xa9, 0x20, 0x74, 0x35, 0x4b, 0x09, 0xf7, 0x59, 0x46, 0x05, 0xb5,
	0x0e, 0x54, 0xb5, 0x5f, 0x29, 0xf9, 0xc0, 0xf2, 0xd7, 0x83, 0xc3, 0xa3, 0x84, 0x88, 0x77, 0xf9,
	0xdc, 0x5f, 0xd0, 0x34, 0x48, 0x68, 0x42, 0x03, 0xa8, 0x9f, 0xe7, 0x67, 0xf0, 0x05, 0x1f, 0x10,
	0x29, 0x1d, 0xef, 0xb3, 0x8e, 0x6e, 0x9d, 0x4a, 0xfd, 0x97, 0x59, 0x8c, 0xb3, 0x29, 0xe1, 0xd6,
	0x10, 0xb5, 0xa1, 0xe1, 0x8c, 0xc4, 0xb6, 0xd6, 0xd5, 0x7a, 0xfa, 0xe8, 0xa0, 0x2c, 0x5c, 0x13,
	0x8a, 0x26, 0xcf, 0x36, 0x85, 0x7b, 0x9d, 0x0e, 0x4d, 0x88, 0x26, 0xb1, 0xe4, 0x24, 0x19, 0xcd,
	0x99, 0xe4, 0x34, 0x6b, 0xce, 0x89, 0xc4, 0x14, 0x67, 0x9b, 0x0e, 0x4d, 0x88, 0x14, 0x87, 0xca,
	0x9e, 0x92, 0xa3, 0xd7, 0x1c, 0x38, 0x87, 0xe2, 0x6c, 0xd3, 0xa1, 0x09, 0xd1, 0x24, 0xb6, 0x8e,
	0x51, 0x87, 0xf0, 0x59, 0x1a, 0x71, 0x81, 0x33, 0xfb, 0xbf, 0xae, 0xd6, 0x33, 0x46, 0xf7, 0x36,
	0x85, 0x5b, 0x83, 0x3f, 0x0b, 0xd7, 0x20, 0x2b, 0x31, 0x78, 0x12, 0xb6, 0x09, 0x9f, 0x02, 0x64,
	0x75, 0x91, 0x9e, 0x93, 0xd8, 0x36, 0xa0, 0xc7, 0xed, 0xb2, 0x70, 0xf5, 0x37, 0xa0, 0x2f, 0xd1,
	0x50, 0x3e, 0xac, 0xc7, 0xa8, 0xc5, 0x45, 0x24, 0x72, 0x6e, 0xb7, 0x40, 0x73, 0x7f, 0x53, 0xb8,
	0x15, 0x52, 0x0b, 0x56, 0x80, 0xf5, 0x08, 0xb5, 0x59, 0x74, 0x31, 0x13, 0x24, 0xc5, 0xb6, 0x09,
	0x9a, 0x7b, 0x60, 0x4a, 0x85, 0x85, 0x26, 0x8b, 0x2e, 0x5e, 0x93, 0x14, 0x5b, 0x2e, 0x32, 0x16,
	0x50, 0xd5, 0x86, 0xaa, 0xce, 0xa6, 0x70, 0x15, 0x10, 0xaa, 0x97, 0xd5, 0x47, 0x2d, 0xbe, 0xcc,
	0xe5, 0xff, 0x77, 0xa0, 0x62, 0xbf, 0x2c, 0x5c, 0xe3, 0xd5, 0x0b, 0x75, 0xba, 0x2a, 0x15, 0x1a,
	0x7c, 0x99, 0x4f, 0x62, 0xef, 0x8b, 0x86, 0xec, 0x13, 0x2c, 0xc0, 0x51, 0xb0, 0x88, 0x4f, 0x09,
	0x0f, 0xf1, 0xfb, 0x1c, 0x73, 0x61, 0x8d, 0x7f, 0xb3, 0x52, 0x8d, 0xac, 0xbf, 0xc3, 0xca, 0x1f,
	0x85, 0x7b, 0x47, 0x2e, 0xdb, 0x53, 0x6f, 0x8b, 0x78, 0xb5, 0xbb, 0xe3, 0x1b, 0x53, 0xec, 0xef,
	0x98, 0x62, 0x2d, 0xb3, 0x45, 0xbc, 0xeb, 0xc1, 0x7a, 0x09, 0xba, 0xff, 0x97, 0x93, 0x72, 0x46,
	0x57, 0x1c, 0x5b, 0xcf, 0x51, 0x0b, 0xda, 0x71, 0xbb, 0xd9, 0xd5, 0x7b, 0xff, 0x0f, 0x1f, 0xfa,
	0x3b, 0x16, 0xd9, 0xff, 0x63, 0x2b, 0x47, 0x48, 0x5a, 0xa2, 0x98, 0x61, 0xf5, 0x1e, 0x7e, 0xd2,
	0xd0, 0xde, 0xe9, 0xf6, 0x6e, 0xc8, 0xd5, 0xfd, 0x80, 0xee, 0xde, 0xe8, 0x6c, 0x0d, 0x76, 0x76,
	0xd8, 0xe5, 0xe7, 0xe1, 0xf0, 0x5f, 0x28, 0xea, 0xc7, 0xbc, 0xc6, 0xe8, 0xc1, 0xe5, 0x95, 0xd3,
	0xf8, 0x76, 0xe5, 0x34, 0x3e, 0x96, 0x8e, 0x76, 0x59, 0x3a, 0xda, 0xd7, 0xd2, 0xd1, 0xbe, 0x97,
	0x8e, 0xf6, 0xb6, 0xb9, 0x1e, 0xcc, 0x5b, 0x70, 0xdf, 0x8e, 0x7f, 0x05, 0x00, 0x00, 0xff, 0xff,
	0x5a, 0xdf, 0xa3, 0x84, 0x00, 0x04, 0x00, 0x00,
}
