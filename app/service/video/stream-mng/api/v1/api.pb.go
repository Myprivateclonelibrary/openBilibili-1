// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: app/service/video/stream-mng/api/v1/api.proto

package v1

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// EmptyStruct 空的message，对应真实service只返回error，没有具体返回值
type EmptyStruct struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EmptyStruct) Reset()         { *m = EmptyStruct{} }
func (m *EmptyStruct) String() string { return proto.CompactTextString(m) }
func (*EmptyStruct) ProtoMessage()    {}
func (*EmptyStruct) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_5ed0cf4deb5559e0, []int{0}
}
func (m *EmptyStruct) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EmptyStruct) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EmptyStruct.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *EmptyStruct) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EmptyStruct.Merge(dst, src)
}
func (m *EmptyStruct) XXX_Size() int {
	return m.Size()
}
func (m *EmptyStruct) XXX_DiscardUnknown() {
	xxx_messageInfo_EmptyStruct.DiscardUnknown(m)
}

var xxx_messageInfo_EmptyStruct proto.InternalMessageInfo

// ChangeSrcReq 切换上行
type ChangeSrcReq struct {
	// 房间号
	RoomId int64 `protobuf:"varint,1,opt,name=room_id,json=roomId,proto3" json:"room_id,omitempty"`
	// src
	Src int64 `protobuf:"varint,2,opt,name=src,proto3" json:"src,omitempty"`
	// 来源平台
	Source string `protobuf:"bytes,3,opt,name=source,proto3" json:"source,omitempty"`
	// 操作人
	OperateName string `protobuf:"bytes,4,opt,name=operate_name,json=operateName,proto3" json:"operate_name,omitempty"`
	// 原因
	Reason               string   `protobuf:"bytes,5,opt,name=reason,proto3" json:"reason,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ChangeSrcReq) Reset()         { *m = ChangeSrcReq{} }
func (m *ChangeSrcReq) String() string { return proto.CompactTextString(m) }
func (*ChangeSrcReq) ProtoMessage()    {}
func (*ChangeSrcReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_5ed0cf4deb5559e0, []int{1}
}
func (m *ChangeSrcReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChangeSrcReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChangeSrcReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ChangeSrcReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChangeSrcReq.Merge(dst, src)
}
func (m *ChangeSrcReq) XXX_Size() int {
	return m.Size()
}
func (m *ChangeSrcReq) XXX_DiscardUnknown() {
	xxx_messageInfo_ChangeSrcReq.DiscardUnknown(m)
}

var xxx_messageInfo_ChangeSrcReq proto.InternalMessageInfo

func (m *ChangeSrcReq) GetRoomId() int64 {
	if m != nil {
		return m.RoomId
	}
	return 0
}

func (m *ChangeSrcReq) GetSrc() int64 {
	if m != nil {
		return m.Src
	}
	return 0
}

func (m *ChangeSrcReq) GetSource() string {
	if m != nil {
		return m.Source
	}
	return ""
}

func (m *ChangeSrcReq) GetOperateName() string {
	if m != nil {
		return m.OperateName
	}
	return ""
}

func (m *ChangeSrcReq) GetReason() string {
	if m != nil {
		return m.Reason
	}
	return ""
}

// ClearStreamStatusReq 清理互推
type ClearStreamStatusReq struct {
	// 房间号
	RoomId               int64    `protobuf:"varint,1,opt,name=room_id,json=roomId,proto3" json:"room_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ClearStreamStatusReq) Reset()         { *m = ClearStreamStatusReq{} }
func (m *ClearStreamStatusReq) String() string { return proto.CompactTextString(m) }
func (*ClearStreamStatusReq) ProtoMessage()    {}
func (*ClearStreamStatusReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_5ed0cf4deb5559e0, []int{2}
}
func (m *ClearStreamStatusReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ClearStreamStatusReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ClearStreamStatusReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ClearStreamStatusReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClearStreamStatusReq.Merge(dst, src)
}
func (m *ClearStreamStatusReq) XXX_Size() int {
	return m.Size()
}
func (m *ClearStreamStatusReq) XXX_DiscardUnknown() {
	xxx_messageInfo_ClearStreamStatusReq.DiscardUnknown(m)
}

var xxx_messageInfo_ClearStreamStatusReq proto.InternalMessageInfo

func (m *ClearStreamStatusReq) GetRoomId() int64 {
	if m != nil {
		return m.RoomId
	}
	return 0
}

// CloseReply  CloseReply
type CloseReply struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CloseReply) Reset()         { *m = CloseReply{} }
func (m *CloseReply) String() string { return proto.CompactTextString(m) }
func (*CloseReply) ProtoMessage()    {}
func (*CloseReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_5ed0cf4deb5559e0, []int{3}
}
func (m *CloseReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CloseReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CloseReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *CloseReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CloseReply.Merge(dst, src)
}
func (m *CloseReply) XXX_Size() int {
	return m.Size()
}
func (m *CloseReply) XXX_DiscardUnknown() {
	xxx_messageInfo_CloseReply.DiscardUnknown(m)
}

var xxx_messageInfo_CloseReply proto.InternalMessageInfo

// CloseReq CloseReq
type CloseReq struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CloseReq) Reset()         { *m = CloseReq{} }
func (m *CloseReq) String() string { return proto.CompactTextString(m) }
func (*CloseReq) ProtoMessage()    {}
func (*CloseReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_5ed0cf4deb5559e0, []int{4}
}
func (m *CloseReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CloseReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CloseReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *CloseReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CloseReq.Merge(dst, src)
}
func (m *CloseReq) XXX_Size() int {
	return m.Size()
}
func (m *CloseReq) XXX_DiscardUnknown() {
	xxx_messageInfo_CloseReq.DiscardUnknown(m)
}

var xxx_messageInfo_CloseReq proto.InternalMessageInfo

// CreateOfficalStreamReply 创建流
type CreateOfficalStreamReply struct {
	// 是否成功
	Success              bool     `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CreateOfficalStreamReply) Reset()         { *m = CreateOfficalStreamReply{} }
func (m *CreateOfficalStreamReply) String() string { return proto.CompactTextString(m) }
func (*CreateOfficalStreamReply) ProtoMessage()    {}
func (*CreateOfficalStreamReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_5ed0cf4deb5559e0, []int{5}
}
func (m *CreateOfficalStreamReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateOfficalStreamReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateOfficalStreamReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *CreateOfficalStreamReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateOfficalStreamReply.Merge(dst, src)
}
func (m *CreateOfficalStreamReply) XXX_Size() int {
	return m.Size()
}
func (m *CreateOfficalStreamReply) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateOfficalStreamReply.DiscardUnknown(m)
}

var xxx_messageInfo_CreateOfficalStreamReply proto.InternalMessageInfo

func (m *CreateOfficalStreamReply) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

// CreateOfficalStreamReq 创建流
type CreateOfficalStreamReq struct {
	// 流名
	StreamName string `protobuf:"bytes,1,opt,name=stream_name,json=streamName,proto3" json:"stream_name,omitempty"`
	// key
	Key string `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
	// 房间号
	RoomId int64 `protobuf:"varint,3,opt,name=room_id,json=roomId,proto3" json:"room_id,omitempty"`
	// 是否线下测试
	Debug string `protobuf:"bytes,4,opt,name=debug,proto3" json:"debug,omitempty"`
	// 线下测试必传
	Uid                  int64    `protobuf:"varint,5,opt,name=uid,proto3" json:"uid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CreateOfficalStreamReq) Reset()         { *m = CreateOfficalStreamReq{} }
func (m *CreateOfficalStreamReq) String() string { return proto.CompactTextString(m) }
func (*CreateOfficalStreamReq) ProtoMessage()    {}
func (*CreateOfficalStreamReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_5ed0cf4deb5559e0, []int{6}
}
func (m *CreateOfficalStreamReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateOfficalStreamReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateOfficalStreamReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *CreateOfficalStreamReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateOfficalStreamReq.Merge(dst, src)
}
func (m *CreateOfficalStreamReq) XXX_Size() int {
	return m.Size()
}
func (m *CreateOfficalStreamReq) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateOfficalStreamReq.DiscardUnknown(m)
}

var xxx_messageInfo_CreateOfficalStreamReq proto.InternalMessageInfo

func (m *CreateOfficalStreamReq) GetStreamName() string {
	if m != nil {
		return m.StreamName
	}
	return ""
}

func (m *CreateOfficalStreamReq) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *CreateOfficalStreamReq) GetRoomId() int64 {
	if m != nil {
		return m.RoomId
	}
	return 0
}

func (m *CreateOfficalStreamReq) GetDebug() string {
	if m != nil {
		return m.Debug
	}
	return ""
}

func (m *CreateOfficalStreamReq) GetUid() int64 {
	if m != nil {
		return m.Uid
	}
	return 0
}

// AdapterStream 上行流信息
type AdapterStream struct {
	// src
	Src int64 `protobuf:"varint,1,opt,name=src,proto3" json:"src,omitempty"`
	// 房间号
	RoomId int64 `protobuf:"varint,2,opt,name=room_id,json=roomId,proto3" json:"room_id"`
	// 上行
	UpRank int64 `protobuf:"varint,3,opt,name=up_rank,json=upRank,proto3" json:"up_rank"`
	// 上行名称
	SrcName              string   `protobuf:"bytes,4,opt,name=src_name,json=srcName,proto3" json:"src_name"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AdapterStream) Reset()         { *m = AdapterStream{} }
func (m *AdapterStream) String() string { return proto.CompactTextString(m) }
func (*AdapterStream) ProtoMessage()    {}
func (*AdapterStream) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_5ed0cf4deb5559e0, []int{7}
}
func (m *AdapterStream) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AdapterStream) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AdapterStream.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *AdapterStream) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AdapterStream.Merge(dst, src)
}
func (m *AdapterStream) XXX_Size() int {
	return m.Size()
}
func (m *AdapterStream) XXX_DiscardUnknown() {
	xxx_messageInfo_AdapterStream.DiscardUnknown(m)
}

var xxx_messageInfo_AdapterStream proto.InternalMessageInfo

func (m *AdapterStream) GetSrc() int64 {
	if m != nil {
		return m.Src
	}
	return 0
}

func (m *AdapterStream) GetRoomId() int64 {
	if m != nil {
		return m.RoomId
	}
	return 0
}

func (m *AdapterStream) GetUpRank() int64 {
	if m != nil {
		return m.UpRank
	}
	return 0
}

func (m *AdapterStream) GetSrcName() string {
	if m != nil {
		return m.SrcName
	}
	return ""
}

// GetAdapterStreamByStreamNameReply 适配PHP代码
type GetAdapterStreamByStreamNameReply struct {
	// 流名map流具体信息
	List                 map[string]*AdapterStream `protobuf:"bytes,1,rep,name=list" json:"list,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value"`
	XXX_NoUnkeyedLiteral struct{}                  `json:"-"`
	XXX_unrecognized     []byte                    `json:"-"`
	XXX_sizecache        int32                     `json:"-"`
}

func (m *GetAdapterStreamByStreamNameReply) Reset()         { *m = GetAdapterStreamByStreamNameReply{} }
func (m *GetAdapterStreamByStreamNameReply) String() string { return proto.CompactTextString(m) }
func (*GetAdapterStreamByStreamNameReply) ProtoMessage()    {}
func (*GetAdapterStreamByStreamNameReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_5ed0cf4deb5559e0, []int{8}
}
func (m *GetAdapterStreamByStreamNameReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetAdapterStreamByStreamNameReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetAdapterStreamByStreamNameReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *GetAdapterStreamByStreamNameReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetAdapterStreamByStreamNameReply.Merge(dst, src)
}
func (m *GetAdapterStreamByStreamNameReply) XXX_Size() int {
	return m.Size()
}
func (m *GetAdapterStreamByStreamNameReply) XXX_DiscardUnknown() {
	xxx_messageInfo_GetAdapterStreamByStreamNameReply.DiscardUnknown(m)
}

var xxx_messageInfo_GetAdapterStreamByStreamNameReply proto.InternalMessageInfo

func (m *GetAdapterStreamByStreamNameReply) GetList() map[string]*AdapterStream {
	if m != nil {
		return m.List
	}
	return nil
}

// GetAdapterStreamByStreamNameReq 适配PHP代码
type GetAdapterStreamByStreamNameReq struct {
	// 流名
	StreamNames          string   `protobuf:"bytes,1,opt,name=stream_names,json=streamNames,proto3" json:"stream_names"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetAdapterStreamByStreamNameReq) Reset()         { *m = GetAdapterStreamByStreamNameReq{} }
func (m *GetAdapterStreamByStreamNameReq) String() string { return proto.CompactTextString(m) }
func (*GetAdapterStreamByStreamNameReq) ProtoMessage()    {}
func (*GetAdapterStreamByStreamNameReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_5ed0cf4deb5559e0, []int{9}
}
func (m *GetAdapterStreamByStreamNameReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetAdapterStreamByStreamNameReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetAdapterStreamByStreamNameReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *GetAdapterStreamByStreamNameReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetAdapterStreamByStreamNameReq.Merge(dst, src)
}
func (m *GetAdapterStreamByStreamNameReq) XXX_Size() int {
	return m.Size()
}
func (m *GetAdapterStreamByStreamNameReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GetAdapterStreamByStreamNameReq.DiscardUnknown(m)
}

var xxx_messageInfo_GetAdapterStreamByStreamNameReq proto.InternalMessageInfo

func (m *GetAdapterStreamByStreamNameReq) GetStreamNames() string {
	if m != nil {
		return m.StreamNames
	}
	return ""
}

// LineList 线路信息
type LineList struct {
	// 上行
	Src int64 `protobuf:"varint,1,opt,name=src,proto3" json:"src,omitempty"`
	// 是否被使用
	Use bool `protobuf:"varint,2,opt,name=use,proto3" json:"use,omitempty"`
	// 描述
	Desc                 string   `protobuf:"bytes,3,opt,name=desc,proto3" json:"desc,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LineList) Reset()         { *m = LineList{} }
func (m *LineList) String() string { return proto.CompactTextString(m) }
func (*LineList) ProtoMessage()    {}
func (*LineList) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_5ed0cf4deb5559e0, []int{10}
}
func (m *LineList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LineList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LineList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *LineList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LineList.Merge(dst, src)
}
func (m *LineList) XXX_Size() int {
	return m.Size()
}
func (m *LineList) XXX_DiscardUnknown() {
	xxx_messageInfo_LineList.DiscardUnknown(m)
}

var xxx_messageInfo_LineList proto.InternalMessageInfo

func (m *LineList) GetSrc() int64 {
	if m != nil {
		return m.Src
	}
	return 0
}

func (m *LineList) GetUse() bool {
	if m != nil {
		return m.Use
	}
	return false
}

func (m *LineList) GetDesc() string {
	if m != nil {
		return m.Desc
	}
	return ""
}

// GetLineListByRoomIDReply 获取线路信息
type GetLineListByRoomIDReply struct {
	// 线路信息， 多条
	List                 []*LineList `protobuf:"bytes,1,rep,name=list" json:"list,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *GetLineListByRoomIDReply) Reset()         { *m = GetLineListByRoomIDReply{} }
func (m *GetLineListByRoomIDReply) String() string { return proto.CompactTextString(m) }
func (*GetLineListByRoomIDReply) ProtoMessage()    {}
func (*GetLineListByRoomIDReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_5ed0cf4deb5559e0, []int{11}
}
func (m *GetLineListByRoomIDReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetLineListByRoomIDReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetLineListByRoomIDReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *GetLineListByRoomIDReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetLineListByRoomIDReply.Merge(dst, src)
}
func (m *GetLineListByRoomIDReply) XXX_Size() int {
	return m.Size()
}
func (m *GetLineListByRoomIDReply) XXX_DiscardUnknown() {
	xxx_messageInfo_GetLineListByRoomIDReply.DiscardUnknown(m)
}

var xxx_messageInfo_GetLineListByRoomIDReply proto.InternalMessageInfo

func (m *GetLineListByRoomIDReply) GetList() []*LineList {
	if m != nil {
		return m.List
	}
	return nil
}

// GetLineListByRoomIDReq 获取线路信息
type GetLineListByRoomIDReq struct {
	// 房间号
	RoomId               int64    `protobuf:"varint,1,opt,name=room_id,json=roomId,proto3" json:"room_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetLineListByRoomIDReq) Reset()         { *m = GetLineListByRoomIDReq{} }
func (m *GetLineListByRoomIDReq) String() string { return proto.CompactTextString(m) }
func (*GetLineListByRoomIDReq) ProtoMessage()    {}
func (*GetLineListByRoomIDReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_5ed0cf4deb5559e0, []int{12}
}
func (m *GetLineListByRoomIDReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetLineListByRoomIDReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetLineListByRoomIDReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *GetLineListByRoomIDReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetLineListByRoomIDReq.Merge(dst, src)
}
func (m *GetLineListByRoomIDReq) XXX_Size() int {
	return m.Size()
}
func (m *GetLineListByRoomIDReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GetLineListByRoomIDReq.DiscardUnknown(m)
}

var xxx_messageInfo_GetLineListByRoomIDReq proto.InternalMessageInfo

func (m *GetLineListByRoomIDReq) GetRoomId() int64 {
	if m != nil {
		return m.RoomId
	}
	return 0
}

// GetMultiScreenShotReply 获取批量截图
type GetMultiScreenShotReply struct {
	// 房间号map截图地址
	List                 map[int64]string `protobuf:"bytes,1,rep,name=list" json:"list,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *GetMultiScreenShotReply) Reset()         { *m = GetMultiScreenShotReply{} }
func (m *GetMultiScreenShotReply) String() string { return proto.CompactTextString(m) }
func (*GetMultiScreenShotReply) ProtoMessage()    {}
func (*GetMultiScreenShotReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_5ed0cf4deb5559e0, []int{13}
}
func (m *GetMultiScreenShotReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetMultiScreenShotReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetMultiScreenShotReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *GetMultiScreenShotReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetMultiScreenShotReply.Merge(dst, src)
}
func (m *GetMultiScreenShotReply) XXX_Size() int {
	return m.Size()
}
func (m *GetMultiScreenShotReply) XXX_DiscardUnknown() {
	xxx_messageInfo_GetMultiScreenShotReply.DiscardUnknown(m)
}

var xxx_messageInfo_GetMultiScreenShotReply proto.InternalMessageInfo

func (m *GetMultiScreenShotReply) GetList() map[int64]string {
	if m != nil {
		return m.List
	}
	return nil
}

// GetMultiScreenShotReq 获取批量截图
type GetMultiScreenShotReq struct {
	// 房间号
	RoomIds string `protobuf:"bytes,1,opt,name=room_ids,json=roomIds,proto3" json:"room_ids,omitempty"`
	// 时间戳
	Ts int64 `protobuf:"varint,2,opt,name=ts,proto3" json:"ts,omitempty"`
	// channel 是否为鉴黄
	Channel              string   `protobuf:"bytes,3,opt,name=channel,proto3" json:"channel,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetMultiScreenShotReq) Reset()         { *m = GetMultiScreenShotReq{} }
func (m *GetMultiScreenShotReq) String() string { return proto.CompactTextString(m) }
func (*GetMultiScreenShotReq) ProtoMessage()    {}
func (*GetMultiScreenShotReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_5ed0cf4deb5559e0, []int{14}
}
func (m *GetMultiScreenShotReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetMultiScreenShotReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetMultiScreenShotReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *GetMultiScreenShotReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetMultiScreenShotReq.Merge(dst, src)
}
func (m *GetMultiScreenShotReq) XXX_Size() int {
	return m.Size()
}
func (m *GetMultiScreenShotReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GetMultiScreenShotReq.DiscardUnknown(m)
}

var xxx_messageInfo_GetMultiScreenShotReq proto.InternalMessageInfo

func (m *GetMultiScreenShotReq) GetRoomIds() string {
	if m != nil {
		return m.RoomIds
	}
	return ""
}

func (m *GetMultiScreenShotReq) GetTs() int64 {
	if m != nil {
		return m.Ts
	}
	return 0
}

func (m *GetMultiScreenShotReq) GetChannel() string {
	if m != nil {
		return m.Channel
	}
	return ""
}

// GetMultiStreamInfoReply 批量获取房间信息
type GetMultiStreamInfoReply struct {
	// code
	Code int32 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	// message
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	// 房间号map流详细信息
	Data                 map[uint32]*StreamFullInfo `protobuf:"bytes,3,rep,name=data" json:"data,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value"`
	XXX_NoUnkeyedLiteral struct{}                   `json:"-"`
	XXX_unrecognized     []byte                     `json:"-"`
	XXX_sizecache        int32                      `json:"-"`
}

func (m *GetMultiStreamInfoReply) Reset()         { *m = GetMultiStreamInfoReply{} }
func (m *GetMultiStreamInfoReply) String() string { return proto.CompactTextString(m) }
func (*GetMultiStreamInfoReply) ProtoMessage()    {}
func (*GetMultiStreamInfoReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_5ed0cf4deb5559e0, []int{15}
}
func (m *GetMultiStreamInfoReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetMultiStreamInfoReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetMultiStreamInfoReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *GetMultiStreamInfoReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetMultiStreamInfoReply.Merge(dst, src)
}
func (m *GetMultiStreamInfoReply) XXX_Size() int {
	return m.Size()
}
func (m *GetMultiStreamInfoReply) XXX_DiscardUnknown() {
	xxx_messageInfo_GetMultiStreamInfoReply.DiscardUnknown(m)
}

var xxx_messageInfo_GetMultiStreamInfoReply proto.InternalMessageInfo

func (m *GetMultiStreamInfoReply) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *GetMultiStreamInfoReply) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *GetMultiStreamInfoReply) GetData() map[uint32]*StreamFullInfo {
	if m != nil {
		return m.Data
	}
	return nil
}

// GetMultiStreamInfoReq 批量获取房间信息
type GetMultiStreamInfoReq struct {
	// 房间号
	RoomIds              []uint32 `protobuf:"varint,1,rep,packed,name=room_ids,json=roomIds" json:"room_ids,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetMultiStreamInfoReq) Reset()         { *m = GetMultiStreamInfoReq{} }
func (m *GetMultiStreamInfoReq) String() string { return proto.CompactTextString(m) }
func (*GetMultiStreamInfoReq) ProtoMessage()    {}
func (*GetMultiStreamInfoReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_5ed0cf4deb5559e0, []int{16}
}
func (m *GetMultiStreamInfoReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetMultiStreamInfoReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetMultiStreamInfoReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *GetMultiStreamInfoReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetMultiStreamInfoReq.Merge(dst, src)
}
func (m *GetMultiStreamInfoReq) XXX_Size() int {
	return m.Size()
}
func (m *GetMultiStreamInfoReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GetMultiStreamInfoReq.DiscardUnknown(m)
}

var xxx_messageInfo_GetMultiStreamInfoReq proto.InternalMessageInfo

func (m *GetMultiStreamInfoReq) GetRoomIds() []uint32 {
	if m != nil {
		return m.RoomIds
	}
	return nil
}

// GetOriginScreenShotPicReply 获取原图
type GetOriginScreenShotPicReply struct {
	// 房间号map截图地址
	List                 map[int64]string `protobuf:"bytes,1,rep,name=list" json:"list,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *GetOriginScreenShotPicReply) Reset()         { *m = GetOriginScreenShotPicReply{} }
func (m *GetOriginScreenShotPicReply) String() string { return proto.CompactTextString(m) }
func (*GetOriginScreenShotPicReply) ProtoMessage()    {}
func (*GetOriginScreenShotPicReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_5ed0cf4deb5559e0, []int{17}
}
func (m *GetOriginScreenShotPicReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetOriginScreenShotPicReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetOriginScreenShotPicReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *GetOriginScreenShotPicReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetOriginScreenShotPicReply.Merge(dst, src)
}
func (m *GetOriginScreenShotPicReply) XXX_Size() int {
	return m.Size()
}
func (m *GetOriginScreenShotPicReply) XXX_DiscardUnknown() {
	xxx_messageInfo_GetOriginScreenShotPicReply.DiscardUnknown(m)
}

var xxx_messageInfo_GetOriginScreenShotPicReply proto.InternalMessageInfo

func (m *GetOriginScreenShotPicReply) GetList() map[int64]string {
	if m != nil {
		return m.List
	}
	return nil
}

// GetOriginScreenShotPicReq 获取原图
type GetOriginScreenShotPicReq struct {
	// 房间号
	RoomIds string `protobuf:"bytes,1,opt,name=room_ids,json=roomIds,proto3" json:"room_ids,omitempty"`
	// 时间戳
	Ts                   int64    `protobuf:"varint,2,opt,name=ts,proto3" json:"ts,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetOriginScreenShotPicReq) Reset()         { *m = GetOriginScreenShotPicReq{} }
func (m *GetOriginScreenShotPicReq) String() string { return proto.CompactTextString(m) }
func (*GetOriginScreenShotPicReq) ProtoMessage()    {}
func (*GetOriginScreenShotPicReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_5ed0cf4deb5559e0, []int{18}
}
func (m *GetOriginScreenShotPicReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetOriginScreenShotPicReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetOriginScreenShotPicReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *GetOriginScreenShotPicReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetOriginScreenShotPicReq.Merge(dst, src)
}
func (m *GetOriginScreenShotPicReq) XXX_Size() int {
	return m.Size()
}
func (m *GetOriginScreenShotPicReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GetOriginScreenShotPicReq.DiscardUnknown(m)
}

var xxx_messageInfo_GetOriginScreenShotPicReq proto.InternalMessageInfo

func (m *GetOriginScreenShotPicReq) GetRoomIds() string {
	if m != nil {
		return m.RoomIds
	}
	return ""
}

func (m *GetOriginScreenShotPicReq) GetTs() int64 {
	if m != nil {
		return m.Ts
	}
	return 0
}

// GetRoomIDByStreamNameReply 获取房间号
type GetRoomIDByStreamNameReply struct {
	// 房间号
	RoomId               int64    `protobuf:"varint,1,opt,name=room_id,json=roomId,proto3" json:"room_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetRoomIDByStreamNameReply) Reset()         { *m = GetRoomIDByStreamNameReply{} }
func (m *GetRoomIDByStreamNameReply) String() string { return proto.CompactTextString(m) }
func (*GetRoomIDByStreamNameReply) ProtoMessage()    {}
func (*GetRoomIDByStreamNameReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_5ed0cf4deb5559e0, []int{19}
}
func (m *GetRoomIDByStreamNameReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetRoomIDByStreamNameReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetRoomIDByStreamNameReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *GetRoomIDByStreamNameReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetRoomIDByStreamNameReply.Merge(dst, src)
}
func (m *GetRoomIDByStreamNameReply) XXX_Size() int {
	return m.Size()
}
func (m *GetRoomIDByStreamNameReply) XXX_DiscardUnknown() {
	xxx_messageInfo_GetRoomIDByStreamNameReply.DiscardUnknown(m)
}

var xxx_messageInfo_GetRoomIDByStreamNameReply proto.InternalMessageInfo

func (m *GetRoomIDByStreamNameReply) GetRoomId() int64 {
	if m != nil {
		return m.RoomId
	}
	return 0
}

// GetRoomIDByStreamNameReq 获取房间号
type GetRoomIDByStreamNameReq struct {
	// 流名
	StreamName           string   `protobuf:"bytes,1,opt,name=stream_name,json=streamName,proto3" json:"stream_name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetRoomIDByStreamNameReq) Reset()         { *m = GetRoomIDByStreamNameReq{} }
func (m *GetRoomIDByStreamNameReq) String() string { return proto.CompactTextString(m) }
func (*GetRoomIDByStreamNameReq) ProtoMessage()    {}
func (*GetRoomIDByStreamNameReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_5ed0cf4deb5559e0, []int{20}
}
func (m *GetRoomIDByStreamNameReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetRoomIDByStreamNameReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetRoomIDByStreamNameReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *GetRoomIDByStreamNameReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetRoomIDByStreamNameReq.Merge(dst, src)
}
func (m *GetRoomIDByStreamNameReq) XXX_Size() int {
	return m.Size()
}
func (m *GetRoomIDByStreamNameReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GetRoomIDByStreamNameReq.DiscardUnknown(m)
}

var xxx_messageInfo_GetRoomIDByStreamNameReq proto.InternalMessageInfo

func (m *GetRoomIDByStreamNameReq) GetStreamName() string {
	if m != nil {
		return m.StreamName
	}
	return ""
}

// GetSingleScreeShotReply 获取单个截图
type GetSingleScreeShotReply struct {
	// 截图列表
	List                 []string `protobuf:"bytes,1,rep,name=list" json:"list,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetSingleScreeShotReply) Reset()         { *m = GetSingleScreeShotReply{} }
func (m *GetSingleScreeShotReply) String() string { return proto.CompactTextString(m) }
func (*GetSingleScreeShotReply) ProtoMessage()    {}
func (*GetSingleScreeShotReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_5ed0cf4deb5559e0, []int{21}
}
func (m *GetSingleScreeShotReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetSingleScreeShotReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetSingleScreeShotReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *GetSingleScreeShotReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetSingleScreeShotReply.Merge(dst, src)
}
func (m *GetSingleScreeShotReply) XXX_Size() int {
	return m.Size()
}
func (m *GetSingleScreeShotReply) XXX_DiscardUnknown() {
	xxx_messageInfo_GetSingleScreeShotReply.DiscardUnknown(m)
}

var xxx_messageInfo_GetSingleScreeShotReply proto.InternalMessageInfo

func (m *GetSingleScreeShotReply) GetList() []string {
	if m != nil {
		return m.List
	}
	return nil
}

// GetSingleScreeShotReq 获取单个截图
type GetSingleScreeShotReq struct {
	// 房间号
	RoomId int64 `protobuf:"varint,1,opt,name=room_id,json=roomId,proto3" json:"room_id,omitempty"`
	// 开始时间
	StartTime string `protobuf:"bytes,2,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	// 结束时间
	EndTime string `protobuf:"bytes,3,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	// channel
	Channel              string   `protobuf:"bytes,4,opt,name=channel,proto3" json:"channel,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetSingleScreeShotReq) Reset()         { *m = GetSingleScreeShotReq{} }
func (m *GetSingleScreeShotReq) String() string { return proto.CompactTextString(m) }
func (*GetSingleScreeShotReq) ProtoMessage()    {}
func (*GetSingleScreeShotReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_5ed0cf4deb5559e0, []int{22}
}
func (m *GetSingleScreeShotReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetSingleScreeShotReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetSingleScreeShotReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *GetSingleScreeShotReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetSingleScreeShotReq.Merge(dst, src)
}
func (m *GetSingleScreeShotReq) XXX_Size() int {
	return m.Size()
}
func (m *GetSingleScreeShotReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GetSingleScreeShotReq.DiscardUnknown(m)
}

var xxx_messageInfo_GetSingleScreeShotReq proto.InternalMessageInfo

func (m *GetSingleScreeShotReq) GetRoomId() int64 {
	if m != nil {
		return m.RoomId
	}
	return 0
}

func (m *GetSingleScreeShotReq) GetStartTime() string {
	if m != nil {
		return m.StartTime
	}
	return ""
}

func (m *GetSingleScreeShotReq) GetEndTime() string {
	if m != nil {
		return m.EndTime
	}
	return ""
}

func (m *GetSingleScreeShotReq) GetChannel() string {
	if m != nil {
		return m.Channel
	}
	return ""
}

// RoomSrcCheck 上行
type RoomSrcCheck struct {
	// 上行
	Src int64 `protobuf:"varint,1,opt,name=src,proto3" json:"src,omitempty"`
	// 是否被选择， 1或者0
	Checked int32 `protobuf:"varint,2,opt,name=checked,proto3" json:"checked,omitempty"`
	// 上行名称
	Desc                 string   `protobuf:"bytes,3,opt,name=desc,proto3" json:"desc,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RoomSrcCheck) Reset()         { *m = RoomSrcCheck{} }
func (m *RoomSrcCheck) String() string { return proto.CompactTextString(m) }
func (*RoomSrcCheck) ProtoMessage()    {}
func (*RoomSrcCheck) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_5ed0cf4deb5559e0, []int{23}
}
func (m *RoomSrcCheck) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RoomSrcCheck) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RoomSrcCheck.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *RoomSrcCheck) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RoomSrcCheck.Merge(dst, src)
}
func (m *RoomSrcCheck) XXX_Size() int {
	return m.Size()
}
func (m *RoomSrcCheck) XXX_DiscardUnknown() {
	xxx_messageInfo_RoomSrcCheck.DiscardUnknown(m)
}

var xxx_messageInfo_RoomSrcCheck proto.InternalMessageInfo

func (m *RoomSrcCheck) GetSrc() int64 {
	if m != nil {
		return m.Src
	}
	return 0
}

func (m *RoomSrcCheck) GetChecked() int32 {
	if m != nil {
		return m.Checked
	}
	return 0
}

func (m *RoomSrcCheck) GetDesc() string {
	if m != nil {
		return m.Desc
	}
	return ""
}

// GetSrcByRoomIDReply 获取上行信息
type GetSrcByRoomIDReply struct {
	// 上行列表
	List                 []*RoomSrcCheck `protobuf:"bytes,1,rep,name=list" json:"list,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *GetSrcByRoomIDReply) Reset()         { *m = GetSrcByRoomIDReply{} }
func (m *GetSrcByRoomIDReply) String() string { return proto.CompactTextString(m) }
func (*GetSrcByRoomIDReply) ProtoMessage()    {}
func (*GetSrcByRoomIDReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_5ed0cf4deb5559e0, []int{24}
}
func (m *GetSrcByRoomIDReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetSrcByRoomIDReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetSrcByRoomIDReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *GetSrcByRoomIDReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetSrcByRoomIDReply.Merge(dst, src)
}
func (m *GetSrcByRoomIDReply) XXX_Size() int {
	return m.Size()
}
func (m *GetSrcByRoomIDReply) XXX_DiscardUnknown() {
	xxx_messageInfo_GetSrcByRoomIDReply.DiscardUnknown(m)
}

var xxx_messageInfo_GetSrcByRoomIDReply proto.InternalMessageInfo

func (m *GetSrcByRoomIDReply) GetList() []*RoomSrcCheck {
	if m != nil {
		return m.List
	}
	return nil
}

// GetSrcByRoomIDReq 获取上行信息
type GetSrcByRoomIDReq struct {
	// 房间号
	RoomId               int64    `protobuf:"varint,1,opt,name=room_id,json=roomId,proto3" json:"room_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetSrcByRoomIDReq) Reset()         { *m = GetSrcByRoomIDReq{} }
func (m *GetSrcByRoomIDReq) String() string { return proto.CompactTextString(m) }
func (*GetSrcByRoomIDReq) ProtoMessage()    {}
func (*GetSrcByRoomIDReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_5ed0cf4deb5559e0, []int{25}
}
func (m *GetSrcByRoomIDReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetSrcByRoomIDReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetSrcByRoomIDReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *GetSrcByRoomIDReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetSrcByRoomIDReq.Merge(dst, src)
}
func (m *GetSrcByRoomIDReq) XXX_Size() int {
	return m.Size()
}
func (m *GetSrcByRoomIDReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GetSrcByRoomIDReq.DiscardUnknown(m)
}

var xxx_messageInfo_GetSrcByRoomIDReq proto.InternalMessageInfo

func (m *GetSrcByRoomIDReq) GetRoomId() int64 {
	if m != nil {
		return m.RoomId
	}
	return 0
}

// GetStreamInfoReply 获取单个流信息
type GetStreamInfoReply struct {
	// code
	Code int32 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	// message
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	// 流详细信息
	Data                 *StreamFullInfo `protobuf:"bytes,3,opt,name=data" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *GetStreamInfoReply) Reset()         { *m = GetStreamInfoReply{} }
func (m *GetStreamInfoReply) String() string { return proto.CompactTextString(m) }
func (*GetStreamInfoReply) ProtoMessage()    {}
func (*GetStreamInfoReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_5ed0cf4deb5559e0, []int{26}
}
func (m *GetStreamInfoReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetStreamInfoReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetStreamInfoReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *GetStreamInfoReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetStreamInfoReply.Merge(dst, src)
}
func (m *GetStreamInfoReply) XXX_Size() int {
	return m.Size()
}
func (m *GetStreamInfoReply) XXX_DiscardUnknown() {
	xxx_messageInfo_GetStreamInfoReply.DiscardUnknown(m)
}

var xxx_messageInfo_GetStreamInfoReply proto.InternalMessageInfo

func (m *GetStreamInfoReply) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *GetStreamInfoReply) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *GetStreamInfoReply) GetData() *StreamFullInfo {
	if m != nil {
		return m.Data
	}
	return nil
}

// GetStreamInfoReq 获取单个流信息
type GetStreamInfoReq struct {
	// 房间号
	RoomId uint32 `protobuf:"varint,1,opt,name=room_id,json=roomId,proto3" json:"room_id,omitempty"`
	// 流名
	StreamName           string   `protobuf:"bytes,2,opt,name=stream_name,json=streamName,proto3" json:"stream_name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetStreamInfoReq) Reset()         { *m = GetStreamInfoReq{} }
func (m *GetStreamInfoReq) String() string { return proto.CompactTextString(m) }
func (*GetStreamInfoReq) ProtoMessage()    {}
func (*GetStreamInfoReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_5ed0cf4deb5559e0, []int{27}
}
func (m *GetStreamInfoReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetStreamInfoReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetStreamInfoReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *GetStreamInfoReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetStreamInfoReq.Merge(dst, src)
}
func (m *GetStreamInfoReq) XXX_Size() int {
	return m.Size()
}
func (m *GetStreamInfoReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GetStreamInfoReq.DiscardUnknown(m)
}

var xxx_messageInfo_GetStreamInfoReq proto.InternalMessageInfo

func (m *GetStreamInfoReq) GetRoomId() uint32 {
	if m != nil {
		return m.RoomId
	}
	return 0
}

func (m *GetStreamInfoReq) GetStreamName() string {
	if m != nil {
		return m.StreamName
	}
	return ""
}

// GetStreamLastTimeReply 获取最后推流时间
type GetStreamLastTimeReply struct {
	// 最后推流时间， -1 正在推流
	LastTime             int64    `protobuf:"varint,1,opt,name=last_time,json=lastTime,proto3" json:"last_time,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetStreamLastTimeReply) Reset()         { *m = GetStreamLastTimeReply{} }
func (m *GetStreamLastTimeReply) String() string { return proto.CompactTextString(m) }
func (*GetStreamLastTimeReply) ProtoMessage()    {}
func (*GetStreamLastTimeReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_5ed0cf4deb5559e0, []int{28}
}
func (m *GetStreamLastTimeReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetStreamLastTimeReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetStreamLastTimeReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *GetStreamLastTimeReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetStreamLastTimeReply.Merge(dst, src)
}
func (m *GetStreamLastTimeReply) XXX_Size() int {
	return m.Size()
}
func (m *GetStreamLastTimeReply) XXX_DiscardUnknown() {
	xxx_messageInfo_GetStreamLastTimeReply.DiscardUnknown(m)
}

var xxx_messageInfo_GetStreamLastTimeReply proto.InternalMessageInfo

func (m *GetStreamLastTimeReply) GetLastTime() int64 {
	if m != nil {
		return m.LastTime
	}
	return 0
}

// GetStreamLastTimeReq 获取最后推流时间
type GetStreamLastTimeReq struct {
	// 房间号
	RoomId               int64    `protobuf:"varint,1,opt,name=room_id,json=roomId,proto3" json:"room_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetStreamLastTimeReq) Reset()         { *m = GetStreamLastTimeReq{} }
func (m *GetStreamLastTimeReq) String() string { return proto.CompactTextString(m) }
func (*GetStreamLastTimeReq) ProtoMessage()    {}
func (*GetStreamLastTimeReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_5ed0cf4deb5559e0, []int{29}
}
func (m *GetStreamLastTimeReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetStreamLastTimeReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetStreamLastTimeReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *GetStreamLastTimeReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetStreamLastTimeReq.Merge(dst, src)
}
func (m *GetStreamLastTimeReq) XXX_Size() int {
	return m.Size()
}
func (m *GetStreamLastTimeReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GetStreamLastTimeReq.DiscardUnknown(m)
}

var xxx_messageInfo_GetStreamLastTimeReq proto.InternalMessageInfo

func (m *GetStreamLastTimeReq) GetRoomId() int64 {
	if m != nil {
		return m.RoomId
	}
	return 0
}

// GetStreamNameByRoomIDReply 获取流名
type GetStreamNameByRoomIDReply struct {
	// 流名
	StreamName           string   `protobuf:"bytes,1,opt,name=stream_name,json=streamName,proto3" json:"stream_name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetStreamNameByRoomIDReply) Reset()         { *m = GetStreamNameByRoomIDReply{} }
func (m *GetStreamNameByRoomIDReply) String() string { return proto.CompactTextString(m) }
func (*GetStreamNameByRoomIDReply) ProtoMessage()    {}
func (*GetStreamNameByRoomIDReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_5ed0cf4deb5559e0, []int{30}
}
func (m *GetStreamNameByRoomIDReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetStreamNameByRoomIDReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetStreamNameByRoomIDReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *GetStreamNameByRoomIDReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetStreamNameByRoomIDReply.Merge(dst, src)
}
func (m *GetStreamNameByRoomIDReply) XXX_Size() int {
	return m.Size()
}
func (m *GetStreamNameByRoomIDReply) XXX_DiscardUnknown() {
	xxx_messageInfo_GetStreamNameByRoomIDReply.DiscardUnknown(m)
}

var xxx_messageInfo_GetStreamNameByRoomIDReply proto.InternalMessageInfo

func (m *GetStreamNameByRoomIDReply) GetStreamName() string {
	if m != nil {
		return m.StreamName
	}
	return ""
}

// GetStreamNameByRoomIDReq 获取流名
type GetStreamNameByRoomIDReq struct {
	// 房间号
	RoomId               int64    `protobuf:"varint,1,opt,name=room_id,json=roomId,proto3" json:"room_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetStreamNameByRoomIDReq) Reset()         { *m = GetStreamNameByRoomIDReq{} }
func (m *GetStreamNameByRoomIDReq) String() string { return proto.CompactTextString(m) }
func (*GetStreamNameByRoomIDReq) ProtoMessage()    {}
func (*GetStreamNameByRoomIDReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_5ed0cf4deb5559e0, []int{31}
}
func (m *GetStreamNameByRoomIDReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetStreamNameByRoomIDReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetStreamNameByRoomIDReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *GetStreamNameByRoomIDReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetStreamNameByRoomIDReq.Merge(dst, src)
}
func (m *GetStreamNameByRoomIDReq) XXX_Size() int {
	return m.Size()
}
func (m *GetStreamNameByRoomIDReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GetStreamNameByRoomIDReq.DiscardUnknown(m)
}

var xxx_messageInfo_GetStreamNameByRoomIDReq proto.InternalMessageInfo

func (m *GetStreamNameByRoomIDReq) GetRoomId() int64 {
	if m != nil {
		return m.RoomId
	}
	return 0
}

// GetUpStreamRtmpReply 获取上行推流地址
type GetUpStreamRtmpReply struct {
	// 上行推流地址
	Up                   *UpStreamRtmp `protobuf:"bytes,1,opt,name=up" json:"up,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *GetUpStreamRtmpReply) Reset()         { *m = GetUpStreamRtmpReply{} }
func (m *GetUpStreamRtmpReply) String() string { return proto.CompactTextString(m) }
func (*GetUpStreamRtmpReply) ProtoMessage()    {}
func (*GetUpStreamRtmpReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_5ed0cf4deb5559e0, []int{32}
}
func (m *GetUpStreamRtmpReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetUpStreamRtmpReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetUpStreamRtmpReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *GetUpStreamRtmpReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetUpStreamRtmpReply.Merge(dst, src)
}
func (m *GetUpStreamRtmpReply) XXX_Size() int {
	return m.Size()
}
func (m *GetUpStreamRtmpReply) XXX_DiscardUnknown() {
	xxx_messageInfo_GetUpStreamRtmpReply.DiscardUnknown(m)
}

var xxx_messageInfo_GetUpStreamRtmpReply proto.InternalMessageInfo

func (m *GetUpStreamRtmpReply) GetUp() *UpStreamRtmp {
	if m != nil {
		return m.Up
	}
	return nil
}

// GetUpStreamRtmpReq 获取上行推流地址
type GetUpStreamRtmpReq struct {
	// 房间号
	RoomId int64 `protobuf:"varint,1,opt,name=room_id,json=roomId,proto3" json:"room_id,omitempty"`
	// 免流
	FreeFlow string `protobuf:"bytes,2,opt,name=free_flow,json=freeFlow,proto3" json:"free_flow,omitempty"`
	// ip
	Ip string `protobuf:"bytes,3,opt,name=ip,proto3" json:"ip,omitempty"`
	// 所在区域
	AreaId int64 `protobuf:"varint,4,opt,name=area_id,json=areaId,proto3" json:"area_id,omitempty"`
	// 关注数
	Attentions int32 `protobuf:"varint,5,opt,name=attentions,proto3" json:"attentions,omitempty"`
	// uid
	Uid int64 `protobuf:"varint,6,opt,name=uid,proto3" json:"uid,omitempty"`
	// 平台
	Platform             string   `protobuf:"bytes,7,opt,name=platform,proto3" json:"platform,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetUpStreamRtmpReq) Reset()         { *m = GetUpStreamRtmpReq{} }
func (m *GetUpStreamRtmpReq) String() string { return proto.CompactTextString(m) }
func (*GetUpStreamRtmpReq) ProtoMessage()    {}
func (*GetUpStreamRtmpReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_5ed0cf4deb5559e0, []int{33}
}
func (m *GetUpStreamRtmpReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetUpStreamRtmpReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetUpStreamRtmpReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *GetUpStreamRtmpReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetUpStreamRtmpReq.Merge(dst, src)
}
func (m *GetUpStreamRtmpReq) XXX_Size() int {
	return m.Size()
}
func (m *GetUpStreamRtmpReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GetUpStreamRtmpReq.DiscardUnknown(m)
}

var xxx_messageInfo_GetUpStreamRtmpReq proto.InternalMessageInfo

func (m *GetUpStreamRtmpReq) GetRoomId() int64 {
	if m != nil {
		return m.RoomId
	}
	return 0
}

func (m *GetUpStreamRtmpReq) GetFreeFlow() string {
	if m != nil {
		return m.FreeFlow
	}
	return ""
}

func (m *GetUpStreamRtmpReq) GetIp() string {
	if m != nil {
		return m.Ip
	}
	return ""
}

func (m *GetUpStreamRtmpReq) GetAreaId() int64 {
	if m != nil {
		return m.AreaId
	}
	return 0
}

func (m *GetUpStreamRtmpReq) GetAttentions() int32 {
	if m != nil {
		return m.Attentions
	}
	return 0
}

func (m *GetUpStreamRtmpReq) GetUid() int64 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *GetUpStreamRtmpReq) GetPlatform() string {
	if m != nil {
		return m.Platform
	}
	return ""
}

// StreamBase 流基本信息
type StreamBase struct {
	// 流名
	StreamName string `protobuf:"bytes,1,opt,name=stream_name,json=streamName,proto3" json:"stream_name,omitempty"`
	// 默认上行
	DefaultUpstream uint32 `protobuf:"varint,2,opt,name=default_upstream,json=defaultUpstream,proto3" json:"default_upstream"`
	// 正在推流上行
	Origin uint32 `protobuf:"varint,3,opt,name=origin,proto3" json:"origin,omitempty"`
	// 转推cdn
	Forward []uint32 `protobuf:"varint,4,rep,packed,name=forward" json:"forward,omitempty"`
	// 主流1或者备用流2
	Type uint32 `protobuf:"varint,5,opt,name=type,proto3" json:"type,omitempty"`
	// 推流码
	Key string `protobuf:"bytes,6,opt,name=key,proto3" json:"key,omitempty"`
	// options
	Options              uint32   `protobuf:"varint,7,opt,name=options,proto3" json:"options,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StreamBase) Reset()         { *m = StreamBase{} }
func (m *StreamBase) String() string { return proto.CompactTextString(m) }
func (*StreamBase) ProtoMessage()    {}
func (*StreamBase) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_5ed0cf4deb5559e0, []int{34}
}
func (m *StreamBase) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StreamBase) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StreamBase.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *StreamBase) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StreamBase.Merge(dst, src)
}
func (m *StreamBase) XXX_Size() int {
	return m.Size()
}
func (m *StreamBase) XXX_DiscardUnknown() {
	xxx_messageInfo_StreamBase.DiscardUnknown(m)
}

var xxx_messageInfo_StreamBase proto.InternalMessageInfo

func (m *StreamBase) GetStreamName() string {
	if m != nil {
		return m.StreamName
	}
	return ""
}

func (m *StreamBase) GetDefaultUpstream() uint32 {
	if m != nil {
		return m.DefaultUpstream
	}
	return 0
}

func (m *StreamBase) GetOrigin() uint32 {
	if m != nil {
		return m.Origin
	}
	return 0
}

func (m *StreamBase) GetForward() []uint32 {
	if m != nil {
		return m.Forward
	}
	return nil
}

func (m *StreamBase) GetType() uint32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *StreamBase) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *StreamBase) GetOptions() uint32 {
	if m != nil {
		return m.Options
	}
	return 0
}

// StreamFullInfo 流信息完整结构
type StreamFullInfo struct {
	// 房间号
	RoomId uint32 `protobuf:"varint,1,opt,name=room_id,json=roomId,proto3" json:"room_id,omitempty"`
	// 是否为冷热流
	Hot uint32 `protobuf:"varint,2,opt,name=hot,proto3" json:"hot,omitempty"`
	// 流列表
	List                 []*StreamBase `protobuf:"bytes,3,rep,name=list" json:"list,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *StreamFullInfo) Reset()         { *m = StreamFullInfo{} }
func (m *StreamFullInfo) String() string { return proto.CompactTextString(m) }
func (*StreamFullInfo) ProtoMessage()    {}
func (*StreamFullInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_5ed0cf4deb5559e0, []int{35}
}
func (m *StreamFullInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StreamFullInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StreamFullInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *StreamFullInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StreamFullInfo.Merge(dst, src)
}
func (m *StreamFullInfo) XXX_Size() int {
	return m.Size()
}
func (m *StreamFullInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_StreamFullInfo.DiscardUnknown(m)
}

var xxx_messageInfo_StreamFullInfo proto.InternalMessageInfo

func (m *StreamFullInfo) GetRoomId() uint32 {
	if m != nil {
		return m.RoomId
	}
	return 0
}

func (m *StreamFullInfo) GetHot() uint32 {
	if m != nil {
		return m.Hot
	}
	return 0
}

func (m *StreamFullInfo) GetList() []*StreamBase {
	if m != nil {
		return m.List
	}
	return nil
}

// PingReply PingReply
type PingReply struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PingReply) Reset()         { *m = PingReply{} }
func (m *PingReply) String() string { return proto.CompactTextString(m) }
func (*PingReply) ProtoMessage()    {}
func (*PingReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_5ed0cf4deb5559e0, []int{36}
}
func (m *PingReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PingReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PingReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *PingReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PingReply.Merge(dst, src)
}
func (m *PingReply) XXX_Size() int {
	return m.Size()
}
func (m *PingReply) XXX_DiscardUnknown() {
	xxx_messageInfo_PingReply.DiscardUnknown(m)
}

var xxx_messageInfo_PingReply proto.InternalMessageInfo

// PingReq PingReq
type PingReq struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PingReq) Reset()         { *m = PingReq{} }
func (m *PingReq) String() string { return proto.CompactTextString(m) }
func (*PingReq) ProtoMessage()    {}
func (*PingReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_5ed0cf4deb5559e0, []int{37}
}
func (m *PingReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PingReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PingReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *PingReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PingReq.Merge(dst, src)
}
func (m *PingReq) XXX_Size() int {
	return m.Size()
}
func (m *PingReq) XXX_DiscardUnknown() {
	xxx_messageInfo_PingReq.DiscardUnknown(m)
}

var xxx_messageInfo_PingReq proto.InternalMessageInfo

// UpStreamRtmp 上行推流地址详细信息
type UpStreamRtmp struct {
	// 推流地址
	Addr string `protobuf:"bytes,1,opt,name=addr,proto3" json:"addr,omitempty"`
	// 推流码
	Code string `protobuf:"bytes,2,opt,name=code,proto3" json:"code,omitempty"`
	// new link
	NewLink              string   `protobuf:"bytes,3,opt,name=new_link,json=newLink,proto3" json:"new_link,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpStreamRtmp) Reset()         { *m = UpStreamRtmp{} }
func (m *UpStreamRtmp) String() string { return proto.CompactTextString(m) }
func (*UpStreamRtmp) ProtoMessage()    {}
func (*UpStreamRtmp) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_5ed0cf4deb5559e0, []int{38}
}
func (m *UpStreamRtmp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpStreamRtmp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpStreamRtmp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *UpStreamRtmp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpStreamRtmp.Merge(dst, src)
}
func (m *UpStreamRtmp) XXX_Size() int {
	return m.Size()
}
func (m *UpStreamRtmp) XXX_DiscardUnknown() {
	xxx_messageInfo_UpStreamRtmp.DiscardUnknown(m)
}

var xxx_messageInfo_UpStreamRtmp proto.InternalMessageInfo

func (m *UpStreamRtmp) GetAddr() string {
	if m != nil {
		return m.Addr
	}
	return ""
}

func (m *UpStreamRtmp) GetCode() string {
	if m != nil {
		return m.Code
	}
	return ""
}

func (m *UpStreamRtmp) GetNewLink() string {
	if m != nil {
		return m.NewLink
	}
	return ""
}

// StreamCutReq 切流
type StreamCutReq struct {
	// 房间号
	RoomId int64 `protobuf:"varint,1,opt,name=room_id,json=roomId,proto3" json:"room_id,omitempty"`
	// 切流时间
	CutTime              int64    `protobuf:"varint,2,opt,name=cut_time,json=cutTime,proto3" json:"cut_time,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StreamCutReq) Reset()         { *m = StreamCutReq{} }
func (m *StreamCutReq) String() string { return proto.CompactTextString(m) }
func (*StreamCutReq) ProtoMessage()    {}
func (*StreamCutReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_5ed0cf4deb5559e0, []int{39}
}
func (m *StreamCutReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StreamCutReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StreamCutReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *StreamCutReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StreamCutReq.Merge(dst, src)
}
func (m *StreamCutReq) XXX_Size() int {
	return m.Size()
}
func (m *StreamCutReq) XXX_DiscardUnknown() {
	xxx_messageInfo_StreamCutReq.DiscardUnknown(m)
}

var xxx_messageInfo_StreamCutReq proto.InternalMessageInfo

func (m *StreamCutReq) GetRoomId() int64 {
	if m != nil {
		return m.RoomId
	}
	return 0
}

func (m *StreamCutReq) GetCutTime() int64 {
	if m != nil {
		return m.CutTime
	}
	return 0
}

// TimeTime 时间
type TimeTime struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TimeTime) Reset()         { *m = TimeTime{} }
func (m *TimeTime) String() string { return proto.CompactTextString(m) }
func (*TimeTime) ProtoMessage()    {}
func (*TimeTime) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_5ed0cf4deb5559e0, []int{40}
}
func (m *TimeTime) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TimeTime) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TimeTime.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *TimeTime) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TimeTime.Merge(dst, src)
}
func (m *TimeTime) XXX_Size() int {
	return m.Size()
}
func (m *TimeTime) XXX_DiscardUnknown() {
	xxx_messageInfo_TimeTime.DiscardUnknown(m)
}

var xxx_messageInfo_TimeTime proto.InternalMessageInfo

type CheckLiveStreamReq struct {
	RoomId               []int64  `protobuf:"varint,1,rep,packed,name=room_id,json=roomId" json:"room_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CheckLiveStreamReq) Reset()         { *m = CheckLiveStreamReq{} }
func (m *CheckLiveStreamReq) String() string { return proto.CompactTextString(m) }
func (*CheckLiveStreamReq) ProtoMessage()    {}
func (*CheckLiveStreamReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_5ed0cf4deb5559e0, []int{41}
}
func (m *CheckLiveStreamReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CheckLiveStreamReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CheckLiveStreamReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *CheckLiveStreamReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CheckLiveStreamReq.Merge(dst, src)
}
func (m *CheckLiveStreamReq) XXX_Size() int {
	return m.Size()
}
func (m *CheckLiveStreamReq) XXX_DiscardUnknown() {
	xxx_messageInfo_CheckLiveStreamReq.DiscardUnknown(m)
}

var xxx_messageInfo_CheckLiveStreamReq proto.InternalMessageInfo

func (m *CheckLiveStreamReq) GetRoomId() []int64 {
	if m != nil {
		return m.RoomId
	}
	return nil
}

type CheckLiveStreamReply struct {
	List                 map[int64]bool `protobuf:"bytes,1,rep,name=list" json:"list,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *CheckLiveStreamReply) Reset()         { *m = CheckLiveStreamReply{} }
func (m *CheckLiveStreamReply) String() string { return proto.CompactTextString(m) }
func (*CheckLiveStreamReply) ProtoMessage()    {}
func (*CheckLiveStreamReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_api_5ed0cf4deb5559e0, []int{42}
}
func (m *CheckLiveStreamReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CheckLiveStreamReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CheckLiveStreamReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *CheckLiveStreamReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CheckLiveStreamReply.Merge(dst, src)
}
func (m *CheckLiveStreamReply) XXX_Size() int {
	return m.Size()
}
func (m *CheckLiveStreamReply) XXX_DiscardUnknown() {
	xxx_messageInfo_CheckLiveStreamReply.DiscardUnknown(m)
}

var xxx_messageInfo_CheckLiveStreamReply proto.InternalMessageInfo

func (m *CheckLiveStreamReply) GetList() map[int64]bool {
	if m != nil {
		return m.List
	}
	return nil
}

func init() {
	proto.RegisterType((*EmptyStruct)(nil), "video.live.streamng.v1.EmptyStruct")
	proto.RegisterType((*ChangeSrcReq)(nil), "video.live.streamng.v1.ChangeSrcReq")
	proto.RegisterType((*ClearStreamStatusReq)(nil), "video.live.streamng.v1.ClearStreamStatusReq")
	proto.RegisterType((*CloseReply)(nil), "video.live.streamng.v1.CloseReply")
	proto.RegisterType((*CloseReq)(nil), "video.live.streamng.v1.CloseReq")
	proto.RegisterType((*CreateOfficalStreamReply)(nil), "video.live.streamng.v1.CreateOfficalStreamReply")
	proto.RegisterType((*CreateOfficalStreamReq)(nil), "video.live.streamng.v1.CreateOfficalStreamReq")
	proto.RegisterType((*AdapterStream)(nil), "video.live.streamng.v1.AdapterStream")
	proto.RegisterType((*GetAdapterStreamByStreamNameReply)(nil), "video.live.streamng.v1.GetAdapterStreamByStreamNameReply")
	proto.RegisterMapType((map[string]*AdapterStream)(nil), "video.live.streamng.v1.GetAdapterStreamByStreamNameReply.ListEntry")
	proto.RegisterType((*GetAdapterStreamByStreamNameReq)(nil), "video.live.streamng.v1.GetAdapterStreamByStreamNameReq")
	proto.RegisterType((*LineList)(nil), "video.live.streamng.v1.LineList")
	proto.RegisterType((*GetLineListByRoomIDReply)(nil), "video.live.streamng.v1.GetLineListByRoomIDReply")
	proto.RegisterType((*GetLineListByRoomIDReq)(nil), "video.live.streamng.v1.GetLineListByRoomIDReq")
	proto.RegisterType((*GetMultiScreenShotReply)(nil), "video.live.streamng.v1.GetMultiScreenShotReply")
	proto.RegisterMapType((map[int64]string)(nil), "video.live.streamng.v1.GetMultiScreenShotReply.ListEntry")
	proto.RegisterType((*GetMultiScreenShotReq)(nil), "video.live.streamng.v1.GetMultiScreenShotReq")
	proto.RegisterType((*GetMultiStreamInfoReply)(nil), "video.live.streamng.v1.GetMultiStreamInfoReply")
	proto.RegisterMapType((map[uint32]*StreamFullInfo)(nil), "video.live.streamng.v1.GetMultiStreamInfoReply.DataEntry")
	proto.RegisterType((*GetMultiStreamInfoReq)(nil), "video.live.streamng.v1.GetMultiStreamInfoReq")
	proto.RegisterType((*GetOriginScreenShotPicReply)(nil), "video.live.streamng.v1.GetOriginScreenShotPicReply")
	proto.RegisterMapType((map[int64]string)(nil), "video.live.streamng.v1.GetOriginScreenShotPicReply.ListEntry")
	proto.RegisterType((*GetOriginScreenShotPicReq)(nil), "video.live.streamng.v1.GetOriginScreenShotPicReq")
	proto.RegisterType((*GetRoomIDByStreamNameReply)(nil), "video.live.streamng.v1.GetRoomIDByStreamNameReply")
	proto.RegisterType((*GetRoomIDByStreamNameReq)(nil), "video.live.streamng.v1.GetRoomIDByStreamNameReq")
	proto.RegisterType((*GetSingleScreeShotReply)(nil), "video.live.streamng.v1.GetSingleScreeShotReply")
	proto.RegisterType((*GetSingleScreeShotReq)(nil), "video.live.streamng.v1.GetSingleScreeShotReq")
	proto.RegisterType((*RoomSrcCheck)(nil), "video.live.streamng.v1.RoomSrcCheck")
	proto.RegisterType((*GetSrcByRoomIDReply)(nil), "video.live.streamng.v1.GetSrcByRoomIDReply")
	proto.RegisterType((*GetSrcByRoomIDReq)(nil), "video.live.streamng.v1.GetSrcByRoomIDReq")
	proto.RegisterType((*GetStreamInfoReply)(nil), "video.live.streamng.v1.GetStreamInfoReply")
	proto.RegisterType((*GetStreamInfoReq)(nil), "video.live.streamng.v1.GetStreamInfoReq")
	proto.RegisterType((*GetStreamLastTimeReply)(nil), "video.live.streamng.v1.GetStreamLastTimeReply")
	proto.RegisterType((*GetStreamLastTimeReq)(nil), "video.live.streamng.v1.GetStreamLastTimeReq")
	proto.RegisterType((*GetStreamNameByRoomIDReply)(nil), "video.live.streamng.v1.GetStreamNameByRoomIDReply")
	proto.RegisterType((*GetStreamNameByRoomIDReq)(nil), "video.live.streamng.v1.GetStreamNameByRoomIDReq")
	proto.RegisterType((*GetUpStreamRtmpReply)(nil), "video.live.streamng.v1.GetUpStreamRtmpReply")
	proto.RegisterType((*GetUpStreamRtmpReq)(nil), "video.live.streamng.v1.GetUpStreamRtmpReq")
	proto.RegisterType((*StreamBase)(nil), "video.live.streamng.v1.StreamBase")
	proto.RegisterType((*StreamFullInfo)(nil), "video.live.streamng.v1.StreamFullInfo")
	proto.RegisterType((*PingReply)(nil), "video.live.streamng.v1.PingReply")
	proto.RegisterType((*PingReq)(nil), "video.live.streamng.v1.PingReq")
	proto.RegisterType((*UpStreamRtmp)(nil), "video.live.streamng.v1.UpStreamRtmp")
	proto.RegisterType((*StreamCutReq)(nil), "video.live.streamng.v1.StreamCutReq")
	proto.RegisterType((*TimeTime)(nil), "video.live.streamng.v1.TimeTime")
	proto.RegisterType((*CheckLiveStreamReq)(nil), "video.live.streamng.v1.CheckLiveStreamReq")
	proto.RegisterType((*CheckLiveStreamReply)(nil), "video.live.streamng.v1.CheckLiveStreamReply")
	proto.RegisterMapType((map[int64]bool)(nil), "video.live.streamng.v1.CheckLiveStreamReply.ListEntry")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// StreamClient is the client API for Stream service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type StreamClient interface {
	// GetSingleScreeShot
	GetSingleScreeShot(ctx context.Context, in *GetSingleScreeShotReq, opts ...grpc.CallOption) (*GetSingleScreeShotReply, error)
	// GetMultiScreenShot
	GetMultiScreenShot(ctx context.Context, in *GetMultiScreenShotReq, opts ...grpc.CallOption) (*GetMultiScreenShotReply, error)
	// GetOriginScreenShotPic
	GetOriginScreenShotPic(ctx context.Context, in *GetOriginScreenShotPicReq, opts ...grpc.CallOption) (*GetOriginScreenShotPicReply, error)
	// CreateOfficeStream 创建正式流
	CreateOfficalStream(ctx context.Context, in *CreateOfficalStreamReq, opts ...grpc.CallOption) (*CreateOfficalStreamReply, error)
	// GetStreamInfo 获取单个流信息
	GetStreamInfo(ctx context.Context, in *GetStreamInfoReq, opts ...grpc.CallOption) (*GetStreamInfoReply, error)
	// GetMultiStreamInfo 批量获取流信息
	GetMultiStreamInfo(ctx context.Context, in *GetMultiStreamInfoReq, opts ...grpc.CallOption) (*GetMultiStreamInfoReply, error)
	// ChangeSrc 切换cdn
	ChangeSrc(ctx context.Context, in *ChangeSrcReq, opts ...grpc.CallOption) (*EmptyStruct, error)
	// GetStreamLastTime 得到流到最后推流时间;主流的推流时间up_rank = 1
	GetStreamLastTime(ctx context.Context, in *GetStreamLastTimeReq, opts ...grpc.CallOption) (*GetStreamLastTimeReply, error)
	// GetStreamNameByRoomID 需要考虑备用流 + 考虑短号
	GetStreamNameByRoomID(ctx context.Context, in *GetStreamNameByRoomIDReq, opts ...grpc.CallOption) (*GetStreamNameByRoomIDReply, error)
	// GetRoomIDByStreamName 查询房间号
	GetRoomIDByStreamName(ctx context.Context, in *GetRoomIDByStreamNameReq, opts ...grpc.CallOption) (*GetRoomIDByStreamNameReply, error)
	// GetAdapterStreamByStreamName 适配结果输出, 此处也可以输入备用流， 该结果只输出直推上行
	GetAdapterStreamByStreamName(ctx context.Context, in *GetAdapterStreamByStreamNameReq, opts ...grpc.CallOption) (*GetAdapterStreamByStreamNameReply, error)
	// GetSrcByRoomID
	GetSrcByRoomID(ctx context.Context, in *GetSrcByRoomIDReq, opts ...grpc.CallOption) (*GetSrcByRoomIDReply, error)
	// GetLineListByRoomID
	GetLineListByRoomID(ctx context.Context, in *GetLineListByRoomIDReq, opts ...grpc.CallOption) (*GetLineListByRoomIDReply, error)
	// GetUpStreamRtmp UpStream
	GetUpStreamRtmp(ctx context.Context, in *GetUpStreamRtmpReq, opts ...grpc.CallOption) (*GetUpStreamRtmpReply, error)
	// StreamCut 切流的房间和时间, 内部调用
	StreamCut(ctx context.Context, in *StreamCutReq, opts ...grpc.CallOption) (*EmptyStruct, error)
	// Ping Service
	Ping(ctx context.Context, in *PingReq, opts ...grpc.CallOption) (*PingReply, error)
	// Close Service
	Close(ctx context.Context, in *CloseReq, opts ...grpc.CallOption) (*CloseReply, error)
	// ClearRetweetRecord
	ClearStreamStatus(ctx context.Context, in *ClearStreamStatusReq, opts ...grpc.CallOption) (*EmptyStruct, error)
	// CheckLiveStreamList
	CheckLiveStreamList(ctx context.Context, in *CheckLiveStreamReq, opts ...grpc.CallOption) (*CheckLiveStreamReply, error)
}

type streamClient struct {
	cc *grpc.ClientConn
}

func NewStreamClient(cc *grpc.ClientConn) StreamClient {
	return &streamClient{cc}
}

func (c *streamClient) GetSingleScreeShot(ctx context.Context, in *GetSingleScreeShotReq, opts ...grpc.CallOption) (*GetSingleScreeShotReply, error) {
	out := new(GetSingleScreeShotReply)
	err := c.cc.Invoke(ctx, "/video.live.streamng.v1.Stream/GetSingleScreeShot", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamClient) GetMultiScreenShot(ctx context.Context, in *GetMultiScreenShotReq, opts ...grpc.CallOption) (*GetMultiScreenShotReply, error) {
	out := new(GetMultiScreenShotReply)
	err := c.cc.Invoke(ctx, "/video.live.streamng.v1.Stream/GetMultiScreenShot", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamClient) GetOriginScreenShotPic(ctx context.Context, in *GetOriginScreenShotPicReq, opts ...grpc.CallOption) (*GetOriginScreenShotPicReply, error) {
	out := new(GetOriginScreenShotPicReply)
	err := c.cc.Invoke(ctx, "/video.live.streamng.v1.Stream/GetOriginScreenShotPic", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamClient) CreateOfficalStream(ctx context.Context, in *CreateOfficalStreamReq, opts ...grpc.CallOption) (*CreateOfficalStreamReply, error) {
	out := new(CreateOfficalStreamReply)
	err := c.cc.Invoke(ctx, "/video.live.streamng.v1.Stream/CreateOfficalStream", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamClient) GetStreamInfo(ctx context.Context, in *GetStreamInfoReq, opts ...grpc.CallOption) (*GetStreamInfoReply, error) {
	out := new(GetStreamInfoReply)
	err := c.cc.Invoke(ctx, "/video.live.streamng.v1.Stream/GetStreamInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamClient) GetMultiStreamInfo(ctx context.Context, in *GetMultiStreamInfoReq, opts ...grpc.CallOption) (*GetMultiStreamInfoReply, error) {
	out := new(GetMultiStreamInfoReply)
	err := c.cc.Invoke(ctx, "/video.live.streamng.v1.Stream/GetMultiStreamInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamClient) ChangeSrc(ctx context.Context, in *ChangeSrcReq, opts ...grpc.CallOption) (*EmptyStruct, error) {
	out := new(EmptyStruct)
	err := c.cc.Invoke(ctx, "/video.live.streamng.v1.Stream/ChangeSrc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamClient) GetStreamLastTime(ctx context.Context, in *GetStreamLastTimeReq, opts ...grpc.CallOption) (*GetStreamLastTimeReply, error) {
	out := new(GetStreamLastTimeReply)
	err := c.cc.Invoke(ctx, "/video.live.streamng.v1.Stream/GetStreamLastTime", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamClient) GetStreamNameByRoomID(ctx context.Context, in *GetStreamNameByRoomIDReq, opts ...grpc.CallOption) (*GetStreamNameByRoomIDReply, error) {
	out := new(GetStreamNameByRoomIDReply)
	err := c.cc.Invoke(ctx, "/video.live.streamng.v1.Stream/GetStreamNameByRoomID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamClient) GetRoomIDByStreamName(ctx context.Context, in *GetRoomIDByStreamNameReq, opts ...grpc.CallOption) (*GetRoomIDByStreamNameReply, error) {
	out := new(GetRoomIDByStreamNameReply)
	err := c.cc.Invoke(ctx, "/video.live.streamng.v1.Stream/GetRoomIDByStreamName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamClient) GetAdapterStreamByStreamName(ctx context.Context, in *GetAdapterStreamByStreamNameReq, opts ...grpc.CallOption) (*GetAdapterStreamByStreamNameReply, error) {
	out := new(GetAdapterStreamByStreamNameReply)
	err := c.cc.Invoke(ctx, "/video.live.streamng.v1.Stream/GetAdapterStreamByStreamName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamClient) GetSrcByRoomID(ctx context.Context, in *GetSrcByRoomIDReq, opts ...grpc.CallOption) (*GetSrcByRoomIDReply, error) {
	out := new(GetSrcByRoomIDReply)
	err := c.cc.Invoke(ctx, "/video.live.streamng.v1.Stream/GetSrcByRoomID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamClient) GetLineListByRoomID(ctx context.Context, in *GetLineListByRoomIDReq, opts ...grpc.CallOption) (*GetLineListByRoomIDReply, error) {
	out := new(GetLineListByRoomIDReply)
	err := c.cc.Invoke(ctx, "/video.live.streamng.v1.Stream/GetLineListByRoomID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamClient) GetUpStreamRtmp(ctx context.Context, in *GetUpStreamRtmpReq, opts ...grpc.CallOption) (*GetUpStreamRtmpReply, error) {
	out := new(GetUpStreamRtmpReply)
	err := c.cc.Invoke(ctx, "/video.live.streamng.v1.Stream/GetUpStreamRtmp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamClient) StreamCut(ctx context.Context, in *StreamCutReq, opts ...grpc.CallOption) (*EmptyStruct, error) {
	out := new(EmptyStruct)
	err := c.cc.Invoke(ctx, "/video.live.streamng.v1.Stream/StreamCut", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamClient) Ping(ctx context.Context, in *PingReq, opts ...grpc.CallOption) (*PingReply, error) {
	out := new(PingReply)
	err := c.cc.Invoke(ctx, "/video.live.streamng.v1.Stream/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamClient) Close(ctx context.Context, in *CloseReq, opts ...grpc.CallOption) (*CloseReply, error) {
	out := new(CloseReply)
	err := c.cc.Invoke(ctx, "/video.live.streamng.v1.Stream/Close", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamClient) ClearStreamStatus(ctx context.Context, in *ClearStreamStatusReq, opts ...grpc.CallOption) (*EmptyStruct, error) {
	out := new(EmptyStruct)
	err := c.cc.Invoke(ctx, "/video.live.streamng.v1.Stream/ClearStreamStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamClient) CheckLiveStreamList(ctx context.Context, in *CheckLiveStreamReq, opts ...grpc.CallOption) (*CheckLiveStreamReply, error) {
	out := new(CheckLiveStreamReply)
	err := c.cc.Invoke(ctx, "/video.live.streamng.v1.Stream/CheckLiveStreamList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StreamServer is the server API for Stream service.
type StreamServer interface {
	// GetSingleScreeShot
	GetSingleScreeShot(context.Context, *GetSingleScreeShotReq) (*GetSingleScreeShotReply, error)
	// GetMultiScreenShot
	GetMultiScreenShot(context.Context, *GetMultiScreenShotReq) (*GetMultiScreenShotReply, error)
	// GetOriginScreenShotPic
	GetOriginScreenShotPic(context.Context, *GetOriginScreenShotPicReq) (*GetOriginScreenShotPicReply, error)
	// CreateOfficeStream 创建正式流
	CreateOfficalStream(context.Context, *CreateOfficalStreamReq) (*CreateOfficalStreamReply, error)
	// GetStreamInfo 获取单个流信息
	GetStreamInfo(context.Context, *GetStreamInfoReq) (*GetStreamInfoReply, error)
	// GetMultiStreamInfo 批量获取流信息
	GetMultiStreamInfo(context.Context, *GetMultiStreamInfoReq) (*GetMultiStreamInfoReply, error)
	// ChangeSrc 切换cdn
	ChangeSrc(context.Context, *ChangeSrcReq) (*EmptyStruct, error)
	// GetStreamLastTime 得到流到最后推流时间;主流的推流时间up_rank = 1
	GetStreamLastTime(context.Context, *GetStreamLastTimeReq) (*GetStreamLastTimeReply, error)
	// GetStreamNameByRoomID 需要考虑备用流 + 考虑短号
	GetStreamNameByRoomID(context.Context, *GetStreamNameByRoomIDReq) (*GetStreamNameByRoomIDReply, error)
	// GetRoomIDByStreamName 查询房间号
	GetRoomIDByStreamName(context.Context, *GetRoomIDByStreamNameReq) (*GetRoomIDByStreamNameReply, error)
	// GetAdapterStreamByStreamName 适配结果输出, 此处也可以输入备用流， 该结果只输出直推上行
	GetAdapterStreamByStreamName(context.Context, *GetAdapterStreamByStreamNameReq) (*GetAdapterStreamByStreamNameReply, error)
	// GetSrcByRoomID
	GetSrcByRoomID(context.Context, *GetSrcByRoomIDReq) (*GetSrcByRoomIDReply, error)
	// GetLineListByRoomID
	GetLineListByRoomID(context.Context, *GetLineListByRoomIDReq) (*GetLineListByRoomIDReply, error)
	// GetUpStreamRtmp UpStream
	GetUpStreamRtmp(context.Context, *GetUpStreamRtmpReq) (*GetUpStreamRtmpReply, error)
	// StreamCut 切流的房间和时间, 内部调用
	StreamCut(context.Context, *StreamCutReq) (*EmptyStruct, error)
	// Ping Service
	Ping(context.Context, *PingReq) (*PingReply, error)
	// Close Service
	Close(context.Context, *CloseReq) (*CloseReply, error)
	// ClearRetweetRecord
	ClearStreamStatus(context.Context, *ClearStreamStatusReq) (*EmptyStruct, error)
	// CheckLiveStreamList
	CheckLiveStreamList(context.Context, *CheckLiveStreamReq) (*CheckLiveStreamReply, error)
}

func RegisterStreamServer(s *grpc.Server, srv StreamServer) {
	s.RegisterService(&_Stream_serviceDesc, srv)
}

func _Stream_GetSingleScreeShot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSingleScreeShotReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamServer).GetSingleScreeShot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/video.live.streamng.v1.Stream/GetSingleScreeShot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamServer).GetSingleScreeShot(ctx, req.(*GetSingleScreeShotReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Stream_GetMultiScreenShot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMultiScreenShotReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamServer).GetMultiScreenShot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/video.live.streamng.v1.Stream/GetMultiScreenShot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamServer).GetMultiScreenShot(ctx, req.(*GetMultiScreenShotReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Stream_GetOriginScreenShotPic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOriginScreenShotPicReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamServer).GetOriginScreenShotPic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/video.live.streamng.v1.Stream/GetOriginScreenShotPic",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamServer).GetOriginScreenShotPic(ctx, req.(*GetOriginScreenShotPicReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Stream_CreateOfficalStream_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOfficalStreamReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamServer).CreateOfficalStream(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/video.live.streamng.v1.Stream/CreateOfficalStream",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamServer).CreateOfficalStream(ctx, req.(*CreateOfficalStreamReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Stream_GetStreamInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStreamInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamServer).GetStreamInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/video.live.streamng.v1.Stream/GetStreamInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamServer).GetStreamInfo(ctx, req.(*GetStreamInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Stream_GetMultiStreamInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMultiStreamInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamServer).GetMultiStreamInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/video.live.streamng.v1.Stream/GetMultiStreamInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamServer).GetMultiStreamInfo(ctx, req.(*GetMultiStreamInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Stream_ChangeSrc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeSrcReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamServer).ChangeSrc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/video.live.streamng.v1.Stream/ChangeSrc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamServer).ChangeSrc(ctx, req.(*ChangeSrcReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Stream_GetStreamLastTime_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStreamLastTimeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamServer).GetStreamLastTime(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/video.live.streamng.v1.Stream/GetStreamLastTime",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamServer).GetStreamLastTime(ctx, req.(*GetStreamLastTimeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Stream_GetStreamNameByRoomID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStreamNameByRoomIDReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamServer).GetStreamNameByRoomID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/video.live.streamng.v1.Stream/GetStreamNameByRoomID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamServer).GetStreamNameByRoomID(ctx, req.(*GetStreamNameByRoomIDReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Stream_GetRoomIDByStreamName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRoomIDByStreamNameReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamServer).GetRoomIDByStreamName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/video.live.streamng.v1.Stream/GetRoomIDByStreamName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamServer).GetRoomIDByStreamName(ctx, req.(*GetRoomIDByStreamNameReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Stream_GetAdapterStreamByStreamName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAdapterStreamByStreamNameReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamServer).GetAdapterStreamByStreamName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/video.live.streamng.v1.Stream/GetAdapterStreamByStreamName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamServer).GetAdapterStreamByStreamName(ctx, req.(*GetAdapterStreamByStreamNameReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Stream_GetSrcByRoomID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSrcByRoomIDReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamServer).GetSrcByRoomID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/video.live.streamng.v1.Stream/GetSrcByRoomID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamServer).GetSrcByRoomID(ctx, req.(*GetSrcByRoomIDReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Stream_GetLineListByRoomID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLineListByRoomIDReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamServer).GetLineListByRoomID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/video.live.streamng.v1.Stream/GetLineListByRoomID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamServer).GetLineListByRoomID(ctx, req.(*GetLineListByRoomIDReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Stream_GetUpStreamRtmp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUpStreamRtmpReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamServer).GetUpStreamRtmp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/video.live.streamng.v1.Stream/GetUpStreamRtmp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamServer).GetUpStreamRtmp(ctx, req.(*GetUpStreamRtmpReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Stream_StreamCut_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StreamCutReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamServer).StreamCut(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/video.live.streamng.v1.Stream/StreamCut",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamServer).StreamCut(ctx, req.(*StreamCutReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Stream_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/video.live.streamng.v1.Stream/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamServer).Ping(ctx, req.(*PingReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Stream_Close_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CloseReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamServer).Close(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/video.live.streamng.v1.Stream/Close",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamServer).Close(ctx, req.(*CloseReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Stream_ClearStreamStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClearStreamStatusReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamServer).ClearStreamStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/video.live.streamng.v1.Stream/ClearStreamStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamServer).ClearStreamStatus(ctx, req.(*ClearStreamStatusReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Stream_CheckLiveStreamList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckLiveStreamReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamServer).CheckLiveStreamList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/video.live.streamng.v1.Stream/CheckLiveStreamList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamServer).CheckLiveStreamList(ctx, req.(*CheckLiveStreamReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _Stream_serviceDesc = grpc.ServiceDesc{
	ServiceName: "video.live.streamng.v1.Stream",
	HandlerType: (*StreamServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetSingleScreeShot",
			Handler:    _Stream_GetSingleScreeShot_Handler,
		},
		{
			MethodName: "GetMultiScreenShot",
			Handler:    _Stream_GetMultiScreenShot_Handler,
		},
		{
			MethodName: "GetOriginScreenShotPic",
			Handler:    _Stream_GetOriginScreenShotPic_Handler,
		},
		{
			MethodName: "CreateOfficalStream",
			Handler:    _Stream_CreateOfficalStream_Handler,
		},
		{
			MethodName: "GetStreamInfo",
			Handler:    _Stream_GetStreamInfo_Handler,
		},
		{
			MethodName: "GetMultiStreamInfo",
			Handler:    _Stream_GetMultiStreamInfo_Handler,
		},
		{
			MethodName: "ChangeSrc",
			Handler:    _Stream_ChangeSrc_Handler,
		},
		{
			MethodName: "GetStreamLastTime",
			Handler:    _Stream_GetStreamLastTime_Handler,
		},
		{
			MethodName: "GetStreamNameByRoomID",
			Handler:    _Stream_GetStreamNameByRoomID_Handler,
		},
		{
			MethodName: "GetRoomIDByStreamName",
			Handler:    _Stream_GetRoomIDByStreamName_Handler,
		},
		{
			MethodName: "GetAdapterStreamByStreamName",
			Handler:    _Stream_GetAdapterStreamByStreamName_Handler,
		},
		{
			MethodName: "GetSrcByRoomID",
			Handler:    _Stream_GetSrcByRoomID_Handler,
		},
		{
			MethodName: "GetLineListByRoomID",
			Handler:    _Stream_GetLineListByRoomID_Handler,
		},
		{
			MethodName: "GetUpStreamRtmp",
			Handler:    _Stream_GetUpStreamRtmp_Handler,
		},
		{
			MethodName: "StreamCut",
			Handler:    _Stream_StreamCut_Handler,
		},
		{
			MethodName: "Ping",
			Handler:    _Stream_Ping_Handler,
		},
		{
			MethodName: "Close",
			Handler:    _Stream_Close_Handler,
		},
		{
			MethodName: "ClearStreamStatus",
			Handler:    _Stream_ClearStreamStatus_Handler,
		},
		{
			MethodName: "CheckLiveStreamList",
			Handler:    _Stream_CheckLiveStreamList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "app/service/video/stream-mng/api/v1/api.proto",
}

func (m *EmptyStruct) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EmptyStruct) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ChangeSrcReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChangeSrcReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.RoomId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.RoomId))
	}
	if m.Src != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Src))
	}
	if len(m.Source) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Source)))
		i += copy(dAtA[i:], m.Source)
	}
	if len(m.OperateName) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.OperateName)))
		i += copy(dAtA[i:], m.OperateName)
	}
	if len(m.Reason) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Reason)))
		i += copy(dAtA[i:], m.Reason)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ClearStreamStatusReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClearStreamStatusReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.RoomId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.RoomId))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *CloseReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CloseReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *CloseReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CloseReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *CreateOfficalStreamReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateOfficalStreamReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Success {
		dAtA[i] = 0x8
		i++
		if m.Success {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *CreateOfficalStreamReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateOfficalStreamReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.StreamName) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.StreamName)))
		i += copy(dAtA[i:], m.StreamName)
	}
	if len(m.Key) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Key)))
		i += copy(dAtA[i:], m.Key)
	}
	if m.RoomId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.RoomId))
	}
	if len(m.Debug) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Debug)))
		i += copy(dAtA[i:], m.Debug)
	}
	if m.Uid != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Uid))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *AdapterStream) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AdapterStream) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Src != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Src))
	}
	if m.RoomId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.RoomId))
	}
	if m.UpRank != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.UpRank))
	}
	if len(m.SrcName) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.SrcName)))
		i += copy(dAtA[i:], m.SrcName)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GetAdapterStreamByStreamNameReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetAdapterStreamByStreamNameReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.List) > 0 {
		for k, _ := range m.List {
			dAtA[i] = 0xa
			i++
			v := m.List[k]
			msgSize := 0
			if v != nil {
				msgSize = v.Size()
				msgSize += 1 + sovApi(uint64(msgSize))
			}
			mapSize := 1 + len(k) + sovApi(uint64(len(k))) + msgSize
			i = encodeVarintApi(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintApi(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			if v != nil {
				dAtA[i] = 0x12
				i++
				i = encodeVarintApi(dAtA, i, uint64(v.Size()))
				n1, err := v.MarshalTo(dAtA[i:])
				if err != nil {
					return 0, err
				}
				i += n1
			}
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GetAdapterStreamByStreamNameReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetAdapterStreamByStreamNameReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.StreamNames) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.StreamNames)))
		i += copy(dAtA[i:], m.StreamNames)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *LineList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LineList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Src != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Src))
	}
	if m.Use {
		dAtA[i] = 0x10
		i++
		if m.Use {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.Desc) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Desc)))
		i += copy(dAtA[i:], m.Desc)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GetLineListByRoomIDReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetLineListByRoomIDReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, msg := range m.List {
			dAtA[i] = 0xa
			i++
			i = encodeVarintApi(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GetLineListByRoomIDReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetLineListByRoomIDReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.RoomId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.RoomId))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GetMultiScreenShotReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetMultiScreenShotReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.List) > 0 {
		for k, _ := range m.List {
			dAtA[i] = 0xa
			i++
			v := m.List[k]
			mapSize := 1 + sovApi(uint64(k)) + 1 + len(v) + sovApi(uint64(len(v)))
			i = encodeVarintApi(dAtA, i, uint64(mapSize))
			dAtA[i] = 0x8
			i++
			i = encodeVarintApi(dAtA, i, uint64(k))
			dAtA[i] = 0x12
			i++
			i = encodeVarintApi(dAtA, i, uint64(len(v)))
			i += copy(dAtA[i:], v)
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GetMultiScreenShotReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetMultiScreenShotReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.RoomIds) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.RoomIds)))
		i += copy(dAtA[i:], m.RoomIds)
	}
	if m.Ts != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Ts))
	}
	if len(m.Channel) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Channel)))
		i += copy(dAtA[i:], m.Channel)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GetMultiStreamInfoReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetMultiStreamInfoReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Code))
	}
	if len(m.Message) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Message)))
		i += copy(dAtA[i:], m.Message)
	}
	if len(m.Data) > 0 {
		for k, _ := range m.Data {
			dAtA[i] = 0x1a
			i++
			v := m.Data[k]
			msgSize := 0
			if v != nil {
				msgSize = v.Size()
				msgSize += 1 + sovApi(uint64(msgSize))
			}
			mapSize := 1 + sovApi(uint64(k)) + msgSize
			i = encodeVarintApi(dAtA, i, uint64(mapSize))
			dAtA[i] = 0x8
			i++
			i = encodeVarintApi(dAtA, i, uint64(k))
			if v != nil {
				dAtA[i] = 0x12
				i++
				i = encodeVarintApi(dAtA, i, uint64(v.Size()))
				n2, err := v.MarshalTo(dAtA[i:])
				if err != nil {
					return 0, err
				}
				i += n2
			}
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GetMultiStreamInfoReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetMultiStreamInfoReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.RoomIds) > 0 {
		dAtA4 := make([]byte, len(m.RoomIds)*10)
		var j3 int
		for _, num := range m.RoomIds {
			for num >= 1<<7 {
				dAtA4[j3] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j3++
			}
			dAtA4[j3] = uint8(num)
			j3++
		}
		dAtA[i] = 0xa
		i++
		i = encodeVarintApi(dAtA, i, uint64(j3))
		i += copy(dAtA[i:], dAtA4[:j3])
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GetOriginScreenShotPicReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetOriginScreenShotPicReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.List) > 0 {
		for k, _ := range m.List {
			dAtA[i] = 0xa
			i++
			v := m.List[k]
			mapSize := 1 + sovApi(uint64(k)) + 1 + len(v) + sovApi(uint64(len(v)))
			i = encodeVarintApi(dAtA, i, uint64(mapSize))
			dAtA[i] = 0x8
			i++
			i = encodeVarintApi(dAtA, i, uint64(k))
			dAtA[i] = 0x12
			i++
			i = encodeVarintApi(dAtA, i, uint64(len(v)))
			i += copy(dAtA[i:], v)
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GetOriginScreenShotPicReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetOriginScreenShotPicReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.RoomIds) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.RoomIds)))
		i += copy(dAtA[i:], m.RoomIds)
	}
	if m.Ts != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Ts))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GetRoomIDByStreamNameReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetRoomIDByStreamNameReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.RoomId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.RoomId))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GetRoomIDByStreamNameReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetRoomIDByStreamNameReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.StreamName) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.StreamName)))
		i += copy(dAtA[i:], m.StreamName)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GetSingleScreeShotReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetSingleScreeShotReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, s := range m.List {
			dAtA[i] = 0xa
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GetSingleScreeShotReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetSingleScreeShotReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.RoomId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.RoomId))
	}
	if len(m.StartTime) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.StartTime)))
		i += copy(dAtA[i:], m.StartTime)
	}
	if len(m.EndTime) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.EndTime)))
		i += copy(dAtA[i:], m.EndTime)
	}
	if len(m.Channel) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Channel)))
		i += copy(dAtA[i:], m.Channel)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *RoomSrcCheck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RoomSrcCheck) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Src != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Src))
	}
	if m.Checked != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Checked))
	}
	if len(m.Desc) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Desc)))
		i += copy(dAtA[i:], m.Desc)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GetSrcByRoomIDReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetSrcByRoomIDReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, msg := range m.List {
			dAtA[i] = 0xa
			i++
			i = encodeVarintApi(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GetSrcByRoomIDReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetSrcByRoomIDReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.RoomId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.RoomId))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GetStreamInfoReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetStreamInfoReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Code))
	}
	if len(m.Message) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Message)))
		i += copy(dAtA[i:], m.Message)
	}
	if m.Data != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Data.Size()))
		n5, err := m.Data.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GetStreamInfoReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetStreamInfoReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.RoomId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.RoomId))
	}
	if len(m.StreamName) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.StreamName)))
		i += copy(dAtA[i:], m.StreamName)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GetStreamLastTimeReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetStreamLastTimeReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.LastTime != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.LastTime))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GetStreamLastTimeReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetStreamLastTimeReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.RoomId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.RoomId))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GetStreamNameByRoomIDReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetStreamNameByRoomIDReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.StreamName) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.StreamName)))
		i += copy(dAtA[i:], m.StreamName)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GetStreamNameByRoomIDReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetStreamNameByRoomIDReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.RoomId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.RoomId))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GetUpStreamRtmpReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetUpStreamRtmpReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Up != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Up.Size()))
		n6, err := m.Up.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GetUpStreamRtmpReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetUpStreamRtmpReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.RoomId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.RoomId))
	}
	if len(m.FreeFlow) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.FreeFlow)))
		i += copy(dAtA[i:], m.FreeFlow)
	}
	if len(m.Ip) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Ip)))
		i += copy(dAtA[i:], m.Ip)
	}
	if m.AreaId != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.AreaId))
	}
	if m.Attentions != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Attentions))
	}
	if m.Uid != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Uid))
	}
	if len(m.Platform) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Platform)))
		i += copy(dAtA[i:], m.Platform)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *StreamBase) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StreamBase) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.StreamName) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.StreamName)))
		i += copy(dAtA[i:], m.StreamName)
	}
	if m.DefaultUpstream != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.DefaultUpstream))
	}
	if m.Origin != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Origin))
	}
	if len(m.Forward) > 0 {
		dAtA8 := make([]byte, len(m.Forward)*10)
		var j7 int
		for _, num := range m.Forward {
			for num >= 1<<7 {
				dAtA8[j7] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j7++
			}
			dAtA8[j7] = uint8(num)
			j7++
		}
		dAtA[i] = 0x22
		i++
		i = encodeVarintApi(dAtA, i, uint64(j7))
		i += copy(dAtA[i:], dAtA8[:j7])
	}
	if m.Type != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Type))
	}
	if len(m.Key) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Key)))
		i += copy(dAtA[i:], m.Key)
	}
	if m.Options != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Options))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *StreamFullInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StreamFullInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.RoomId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.RoomId))
	}
	if m.Hot != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Hot))
	}
	if len(m.List) > 0 {
		for _, msg := range m.List {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintApi(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *PingReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PingReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *PingReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PingReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *UpStreamRtmp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpStreamRtmp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Addr) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Addr)))
		i += copy(dAtA[i:], m.Addr)
	}
	if len(m.Code) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Code)))
		i += copy(dAtA[i:], m.Code)
	}
	if len(m.NewLink) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.NewLink)))
		i += copy(dAtA[i:], m.NewLink)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *StreamCutReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StreamCutReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.RoomId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.RoomId))
	}
	if m.CutTime != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.CutTime))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *TimeTime) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TimeTime) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *CheckLiveStreamReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CheckLiveStreamReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.RoomId) > 0 {
		dAtA10 := make([]byte, len(m.RoomId)*10)
		var j9 int
		for _, num1 := range m.RoomId {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA10[j9] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j9++
			}
			dAtA10[j9] = uint8(num)
			j9++
		}
		dAtA[i] = 0xa
		i++
		i = encodeVarintApi(dAtA, i, uint64(j9))
		i += copy(dAtA[i:], dAtA10[:j9])
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *CheckLiveStreamReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CheckLiveStreamReply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.List) > 0 {
		for k, _ := range m.List {
			dAtA[i] = 0xa
			i++
			v := m.List[k]
			mapSize := 1 + sovApi(uint64(k)) + 1 + 1
			i = encodeVarintApi(dAtA, i, uint64(mapSize))
			dAtA[i] = 0x8
			i++
			i = encodeVarintApi(dAtA, i, uint64(k))
			dAtA[i] = 0x10
			i++
			if v {
				dAtA[i] = 1
			} else {
				dAtA[i] = 0
			}
			i++
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintApi(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *EmptyStruct) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ChangeSrcReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RoomId != 0 {
		n += 1 + sovApi(uint64(m.RoomId))
	}
	if m.Src != 0 {
		n += 1 + sovApi(uint64(m.Src))
	}
	l = len(m.Source)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.OperateName)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Reason)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ClearStreamStatusReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RoomId != 0 {
		n += 1 + sovApi(uint64(m.RoomId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CloseReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CloseReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CreateOfficalStreamReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Success {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CreateOfficalStreamReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.StreamName)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.RoomId != 0 {
		n += 1 + sovApi(uint64(m.RoomId))
	}
	l = len(m.Debug)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Uid != 0 {
		n += 1 + sovApi(uint64(m.Uid))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AdapterStream) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Src != 0 {
		n += 1 + sovApi(uint64(m.Src))
	}
	if m.RoomId != 0 {
		n += 1 + sovApi(uint64(m.RoomId))
	}
	if m.UpRank != 0 {
		n += 1 + sovApi(uint64(m.UpRank))
	}
	l = len(m.SrcName)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetAdapterStreamByStreamNameReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.List) > 0 {
		for k, v := range m.List {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovApi(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovApi(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovApi(uint64(mapEntrySize))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetAdapterStreamByStreamNameReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.StreamNames)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *LineList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Src != 0 {
		n += 1 + sovApi(uint64(m.Src))
	}
	if m.Use {
		n += 2
	}
	l = len(m.Desc)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetLineListByRoomIDReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetLineListByRoomIDReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RoomId != 0 {
		n += 1 + sovApi(uint64(m.RoomId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetMultiScreenShotReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.List) > 0 {
		for k, v := range m.List {
			_ = k
			_ = v
			mapEntrySize := 1 + sovApi(uint64(k)) + 1 + len(v) + sovApi(uint64(len(v)))
			n += mapEntrySize + 1 + sovApi(uint64(mapEntrySize))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetMultiScreenShotReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RoomIds)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Ts != 0 {
		n += 1 + sovApi(uint64(m.Ts))
	}
	l = len(m.Channel)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetMultiStreamInfoReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovApi(uint64(m.Code))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if len(m.Data) > 0 {
		for k, v := range m.Data {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovApi(uint64(l))
			}
			mapEntrySize := 1 + sovApi(uint64(k)) + l
			n += mapEntrySize + 1 + sovApi(uint64(mapEntrySize))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetMultiStreamInfoReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.RoomIds) > 0 {
		l = 0
		for _, e := range m.RoomIds {
			l += sovApi(uint64(e))
		}
		n += 1 + sovApi(uint64(l)) + l
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetOriginScreenShotPicReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.List) > 0 {
		for k, v := range m.List {
			_ = k
			_ = v
			mapEntrySize := 1 + sovApi(uint64(k)) + 1 + len(v) + sovApi(uint64(len(v)))
			n += mapEntrySize + 1 + sovApi(uint64(mapEntrySize))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetOriginScreenShotPicReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RoomIds)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Ts != 0 {
		n += 1 + sovApi(uint64(m.Ts))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetRoomIDByStreamNameReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RoomId != 0 {
		n += 1 + sovApi(uint64(m.RoomId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetRoomIDByStreamNameReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.StreamName)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetSingleScreeShotReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, s := range m.List {
			l = len(s)
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetSingleScreeShotReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RoomId != 0 {
		n += 1 + sovApi(uint64(m.RoomId))
	}
	l = len(m.StartTime)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.EndTime)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Channel)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RoomSrcCheck) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Src != 0 {
		n += 1 + sovApi(uint64(m.Src))
	}
	if m.Checked != 0 {
		n += 1 + sovApi(uint64(m.Checked))
	}
	l = len(m.Desc)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetSrcByRoomIDReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetSrcByRoomIDReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RoomId != 0 {
		n += 1 + sovApi(uint64(m.RoomId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetStreamInfoReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovApi(uint64(m.Code))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Data != nil {
		l = m.Data.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetStreamInfoReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RoomId != 0 {
		n += 1 + sovApi(uint64(m.RoomId))
	}
	l = len(m.StreamName)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetStreamLastTimeReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LastTime != 0 {
		n += 1 + sovApi(uint64(m.LastTime))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetStreamLastTimeReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RoomId != 0 {
		n += 1 + sovApi(uint64(m.RoomId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetStreamNameByRoomIDReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.StreamName)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetStreamNameByRoomIDReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RoomId != 0 {
		n += 1 + sovApi(uint64(m.RoomId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetUpStreamRtmpReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Up != nil {
		l = m.Up.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetUpStreamRtmpReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RoomId != 0 {
		n += 1 + sovApi(uint64(m.RoomId))
	}
	l = len(m.FreeFlow)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Ip)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.AreaId != 0 {
		n += 1 + sovApi(uint64(m.AreaId))
	}
	if m.Attentions != 0 {
		n += 1 + sovApi(uint64(m.Attentions))
	}
	if m.Uid != 0 {
		n += 1 + sovApi(uint64(m.Uid))
	}
	l = len(m.Platform)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *StreamBase) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.StreamName)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.DefaultUpstream != 0 {
		n += 1 + sovApi(uint64(m.DefaultUpstream))
	}
	if m.Origin != 0 {
		n += 1 + sovApi(uint64(m.Origin))
	}
	if len(m.Forward) > 0 {
		l = 0
		for _, e := range m.Forward {
			l += sovApi(uint64(e))
		}
		n += 1 + sovApi(uint64(l)) + l
	}
	if m.Type != 0 {
		n += 1 + sovApi(uint64(m.Type))
	}
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Options != 0 {
		n += 1 + sovApi(uint64(m.Options))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *StreamFullInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RoomId != 0 {
		n += 1 + sovApi(uint64(m.RoomId))
	}
	if m.Hot != 0 {
		n += 1 + sovApi(uint64(m.Hot))
	}
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PingReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PingReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpStreamRtmp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Addr)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Code)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.NewLink)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *StreamCutReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RoomId != 0 {
		n += 1 + sovApi(uint64(m.RoomId))
	}
	if m.CutTime != 0 {
		n += 1 + sovApi(uint64(m.CutTime))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TimeTime) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CheckLiveStreamReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.RoomId) > 0 {
		l = 0
		for _, e := range m.RoomId {
			l += sovApi(uint64(e))
		}
		n += 1 + sovApi(uint64(l)) + l
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CheckLiveStreamReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.List) > 0 {
		for k, v := range m.List {
			_ = k
			_ = v
			mapEntrySize := 1 + sovApi(uint64(k)) + 1 + 1
			n += mapEntrySize + 1 + sovApi(uint64(mapEntrySize))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovApi(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozApi(x uint64) (n int) {
	return sovApi(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *EmptyStruct) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EmptyStruct: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EmptyStruct: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChangeSrcReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChangeSrcReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChangeSrcReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoomId", wireType)
			}
			m.RoomId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RoomId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Src", wireType)
			}
			m.Src = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Src |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Source", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Source = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperateName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OperateName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reason = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClearStreamStatusReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClearStreamStatusReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClearStreamStatusReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoomId", wireType)
			}
			m.RoomId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RoomId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CloseReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CloseReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CloseReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CloseReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CloseReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CloseReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateOfficalStreamReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateOfficalStreamReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateOfficalStreamReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Success", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Success = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateOfficalStreamReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateOfficalStreamReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateOfficalStreamReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StreamName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StreamName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoomId", wireType)
			}
			m.RoomId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RoomId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debug", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Debug = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AdapterStream) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AdapterStream: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AdapterStream: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Src", wireType)
			}
			m.Src = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Src |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoomId", wireType)
			}
			m.RoomId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RoomId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpRank", wireType)
			}
			m.UpRank = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpRank |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SrcName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SrcName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetAdapterStreamByStreamNameReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetAdapterStreamByStreamNameReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetAdapterStreamByStreamNameReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.List == nil {
				m.List = make(map[string]*AdapterStream)
			}
			var mapkey string
			var mapvalue *AdapterStream
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthApi
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= (int(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthApi
					}
					postmsgIndex := iNdEx + mapmsglen
					if mapmsglen < 0 {
						return ErrInvalidLengthApi
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &AdapterStream{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipApi(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthApi
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.List[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetAdapterStreamByStreamNameReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetAdapterStreamByStreamNameReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetAdapterStreamByStreamNameReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StreamNames", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StreamNames = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LineList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LineList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LineList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Src", wireType)
			}
			m.Src = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Src |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Use", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Use = bool(v != 0)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Desc", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Desc = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetLineListByRoomIDReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetLineListByRoomIDReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetLineListByRoomIDReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &LineList{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetLineListByRoomIDReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetLineListByRoomIDReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetLineListByRoomIDReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoomId", wireType)
			}
			m.RoomId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RoomId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetMultiScreenShotReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetMultiScreenShotReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetMultiScreenShotReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.List == nil {
				m.List = make(map[int64]string)
			}
			var mapkey int64
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= (int64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthApi
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipApi(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthApi
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.List[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetMultiScreenShotReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetMultiScreenShotReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetMultiScreenShotReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoomIds", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RoomIds = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ts", wireType)
			}
			m.Ts = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ts |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Channel", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Channel = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetMultiStreamInfoReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetMultiStreamInfoReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetMultiStreamInfoReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = make(map[uint32]*StreamFullInfo)
			}
			var mapkey uint32
			var mapvalue *StreamFullInfo
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= (uint32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= (int(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthApi
					}
					postmsgIndex := iNdEx + mapmsglen
					if mapmsglen < 0 {
						return ErrInvalidLengthApi
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &StreamFullInfo{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipApi(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthApi
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Data[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetMultiStreamInfoReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetMultiStreamInfoReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetMultiStreamInfoReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (uint32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.RoomIds = append(m.RoomIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthApi
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.RoomIds) == 0 {
					m.RoomIds = make([]uint32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (uint32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.RoomIds = append(m.RoomIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field RoomIds", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetOriginScreenShotPicReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetOriginScreenShotPicReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetOriginScreenShotPicReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.List == nil {
				m.List = make(map[int64]string)
			}
			var mapkey int64
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= (int64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthApi
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipApi(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthApi
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.List[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetOriginScreenShotPicReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetOriginScreenShotPicReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetOriginScreenShotPicReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoomIds", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RoomIds = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ts", wireType)
			}
			m.Ts = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ts |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetRoomIDByStreamNameReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetRoomIDByStreamNameReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetRoomIDByStreamNameReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoomId", wireType)
			}
			m.RoomId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RoomId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetRoomIDByStreamNameReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetRoomIDByStreamNameReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetRoomIDByStreamNameReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StreamName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StreamName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetSingleScreeShotReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetSingleScreeShotReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetSingleScreeShotReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetSingleScreeShotReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetSingleScreeShotReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetSingleScreeShotReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoomId", wireType)
			}
			m.RoomId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RoomId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StartTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EndTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Channel", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Channel = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RoomSrcCheck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RoomSrcCheck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RoomSrcCheck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Src", wireType)
			}
			m.Src = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Src |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Checked", wireType)
			}
			m.Checked = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Checked |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Desc", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Desc = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetSrcByRoomIDReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetSrcByRoomIDReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetSrcByRoomIDReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &RoomSrcCheck{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetSrcByRoomIDReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetSrcByRoomIDReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetSrcByRoomIDReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoomId", wireType)
			}
			m.RoomId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RoomId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetStreamInfoReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetStreamInfoReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetStreamInfoReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = &StreamFullInfo{}
			}
			if err := m.Data.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetStreamInfoReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetStreamInfoReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetStreamInfoReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoomId", wireType)
			}
			m.RoomId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RoomId |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StreamName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StreamName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetStreamLastTimeReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetStreamLastTimeReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetStreamLastTimeReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastTime", wireType)
			}
			m.LastTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastTime |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetStreamLastTimeReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetStreamLastTimeReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetStreamLastTimeReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoomId", wireType)
			}
			m.RoomId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RoomId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetStreamNameByRoomIDReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetStreamNameByRoomIDReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetStreamNameByRoomIDReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StreamName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StreamName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetStreamNameByRoomIDReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetStreamNameByRoomIDReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetStreamNameByRoomIDReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoomId", wireType)
			}
			m.RoomId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RoomId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetUpStreamRtmpReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetUpStreamRtmpReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetUpStreamRtmpReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Up", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Up == nil {
				m.Up = &UpStreamRtmp{}
			}
			if err := m.Up.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetUpStreamRtmpReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetUpStreamRtmpReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetUpStreamRtmpReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoomId", wireType)
			}
			m.RoomId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RoomId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FreeFlow", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FreeFlow = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ip", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ip = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AreaId", wireType)
			}
			m.AreaId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AreaId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attentions", wireType)
			}
			m.Attentions = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Attentions |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Platform", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Platform = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StreamBase) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StreamBase: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StreamBase: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StreamName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StreamName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultUpstream", wireType)
			}
			m.DefaultUpstream = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DefaultUpstream |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Origin", wireType)
			}
			m.Origin = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Origin |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (uint32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Forward = append(m.Forward, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthApi
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Forward) == 0 {
					m.Forward = make([]uint32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (uint32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Forward = append(m.Forward, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Forward", wireType)
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Options", wireType)
			}
			m.Options = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Options |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StreamFullInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StreamFullInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StreamFullInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoomId", wireType)
			}
			m.RoomId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RoomId |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hot", wireType)
			}
			m.Hot = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Hot |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &StreamBase{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PingReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PingReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PingReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PingReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PingReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PingReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpStreamRtmp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpStreamRtmp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpStreamRtmp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Addr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Addr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Code = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewLink", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NewLink = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StreamCutReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StreamCutReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StreamCutReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoomId", wireType)
			}
			m.RoomId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RoomId |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CutTime", wireType)
			}
			m.CutTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CutTime |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TimeTime) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TimeTime: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TimeTime: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CheckLiveStreamReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CheckLiveStreamReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CheckLiveStreamReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.RoomId = append(m.RoomId, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthApi
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.RoomId) == 0 {
					m.RoomId = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.RoomId = append(m.RoomId, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field RoomId", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CheckLiveStreamReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CheckLiveStreamReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CheckLiveStreamReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.List == nil {
				m.List = make(map[int64]bool)
			}
			var mapkey int64
			var mapvalue bool
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= (int64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapvaluetemp int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvaluetemp |= (int(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					mapvalue = bool(mapvaluetemp != 0)
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipApi(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthApi
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.List[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipApi(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowApi
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowApi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowApi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthApi
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowApi
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipApi(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthApi = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowApi   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("app/service/video/stream-mng/api/v1/api.proto", fileDescriptor_api_5ed0cf4deb5559e0)
}

var fileDescriptor_api_5ed0cf4deb5559e0 = []byte{
	// 1757 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x58, 0x4b, 0x6f, 0xdb, 0xca,
	0x15, 0x06, 0x25, 0xdb, 0x92, 0x8e, 0xa4, 0x5c, 0xdd, 0x89, 0xeb, 0x2b, 0x33, 0xad, 0xed, 0xb0,
	0x6e, 0xeb, 0xde, 0xc6, 0x52, 0x6c, 0xdf, 0x47, 0x1e, 0x0d, 0x8a, 0xca, 0x49, 0x8c, 0x04, 0xce,
	0x8b, 0x6a, 0x52, 0xa0, 0x28, 0x2a, 0x8c, 0xa9, 0x91, 0x4c, 0x98, 0x22, 0x29, 0x72, 0x28, 0xc3,
	0x8b, 0x16, 0x5d, 0x74, 0xd9, 0x55, 0x17, 0xdd, 0x74, 0xd5, 0x65, 0x7f, 0x46, 0x57, 0xed, 0xb2,
	0x3f, 0xa0, 0x30, 0x82, 0x2c, 0xfd, 0x07, 0xba, 0x2d, 0xe6, 0x41, 0x89, 0x94, 0x48, 0x5a, 0x4a,
	0xee, 0x4a, 0x73, 0x46, 0x67, 0xce, 0x99, 0xf3, 0x9d, 0x27, 0x07, 0x76, 0xb1, 0xeb, 0x36, 0x7d,
	0xe2, 0x8d, 0x4c, 0x83, 0x34, 0x47, 0x66, 0x97, 0x38, 0x4d, 0x9f, 0x7a, 0x04, 0x0f, 0x76, 0x07,
	0x76, 0xbf, 0x89, 0x5d, 0xb3, 0x39, 0xda, 0x63, 0x3f, 0x0d, 0xd7, 0x73, 0xa8, 0x83, 0xd6, 0x38,
	0x4b, 0xc3, 0x32, 0x47, 0xa4, 0x21, 0xf8, 0xec, 0x7e, 0x63, 0xb4, 0xa7, 0xee, 0xf6, 0x4d, 0x7a,
	0x1a, 0x9c, 0x34, 0x0c, 0x67, 0xd0, 0xec, 0x3b, 0x7d, 0xa7, 0xc9, 0xd9, 0x4f, 0x82, 0x1e, 0xa7,
	0x38, 0xc1, 0x57, 0x42, 0x8c, 0x56, 0x85, 0xf2, 0x93, 0x81, 0x4b, 0x2f, 0xda, 0xd4, 0x0b, 0x0c,
	0xaa, 0xfd, 0x59, 0x81, 0xca, 0xe1, 0x29, 0xb6, 0xfb, 0xa4, 0xed, 0x19, 0x3a, 0x19, 0xa2, 0x2f,
	0xa0, 0xe0, 0x39, 0xce, 0xa0, 0x63, 0x76, 0xeb, 0xca, 0x96, 0xb2, 0x93, 0xd7, 0x57, 0x18, 0xf9,
	0xac, 0x8b, 0x6a, 0x90, 0xf7, 0x3d, 0xa3, 0x9e, 0xe3, 0x9b, 0x6c, 0x89, 0xd6, 0x60, 0xc5, 0x77,
	0x02, 0xcf, 0x20, 0xf5, 0xfc, 0x96, 0xb2, 0x53, 0xd2, 0x25, 0x85, 0x6e, 0x43, 0xc5, 0x71, 0x89,
	0x87, 0x29, 0xe9, 0xd8, 0x78, 0x40, 0xea, 0x4b, 0xfc, 0xdf, 0xb2, 0xdc, 0x7b, 0x89, 0x07, 0x84,
	0x1d, 0xf5, 0x08, 0xf6, 0x1d, 0xbb, 0xbe, 0x2c, 0x8e, 0x0a, 0x4a, 0x6b, 0xc2, 0xea, 0xa1, 0x45,
	0xb0, 0xd7, 0xe6, 0x06, 0xb6, 0x29, 0xa6, 0x81, 0x9f, 0x75, 0x2b, 0xad, 0x02, 0x70, 0x68, 0x39,
	0x3e, 0xd1, 0x89, 0x6b, 0x5d, 0x68, 0x00, 0x45, 0x49, 0x0d, 0xb5, 0xaf, 0xa0, 0x7e, 0xe8, 0x11,
	0x4c, 0xc9, 0xab, 0x5e, 0xcf, 0x34, 0xb0, 0x25, 0x44, 0x72, 0x3e, 0x54, 0x87, 0x82, 0x1f, 0x18,
	0x06, 0xf1, 0x7d, 0x2e, 0xae, 0xa8, 0x87, 0x24, 0xc3, 0x63, 0x2d, 0xf1, 0xd8, 0x10, 0x6d, 0x42,
	0x59, 0xe0, 0x2e, 0xac, 0x52, 0xf8, 0xc5, 0x41, 0x6c, 0x71, 0xa3, 0x6a, 0x90, 0x3f, 0x23, 0x17,
	0x1c, 0xa1, 0x92, 0xce, 0x96, 0xd1, 0x6b, 0xe7, 0x63, 0x60, 0xae, 0xc2, 0x72, 0x97, 0x9c, 0x04,
	0x7d, 0x89, 0x8d, 0x20, 0x98, 0x80, 0xc0, 0xec, 0x72, 0x48, 0xf2, 0x3a, 0x5b, 0x6a, 0x7f, 0x55,
	0xa0, 0xfa, 0xcb, 0x2e, 0x76, 0x29, 0x91, 0x90, 0x84, 0x6e, 0x50, 0x26, 0x6e, 0xd8, 0x9e, 0x28,
	0xe1, 0xce, 0x69, 0x95, 0xaf, 0x2e, 0x37, 0xc3, 0xad, 0xb1, 0xc6, 0x6d, 0x28, 0x04, 0x6e, 0xc7,
	0xc3, 0xf6, 0x99, 0xb8, 0x8a, 0xe0, 0x92, 0x5b, 0xfa, 0x4a, 0xe0, 0xea, 0xd8, 0x3e, 0x43, 0x3f,
	0x81, 0xa2, 0xef, 0x19, 0x11, 0xb7, 0xb5, 0x2a, 0x57, 0x97, 0x9b, 0xe3, 0x3d, 0xbd, 0xe0, 0x7b,
	0x06, 0xb3, 0x55, 0xfb, 0xaf, 0x02, 0xb7, 0x8f, 0x08, 0x8d, 0xdd, 0xad, 0x75, 0xd1, 0x1e, 0x83,
	0x21, 0x70, 0xfe, 0x35, 0x2c, 0x59, 0xa6, 0x4f, 0xeb, 0xca, 0x56, 0x7e, 0xa7, 0xbc, 0x7f, 0xd8,
	0x48, 0x0e, 0xe1, 0xc6, 0xb5, 0x82, 0x1a, 0xc7, 0xa6, 0x4f, 0x9f, 0xd8, 0xd4, 0xbb, 0xd0, 0xb9,
	0x40, 0xf5, 0x77, 0x50, 0x1a, 0x6f, 0x85, 0xb8, 0x2b, 0x13, 0xdc, 0x1f, 0xc2, 0xf2, 0x08, 0x5b,
	0x01, 0xe1, 0x80, 0x94, 0xf7, 0x7f, 0x94, 0xa6, 0x38, 0xa6, 0x55, 0x17, 0x67, 0x1e, 0xe4, 0xee,
	0x29, 0xda, 0x3b, 0xd8, 0xcc, 0xbe, 0xd4, 0x10, 0x1d, 0x40, 0x25, 0x12, 0x0e, 0x22, 0x90, 0x4a,
	0xad, 0xda, 0xd5, 0xe5, 0x66, 0x6c, 0x5f, 0x2f, 0x4f, 0x22, 0xc4, 0xd7, 0x5a, 0x50, 0x3c, 0x36,
	0x6d, 0xc2, 0xee, 0x9e, 0xe0, 0x49, 0xe6, 0x7f, 0x5f, 0x5c, 0xba, 0xa8, 0xb3, 0x25, 0x42, 0xb0,
	0xd4, 0x25, 0xbe, 0x21, 0x13, 0x8c, 0xaf, 0xb5, 0xd7, 0x50, 0x3f, 0x22, 0x34, 0x14, 0xd3, 0xba,
	0xd0, 0x99, 0x83, 0x1f, 0x0b, 0xc0, 0xbf, 0x8a, 0x01, 0xbe, 0x95, 0x66, 0x77, 0x78, 0x58, 0xa0,
	0xa9, 0xed, 0xc1, 0x5a, 0xa2, 0xc4, 0x8c, 0xbc, 0xfb, 0xbb, 0x02, 0x5f, 0x1c, 0x11, 0xfa, 0x22,
	0xb0, 0xa8, 0xd9, 0x36, 0x3c, 0x42, 0xec, 0xf6, 0xa9, 0x43, 0xc5, 0x25, 0x5e, 0xc4, 0x2e, 0x71,
	0x3f, 0xc3, 0xeb, 0x49, 0xc7, 0x67, 0x7c, 0xfd, 0x6d, 0x8a, 0xaf, 0xf3, 0xc2, 0xd7, 0xab, 0x51,
	0x5f, 0x97, 0xa2, 0x4e, 0xfc, 0x2d, 0x7c, 0x2f, 0x49, 0xc7, 0x10, 0xad, 0x43, 0x51, 0x5a, 0x25,
	0xdd, 0xa6, 0x17, 0x84, 0x59, 0x3e, 0xba, 0x01, 0x39, 0xea, 0xcb, 0x22, 0x97, 0xa3, 0x3e, 0xab,
	0x14, 0xc6, 0x29, 0xb6, 0x6d, 0x62, 0x49, 0x1f, 0x84, 0xa4, 0xf6, 0xbf, 0x28, 0x02, 0xdc, 0xac,
	0x67, 0x76, 0xcf, 0x11, 0x08, 0x20, 0x58, 0x32, 0x9c, 0xae, 0xa8, 0x11, 0xcb, 0x3a, 0x5f, 0x33,
	0x49, 0x03, 0xe2, 0xfb, 0xb8, 0x1f, 0xde, 0x34, 0x24, 0x19, 0x5e, 0x5d, 0x4c, 0x71, 0x3d, 0x3f,
	0x27, 0x5e, 0x71, 0x65, 0x8d, 0xc7, 0x98, 0x62, 0x89, 0x17, 0x13, 0xa3, 0x76, 0xa0, 0x34, 0xde,
	0x8a, 0xe2, 0x55, 0x15, 0x78, 0xfd, 0x3c, 0x9e, 0x1b, 0x3f, 0x4e, 0x53, 0x27, 0xd4, 0x3c, 0x0d,
	0x2c, 0x8b, 0xab, 0x8a, 0xe0, 0xba, 0x1f, 0xc1, 0x35, 0x72, 0x97, 0x69, 0x5c, 0xf3, 0x3b, 0xd5,
	0x31, 0xae, 0xda, 0x3f, 0x14, 0xb8, 0x75, 0x44, 0xe8, 0x2b, 0xcf, 0xec, 0x9b, 0xf6, 0xc4, 0x1b,
	0xaf, 0x4d, 0x43, 0x20, 0xf6, 0x26, 0x16, 0x33, 0x8f, 0x32, 0x30, 0x48, 0x13, 0xf1, 0xdd, 0xc5,
	0xcd, 0x53, 0x58, 0x4f, 0xd3, 0xb3, 0x48, 0xec, 0x68, 0x5f, 0x83, 0x7a, 0x44, 0xa8, 0x48, 0xa6,
	0xd9, 0xda, 0x98, 0x9a, 0x5a, 0x0f, 0x79, 0x7e, 0x27, 0x1d, 0xbb, 0xbe, 0x07, 0x69, 0xbb, 0x3c,
	0x28, 0xdb, 0xa6, 0xdd, 0xb7, 0x08, 0xbf, 0xfb, 0x24, 0x2d, 0x51, 0x04, 0xe2, 0x92, 0xcc, 0xfc,
	0x3f, 0x29, 0xdc, 0x97, 0x33, 0xfc, 0x19, 0x73, 0xc0, 0x0f, 0x00, 0x7c, 0x8a, 0x3d, 0xda, 0xa1,
	0xe6, 0x20, 0x04, 0xaf, 0xc4, 0x77, 0x7e, 0x65, 0x0e, 0x08, 0xc3, 0x87, 0xd8, 0x5d, 0xf1, 0xa7,
	0xcc, 0x18, 0x62, 0x77, 0xf9, 0x5f, 0x91, 0x5c, 0x5a, 0x8a, 0xe7, 0xd2, 0x4b, 0xa8, 0x30, 0x7b,
	0xdb, 0x9e, 0x71, 0x78, 0x4a, 0x8c, 0xb3, 0x84, 0xd2, 0xc8, 0xcf, 0x12, 0xe3, 0x8c, 0x88, 0x26,
	0xb7, 0xac, 0x87, 0x64, 0x62, 0x89, 0x7c, 0x05, 0x37, 0x99, 0x55, 0x9e, 0x11, 0xaf, 0x8e, 0xf7,
	0x62, 0x41, 0xb6, 0x9d, 0x16, 0x64, 0xd1, 0xab, 0x48, 0x9c, 0xee, 0xc0, 0xe7, 0xd3, 0x02, 0x33,
	0x8a, 0xe3, 0x1f, 0x00, 0x31, 0xee, 0x4f, 0x2a, 0x0a, 0x0f, 0xc6, 0x45, 0x61, 0x91, 0x2c, 0xe5,
	0x67, 0xb4, 0x63, 0xa8, 0x4d, 0xe9, 0x9f, 0xb9, 0x6c, 0x75, 0xec, 0xcf, 0xa9, 0x90, 0xca, 0xcd,
	0x84, 0xd4, 0xd7, 0xbc, 0x3b, 0x08, 0x69, 0xc7, 0xd8, 0xe7, 0x6e, 0x16, 0x16, 0xdd, 0x82, 0x92,
	0x85, 0x7d, 0x19, 0x09, 0x02, 0x82, 0xa2, 0x25, 0x39, 0xd8, 0x28, 0x97, 0x70, 0x2c, 0x03, 0xb5,
	0x47, 0x3c, 0x5d, 0x26, 0xf1, 0x1e, 0xf7, 0xdd, 0xb5, 0x91, 0x7f, 0xc0, 0xd3, 0x26, 0xe9, 0x78,
	0x86, 0xce, 0x63, 0x7e, 0xc9, 0xb7, 0xae, 0x9c, 0x00, 0xe8, 0xc0, 0x0d, 0xfb, 0x68, 0x2e, 0x70,
	0x39, 0x6f, 0x46, 0x9c, 0xc4, 0x8e, 0xe5, 0x02, 0x57, 0xfb, 0xa7, 0xc2, 0x1d, 0x1f, 0x17, 0x97,
	0x91, 0x4a, 0xb7, 0xa0, 0xd4, 0xf3, 0x08, 0xe9, 0xf4, 0x2c, 0xe7, 0x5c, 0x02, 0x5f, 0x64, 0x1b,
	0x4f, 0x2d, 0xe7, 0x9c, 0x55, 0x13, 0xd3, 0x95, 0x51, 0x9d, 0x33, 0x5d, 0x26, 0x05, 0x7b, 0x04,
	0x33, 0x29, 0x4b, 0x42, 0x0a, 0x23, 0x9f, 0x75, 0xd1, 0x06, 0x00, 0xa6, 0x94, 0xd8, 0xd4, 0x74,
	0x6c, 0x9f, 0x0f, 0x8f, 0xcb, 0x7a, 0x64, 0x27, 0x9c, 0x2a, 0x57, 0xc6, 0x53, 0x25, 0x52, 0xa1,
	0xe8, 0x5a, 0x98, 0xf6, 0x1c, 0x6f, 0x50, 0x2f, 0x08, 0xb5, 0x21, 0xad, 0xbd, 0x57, 0x00, 0xe4,
	0xc0, 0x83, 0x7d, 0x72, 0xfd, 0xd0, 0xfb, 0x0b, 0xa8, 0x75, 0x49, 0x0f, 0x07, 0x16, 0xed, 0x04,
	0xae, 0xd8, 0xe7, 0xa6, 0x54, 0x5b, 0xab, 0x57, 0x97, 0x9b, 0x33, 0xff, 0xe9, 0x9f, 0xc9, 0x9d,
	0xb7, 0x72, 0x83, 0x7d, 0x0a, 0x38, 0xbc, 0xd4, 0x72, 0x5b, 0xab, 0xba, 0xa4, 0x58, 0x6a, 0xf4,
	0x1c, 0xef, 0x1c, 0x7b, 0xcc, 0x5e, 0xde, 0x4b, 0x24, 0xc9, 0x12, 0x89, 0x5e, 0xb8, 0x84, 0x9b,
	0x5a, 0xd5, 0xf9, 0x3a, 0xac, 0xef, 0x2b, 0x93, 0x19, 0xb0, 0x0e, 0x05, 0xc7, 0x15, 0x98, 0x14,
	0x38, 0x63, 0x48, 0x6a, 0x3e, 0xdc, 0x88, 0xa7, 0x4d, 0x7a, 0x72, 0xd4, 0x20, 0x7f, 0xea, 0x50,
	0x61, 0x90, 0xce, 0x96, 0xe8, 0x1b, 0x59, 0x43, 0x44, 0xb3, 0xd6, 0xb2, 0xf3, 0x92, 0x41, 0x28,
	0x2b, 0x48, 0x19, 0x4a, 0xaf, 0x4d, 0xbb, 0x2f, 0xbe, 0x53, 0x4a, 0x50, 0x10, 0xc4, 0x50, 0x7b,
	0x03, 0x95, 0x68, 0xbc, 0x30, 0xe3, 0x70, 0xb7, 0xeb, 0x49, 0xa4, 0xf9, 0x7a, 0x5c, 0x39, 0x44,
	0x88, 0x88, 0xca, 0xb1, 0x0e, 0x45, 0x9b, 0x9c, 0x77, 0x2c, 0x53, 0x0e, 0xf4, 0x25, 0xbd, 0x60,
	0x93, 0xf3, 0x63, 0xd3, 0x3e, 0xd3, 0x5a, 0x50, 0x11, 0x02, 0x0f, 0x83, 0xec, 0x52, 0xbe, 0x0e,
	0x45, 0x23, 0x88, 0x14, 0xf2, 0xbc, 0x5e, 0x30, 0x02, 0x91, 0xbd, 0x00, 0x45, 0xf6, 0xcb, 0xd7,
	0xbb, 0x80, 0x78, 0x2d, 0x3c, 0x36, 0x47, 0x64, 0xf2, 0x39, 0x14, 0x93, 0x9a, 0x8f, 0xe4, 0xd4,
	0xdf, 0x14, 0x58, 0x9d, 0xe1, 0x67, 0x49, 0xf5, 0x3c, 0x56, 0x7e, 0xbf, 0x49, 0x83, 0x2e, 0xe9,
	0xec, 0x27, 0x35, 0xf7, 0x62, 0xa4, 0xb9, 0xef, 0xff, 0xab, 0x06, 0x2b, 0xf2, 0x53, 0x8a, 0x8a,
	0x32, 0x1d, 0xef, 0x7d, 0x68, 0x37, 0x63, 0xf6, 0x98, 0xed, 0x93, 0x6a, 0x73, 0x11, 0x76, 0x86,
	0x82, 0xd0, 0x3a, 0x35, 0x95, 0x66, 0x6a, 0x9d, 0x9d, 0x60, 0x33, 0xb5, 0x26, 0xce, 0xe4, 0x7f,
	0x54, 0x78, 0x15, 0x4f, 0x18, 0x6a, 0xd0, 0xde, 0xa2, 0xc3, 0xd6, 0x50, 0x3d, 0xf8, 0x88, 0xf9,
	0x0c, 0x9d, 0xc3, 0xcd, 0x84, 0x2f, 0x6b, 0xd4, 0x48, 0x8d, 0x83, 0xc4, 0xcf, 0x70, 0xf5, 0xee,
	0x42, 0xfc, 0x4c, 0x31, 0x81, 0x6a, 0xac, 0x1d, 0xa2, 0x9d, 0x2c, 0x9f, 0x45, 0xbb, 0xa6, 0xfa,
	0xe5, 0x9c, 0x9c, 0xd3, 0x8e, 0x9d, 0xe8, 0xda, 0x5d, 0x64, 0x9c, 0x9f, 0xc7, 0xb1, 0x53, 0x5a,
	0xdf, 0x41, 0x69, 0xfc, 0x7e, 0x83, 0xb6, 0xd3, 0x73, 0x6a, 0xf2, 0xc4, 0xa3, 0xfe, 0x30, 0x8d,
	0x2b, 0xf2, 0x30, 0x84, 0x86, 0x62, 0xe2, 0x89, 0xb5, 0x6f, 0x74, 0xe7, 0x5a, 0x38, 0x22, 0x9d,
	0x5e, 0x6d, 0x2c, 0xc0, 0xcd, 0x4c, 0xf9, 0xbd, 0x98, 0x45, 0x67, 0x3a, 0x38, 0xba, 0x7b, 0xad,
	0xa0, 0xa9, 0x86, 0xaf, 0xee, 0x2f, 0x78, 0x62, 0xa2, 0x7e, 0x76, 0xee, 0xce, 0x54, 0x9f, 0x38,
	0xa6, 0x67, 0xaa, 0x4f, 0xfb, 0x1e, 0xf8, 0x8b, 0x02, 0xdf, 0xcf, 0x7a, 0x73, 0x40, 0xdf, 0x7e,
	0xdc, 0xf3, 0xc9, 0x50, 0xbd, 0xff, 0xd1, 0xef, 0x2e, 0xe8, 0x14, 0x6e, 0xc4, 0xe7, 0x5e, 0xf4,
	0xd3, 0x2c, 0x64, 0x63, 0xf3, 0xb1, 0xfa, 0xb3, 0x79, 0x59, 0x65, 0x75, 0x48, 0x78, 0x83, 0x40,
	0x59, 0x31, 0x94, 0xf0, 0x60, 0xa1, 0xde, 0x5d, 0x88, 0x9f, 0x29, 0x3e, 0x83, 0xcf, 0xa6, 0x66,
	0x36, 0x94, 0x95, 0xf5, 0x53, 0xc3, 0x9d, 0x7a, 0x67, 0x6e, 0x5e, 0x99, 0xad, 0xe3, 0xd6, 0x9c,
	0x9e, 0xad, 0xd1, 0xee, 0x3d, 0x5f, 0xb6, 0x3e, 0x87, 0x25, 0x36, 0x50, 0xa0, 0xcd, 0x34, 0x66,
	0x39, 0x6e, 0xa8, 0xb7, 0xb3, 0x19, 0xc4, 0xf3, 0xcd, 0x32, 0x7f, 0x44, 0x45, 0xa9, 0xcf, 0x47,
	0xe1, 0x1b, 0xab, 0xaa, 0x5d, 0xc3, 0xc1, 0xc4, 0xf5, 0xe0, 0xf3, 0x99, 0x27, 0xdd, 0xf4, 0x42,
	0x92, 0xf4, 0xfa, 0x3b, 0x1f, 0x04, 0x0e, 0xdc, 0x9c, 0x9a, 0x1c, 0xf8, 0x2b, 0xdb, 0x97, 0x73,
	0x8f, 0x19, 0x19, 0xbe, 0x4c, 0x1a, 0x49, 0x5a, 0xb5, 0x7f, 0x7f, 0xd8, 0x50, 0xfe, 0xf3, 0x61,
	0x43, 0x79, 0xff, 0x61, 0x43, 0xf9, 0x4d, 0x6e, 0xb4, 0x77, 0xb2, 0xc2, 0x9f, 0xd8, 0x0f, 0xfe,
	0x1f, 0x00, 0x00, 0xff, 0xff, 0xde, 0xd0, 0x16, 0x21, 0xda, 0x17, 0x00, 0x00,
}
